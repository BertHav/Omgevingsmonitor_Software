
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000231e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee8  080232a0  080232a0  000242a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026188  08026188  00028428  2**0
                  CONTENTS
  4 .ARM          00000008  08026188  08026188  00027188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026190  08026190  00028428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026190  08026190  00027190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026194  08026194  00027194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  08026198  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033a4  20000428  080265c0  00028428  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200037cc  080265c0  000287cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY
 12 .debug_info   000340d3  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000938d  00000000  00000000  0005c523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ac0  00000000  00000000  000658b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fba  00000000  00000000  00068370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b7b  00000000  00000000  0006a32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041afe  00000000  00000000  0008cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a098d  00000000  00000000  000ce9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae3c  00000000  00000000  0016f3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017c809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023288 	.word	0x08023288

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	08023288 	.word	0x08023288

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802539c 	.word	0x0802539c
 8000e0c:	080253dc 	.word	0x080253dc
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025418 	.word	0x08025418
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fc50 	bl	800ff08 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fca7 	bl	800ffd8 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fc5a 	bl	800ff64 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000444 	.word	0x20000444

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fbd6 	bl	800ff08 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fc05 	bl	800ff80 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fbe9 	bl	800ff64 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000028 	.word	0x20000028

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fb70 	bl	800ee9c <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a08 	.word	0x20000a08

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd96 	bl	8006308 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fdf3 	bl	80063cc <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000570 	.word	0x20000570
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000574 	.word	0x20000574

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a3c 	.word	0x20000a3c
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a48 	.word	0x20000a48
 8003884:	20000a4c 	.word	0x20000a4c

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a50 	.word	0x20000a50
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a70 	.word	0x20000a70
 80038f0:	20000a74 	.word	0x20000a74

080038f4 <setHIDS>:


void setHIDS(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <setHIDS+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <setHIDS+0x20>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]
  if (SSD1306detected) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000a14 	.word	0x20000a14

08003918 <setVOC>:

void setVOC(uint16_t voc){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	0002      	movs	r2, r0
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <setVOC+0x1c>)
 8003926:	1dba      	adds	r2, r7, #6
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	831a      	strh	r2, [r3, #24]
#ifdef SSD1306
  if (SSD1306detected) {
    displayVOC();
  }
#endif
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000a14 	.word	0x20000a14

08003938 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <setMic+0x28>)
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	61da      	str	r2, [r3, #28]
  MeasVal.dBApeak = dBmax;
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <setMic+0x28>)
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	621a      	str	r2, [r3, #32]
  MeasVal.dBAaverage = dBAavg;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <setMic+0x28>)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24
  if (SSD1306detected) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	20000a14 	.word	0x20000a14

08003964 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	1c0a      	adds	r2, r1, #0
 8003974:	801a      	strh	r2, [r3, #0]
  MeasVal.airPM2 = PM2 / 10.0f;
 8003976:	1dbb      	adds	r3, r7, #6
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	f7fd fe28 	bl	80015d0 <__aeabi_i2f>
 8003980:	1c03      	adds	r3, r0, #0
 8003982:	490d      	ldr	r1, [pc, #52]	@ (80039b8 <setPMsen50+0x54>)
 8003984:	1c18      	adds	r0, r3, #0
 8003986:	f7fd f925 	bl	8000bd4 <__aeabi_fdiv>
 800398a:	1c03      	adds	r3, r0, #0
 800398c:	1c1a      	adds	r2, r3, #0
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <setPMsen50+0x58>)
 8003990:	609a      	str	r2, [r3, #8]
  MeasVal.airPM10 = PM10 / 10.0f;
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe1a 	bl	80015d0 <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	4906      	ldr	r1, [pc, #24]	@ (80039b8 <setPMsen50+0x54>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd f917 	bl	8000bd4 <__aeabi_fdiv>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <setPMsen50+0x58>)
 80039ac:	60da      	str	r2, [r3, #12]
#ifdef SSD1306
  if (SSD1306detected) {
    displayPMs();
  }
#endif
}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	41200000 	.word	0x41200000
 80039bc:	20000a14 	.word	0x20000a14

080039c0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	0005      	movs	r5, r0
 80039c8:	000c      	movs	r4, r1
 80039ca:	0010      	movs	r0, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	1dbb      	adds	r3, r7, #6
 80039d0:	1c2a      	adds	r2, r5, #0
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	1c22      	adds	r2, r4, #0
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	1cbb      	adds	r3, r7, #2
 80039dc:	1c02      	adds	r2, r0, #0
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	003b      	movs	r3, r7
 80039e2:	1c0a      	adds	r2, r1, #0
 80039e4:	801a      	strh	r2, [r3, #0]
//  Debug("SetPMs entered");
  MeasVal.airPM2 = PM2 / 10.0f;
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fd fdf0 	bl	80015d0 <__aeabi_i2f>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	4924      	ldr	r1, [pc, #144]	@ (8003a84 <setPMs+0xc4>)
 80039f4:	1c18      	adds	r0, r3, #0
 80039f6:	f7fd f8ed 	bl	8000bd4 <__aeabi_fdiv>
 80039fa:	1c03      	adds	r3, r0, #0
 80039fc:	1c1a      	adds	r2, r3, #0
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <setPMs+0xc8>)
 8003a00:	609a      	str	r2, [r3, #8]
  MeasVal.airPM10 = PM10 / 10.0f;
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fd fde2 	bl	80015d0 <__aeabi_i2f>
 8003a0c:	1c03      	adds	r3, r0, #0
 8003a0e:	491d      	ldr	r1, [pc, #116]	@ (8003a84 <setPMs+0xc4>)
 8003a10:	1c18      	adds	r0, r3, #0
 8003a12:	f7fd f8df 	bl	8000bd4 <__aeabi_fdiv>
 8003a16:	1c03      	adds	r3, r0, #0
 8003a18:	1c1a      	adds	r2, r3, #0
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <setPMs+0xc8>)
 8003a1c:	60da      	str	r2, [r3, #12]
  if (!VOCNOx || usbPluggedIn) {
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <setPMs+0xcc>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4053      	eors	r3, r2
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <setPMs+0x74>
 8003a2c:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <setPMs+0xd0>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d011      	beq.n	8003a58 <setPMs+0x98>
    MeasVal.VOCIndex = voc / 10.0f;
 8003a34:	1cbb      	adds	r3, r7, #2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd fdc9 	bl	80015d0 <__aeabi_i2f>
 8003a3e:	1c03      	adds	r3, r0, #0
 8003a40:	4910      	ldr	r1, [pc, #64]	@ (8003a84 <setPMs+0xc4>)
 8003a42:	1c18      	adds	r0, r3, #0
 8003a44:	f7fd f8c6 	bl	8000bd4 <__aeabi_fdiv>
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	1c18      	adds	r0, r3, #0
 8003a4c:	f7fc fde6 	bl	800061c <__aeabi_f2uiz>
 8003a50:	0003      	movs	r3, r0
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <setPMs+0xc8>)
 8003a56:	831a      	strh	r2, [r3, #24]
  }
  MeasVal.airNOx = nox / 10.0f;
 8003a58:	003b      	movs	r3, r7
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fd fdb7 	bl	80015d0 <__aeabi_i2f>
 8003a62:	1c03      	adds	r3, r0, #0
 8003a64:	4907      	ldr	r1, [pc, #28]	@ (8003a84 <setPMs+0xc4>)
 8003a66:	1c18      	adds	r0, r3, #0
 8003a68:	f7fd f8b4 	bl	8000bd4 <__aeabi_fdiv>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	1c18      	adds	r0, r3, #0
 8003a70:	f7fc fdd4 	bl	800061c <__aeabi_f2uiz>
 8003a74:	0003      	movs	r3, r0
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <setPMs+0xc8>)
 8003a7a:	835a      	strh	r2, [r3, #26]
    }
//    Debug("calling NOx update");
    displayNOx();
  }
#endif
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	41200000 	.word	0x41200000
 8003a88:	20000a14 	.word	0x20000a14
 8003a8c:	20001067 	.word	0x20001067
 8003a90:	20002009 	.word	0x20002009

08003a94 <SetConfigMode>:

void SetConfigMode(){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003a98:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <SetConfigMode+0x30>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4053      	eors	r3, r2
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003aa6:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <SetConfigMode+0x34>)
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <SetConfigMode+0x38>)
 8003aaa:	0019      	movs	r1, r3
 8003aac:	2003      	movs	r0, #3
 8003aae:	f00a fdb5 	bl	800e61c <CreateLine>
  }
  ReconfigSet = true;
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <SetConfigMode+0x30>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <SetConfigMode+0x3c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000553 	.word	0x20000553
 8003ac8:	080232a0 	.word	0x080232a0
 8003acc:	080232c0 	.word	0x080232c0
 8003ad0:	200001f7 	.word	0x200001f7

08003ad4 <GetReconfigMode>:

bool GetReconfigMode() {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003ad8:	4b02      	ldr	r3, [pc, #8]	@ (8003ae4 <GetReconfigMode+0x10>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	20000553 	.word	0x20000553

08003ae8 <ESP_GetUID>:

void ESP_GetUID(){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003aec:	f00b fa20 	bl	800ef30 <HAL_GetUIDw0>
 8003af0:	0002      	movs	r2, r0
 8003af2:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <ESP_GetUID+0x28>)
 8003af4:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003af6:	f00b fa25 	bl	800ef44 <HAL_GetUIDw1>
 8003afa:	0002      	movs	r2, r0
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <ESP_GetUID+0x28>)
 8003afe:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003b00:	f00b fa2a 	bl	800ef58 <HAL_GetUIDw2>
 8003b04:	0002      	movs	r2, r0
 8003b06:	4b02      	ldr	r3, [pc, #8]	@ (8003b10 <ESP_GetUID+0x28>)
 8003b08:	609a      	str	r2, [r3, #8]
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000055c 	.word	0x2000055c

08003b14 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <ESP_Init+0x2c>)
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <ESP_Init+0x30>)
 8003b24:	2202      	movs	r2, #2
 8003b26:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003b28:	f7ff ffde 	bl	8003ae8 <ESP_GetUID>
  beurs = checkEEprom();
 8003b2c:	f7ff fe76 	bl	800381c <checkEEprom>
 8003b30:	0003      	movs	r3, r0
 8003b32:	001a      	movs	r2, r3
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <ESP_Init+0x34>)
 8003b36:	701a      	strb	r2, [r3, #0]
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000448 	.word	0x20000448
 8003b44:	20000030 	.word	0x20000030
 8003b48:	20000556 	.word	0x20000556

08003b4c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	000a      	movs	r2, r1
 8003b56:	1cbb      	adds	r3, r7, #2
 8003b58:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <ESP_Send+0x54>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	250f      	movs	r5, #15
 8003b60:	197c      	adds	r4, r7, r5
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0019      	movs	r1, r3
 8003b6a:	f013 fcc1 	bl	80174f0 <HAL_UART_Transmit_DMA>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b72:	197b      	adds	r3, r7, r5
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba4 <ESP_Send+0x58>)
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <ESP_Send+0x5c>)
 8003b7e:	0019      	movs	r1, r3
 8003b80:	2001      	movs	r0, #1
 8003b82:	f00a fd4b 	bl	800e61c <CreateLine>
    return false;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e006      	b.n	8003b98 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a07      	ldr	r2, [pc, #28]	@ (8003bac <ESP_Send+0x60>)
 8003b8e:	4908      	ldr	r1, [pc, #32]	@ (8003bb0 <ESP_Send+0x64>)
 8003b90:	2003      	movs	r0, #3
 8003b92:	f00a fd43 	bl	800e61c <CreateLine>
#endif
  return true;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b004      	add	sp, #16
 8003b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba0:	20000448 	.word	0x20000448
 8003ba4:	080232c4 	.word	0x080232c4
 8003ba8:	080232e4 	.word	0x080232e4
 8003bac:	080232e8 	.word	0x080232e8
 8003bb0:	080232c0 	.word	0x080232c0

08003bb4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	000a      	movs	r2, r1
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003bc2:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <ESP_Receive+0x124>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003bc8:	260f      	movs	r6, #15
 8003bca:	19bb      	adds	r3, r7, r6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003bd0:	4b42      	ldr	r3, [pc, #264]	@ (8003cdc <ESP_Receive+0x128>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	250e      	movs	r5, #14
 8003bd6:	197c      	adds	r4, r7, r5
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0019      	movs	r1, r3
 8003be0:	f013 fd16 	bl	8017610 <HAL_UART_Receive_DMA>
 8003be4:	0003      	movs	r3, r0
 8003be6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003be8:	002c      	movs	r4, r5
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d100      	bne.n	8003bf4 <ESP_Receive+0x40>
 8003bf2:	e06c      	b.n	8003cce <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bf4:	4b39      	ldr	r3, [pc, #228]	@ (8003cdc <ESP_Receive+0x128>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2284      	movs	r2, #132	@ 0x84
 8003bfa:	589b      	ldr	r3, [r3, r2]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	@ (8003ce0 <ESP_Receive+0x12c>)
 8003bfe:	4939      	ldr	r1, [pc, #228]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c00:	2001      	movs	r0, #1
 8003c02:	f00a fd0b 	bl	800e61c <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d008      	beq.n	8003c22 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003c10:	4a35      	ldr	r2, [pc, #212]	@ (8003ce8 <ESP_Receive+0x134>)
 8003c12:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c14:	0019      	movs	r1, r3
 8003c16:	2001      	movs	r0, #1
 8003c18:	f00a fd00 	bl	800e61c <CreateLine>
      reset = true;
 8003c1c:	19bb      	adds	r3, r7, r6
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003c22:	230e      	movs	r3, #14
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d005      	beq.n	8003c3a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cec <ESP_Receive+0x138>)
 8003c30:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c32:	0019      	movs	r1, r3
 8003c34:	2001      	movs	r0, #1
 8003c36:	f00a fcf1 	bl	800e61c <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c3a:	230e      	movs	r3, #14
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2204      	movs	r2, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d005      	beq.n	8003c52 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c46:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf0 <ESP_Receive+0x13c>)
 8003c48:	4b26      	ldr	r3, [pc, #152]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f00a fce5 	bl	800e61c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c52:	230e      	movs	r3, #14
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d005      	beq.n	8003c6a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c5e:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <ESP_Receive+0x140>)
 8003c60:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c62:	0019      	movs	r1, r3
 8003c64:	2001      	movs	r0, #1
 8003c66:	f00a fcd9 	bl	800e61c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c6a:	230e      	movs	r3, #14
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2210      	movs	r2, #16
 8003c72:	4013      	ands	r3, r2
 8003c74:	d005      	beq.n	8003c82 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c76:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <ESP_Receive+0x144>)
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f00a fccd 	bl	800e61c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c82:	230e      	movs	r3, #14
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d005      	beq.n	8003c9a <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cfc <ESP_Receive+0x148>)
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <ESP_Receive+0x130>)
 8003c92:	0019      	movs	r1, r3
 8003c94:	2001      	movs	r0, #1
 8003c96:	f00a fcc1 	bl	800e61c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c9a:	230e      	movs	r3, #14
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2240      	movs	r2, #64	@ 0x40
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d005      	beq.n	8003cb2 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003ca6:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <ESP_Receive+0x14c>)
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <ESP_Receive+0x130>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00a fcb5 	bl	800e61c <CreateLine>
    }
#endif
    if (reset) {
 8003cb2:	230f      	movs	r3, #15
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <ESP_Receive+0x110>
      SetAllREDLED();
 8003cbc:	f009 fc52 	bl	800d564 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003cc0:	f00b fdb5 	bl	800f82e <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	@ (8003cd8 <ESP_Receive+0x124>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
    return false;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <ESP_Receive+0x11c>
  }
  return true;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b005      	add	sp, #20
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd8:	2000044c 	.word	0x2000044c
 8003cdc:	20000448 	.word	0x20000448
 8003ce0:	080232f8 	.word	0x080232f8
 8003ce4:	080232e4 	.word	0x080232e4
 8003ce8:	08023328 	.word	0x08023328
 8003cec:	0802334c 	.word	0x0802334c
 8003cf0:	08023370 	.word	0x08023370
 8003cf4:	08023394 	.word	0x08023394
 8003cf8:	080233b8 	.word	0x080233b8
 8003cfc:	080233e4 	.word	0x080233e4
 8003d00:	08023414 	.word	0x08023414

08003d04 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_UART_ErrorCallback+0x34>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10c      	bne.n	8003d30 <HAL_UART_ErrorCallback+0x2c>
    if (huart->ErrorCode != 4) {
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2284      	movs	r2, #132	@ 0x84
 8003d1a:	589b      	ldr	r3, [r3, r2]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d007      	beq.n	8003d30 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2284      	movs	r2, #132	@ 0x84
 8003d24:	589b      	ldr	r3, [r3, r2]
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_UART_ErrorCallback+0x38>)
 8003d28:	4905      	ldr	r1, [pc, #20]	@ (8003d40 <HAL_UART_ErrorCallback+0x3c>)
 8003d2a:	2003      	movs	r0, #3
 8003d2c:	f00a fc76 	bl	800e61c <CreateLine>
    }
  }
}
 8003d30:	46c0      	nop			@ (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000448 	.word	0x20000448
 8003d3c:	08023444 	.word	0x08023444
 8003d40:	080232c0 	.word	0x080232c0

08003d44 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e010      	b.n	8003d76 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	001a      	movs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1898      	adds	r0, r3, r2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	001a      	movs	r2, r3
 8003d68:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <uint8ArrayToString+0x44>)
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	f01c f9aa 	bl	80200c4 <siprintf>
  for (int i = 0; i < 12; i++)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b0b      	cmp	r3, #11
 8003d7a:	ddeb      	ble.n	8003d54 <uint8ArrayToString+0x10>
  }
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b004      	add	sp, #16
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	08023470 	.word	0x08023470

08003d8c <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8e:	b089      	sub	sp, #36	@ 0x24
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	0002      	movs	r2, r0
 8003d94:	1dfb      	adds	r3, r7, #7
 8003d96:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d98:	4bd4      	ldr	r3, [pc, #848]	@ (80040ec <CreateMessage+0x360>)
 8003d9a:	48d5      	ldr	r0, [pc, #852]	@ (80040f0 <CreateMessage+0x364>)
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	0019      	movs	r1, r3
 8003da0:	f7ff fcaa 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003da4:	4bd3      	ldr	r3, [pc, #844]	@ (80040f4 <CreateMessage+0x368>)
 8003da6:	48d4      	ldr	r0, [pc, #848]	@ (80040f8 <CreateMessage+0x36c>)
 8003da8:	220c      	movs	r2, #12
 8003daa:	0019      	movs	r1, r3
 8003dac:	f7ff fca4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003db0:	4bd2      	ldr	r3, [pc, #840]	@ (80040fc <CreateMessage+0x370>)
 8003db2:	48d3      	ldr	r0, [pc, #844]	@ (8004100 <CreateMessage+0x374>)
 8003db4:	220c      	movs	r2, #12
 8003db6:	0019      	movs	r1, r3
 8003db8:	f7ff fc9e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dbc:	4bd1      	ldr	r3, [pc, #836]	@ (8004104 <CreateMessage+0x378>)
 8003dbe:	48d2      	ldr	r0, [pc, #840]	@ (8004108 <CreateMessage+0x37c>)
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	f7ff fc98 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dc8:	4bd0      	ldr	r3, [pc, #832]	@ (800410c <CreateMessage+0x380>)
 8003dca:	48d1      	ldr	r0, [pc, #836]	@ (8004110 <CreateMessage+0x384>)
 8003dcc:	220c      	movs	r2, #12
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f7ff fc92 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dd4:	4bcf      	ldr	r3, [pc, #828]	@ (8004114 <CreateMessage+0x388>)
 8003dd6:	48d0      	ldr	r0, [pc, #832]	@ (8004118 <CreateMessage+0x38c>)
 8003dd8:	220c      	movs	r2, #12
 8003dda:	0019      	movs	r1, r3
 8003ddc:	f7ff fc8c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003de0:	4bce      	ldr	r3, [pc, #824]	@ (800411c <CreateMessage+0x390>)
 8003de2:	48cf      	ldr	r0, [pc, #828]	@ (8004120 <CreateMessage+0x394>)
 8003de4:	220c      	movs	r2, #12
 8003de6:	0019      	movs	r1, r3
 8003de8:	f7ff fc86 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003dec:	4bcd      	ldr	r3, [pc, #820]	@ (8004124 <CreateMessage+0x398>)
 8003dee:	48ce      	ldr	r0, [pc, #824]	@ (8004128 <CreateMessage+0x39c>)
 8003df0:	220c      	movs	r2, #12
 8003df2:	0019      	movs	r1, r3
 8003df4:	f7ff fc80 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003df8:	4bcc      	ldr	r3, [pc, #816]	@ (800412c <CreateMessage+0x3a0>)
 8003dfa:	48cd      	ldr	r0, [pc, #820]	@ (8004130 <CreateMessage+0x3a4>)
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	0019      	movs	r1, r3
 8003e00:	f7ff fc7a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e04:	f7ff fd40 	bl	8003888 <checkName>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d006      	beq.n	8003e1a <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e0c:	4bc9      	ldr	r3, [pc, #804]	@ (8004134 <CreateMessage+0x3a8>)
 8003e0e:	48ca      	ldr	r0, [pc, #808]	@ (8004138 <CreateMessage+0x3ac>)
 8003e10:	221e      	movs	r2, #30
 8003e12:	0019      	movs	r1, r3
 8003e14:	f7ff fc70 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e18:	e005      	b.n	8003e26 <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e1a:	4bc6      	ldr	r3, [pc, #792]	@ (8004134 <CreateMessage+0x3a8>)
 8003e1c:	4ac7      	ldr	r2, [pc, #796]	@ (800413c <CreateMessage+0x3b0>)
 8003e1e:	6811      	ldr	r1, [r2, #0]
 8003e20:	6019      	str	r1, [r3, #0]
 8003e22:	7912      	ldrb	r2, [r2, #4]
 8003e24:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e26:	f7ff fcd5 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e2a:	2390      	movs	r3, #144	@ 0x90
 8003e2c:	00da      	lsls	r2, r3, #3
 8003e2e:	4bc4      	ldr	r3, [pc, #784]	@ (8004140 <CreateMessage+0x3b4>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	0018      	movs	r0, r3
 8003e34:	f01c fa8a 	bl	802034c <memset>
  uint16_t index = 0;
 8003e38:	260e      	movs	r6, #14
 8003e3a:	19bb      	adds	r3, r7, r6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e40:	19bb      	adds	r3, r7, r6
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	4bbe      	ldr	r3, [pc, #760]	@ (8004140 <CreateMessage+0x3b4>)
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	4abe      	ldr	r2, [pc, #760]	@ (8004144 <CreateMessage+0x3b8>)
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f01c f939 	bl	80200c4 <siprintf>
  index = strlen(message);
 8003e52:	4bbb      	ldr	r3, [pc, #748]	@ (8004140 <CreateMessage+0x3b4>)
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fc f989 	bl	800016c <strlen>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	19bb      	adds	r3, r7, r6
 8003e5e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e60:	4aa2      	ldr	r2, [pc, #648]	@ (80040ec <CreateMessage+0x360>)
 8003e62:	4bb9      	ldr	r3, [pc, #740]	@ (8004148 <CreateMessage+0x3bc>)
 8003e64:	0011      	movs	r1, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff ff6c 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e6c:	19bb      	adds	r3, r7, r6
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	4bb3      	ldr	r3, [pc, #716]	@ (8004140 <CreateMessage+0x3b4>)
 8003e72:	18d4      	adds	r4, r2, r3
 8003e74:	4bb5      	ldr	r3, [pc, #724]	@ (800414c <CreateMessage+0x3c0>)
 8003e76:	689d      	ldr	r5, [r3, #8]
 8003e78:	4bb5      	ldr	r3, [pc, #724]	@ (8004150 <CreateMessage+0x3c4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1c18      	adds	r0, r3, #0
 8003e7e:	f7ff faf1 	bl	8003464 <__aeabi_f2d>
 8003e82:	0002      	movs	r2, r0
 8003e84:	000b      	movs	r3, r1
 8003e86:	48ab      	ldr	r0, [pc, #684]	@ (8004134 <CreateMessage+0x3a8>)
 8003e88:	49b2      	ldr	r1, [pc, #712]	@ (8004154 <CreateMessage+0x3c8>)
 8003e8a:	9202      	str	r2, [sp, #8]
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	4bae      	ldr	r3, [pc, #696]	@ (8004148 <CreateMessage+0x3bc>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	0003      	movs	r3, r0
 8003e94:	002a      	movs	r2, r5
 8003e96:	0020      	movs	r0, r4
 8003e98:	f01c f914 	bl	80200c4 <siprintf>
  index = strlen(message);
 8003e9c:	4ba8      	ldr	r3, [pc, #672]	@ (8004140 <CreateMessage+0x3b4>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fc f964 	bl	800016c <strlen>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	19bb      	adds	r3, r7, r6
 8003ea8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003eaa:	4a92      	ldr	r2, [pc, #584]	@ (80040f4 <CreateMessage+0x368>)
 8003eac:	4ba6      	ldr	r3, [pc, #664]	@ (8004148 <CreateMessage+0x3bc>)
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff47 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003eb6:	19bb      	adds	r3, r7, r6
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	4ba1      	ldr	r3, [pc, #644]	@ (8004140 <CreateMessage+0x3b4>)
 8003ebc:	18d4      	adds	r4, r2, r3
 8003ebe:	4ba3      	ldr	r3, [pc, #652]	@ (800414c <CreateMessage+0x3c0>)
 8003ec0:	689d      	ldr	r5, [r3, #8]
 8003ec2:	4ba3      	ldr	r3, [pc, #652]	@ (8004150 <CreateMessage+0x3c4>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	1c18      	adds	r0, r3, #0
 8003ec8:	f7ff facc 	bl	8003464 <__aeabi_f2d>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	000b      	movs	r3, r1
 8003ed0:	4898      	ldr	r0, [pc, #608]	@ (8004134 <CreateMessage+0x3a8>)
 8003ed2:	49a1      	ldr	r1, [pc, #644]	@ (8004158 <CreateMessage+0x3cc>)
 8003ed4:	9202      	str	r2, [sp, #8]
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	4b9b      	ldr	r3, [pc, #620]	@ (8004148 <CreateMessage+0x3bc>)
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0003      	movs	r3, r0
 8003ede:	002a      	movs	r2, r5
 8003ee0:	0020      	movs	r0, r4
 8003ee2:	f01c f8ef 	bl	80200c4 <siprintf>
  index = strlen(message);
 8003ee6:	4b96      	ldr	r3, [pc, #600]	@ (8004140 <CreateMessage+0x3b4>)
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f93f 	bl	800016c <strlen>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	19bb      	adds	r3, r7, r6
 8003ef2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ef4:	4a81      	ldr	r2, [pc, #516]	@ (80040fc <CreateMessage+0x370>)
 8003ef6:	4b94      	ldr	r3, [pc, #592]	@ (8004148 <CreateMessage+0x3bc>)
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff ff22 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003f00:	19bb      	adds	r3, r7, r6
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	4b8e      	ldr	r3, [pc, #568]	@ (8004140 <CreateMessage+0x3b4>)
 8003f06:	18d4      	adds	r4, r2, r3
 8003f08:	4b90      	ldr	r3, [pc, #576]	@ (800414c <CreateMessage+0x3c0>)
 8003f0a:	689d      	ldr	r5, [r3, #8]
 8003f0c:	4b90      	ldr	r3, [pc, #576]	@ (8004150 <CreateMessage+0x3c4>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	1c18      	adds	r0, r3, #0
 8003f12:	f7ff faa7 	bl	8003464 <__aeabi_f2d>
 8003f16:	0002      	movs	r2, r0
 8003f18:	000b      	movs	r3, r1
 8003f1a:	4886      	ldr	r0, [pc, #536]	@ (8004134 <CreateMessage+0x3a8>)
 8003f1c:	498f      	ldr	r1, [pc, #572]	@ (800415c <CreateMessage+0x3d0>)
 8003f1e:	9202      	str	r2, [sp, #8]
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	4b89      	ldr	r3, [pc, #548]	@ (8004148 <CreateMessage+0x3bc>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	0003      	movs	r3, r0
 8003f28:	002a      	movs	r2, r5
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f01c f8ca 	bl	80200c4 <siprintf>
  index = strlen(message);
 8003f30:	4b83      	ldr	r3, [pc, #524]	@ (8004140 <CreateMessage+0x3b4>)
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7fc f91a 	bl	800016c <strlen>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	19bb      	adds	r3, r7, r6
 8003f3c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f3e:	4a71      	ldr	r2, [pc, #452]	@ (8004104 <CreateMessage+0x378>)
 8003f40:	4b81      	ldr	r3, [pc, #516]	@ (8004148 <CreateMessage+0x3bc>)
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff fefd 	bl	8003d44 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8003f4a:	19bb      	adds	r3, r7, r6
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004140 <CreateMessage+0x3b4>)
 8003f50:	18d0      	adds	r0, r2, r3
 8003f52:	4b7e      	ldr	r3, [pc, #504]	@ (800414c <CreateMessage+0x3c0>)
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	4b7e      	ldr	r3, [pc, #504]	@ (8004150 <CreateMessage+0x3c4>)
 8003f58:	8b1b      	ldrh	r3, [r3, #24]
 8003f5a:	4c76      	ldr	r4, [pc, #472]	@ (8004134 <CreateMessage+0x3a8>)
 8003f5c:	4980      	ldr	r1, [pc, #512]	@ (8004160 <CreateMessage+0x3d4>)
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	4b79      	ldr	r3, [pc, #484]	@ (8004148 <CreateMessage+0x3bc>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	0023      	movs	r3, r4
 8003f66:	f01c f8ad 	bl	80200c4 <siprintf>
  index = strlen(message);
 8003f6a:	4b75      	ldr	r3, [pc, #468]	@ (8004140 <CreateMessage+0x3b4>)
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc f8fd 	bl	800016c <strlen>
 8003f72:	0002      	movs	r2, r0
 8003f74:	19bb      	adds	r3, r7, r6
 8003f76:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4053      	eors	r3, r2
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d100      	bne.n	8003f88 <CreateMessage+0x1fc>
 8003f86:	e0fb      	b.n	8004180 <CreateMessage+0x3f4>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f88:	4a60      	ldr	r2, [pc, #384]	@ (800410c <CreateMessage+0x380>)
 8003f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004148 <CreateMessage+0x3bc>)
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7ff fed8 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f94:	19bb      	adds	r3, r7, r6
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	4b69      	ldr	r3, [pc, #420]	@ (8004140 <CreateMessage+0x3b4>)
 8003f9a:	18d4      	adds	r4, r2, r3
 8003f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800414c <CreateMessage+0x3c0>)
 8003f9e:	689d      	ldr	r5, [r3, #8]
 8003fa0:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <CreateMessage+0x3d8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1c18      	adds	r0, r3, #0
 8003fa6:	f7ff fa5d 	bl	8003464 <__aeabi_f2d>
 8003faa:	0002      	movs	r2, r0
 8003fac:	000b      	movs	r3, r1
 8003fae:	4861      	ldr	r0, [pc, #388]	@ (8004134 <CreateMessage+0x3a8>)
 8003fb0:	496d      	ldr	r1, [pc, #436]	@ (8004168 <CreateMessage+0x3dc>)
 8003fb2:	9202      	str	r2, [sp, #8]
 8003fb4:	9303      	str	r3, [sp, #12]
 8003fb6:	4b64      	ldr	r3, [pc, #400]	@ (8004148 <CreateMessage+0x3bc>)
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	0003      	movs	r3, r0
 8003fbc:	002a      	movs	r2, r5
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f01c f880 	bl	80200c4 <siprintf>
    index = strlen(message);
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <CreateMessage+0x3b4>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fc f8d0 	bl	800016c <strlen>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	19bb      	adds	r3, r7, r6
 8003fd0:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003fd2:	4a50      	ldr	r2, [pc, #320]	@ (8004114 <CreateMessage+0x388>)
 8003fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8004148 <CreateMessage+0x3bc>)
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff feb3 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003fde:	19bb      	adds	r3, r7, r6
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	4b57      	ldr	r3, [pc, #348]	@ (8004140 <CreateMessage+0x3b4>)
 8003fe4:	18d4      	adds	r4, r2, r3
 8003fe6:	4b59      	ldr	r3, [pc, #356]	@ (800414c <CreateMessage+0x3c0>)
 8003fe8:	689d      	ldr	r5, [r3, #8]
 8003fea:	4b60      	ldr	r3, [pc, #384]	@ (800416c <CreateMessage+0x3e0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c18      	adds	r0, r3, #0
 8003ff0:	f7ff fa38 	bl	8003464 <__aeabi_f2d>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	000b      	movs	r3, r1
 8003ff8:	484e      	ldr	r0, [pc, #312]	@ (8004134 <CreateMessage+0x3a8>)
 8003ffa:	495d      	ldr	r1, [pc, #372]	@ (8004170 <CreateMessage+0x3e4>)
 8003ffc:	9202      	str	r2, [sp, #8]
 8003ffe:	9303      	str	r3, [sp, #12]
 8004000:	4b51      	ldr	r3, [pc, #324]	@ (8004148 <CreateMessage+0x3bc>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0003      	movs	r3, r0
 8004006:	002a      	movs	r2, r5
 8004008:	0020      	movs	r0, r4
 800400a:	f01c f85b 	bl	80200c4 <siprintf>
    index = strlen(message);
 800400e:	4b4c      	ldr	r3, [pc, #304]	@ (8004140 <CreateMessage+0x3b4>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0002      	movs	r2, r0
 8004018:	19bb      	adds	r3, r7, r6
 800401a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 800401c:	4a3f      	ldr	r2, [pc, #252]	@ (800411c <CreateMessage+0x390>)
 800401e:	4b4a      	ldr	r3, [pc, #296]	@ (8004148 <CreateMessage+0x3bc>)
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fe8e 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOx);
 8004028:	19bb      	adds	r3, r7, r6
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	4b44      	ldr	r3, [pc, #272]	@ (8004140 <CreateMessage+0x3b4>)
 800402e:	18d0      	adds	r0, r2, r3
 8004030:	4b46      	ldr	r3, [pc, #280]	@ (800414c <CreateMessage+0x3c0>)
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <CreateMessage+0x3c4>)
 8004036:	8b5b      	ldrh	r3, [r3, #26]
 8004038:	4c3e      	ldr	r4, [pc, #248]	@ (8004134 <CreateMessage+0x3a8>)
 800403a:	494e      	ldr	r1, [pc, #312]	@ (8004174 <CreateMessage+0x3e8>)
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	4b42      	ldr	r3, [pc, #264]	@ (8004148 <CreateMessage+0x3bc>)
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	0023      	movs	r3, r4
 8004044:	f01c f83e 	bl	80200c4 <siprintf>
    index = strlen(message);
 8004048:	4b3d      	ldr	r3, [pc, #244]	@ (8004140 <CreateMessage+0x3b4>)
 800404a:	0018      	movs	r0, r3
 800404c:	f7fc f88e 	bl	800016c <strlen>
 8004050:	0002      	movs	r2, r0
 8004052:	19bb      	adds	r3, r7, r6
 8004054:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8004056:	4a33      	ldr	r2, [pc, #204]	@ (8004124 <CreateMessage+0x398>)
 8004058:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <CreateMessage+0x3bc>)
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fe71 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airPM2);
 8004062:	19bb      	adds	r3, r7, r6
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <CreateMessage+0x3b4>)
 8004068:	18d4      	adds	r4, r2, r3
 800406a:	4b38      	ldr	r3, [pc, #224]	@ (800414c <CreateMessage+0x3c0>)
 800406c:	689d      	ldr	r5, [r3, #8]
 800406e:	4b38      	ldr	r3, [pc, #224]	@ (8004150 <CreateMessage+0x3c4>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	1c18      	adds	r0, r3, #0
 8004074:	f7ff f9f6 	bl	8003464 <__aeabi_f2d>
 8004078:	0002      	movs	r2, r0
 800407a:	000b      	movs	r3, r1
 800407c:	482d      	ldr	r0, [pc, #180]	@ (8004134 <CreateMessage+0x3a8>)
 800407e:	493e      	ldr	r1, [pc, #248]	@ (8004178 <CreateMessage+0x3ec>)
 8004080:	9202      	str	r2, [sp, #8]
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <CreateMessage+0x3bc>)
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	0003      	movs	r3, r0
 800408a:	002a      	movs	r2, r5
 800408c:	0020      	movs	r0, r4
 800408e:	f01c f819 	bl	80200c4 <siprintf>
    index = strlen(message);
 8004092:	4b2b      	ldr	r3, [pc, #172]	@ (8004140 <CreateMessage+0x3b4>)
 8004094:	0018      	movs	r0, r3
 8004096:	f7fc f869 	bl	800016c <strlen>
 800409a:	0002      	movs	r2, r0
 800409c:	19bb      	adds	r3, r7, r6
 800409e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 80040a0:	4a22      	ldr	r2, [pc, #136]	@ (800412c <CreateMessage+0x3a0>)
 80040a2:	4b29      	ldr	r3, [pc, #164]	@ (8004148 <CreateMessage+0x3bc>)
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7ff fe4c 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airPM10);
 80040ac:	19bb      	adds	r3, r7, r6
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <CreateMessage+0x3b4>)
 80040b2:	18d4      	adds	r4, r2, r3
 80040b4:	4b25      	ldr	r3, [pc, #148]	@ (800414c <CreateMessage+0x3c0>)
 80040b6:	689d      	ldr	r5, [r3, #8]
 80040b8:	4b25      	ldr	r3, [pc, #148]	@ (8004150 <CreateMessage+0x3c4>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	1c18      	adds	r0, r3, #0
 80040be:	f7ff f9d1 	bl	8003464 <__aeabi_f2d>
 80040c2:	0002      	movs	r2, r0
 80040c4:	000b      	movs	r3, r1
 80040c6:	481b      	ldr	r0, [pc, #108]	@ (8004134 <CreateMessage+0x3a8>)
 80040c8:	492c      	ldr	r1, [pc, #176]	@ (800417c <CreateMessage+0x3f0>)
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <CreateMessage+0x3bc>)
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	0003      	movs	r3, r0
 80040d4:	002a      	movs	r2, r5
 80040d6:	0020      	movs	r0, r4
 80040d8:	f01b fff4 	bl	80200c4 <siprintf>
    index = strlen(message);
 80040dc:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <CreateMessage+0x3b4>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fc f844 	bl	800016c <strlen>
 80040e4:	0002      	movs	r2, r0
 80040e6:	19bb      	adds	r3, r7, r6
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e06f      	b.n	80041cc <CreateMessage+0x440>
 80040ec:	20000a78 	.word	0x20000a78
 80040f0:	0808000c 	.word	0x0808000c
 80040f4:	20000a84 	.word	0x20000a84
 80040f8:	08080018 	.word	0x08080018
 80040fc:	20000a90 	.word	0x20000a90
 8004100:	08080048 	.word	0x08080048
 8004104:	20000a9c 	.word	0x20000a9c
 8004108:	08080030 	.word	0x08080030
 800410c:	20000aa8 	.word	0x20000aa8
 8004110:	0808006c 	.word	0x0808006c
 8004114:	20000ab4 	.word	0x20000ab4
 8004118:	08080078 	.word	0x08080078
 800411c:	20000ac0 	.word	0x20000ac0
 8004120:	08080024 	.word	0x08080024
 8004124:	20000acc 	.word	0x20000acc
 8004128:	08080054 	.word	0x08080054
 800412c:	20000ad8 	.word	0x20000ad8
 8004130:	08080060 	.word	0x08080060
 8004134:	20000ae4 	.word	0x20000ae4
 8004138:	08080090 	.word	0x08080090
 800413c:	08025478 	.word	0x08025478
 8004140:	20000578 	.word	0x20000578
 8004144:	08023478 	.word	0x08023478
 8004148:	20000b04 	.word	0x20000b04
 800414c:	2000055c 	.word	0x2000055c
 8004150:	20000a14 	.word	0x20000a14
 8004154:	0802347c 	.word	0x0802347c
 8004158:	080234d0 	.word	0x080234d0
 800415c:	08023528 	.word	0x08023528
 8004160:	08023584 	.word	0x08023584
 8004164:	20000570 	.word	0x20000570
 8004168:	080235d8 	.word	0x080235d8
 800416c:	20000574 	.word	0x20000574
 8004170:	08023638 	.word	0x08023638
 8004174:	08023698 	.word	0x08023698
 8004178:	080236ec 	.word	0x080236ec
 800417c:	08023748 	.word	0x08023748

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8004180:	4a21      	ldr	r2, [pc, #132]	@ (8004208 <CreateMessage+0x47c>)
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <CreateMessage+0x480>)
 8004184:	0011      	movs	r1, r2
 8004186:	0018      	movs	r0, r3
 8004188:	f7ff fddc 	bl	8003d44 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800418c:	260e      	movs	r6, #14
 800418e:	19bb      	adds	r3, r7, r6
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <CreateMessage+0x484>)
 8004194:	18d4      	adds	r4, r2, r3
 8004196:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <CreateMessage+0x488>)
 8004198:	689d      	ldr	r5, [r3, #8]
 800419a:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <CreateMessage+0x48c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1c18      	adds	r0, r3, #0
 80041a0:	f7ff f960 	bl	8003464 <__aeabi_f2d>
 80041a4:	0002      	movs	r2, r0
 80041a6:	000b      	movs	r3, r1
 80041a8:	481c      	ldr	r0, [pc, #112]	@ (800421c <CreateMessage+0x490>)
 80041aa:	491d      	ldr	r1, [pc, #116]	@ (8004220 <CreateMessage+0x494>)
 80041ac:	9202      	str	r2, [sp, #8]
 80041ae:	9303      	str	r3, [sp, #12]
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <CreateMessage+0x480>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	0003      	movs	r3, r0
 80041b6:	002a      	movs	r2, r5
 80041b8:	0020      	movs	r0, r4
 80041ba:	f01b ff83 	bl	80200c4 <siprintf>
    index = strlen(message);
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <CreateMessage+0x484>)
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fb ffd3 	bl	800016c <strlen>
 80041c6:	0002      	movs	r2, r0
 80041c8:	19bb      	adds	r3, r7, r6
 80041ca:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 80041cc:	230e      	movs	r3, #14
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	881a      	ldrh	r2, [r3, #0]
 80041d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004210 <CreateMessage+0x484>)
 80041d4:	18d3      	adds	r3, r2, r3
 80041d6:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <CreateMessage+0x498>)
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f01b ff72 	bl	80200c4 <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <CreateMessage+0x484>)
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7fb ffc2 	bl	800016c <strlen>
 80041e8:	0003      	movs	r3, r0
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <CreateMessage+0x49c>)
 80041ec:	490f      	ldr	r1, [pc, #60]	@ (800422c <CreateMessage+0x4a0>)
 80041ee:	2003      	movs	r0, #3
 80041f0:	f00a fa14 	bl	800e61c <CreateLine>
  return strlen(message);
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <CreateMessage+0x484>)
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7fb ffb8 	bl	800016c <strlen>
 80041fc:	0003      	movs	r3, r0
 80041fe:	b29b      	uxth	r3, r3
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b005      	add	sp, #20
 8004206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004208:	20000aa8 	.word	0x20000aa8
 800420c:	20000b04 	.word	0x20000b04
 8004210:	20000578 	.word	0x20000578
 8004214:	2000055c 	.word	0x2000055c
 8004218:	20000570 	.word	0x20000570
 800421c:	20000ae4 	.word	0x20000ae4
 8004220:	080237a0 	.word	0x080237a0
 8004224:	080237f8 	.word	0x080237f8
 8004228:	080237fc 	.word	0x080237fc
 800422c:	080232c0 	.word	0x080232c0

08004230 <StartProg>:

void StartProg(){
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004234:	2064      	movs	r0, #100	@ 0x64
 8004236:	f00a fe3b 	bl	800eeb0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800423a:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <StartProg+0x60>)
 800423c:	2200      	movs	r2, #0
 800423e:	2101      	movs	r1, #1
 8004240:	0018      	movs	r0, r3
 8004242:	f00c f8bc 	bl	80103be <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004246:	2064      	movs	r0, #100	@ 0x64
 8004248:	f00a fe32 	bl	800eeb0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800424c:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <StartProg+0x60>)
 800424e:	2200      	movs	r2, #0
 8004250:	2102      	movs	r1, #2
 8004252:	0018      	movs	r0, r3
 8004254:	f00c f8b3 	bl	80103be <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004258:	23fa      	movs	r3, #250	@ 0xfa
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	0018      	movs	r0, r3
 800425e:	f00a fe27 	bl	800eeb0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <StartProg+0x60>)
 8004264:	2201      	movs	r2, #1
 8004266:	2101      	movs	r1, #1
 8004268:	0018      	movs	r0, r3
 800426a:	f00c f8a8 	bl	80103be <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800426e:	23fa      	movs	r3, #250	@ 0xfa
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	0018      	movs	r0, r3
 8004274:	f00a fe1c 	bl	800eeb0 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <StartProg+0x60>)
 800427a:	2201      	movs	r2, #1
 800427c:	2102      	movs	r1, #2
 800427e:	0018      	movs	r0, r3
 8004280:	f00c f89d 	bl	80103be <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004284:	2028      	movs	r0, #40	@ 0x28
 8004286:	f00a fe13 	bl	800eeb0 <HAL_Delay>
}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	50001c00 	.word	0x50001c00

08004294 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004296:	b0d9      	sub	sp, #356	@ 0x164
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	0008      	movs	r0, r1
 800429e:	0011      	movs	r1, r2
 80042a0:	4ba4      	ldr	r3, [pc, #656]	@ (8004534 <ParseBuffer+0x2a0>)
 80042a2:	24b0      	movs	r4, #176	@ 0xb0
 80042a4:	0064      	lsls	r4, r4, #1
 80042a6:	191b      	adds	r3, r3, r4
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	1c02      	adds	r2, r0, #0
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	4ba2      	ldr	r3, [pc, #648]	@ (8004538 <ParseBuffer+0x2a4>)
 80042b0:	191b      	adds	r3, r3, r4
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	1c0a      	adds	r2, r1, #0
 80042b6:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	005a      	lsls	r2, r3, #1
 80042bc:	2348      	movs	r3, #72	@ 0x48
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2100      	movs	r1, #0
 80042c2:	0018      	movs	r0, r3
 80042c4:	f01c f842 	bl	802034c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80042c8:	2360      	movs	r3, #96	@ 0x60
 80042ca:	33ff      	adds	r3, #255	@ 0xff
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2203      	movs	r2, #3
 80042d0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80042d2:	23ae      	movs	r3, #174	@ 0xae
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e013      	b.n	8004306 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80042de:	20ae      	movs	r0, #174	@ 0xae
 80042e0:	0040      	lsls	r0, r0, #1
 80042e2:	183b      	adds	r3, r7, r0
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	18d2      	adds	r2, r2, r3
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	7811      	ldrb	r1, [r2, #0]
 80042f0:	4a92      	ldr	r2, [pc, #584]	@ (800453c <ParseBuffer+0x2a8>)
 80042f2:	24b0      	movs	r4, #176	@ 0xb0
 80042f4:	0064      	lsls	r4, r4, #1
 80042f6:	1912      	adds	r2, r2, r4
 80042f8:	19d2      	adds	r2, r2, r7
 80042fa:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	183b      	adds	r3, r7, r0
 8004302:	3201      	adds	r2, #1
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	23ae      	movs	r3, #174	@ 0xae
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	18fa      	adds	r2, r7, r3
 800430c:	4b89      	ldr	r3, [pc, #548]	@ (8004534 <ParseBuffer+0x2a0>)
 800430e:	21b0      	movs	r1, #176	@ 0xb0
 8004310:	0049      	lsls	r1, r1, #1
 8004312:	185b      	adds	r3, r3, r1
 8004314:	19db      	adds	r3, r3, r7
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3df      	bcc.n	80042de <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800431e:	4b85      	ldr	r3, [pc, #532]	@ (8004534 <ParseBuffer+0x2a0>)
 8004320:	185b      	adds	r3, r3, r1
 8004322:	19db      	adds	r3, r3, r7
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	4a85      	ldr	r2, [pc, #532]	@ (800453c <ParseBuffer+0x2a8>)
 8004328:	1852      	adds	r2, r2, r1
 800432a:	19d2      	adds	r2, r2, r7
 800432c:	2100      	movs	r1, #0
 800432e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004330:	f00a f9ee 	bl	800e710 <GetVerboseLevel>
 8004334:	0003      	movs	r3, r0
 8004336:	2b03      	cmp	r3, #3
 8004338:	d106      	bne.n	8004348 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800433a:	2348      	movs	r3, #72	@ 0x48
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	4a80      	ldr	r2, [pc, #512]	@ (8004540 <ParseBuffer+0x2ac>)
 8004340:	4980      	ldr	r1, [pc, #512]	@ (8004544 <ParseBuffer+0x2b0>)
 8004342:	2003      	movs	r0, #3
 8004344:	f00a f96a 	bl	800e61c <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	26ac      	movs	r6, #172	@ 0xac
 800434c:	0076      	lsls	r6, r6, #1
 800434e:	19ba      	adds	r2, r7, r6
 8004350:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004352:	4b7d      	ldr	r3, [pc, #500]	@ (8004548 <ParseBuffer+0x2b4>)
 8004354:	25b0      	movs	r5, #176	@ 0xb0
 8004356:	006d      	lsls	r5, r5, #1
 8004358:	195b      	adds	r3, r3, r5
 800435a:	19db      	adds	r3, r3, r7
 800435c:	4a7b      	ldr	r2, [pc, #492]	@ (800454c <ParseBuffer+0x2b8>)
 800435e:	8811      	ldrh	r1, [r2, #0]
 8004360:	8019      	strh	r1, [r3, #0]
 8004362:	7892      	ldrb	r2, [r2, #2]
 8004364:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004366:	4b7a      	ldr	r3, [pc, #488]	@ (8004550 <ParseBuffer+0x2bc>)
 8004368:	195b      	adds	r3, r3, r5
 800436a:	19db      	adds	r3, r3, r7
 800436c:	4a79      	ldr	r2, [pc, #484]	@ (8004554 <ParseBuffer+0x2c0>)
 800436e:	6811      	ldr	r1, [r2, #0]
 8004370:	6019      	str	r1, [r3, #0]
 8004372:	8892      	ldrh	r2, [r2, #4]
 8004374:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004376:	4b78      	ldr	r3, [pc, #480]	@ (8004558 <ParseBuffer+0x2c4>)
 8004378:	195b      	adds	r3, r3, r5
 800437a:	19db      	adds	r3, r3, r7
 800437c:	4a77      	ldr	r2, [pc, #476]	@ (800455c <ParseBuffer+0x2c8>)
 800437e:	6811      	ldr	r1, [r2, #0]
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	7912      	ldrb	r2, [r2, #4]
 8004384:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <ParseBuffer+0x2cc>)
 8004388:	195b      	adds	r3, r3, r5
 800438a:	19db      	adds	r3, r3, r7
 800438c:	4a75      	ldr	r2, [pc, #468]	@ (8004564 <ParseBuffer+0x2d0>)
 800438e:	6811      	ldr	r1, [r2, #0]
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	8892      	ldrh	r2, [r2, #4]
 8004394:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004396:	4b74      	ldr	r3, [pc, #464]	@ (8004568 <ParseBuffer+0x2d4>)
 8004398:	195b      	adds	r3, r3, r5
 800439a:	19db      	adds	r3, r3, r7
 800439c:	223e      	movs	r2, #62	@ 0x3e
 800439e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043a0:	4b72      	ldr	r3, [pc, #456]	@ (800456c <ParseBuffer+0x2d8>)
 80043a2:	195b      	adds	r3, r3, r5
 80043a4:	19db      	adds	r3, r3, r7
 80043a6:	4a72      	ldr	r2, [pc, #456]	@ (8004570 <ParseBuffer+0x2dc>)
 80043a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043aa:	c313      	stmia	r3!, {r0, r1, r4}
 80043ac:	8811      	ldrh	r1, [r2, #0]
 80043ae:	8019      	strh	r1, [r3, #0]
 80043b0:	7892      	ldrb	r2, [r2, #2]
 80043b2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <ParseBuffer+0x2e0>)
 80043b6:	195b      	adds	r3, r3, r5
 80043b8:	19db      	adds	r3, r3, r7
 80043ba:	4a6f      	ldr	r2, [pc, #444]	@ (8004578 <ParseBuffer+0x2e4>)
 80043bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043be:	c313      	stmia	r3!, {r0, r1, r4}
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80043c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004538 <ParseBuffer+0x2a4>)
 80043c6:	195b      	adds	r3, r3, r5
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80043d0:	2344      	movs	r3, #68	@ 0x44
 80043d2:	18fa      	adds	r2, r7, r3
 80043d4:	2348      	movs	r3, #72	@ 0x48
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f01b fff1 	bl	80203c2 <strstr>
 80043e0:	0003      	movs	r3, r0
 80043e2:	19ba      	adds	r2, r7, r6
 80043e4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80043e6:	4b54      	ldr	r3, [pc, #336]	@ (8004538 <ParseBuffer+0x2a4>)
 80043e8:	22b0      	movs	r2, #176	@ 0xb0
 80043ea:	0052      	lsls	r2, r2, #1
 80043ec:	189b      	adds	r3, r3, r2
 80043ee:	19db      	adds	r3, r3, r7
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10c      	bne.n	8004410 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80043f6:	232c      	movs	r3, #44	@ 0x2c
 80043f8:	18fa      	adds	r2, r7, r3
 80043fa:	2348      	movs	r3, #72	@ 0x48
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f01b ffde 	bl	80203c2 <strstr>
 8004406:	0003      	movs	r3, r0
 8004408:	22ac      	movs	r2, #172	@ 0xac
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	18ba      	adds	r2, r7, r2
 800440e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004410:	4b49      	ldr	r3, [pc, #292]	@ (8004538 <ParseBuffer+0x2a4>)
 8004412:	22b0      	movs	r2, #176	@ 0xb0
 8004414:	0052      	lsls	r2, r2, #1
 8004416:	189b      	adds	r3, r3, r2
 8004418:	19db      	adds	r3, r3, r7
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d10c      	bne.n	800443a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004420:	2328      	movs	r3, #40	@ 0x28
 8004422:	18fa      	adds	r2, r7, r3
 8004424:	2348      	movs	r3, #72	@ 0x48
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f01b ffc9 	bl	80203c2 <strstr>
 8004430:	0003      	movs	r3, r0
 8004432:	22ac      	movs	r2, #172	@ 0xac
 8004434:	0052      	lsls	r2, r2, #1
 8004436:	18ba      	adds	r2, r7, r2
 8004438:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800443a:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <ParseBuffer+0x2a4>)
 800443c:	22b0      	movs	r2, #176	@ 0xb0
 800443e:	0052      	lsls	r2, r2, #1
 8004440:	189b      	adds	r3, r3, r2
 8004442:	19db      	adds	r3, r3, r7
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800444a:	2308      	movs	r3, #8
 800444c:	18fa      	adds	r2, r7, r3
 800444e:	2348      	movs	r3, #72	@ 0x48
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f01b ffb4 	bl	80203c2 <strstr>
 800445a:	0003      	movs	r3, r0
 800445c:	22ac      	movs	r2, #172	@ 0xac
 800445e:	0052      	lsls	r2, r2, #1
 8004460:	18ba      	adds	r2, r7, r2
 8004462:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004464:	233c      	movs	r3, #60	@ 0x3c
 8004466:	18fa      	adds	r2, r7, r3
 8004468:	2448      	movs	r4, #72	@ 0x48
 800446a:	193b      	adds	r3, r7, r4
 800446c:	0011      	movs	r1, r2
 800446e:	0018      	movs	r0, r3
 8004470:	f01b ffa7 	bl	80203c2 <strstr>
 8004474:	0003      	movs	r3, r0
 8004476:	22aa      	movs	r2, #170	@ 0xaa
 8004478:	0052      	lsls	r2, r2, #1
 800447a:	18ba      	adds	r2, r7, r2
 800447c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800447e:	2318      	movs	r3, #24
 8004480:	18fa      	adds	r2, r7, r3
 8004482:	193b      	adds	r3, r7, r4
 8004484:	0011      	movs	r1, r2
 8004486:	0018      	movs	r0, r3
 8004488:	f01b ff9b 	bl	80203c2 <strstr>
 800448c:	0003      	movs	r3, r0
 800448e:	22a8      	movs	r2, #168	@ 0xa8
 8004490:	0052      	lsls	r2, r2, #1
 8004492:	18ba      	adds	r2, r7, r2
 8004494:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004496:	4a39      	ldr	r2, [pc, #228]	@ (800457c <ParseBuffer+0x2e8>)
 8004498:	193b      	adds	r3, r7, r4
 800449a:	0011      	movs	r1, r2
 800449c:	0018      	movs	r0, r3
 800449e:	f01b ff90 	bl	80203c2 <strstr>
 80044a2:	0003      	movs	r3, r0
 80044a4:	22a6      	movs	r2, #166	@ 0xa6
 80044a6:	0052      	lsls	r2, r2, #1
 80044a8:	18ba      	adds	r2, r7, r2
 80044aa:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80044ac:	2334      	movs	r3, #52	@ 0x34
 80044ae:	18fa      	adds	r2, r7, r3
 80044b0:	193b      	adds	r3, r7, r4
 80044b2:	0011      	movs	r1, r2
 80044b4:	0018      	movs	r0, r3
 80044b6:	f01b ff84 	bl	80203c2 <strstr>
 80044ba:	0003      	movs	r3, r0
 80044bc:	22a4      	movs	r2, #164	@ 0xa4
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	18ba      	adds	r2, r7, r2
 80044c2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80044c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <ParseBuffer+0x2a0>)
 80044c6:	21b0      	movs	r1, #176	@ 0xb0
 80044c8:	0049      	lsls	r1, r1, #1
 80044ca:	185b      	adds	r3, r3, r1
 80044cc:	19db      	adds	r3, r3, r7
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d800      	bhi.n	80044d6 <ParseBuffer+0x242>
 80044d4:	e0c1      	b.n	800465a <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80044d6:	22ac      	movs	r2, #172	@ 0xac
 80044d8:	0052      	lsls	r2, r2, #1
 80044da:	18bb      	adds	r3, r7, r2
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d054      	beq.n	800458c <ParseBuffer+0x2f8>
 80044e2:	18bb      	adds	r3, r7, r2
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b4f      	cmp	r3, #79	@ 0x4f
 80044ea:	d14f      	bne.n	800458c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80044ec:	2360      	movs	r3, #96	@ 0x60
 80044ee:	33ff      	adds	r3, #255	@ 0xff
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80044f6:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <ParseBuffer+0x2ec>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b12      	cmp	r3, #18
 80044fc:	d146      	bne.n	800458c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <ParseBuffer+0x2a0>)
 8004500:	185b      	adds	r3, r3, r1
 8004502:	19db      	adds	r3, r3, r7
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2b2b      	cmp	r3, #43	@ 0x2b
 8004508:	d10b      	bne.n	8004522 <ParseBuffer+0x28e>
 800450a:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <ParseBuffer+0x2a8>)
 800450c:	185b      	adds	r3, r3, r1
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2221      	movs	r2, #33	@ 0x21
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	2b32      	cmp	r3, #50	@ 0x32
 8004516:	d104      	bne.n	8004522 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004518:	193b      	adds	r3, r7, r4
 800451a:	0018      	movs	r0, r3
 800451c:	f002 f916 	bl	800674c <ParseTime>
 8004520:	e034      	b.n	800458c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004522:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <ParseBuffer+0x2f0>)
 8004524:	4b18      	ldr	r3, [pc, #96]	@ (8004588 <ParseBuffer+0x2f4>)
 8004526:	0019      	movs	r1, r3
 8004528:	2001      	movs	r0, #1
 800452a:	f00a f877 	bl	800e61c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800452e:	2306      	movs	r3, #6
 8004530:	e097      	b.n	8004662 <ParseBuffer+0x3ce>
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	fffffea2 	.word	0xfffffea2
 8004538:	fffffea1 	.word	0xfffffea1
 800453c:	fffffee8 	.word	0xfffffee8
 8004540:	08023814 	.word	0x08023814
 8004544:	080232c0 	.word	0x080232c0
 8004548:	fffffee4 	.word	0xfffffee4
 800454c:	08023840 	.word	0x08023840
 8004550:	fffffedc 	.word	0xfffffedc
 8004554:	08023844 	.word	0x08023844
 8004558:	fffffed4 	.word	0xfffffed4
 800455c:	0802384c 	.word	0x0802384c
 8004560:	fffffecc 	.word	0xfffffecc
 8004564:	08023854 	.word	0x08023854
 8004568:	fffffec8 	.word	0xfffffec8
 800456c:	fffffeb8 	.word	0xfffffeb8
 8004570:	0802385c 	.word	0x0802385c
 8004574:	fffffea8 	.word	0xfffffea8
 8004578:	0802386c 	.word	0x0802386c
 800457c:	08025458 	.word	0x08025458
 8004580:	20000a0e 	.word	0x20000a0e
 8004584:	0802382c 	.word	0x0802382c
 8004588:	080232e4 	.word	0x080232e4
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800458c:	22ac      	movs	r2, #172	@ 0xac
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	18bb      	adds	r3, r7, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <ParseBuffer+0x318>
 8004598:	18bb      	adds	r3, r7, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b72      	cmp	r3, #114	@ 0x72
 80045a0:	d104      	bne.n	80045ac <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045a2:	2360      	movs	r3, #96	@ 0x60
 80045a4:	33ff      	adds	r3, #255	@ 0xff
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2202      	movs	r2, #2
 80045aa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80045ac:	22ac      	movs	r2, #172	@ 0xac
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	18bb      	adds	r3, r7, r2
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <ParseBuffer+0x338>
 80045b8:	18bb      	adds	r3, r7, r2
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b3e      	cmp	r3, #62	@ 0x3e
 80045c0:	d104      	bne.n	80045cc <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80045c2:	2360      	movs	r3, #96	@ 0x60
 80045c4:	33ff      	adds	r3, #255	@ 0xff
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	2205      	movs	r2, #5
 80045ca:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80045cc:	22ac      	movs	r2, #172	@ 0xac
 80045ce:	0052      	lsls	r2, r2, #1
 80045d0:	18bb      	adds	r3, r7, r2
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <ParseBuffer+0x358>
 80045d8:	18bb      	adds	r3, r7, r2
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b2b      	cmp	r3, #43	@ 0x2b
 80045e0:	d104      	bne.n	80045ec <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80045e2:	2360      	movs	r3, #96	@ 0x60
 80045e4:	33ff      	adds	r3, #255	@ 0xff
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	220b      	movs	r2, #11
 80045ea:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80045ec:	22aa      	movs	r2, #170	@ 0xaa
 80045ee:	0052      	lsls	r2, r2, #1
 80045f0:	18bb      	adds	r3, r7, r2
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <ParseBuffer+0x36e>
 80045f8:	18bb      	adds	r3, r7, r2
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b45      	cmp	r3, #69	@ 0x45
 8004600:	d00a      	beq.n	8004618 <ParseBuffer+0x384>
 8004602:	22a4      	movs	r2, #164	@ 0xa4
 8004604:	0052      	lsls	r2, r2, #1
 8004606:	18bb      	adds	r3, r7, r2
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <ParseBuffer+0x38e>
 800460e:	18bb      	adds	r3, r7, r2
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b46      	cmp	r3, #70	@ 0x46
 8004616:	d104      	bne.n	8004622 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004618:	2360      	movs	r3, #96	@ 0x60
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004622:	22a8      	movs	r2, #168	@ 0xa8
 8004624:	0052      	lsls	r2, r2, #1
 8004626:	18bb      	adds	r3, r7, r2
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <ParseBuffer+0x3aa>
 800462e:	18bb      	adds	r3, r7, r2
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b57      	cmp	r3, #87	@ 0x57
 8004636:	d102      	bne.n	800463e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <ParseBuffer+0x3d8>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800463e:	22a6      	movs	r2, #166	@ 0xa6
 8004640:	0052      	lsls	r2, r2, #1
 8004642:	18bb      	adds	r3, r7, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <ParseBuffer+0x3c6>
 800464a:	18bb      	adds	r3, r7, r2
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b32      	cmp	r3, #50	@ 0x32
 8004652:	d102      	bne.n	800465a <ParseBuffer+0x3c6>
      beurs = true;
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <ParseBuffer+0x3dc>)
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800465a:	2360      	movs	r3, #96	@ 0x60
 800465c:	33ff      	adds	r3, #255	@ 0xff
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]

}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b059      	add	sp, #356	@ 0x164
 8004668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	20000554 	.word	0x20000554
 8004670:	20000556 	.word	0x20000556

08004674 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800467a:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <PollAwake+0x34>)
 800467c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f7fb fd73 	bl	800016c <strlen>
 8004686:	0003      	movs	r3, r0
 8004688:	b29a      	uxth	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0011      	movs	r1, r2
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff fa5c 	bl	8003b4c <ESP_Send>
 8004694:	1e03      	subs	r3, r0, #0
 8004696:	d001      	beq.n	800469c <PollAwake+0x28>
    return true;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <PollAwake+0x2a>
  }
  else{
    return false;
 800469c:	2300      	movs	r3, #0
  }
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	0802387c 	.word	0x0802387c

080046ac <RFPower>:

bool RFPower(){
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <RFPower+0x34>)
 80046b4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7fb fd57 	bl	800016c <strlen>
 80046be:	0003      	movs	r3, r0
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0011      	movs	r1, r2
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7ff fa40 	bl	8003b4c <ESP_Send>
 80046cc:	1e03      	subs	r3, r0, #0
 80046ce:	d001      	beq.n	80046d4 <RFPower+0x28>
    return true;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <RFPower+0x2a>
  }
  else{
    return false;
 80046d4:	2300      	movs	r3, #0
  }
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	08023884 	.word	0x08023884

080046e4 <CheckRFPower>:

bool CheckRFPower(){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <CheckRFPower+0x34>)
 80046ec:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fb fd3b 	bl	800016c <strlen>
 80046f6:	0003      	movs	r3, r0
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0011      	movs	r1, r2
 80046fe:	0018      	movs	r0, r3
 8004700:	f7ff fa24 	bl	8003b4c <ESP_Send>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <CheckRFPower+0x28>
    return true;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800470c:	2300      	movs	r3, #0
  }
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	08023894 	.word	0x08023894

0800471c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004722:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <ATRestore+0x34>)
 8004724:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f7fb fd1f 	bl	800016c <strlen>
 800472e:	0003      	movs	r3, r0
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0011      	movs	r1, r2
 8004736:	0018      	movs	r0, r3
 8004738:	f7ff fa08 	bl	8003b4c <ESP_Send>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <ATRestore+0x28>
    return true;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <ATRestore+0x2a>
  }
  else{
    return false;
 8004744:	2300      	movs	r3, #0
  }
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	080238a4 	.word	0x080238a4

08004754 <CWINIT>:

bool CWINIT(){
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800475a:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <CWINIT+0x34>)
 800475c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f7fb fd03 	bl	800016c <strlen>
 8004766:	0003      	movs	r3, r0
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0011      	movs	r1, r2
 800476e:	0018      	movs	r0, r3
 8004770:	f7ff f9ec 	bl	8003b4c <ESP_Send>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d001      	beq.n	800477c <CWINIT+0x28>
    return true;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <CWINIT+0x2a>
  }
  else{
    return false;
 800477c:	2300      	movs	r3, #0
  }
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	080238b4 	.word	0x080238b4

0800478c <CWMODE1>:

bool CWMODE1(){
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <CWMODE1+0x34>)
 8004794:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7fb fce7 	bl	800016c <strlen>
 800479e:	0003      	movs	r3, r0
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0011      	movs	r1, r2
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f9d0 	bl	8003b4c <ESP_Send>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d001      	beq.n	80047b4 <CWMODE1+0x28>
    return true;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80047b4:	2300      	movs	r3, #0
  }
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	080238c4 	.word	0x080238c4

080047c4 <CWMODE2>:

bool CWMODE2(){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <CWMODE2+0x34>)
 80047cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fb fccb 	bl	800016c <strlen>
 80047d6:	0003      	movs	r3, r0
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff f9b4 	bl	8003b4c <ESP_Send>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d001      	beq.n	80047ec <CWMODE2+0x28>
    return true;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <CWMODE2+0x2a>
  }
  else{
    return false;
 80047ec:	2300      	movs	r3, #0
  }
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	080238d4 	.word	0x080238d4

080047fc <CWAUTOCONN>:

bool CWAUTOCONN(){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <CWAUTOCONN+0x34>)
 8004804:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f7fb fcaf 	bl	800016c <strlen>
 800480e:	0003      	movs	r3, r0
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	0011      	movs	r1, r2
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff f998 	bl	8003b4c <ESP_Send>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d001      	beq.n	8004824 <CWAUTOCONN+0x28>
    return true;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004824:	2300      	movs	r3, #0
  }
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b002      	add	sp, #8
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	080238e4 	.word	0x080238e4

08004834 <CWJAP>:

bool CWJAP(){
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	46c6      	mov	lr, r8
 8004838:	b500      	push	{lr}
 800483a:	b0a2      	sub	sp, #136	@ 0x88
 800483c:	af00      	add	r7, sp, #0
 800483e:	466b      	mov	r3, sp
 8004840:	4698      	mov	r8, r3
  beursTest = true;
 8004842:	4b39      	ldr	r3, [pc, #228]	@ (8004928 <CWJAP+0xf4>)
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004848:	2618      	movs	r6, #24
 800484a:	19bb      	adds	r3, r7, r6
 800484c:	2264      	movs	r2, #100	@ 0x64
 800484e:	2100      	movs	r1, #0
 8004850:	0018      	movs	r0, r3
 8004852:	f01b fd7b 	bl	802034c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004856:	4b35      	ldr	r3, [pc, #212]	@ (800492c <CWJAP+0xf8>)
 8004858:	4a35      	ldr	r2, [pc, #212]	@ (8004930 <CWJAP+0xfc>)
 800485a:	4936      	ldr	r1, [pc, #216]	@ (8004934 <CWJAP+0x100>)
 800485c:	19b8      	adds	r0, r7, r6
 800485e:	f01b fc31 	bl	80200c4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004862:	19bb      	adds	r3, r7, r6
 8004864:	0018      	movs	r0, r3
 8004866:	f7fb fc81 	bl	800016c <strlen>
 800486a:	0002      	movs	r2, r0
 800486c:	216f      	movs	r1, #111	@ 0x6f
 800486e:	0030      	movs	r0, r6
 8004870:	180b      	adds	r3, r1, r0
 8004872:	19db      	adds	r3, r3, r7
 8004874:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004876:	180b      	adds	r3, r1, r0
 8004878:	19db      	adds	r3, r3, r7
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	1e5a      	subs	r2, r3, #1
 8004880:	2180      	movs	r1, #128	@ 0x80
 8004882:	1879      	adds	r1, r7, r1
 8004884:	600a      	str	r2, [r1, #0]
 8004886:	001a      	movs	r2, r3
 8004888:	60ba      	str	r2, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	60fa      	str	r2, [r7, #12]
 800488e:	68b8      	ldr	r0, [r7, #8]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	0002      	movs	r2, r0
 8004894:	0f52      	lsrs	r2, r2, #29
 8004896:	000e      	movs	r6, r1
 8004898:	00f6      	lsls	r6, r6, #3
 800489a:	617e      	str	r6, [r7, #20]
 800489c:	697e      	ldr	r6, [r7, #20]
 800489e:	4316      	orrs	r6, r2
 80048a0:	617e      	str	r6, [r7, #20]
 80048a2:	0002      	movs	r2, r0
 80048a4:	00d2      	lsls	r2, r2, #3
 80048a6:	613a      	str	r2, [r7, #16]
 80048a8:	001a      	movs	r2, r3
 80048aa:	603a      	str	r2, [r7, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	6838      	ldr	r0, [r7, #0]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	0002      	movs	r2, r0
 80048b6:	0f52      	lsrs	r2, r2, #29
 80048b8:	000e      	movs	r6, r1
 80048ba:	00f5      	lsls	r5, r6, #3
 80048bc:	4315      	orrs	r5, r2
 80048be:	0002      	movs	r2, r0
 80048c0:	00d4      	lsls	r4, r2, #3
 80048c2:	3307      	adds	r3, #7
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	466a      	mov	r2, sp
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	469d      	mov	sp, r3
 80048ce:	466b      	mov	r3, sp
 80048d0:	3300      	adds	r3, #0
 80048d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80048d4:	246f      	movs	r4, #111	@ 0x6f
 80048d6:	2518      	movs	r5, #24
 80048d8:	1963      	adds	r3, r4, r5
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	001a      	movs	r2, r3
 80048e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048e4:	2100      	movs	r1, #0
 80048e6:	0018      	movs	r0, r3
 80048e8:	f01b fd30 	bl	802034c <memset>
  strncpy(atCommand, atCommandBuff, len);
 80048ec:	1963      	adds	r3, r4, r5
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	1979      	adds	r1, r7, r5
 80048f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f6:	0018      	movs	r0, r3
 80048f8:	f01b fd4f 	bl	802039a <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80048fc:	1963      	adds	r3, r4, r5
 80048fe:	19db      	adds	r3, r3, r7
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	b29a      	uxth	r2, r3
 8004904:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004906:	0011      	movs	r1, r2
 8004908:	0018      	movs	r0, r3
 800490a:	f7ff f91f 	bl	8003b4c <ESP_Send>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d001      	beq.n	8004916 <CWJAP+0xe2>
    return true;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <CWJAP+0xe4>
  }
  else{
    return false;
 8004916:	2300      	movs	r3, #0
 8004918:	46c5      	mov	sp, r8
  }
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b022      	add	sp, #136	@ 0x88
 8004920:	bc80      	pop	{r7}
 8004922:	46b8      	mov	r8, r7
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	20000555 	.word	0x20000555
 800492c:	08025464 	.word	0x08025464
 8004930:	08025458 	.word	0x08025458
 8004934:	080238f8 	.word	0x080238f8

08004938 <CWMODE3>:

bool CWMODE3(){
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <CWMODE3+0x34>)
 8004940:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fb fc11 	bl	800016c <strlen>
 800494a:	0003      	movs	r3, r0
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff f8fa 	bl	8003b4c <ESP_Send>
 8004958:	1e03      	subs	r3, r0, #0
 800495a:	d001      	beq.n	8004960 <CWMODE3+0x28>
    return true;
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004960:	2300      	movs	r3, #0
  }
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	08023910 	.word	0x08023910

08004970 <CWSTATE>:

bool CWSTATE(){
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <CWSTATE+0x34>)
 8004978:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f7fb fbf5 	bl	800016c <strlen>
 8004982:	0003      	movs	r3, r0
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0011      	movs	r1, r2
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff f8de 	bl	8003b4c <ESP_Send>
 8004990:	1e03      	subs	r3, r0, #0
 8004992:	d001      	beq.n	8004998 <CWSTATE+0x28>
    return true;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004998:	2300      	movs	r3, #0
  }
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	08023920 	.word	0x08023920

080049a8 <CWSAP>:

bool CWSAP(){
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <CWSAP+0x34>)
 80049b0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7fb fbd9 	bl	800016c <strlen>
 80049ba:	0003      	movs	r3, r0
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0011      	movs	r1, r2
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff f8c2 	bl	8003b4c <ESP_Send>
 80049c8:	1e03      	subs	r3, r0, #0
 80049ca:	d001      	beq.n	80049d0 <CWSAP+0x28>
    return true;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <CWSAP+0x2a>
  }
  else{
    return false;
 80049d0:	2300      	movs	r3, #0
  }
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b002      	add	sp, #8
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	08023930 	.word	0x08023930

080049e0 <CIPMUX>:

bool CIPMUX(){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80049e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <CIPMUX+0x34>)
 80049e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fb fbbd 	bl	800016c <strlen>
 80049f2:	0003      	movs	r3, r0
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0011      	movs	r1, r2
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7ff f8a6 	bl	8003b4c <ESP_Send>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d001      	beq.n	8004a08 <CIPMUX+0x28>
    return true;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a08:	2300      	movs	r3, #0
  }
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	08023954 	.word	0x08023954

08004a18 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <WEBSERVER+0x34>)
 8004a20:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fb fba1 	bl	800016c <strlen>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0011      	movs	r1, r2
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7ff f88a 	bl	8003b4c <ESP_Send>
 8004a38:	1e03      	subs	r3, r0, #0
 8004a3a:	d001      	beq.n	8004a40 <WEBSERVER+0x28>
    return true;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a40:	2300      	movs	r3, #0
  }
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	08023964 	.word	0x08023964

08004a50 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b0c5      	sub	sp, #276	@ 0x114
 8004a54:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f01b fc74 	bl	802034c <memset>
  uint16_t length = CreateMessage(beurs);
 8004a64:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <HTTPCPOST+0xa0>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	1dfc      	adds	r4, r7, #7
 8004a6a:	34ff      	adds	r4, #255	@ 0xff
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff f98d 	bl	8003d8c <CreateMessage>
 8004a72:	0003      	movs	r3, r0
 8004a74:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a76:	4b1e      	ldr	r3, [pc, #120]	@ (8004af0 <HTTPCPOST+0xa0>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a7e:	1dfb      	adds	r3, r7, #7
 8004a80:	33ff      	adds	r3, #255	@ 0xff
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <HTTPCPOST+0xa4>)
 8004a86:	491c      	ldr	r1, [pc, #112]	@ (8004af8 <HTTPCPOST+0xa8>)
 8004a88:	1d38      	adds	r0, r7, #4
 8004a8a:	f01b fb1b 	bl	80200c4 <siprintf>
 8004a8e:	e016      	b.n	8004abe <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <HTTPCPOST+0xac>)
 8004a92:	481b      	ldr	r0, [pc, #108]	@ (8004b00 <HTTPCPOST+0xb0>)
 8004a94:	220c      	movs	r2, #12
 8004a96:	0019      	movs	r1, r3
 8004a98:	f7fe fe2e 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004a9c:	4a17      	ldr	r2, [pc, #92]	@ (8004afc <HTTPCPOST+0xac>)
 8004a9e:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <HTTPCPOST+0xb4>)
 8004aa0:	0011      	movs	r1, r2
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7ff f94e 	bl	8003d44 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004aa8:	1dfb      	adds	r3, r7, #7
 8004aaa:	33ff      	adds	r3, #255	@ 0xff
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	4c15      	ldr	r4, [pc, #84]	@ (8004b04 <HTTPCPOST+0xb4>)
 8004ab0:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <HTTPCPOST+0xb8>)
 8004ab2:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HTTPCPOST+0xbc>)
 8004ab4:	1d38      	adds	r0, r7, #4
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	0023      	movs	r3, r4
 8004aba:	f01b fb03 	bl	80200c4 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004abe:	1d3b      	adds	r3, r7, #4
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fb fb53 	bl	800016c <strlen>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	1d7b      	adds	r3, r7, #5
 8004aca:	33ff      	adds	r3, #255	@ 0xff
 8004acc:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004ace:	1d7b      	adds	r3, r7, #5
 8004ad0:	33ff      	adds	r3, #255	@ 0xff
 8004ad2:	881a      	ldrh	r2, [r3, #0]
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff f837 	bl	8003b4c <ESP_Send>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d001      	beq.n	8004ae6 <HTTPCPOST+0x96>
    return true;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004ae6:	2300      	movs	r3, #0
  }
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b043      	add	sp, #268	@ 0x10c
 8004aee:	bd90      	pop	{r4, r7, pc}
 8004af0:	20000556 	.word	0x20000556
 8004af4:	08025480 	.word	0x08025480
 8004af8:	0802397c 	.word	0x0802397c
 8004afc:	20000b20 	.word	0x20000b20
 8004b00:	08080000 	.word	0x08080000
 8004b04:	20000b2c 	.word	0x20000b2c
 8004b08:	080254bc 	.word	0x080254bc
 8004b0c:	080239b4 	.word	0x080239b4

08004b10 <SENDDATA>:

bool SENDDATA(){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <SENDDATA+0x34>)
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fb fb27 	bl	800016c <strlen>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	1dbb      	adds	r3, r7, #6
 8004b22:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b24:	1dbb      	adds	r3, r7, #6
 8004b26:	881a      	ldrh	r2, [r3, #0]
 8004b28:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <SENDDATA+0x34>)
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff f80d 	bl	8003b4c <ESP_Send>
 8004b32:	1e03      	subs	r3, r0, #0
 8004b34:	d001      	beq.n	8004b3a <SENDDATA+0x2a>
    return true;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b3a:	2300      	movs	r3, #0
  }
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000578 	.word	0x20000578

08004b48 <SLEEP>:

bool SLEEP(){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <SLEEP+0x34>)
 8004b50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fb fb09 	bl	800016c <strlen>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0011      	movs	r1, r2
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fe fff2 	bl	8003b4c <ESP_Send>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d001      	beq.n	8004b70 <SLEEP+0x28>
    return true;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <SLEEP+0x2a>
  }
  else{
    return false;
 8004b70:	2300      	movs	r3, #0
  }
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	080239f4 	.word	0x080239f4

08004b80 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <CIPSNTPCFG+0x3c>)
 8004b88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fb faed 	bl	800016c <strlen>
 8004b92:	0003      	movs	r3, r0
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fe ffd6 	bl	8003b4c <ESP_Send>
 8004ba0:	1e03      	subs	r3, r0, #0
 8004ba2:	d006      	beq.n	8004bb2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004ba4:	23fa      	movs	r3, #250	@ 0xfa
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f00a f981 	bl	800eeb0 <HAL_Delay>
    return true;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004bb2:	2300      	movs	r3, #0
  }
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	08023a04 	.word	0x08023a04

08004bc0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <CIPSNTPTIME+0x34>)
 8004bc8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fb facd 	bl	800016c <strlen>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7fe ffb6 	bl	8003b4c <ESP_Send>
 8004be0:	1e03      	subs	r3, r0, #0
 8004be2:	d001      	beq.n	8004be8 <CIPSNTPTIME+0x28>
    return true;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004be8:	2300      	movs	r3, #0
  }
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	08023a54 	.word	0x08023a54

08004bf8 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <CIPSNTPINTV+0x34>)
 8004c00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7fb fab1 	bl	800016c <strlen>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0011      	movs	r1, r2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fe ff9a 	bl	8003b4c <ESP_Send>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d001      	beq.n	8004c20 <CIPSNTPINTV+0x28>
    return true;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c20:	2300      	movs	r3, #0
  }
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	08023a68 	.word	0x08023a68

08004c30 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	0002      	movs	r2, r0
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8004df0 <DMA_ProcessBuffer+0x1c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	200e      	movs	r0, #14
 8004c46:	183b      	adds	r3, r7, r0
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	0049      	lsls	r1, r1, #1
 8004c4c:	1a8a      	subs	r2, r1, r2
 8004c4e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c50:	230d      	movs	r3, #13
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2203      	movs	r2, #3
 8004c56:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c58:	183b      	adds	r3, r7, r0
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	2380      	movs	r3, #128	@ 0x80
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c64:	183b      	adds	r3, r7, r0
 8004c66:	2280      	movs	r2, #128	@ 0x80
 8004c68:	0052      	lsls	r2, r2, #1
 8004c6a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	001a      	movs	r2, r3
 8004c74:	230e      	movs	r3, #14
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d131      	bne.n	8004ce2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c7e:	4b5e      	ldr	r3, [pc, #376]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b14      	cmp	r3, #20
 8004c84:	d91b      	bls.n	8004cbe <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c86:	4b5c      	ldr	r3, [pc, #368]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <DMA_ProcessBuffer+0x1cc>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <DMA_ProcessBuffer+0x74>
 8004c94:	4b5a      	ldr	r3, [pc, #360]	@ (8004e00 <DMA_ProcessBuffer+0x1d0>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004c9c:	230d      	movs	r3, #13
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004ca4:	4b55      	ldr	r3, [pc, #340]	@ (8004dfc <DMA_ProcessBuffer+0x1cc>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d103      	bne.n	8004cb4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004cac:	4b55      	ldr	r3, [pc, #340]	@ (8004e04 <DMA_ProcessBuffer+0x1d4>)
 8004cae:	220b      	movs	r2, #11
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e016      	b.n	8004ce2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004cb4:	230d      	movs	r3, #13
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2206      	movs	r2, #6
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e011      	b.n	8004ce2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004cc8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004cca:	f00a f8e7 	bl	800ee9c <HAL_GetTick>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	33f5      	adds	r3, #245	@ 0xf5
 8004cd2:	33ff      	adds	r3, #255	@ 0xff
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e08 <DMA_ProcessBuffer+0x1d8>)
 8004cd8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004cda:	230d      	movs	r3, #13
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2204      	movs	r2, #4
 8004ce0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004ce2:	4b44      	ldr	r3, [pc, #272]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	001a      	movs	r2, r3
 8004cea:	210e      	movs	r1, #14
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <DMA_ProcessBuffer+0xc6>
 8004cf4:	e075      	b.n	8004de2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004cf6:	4b40      	ldr	r3, [pc, #256]	@ (8004df8 <DMA_ProcessBuffer+0x1c8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004cfc:	4b43      	ldr	r3, [pc, #268]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b3c      	ldr	r3, [pc, #240]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d109      	bne.n	8004d20 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004d14:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d16:	230d      	movs	r3, #13
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e060      	b.n	8004de2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	001a      	movs	r2, r3
 8004d28:	210e      	movs	r1, #14
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <DMA_ProcessBuffer+0x1dc>)
 8004d3a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d3c:	230d      	movs	r3, #13
 8004d3e:	18fb      	adds	r3, r7, r3
 8004d40:	220a      	movs	r2, #10
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e04d      	b.n	8004de2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d46:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	210e      	movs	r1, #14
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d917      	bls.n	8004d88 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d58:	4b26      	ldr	r3, [pc, #152]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	001a      	movs	r2, r3
 8004d60:	4b2b      	ldr	r3, [pc, #172]	@ (8004e10 <DMA_ProcessBuffer+0x1e0>)
 8004d62:	18d0      	adds	r0, r2, r3
 8004d64:	4b23      	ldr	r3, [pc, #140]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	b299      	uxth	r1, r3
 8004d74:	230d      	movs	r3, #13
 8004d76:	18fc      	adds	r4, r7, r3
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	f7ff fa89 	bl	8004294 <ParseBuffer>
 8004d82:	0003      	movs	r3, r0
 8004d84:	7023      	strb	r3, [r4, #0]
 8004d86:	e026      	b.n	8004dd6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <DMA_ProcessBuffer+0x1e0>)
 8004d92:	18d0      	adds	r0, r2, r3
 8004d94:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	b299      	uxth	r1, r3
 8004da4:	250d      	movs	r5, #13
 8004da6:	197c      	adds	r4, r7, r5
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	001a      	movs	r2, r3
 8004dae:	f7ff fa71 	bl	8004294 <ParseBuffer>
 8004db2:	0003      	movs	r3, r0
 8004db4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004db6:	210e      	movs	r1, #14
 8004db8:	187b      	adds	r3, r7, r1
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004dc0:	197c      	adds	r4, r7, r5
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	8819      	ldrh	r1, [r3, #0]
 8004dca:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <DMA_ProcessBuffer+0x1e0>)
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff fa61 	bl	8004294 <ParseBuffer>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004dd6:	230e      	movs	r3, #14
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <DMA_ProcessBuffer+0x1c4>)
 8004de0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004de2:	230d      	movs	r3, #13
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	781b      	ldrb	r3, [r3, #0]
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b004      	add	sp, #16
 8004dee:	bdb0      	pop	{r4, r5, r7, pc}
 8004df0:	20002310 	.word	0x20002310
 8004df4:	20000b45 	.word	0x20000b45
 8004df8:	20000a0c 	.word	0x20000a0c
 8004dfc:	20000a0e 	.word	0x20000a0e
 8004e00:	20000000 	.word	0x20000000
 8004e04:	20000030 	.word	0x20000030
 8004e08:	20000a08 	.word	0x20000a08
 8004e0c:	20000b46 	.word	0x20000b46
 8004e10:	20000450 	.word	0x20000450

08004e14 <clearDMABuffer>:

void clearDMABuffer(){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	005a      	lsls	r2, r3, #1
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <clearDMABuffer+0x18>)
 8004e1e:	2100      	movs	r1, #0
 8004e20:	0018      	movs	r0, r3
 8004e22:	f01b fa93 	bl	802034c <memset>
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000450 	.word	0x20000450

08004e30 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	0002      	movs	r2, r0
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	1dbb      	adds	r3, r7, #6
 8004e3e:	1c0a      	adds	r2, r1, #0
 8004e40:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e42:	210f      	movs	r1, #15
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e4a:	1dbb      	adds	r3, r7, #6
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	1dfa      	adds	r2, r7, #7
 8004e56:	7812      	ldrb	r2, [r2, #0]
 8004e58:	4251      	negs	r1, r2
 8004e5a:	414a      	adcs	r2, r1
 8004e5c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e5e:	1dbb      	adds	r3, r7, #6
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d107      	bne.n	8004e76 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e66:	230f      	movs	r3, #15
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	1dfa      	adds	r2, r7, #7
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	3a02      	subs	r2, #2
 8004e70:	4251      	negs	r1, r2
 8004e72:	414a      	adcs	r2, r1
 8004e74:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e76:	1dbb      	adds	r3, r7, #6
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d107      	bne.n	8004e8e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e7e:	230f      	movs	r3, #15
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	1dfa      	adds	r2, r7, #7
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	3a05      	subs	r2, #5
 8004e88:	4251      	negs	r1, r2
 8004e8a:	414a      	adcs	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e8e:	1dbb      	adds	r3, r7, #6
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d107      	bne.n	8004ea6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004e96:	230f      	movs	r3, #15
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	1dfa      	adds	r2, r7, #7
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	3a0b      	subs	r2, #11
 8004ea0:	4251      	negs	r1, r2
 8004ea2:	414a      	adcs	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004ea6:	230f      	movs	r3, #15
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	781b      	ldrb	r3, [r3, #0]
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	0002      	movs	r2, r0
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004ec8:	1dfb      	adds	r3, r7, #7
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b14      	cmp	r3, #20
 8004ece:	d900      	bls.n	8004ed2 <AT_Send+0x1e>
 8004ed0:	e19e      	b.n	8005210 <AT_Send+0x35c>
 8004ed2:	009a      	lsls	r2, r3, #2
 8004ed4:	4bd2      	ldr	r3, [pc, #840]	@ (8005220 <AT_Send+0x36c>)
 8004ed6:	18d3      	adds	r3, r2, r3
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004edc:	4bd1      	ldr	r3, [pc, #836]	@ (8005224 <AT_Send+0x370>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f009 fb45 	bl	800e570 <TimestampIsReached>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d100      	bne.n	8004eec <AT_Send+0x38>
 8004eea:	e190      	b.n	800520e <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8004eec:	4ace      	ldr	r2, [pc, #824]	@ (8005228 <AT_Send+0x374>)
 8004eee:	4bcf      	ldr	r3, [pc, #828]	@ (800522c <AT_Send+0x378>)
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	f009 fb92 	bl	800e61c <CreateLine>
    ATCommandSend = PollAwake();
 8004ef8:	230f      	movs	r3, #15
 8004efa:	18fc      	adds	r4, r7, r3
 8004efc:	f7ff fbba 	bl	8004674 <PollAwake>
 8004f00:	0003      	movs	r3, r0
 8004f02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f04:	f009 ffca 	bl	800ee9c <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	3332      	adds	r3, #50	@ 0x32
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	4bc5      	ldr	r3, [pc, #788]	@ (8005224 <AT_Send+0x370>)
 8004f10:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f12:	e17c      	b.n	800520e <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f14:	4ac6      	ldr	r2, [pc, #792]	@ (8005230 <AT_Send+0x37c>)
 8004f16:	4bc5      	ldr	r3, [pc, #788]	@ (800522c <AT_Send+0x378>)
 8004f18:	0019      	movs	r1, r3
 8004f1a:	2003      	movs	r0, #3
 8004f1c:	f009 fb7e 	bl	800e61c <CreateLine>
    ATCommandSend = RFPower();
 8004f20:	230f      	movs	r3, #15
 8004f22:	18fc      	adds	r4, r7, r3
 8004f24:	f7ff fbc2 	bl	80046ac <RFPower>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f2c:	f009 ffb6 	bl	800ee9c <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	330a      	adds	r3, #10
 8004f34:	001a      	movs	r2, r3
 8004f36:	4bbb      	ldr	r3, [pc, #748]	@ (8005224 <AT_Send+0x370>)
 8004f38:	601a      	str	r2, [r3, #0]
    break;
 8004f3a:	e169      	b.n	8005210 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f3c:	4abd      	ldr	r2, [pc, #756]	@ (8005234 <AT_Send+0x380>)
 8004f3e:	4bbb      	ldr	r3, [pc, #748]	@ (800522c <AT_Send+0x378>)
 8004f40:	0019      	movs	r1, r3
 8004f42:	2003      	movs	r0, #3
 8004f44:	f009 fb6a 	bl	800e61c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f48:	230f      	movs	r3, #15
 8004f4a:	18fc      	adds	r4, r7, r3
 8004f4c:	f7ff fbca 	bl	80046e4 <CheckRFPower>
 8004f50:	0003      	movs	r3, r0
 8004f52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f54:	f009 ffa2 	bl	800ee9c <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	330a      	adds	r3, #10
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	4bb1      	ldr	r3, [pc, #708]	@ (8005224 <AT_Send+0x370>)
 8004f60:	601a      	str	r2, [r3, #0]
    break;
 8004f62:	e155      	b.n	8005210 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f64:	4ab4      	ldr	r2, [pc, #720]	@ (8005238 <AT_Send+0x384>)
 8004f66:	4bb1      	ldr	r3, [pc, #708]	@ (800522c <AT_Send+0x378>)
 8004f68:	0019      	movs	r1, r3
 8004f6a:	2003      	movs	r0, #3
 8004f6c:	f009 fb56 	bl	800e61c <CreateLine>
    ATCommandSend = ATRestore();
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fc      	adds	r4, r7, r3
 8004f74:	f7ff fbd2 	bl	800471c <ATRestore>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f7c:	f009 ff8e 	bl	800ee9c <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	3332      	adds	r3, #50	@ 0x32
 8004f84:	001a      	movs	r2, r3
 8004f86:	4ba7      	ldr	r3, [pc, #668]	@ (8005224 <AT_Send+0x370>)
 8004f88:	601a      	str	r2, [r3, #0]
    break;
 8004f8a:	e141      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f8c:	4aab      	ldr	r2, [pc, #684]	@ (800523c <AT_Send+0x388>)
 8004f8e:	4ba7      	ldr	r3, [pc, #668]	@ (800522c <AT_Send+0x378>)
 8004f90:	0019      	movs	r1, r3
 8004f92:	2003      	movs	r0, #3
 8004f94:	f009 fb42 	bl	800e61c <CreateLine>
    ATCommandSend = CWINIT();
 8004f98:	230f      	movs	r3, #15
 8004f9a:	18fc      	adds	r4, r7, r3
 8004f9c:	f7ff fbda 	bl	8004754 <CWINIT>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fa4:	f009 ff7a 	bl	800ee9c <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	33f5      	adds	r3, #245	@ 0xf5
 8004fac:	33ff      	adds	r3, #255	@ 0xff
 8004fae:	001a      	movs	r2, r3
 8004fb0:	4b9c      	ldr	r3, [pc, #624]	@ (8005224 <AT_Send+0x370>)
 8004fb2:	601a      	str	r2, [r3, #0]
    break;
 8004fb4:	e12c      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004fb6:	4aa2      	ldr	r2, [pc, #648]	@ (8005240 <AT_Send+0x38c>)
 8004fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800522c <AT_Send+0x378>)
 8004fba:	0019      	movs	r1, r3
 8004fbc:	2003      	movs	r0, #3
 8004fbe:	f009 fb2d 	bl	800e61c <CreateLine>
    ATCommandSend = CWSTATE();
 8004fc2:	230f      	movs	r3, #15
 8004fc4:	18fc      	adds	r4, r7, r3
 8004fc6:	f7ff fcd3 	bl	8004970 <CWSTATE>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fce:	f009 ff65 	bl	800ee9c <HAL_GetTick>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	33f5      	adds	r3, #245	@ 0xf5
 8004fd6:	33ff      	adds	r3, #255	@ 0xff
 8004fd8:	001a      	movs	r2, r3
 8004fda:	4b92      	ldr	r3, [pc, #584]	@ (8005224 <AT_Send+0x370>)
 8004fdc:	601a      	str	r2, [r3, #0]
    break;
 8004fde:	e117      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004fe0:	4a98      	ldr	r2, [pc, #608]	@ (8005244 <AT_Send+0x390>)
 8004fe2:	4b92      	ldr	r3, [pc, #584]	@ (800522c <AT_Send+0x378>)
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	2003      	movs	r0, #3
 8004fe8:	f009 fb18 	bl	800e61c <CreateLine>
    ATCommandSend = CWMODE1();
 8004fec:	230f      	movs	r3, #15
 8004fee:	18fc      	adds	r4, r7, r3
 8004ff0:	f7ff fbcc 	bl	800478c <CWMODE1>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ff8:	f009 ff50 	bl	800ee9c <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	330a      	adds	r3, #10
 8005000:	001a      	movs	r2, r3
 8005002:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <AT_Send+0x370>)
 8005004:	601a      	str	r2, [r3, #0]
    break;
 8005006:	e103      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005008:	4a8e      	ldr	r2, [pc, #568]	@ (8005244 <AT_Send+0x390>)
 800500a:	4b88      	ldr	r3, [pc, #544]	@ (800522c <AT_Send+0x378>)
 800500c:	0019      	movs	r1, r3
 800500e:	2003      	movs	r0, #3
 8005010:	f009 fb04 	bl	800e61c <CreateLine>
    ATCommandSend = CWMODE2();
 8005014:	230f      	movs	r3, #15
 8005016:	18fc      	adds	r4, r7, r3
 8005018:	f7ff fbd4 	bl	80047c4 <CWMODE2>
 800501c:	0003      	movs	r3, r0
 800501e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005020:	f009 ff3c 	bl	800ee9c <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	330a      	adds	r3, #10
 8005028:	001a      	movs	r2, r3
 800502a:	4b7e      	ldr	r3, [pc, #504]	@ (8005224 <AT_Send+0x370>)
 800502c:	601a      	str	r2, [r3, #0]
    break;
 800502e:	e0ef      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005030:	4a85      	ldr	r2, [pc, #532]	@ (8005248 <AT_Send+0x394>)
 8005032:	4b7e      	ldr	r3, [pc, #504]	@ (800522c <AT_Send+0x378>)
 8005034:	0019      	movs	r1, r3
 8005036:	2003      	movs	r0, #3
 8005038:	f009 faf0 	bl	800e61c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800503c:	230f      	movs	r3, #15
 800503e:	18fc      	adds	r4, r7, r3
 8005040:	f7ff fbdc 	bl	80047fc <CWAUTOCONN>
 8005044:	0003      	movs	r3, r0
 8005046:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005048:	f009 ff28 	bl	800ee9c <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	330a      	adds	r3, #10
 8005050:	001a      	movs	r2, r3
 8005052:	4b74      	ldr	r3, [pc, #464]	@ (8005224 <AT_Send+0x370>)
 8005054:	601a      	str	r2, [r3, #0]
    break;
 8005056:	e0db      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005058:	4a7c      	ldr	r2, [pc, #496]	@ (800524c <AT_Send+0x398>)
 800505a:	4b74      	ldr	r3, [pc, #464]	@ (800522c <AT_Send+0x378>)
 800505c:	0019      	movs	r1, r3
 800505e:	2003      	movs	r0, #3
 8005060:	f009 fadc 	bl	800e61c <CreateLine>
    ATCommandSend = CWJAP();
 8005064:	230f      	movs	r3, #15
 8005066:	18fc      	adds	r4, r7, r3
 8005068:	f7ff fbe4 	bl	8004834 <CWJAP>
 800506c:	0003      	movs	r3, r0
 800506e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005070:	f009 ff14 	bl	800ee9c <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	3332      	adds	r3, #50	@ 0x32
 8005078:	001a      	movs	r2, r3
 800507a:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <AT_Send+0x370>)
 800507c:	601a      	str	r2, [r3, #0]
    break;
 800507e:	e0c7      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005080:	4a73      	ldr	r2, [pc, #460]	@ (8005250 <AT_Send+0x39c>)
 8005082:	4b6a      	ldr	r3, [pc, #424]	@ (800522c <AT_Send+0x378>)
 8005084:	0019      	movs	r1, r3
 8005086:	2003      	movs	r0, #3
 8005088:	f009 fac8 	bl	800e61c <CreateLine>
    ATCommandSend = CWMODE3();
 800508c:	230f      	movs	r3, #15
 800508e:	18fc      	adds	r4, r7, r3
 8005090:	f7ff fc52 	bl	8004938 <CWMODE3>
 8005094:	0003      	movs	r3, r0
 8005096:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005098:	f009 ff00 	bl	800ee9c <HAL_GetTick>
 800509c:	0003      	movs	r3, r0
 800509e:	330a      	adds	r3, #10
 80050a0:	001a      	movs	r2, r3
 80050a2:	4b60      	ldr	r3, [pc, #384]	@ (8005224 <AT_Send+0x370>)
 80050a4:	601a      	str	r2, [r3, #0]
    break;
 80050a6:	e0b3      	b.n	8005210 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005254 <AT_Send+0x3a0>)
 80050aa:	4b60      	ldr	r3, [pc, #384]	@ (800522c <AT_Send+0x378>)
 80050ac:	0019      	movs	r1, r3
 80050ae:	2003      	movs	r0, #3
 80050b0:	f009 fab4 	bl	800e61c <CreateLine>
    ATCommandSend = CWSAP();
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fc      	adds	r4, r7, r3
 80050b8:	f7ff fc76 	bl	80049a8 <CWSAP>
 80050bc:	0003      	movs	r3, r0
 80050be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050c0:	f009 feec 	bl	800ee9c <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	330a      	adds	r3, #10
 80050c8:	001a      	movs	r2, r3
 80050ca:	4b56      	ldr	r3, [pc, #344]	@ (8005224 <AT_Send+0x370>)
 80050cc:	601a      	str	r2, [r3, #0]
    break;
 80050ce:	e09f      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80050d0:	4a61      	ldr	r2, [pc, #388]	@ (8005258 <AT_Send+0x3a4>)
 80050d2:	4b56      	ldr	r3, [pc, #344]	@ (800522c <AT_Send+0x378>)
 80050d4:	0019      	movs	r1, r3
 80050d6:	2003      	movs	r0, #3
 80050d8:	f009 faa0 	bl	800e61c <CreateLine>
    ATCommandSend = CIPMUX();
 80050dc:	230f      	movs	r3, #15
 80050de:	18fc      	adds	r4, r7, r3
 80050e0:	f7ff fc7e 	bl	80049e0 <CIPMUX>
 80050e4:	0003      	movs	r3, r0
 80050e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050e8:	f009 fed8 	bl	800ee9c <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	330a      	adds	r3, #10
 80050f0:	001a      	movs	r2, r3
 80050f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005224 <AT_Send+0x370>)
 80050f4:	601a      	str	r2, [r3, #0]
    break;
 80050f6:	e08b      	b.n	8005210 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80050f8:	4a58      	ldr	r2, [pc, #352]	@ (800525c <AT_Send+0x3a8>)
 80050fa:	4b4c      	ldr	r3, [pc, #304]	@ (800522c <AT_Send+0x378>)
 80050fc:	0019      	movs	r1, r3
 80050fe:	2003      	movs	r0, #3
 8005100:	f009 fa8c 	bl	800e61c <CreateLine>
    ATCommandSend = WEBSERVER();
 8005104:	230f      	movs	r3, #15
 8005106:	18fc      	adds	r4, r7, r3
 8005108:	f7ff fc86 	bl	8004a18 <WEBSERVER>
 800510c:	0003      	movs	r3, r0
 800510e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005110:	f009 fec4 	bl	800ee9c <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	330a      	adds	r3, #10
 8005118:	001a      	movs	r2, r3
 800511a:	4b42      	ldr	r3, [pc, #264]	@ (8005224 <AT_Send+0x370>)
 800511c:	601a      	str	r2, [r3, #0]
    break;
 800511e:	e077      	b.n	8005210 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005120:	230f      	movs	r3, #15
 8005122:	18fc      	adds	r4, r7, r3
 8005124:	f7ff fc94 	bl	8004a50 <HTTPCPOST>
 8005128:	0003      	movs	r3, r0
 800512a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800512c:	f009 feb6 	bl	800ee9c <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	33f5      	adds	r3, #245	@ 0xf5
 8005134:	33ff      	adds	r3, #255	@ 0xff
 8005136:	001a      	movs	r2, r3
 8005138:	4b3a      	ldr	r3, [pc, #232]	@ (8005224 <AT_Send+0x370>)
 800513a:	601a      	str	r2, [r3, #0]
    break;
 800513c:	e068      	b.n	8005210 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800513e:	4a48      	ldr	r2, [pc, #288]	@ (8005260 <AT_Send+0x3ac>)
 8005140:	4b3a      	ldr	r3, [pc, #232]	@ (800522c <AT_Send+0x378>)
 8005142:	0019      	movs	r1, r3
 8005144:	2003      	movs	r0, #3
 8005146:	f009 fa69 	bl	800e61c <CreateLine>
    ATCommandSend = SENDDATA();
 800514a:	230f      	movs	r3, #15
 800514c:	18fc      	adds	r4, r7, r3
 800514e:	f7ff fcdf 	bl	8004b10 <SENDDATA>
 8005152:	0003      	movs	r3, r0
 8005154:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005156:	f009 fea1 	bl	800ee9c <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	33f5      	adds	r3, #245	@ 0xf5
 800515e:	33ff      	adds	r3, #255	@ 0xff
 8005160:	001a      	movs	r2, r3
 8005162:	4b30      	ldr	r3, [pc, #192]	@ (8005224 <AT_Send+0x370>)
 8005164:	601a      	str	r2, [r3, #0]
    break;
 8005166:	e053      	b.n	8005210 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005168:	4a3e      	ldr	r2, [pc, #248]	@ (8005264 <AT_Send+0x3b0>)
 800516a:	4b30      	ldr	r3, [pc, #192]	@ (800522c <AT_Send+0x378>)
 800516c:	0019      	movs	r1, r3
 800516e:	2003      	movs	r0, #3
 8005170:	f009 fa54 	bl	800e61c <CreateLine>
    ATCommandSend = SLEEP();
 8005174:	230f      	movs	r3, #15
 8005176:	18fc      	adds	r4, r7, r3
 8005178:	f7ff fce6 	bl	8004b48 <SLEEP>
 800517c:	0003      	movs	r3, r0
 800517e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005180:	f009 fe8c 	bl	800ee9c <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	330a      	adds	r3, #10
 8005188:	001a      	movs	r2, r3
 800518a:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <AT_Send+0x370>)
 800518c:	601a      	str	r2, [r3, #0]
    break;
 800518e:	e03f      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005190:	4a35      	ldr	r2, [pc, #212]	@ (8005268 <AT_Send+0x3b4>)
 8005192:	4b26      	ldr	r3, [pc, #152]	@ (800522c <AT_Send+0x378>)
 8005194:	0019      	movs	r1, r3
 8005196:	2003      	movs	r0, #3
 8005198:	f009 fa40 	bl	800e61c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 800519c:	230f      	movs	r3, #15
 800519e:	18fc      	adds	r4, r7, r3
 80051a0:	f7ff fcee 	bl	8004b80 <CIPSNTPCFG>
 80051a4:	0003      	movs	r3, r0
 80051a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051a8:	f009 fe78 	bl	800ee9c <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	330a      	adds	r3, #10
 80051b0:	001a      	movs	r2, r3
 80051b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005224 <AT_Send+0x370>)
 80051b4:	601a      	str	r2, [r3, #0]
    break;
 80051b6:	e02b      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051b8:	4a2c      	ldr	r2, [pc, #176]	@ (800526c <AT_Send+0x3b8>)
 80051ba:	4b1c      	ldr	r3, [pc, #112]	@ (800522c <AT_Send+0x378>)
 80051bc:	0019      	movs	r1, r3
 80051be:	2003      	movs	r0, #3
 80051c0:	f009 fa2c 	bl	800e61c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051c4:	230f      	movs	r3, #15
 80051c6:	18fc      	adds	r4, r7, r3
 80051c8:	f7ff fcfa 	bl	8004bc0 <CIPSNTPTIME>
 80051cc:	0003      	movs	r3, r0
 80051ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051d0:	f009 fe64 	bl	800ee9c <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	33f5      	adds	r3, #245	@ 0xf5
 80051d8:	33ff      	adds	r3, #255	@ 0xff
 80051da:	001a      	movs	r2, r3
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <AT_Send+0x370>)
 80051de:	601a      	str	r2, [r3, #0]
    break;
 80051e0:	e016      	b.n	8005210 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051e2:	4a23      	ldr	r2, [pc, #140]	@ (8005270 <AT_Send+0x3bc>)
 80051e4:	4b11      	ldr	r3, [pc, #68]	@ (800522c <AT_Send+0x378>)
 80051e6:	0019      	movs	r1, r3
 80051e8:	2003      	movs	r0, #3
 80051ea:	f009 fa17 	bl	800e61c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80051ee:	230f      	movs	r3, #15
 80051f0:	18fc      	adds	r4, r7, r3
 80051f2:	f7ff fd01 	bl	8004bf8 <CIPSNTPINTV>
 80051f6:	0003      	movs	r3, r0
 80051f8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051fa:	f009 fe4f 	bl	800ee9c <HAL_GetTick>
 80051fe:	0003      	movs	r3, r0
 8005200:	330a      	adds	r3, #10
 8005202:	001a      	movs	r2, r3
 8005204:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <AT_Send+0x370>)
 8005206:	601a      	str	r2, [r3, #0]
    break;
 8005208:	e002      	b.n	8005210 <AT_Send+0x35c>

  case AT_END:
    break;
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	e000      	b.n	8005210 <AT_Send+0x35c>
  break;
 800520e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005210:	230f      	movs	r3, #15
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	781b      	ldrb	r3, [r3, #0]
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b005      	add	sp, #20
 800521c:	bd90      	pop	{r4, r7, pc}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	080254e4 	.word	0x080254e4
 8005224:	20000a08 	.word	0x20000a08
 8005228:	08023a80 	.word	0x08023a80
 800522c:	080232c0 	.word	0x080232c0
 8005230:	08023a8c 	.word	0x08023a8c
 8005234:	08023aa0 	.word	0x08023aa0
 8005238:	08023ab4 	.word	0x08023ab4
 800523c:	08023ac4 	.word	0x08023ac4
 8005240:	08023ad8 	.word	0x08023ad8
 8005244:	08023af0 	.word	0x08023af0
 8005248:	08023b08 	.word	0x08023b08
 800524c:	08023b20 	.word	0x08023b20
 8005250:	08023b34 	.word	0x08023b34
 8005254:	08023b50 	.word	0x08023b50
 8005258:	08023b6c 	.word	0x08023b6c
 800525c:	08023b88 	.word	0x08023b88
 8005260:	08023ba4 	.word	0x08023ba4
 8005264:	08023bb4 	.word	0x08023bb4
 8005268:	08023bd8 	.word	0x08023bd8
 800526c:	08023bec 	.word	0x08023bec
 8005270:	08023c04 	.word	0x08023c04

08005274 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800527a:	1dfb      	adds	r3, r7, #7
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005280:	4b7d      	ldr	r3, [pc, #500]	@ (8005478 <ESP_WakeTest+0x204>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b05      	cmp	r3, #5
 8005286:	d900      	bls.n	800528a <ESP_WakeTest+0x16>
 8005288:	e0d9      	b.n	800543e <ESP_WakeTest+0x1ca>
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	4b7b      	ldr	r3, [pc, #492]	@ (800547c <ESP_WakeTest+0x208>)
 800528e:	18d3      	adds	r3, r2, r3
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005294:	4b7a      	ldr	r3, [pc, #488]	@ (8005480 <ESP_WakeTest+0x20c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4053      	eors	r3, r2
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4877      	ldr	r0, [pc, #476]	@ (8005484 <ESP_WakeTest+0x210>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	0019      	movs	r1, r3
 80052ac:	f00b f887 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052b0:	2032      	movs	r0, #50	@ 0x32
 80052b2:	f009 fdfd 	bl	800eeb0 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	4872      	ldr	r0, [pc, #456]	@ (8005484 <ESP_WakeTest+0x210>)
 80052bc:	2201      	movs	r2, #1
 80052be:	0019      	movs	r1, r3
 80052c0:	f00b f87d 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052c4:	200a      	movs	r0, #10
 80052c6:	f009 fdf3 	bl	800eeb0 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005488 <ESP_WakeTest+0x214>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	2101      	movs	r1, #1
 80052d0:	0018      	movs	r0, r3
 80052d2:	f00b f874 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052d6:	200a      	movs	r0, #10
 80052d8:	f009 fdea 	bl	800eeb0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <ESP_WakeTest+0x214>)
 80052de:	2201      	movs	r2, #1
 80052e0:	2102      	movs	r1, #2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f00b f86b 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052e8:	200a      	movs	r0, #10
 80052ea:	f009 fde1 	bl	800eeb0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052ee:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <ESP_WakeTest+0x214>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	2101      	movs	r1, #1
 80052f4:	0018      	movs	r0, r3
 80052f6:	f00b f862 	bl	80103be <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052fa:	f009 fdcf 	bl	800ee9c <HAL_GetTick>
 80052fe:	0003      	movs	r3, r0
 8005300:	22af      	movs	r2, #175	@ 0xaf
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	189a      	adds	r2, r3, r2
 8005306:	4b61      	ldr	r3, [pc, #388]	@ (800548c <ESP_WakeTest+0x218>)
 8005308:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800530a:	4b5d      	ldr	r3, [pc, #372]	@ (8005480 <ESP_WakeTest+0x20c>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	005a      	lsls	r2, r3, #1
 8005314:	4b5e      	ldr	r3, [pc, #376]	@ (8005490 <ESP_WakeTest+0x21c>)
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7fe fc4b 	bl	8003bb4 <ESP_Receive>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d100      	bne.n	8005324 <ESP_WakeTest+0xb0>
 8005322:	e09f      	b.n	8005464 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005324:	4b54      	ldr	r3, [pc, #336]	@ (8005478 <ESP_WakeTest+0x204>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
      }
      break;
 800532a:	e09b      	b.n	8005464 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800532c:	4b57      	ldr	r3, [pc, #348]	@ (800548c <ESP_WakeTest+0x218>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0018      	movs	r0, r3
 8005332:	f009 f91d 	bl	800e570 <TimestampIsReached>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d100      	bne.n	800533c <ESP_WakeTest+0xc8>
 800533a:	e095      	b.n	8005468 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800533c:	4b55      	ldr	r3, [pc, #340]	@ (8005494 <ESP_WakeTest+0x220>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	1dfc      	adds	r4, r7, #7
 8005342:	0018      	movs	r0, r3
 8005344:	f7ff fdb6 	bl	8004eb4 <AT_Send>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d100      	bne.n	8005356 <ESP_WakeTest+0xe2>
 8005354:	e088      	b.n	8005468 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005356:	4b48      	ldr	r3, [pc, #288]	@ (8005478 <ESP_WakeTest+0x204>)
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800535c:	e084      	b.n	8005468 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800535e:	4b4b      	ldr	r3, [pc, #300]	@ (800548c <ESP_WakeTest+0x218>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0018      	movs	r0, r3
 8005364:	f009 f904 	bl	800e570 <TimestampIsReached>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d100      	bne.n	800536e <ESP_WakeTest+0xfa>
 800536c:	e07e      	b.n	800546c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800536e:	4b4a      	ldr	r3, [pc, #296]	@ (8005498 <ESP_WakeTest+0x224>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	0018      	movs	r0, r3
 8005374:	f7ff fc5c 	bl	8004c30 <DMA_ProcessBuffer>
 8005378:	0003      	movs	r3, r0
 800537a:	001a      	movs	r2, r3
 800537c:	4b47      	ldr	r3, [pc, #284]	@ (800549c <ESP_WakeTest+0x228>)
 800537e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005380:	4b46      	ldr	r3, [pc, #280]	@ (800549c <ESP_WakeTest+0x228>)
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	4b44      	ldr	r3, [pc, #272]	@ (8005498 <ESP_WakeTest+0x224>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	1dbc      	adds	r4, r7, #6
 800538a:	0019      	movs	r1, r3
 800538c:	0010      	movs	r0, r2
 800538e:	f7ff fd4f 	bl	8004e30 <ATCompare>
 8005392:	0003      	movs	r3, r0
 8005394:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005396:	4b41      	ldr	r3, [pc, #260]	@ (800549c <ESP_WakeTest+0x228>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d102      	bne.n	80053a4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800539e:	4b36      	ldr	r3, [pc, #216]	@ (8005478 <ESP_WakeTest+0x204>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053a4:	4b3d      	ldr	r3, [pc, #244]	@ (800549c <ESP_WakeTest+0x228>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b07      	cmp	r3, #7
 80053aa:	d104      	bne.n	80053b6 <ESP_WakeTest+0x142>
          StartProg();
 80053ac:	f7fe ff40 	bl	8004230 <StartProg>
          TestState = ESP_TEST_BOOT;
 80053b0:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <ESP_WakeTest+0x204>)
 80053b2:	2205      	movs	r2, #5
 80053b4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053b6:	4b39      	ldr	r3, [pc, #228]	@ (800549c <ESP_WakeTest+0x228>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d109      	bne.n	80053d2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053be:	f009 fd6d 	bl	800ee9c <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	3332      	adds	r3, #50	@ 0x32
 80053c6:	001a      	movs	r2, r3
 80053c8:	4b30      	ldr	r3, [pc, #192]	@ (800548c <ESP_WakeTest+0x218>)
 80053ca:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <ESP_WakeTest+0x204>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d048      	beq.n	800546c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80053da:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <ESP_WakeTest+0x204>)
 80053dc:	2203      	movs	r2, #3
 80053de:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053e0:	e044      	b.n	800546c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053e2:	4b2f      	ldr	r3, [pc, #188]	@ (80054a0 <ESP_WakeTest+0x22c>)
 80053e4:	22fa      	movs	r2, #250	@ 0xfa
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80053ea:	f007 fe99 	bl	800d120 <Calculate_LED_ON>
 80053ee:	0003      	movs	r3, r0
 80053f0:	001a      	movs	r2, r3
 80053f2:	4b2b      	ldr	r3, [pc, #172]	@ (80054a0 <ESP_WakeTest+0x22c>)
 80053f4:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80053f6:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <ESP_WakeTest+0x22c>)
 80053f8:	22fa      	movs	r2, #250	@ 0xfa
 80053fa:	0112      	lsls	r2, r2, #4
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80053fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <ESP_WakeTest+0x204>)
 8005400:	2204      	movs	r2, #4
 8005402:	701a      	strb	r2, [r3, #0]

      break;
 8005404:	e033      	b.n	800546e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005406:	4b27      	ldr	r3, [pc, #156]	@ (80054a4 <ESP_WakeTest+0x230>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800540c:	4b1c      	ldr	r3, [pc, #112]	@ (8005480 <ESP_WakeTest+0x20c>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005412:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <ESP_WakeTest+0x214>)
 8005414:	2200      	movs	r2, #0
 8005416:	2101      	movs	r1, #1
 8005418:	0018      	movs	r0, r3
 800541a:	f00a ffd0 	bl	80103be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	4818      	ldr	r0, [pc, #96]	@ (8005484 <ESP_WakeTest+0x210>)
 8005424:	2200      	movs	r2, #0
 8005426:	0019      	movs	r1, r3
 8005428:	f00a ffc9 	bl	80103be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800542c:	4b16      	ldr	r3, [pc, #88]	@ (8005488 <ESP_WakeTest+0x214>)
 800542e:	2200      	movs	r2, #0
 8005430:	2102      	movs	r1, #2
 8005432:	0018      	movs	r0, r3
 8005434:	f00a ffc3 	bl	80103be <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005438:	f003 f834 	bl	80084a4 <SetESPMeasurementDone>
      break;
 800543c:	e017      	b.n	800546e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800543e:	4b0e      	ldr	r3, [pc, #56]	@ (8005478 <ESP_WakeTest+0x204>)
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
      break;
 8005444:	e013      	b.n	800546e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005446:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <ESP_WakeTest+0x22c>)
 8005448:	22fa      	movs	r2, #250	@ 0xfa
 800544a:	0112      	lsls	r2, r2, #4
 800544c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <ESP_WakeTest+0x22c>)
 8005450:	22fa      	movs	r2, #250	@ 0xfa
 8005452:	0112      	lsls	r2, r2, #4
 8005454:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005456:	f007 fe63 	bl	800d120 <Calculate_LED_ON>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <ESP_WakeTest+0x22c>)
 8005460:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005462:	e004      	b.n	800546e <ESP_WakeTest+0x1fa>
      break;
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	e002      	b.n	800546e <ESP_WakeTest+0x1fa>
      break;
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	e000      	b.n	800546e <ESP_WakeTest+0x1fa>
      break;
 800546c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b003      	add	sp, #12
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	20000a10 	.word	0x20000a10
 800547c:	08025538 	.word	0x08025538
 8005480:	20000550 	.word	0x20000550
 8005484:	50000800 	.word	0x50000800
 8005488:	50001c00 	.word	0x50001c00
 800548c:	20000a08 	.word	0x20000a08
 8005490:	20000450 	.word	0x20000450
 8005494:	20000a0e 	.word	0x20000a0e
 8005498:	20000a0d 	.word	0x20000a0d
 800549c:	20000031 	.word	0x20000031
 80054a0:	40000400 	.word	0x40000400
 80054a4:	20000000 	.word	0x20000000

080054a8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80054ae:	1dfb      	adds	r3, r7, #7
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054b4:	4be2      	ldr	r3, [pc, #904]	@ (8005840 <ESP_Upkeep+0x398>)
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	4be2      	ldr	r3, [pc, #904]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d024      	beq.n	800550a <ESP_Upkeep+0x62>
 80054c0:	f009 f926 	bl	800e710 <GetVerboseLevel>
 80054c4:	0003      	movs	r3, r0
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d11f      	bne.n	800550a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054ca:	4bdd      	ldr	r3, [pc, #884]	@ (8005840 <ESP_Upkeep+0x398>)
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	4bdd      	ldr	r3, [pc, #884]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054d0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054d2:	4bdc      	ldr	r3, [pc, #880]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d103      	bne.n	80054e2 <ESP_Upkeep+0x3a>
 80054da:	4bdb      	ldr	r3, [pc, #876]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b0e      	cmp	r3, #14
 80054e0:	d013      	beq.n	800550a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80054e2:	4bd8      	ldr	r3, [pc, #864]	@ (8005844 <ESP_Upkeep+0x39c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	001d      	movs	r5, r3
 80054e8:	4bd7      	ldr	r3, [pc, #860]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	0018      	movs	r0, r3
 80054ee:	4bd7      	ldr	r3, [pc, #860]	@ (800584c <ESP_Upkeep+0x3a4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	001c      	movs	r4, r3
 80054f4:	4bd6      	ldr	r3, [pc, #856]	@ (8005850 <ESP_Upkeep+0x3a8>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4ad6      	ldr	r2, [pc, #856]	@ (8005854 <ESP_Upkeep+0x3ac>)
 80054fa:	49d7      	ldr	r1, [pc, #860]	@ (8005858 <ESP_Upkeep+0x3b0>)
 80054fc:	9302      	str	r3, [sp, #8]
 80054fe:	9401      	str	r4, [sp, #4]
 8005500:	9000      	str	r0, [sp, #0]
 8005502:	002b      	movs	r3, r5
 8005504:	2003      	movs	r0, #3
 8005506:	f009 f889 	bl	800e61c <CreateLine>
    }
  }
  switch (EspState) {
 800550a:	4bcd      	ldr	r3, [pc, #820]	@ (8005840 <ESP_Upkeep+0x398>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	d901      	bls.n	8005516 <ESP_Upkeep+0x6e>
 8005512:	f000 fc32 	bl	8005d7a <ESP_Upkeep+0x8d2>
 8005516:	009a      	lsls	r2, r3, #2
 8005518:	4bd0      	ldr	r3, [pc, #832]	@ (800585c <ESP_Upkeep+0x3b4>)
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005520:	4bc7      	ldr	r3, [pc, #796]	@ (8005840 <ESP_Upkeep+0x398>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	f000 fc41 	bl	8005dac <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800552a:	f003 fa1b 	bl	8008964 <DisableConnectedDevices>
      SetESPIndicator();
 800552e:	f007 ff89 	bl	800d444 <SetESPIndicator>
      if(!EspTurnedOn){
 8005532:	4bcb      	ldr	r3, [pc, #812]	@ (8005860 <ESP_Upkeep+0x3b8>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	4053      	eors	r3, r2
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d036      	beq.n	80055ae <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	48c7      	ldr	r0, [pc, #796]	@ (8005864 <ESP_Upkeep+0x3bc>)
 8005546:	2200      	movs	r2, #0
 8005548:	0019      	movs	r1, r3
 800554a:	f00a ff38 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800554e:	2001      	movs	r0, #1
 8005550:	f009 fcae 	bl	800eeb0 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	48c2      	ldr	r0, [pc, #776]	@ (8005864 <ESP_Upkeep+0x3bc>)
 800555a:	2201      	movs	r2, #1
 800555c:	0019      	movs	r1, r3
 800555e:	f00a ff2e 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005562:	2001      	movs	r0, #1
 8005564:	f009 fca4 	bl	800eeb0 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005568:	4bbf      	ldr	r3, [pc, #764]	@ (8005868 <ESP_Upkeep+0x3c0>)
 800556a:	2200      	movs	r2, #0
 800556c:	2101      	movs	r1, #1
 800556e:	0018      	movs	r0, r3
 8005570:	f00a ff25 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005574:	2001      	movs	r0, #1
 8005576:	f009 fc9b 	bl	800eeb0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800557a:	4bbb      	ldr	r3, [pc, #748]	@ (8005868 <ESP_Upkeep+0x3c0>)
 800557c:	2201      	movs	r2, #1
 800557e:	2102      	movs	r1, #2
 8005580:	0018      	movs	r0, r3
 8005582:	f00a ff1c 	bl	80103be <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005586:	2001      	movs	r0, #1
 8005588:	f009 fc92 	bl	800eeb0 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800558c:	4bb6      	ldr	r3, [pc, #728]	@ (8005868 <ESP_Upkeep+0x3c0>)
 800558e:	2201      	movs	r2, #1
 8005590:	2101      	movs	r1, #1
 8005592:	0018      	movs	r0, r3
 8005594:	f00a ff13 	bl	80103be <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005598:	f009 fc80 	bl	800ee9c <HAL_GetTick>
 800559c:	0003      	movs	r3, r0
 800559e:	22af      	movs	r2, #175	@ 0xaf
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	189a      	adds	r2, r3, r2
 80055a4:	4bb1      	ldr	r3, [pc, #708]	@ (800586c <ESP_Upkeep+0x3c4>)
 80055a6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055a8:	4bad      	ldr	r3, [pc, #692]	@ (8005860 <ESP_Upkeep+0x3b8>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80055ae:	2380      	movs	r3, #128	@ 0x80
 80055b0:	005a      	lsls	r2, r3, #1
 80055b2:	4baf      	ldr	r3, [pc, #700]	@ (8005870 <ESP_Upkeep+0x3c8>)
 80055b4:	0011      	movs	r1, r2
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7fe fafc 	bl	8003bb4 <ESP_Receive>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d101      	bne.n	80055c4 <ESP_Upkeep+0x11c>
 80055c0:	f000 fbe7 	bl	8005d92 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055c4:	4b9e      	ldr	r3, [pc, #632]	@ (8005840 <ESP_Upkeep+0x398>)
 80055c6:	220f      	movs	r2, #15
 80055c8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055ca:	f009 fc67 	bl	800ee9c <HAL_GetTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	22fa      	movs	r2, #250	@ 0xfa
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	189a      	adds	r2, r3, r2
 80055d6:	4ba7      	ldr	r3, [pc, #668]	@ (8005874 <ESP_Upkeep+0x3cc>)
 80055d8:	601a      	str	r2, [r3, #0]
      }
      break;
 80055da:	f000 fbda 	bl	8005d92 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055de:	2001      	movs	r0, #1
 80055e0:	f7ff fb26 	bl	8004c30 <DMA_ProcessBuffer>
 80055e4:	0003      	movs	r3, r0
 80055e6:	001a      	movs	r2, r3
 80055e8:	4ba3      	ldr	r3, [pc, #652]	@ (8005878 <ESP_Upkeep+0x3d0>)
 80055ea:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80055ec:	4ba2      	ldr	r3, [pc, #648]	@ (8005878 <ESP_Upkeep+0x3d0>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	1dbc      	adds	r4, r7, #6
 80055f2:	2101      	movs	r1, #1
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7ff fc1b 	bl	8004e30 <ATCompare>
 80055fa:	0003      	movs	r3, r0
 80055fc:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80055fe:	1dbb      	adds	r3, r7, #6
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <ESP_Upkeep+0x170>
 8005606:	4b9b      	ldr	r3, [pc, #620]	@ (8005874 <ESP_Upkeep+0x3cc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	0018      	movs	r0, r3
 800560c:	f008 ffb0 	bl	800e570 <TimestampIsReached>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d101      	bne.n	8005618 <ESP_Upkeep+0x170>
 8005614:	f000 fbbf 	bl	8005d96 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005618:	4b89      	ldr	r3, [pc, #548]	@ (8005840 <ESP_Upkeep+0x398>)
 800561a:	220b      	movs	r2, #11
 800561c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800561e:	f000 fbba 	bl	8005d96 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005622:	4b96      	ldr	r3, [pc, #600]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005624:	2209      	movs	r2, #9
 8005626:	2114      	movs	r1, #20
 8005628:	0018      	movs	r0, r3
 800562a:	f01a fe8f 	bl	802034c <memset>
      if(!InitIsDone || WifiReset){
 800562e:	4b94      	ldr	r3, [pc, #592]	@ (8005880 <ESP_Upkeep+0x3d8>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2201      	movs	r2, #1
 8005634:	4053      	eors	r3, r2
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <ESP_Upkeep+0x19c>
 800563c:	4b91      	ldr	r3, [pc, #580]	@ (8005884 <ESP_Upkeep+0x3dc>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005644:	4b8d      	ldr	r3, [pc, #564]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005646:	4a90      	ldr	r2, [pc, #576]	@ (8005888 <ESP_Upkeep+0x3e0>)
 8005648:	6811      	ldr	r1, [r2, #0]
 800564a:	6019      	str	r1, [r3, #0]
 800564c:	8891      	ldrh	r1, [r2, #4]
 800564e:	8099      	strh	r1, [r3, #4]
 8005650:	7992      	ldrb	r2, [r2, #6]
 8005652:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005654:	4b7a      	ldr	r3, [pc, #488]	@ (8005840 <ESP_Upkeep+0x398>)
 8005656:	2204      	movs	r2, #4
 8005658:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800565a:	4b8c      	ldr	r3, [pc, #560]	@ (800588c <ESP_Upkeep+0x3e4>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005660:	4b7a      	ldr	r3, [pc, #488]	@ (800584c <ESP_Upkeep+0x3a4>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005666:	4b89      	ldr	r3, [pc, #548]	@ (800588c <ESP_Upkeep+0x3e4>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	001a      	movs	r2, r3
 800566c:	4b83      	ldr	r3, [pc, #524]	@ (800587c <ESP_Upkeep+0x3d4>)
 800566e:	5c9a      	ldrb	r2, [r3, r2]
 8005670:	4b75      	ldr	r3, [pc, #468]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005672:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005674:	4b76      	ldr	r3, [pc, #472]	@ (8005850 <ESP_Upkeep+0x3a8>)
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800567a:	4b81      	ldr	r3, [pc, #516]	@ (8005880 <ESP_Upkeep+0x3d8>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01f      	beq.n	80056c2 <ESP_Upkeep+0x21a>
 8005682:	4b83      	ldr	r3, [pc, #524]	@ (8005890 <ESP_Upkeep+0x3e8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	4053      	eors	r3, r2
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d018      	beq.n	80056c2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005690:	4b7a      	ldr	r3, [pc, #488]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005692:	4a80      	ldr	r2, [pc, #512]	@ (8005894 <ESP_Upkeep+0x3ec>)
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	6019      	str	r1, [r3, #0]
 8005698:	8892      	ldrh	r2, [r2, #4]
 800569a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800569c:	4b68      	ldr	r3, [pc, #416]	@ (8005840 <ESP_Upkeep+0x398>)
 800569e:	2204      	movs	r2, #4
 80056a0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056a2:	4b7a      	ldr	r3, [pc, #488]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80056a8:	4b68      	ldr	r3, [pc, #416]	@ (800584c <ESP_Upkeep+0x3a4>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056ae:	4b77      	ldr	r3, [pc, #476]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	001a      	movs	r2, r3
 80056b4:	4b71      	ldr	r3, [pc, #452]	@ (800587c <ESP_Upkeep+0x3d4>)
 80056b6:	5c9a      	ldrb	r2, [r3, r2]
 80056b8:	4b63      	ldr	r3, [pc, #396]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80056ba:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056bc:	4b64      	ldr	r3, [pc, #400]	@ (8005850 <ESP_Upkeep+0x3a8>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005880 <ESP_Upkeep+0x3d8>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d021      	beq.n	800570e <ESP_Upkeep+0x266>
 80056ca:	4b71      	ldr	r3, [pc, #452]	@ (8005890 <ESP_Upkeep+0x3e8>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01d      	beq.n	800570e <ESP_Upkeep+0x266>
 80056d2:	4b71      	ldr	r3, [pc, #452]	@ (8005898 <ESP_Upkeep+0x3f0>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2201      	movs	r2, #1
 80056d8:	4053      	eors	r3, r2
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d016      	beq.n	800570e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056e0:	4b6e      	ldr	r3, [pc, #440]	@ (800589c <ESP_Upkeep+0x3f4>)
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	4b65      	ldr	r3, [pc, #404]	@ (800587c <ESP_Upkeep+0x3d4>)
 80056e6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056e8:	4b55      	ldr	r3, [pc, #340]	@ (8005840 <ESP_Upkeep+0x398>)
 80056ea:	2204      	movs	r2, #4
 80056ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056ee:	4b67      	ldr	r3, [pc, #412]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80056f4:	4b55      	ldr	r3, [pc, #340]	@ (800584c <ESP_Upkeep+0x3a4>)
 80056f6:	2204      	movs	r2, #4
 80056f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056fa:	4b64      	ldr	r3, [pc, #400]	@ (800588c <ESP_Upkeep+0x3e4>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	001a      	movs	r2, r3
 8005700:	4b5e      	ldr	r3, [pc, #376]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005702:	5c9a      	ldrb	r2, [r3, r2]
 8005704:	4b50      	ldr	r3, [pc, #320]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005706:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005708:	4b51      	ldr	r3, [pc, #324]	@ (8005850 <ESP_Upkeep+0x3a8>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800570e:	4b5c      	ldr	r3, [pc, #368]	@ (8005880 <ESP_Upkeep+0x3d8>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02c      	beq.n	8005770 <ESP_Upkeep+0x2c8>
 8005716:	4b5e      	ldr	r3, [pc, #376]	@ (8005890 <ESP_Upkeep+0x3e8>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d028      	beq.n	8005770 <ESP_Upkeep+0x2c8>
 800571e:	4b5e      	ldr	r3, [pc, #376]	@ (8005898 <ESP_Upkeep+0x3f0>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d024      	beq.n	8005770 <ESP_Upkeep+0x2c8>
 8005726:	4b5e      	ldr	r3, [pc, #376]	@ (80058a0 <ESP_Upkeep+0x3f8>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	4053      	eors	r3, r2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01d      	beq.n	8005770 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005734:	4b51      	ldr	r3, [pc, #324]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005736:	4a5b      	ldr	r2, [pc, #364]	@ (80058a4 <ESP_Upkeep+0x3fc>)
 8005738:	8811      	ldrh	r1, [r2, #0]
 800573a:	8019      	strh	r1, [r3, #0]
 800573c:	7892      	ldrb	r2, [r2, #2]
 800573e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005740:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <ESP_Upkeep+0x398>)
 8005742:	2204      	movs	r2, #4
 8005744:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005746:	4b51      	ldr	r3, [pc, #324]	@ (800588c <ESP_Upkeep+0x3e4>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800574c:	4b3f      	ldr	r3, [pc, #252]	@ (800584c <ESP_Upkeep+0x3a4>)
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005752:	f009 fba3 	bl	800ee9c <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	4b53      	ldr	r3, [pc, #332]	@ (80058a8 <ESP_Upkeep+0x400>)
 800575a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800575c:	4b4b      	ldr	r3, [pc, #300]	@ (800588c <ESP_Upkeep+0x3e4>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	001a      	movs	r2, r3
 8005762:	4b46      	ldr	r3, [pc, #280]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005764:	5c9a      	ldrb	r2, [r3, r2]
 8005766:	4b38      	ldr	r3, [pc, #224]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005768:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800576a:	4b39      	ldr	r3, [pc, #228]	@ (8005850 <ESP_Upkeep+0x3a8>)
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005770:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <ESP_Upkeep+0x3d8>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d027      	beq.n	80057c8 <ESP_Upkeep+0x320>
 8005778:	4b45      	ldr	r3, [pc, #276]	@ (8005890 <ESP_Upkeep+0x3e8>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d023      	beq.n	80057c8 <ESP_Upkeep+0x320>
 8005780:	4b45      	ldr	r3, [pc, #276]	@ (8005898 <ESP_Upkeep+0x3f0>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01f      	beq.n	80057c8 <ESP_Upkeep+0x320>
 8005788:	4b45      	ldr	r3, [pc, #276]	@ (80058a0 <ESP_Upkeep+0x3f8>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005790:	4b46      	ldr	r3, [pc, #280]	@ (80058ac <ESP_Upkeep+0x404>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b39      	ldr	r3, [pc, #228]	@ (800587c <ESP_Upkeep+0x3d4>)
 8005796:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <ESP_Upkeep+0x398>)
 800579a:	2204      	movs	r2, #4
 800579c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <ESP_Upkeep+0x3e4>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80057a4:	4b29      	ldr	r3, [pc, #164]	@ (800584c <ESP_Upkeep+0x3a4>)
 80057a6:	2205      	movs	r2, #5
 80057a8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80057aa:	f009 fb77 	bl	800ee9c <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	4b3d      	ldr	r3, [pc, #244]	@ (80058a8 <ESP_Upkeep+0x400>)
 80057b2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057b4:	4b35      	ldr	r3, [pc, #212]	@ (800588c <ESP_Upkeep+0x3e4>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	001a      	movs	r2, r3
 80057ba:	4b30      	ldr	r3, [pc, #192]	@ (800587c <ESP_Upkeep+0x3d4>)
 80057bc:	5c9a      	ldrb	r2, [r3, r2]
 80057be:	4b22      	ldr	r3, [pc, #136]	@ (8005848 <ESP_Upkeep+0x3a0>)
 80057c0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057c2:	4b23      	ldr	r3, [pc, #140]	@ (8005850 <ESP_Upkeep+0x3a8>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80057c8:	4b39      	ldr	r3, [pc, #228]	@ (80058b0 <ESP_Upkeep+0x408>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d100      	bne.n	80057d2 <ESP_Upkeep+0x32a>
 80057d0:	e2e3      	b.n	8005d9a <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80057d2:	4b2a      	ldr	r3, [pc, #168]	@ (800587c <ESP_Upkeep+0x3d4>)
 80057d4:	4a37      	ldr	r2, [pc, #220]	@ (80058b4 <ESP_Upkeep+0x40c>)
 80057d6:	6811      	ldr	r1, [r2, #0]
 80057d8:	6019      	str	r1, [r3, #0]
 80057da:	7912      	ldrb	r2, [r2, #4]
 80057dc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80057de:	4a36      	ldr	r2, [pc, #216]	@ (80058b8 <ESP_Upkeep+0x410>)
 80057e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <ESP_Upkeep+0x3b0>)
 80057e2:	0019      	movs	r1, r3
 80057e4:	2003      	movs	r0, #3
 80057e6:	f008 ff19 	bl	800e61c <CreateLine>
        DisableConnectedDevices();
 80057ea:	f003 f8bb 	bl	8008964 <DisableConnectedDevices>
        usblog = false;
 80057ee:	4b33      	ldr	r3, [pc, #204]	@ (80058bc <ESP_Upkeep+0x414>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057f4:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <ESP_Upkeep+0x398>)
 80057f6:	2204      	movs	r2, #4
 80057f8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057fa:	4b24      	ldr	r3, [pc, #144]	@ (800588c <ESP_Upkeep+0x3e4>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <ESP_Upkeep+0x3a4>)
 8005802:	2203      	movs	r2, #3
 8005804:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005806:	4b21      	ldr	r3, [pc, #132]	@ (800588c <ESP_Upkeep+0x3e4>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	001a      	movs	r2, r3
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <ESP_Upkeep+0x3d4>)
 800580e:	5c9a      	ldrb	r2, [r3, r2]
 8005810:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <ESP_Upkeep+0x3a0>)
 8005812:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <ESP_Upkeep+0x3a8>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
      }
    break;
 800581a:	e2be      	b.n	8005d9a <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <ESP_Upkeep+0x3a0>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	1dfc      	adds	r4, r7, #7
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff fb46 	bl	8004eb4 <AT_Send>
 8005828:	0003      	movs	r3, r0
 800582a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <ESP_Upkeep+0x38e>
 8005834:	e2b3      	b.n	8005d9e <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005836:	4b02      	ldr	r3, [pc, #8]	@ (8005840 <ESP_Upkeep+0x398>)
 8005838:	2203      	movs	r2, #3
 800583a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800583c:	e2af      	b.n	8005d9e <ESP_Upkeep+0x8f6>
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	20000030 	.word	0x20000030
 8005844:	20000002 	.word	0x20000002
 8005848:	20000a0e 	.word	0x20000a0e
 800584c:	20000a0f 	.word	0x20000a0f
 8005850:	20000a0d 	.word	0x20000a0d
 8005854:	08023c24 	.word	0x08023c24
 8005858:	080232c0 	.word	0x080232c0
 800585c:	08025550 	.word	0x08025550
 8005860:	20000550 	.word	0x20000550
 8005864:	50000800 	.word	0x50000800
 8005868:	50001c00 	.word	0x50001c00
 800586c:	20000a08 	.word	0x20000a08
 8005870:	20000450 	.word	0x20000450
 8005874:	20000b48 	.word	0x20000b48
 8005878:	20000032 	.word	0x20000032
 800587c:	200009f8 	.word	0x200009f8
 8005880:	20000551 	.word	0x20000551
 8005884:	20000552 	.word	0x20000552
 8005888:	20000004 	.word	0x20000004
 800588c:	20000a02 	.word	0x20000a02
 8005890:	20000554 	.word	0x20000554
 8005894:	20000014 	.word	0x20000014
 8005898:	20000555 	.word	0x20000555
 800589c:	20000010 	.word	0x20000010
 80058a0:	20000001 	.word	0x20000001
 80058a4:	2000000c 	.word	0x2000000c
 80058a8:	20000568 	.word	0x20000568
 80058ac:	20000024 	.word	0x20000024
 80058b0:	20000553 	.word	0x20000553
 80058b4:	2000001c 	.word	0x2000001c
 80058b8:	08023c50 	.word	0x08023c50
 80058bc:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80058c0:	4bc9      	ldr	r3, [pc, #804]	@ (8005be8 <ESP_Upkeep+0x740>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <ESP_Upkeep+0x430>
 80058c8:	4bc8      	ldr	r3, [pc, #800]	@ (8005bec <ESP_Upkeep+0x744>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d003      	beq.n	80058d8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 80058d0:	4bc7      	ldr	r3, [pc, #796]	@ (8005bf0 <ESP_Upkeep+0x748>)
 80058d2:	220b      	movs	r2, #11
 80058d4:	701a      	strb	r2, [r3, #0]
        break;
 80058d6:	e269      	b.n	8005dac <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80058d8:	4bc6      	ldr	r3, [pc, #792]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	0018      	movs	r0, r3
 80058de:	f008 fe47 	bl	800e570 <TimestampIsReached>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d100      	bne.n	80058e8 <ESP_Upkeep+0x440>
 80058e6:	e25c      	b.n	8005da2 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058e8:	4bc3      	ldr	r3, [pc, #780]	@ (8005bf8 <ESP_Upkeep+0x750>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff f99f 	bl	8004c30 <DMA_ProcessBuffer>
 80058f2:	0003      	movs	r3, r0
 80058f4:	001a      	movs	r2, r3
 80058f6:	4bc1      	ldr	r3, [pc, #772]	@ (8005bfc <ESP_Upkeep+0x754>)
 80058f8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058fa:	4bc0      	ldr	r3, [pc, #768]	@ (8005bfc <ESP_Upkeep+0x754>)
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	4bbe      	ldr	r3, [pc, #760]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	1d7c      	adds	r4, r7, #5
 8005904:	0019      	movs	r1, r3
 8005906:	0010      	movs	r0, r2
 8005908:	f7ff fa92 	bl	8004e30 <ATCompare>
 800590c:	0003      	movs	r3, r0
 800590e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005910:	4bba      	ldr	r3, [pc, #744]	@ (8005bfc <ESP_Upkeep+0x754>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d138      	bne.n	800598a <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005918:	4bb9      	ldr	r3, [pc, #740]	@ (8005c00 <ESP_Upkeep+0x758>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d108      	bne.n	8005932 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005920:	4bb7      	ldr	r3, [pc, #732]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005922:	220e      	movs	r2, #14
 8005924:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005926:	4bb4      	ldr	r3, [pc, #720]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005928:	2202      	movs	r2, #2
 800592a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800592c:	4bb5      	ldr	r3, [pc, #724]	@ (8005c04 <ESP_Upkeep+0x75c>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005932:	4baf      	ldr	r3, [pc, #700]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005934:	2204      	movs	r2, #4
 8005936:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005938:	4bb3      	ldr	r3, [pc, #716]	@ (8005c08 <ESP_Upkeep+0x760>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	b2da      	uxtb	r2, r3
 8005940:	4bb1      	ldr	r3, [pc, #708]	@ (8005c08 <ESP_Upkeep+0x760>)
 8005942:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005944:	4bb0      	ldr	r3, [pc, #704]	@ (8005c08 <ESP_Upkeep+0x760>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d91e      	bls.n	800598a <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800594c:	f009 faa6 	bl	800ee9c <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	4aae      	ldr	r2, [pc, #696]	@ (8005c0c <ESP_Upkeep+0x764>)
 8005954:	189a      	adds	r2, r3, r2
 8005956:	4ba7      	ldr	r3, [pc, #668]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 8005958:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800595a:	4bad      	ldr	r3, [pc, #692]	@ (8005c10 <ESP_Upkeep+0x768>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005960:	f7ff fa58 	bl	8004e14 <clearDMABuffer>
            stop = HAL_GetTick();
 8005964:	f009 fa9a 	bl	800ee9c <HAL_GetTick>
 8005968:	0002      	movs	r2, r0
 800596a:	4baa      	ldr	r3, [pc, #680]	@ (8005c14 <ESP_Upkeep+0x76c>)
 800596c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800596e:	4ba9      	ldr	r3, [pc, #676]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4ba9      	ldr	r3, [pc, #676]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	4aa8      	ldr	r2, [pc, #672]	@ (8005c1c <ESP_Upkeep+0x774>)
 800597a:	49a9      	ldr	r1, [pc, #676]	@ (8005c20 <ESP_Upkeep+0x778>)
 800597c:	2001      	movs	r0, #1
 800597e:	f008 fe4d 	bl	800e61c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005982:	4b9b      	ldr	r3, [pc, #620]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005984:	220d      	movs	r2, #13
 8005986:	701a      	strb	r2, [r3, #0]
            break;
 8005988:	e210      	b.n	8005dac <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800598a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bfc <ESP_Upkeep+0x754>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b03      	cmp	r3, #3
 8005990:	d106      	bne.n	80059a0 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005992:	f009 fa83 	bl	800ee9c <HAL_GetTick>
 8005996:	0003      	movs	r3, r0
 8005998:	330a      	adds	r3, #10
 800599a:	001a      	movs	r2, r3
 800599c:	4b95      	ldr	r3, [pc, #596]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 800599e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80059a0:	4b96      	ldr	r3, [pc, #600]	@ (8005bfc <ESP_Upkeep+0x754>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b0a      	cmp	r3, #10
 80059a6:	d106      	bne.n	80059b6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059a8:	f009 fa78 	bl	800ee9c <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	330a      	adds	r3, #10
 80059b0:	001a      	movs	r2, r3
 80059b2:	4b90      	ldr	r3, [pc, #576]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 80059b4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059b6:	4b91      	ldr	r3, [pc, #580]	@ (8005bfc <ESP_Upkeep+0x754>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d14b      	bne.n	8005a56 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 80059be:	4b99      	ldr	r3, [pc, #612]	@ (8005c24 <ESP_Upkeep+0x77c>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	4b97      	ldr	r3, [pc, #604]	@ (8005c24 <ESP_Upkeep+0x77c>)
 80059c8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059ca:	4a97      	ldr	r2, [pc, #604]	@ (8005c28 <ESP_Upkeep+0x780>)
 80059cc:	4b94      	ldr	r3, [pc, #592]	@ (8005c20 <ESP_Upkeep+0x778>)
 80059ce:	0019      	movs	r1, r3
 80059d0:	2001      	movs	r0, #1
 80059d2:	f008 fe23 	bl	800e61c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059d6:	4b93      	ldr	r3, [pc, #588]	@ (8005c24 <ESP_Upkeep+0x77c>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d924      	bls.n	8005a28 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80059de:	f009 fa5d 	bl	800ee9c <HAL_GetTick>
 80059e2:	0003      	movs	r3, r0
 80059e4:	4a91      	ldr	r2, [pc, #580]	@ (8005c2c <ESP_Upkeep+0x784>)
 80059e6:	189a      	adds	r2, r3, r2
 80059e8:	4b82      	ldr	r3, [pc, #520]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 80059ea:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059ec:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <ESP_Upkeep+0x768>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059f2:	f7ff fa0f 	bl	8004e14 <clearDMABuffer>
            stop = HAL_GetTick();
 80059f6:	f009 fa51 	bl	800ee9c <HAL_GetTick>
 80059fa:	0002      	movs	r2, r0
 80059fc:	4b85      	ldr	r3, [pc, #532]	@ (8005c14 <ESP_Upkeep+0x76c>)
 80059fe:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005a00:	4b84      	ldr	r3, [pc, #528]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b84      	ldr	r3, [pc, #528]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	4a89      	ldr	r2, [pc, #548]	@ (8005c30 <ESP_Upkeep+0x788>)
 8005a0c:	4984      	ldr	r1, [pc, #528]	@ (8005c20 <ESP_Upkeep+0x778>)
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f008 fe04 	bl	800e61c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005a14:	4b76      	ldr	r3, [pc, #472]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a16:	220d      	movs	r2, #13
 8005a18:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005a1a:	4b79      	ldr	r3, [pc, #484]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a1c:	2214      	movs	r2, #20
 8005a1e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a20:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
            break;
 8005a26:	e1c1      	b.n	8005dac <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005a28:	4b75      	ldr	r3, [pc, #468]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d003      	beq.n	8005a38 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005a30:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a32:	2204      	movs	r2, #4
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e00e      	b.n	8005a56 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a38:	4b71      	ldr	r3, [pc, #452]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a3a:	220e      	movs	r2, #14
 8005a3c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a3e:	4b71      	ldr	r3, [pc, #452]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4b6f      	ldr	r3, [pc, #444]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a48:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a50:	4b67      	ldr	r3, [pc, #412]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a52:	2204      	movs	r2, #4
 8005a54:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a56:	1d7b      	adds	r3, r7, #5
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d100      	bne.n	8005a60 <ESP_Upkeep+0x5b8>
 8005a5e:	e1a0      	b.n	8005da2 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005a60:	4b63      	ldr	r3, [pc, #396]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005a62:	2205      	movs	r2, #5
 8005a64:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a66:	e19c      	b.n	8005da2 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005a68:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	4b64      	ldr	r3, [pc, #400]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a72:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a74:	4b63      	ldr	r3, [pc, #396]	@ (8005c04 <ESP_Upkeep+0x75c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	001a      	movs	r2, r3
 8005a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c34 <ESP_Upkeep+0x78c>)
 8005a7c:	5c9a      	ldrb	r2, [r3, r2]
 8005a7e:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a80:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a82:	4b5f      	ldr	r3, [pc, #380]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d102      	bne.n	8005a90 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a90:	4b5b      	ldr	r3, [pc, #364]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b0e      	cmp	r3, #14
 8005a96:	d102      	bne.n	8005a9e <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a98:	4b57      	ldr	r3, [pc, #348]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a9e:	4b58      	ldr	r3, [pc, #352]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b0e      	cmp	r3, #14
 8005aa4:	d006      	beq.n	8005ab4 <ESP_Upkeep+0x60c>
 8005aa6:	4b56      	ldr	r3, [pc, #344]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d002      	beq.n	8005ab4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005aae:	4b52      	ldr	r3, [pc, #328]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005ab4:	4b52      	ldr	r3, [pc, #328]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b11      	cmp	r3, #17
 8005aba:	d102      	bne.n	8005ac2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005abc:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf8 <ESP_Upkeep+0x750>)
 8005abe:	2205      	movs	r2, #5
 8005ac0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8005c00 <ESP_Upkeep+0x758>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b14      	cmp	r3, #20
 8005ace:	d000      	beq.n	8005ad2 <ESP_Upkeep+0x62a>
 8005ad0:	e169      	b.n	8005da6 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ad2:	4b46      	ldr	r3, [pc, #280]	@ (8005bec <ESP_Upkeep+0x744>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d124      	bne.n	8005b24 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005ada:	f009 f9df 	bl	800ee9c <HAL_GetTick>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c0c <ESP_Upkeep+0x764>)
 8005ae2:	189a      	adds	r2, r3, r2
 8005ae4:	4b43      	ldr	r3, [pc, #268]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 8005ae6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ae8:	f7ff f994 	bl	8004e14 <clearDMABuffer>
          stop = HAL_GetTick();
 8005aec:	f009 f9d6 	bl	800ee9c <HAL_GetTick>
 8005af0:	0002      	movs	r2, r0
 8005af2:	4b48      	ldr	r3, [pc, #288]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005af4:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005af6:	4b47      	ldr	r3, [pc, #284]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b47      	ldr	r3, [pc, #284]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	4a4d      	ldr	r2, [pc, #308]	@ (8005c38 <ESP_Upkeep+0x790>)
 8005b02:	494e      	ldr	r1, [pc, #312]	@ (8005c3c <ESP_Upkeep+0x794>)
 8005b04:	2002      	movs	r0, #2
 8005b06:	f008 fd89 	bl	800e61c <CreateLine>
          ResetdBAmax();
 8005b0a:	f002 ff49 	bl	80089a0 <ResetdBAmax>
          sen5xResetMax();
 8005b0e:	f003 feab 	bl	8009868 <sen5xResetMax>
          showTime();
 8005b12:	f000 fcdf 	bl	80064d4 <showTime>
          ESPTransmitDone = true;
 8005b16:	4b3e      	ldr	r3, [pc, #248]	@ (8005c10 <ESP_Upkeep+0x768>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b1c:	4b34      	ldr	r3, [pc, #208]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005b1e:	220d      	movs	r2, #13
 8005b20:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b22:	e140      	b.n	8005da6 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005b24:	4b31      	ldr	r3, [pc, #196]	@ (8005bec <ESP_Upkeep+0x744>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d12c      	bne.n	8005b86 <ESP_Upkeep+0x6de>
            setTime = false;
 8005b2c:	4b44      	ldr	r3, [pc, #272]	@ (8005c40 <ESP_Upkeep+0x798>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b32:	f009 f9b3 	bl	800ee9c <HAL_GetTick>
 8005b36:	0003      	movs	r3, r0
 8005b38:	4a42      	ldr	r2, [pc, #264]	@ (8005c44 <ESP_Upkeep+0x79c>)
 8005b3a:	189a      	adds	r2, r3, r2
 8005b3c:	4b42      	ldr	r3, [pc, #264]	@ (8005c48 <ESP_Upkeep+0x7a0>)
 8005b3e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b40:	4b41      	ldr	r3, [pc, #260]	@ (8005c48 <ESP_Upkeep+0x7a0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a41      	ldr	r2, [pc, #260]	@ (8005c4c <ESP_Upkeep+0x7a4>)
 8005b46:	493d      	ldr	r1, [pc, #244]	@ (8005c3c <ESP_Upkeep+0x794>)
 8005b48:	2002      	movs	r0, #2
 8005b4a:	f008 fd67 	bl	800e61c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b4e:	4b40      	ldr	r3, [pc, #256]	@ (8005c50 <ESP_Upkeep+0x7a8>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <ESP_Upkeep+0x74c>)
 8005b54:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b56:	f7ff f95d 	bl	8004e14 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b5a:	f009 f99f 	bl	800ee9c <HAL_GetTick>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	4b2c      	ldr	r3, [pc, #176]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005b62:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <ESP_Upkeep+0x76c>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <ESP_Upkeep+0x770>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	4a39      	ldr	r2, [pc, #228]	@ (8005c54 <ESP_Upkeep+0x7ac>)
 8005b70:	4932      	ldr	r1, [pc, #200]	@ (8005c3c <ESP_Upkeep+0x794>)
 8005b72:	2002      	movs	r0, #2
 8005b74:	f008 fd52 	bl	800e61c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b78:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005b7a:	220d      	movs	r2, #13
 8005b7c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <ESP_Upkeep+0x744>)
 8005b80:	2202      	movs	r2, #2
 8005b82:	701a      	strb	r2, [r3, #0]
    break;
 8005b84:	e10f      	b.n	8005da6 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005b86:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005b88:	2209      	movs	r2, #9
 8005b8a:	701a      	strb	r2, [r3, #0]
    break;
 8005b8c:	e10b      	b.n	8005da6 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005b8e:	4b32      	ldr	r3, [pc, #200]	@ (8005c58 <ESP_Upkeep+0x7b0>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b94:	4b31      	ldr	r3, [pc, #196]	@ (8005c5c <ESP_Upkeep+0x7b4>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f00a fc0f 	bl	80103be <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f009 f985 	bl	800eeb0 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005ba6:	2380      	movs	r3, #128	@ 0x80
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	482d      	ldr	r0, [pc, #180]	@ (8005c60 <ESP_Upkeep+0x7b8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	0019      	movs	r1, r3
 8005bb0:	f00a fc05 	bl	80103be <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f009 f97b 	bl	800eeb0 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005bba:	4b28      	ldr	r3, [pc, #160]	@ (8005c5c <ESP_Upkeep+0x7b4>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f00a fbfc 	bl	80103be <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <ESP_Upkeep+0x748>)
 8005bc8:	2209      	movs	r2, #9
 8005bca:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005bcc:	f002 fea0 	bl	8008910 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f009 f96d 	bl	800eeb0 <HAL_Delay>
      ResetESPIndicator();
 8005bd6:	f007 fc4d 	bl	800d474 <ResetESPIndicator>
      errorcntr = 0;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <ESP_Upkeep+0x760>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005be0:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <ESP_Upkeep+0x77c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
      break;
 8005be6:	e0e1      	b.n	8005dac <ESP_Upkeep+0x904>
 8005be8:	20000553 	.word	0x20000553
 8005bec:	20000a0f 	.word	0x20000a0f
 8005bf0:	20000030 	.word	0x20000030
 8005bf4:	20000a08 	.word	0x20000a08
 8005bf8:	20000a0d 	.word	0x20000a0d
 8005bfc:	20000032 	.word	0x20000032
 8005c00:	20000a0e 	.word	0x20000a0e
 8005c04:	20000a02 	.word	0x20000a02
 8005c08:	20000a03 	.word	0x20000a03
 8005c0c:	0003a980 	.word	0x0003a980
 8005c10:	20000558 	.word	0x20000558
 8005c14:	2000056c 	.word	0x2000056c
 8005c18:	20000568 	.word	0x20000568
 8005c1c:	08023c80 	.word	0x08023c80
 8005c20:	080232e4 	.word	0x080232e4
 8005c24:	20000a04 	.word	0x20000a04
 8005c28:	08023cb4 	.word	0x08023cb4
 8005c2c:	0000c350 	.word	0x0000c350
 8005c30:	08023cf0 	.word	0x08023cf0
 8005c34:	200009f8 	.word	0x200009f8
 8005c38:	08023d20 	.word	0x08023d20
 8005c3c:	08023d38 	.word	0x08023d38
 8005c40:	20000001 	.word	0x20000001
 8005c44:	047e7c4f 	.word	0x047e7c4f
 8005c48:	20000028 	.word	0x20000028
 8005c4c:	08023d3c 	.word	0x08023d3c
 8005c50:	2000002c 	.word	0x2000002c
 8005c54:	08023d80 	.word	0x08023d80
 8005c58:	20000550 	.word	0x20000550
 8005c5c:	50001c00 	.word	0x50001c00
 8005c60:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c64:	4b54      	ldr	r3, [pc, #336]	@ (8005db8 <ESP_Upkeep+0x910>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f008 fc81 	bl	800e570 <TimestampIsReached>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d103      	bne.n	8005c7a <ESP_Upkeep+0x7d2>
 8005c72:	4b52      	ldr	r3, [pc, #328]	@ (8005dbc <ESP_Upkeep+0x914>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d043      	beq.n	8005d02 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005c7a:	4b51      	ldr	r3, [pc, #324]	@ (8005dc0 <ESP_Upkeep+0x918>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c80:	4b50      	ldr	r3, [pc, #320]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005c88:	4b4f      	ldr	r3, [pc, #316]	@ (8005dc8 <ESP_Upkeep+0x920>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005c90:	220b      	movs	r2, #11
 8005c92:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c94:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d108      	bne.n	8005cae <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd0 <ESP_Upkeep+0x928>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8005dd4 <ESP_Upkeep+0x92c>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005ca8:	4b48      	ldr	r3, [pc, #288]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005caa:	220b      	movs	r2, #11
 8005cac:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005cae:	4b45      	ldr	r3, [pc, #276]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d102      	bne.n	8005cbc <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005cb6:	4b45      	ldr	r3, [pc, #276]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005cb8:	2202      	movs	r2, #2
 8005cba:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cbc:	4b41      	ldr	r3, [pc, #260]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d108      	bne.n	8005cd6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005cc4:	4b41      	ldr	r3, [pc, #260]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005cc6:	220e      	movs	r2, #14
 8005cc8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005cca:	4a43      	ldr	r2, [pc, #268]	@ (8005dd8 <ESP_Upkeep+0x930>)
 8005ccc:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <ESP_Upkeep+0x934>)
 8005cce:	0019      	movs	r1, r3
 8005cd0:	2002      	movs	r0, #2
 8005cd2:	f008 fca3 	bl	800e61c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d105      	bne.n	8005cea <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005cde:	4b3b      	ldr	r3, [pc, #236]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005ce0:	220b      	movs	r2, #11
 8005ce2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8005de0 <ESP_Upkeep+0x938>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <ESP_Upkeep+0x914>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <ESP_Upkeep+0x88c>
 8005cf2:	4b34      	ldr	r3, [pc, #208]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d01c      	beq.n	8005d34 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005cfa:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005d00:	e018      	b.n	8005d34 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005d02:	4b38      	ldr	r3, [pc, #224]	@ (8005de4 <ESP_Upkeep+0x93c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f008 fc32 	bl	800e570 <TimestampIsReached>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	d04c      	beq.n	8005daa <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005d10:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d148      	bne.n	8005daa <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005d18:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc4 <ESP_Upkeep+0x91c>)
 8005d1a:	2205      	movs	r2, #5
 8005d1c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005d20:	2202      	movs	r2, #2
 8005d22:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005d24:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <ESP_Upkeep+0x910>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <ESP_Upkeep+0x940>)
 8005d2a:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005dec <ESP_Upkeep+0x944>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d32:	e03a      	b.n	8005daa <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005d34:	46c0      	nop			@ (mov r8, r8)
      break;
 8005d36:	e038      	b.n	8005daa <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d38:	4b2d      	ldr	r3, [pc, #180]	@ (8005df0 <ESP_Upkeep+0x948>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4053      	eors	r3, r2
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005d46:	4a24      	ldr	r2, [pc, #144]	@ (8005dd8 <ESP_Upkeep+0x930>)
 8005d48:	4b24      	ldr	r3, [pc, #144]	@ (8005ddc <ESP_Upkeep+0x934>)
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	2002      	movs	r0, #2
 8005d4e:	f008 fc65 	bl	800e61c <CreateLine>
        msgdone = true;
 8005d52:	4b27      	ldr	r3, [pc, #156]	@ (8005df0 <ESP_Upkeep+0x948>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d58:	f017 f8e0 	bl	801cf1c <GetUsbRxPointer>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 f8c0 	bl	8005ee4 <Process_PC_Config>
      break;
 8005d64:	e022      	b.n	8005dac <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d66:	4a23      	ldr	r2, [pc, #140]	@ (8005df4 <ESP_Upkeep+0x94c>)
 8005d68:	4b23      	ldr	r3, [pc, #140]	@ (8005df8 <ESP_Upkeep+0x950>)
 8005d6a:	0019      	movs	r1, r3
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f008 fc55 	bl	800e61c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d72:	4b16      	ldr	r3, [pc, #88]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005d74:	2202      	movs	r2, #2
 8005d76:	701a      	strb	r2, [r3, #0]
      break;
 8005d78:	e018      	b.n	8005dac <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d7a:	4a20      	ldr	r2, [pc, #128]	@ (8005dfc <ESP_Upkeep+0x954>)
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005df8 <ESP_Upkeep+0x950>)
 8005d7e:	0019      	movs	r1, r3
 8005d80:	2001      	movs	r0, #1
 8005d82:	f008 fc4b 	bl	800e61c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d86:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005d88:	2207      	movs	r2, #7
 8005d8a:	701a      	strb	r2, [r3, #0]
      break;
 8005d8c:	e00e      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	e00c      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	e00a      	b.n	8005dac <ESP_Upkeep+0x904>
        break;
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	e008      	b.n	8005dac <ESP_Upkeep+0x904>
    break;
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	e006      	b.n	8005dac <ESP_Upkeep+0x904>
    break;
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	e004      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	e002      	b.n	8005dac <ESP_Upkeep+0x904>
    break;
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	e000      	b.n	8005dac <ESP_Upkeep+0x904>
      break;
 8005daa:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005dac:	4b07      	ldr	r3, [pc, #28]	@ (8005dcc <ESP_Upkeep+0x924>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bdb0      	pop	{r4, r5, r7, pc}
 8005db8:	20000a08 	.word	0x20000a08
 8005dbc:	20000553 	.word	0x20000553
 8005dc0:	20000558 	.word	0x20000558
 8005dc4:	20000a0f 	.word	0x20000a0f
 8005dc8:	20000551 	.word	0x20000551
 8005dcc:	20000030 	.word	0x20000030
 8005dd0:	20000554 	.word	0x20000554
 8005dd4:	20000556 	.word	0x20000556
 8005dd8:	08023da0 	.word	0x08023da0
 8005ddc:	08023d38 	.word	0x08023d38
 8005de0:	20000555 	.word	0x20000555
 8005de4:	20000028 	.word	0x20000028
 8005de8:	2000002c 	.word	0x2000002c
 8005dec:	20000001 	.word	0x20000001
 8005df0:	20000557 	.word	0x20000557
 8005df4:	08023db8 	.word	0x08023db8
 8005df8:	080232e4 	.word	0x080232e4
 8005dfc:	08023dcc 	.word	0x08023dcc

08005e00 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005e08:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <I2CSensors_Init+0x30>)
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <I2CSensors_Init+0x34>)
 8005e10:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <I2CSensors_Init+0x38>)
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f008 fd65 	bl	800e8e4 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005e1a:	4a06      	ldr	r2, [pc, #24]	@ (8005e34 <I2CSensors_Init+0x34>)
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <I2CSensors_Init+0x38>)
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f005 fd17 	bl	800b854 <SGP_Init>
}
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b002      	add	sp, #8
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			@ (mov r8, r8)
 8005e30:	20000b4c 	.word	0x20000b4c
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005e3d 	.word	0x08005e3d

08005e3c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e3c:	b5b0      	push	{r4, r5, r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6039      	str	r1, [r7, #0]
 8005e44:	0011      	movs	r1, r2
 8005e46:	1dfb      	adds	r3, r7, #7
 8005e48:	1c02      	adds	r2, r0, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	1dbb      	adds	r3, r7, #6
 8005e4e:	1c0a      	adds	r2, r1, #0
 8005e50:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <ReadI2C+0x50>)
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	1dfb      	adds	r3, r7, #7
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	18db      	adds	r3, r3, r3
 8005e5e:	b299      	uxth	r1, r3
 8005e60:	1dbb      	adds	r3, r7, #6
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	250f      	movs	r5, #15
 8005e68:	197c      	adds	r4, r7, r5
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	f00a fe8c 	bl	8010b88 <HAL_I2C_Master_Receive_DMA>
 8005e70:	0003      	movs	r3, r0
 8005e72:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e74:	197b      	adds	r3, r7, r5
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <ReadI2C+0x44>
        return false;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <ReadI2C+0x46>
    }
    return true;
 8005e80:	2301      	movs	r3, #1
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b004      	add	sp, #16
 8005e88:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	20000b4c 	.word	0x20000b4c

08005e90 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e90:	b5b0      	push	{r4, r5, r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6039      	str	r1, [r7, #0]
 8005e98:	0011      	movs	r1, r2
 8005e9a:	1dfb      	adds	r3, r7, #7
 8005e9c:	1c02      	adds	r2, r0, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	1dbb      	adds	r3, r7, #6
 8005ea2:	1c0a      	adds	r2, r1, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <WriteI2C+0x50>)
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	1dfb      	adds	r3, r7, #7
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	18db      	adds	r3, r3, r3
 8005eb2:	b299      	uxth	r1, r3
 8005eb4:	1dbb      	adds	r3, r7, #6
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	250f      	movs	r5, #15
 8005ebc:	197c      	adds	r4, r7, r5
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	f00a fd5c 	bl	801097c <HAL_I2C_Master_Transmit_DMA>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ec8:	197b      	adds	r3, r7, r5
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <WriteI2C+0x44>
        return false;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e000      	b.n	8005ed6 <WriteI2C+0x46>
    }
    return true;
 8005ed4:	2301      	movs	r3, #1
}
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	20000b4c 	.word	0x20000b4c

08005ee4 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b0c3      	sub	sp, #268	@ 0x10c
 8005ee8:	af3e      	add	r7, sp, #248	@ 0xf8
 8005eea:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005eec:	f017 f836 	bl	801cf5c <GetUsbRxDataSize>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d971      	bls.n	8005fde <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2123      	movs	r1, #35	@ 0x23
 8005efe:	0018      	movs	r0, r3
 8005f00:	f01a fa2c 	bl	802035c <strchr>
 8005f04:	0003      	movs	r3, r0
 8005f06:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d065      	beq.n	8005fda <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	785a      	ldrb	r2, [r3, #1]
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f14:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	789a      	ldrb	r2, [r3, #2]
 8005f1a:	4b32      	ldr	r3, [pc, #200]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f1c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005f1e:	4b31      	ldr	r3, [pc, #196]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	3305      	adds	r3, #5
 8005f24:	001a      	movs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d351      	bcc.n	8005fd0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1cd9      	adds	r1, r3, #3
 8005f30:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	001a      	movs	r2, r3
 8005f36:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <Process_PC_Config+0x104>)
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f01a fae3 	bl	8020504 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f3e:	4b29      	ldr	r3, [pc, #164]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	3303      	adds	r3, #3
 8005f44:	001a      	movs	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	b21a      	sxth	r2, r3
 8005f50:	4b24      	ldr	r3, [pc, #144]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	3304      	adds	r3, #4
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	18cb      	adds	r3, r1, r3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	b299      	uxth	r1, r3
 8005f64:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f66:	2381      	movs	r3, #129	@ 0x81
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f6e:	2381      	movs	r3, #129	@ 0x81
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	5ad4      	ldrh	r4, [r2, r3]
 8005f74:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	3303      	adds	r3, #3
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	0011      	movs	r1, r2
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f975 	bl	8006270 <CRC16_ARC>
 8005f86:	0003      	movs	r3, r0
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d007      	beq.n	8005f9c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f8c:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f8e:	785a      	ldrb	r2, [r3, #1]
 8005f90:	4b15      	ldr	r3, [pc, #84]	@ (8005fe8 <Process_PC_Config+0x104>)
 8005f92:	0019      	movs	r1, r3
 8005f94:	2001      	movs	r0, #1
 8005f96:	f000 f919 	bl	80061cc <Create_Message>
 8005f9a:	e016      	b.n	8005fca <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f9c:	4c11      	ldr	r4, [pc, #68]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005f9e:	466b      	mov	r3, sp
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	0023      	movs	r3, r4
 8005fa4:	3310      	adds	r3, #16
 8005fa6:	22f4      	movs	r2, #244	@ 0xf4
 8005fa8:	0019      	movs	r1, r3
 8005faa:	f01a faab 	bl	8020504 <memcpy>
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	68a2      	ldr	r2, [r4, #8]
 8005fb4:	68e3      	ldr	r3, [r4, #12]
 8005fb6:	f000 f819 	bl	8005fec <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005fba:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005fbc:	7818      	ldrb	r0, [r3, #0]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <Process_PC_Config+0x100>)
 8005fc0:	785a      	ldrb	r2, [r3, #1]
 8005fc2:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <Process_PC_Config+0x104>)
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	f000 f901 	bl	80061cc <Create_Message>
                }
                ResetUsbRxDataSize();
 8005fca:	f016 ffaf 	bl	801cf2c <ResetUsbRxDataSize>
                return;
 8005fce:	e006      	b.n	8005fde <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f016 ffcc 	bl	801cf70 <GetUsbRxNextChunk>
 8005fd8:	e001      	b.n	8005fde <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005fda:	f016 ffa7 	bl	801cf2c <ResetUsbRxDataSize>
        }
    }
}
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b005      	add	sp, #20
 8005fe2:	bd90      	pop	{r4, r7, pc}
 8005fe4:	20000b50 	.word	0x20000b50
 8005fe8:	20000b52 	.word	0x20000b52

08005fec <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fec:	b084      	sub	sp, #16
 8005fee:	b5b0      	push	{r4, r5, r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	2518      	movs	r5, #24
 8005ff6:	197c      	adds	r4, r7, r5
 8005ff8:	6020      	str	r0, [r4, #0]
 8005ffa:	6061      	str	r1, [r4, #4]
 8005ffc:	60a2      	str	r2, [r4, #8]
 8005ffe:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006000:	197b      	adds	r3, r7, r5
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2bfe      	cmp	r3, #254	@ 0xfe
 8006006:	d100      	bne.n	800600a <ProcessCmd+0x1e>
 8006008:	e09c      	b.n	8006144 <ProcessCmd+0x158>
 800600a:	dd00      	ble.n	800600e <ProcessCmd+0x22>
 800600c:	e0bc      	b.n	8006188 <ProcessCmd+0x19c>
 800600e:	2b0c      	cmp	r3, #12
 8006010:	dc0a      	bgt.n	8006028 <ProcessCmd+0x3c>
 8006012:	2b00      	cmp	r3, #0
 8006014:	da00      	bge.n	8006018 <ProcessCmd+0x2c>
 8006016:	e0b7      	b.n	8006188 <ProcessCmd+0x19c>
 8006018:	2b0c      	cmp	r3, #12
 800601a:	d900      	bls.n	800601e <ProcessCmd+0x32>
 800601c:	e0b4      	b.n	8006188 <ProcessCmd+0x19c>
 800601e:	009a      	lsls	r2, r3, #2
 8006020:	4b5d      	ldr	r3, [pc, #372]	@ (8006198 <ProcessCmd+0x1ac>)
 8006022:	18d3      	adds	r3, r2, r3
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	469f      	mov	pc, r3
 8006028:	2bfd      	cmp	r3, #253	@ 0xfd
 800602a:	d100      	bne.n	800602e <ProcessCmd+0x42>
 800602c:	e084      	b.n	8006138 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800602e:	e0ab      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006030:	2118      	movs	r1, #24
 8006032:	187b      	adds	r3, r7, r1
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	001a      	movs	r2, r3
 8006038:	187b      	adds	r3, r7, r1
 800603a:	1c99      	adds	r1, r3, #2
 800603c:	4857      	ldr	r0, [pc, #348]	@ (800619c <ProcessCmd+0x1b0>)
 800603e:	230c      	movs	r3, #12
 8006040:	f7fd fb3e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006044:	e0a0      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006046:	2118      	movs	r1, #24
 8006048:	187b      	adds	r3, r7, r1
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	001a      	movs	r2, r3
 800604e:	187b      	adds	r3, r7, r1
 8006050:	1c99      	adds	r1, r3, #2
 8006052:	4853      	ldr	r0, [pc, #332]	@ (80061a0 <ProcessCmd+0x1b4>)
 8006054:	230c      	movs	r3, #12
 8006056:	f7fd fb33 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800605a:	e095      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800605c:	2118      	movs	r1, #24
 800605e:	187b      	adds	r3, r7, r1
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	001a      	movs	r2, r3
 8006064:	187b      	adds	r3, r7, r1
 8006066:	1c99      	adds	r1, r3, #2
 8006068:	484e      	ldr	r0, [pc, #312]	@ (80061a4 <ProcessCmd+0x1b8>)
 800606a:	230c      	movs	r3, #12
 800606c:	f7fd fb28 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006070:	e08a      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006072:	2118      	movs	r1, #24
 8006074:	187b      	adds	r3, r7, r1
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	001a      	movs	r2, r3
 800607a:	187b      	adds	r3, r7, r1
 800607c:	1c99      	adds	r1, r3, #2
 800607e:	484a      	ldr	r0, [pc, #296]	@ (80061a8 <ProcessCmd+0x1bc>)
 8006080:	230c      	movs	r3, #12
 8006082:	f7fd fb1d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006086:	e07f      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006088:	2118      	movs	r1, #24
 800608a:	187b      	adds	r3, r7, r1
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	001a      	movs	r2, r3
 8006090:	187b      	adds	r3, r7, r1
 8006092:	1c99      	adds	r1, r3, #2
 8006094:	4845      	ldr	r0, [pc, #276]	@ (80061ac <ProcessCmd+0x1c0>)
 8006096:	230c      	movs	r3, #12
 8006098:	f7fd fb12 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800609c:	e074      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800609e:	2118      	movs	r1, #24
 80060a0:	187b      	adds	r3, r7, r1
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	001a      	movs	r2, r3
 80060a6:	187b      	adds	r3, r7, r1
 80060a8:	1c99      	adds	r1, r3, #2
 80060aa:	4841      	ldr	r0, [pc, #260]	@ (80061b0 <ProcessCmd+0x1c4>)
 80060ac:	230c      	movs	r3, #12
 80060ae:	f7fd fb07 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b2:	e069      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060b4:	2118      	movs	r1, #24
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	001a      	movs	r2, r3
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	1c99      	adds	r1, r3, #2
 80060c0:	483c      	ldr	r0, [pc, #240]	@ (80061b4 <ProcessCmd+0x1c8>)
 80060c2:	230c      	movs	r3, #12
 80060c4:	f7fd fafc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060c8:	e05e      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80060ca:	2118      	movs	r1, #24
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	001a      	movs	r2, r3
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	1c99      	adds	r1, r3, #2
 80060d6:	4838      	ldr	r0, [pc, #224]	@ (80061b8 <ProcessCmd+0x1cc>)
 80060d8:	231e      	movs	r3, #30
 80060da:	f7fd faf1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060de:	e053      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060e0:	2118      	movs	r1, #24
 80060e2:	187b      	adds	r3, r7, r1
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	001a      	movs	r2, r3
 80060e8:	187b      	adds	r3, r7, r1
 80060ea:	1c99      	adds	r1, r3, #2
 80060ec:	4833      	ldr	r0, [pc, #204]	@ (80061bc <ProcessCmd+0x1d0>)
 80060ee:	230c      	movs	r3, #12
 80060f0:	f7fd fae6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060f4:	e048      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060f6:	2118      	movs	r1, #24
 80060f8:	187b      	adds	r3, r7, r1
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	001a      	movs	r2, r3
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	1c99      	adds	r1, r3, #2
 8006102:	482f      	ldr	r0, [pc, #188]	@ (80061c0 <ProcessCmd+0x1d4>)
 8006104:	230c      	movs	r3, #12
 8006106:	f7fd fadb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800610a:	e03d      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800610c:	2118      	movs	r1, #24
 800610e:	187b      	adds	r3, r7, r1
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	001a      	movs	r2, r3
 8006114:	187b      	adds	r3, r7, r1
 8006116:	1c99      	adds	r1, r3, #2
 8006118:	482a      	ldr	r0, [pc, #168]	@ (80061c4 <ProcessCmd+0x1d8>)
 800611a:	230c      	movs	r3, #12
 800611c:	f7fd fad0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006120:	e032      	b.n	8006188 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006122:	2118      	movs	r1, #24
 8006124:	187b      	adds	r3, r7, r1
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	001a      	movs	r2, r3
 800612a:	187b      	adds	r3, r7, r1
 800612c:	1c99      	adds	r1, r3, #2
 800612e:	4826      	ldr	r0, [pc, #152]	@ (80061c8 <ProcessCmd+0x1dc>)
 8006130:	230c      	movs	r3, #12
 8006132:	f7fd fac5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006136:	e027      	b.n	8006188 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006138:	4b18      	ldr	r3, [pc, #96]	@ (800619c <ProcessCmd+0x1b0>)
 800613a:	21ba      	movs	r1, #186	@ 0xba
 800613c:	0018      	movs	r0, r3
 800613e:	f7fd fb04 	bl	800374a <ClearEEprom>
        break;
 8006142:	e021      	b.n	8006188 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006144:	2118      	movs	r1, #24
 8006146:	187b      	adds	r3, r7, r1
 8006148:	789b      	ldrb	r3, [r3, #2]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	b21a      	sxth	r2, r3
 800614e:	187b      	adds	r3, r7, r1
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	b21b      	sxth	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b21a      	sxth	r2, r3
 8006158:	1dbb      	adds	r3, r7, #6
 800615a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800615c:	1dbb      	adds	r3, r7, #6
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	23c0      	movs	r3, #192	@ 0xc0
 8006162:	015b      	lsls	r3, r3, #5
 8006164:	429a      	cmp	r2, r3
 8006166:	d207      	bcs.n	8006178 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006168:	1dbb      	adds	r3, r7, #6
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <ProcessCmd+0x1b0>)
 800616e:	0019      	movs	r1, r3
 8006170:	0010      	movs	r0, r2
 8006172:	f7fd faea 	bl	800374a <ClearEEprom>
            break;
 8006176:	e006      	b.n	8006186 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006178:	23c0      	movs	r3, #192	@ 0xc0
 800617a:	015b      	lsls	r3, r3, #5
 800617c:	4a07      	ldr	r2, [pc, #28]	@ (800619c <ProcessCmd+0x1b0>)
 800617e:	0019      	movs	r1, r3
 8006180:	0010      	movs	r0, r2
 8006182:	f7fd fae2 	bl	800374a <ClearEEprom>
            break;
 8006186:	46c0      	nop			@ (mov r8, r8)
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bcb0      	pop	{r4, r5, r7}
 8006190:	bc08      	pop	{r3}
 8006192:	b004      	add	sp, #16
 8006194:	4718      	bx	r3
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	08025590 	.word	0x08025590
 800619c:	08080000 	.word	0x08080000
 80061a0:	0808000c 	.word	0x0808000c
 80061a4:	08080018 	.word	0x08080018
 80061a8:	08080024 	.word	0x08080024
 80061ac:	08080030 	.word	0x08080030
 80061b0:	0808003c 	.word	0x0808003c
 80061b4:	08080048 	.word	0x08080048
 80061b8:	08080090 	.word	0x08080090
 80061bc:	08080078 	.word	0x08080078
 80061c0:	0808006c 	.word	0x0808006c
 80061c4:	08080060 	.word	0x08080060
 80061c8:	08080054 	.word	0x08080054

080061cc <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6039      	str	r1, [r7, #0]
 80061d4:	0011      	movs	r1, r2
 80061d6:	1dfb      	adds	r3, r7, #7
 80061d8:	1c02      	adds	r2, r0, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	1dbb      	adds	r3, r7, #6
 80061de:	1c0a      	adds	r2, r1, #0
 80061e0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061e2:	2223      	movs	r2, #35	@ 0x23
 80061e4:	4b20      	ldr	r3, [pc, #128]	@ (8006268 <Create_Message+0x9c>)
 80061e6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006268 <Create_Message+0x9c>)
 80061ea:	1dfa      	adds	r2, r7, #7
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <Create_Message+0x9c>)
 80061f2:	1dba      	adds	r2, r7, #6
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061f8:	1dbb      	adds	r3, r7, #6
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <Create_Message+0xa0>)
 8006200:	0018      	movs	r0, r3
 8006202:	f01a f97f 	bl	8020504 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8006206:	1dbb      	adds	r3, r7, #6
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b29a      	uxth	r2, r3
 800620c:	250e      	movs	r5, #14
 800620e:	197b      	adds	r3, r7, r5
 8006210:	3203      	adds	r2, #3
 8006212:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006214:	260c      	movs	r6, #12
 8006216:	19bc      	adds	r4, r7, r6
 8006218:	197b      	adds	r3, r7, r5
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <Create_Message+0x9c>)
 800621e:	0011      	movs	r1, r2
 8006220:	0018      	movs	r0, r3
 8006222:	f000 f825 	bl	8006270 <CRC16_ARC>
 8006226:	0003      	movs	r3, r0
 8006228:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800622a:	0030      	movs	r0, r6
 800622c:	183b      	adds	r3, r7, r0
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	b29a      	uxth	r2, r3
 8006234:	197b      	adds	r3, r7, r5
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b2d1      	uxtb	r1, r2
 800623a:	4a0b      	ldr	r2, [pc, #44]	@ (8006268 <Create_Message+0x9c>)
 800623c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800623e:	197b      	adds	r3, r7, r5
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	183a      	adds	r2, r7, r0
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	b2d1      	uxtb	r1, r2
 800624a:	4a07      	ldr	r2, [pc, #28]	@ (8006268 <Create_Message+0x9c>)
 800624c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800624e:	197b      	adds	r3, r7, r5
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	3302      	adds	r3, #2
 8006254:	b29a      	uxth	r2, r3
 8006256:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <Create_Message+0x9c>)
 8006258:	0011      	movs	r1, r2
 800625a:	0018      	movs	r0, r3
 800625c:	f016 fe24 	bl	801cea8 <CDC_Transmit_FS>
}
 8006260:	46c0      	nop			@ (mov r8, r8)
 8006262:	46bd      	mov	sp, r7
 8006264:	b005      	add	sp, #20
 8006266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006268:	20000c54 	.word	0x20000c54
 800626c:	20000c57 	.word	0x20000c57

08006270 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	000a      	movs	r2, r1
 800627a:	1cbb      	adds	r3, r7, #2
 800627c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800627e:	2316      	movs	r3, #22
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	2200      	movs	r2, #0
 8006284:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e02e      	b.n	80062ea <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	0019      	movs	r1, r3
 8006296:	2216      	movs	r2, #22
 8006298:	18bb      	adds	r3, r7, r2
 800629a:	18ba      	adds	r2, r7, r2
 800629c:	8812      	ldrh	r2, [r2, #0]
 800629e:	404a      	eors	r2, r1
 80062a0:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e01a      	b.n	80062de <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80062a8:	2116      	movs	r1, #22
 80062aa:	187b      	adds	r3, r7, r1
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	4013      	ands	r3, r2
 80062b2:	d00b      	beq.n	80062cc <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80062b4:	187b      	adds	r3, r7, r1
 80062b6:	187a      	adds	r2, r7, r1
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	0852      	lsrs	r2, r2, #1
 80062bc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	187a      	adds	r2, r7, r1
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	490f      	ldr	r1, [pc, #60]	@ (8006304 <CRC16_ARC+0x94>)
 80062c6:	404a      	eors	r2, r1
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	e005      	b.n	80062d8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80062cc:	2216      	movs	r2, #22
 80062ce:	18bb      	adds	r3, r7, r2
 80062d0:	18ba      	adds	r2, r7, r2
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	0852      	lsrs	r2, r2, #1
 80062d6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b07      	cmp	r3, #7
 80062e2:	dde1      	ble.n	80062a8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	3301      	adds	r3, #1
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	1cbb      	adds	r3, r7, #2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	dbcb      	blt.n	800628c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062f4:	2316      	movs	r3, #22
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	881b      	ldrh	r3, [r3, #0]
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b006      	add	sp, #24
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	ffffa001 	.word	0xffffa001

08006308 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 800630c:	4b26      	ldr	r3, [pc, #152]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 800630e:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <ReadBatteryVoltage+0xa4>)
 8006310:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006312:	4b25      	ldr	r3, [pc, #148]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 8006314:	2280      	movs	r2, #128	@ 0x80
 8006316:	0152      	lsls	r2, r2, #5
 8006318:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800631a:	4a23      	ldr	r2, [pc, #140]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 800631c:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 800631e:	0011      	movs	r1, r2
 8006320:	0018      	movs	r0, r3
 8006322:	f009 f893 	bl	800f44c <HAL_ADC_ConfigChannel>
 8006326:	1e03      	subs	r3, r0, #0
 8006328:	d001      	beq.n	800632e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800632a:	f002 f803 	bl	8008334 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800632e:	4b20      	ldr	r3, [pc, #128]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 8006330:	0018      	movs	r0, r3
 8006332:	f008 ff8f 	bl	800f254 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006336:	4b1e      	ldr	r3, [pc, #120]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 8006338:	2101      	movs	r1, #1
 800633a:	0018      	movs	r0, r3
 800633c:	f008 ffde 	bl	800f2fc <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006340:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 8006342:	0018      	movs	r0, r3
 8006344:	f009 f876 	bl	800f434 <HAL_ADC_GetValue>
 8006348:	0002      	movs	r2, r0
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <ReadBatteryVoltage+0xac>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4353      	muls	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4919      	ldr	r1, [pc, #100]	@ (80063b8 <ReadBatteryVoltage+0xb0>)
 8006354:	0018      	movs	r0, r3
 8006356:	f7f9 ff25 	bl	80001a4 <__udivsi3>
 800635a:	0003      	movs	r3, r0
 800635c:	001a      	movs	r2, r3
 800635e:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <ReadBatteryVoltage+0xb4>)
 8006360:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006362:	4b16      	ldr	r3, [pc, #88]	@ (80063bc <ReadBatteryVoltage+0xb4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	0018      	movs	r0, r3
 8006368:	f7fb f97e 	bl	8001668 <__aeabi_ui2f>
 800636c:	1c03      	adds	r3, r0, #0
 800636e:	4914      	ldr	r1, [pc, #80]	@ (80063c0 <ReadBatteryVoltage+0xb8>)
 8006370:	1c18      	adds	r0, r3, #0
 8006372:	f7fa fc2f 	bl	8000bd4 <__aeabi_fdiv>
 8006376:	1c03      	adds	r3, r0, #0
 8006378:	1c1a      	adds	r2, r3, #0
 800637a:	4b12      	ldr	r3, [pc, #72]	@ (80063c4 <ReadBatteryVoltage+0xbc>)
 800637c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800637e:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 8006380:	4a0a      	ldr	r2, [pc, #40]	@ (80063ac <ReadBatteryVoltage+0xa4>)
 8006382:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006384:	4b08      	ldr	r3, [pc, #32]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 8006386:	4a10      	ldr	r2, [pc, #64]	@ (80063c8 <ReadBatteryVoltage+0xc0>)
 8006388:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800638a:	4a07      	ldr	r2, [pc, #28]	@ (80063a8 <ReadBatteryVoltage+0xa0>)
 800638c:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <ReadBatteryVoltage+0xa8>)
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f009 f85b 	bl	800f44c <HAL_ADC_ConfigChannel>
 8006396:	1e03      	subs	r3, r0, #0
 8006398:	d001      	beq.n	800639e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800639a:	f001 ffcb 	bl	8008334 <Error_Handler>
  }
  return trueValue;
 800639e:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <ReadBatteryVoltage+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 }
 80063a2:	1c18      	adds	r0, r3, #0
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20000d5c 	.word	0x20000d5c
 80063ac:	38004000 	.word	0x38004000
 80063b0:	20000d98 	.word	0x20000d98
 80063b4:	20000034 	.word	0x20000034
 80063b8:	00000fff 	.word	0x00000fff
 80063bc:	20000d64 	.word	0x20000d64
 80063c0:	447a0000 	.word	0x447a0000
 80063c4:	20000d68 	.word	0x20000d68
 80063c8:	00001001 	.word	0x00001001

080063cc <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80063d0:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <ReadSolarVoltage+0x8c>)
 80063d2:	4a22      	ldr	r2, [pc, #136]	@ (800645c <ReadSolarVoltage+0x90>)
 80063d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80063d6:	4b20      	ldr	r3, [pc, #128]	@ (8006458 <ReadSolarVoltage+0x8c>)
 80063d8:	2280      	movs	r2, #128	@ 0x80
 80063da:	0152      	lsls	r2, r2, #5
 80063dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063de:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <ReadSolarVoltage+0x8c>)
 80063e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006460 <ReadSolarVoltage+0x94>)
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f009 f831 	bl	800f44c <HAL_ADC_ConfigChannel>
 80063ea:	1e03      	subs	r3, r0, #0
 80063ec:	d001      	beq.n	80063f2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80063ee:	f001 ffa1 	bl	8008334 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006460 <ReadSolarVoltage+0x94>)
 80063f4:	0018      	movs	r0, r3
 80063f6:	f008 ff2d 	bl	800f254 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063fa:	4b19      	ldr	r3, [pc, #100]	@ (8006460 <ReadSolarVoltage+0x94>)
 80063fc:	2101      	movs	r1, #1
 80063fe:	0018      	movs	r0, r3
 8006400:	f008 ff7c 	bl	800f2fc <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006404:	4b16      	ldr	r3, [pc, #88]	@ (8006460 <ReadSolarVoltage+0x94>)
 8006406:	0018      	movs	r0, r3
 8006408:	f009 f814 	bl	800f434 <HAL_ADC_GetValue>
 800640c:	0002      	movs	r2, r0
 800640e:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <ReadSolarVoltage+0x98>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	435a      	muls	r2, r3
 8006414:	0013      	movs	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	189b      	adds	r3, r3, r2
 800641a:	4913      	ldr	r1, [pc, #76]	@ (8006468 <ReadSolarVoltage+0x9c>)
 800641c:	0018      	movs	r0, r3
 800641e:	f7f9 fec1 	bl	80001a4 <__udivsi3>
 8006422:	0003      	movs	r3, r0
 8006424:	001a      	movs	r2, r3
 8006426:	4b11      	ldr	r3, [pc, #68]	@ (800646c <ReadSolarVoltage+0xa0>)
 8006428:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800642a:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <ReadSolarVoltage+0x8c>)
 800642c:	4a0b      	ldr	r2, [pc, #44]	@ (800645c <ReadSolarVoltage+0x90>)
 800642e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006430:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <ReadSolarVoltage+0x8c>)
 8006432:	4a0f      	ldr	r2, [pc, #60]	@ (8006470 <ReadSolarVoltage+0xa4>)
 8006434:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <ReadSolarVoltage+0x8c>)
 8006438:	4b09      	ldr	r3, [pc, #36]	@ (8006460 <ReadSolarVoltage+0x94>)
 800643a:	0011      	movs	r1, r2
 800643c:	0018      	movs	r0, r3
 800643e:	f009 f805 	bl	800f44c <HAL_ADC_ConfigChannel>
 8006442:	1e03      	subs	r3, r0, #0
 8006444:	d001      	beq.n	800644a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006446:	f001 ff75 	bl	8008334 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800644a:	4b08      	ldr	r3, [pc, #32]	@ (800646c <ReadSolarVoltage+0xa0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 }
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	20000d5c 	.word	0x20000d5c
 800645c:	3c008000 	.word	0x3c008000
 8006460:	20000d98 	.word	0x20000d98
 8006464:	20000034 	.word	0x20000034
 8006468:	00000fff 	.word	0x00000fff
 800646c:	20000d6c 	.word	0x20000d6c
 8006470:	00001001 	.word	0x00001001

08006474 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006478:	23a0      	movs	r3, #160	@ 0xa0
 800647a:	05db      	lsls	r3, r3, #23
 800647c:	2180      	movs	r1, #128	@ 0x80
 800647e:	0018      	movs	r0, r3
 8006480:	f009 ff80 	bl	8010384 <HAL_GPIO_ReadPin>
 8006484:	0003      	movs	r3, r0
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	4193      	sbcs	r3, r2
 800648a:	b2db      	uxtb	r3, r3
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006492:	b580      	push	{r7, lr}
 8006494:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006496:	2380      	movs	r3, #128	@ 0x80
 8006498:	021a      	lsls	r2, r3, #8
 800649a:	23a0      	movs	r3, #160	@ 0xa0
 800649c:	05db      	lsls	r3, r3, #23
 800649e:	0011      	movs	r1, r2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f009 ff6f 	bl	8010384 <HAL_GPIO_ReadPin>
 80064a6:	0003      	movs	r3, r0
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	4193      	sbcs	r3, r2
 80064ac:	b2db      	uxtb	r3, r3
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80064b8:	4b05      	ldr	r3, [pc, #20]	@ (80064d0 <UserButton_Pressed+0x1c>)
 80064ba:	2104      	movs	r1, #4
 80064bc:	0018      	movs	r0, r3
 80064be:	f009 ff61 	bl	8010384 <HAL_GPIO_ReadPin>
 80064c2:	0003      	movs	r3, r0
 80064c4:	425a      	negs	r2, r3
 80064c6:	4153      	adcs	r3, r2
 80064c8:	b2db      	uxtb	r3, r3
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	50000c00 	.word	0x50000c00

080064d4 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80064d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d6:	46d6      	mov	lr, sl
 80064d8:	464f      	mov	r7, r9
 80064da:	4646      	mov	r6, r8
 80064dc:	b5c0      	push	{r6, r7, lr}
 80064de:	b08e      	sub	sp, #56	@ 0x38
 80064e0:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064e2:	4b21      	ldr	r3, [pc, #132]	@ (8006568 <showTime+0x94>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d036      	beq.n	8006558 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064ea:	003a      	movs	r2, r7
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	0011      	movs	r1, r2
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fa2b 	bl	800694c <RTC_GetTime>
  UpdateSystemUptime();
 80064f6:	f000 f83f 	bl	8006578 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064fa:	003b      	movs	r3, r7
 80064fc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064fe:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006500:	003b      	movs	r3, r7
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006506:	4b19      	ldr	r3, [pc, #100]	@ (800656c <showTime+0x98>)
 8006508:	0092      	lsls	r2, r2, #2
 800650a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800650c:	003b      	movs	r3, r7
 800650e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006510:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006516:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800651c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800651e:	1d3b      	adds	r3, r7, #4
 8006520:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006522:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006524:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <showTime+0x9c>)
 8006526:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006528:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800652a:	4b11      	ldr	r3, [pc, #68]	@ (8006570 <showTime+0x9c>)
 800652c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800652e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006530:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <showTime+0x9c>)
 8006532:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006534:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006536:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <showTime+0x9c>)
 8006538:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800653a:	480e      	ldr	r0, [pc, #56]	@ (8006574 <showTime+0xa0>)
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	4643      	mov	r3, r8
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	4663      	mov	r3, ip
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	9603      	str	r6, [sp, #12]
 8006548:	9502      	str	r5, [sp, #8]
 800654a:	9401      	str	r4, [sp, #4]
 800654c:	9100      	str	r1, [sp, #0]
 800654e:	4653      	mov	r3, sl
 8006550:	4649      	mov	r1, r9
 8006552:	f019 fd47 	bl	801ffe4 <iprintf>
 8006556:	e000      	b.n	800655a <showTime+0x86>
    return;
 8006558:	46c0      	nop			@ (mov r8, r8)
}
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bce0      	pop	{r5, r6, r7}
 8006560:	46ba      	mov	sl, r7
 8006562:	46b1      	mov	r9, r6
 8006564:	46a8      	mov	r8, r5
 8006566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006568:	20000d7c 	.word	0x20000d7c
 800656c:	20000054 	.word	0x20000054
 8006570:	20000d70 	.word	0x20000d70
 8006574:	08023e48 	.word	0x08023e48

08006578 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800657e:	003a      	movs	r2, r7
 8006580:	1d3b      	adds	r3, r7, #4
 8006582:	0011      	movs	r1, r2
 8006584:	0018      	movs	r0, r3
 8006586:	f000 f9e1 	bl	800694c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800658a:	1d3a      	adds	r2, r7, #4
 800658c:	003b      	movs	r3, r7
 800658e:	0011      	movs	r1, r2
 8006590:	0018      	movs	r0, r3
 8006592:	f000 fba5 	bl	8006ce0 <makeTime>
 8006596:	0002      	movs	r2, r0
 8006598:	4b1e      	ldr	r3, [pc, #120]	@ (8006614 <UpdateSystemUptime+0x9c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	213c      	movs	r1, #60	@ 0x3c
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7f9 fe81 	bl	80002b0 <__aeabi_uidivmod>
 80065ae:	000b      	movs	r3, r1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b19      	ldr	r3, [pc, #100]	@ (8006618 <UpdateSystemUptime+0xa0>)
 80065b4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	213c      	movs	r1, #60	@ 0x3c
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7f9 fdf2 	bl	80001a4 <__udivsi3>
 80065c0:	0003      	movs	r3, r0
 80065c2:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	213c      	movs	r1, #60	@ 0x3c
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7f9 fe71 	bl	80002b0 <__aeabi_uidivmod>
 80065ce:	000b      	movs	r3, r1
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <UpdateSystemUptime+0xa0>)
 80065d4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	213c      	movs	r1, #60	@ 0x3c
 80065da:	0018      	movs	r0, r3
 80065dc:	f7f9 fde2 	bl	80001a4 <__udivsi3>
 80065e0:	0003      	movs	r3, r0
 80065e2:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2118      	movs	r1, #24
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7f9 fe61 	bl	80002b0 <__aeabi_uidivmod>
 80065ee:	000b      	movs	r3, r1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <UpdateSystemUptime+0xa0>)
 80065f4:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2118      	movs	r1, #24
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7f9 fdd2 	bl	80001a4 <__udivsi3>
 8006600:	0003      	movs	r3, r0
 8006602:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	b29a      	uxth	r2, r3
 8006608:	4b03      	ldr	r3, [pc, #12]	@ (8006618 <UpdateSystemUptime+0xa0>)
 800660a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800660c:	46c0      	nop			@ (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	b008      	add	sp, #32
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000d7c 	.word	0x20000d7c
 8006618:	20000d70 	.word	0x20000d70

0800661c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800661c:	b590      	push	{r4, r7, lr}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	0008      	movs	r0, r1
 8006626:	0011      	movs	r1, r2
 8006628:	1cfb      	adds	r3, r7, #3
 800662a:	1c02      	adds	r2, r0, #0
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	1cbb      	adds	r3, r7, #2
 8006630:	1c0a      	adds	r2, r1, #0
 8006632:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006634:	230e      	movs	r3, #14
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800663c:	230f      	movs	r3, #15
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	1cfa      	adds	r2, r7, #3
 8006642:	7812      	ldrb	r2, [r2, #0]
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e015      	b.n	8006674 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006648:	200f      	movs	r0, #15
 800664a:	183b      	adds	r3, r7, r0
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	18d2      	adds	r2, r2, r3
 8006652:	240e      	movs	r4, #14
 8006654:	193b      	adds	r3, r7, r4
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	7811      	ldrb	r1, [r2, #0]
 800665a:	2208      	movs	r2, #8
 800665c:	18ba      	adds	r2, r7, r2
 800665e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006660:	193b      	adds	r3, r7, r4
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	193b      	adds	r3, r7, r4
 8006666:	3201      	adds	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800666a:	183b      	adds	r3, r7, r0
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	183b      	adds	r3, r7, r0
 8006670:	3201      	adds	r2, #1
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	200f      	movs	r0, #15
 8006676:	183a      	adds	r2, r7, r0
 8006678:	1cbb      	adds	r3, r7, #2
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d9e2      	bls.n	8006648 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006682:	230e      	movs	r3, #14
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	18ba      	adds	r2, r7, r2
 800668c:	2100      	movs	r1, #0
 800668e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006690:	1cfb      	adds	r3, r7, #3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b13      	cmp	r3, #19
 8006696:	d849      	bhi.n	800672c <aBuff2int+0x110>
    if (start == 17) { //month
 8006698:	1cfb      	adds	r3, r7, #3
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b11      	cmp	r3, #17
 800669e:	d122      	bne.n	80066e6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80066a0:	183b      	adds	r3, r7, r0
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e018      	b.n	80066da <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80066a8:	240f      	movs	r4, #15
 80066aa:	193b      	adds	r3, r7, r4
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <aBuff2int+0x128>)
 80066b0:	0092      	lsls	r2, r2, #2
 80066b2:	58d2      	ldr	r2, [r2, r3]
 80066b4:	2308      	movs	r3, #8
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7f9 fd4c 	bl	8000158 <strcmp>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d104      	bne.n	80066ce <aBuff2int+0xb2>
          return i+1;
 80066c4:	193b      	adds	r3, r7, r4
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	e035      	b.n	800673a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80066ce:	210f      	movs	r1, #15
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	187b      	adds	r3, r7, r1
 80066d6:	3201      	adds	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	230f      	movs	r3, #15
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b0b      	cmp	r3, #11
 80066e2:	d9e1      	bls.n	80066a8 <aBuff2int+0x8c>
 80066e4:	e022      	b.n	800672c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066e6:	230f      	movs	r3, #15
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e018      	b.n	8006722 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066f0:	240f      	movs	r4, #15
 80066f2:	193b      	adds	r3, r7, r4
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <aBuff2int+0x12c>)
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	58d2      	ldr	r2, [r2, r3]
 80066fc:	2308      	movs	r3, #8
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	0011      	movs	r1, r2
 8006702:	0018      	movs	r0, r3
 8006704:	f7f9 fd28 	bl	8000158 <strcmp>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d104      	bne.n	8006716 <aBuff2int+0xfa>
          return i+1;
 800670c:	193b      	adds	r3, r7, r4
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	e011      	b.n	800673a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006716:	210f      	movs	r1, #15
 8006718:	187b      	adds	r3, r7, r1
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	187b      	adds	r3, r7, r1
 800671e:	3201      	adds	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	230f      	movs	r3, #15
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b06      	cmp	r3, #6
 800672a:	d9e1      	bls.n	80066f0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800672c:	2308      	movs	r3, #8
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	0018      	movs	r0, r3
 8006732:	f018 f87c 	bl	801e82e <atoi>
 8006736:	0003      	movs	r3, r0
 8006738:	b2db      	uxtb	r3, r3
}
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b005      	add	sp, #20
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	20000054 	.word	0x20000054
 8006748:	20000038 	.word	0x20000038

0800674c <ParseTime>:

void ParseTime(char* buffer) {
 800674c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674e:	b08b      	sub	sp, #44	@ 0x2c
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006754:	2408      	movs	r4, #8
 8006756:	193a      	adds	r2, r7, r4
 8006758:	260c      	movs	r6, #12
 800675a:	19bb      	adds	r3, r7, r6
 800675c:	0011      	movs	r1, r2
 800675e:	0018      	movs	r0, r3
 8006760:	f000 f8f4 	bl	800694c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2219      	movs	r2, #25
 8006768:	2118      	movs	r1, #24
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff ff56 	bl	800661c <aBuff2int>
 8006770:	0003      	movs	r3, r0
 8006772:	001a      	movs	r2, r3
 8006774:	19bb      	adds	r3, r7, r6
 8006776:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	221c      	movs	r2, #28
 800677c:	211b      	movs	r1, #27
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff ff4c 	bl	800661c <aBuff2int>
 8006784:	0003      	movs	r3, r0
 8006786:	001a      	movs	r2, r3
 8006788:	19bb      	adds	r3, r7, r6
 800678a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	221f      	movs	r2, #31
 8006790:	211e      	movs	r1, #30
 8006792:	0018      	movs	r0, r3
 8006794:	f7ff ff42 	bl	800661c <aBuff2int>
 8006798:	0003      	movs	r3, r0
 800679a:	001a      	movs	r2, r3
 800679c:	19bb      	adds	r3, r7, r6
 800679e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	@ 0x24
 80067a4:	2123      	movs	r1, #35	@ 0x23
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff ff38 	bl	800661c <aBuff2int>
 80067ac:	0003      	movs	r3, r0
 80067ae:	001a      	movs	r2, r3
 80067b0:	0025      	movs	r5, r4
 80067b2:	197b      	adds	r3, r7, r5
 80067b4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2213      	movs	r2, #19
 80067ba:	2111      	movs	r1, #17
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff ff2d 	bl	800661c <aBuff2int>
 80067c2:	0003      	movs	r3, r0
 80067c4:	001a      	movs	r2, r3
 80067c6:	197b      	adds	r3, r7, r5
 80067c8:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2216      	movs	r2, #22
 80067ce:	2115      	movs	r1, #21
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7ff ff23 	bl	800661c <aBuff2int>
 80067d6:	0003      	movs	r3, r0
 80067d8:	001a      	movs	r2, r3
 80067da:	197b      	adds	r3, r7, r5
 80067dc:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	220f      	movs	r2, #15
 80067e2:	210d      	movs	r1, #13
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7ff ff19 	bl	800661c <aBuff2int>
 80067ea:	0003      	movs	r3, r0
 80067ec:	001a      	movs	r2, r3
 80067ee:	197b      	adds	r3, r7, r5
 80067f0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067f2:	19bb      	adds	r3, r7, r6
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	001c      	movs	r4, r3
 80067f8:	19bb      	adds	r3, r7, r6
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	0018      	movs	r0, r3
 80067fe:	19bb      	adds	r3, r7, r6
 8006800:	789b      	ldrb	r3, [r3, #2]
 8006802:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <ParseTime+0x128>)
 8006804:	491c      	ldr	r1, [pc, #112]	@ (8006878 <ParseTime+0x12c>)
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	9000      	str	r0, [sp, #0]
 800680a:	0023      	movs	r3, r4
 800680c:	2003      	movs	r0, #3
 800680e:	f007 ff05 	bl	800e61c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006812:	197b      	adds	r3, r7, r5
 8006814:	789b      	ldrb	r3, [r3, #2]
 8006816:	001c      	movs	r4, r3
 8006818:	197b      	adds	r3, r7, r5
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	0018      	movs	r0, r3
 800681e:	197b      	adds	r3, r7, r5
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <ParseTime+0x130>)
 8006824:	4914      	ldr	r1, [pc, #80]	@ (8006878 <ParseTime+0x12c>)
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	9000      	str	r0, [sp, #0]
 800682a:	0023      	movs	r3, r4
 800682c:	2003      	movs	r0, #3
 800682e:	f007 fef5 	bl	800e61c <CreateLine>
  RTC_SetTime(&currentTime);
 8006832:	19bb      	adds	r3, r7, r6
 8006834:	0018      	movs	r0, r3
 8006836:	f000 f825 	bl	8006884 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800683a:	197b      	adds	r3, r7, r5
 800683c:	0018      	movs	r0, r3
 800683e:	f000 f847 	bl	80068d0 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006842:	197b      	adds	r3, r7, r5
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d101      	bne.n	800684e <ParseTime+0x102>
    reset_fanCleaningDone();
 800684a:	f002 fcf7 	bl	800923c <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 800684e:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <ParseTime+0x134>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006856:	230c      	movs	r3, #12
 8006858:	18fa      	adds	r2, r7, r3
 800685a:	2308      	movs	r3, #8
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	0011      	movs	r1, r2
 8006860:	0018      	movs	r0, r3
 8006862:	f000 fa3d 	bl	8006ce0 <makeTime>
 8006866:	0002      	movs	r2, r0
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <ParseTime+0x134>)
 800686a:	601a      	str	r2, [r3, #0]
  }
}
 800686c:	46c0      	nop			@ (mov r8, r8)
 800686e:	46bd      	mov	sp, r7
 8006870:	b009      	add	sp, #36	@ 0x24
 8006872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006874:	08023ea0 	.word	0x08023ea0
 8006878:	08023ed8 	.word	0x08023ed8
 800687c:	08023edc 	.word	0x08023edc
 8006880:	20000d7c 	.word	0x20000d7c

08006884 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800689e:	4b09      	ldr	r3, [pc, #36]	@ (80068c4 <RTC_SetTime+0x40>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	0018      	movs	r0, r3
 80068a8:	f00f fc18 	bl	80160dc <HAL_RTC_SetTime>
 80068ac:	1e03      	subs	r3, r0, #0
 80068ae:	d005      	beq.n	80068bc <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80068b0:	4a05      	ldr	r2, [pc, #20]	@ (80068c8 <RTC_SetTime+0x44>)
 80068b2:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <RTC_SetTime+0x48>)
 80068b4:	0019      	movs	r1, r3
 80068b6:	2001      	movs	r0, #1
 80068b8:	f007 feb0 	bl	800e61c <CreateLine>
    }
}
 80068bc:	46c0      	nop			@ (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b002      	add	sp, #8
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000d78 	.word	0x20000d78
 80068c8:	08023f10 	.word	0x08023f10
 80068cc:	08023f2c 	.word	0x08023f2c

080068d0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068d8:	4b16      	ldr	r3, [pc, #88]	@ (8006934 <RTC_SetDate+0x64>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	0018      	movs	r0, r3
 80068e2:	f00f fd03 	bl	80162ec <HAL_RTC_SetDate>
 80068e6:	1e03      	subs	r3, r0, #0
 80068e8:	d005      	beq.n	80068f6 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80068ea:	4a13      	ldr	r2, [pc, #76]	@ (8006938 <RTC_SetDate+0x68>)
 80068ec:	4b13      	ldr	r3, [pc, #76]	@ (800693c <RTC_SetDate+0x6c>)
 80068ee:	0019      	movs	r1, r3
 80068f0:	2001      	movs	r0, #1
 80068f2:	f007 fe93 	bl	800e61c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <RTC_SetDate+0x64>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	0018      	movs	r0, r3
 80068fe:	f010 f83b 	bl	8016978 <HAL_RTCEx_BKUPRead>
 8006902:	0003      	movs	r3, r0
 8006904:	4a0e      	ldr	r2, [pc, #56]	@ (8006940 <RTC_SetDate+0x70>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d010      	beq.n	800692c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800690a:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <RTC_SetDate+0x74>)
 800690c:	4b0e      	ldr	r3, [pc, #56]	@ (8006948 <RTC_SetDate+0x78>)
 800690e:	0019      	movs	r1, r3
 8006910:	2003      	movs	r0, #3
 8006912:	f007 fe83 	bl	800e61c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006916:	f00e fb61 	bl	8014fdc <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <RTC_SetDate+0x64>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <RTC_SetDate+0x70>)
 8006920:	2101      	movs	r1, #1
 8006922:	0018      	movs	r0, r3
 8006924:	f010 f810 	bl	8016948 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006928:	f00e fb66 	bl	8014ff8 <HAL_PWR_DisableBkUpAccess>
    }
}
 800692c:	46c0      	nop			@ (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000d78 	.word	0x20000d78
 8006938:	08023f30 	.word	0x08023f30
 800693c:	08023f2c 	.word	0x08023f2c
 8006940:	0000bebe 	.word	0x0000bebe
 8006944:	08023f4c 	.word	0x08023f4c
 8006948:	08023ed8 	.word	0x08023ed8

0800694c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006956:	250f      	movs	r5, #15
 8006958:	197b      	adds	r3, r7, r5
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800695e:	230e      	movs	r3, #14
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006966:	260c      	movs	r6, #12
 8006968:	19bc      	adds	r4, r7, r6
 800696a:	f006 ff0b 	bl	800d784 <powerCheck>
 800696e:	0003      	movs	r3, r0
 8006970:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006972:	19bb      	adds	r3, r7, r6
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d104      	bne.n	8006984 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800697a:	197b      	adds	r3, r7, r5
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	197b      	adds	r3, r7, r5
 8006980:	3201      	adds	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006984:	230d      	movs	r3, #13
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e039      	b.n	8006a02 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800698e:	4b23      	ldr	r3, [pc, #140]	@ (8006a1c <RTC_GetTime+0xd0>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	0018      	movs	r0, r3
 8006998:	f00f fc4a 	bl	8016230 <HAL_RTC_GetTime>
 800699c:	1e03      	subs	r3, r0, #0
 800699e:	d005      	beq.n	80069ac <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80069a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a20 <RTC_GetTime+0xd4>)
 80069a2:	4b20      	ldr	r3, [pc, #128]	@ (8006a24 <RTC_GetTime+0xd8>)
 80069a4:	0019      	movs	r1, r3
 80069a6:	2001      	movs	r0, #1
 80069a8:	f007 fe38 	bl	800e61c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80069ac:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <RTC_GetTime+0xd0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	0018      	movs	r0, r3
 80069b6:	f00f fd2d 	bl	8016414 <HAL_RTC_GetDate>
 80069ba:	1e03      	subs	r3, r0, #0
 80069bc:	d005      	beq.n	80069ca <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80069be:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <RTC_GetTime+0xdc>)
 80069c0:	4b18      	ldr	r3, [pc, #96]	@ (8006a24 <RTC_GetTime+0xd8>)
 80069c2:	0019      	movs	r1, r3
 80069c4:	2001      	movs	r0, #1
 80069c6:	f007 fe29 	bl	800e61c <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80069ca:	230c      	movs	r3, #12
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d110      	bne.n	80069f6 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	210e      	movs	r1, #14
 80069da:	187a      	adds	r2, r7, r1
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d018      	beq.n	8006a14 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069e2:	187b      	adds	r3, r7, r1
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	701a      	strb	r2, [r3, #0]
        t++;
 80069ea:	210f      	movs	r1, #15
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	187b      	adds	r3, r7, r1
 80069f2:	3201      	adds	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069f6:	210d      	movs	r1, #13
 80069f8:	187b      	adds	r3, r7, r1
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	187b      	adds	r3, r7, r1
 80069fe:	3201      	adds	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	230d      	movs	r3, #13
 8006a04:	18fa      	adds	r2, r7, r3
 8006a06:	230f      	movs	r3, #15
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3bd      	bcc.n	800698e <RTC_GetTime+0x42>
 8006a12:	e000      	b.n	8006a16 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006a14:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b005      	add	sp, #20
 8006a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a1c:	20000d78 	.word	0x20000d78
 8006a20:	08023f64 	.word	0x08023f64
 8006a24:	08023f2c 	.word	0x08023f2c
 8006a28:	08023f80 	.word	0x08023f80

08006a2c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a32:	003a      	movs	r2, r7
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	0011      	movs	r1, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff ff87 	bl	800694c <RTC_GetTime>
  return currentDate.WeekDay;
 8006a3e:	003b      	movs	r3, r7
 8006a40:	781b      	ldrb	r3, [r3, #0]
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b006      	add	sp, #24
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a50:	003a      	movs	r2, r7
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7ff ff78 	bl	800694c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a5c:	1d3a      	adds	r2, r7, #4
 8006a5e:	003b      	movs	r3, r7
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 f93c 	bl	8006ce0 <makeTime>
 8006a68:	0003      	movs	r3, r0
}
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b006      	add	sp, #24
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	b08d      	sub	sp, #52	@ 0x34
 8006a78:	af04      	add	r7, sp, #16
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a7e:	240c      	movs	r4, #12
 8006a80:	193a      	adds	r2, r7, r4
 8006a82:	2508      	movs	r5, #8
 8006a84:	1979      	adds	r1, r7, r5
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f000 f9f3 	bl	8006e74 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a8e:	002a      	movs	r2, r5
 8006a90:	18bb      	adds	r3, r7, r2
 8006a92:	789b      	ldrb	r3, [r3, #2]
 8006a94:	001e      	movs	r6, r3
 8006a96:	18bb      	adds	r3, r7, r2
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	469c      	mov	ip, r3
 8006a9c:	18bb      	adds	r3, r7, r2
 8006a9e:	78db      	ldrb	r3, [r3, #3]
 8006aa0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aa2:	0021      	movs	r1, r4
 8006aa4:	187b      	adds	r3, r7, r1
 8006aa6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aa8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aae:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006ab0:	187b      	adds	r3, r7, r1
 8006ab2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006ab4:	4906      	ldr	r1, [pc, #24]	@ (8006ad0 <getUTCfromPosixTime+0x5c>)
 8006ab6:	6838      	ldr	r0, [r7, #0]
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	9502      	str	r5, [sp, #8]
 8006abc:	9401      	str	r4, [sp, #4]
 8006abe:	9200      	str	r2, [sp, #0]
 8006ac0:	4663      	mov	r3, ip
 8006ac2:	0032      	movs	r2, r6
 8006ac4:	f019 fafe 	bl	80200c4 <siprintf>
}
 8006ac8:	46c0      	nop			@ (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b009      	add	sp, #36	@ 0x24
 8006ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad0:	08023f9c 	.word	0x08023f9c

08006ad4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006adc:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f00f fe95 	bl	8016810 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	401a      	ands	r2, r3
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	490a      	ldr	r1, [pc, #40]	@ (8006b24 <RTC_SetWakeUpTimer+0x50>)
 8006afa:	430a      	orrs	r2, r1
 8006afc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006afe:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <RTC_SetWakeUpTimer+0x54>)
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	0352      	lsls	r2, r2, #13
 8006b04:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006b06:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <RTC_SetWakeUpTimer+0x4c>)
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	2204      	movs	r2, #4
 8006b10:	0019      	movs	r1, r3
 8006b12:	f00f fda5 	bl	8016660 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006b16:	46c0      	nop			@ (mov r8, r8)
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	b002      	add	sp, #8
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	20000d78 	.word	0x20000d78
 8006b24:	fffffb7f 	.word	0xfffffb7f
 8006b28:	40010400 	.word	0x40010400

08006b2c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b30:	4a0b      	ldr	r2, [pc, #44]	@ (8006b60 <Enter_Standby_Mode+0x34>)
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <Enter_Standby_Mode+0x38>)
 8006b34:	0019      	movs	r1, r3
 8006b36:	2003      	movs	r0, #3
 8006b38:	f007 fd70 	bl	800e61c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b3c:	2064      	movs	r0, #100	@ 0x64
 8006b3e:	f008 f9b7 	bl	800eeb0 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <Enter_Standby_Mode+0x3c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f00f fe62 	bl	8016810 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006b4c:	f000 fe14 	bl	8007778 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006b50:	f008 f9d2 	bl	800eef8 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006b54:	f00e fabc 	bl	80150d0 <HAL_PWR_EnterSTANDBYMode>
}
 8006b58:	46c0      	nop			@ (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	08023ff0 	.word	0x08023ff0
 8006b64:	08023ed8 	.word	0x08023ed8
 8006b68:	20000d78 	.word	0x20000d78

08006b6c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	0002      	movs	r2, r0
 8006b74:	1dbb      	adds	r3, r7, #6
 8006b76:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b78:	4b46      	ldr	r3, [pc, #280]	@ (8006c94 <Enter_Stop_Mode+0x128>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b80:	f002 fb12 	bl	80091a8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b84:	f7ff fbc0 	bl	8006308 <ReadBatteryVoltage>
 8006b88:	1c03      	adds	r3, r0, #0
 8006b8a:	1c18      	adds	r0, r3, #0
 8006b8c:	f7fc fc6a 	bl	8003464 <__aeabi_f2d>
 8006b90:	0002      	movs	r2, r0
 8006b92:	000b      	movs	r3, r1
 8006b94:	4840      	ldr	r0, [pc, #256]	@ (8006c98 <Enter_Stop_Mode+0x12c>)
 8006b96:	4941      	ldr	r1, [pc, #260]	@ (8006c9c <Enter_Stop_Mode+0x130>)
 8006b98:	9200      	str	r2, [sp, #0]
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	2002      	movs	r0, #2
 8006ba0:	f007 fd3c 	bl	800e61c <CreateLine>
  powerDisplay(powerCheck());
 8006ba4:	f006 fdee 	bl	800d784 <powerCheck>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	0018      	movs	r0, r3
 8006bac:	f006 fe06 	bl	800d7bc <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006bb0:	1dbb      	adds	r3, r7, #6
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca0 <Enter_Stop_Mode+0x134>)
 8006bb6:	493b      	ldr	r1, [pc, #236]	@ (8006ca4 <Enter_Stop_Mode+0x138>)
 8006bb8:	2003      	movs	r0, #3
 8006bba:	f007 fd2f 	bl	800e61c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006bbe:	f7ff ff44 	bl	8006a4a <getPosixTime>
 8006bc2:	0002      	movs	r2, r0
 8006bc4:	1dbb      	adds	r3, r7, #6
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	18d3      	adds	r3, r2, r3
 8006bca:	4a37      	ldr	r2, [pc, #220]	@ (8006ca8 <Enter_Stop_Mode+0x13c>)
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7ff ff50 	bl	8006a74 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006bd4:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <Enter_Stop_Mode+0x13c>)
 8006bd6:	4a35      	ldr	r2, [pc, #212]	@ (8006cac <Enter_Stop_Mode+0x140>)
 8006bd8:	4930      	ldr	r1, [pc, #192]	@ (8006c9c <Enter_Stop_Mode+0x130>)
 8006bda:	2002      	movs	r0, #2
 8006bdc:	f007 fd1e 	bl	800e61c <CreateLine>
  HAL_Delay(100);
 8006be0:	2064      	movs	r0, #100	@ 0x64
 8006be2:	f008 f965 	bl	800eeb0 <HAL_Delay>
  HAL_SuspendTick();
 8006be6:	f008 f987 	bl	800eef8 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006bea:	1dbb      	adds	r3, r7, #6
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f7ff ff70 	bl	8006ad4 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f00e fa0e 	bl	8015018 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bfc:	f001 fa54 	bl	80080a8 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006c00:	1dbb      	adds	r3, r7, #6
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f002 fa5f 	bl	80090c8 <sen5x_enable>
 8006c0a:	1e03      	subs	r3, r0, #0
 8006c0c:	d01c      	beq.n	8006c48 <Enter_Stop_Mode+0xdc>
    showTime();
 8006c0e:	f7ff fc61 	bl	80064d4 <showTime>
    set_light_on_state();
 8006c12:	f002 ffe1 	bl	8009bd8 <set_light_on_state>
    if (!userToggle) {
 8006c16:	4b26      	ldr	r3, [pc, #152]	@ (8006cb0 <Enter_Stop_Mode+0x144>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4053      	eors	r3, r2
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d011      	beq.n	8006c48 <Enter_Stop_Mode+0xdc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006c24:	201c      	movs	r0, #28
 8006c26:	f7ff ff55 	bl	8006ad4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <Enter_Stop_Mode+0x134>)
 8006c2c:	491d      	ldr	r1, [pc, #116]	@ (8006ca4 <Enter_Stop_Mode+0x138>)
 8006c2e:	231c      	movs	r3, #28
 8006c30:	2003      	movs	r0, #3
 8006c32:	f007 fcf3 	bl	800e61c <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c36:	2101      	movs	r1, #1
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f00e f9ed 	bl	8015018 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c3e:	f001 fa33 	bl	80080a8 <SystemClock_Config>
      setsen5xReadTimer(0);
 8006c42:	2000      	movs	r0, #0
 8006c44:	f002 fa1e 	bl	8009084 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c48:	f008 f964 	bl	800ef14 <HAL_ResumeTick>
  showTime();
 8006c4c:	f7ff fc42 	bl	80064d4 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c50:	f001 fec2 	bl	80089d8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c54:	f004 fdf4 	bl	800b840 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f002 fa25 	bl	80090a8 <setsen5xSamplecounter>
  setESPTimeStamp(2500);
 8006c5e:	4b15      	ldr	r3, [pc, #84]	@ (8006cb4 <Enter_Stop_Mode+0x148>)
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7fc fda5 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c66:	2000      	movs	r0, #0
 8006c68:	f004 fdd8 	bl	800b81c <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f007 fe99 	bl	800e9a4 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c72:	2000      	movs	r0, #0
 8006c74:	f001 fe9e 	bl	80089b4 <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c78:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb8 <Enter_Stop_Mode+0x14c>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c7e:	f008 f90d 	bl	800ee9c <HAL_GetTick>
 8006c82:	0003      	movs	r3, r0
 8006c84:	4a0d      	ldr	r2, [pc, #52]	@ (8006cbc <Enter_Stop_Mode+0x150>)
 8006c86:	189a      	adds	r2, r3, r2
 8006c88:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <Enter_Stop_Mode+0x154>)
 8006c8a:	601a      	str	r2, [r3, #0]
}
 8006c8c:	46c0      	nop			@ (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b002      	add	sp, #8
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20001066 	.word	0x20001066
 8006c98:	08024014 	.word	0x08024014
 8006c9c:	0802402c 	.word	0x0802402c
 8006ca0:	08024030 	.word	0x08024030
 8006ca4:	08023ed8 	.word	0x08023ed8
 8006ca8:	20000d80 	.word	0x20000d80
 8006cac:	08024054 	.word	0x08024054
 8006cb0:	2000200a 	.word	0x2000200a
 8006cb4:	000009c4 	.word	0x000009c4
 8006cb8:	20000558 	.word	0x20000558
 8006cbc:	000008fc 	.word	0x000008fc
 8006cc0:	20000fc8 	.word	0x20000fc8

08006cc4 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	@ (8006cdc <InitClock+0x18>)
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b002      	add	sp, #8
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	20000d78 	.word	0x20000d78

08006ce0 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	78db      	ldrb	r3, [r3, #3]
 8006cee:	001a      	movs	r2, r3
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	025b      	lsls	r3, r3, #9
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	189b      	adds	r3, r3, r2
 8006cfe:	011a      	lsls	r2, r3, #4
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	01d3      	lsls	r3, r2, #7
 8006d04:	001a      	movs	r2, r3
 8006d06:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e028      	b.n	8006d60 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a53      	ldr	r2, [pc, #332]	@ (8006e60 <makeTime+0x180>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	db21      	blt.n	8006d5a <makeTime+0x7a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a52      	ldr	r2, [pc, #328]	@ (8006e64 <makeTime+0x184>)
 8006d1a:	4694      	mov	ip, r2
 8006d1c:	4463      	add	r3, ip
 8006d1e:	001a      	movs	r2, r3
 8006d20:	2303      	movs	r3, #3
 8006d22:	4013      	ands	r3, r2
 8006d24:	d119      	bne.n	8006d5a <makeTime+0x7a>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a4e      	ldr	r2, [pc, #312]	@ (8006e64 <makeTime+0x184>)
 8006d2a:	4694      	mov	ip, r2
 8006d2c:	4463      	add	r3, ip
 8006d2e:	2164      	movs	r1, #100	@ 0x64
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7f9 fba7 	bl	8000484 <__aeabi_idivmod>
 8006d36:	1e0b      	subs	r3, r1, #0
 8006d38:	d10a      	bne.n	8006d50 <makeTime+0x70>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a49      	ldr	r2, [pc, #292]	@ (8006e64 <makeTime+0x184>)
 8006d3e:	4694      	mov	ip, r2
 8006d40:	4463      	add	r3, ip
 8006d42:	22c8      	movs	r2, #200	@ 0xc8
 8006d44:	0051      	lsls	r1, r2, #1
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7f9 fb9c 	bl	8000484 <__aeabi_idivmod>
 8006d4c:	1e0b      	subs	r3, r1, #0
 8006d4e:	d104      	bne.n	8006d5a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a45      	ldr	r2, [pc, #276]	@ (8006e68 <makeTime+0x188>)
 8006d54:	4694      	mov	ip, r2
 8006d56:	4463      	add	r3, ip
 8006d58:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	78db      	ldrb	r3, [r3, #3]
 8006d64:	001a      	movs	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	dbd0      	blt.n	8006d0e <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e03c      	b.n	8006dec <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d125      	bne.n	8006dc4 <makeTime+0xe4>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	78db      	ldrb	r3, [r3, #3]
 8006d7c:	4a39      	ldr	r2, [pc, #228]	@ (8006e64 <makeTime+0x184>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	001a      	movs	r2, r3
 8006d84:	2303      	movs	r3, #3
 8006d86:	4013      	ands	r3, r2
 8006d88:	d11c      	bne.n	8006dc4 <makeTime+0xe4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	78db      	ldrb	r3, [r3, #3]
 8006d8e:	4a35      	ldr	r2, [pc, #212]	@ (8006e64 <makeTime+0x184>)
 8006d90:	4694      	mov	ip, r2
 8006d92:	4463      	add	r3, ip
 8006d94:	2164      	movs	r1, #100	@ 0x64
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7f9 fb74 	bl	8000484 <__aeabi_idivmod>
 8006d9c:	1e0b      	subs	r3, r1, #0
 8006d9e:	d10b      	bne.n	8006db8 <makeTime+0xd8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	78db      	ldrb	r3, [r3, #3]
 8006da4:	4a2f      	ldr	r2, [pc, #188]	@ (8006e64 <makeTime+0x184>)
 8006da6:	4694      	mov	ip, r2
 8006da8:	4463      	add	r3, ip
 8006daa:	22c8      	movs	r2, #200	@ 0xc8
 8006dac:	0051      	lsls	r1, r2, #1
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7f9 fb68 	bl	8000484 <__aeabi_idivmod>
 8006db4:	1e0b      	subs	r3, r1, #0
 8006db6:	d105      	bne.n	8006dc4 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4a2c      	ldr	r2, [pc, #176]	@ (8006e6c <makeTime+0x18c>)
 8006dbc:	4694      	mov	ip, r2
 8006dbe:	4463      	add	r3, ip
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	e010      	b.n	8006de6 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a29      	ldr	r2, [pc, #164]	@ (8006e70 <makeTime+0x190>)
 8006dca:	5cd3      	ldrb	r3, [r2, r3]
 8006dcc:	001a      	movs	r2, r3
 8006dce:	0013      	movs	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	189b      	adds	r3, r3, r2
 8006dd4:	011a      	lsls	r2, r3, #4
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	0113      	lsls	r3, r2, #4
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	01db      	lsls	r3, r3, #7
 8006dde:	001a      	movs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	785b      	ldrb	r3, [r3, #1]
 8006df0:	001a      	movs	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	dbbc      	blt.n	8006d72 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	789b      	ldrb	r3, [r3, #2]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	001a      	movs	r2, r3
 8006e00:	0013      	movs	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	189b      	adds	r3, r3, r2
 8006e06:	011a      	lsls	r2, r3, #4
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	0113      	lsls	r3, r2, #4
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	01db      	lsls	r3, r3, #7
 8006e10:	001a      	movs	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	189b      	adds	r3, r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	001a      	movs	r2, r3
 8006e1e:	0013      	movs	r3, r2
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	011a      	lsls	r2, r3, #4
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	0113      	lsls	r3, r2, #4
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	001a      	movs	r2, r3
 8006e38:	0013      	movs	r3, r2
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	001a      	movs	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	789b      	ldrb	r3, [r3, #2]
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e54:	68bb      	ldr	r3, [r7, #8]
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b004      	add	sp, #16
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	fffff84f 	.word	0xfffff84f
 8006e64:	000007b2 	.word	0x000007b2
 8006e68:	00015180 	.word	0x00015180
 8006e6c:	00263b80 	.word	0x00263b80
 8006e70:	080255c4 	.word	0x080255c4

08006e74 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b089      	sub	sp, #36	@ 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	213c      	movs	r1, #60	@ 0x3c
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7f9 fa11 	bl	80002b0 <__aeabi_uidivmod>
 8006e8e:	000b      	movs	r3, r1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	213c      	movs	r1, #60	@ 0x3c
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7f9 f982 	bl	80001a4 <__udivsi3>
 8006ea0:	0003      	movs	r3, r0
 8006ea2:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	213c      	movs	r1, #60	@ 0x3c
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7f9 fa01 	bl	80002b0 <__aeabi_uidivmod>
 8006eae:	000b      	movs	r3, r1
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	213c      	movs	r1, #60	@ 0x3c
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7f9 f972 	bl	80001a4 <__udivsi3>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2118      	movs	r1, #24
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7f9 f9f1 	bl	80002b0 <__aeabi_uidivmod>
 8006ece:	000b      	movs	r3, r1
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2118      	movs	r1, #24
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7f9 f962 	bl	80001a4 <__udivsi3>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	2107      	movs	r1, #7
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7f9 f9e0 	bl	80002b0 <__aeabi_uidivmod>
 8006ef0:	000b      	movs	r3, r1
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006efc:	231f      	movs	r3, #31
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f08:	e005      	b.n	8006f16 <breakPosixTime+0xa2>
    year++;
 8006f0a:	211f      	movs	r1, #31
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	187b      	adds	r3, r7, r1
 8006f12:	3201      	adds	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f16:	241f      	movs	r4, #31
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4a64      	ldr	r2, [pc, #400]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	001a      	movs	r2, r3
 8006f24:	2303      	movs	r3, #3
 8006f26:	4013      	ands	r3, r2
 8006f28:	d119      	bne.n	8006f5e <breakPosixTime+0xea>
 8006f2a:	193b      	adds	r3, r7, r4
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	4a60      	ldr	r2, [pc, #384]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f30:	4694      	mov	ip, r2
 8006f32:	4463      	add	r3, ip
 8006f34:	2164      	movs	r1, #100	@ 0x64
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7f9 faa4 	bl	8000484 <__aeabi_idivmod>
 8006f3c:	1e0b      	subs	r3, r1, #0
 8006f3e:	d10b      	bne.n	8006f58 <breakPosixTime+0xe4>
 8006f40:	193b      	adds	r3, r7, r4
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	4a5a      	ldr	r2, [pc, #360]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f46:	4694      	mov	ip, r2
 8006f48:	4463      	add	r3, ip
 8006f4a:	22c8      	movs	r2, #200	@ 0xc8
 8006f4c:	0051      	lsls	r1, r2, #1
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7f9 fa98 	bl	8000484 <__aeabi_idivmod>
 8006f54:	1e0b      	subs	r3, r1, #0
 8006f56:	d102      	bne.n	8006f5e <breakPosixTime+0xea>
 8006f58:	23b7      	movs	r3, #183	@ 0xb7
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	e001      	b.n	8006f62 <breakPosixTime+0xee>
 8006f5e:	236e      	movs	r3, #110	@ 0x6e
 8006f60:	33ff      	adds	r3, #255	@ 0xff
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	18d3      	adds	r3, r2, r3
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d9cc      	bls.n	8006f0a <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	241f      	movs	r4, #31
 8006f74:	193a      	adds	r2, r7, r4
 8006f76:	7812      	ldrb	r2, [r2, #0]
 8006f78:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f80:	4694      	mov	ip, r2
 8006f82:	4463      	add	r3, ip
 8006f84:	001a      	movs	r2, r3
 8006f86:	2303      	movs	r3, #3
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d119      	bne.n	8006fc0 <breakPosixTime+0x14c>
 8006f8c:	193b      	adds	r3, r7, r4
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	4a47      	ldr	r2, [pc, #284]	@ (80070b0 <breakPosixTime+0x23c>)
 8006f92:	4694      	mov	ip, r2
 8006f94:	4463      	add	r3, ip
 8006f96:	2164      	movs	r1, #100	@ 0x64
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7f9 fa73 	bl	8000484 <__aeabi_idivmod>
 8006f9e:	1e0b      	subs	r3, r1, #0
 8006fa0:	d10b      	bne.n	8006fba <breakPosixTime+0x146>
 8006fa2:	193b      	adds	r3, r7, r4
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	4a42      	ldr	r2, [pc, #264]	@ (80070b0 <breakPosixTime+0x23c>)
 8006fa8:	4694      	mov	ip, r2
 8006faa:	4463      	add	r3, ip
 8006fac:	22c8      	movs	r2, #200	@ 0xc8
 8006fae:	0051      	lsls	r1, r2, #1
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7f9 fa67 	bl	8000484 <__aeabi_idivmod>
 8006fb6:	1e0b      	subs	r3, r1, #0
 8006fb8:	d102      	bne.n	8006fc0 <breakPosixTime+0x14c>
 8006fba:	23b7      	movs	r3, #183	@ 0xb7
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	e001      	b.n	8006fc4 <breakPosixTime+0x150>
 8006fc0:	236e      	movs	r3, #110	@ 0x6e
 8006fc2:	33ff      	adds	r3, #255	@ 0xff
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	61bb      	str	r3, [r7, #24]

  days=0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
  month=0;
 8006fd6:	211e      	movs	r1, #30
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006fde:	231d      	movs	r3, #29
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006fe6:	187b      	adds	r3, r7, r1
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e048      	b.n	8007080 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fee:	231e      	movs	r3, #30
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d12a      	bne.n	800704e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006ff8:	241f      	movs	r4, #31
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80070b0 <breakPosixTime+0x23c>)
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	001a      	movs	r2, r3
 8007006:	2303      	movs	r3, #3
 8007008:	4013      	ands	r3, r2
 800700a:	d11b      	bne.n	8007044 <breakPosixTime+0x1d0>
 800700c:	193b      	adds	r3, r7, r4
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4a27      	ldr	r2, [pc, #156]	@ (80070b0 <breakPosixTime+0x23c>)
 8007012:	4694      	mov	ip, r2
 8007014:	4463      	add	r3, ip
 8007016:	2164      	movs	r1, #100	@ 0x64
 8007018:	0018      	movs	r0, r3
 800701a:	f7f9 fa33 	bl	8000484 <__aeabi_idivmod>
 800701e:	1e0b      	subs	r3, r1, #0
 8007020:	d10b      	bne.n	800703a <breakPosixTime+0x1c6>
 8007022:	193b      	adds	r3, r7, r4
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <breakPosixTime+0x23c>)
 8007028:	4694      	mov	ip, r2
 800702a:	4463      	add	r3, ip
 800702c:	22c8      	movs	r2, #200	@ 0xc8
 800702e:	0051      	lsls	r1, r2, #1
 8007030:	0018      	movs	r0, r3
 8007032:	f7f9 fa27 	bl	8000484 <__aeabi_idivmod>
 8007036:	1e0b      	subs	r3, r1, #0
 8007038:	d104      	bne.n	8007044 <breakPosixTime+0x1d0>
        monthLength=29;
 800703a:	231d      	movs	r3, #29
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	221d      	movs	r2, #29
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e00c      	b.n	800705e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007044:	231d      	movs	r3, #29
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	221c      	movs	r2, #28
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e007      	b.n	800705e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800704e:	231e      	movs	r3, #30
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	231d      	movs	r3, #29
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	4916      	ldr	r1, [pc, #88]	@ (80070b4 <breakPosixTime+0x240>)
 800705a:	5c8a      	ldrb	r2, [r1, r2]
 800705c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800705e:	211d      	movs	r1, #29
 8007060:	187b      	adds	r3, r7, r1
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	429a      	cmp	r2, r3
 8007068:	d310      	bcc.n	800708c <breakPosixTime+0x218>
      time -= monthLength;
 800706a:	187b      	adds	r3, r7, r1
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007074:	211e      	movs	r1, #30
 8007076:	187b      	adds	r3, r7, r1
 8007078:	781a      	ldrb	r2, [r3, #0]
 800707a:	187b      	adds	r3, r7, r1
 800707c:	3201      	adds	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	231e      	movs	r3, #30
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b0b      	cmp	r3, #11
 8007088:	d9b1      	bls.n	8006fee <breakPosixTime+0x17a>
 800708a:	e000      	b.n	800708e <breakPosixTime+0x21a>
    } else {
        break;
 800708c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800708e:	231e      	movs	r3, #30
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	3301      	adds	r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	709a      	strb	r2, [r3, #2]
}
 80070a8:	46c0      	nop			@ (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b009      	add	sp, #36	@ 0x24
 80070ae:	bd90      	pop	{r4, r7, pc}
 80070b0:	000007b2 	.word	0x000007b2
 80070b4:	080255c4 	.word	0x080255c4

080070b8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070be:	003b      	movs	r3, r7
 80070c0:	0018      	movs	r0, r3
 80070c2:	2308      	movs	r3, #8
 80070c4:	001a      	movs	r2, r3
 80070c6:	2100      	movs	r1, #0
 80070c8:	f019 f940 	bl	802034c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80070cc:	4b30      	ldr	r3, [pc, #192]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070ce:	4a31      	ldr	r2, [pc, #196]	@ (8007194 <MX_ADC_Init+0xdc>)
 80070d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80070d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070da:	22c0      	movs	r2, #192	@ 0xc0
 80070dc:	0612      	lsls	r2, r2, #24
 80070de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80070e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070ec:	4b28      	ldr	r3, [pc, #160]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070f2:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070f8:	4b25      	ldr	r3, [pc, #148]	@ (8007190 <MX_ADC_Init+0xd8>)
 80070fa:	2220      	movs	r2, #32
 80070fc:	2100      	movs	r1, #0
 80070fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007100:	4b23      	ldr	r3, [pc, #140]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007102:	2221      	movs	r2, #33	@ 0x21
 8007104:	2101      	movs	r1, #1
 8007106:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007108:	4b21      	ldr	r3, [pc, #132]	@ (8007190 <MX_ADC_Init+0xd8>)
 800710a:	2200      	movs	r2, #0
 800710c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800710e:	4b20      	ldr	r3, [pc, #128]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007110:	22c2      	movs	r2, #194	@ 0xc2
 8007112:	32ff      	adds	r2, #255	@ 0xff
 8007114:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007116:	4b1e      	ldr	r3, [pc, #120]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007118:	222c      	movs	r2, #44	@ 0x2c
 800711a:	2100      	movs	r1, #0
 800711c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800711e:	4b1c      	ldr	r3, [pc, #112]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007120:	2204      	movs	r2, #4
 8007122:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007124:	4b1a      	ldr	r3, [pc, #104]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007126:	2200      	movs	r2, #0
 8007128:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800712a:	4b19      	ldr	r3, [pc, #100]	@ (8007190 <MX_ADC_Init+0xd8>)
 800712c:	2200      	movs	r2, #0
 800712e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007130:	4b17      	ldr	r3, [pc, #92]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007132:	2200      	movs	r2, #0
 8007134:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007136:	4b16      	ldr	r3, [pc, #88]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007138:	2200      	movs	r2, #0
 800713a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800713c:	4b14      	ldr	r3, [pc, #80]	@ (8007190 <MX_ADC_Init+0xd8>)
 800713e:	0018      	movs	r0, r3
 8007140:	f007 ff14 	bl	800ef6c <HAL_ADC_Init>
 8007144:	1e03      	subs	r3, r0, #0
 8007146:	d001      	beq.n	800714c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007148:	f001 f8f4 	bl	8008334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800714c:	003b      	movs	r3, r7
 800714e:	4a12      	ldr	r2, [pc, #72]	@ (8007198 <MX_ADC_Init+0xe0>)
 8007150:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007152:	003b      	movs	r3, r7
 8007154:	2280      	movs	r2, #128	@ 0x80
 8007156:	0152      	lsls	r2, r2, #5
 8007158:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800715a:	003a      	movs	r2, r7
 800715c:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <MX_ADC_Init+0xd8>)
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f008 f973 	bl	800f44c <HAL_ADC_ConfigChannel>
 8007166:	1e03      	subs	r3, r0, #0
 8007168:	d001      	beq.n	800716e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800716a:	f001 f8e3 	bl	8008334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800716e:	003b      	movs	r3, r7
 8007170:	4a0a      	ldr	r2, [pc, #40]	@ (800719c <MX_ADC_Init+0xe4>)
 8007172:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007174:	003a      	movs	r2, r7
 8007176:	4b06      	ldr	r3, [pc, #24]	@ (8007190 <MX_ADC_Init+0xd8>)
 8007178:	0011      	movs	r1, r2
 800717a:	0018      	movs	r0, r3
 800717c:	f008 f966 	bl	800f44c <HAL_ADC_ConfigChannel>
 8007180:	1e03      	subs	r3, r0, #0
 8007182:	d001      	beq.n	8007188 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007184:	f001 f8d6 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007188:	46c0      	nop			@ (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b002      	add	sp, #8
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000d98 	.word	0x20000d98
 8007194:	40012400 	.word	0x40012400
 8007198:	38004000 	.word	0x38004000
 800719c:	3c008000 	.word	0x3c008000

080071a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b089      	sub	sp, #36	@ 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a8:	240c      	movs	r4, #12
 80071aa:	193b      	adds	r3, r7, r4
 80071ac:	0018      	movs	r0, r3
 80071ae:	2314      	movs	r3, #20
 80071b0:	001a      	movs	r2, r3
 80071b2:	2100      	movs	r1, #0
 80071b4:	f019 f8ca 	bl	802034c <memset>
  if(adcHandle->Instance==ADC1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a14      	ldr	r2, [pc, #80]	@ (8007210 <HAL_ADC_MspInit+0x70>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d121      	bne.n	8007206 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80071c2:	4b14      	ldr	r3, [pc, #80]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c6:	4b13      	ldr	r3, [pc, #76]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071c8:	2180      	movs	r1, #128	@ 0x80
 80071ca:	0089      	lsls	r1, r1, #2
 80071cc:	430a      	orrs	r2, r1
 80071ce:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071d0:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071d6:	2104      	movs	r1, #4
 80071d8:	430a      	orrs	r2, r1
 80071da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <HAL_ADC_MspInit+0x74>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	2204      	movs	r2, #4
 80071e2:	4013      	ands	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071e8:	193b      	adds	r3, r7, r4
 80071ea:	2230      	movs	r2, #48	@ 0x30
 80071ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	2203      	movs	r2, #3
 80071f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f4:	193b      	adds	r3, r7, r4
 80071f6:	2200      	movs	r2, #0
 80071f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071fa:	193b      	adds	r3, r7, r4
 80071fc:	4a06      	ldr	r2, [pc, #24]	@ (8007218 <HAL_ADC_MspInit+0x78>)
 80071fe:	0019      	movs	r1, r3
 8007200:	0010      	movs	r0, r2
 8007202:	f008 ff41 	bl	8010088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b009      	add	sp, #36	@ 0x24
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	46c0      	nop			@ (mov r8, r8)
 8007210:	40012400 	.word	0x40012400
 8007214:	40021000 	.word	0x40021000
 8007218:	50000800 	.word	0x50000800

0800721c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007222:	4b10      	ldr	r3, [pc, #64]	@ (8007264 <MX_DMA_Init+0x48>)
 8007224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007226:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <MX_DMA_Init+0x48>)
 8007228:	2101      	movs	r1, #1
 800722a:	430a      	orrs	r2, r1
 800722c:	631a      	str	r2, [r3, #48]	@ 0x30
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <MX_DMA_Init+0x48>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007232:	2201      	movs	r2, #1
 8007234:	4013      	ands	r3, r2
 8007236:	607b      	str	r3, [r7, #4]
 8007238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	200a      	movs	r0, #10
 8007240:	f008 fad0 	bl	800f7e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007244:	200a      	movs	r0, #10
 8007246:	f008 fae2 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800724a:	2200      	movs	r2, #0
 800724c:	2103      	movs	r1, #3
 800724e:	200b      	movs	r0, #11
 8007250:	f008 fac8 	bl	800f7e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007254:	200b      	movs	r0, #11
 8007256:	f008 fada 	bl	800f80e <HAL_NVIC_EnableIRQ>

}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	b002      	add	sp, #8
 8007260:	bd80      	pop	{r7, pc}
 8007262:	46c0      	nop			@ (mov r8, r8)
 8007264:	40021000 	.word	0x40021000

08007268 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b7f      	cmp	r3, #127	@ 0x7f
 8007278:	d901      	bls.n	800727e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800727a:	237f      	movs	r3, #127	@ 0x7f
 800727c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800727e:	2017      	movs	r0, #23
 8007280:	183b      	adds	r3, r7, r0
 8007282:	490d      	ldr	r1, [pc, #52]	@ (80072b8 <accessLUT10log10+0x50>)
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	188a      	adds	r2, r1, r2
 8007288:	7812      	ldrb	r2, [r2, #0]
 800728a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800728c:	0001      	movs	r1, r0
 800728e:	187b      	adds	r3, r7, r1
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2206      	movs	r2, #6
 8007294:	4113      	asrs	r3, r2
 8007296:	001a      	movs	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800729c:	187b      	adds	r3, r7, r1
 800729e:	781a      	ldrb	r2, [r3, #0]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2106      	movs	r1, #6
 80072a6:	408b      	lsls	r3, r1
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	46bd      	mov	sp, r7
 80072b2:	b006      	add	sp, #24
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	080255d0 	.word	0x080255d0

080072bc <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b090      	sub	sp, #64	@ 0x40
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6138      	str	r0, [r7, #16]
 80072c4:	6179      	str	r1, [r7, #20]
 80072c6:	60fa      	str	r2, [r7, #12]
 80072c8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80072ca:	2308      	movs	r3, #8
 80072cc:	001a      	movs	r2, r3
 80072ce:	3a20      	subs	r2, #32
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	db03      	blt.n	80072dc <efficient10log10+0x20>
 80072d4:	2101      	movs	r1, #1
 80072d6:	4091      	lsls	r1, r2
 80072d8:	000d      	movs	r5, r1
 80072da:	e008      	b.n	80072ee <efficient10log10+0x32>
 80072dc:	2220      	movs	r2, #32
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	2101      	movs	r1, #1
 80072e2:	40d1      	lsrs	r1, r2
 80072e4:	000a      	movs	r2, r1
 80072e6:	2100      	movs	r1, #0
 80072e8:	4099      	lsls	r1, r3
 80072ea:	000d      	movs	r5, r1
 80072ec:	4315      	orrs	r5, r2
 80072ee:	2201      	movs	r2, #1
 80072f0:	409a      	lsls	r2, r3
 80072f2:	0014      	movs	r4, r2
 80072f4:	2201      	movs	r2, #1
 80072f6:	4252      	negs	r2, r2
 80072f8:	17d3      	asrs	r3, r2, #31
 80072fa:	1912      	adds	r2, r2, r4
 80072fc:	416b      	adcs	r3, r5
 80072fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007302:	2336      	movs	r3, #54	@ 0x36
 8007304:	2208      	movs	r2, #8
 8007306:	189b      	adds	r3, r3, r2
 8007308:	19db      	adds	r3, r3, r7
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800730e:	e017      	b.n	8007340 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	07db      	lsls	r3, r3, #31
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	0852      	lsrs	r2, r2, #1
 8007318:	603a      	str	r2, [r7, #0]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	431a      	orrs	r2, r3
 800731e:	603a      	str	r2, [r7, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	687c      	ldr	r4, [r7, #4]
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	617c      	str	r4, [r7, #20]
        bShift++;
 800732e:	2136      	movs	r1, #54	@ 0x36
 8007330:	2008      	movs	r0, #8
 8007332:	180b      	adds	r3, r1, r0
 8007334:	19db      	adds	r3, r3, r7
 8007336:	881a      	ldrh	r2, [r3, #0]
 8007338:	180b      	adds	r3, r1, r0
 800733a:	19db      	adds	r3, r3, r7
 800733c:	3201      	adds	r2, #1
 800733e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	429a      	cmp	r2, r3
 8007346:	d8e3      	bhi.n	8007310 <efficient10log10+0x54>
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	429a      	cmp	r2, r3
 800734e:	d103      	bne.n	8007358 <efficient10log10+0x9c>
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	429a      	cmp	r2, r3
 8007356:	d8db      	bhi.n	8007310 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	2308      	movs	r3, #8
 800735c:	3b01      	subs	r3, #1
 800735e:	2101      	movs	r1, #1
 8007360:	4099      	lsls	r1, r3
 8007362:	000b      	movs	r3, r1
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007370:	231c      	movs	r3, #28
 8007372:	2408      	movs	r4, #8
 8007374:	191b      	adds	r3, r3, r4
 8007376:	19da      	adds	r2, r3, r7
 8007378:	2320      	movs	r3, #32
 800737a:	191b      	adds	r3, r3, r4
 800737c:	19d9      	adds	r1, r3, r7
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff ff71 	bl	8007268 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007386:	2215      	movs	r2, #21
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800738c:	2036      	movs	r0, #54	@ 0x36
 800738e:	1902      	adds	r2, r0, r4
 8007390:	19d2      	adds	r2, r2, r7
 8007392:	8812      	ldrh	r2, [r2, #0]
 8007394:	2103      	movs	r1, #3
 8007396:	434a      	muls	r2, r1
 8007398:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800739a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800739c:	0021      	movs	r1, r4
 800739e:	1843      	adds	r3, r0, r1
 80073a0:	19db      	adds	r3, r3, r7
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	4353      	muls	r3, r2
 80073a8:	2203      	movs	r2, #3
 80073aa:	4113      	asrs	r3, r2
 80073ac:	001a      	movs	r2, r3
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80073b2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80073b4:	2314      	movs	r3, #20
 80073b6:	185b      	adds	r3, r3, r1
 80073b8:	19da      	adds	r2, r3, r7
 80073ba:	2318      	movs	r3, #24
 80073bc:	185b      	adds	r3, r3, r1
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	0011      	movs	r1, r2
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 f80a 	bl	80073dc <correctIntFracNumber>
    integerPart[0] = intPart;
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b010      	add	sp, #64	@ 0x40
 80073da:	bdb0      	pop	{r4, r5, r7, pc}

080073dc <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80073e6:	e00a      	b.n	80073fe <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3b0a      	subs	r3, #10
 80073f8:	001a      	movs	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b09      	cmp	r3, #9
 8007404:	dcf0      	bgt.n	80073e8 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007406:	e00a      	b.n	800741e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330a      	adds	r3, #10
 8007418:	001a      	movs	r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3309      	adds	r3, #9
 8007424:	dbf0      	blt.n	8007408 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da0f      	bge.n	800744e <correctIntFracNumber+0x72>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd0b      	ble.n	800744e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3b0a      	subs	r3, #10
 8007446:	001a      	movs	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800744c:	e012      	b.n	8007474 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	dd0e      	ble.n	8007474 <correctIntFracNumber+0x98>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	da0a      	bge.n	8007474 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330a      	adds	r3, #10
 800746e:	001a      	movs	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	46c0      	nop			@ (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b08b      	sub	sp, #44	@ 0x2c
 8007480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007482:	2414      	movs	r4, #20
 8007484:	193b      	adds	r3, r7, r4
 8007486:	0018      	movs	r0, r3
 8007488:	2314      	movs	r3, #20
 800748a:	001a      	movs	r2, r3
 800748c:	2100      	movs	r1, #0
 800748e:	f018 ff5d 	bl	802034c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007492:	4b8a      	ldr	r3, [pc, #552]	@ (80076bc <MX_GPIO_Init+0x240>)
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	4b89      	ldr	r3, [pc, #548]	@ (80076bc <MX_GPIO_Init+0x240>)
 8007498:	2104      	movs	r1, #4
 800749a:	430a      	orrs	r2, r1
 800749c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800749e:	4b87      	ldr	r3, [pc, #540]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	2204      	movs	r2, #4
 80074a4:	4013      	ands	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074aa:	4b84      	ldr	r3, [pc, #528]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	4b83      	ldr	r3, [pc, #524]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074b0:	2180      	movs	r1, #128	@ 0x80
 80074b2:	430a      	orrs	r2, r1
 80074b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074b6:	4b81      	ldr	r3, [pc, #516]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	2280      	movs	r2, #128	@ 0x80
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c2:	4b7e      	ldr	r3, [pc, #504]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c6:	4b7d      	ldr	r3, [pc, #500]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074c8:	2101      	movs	r1, #1
 80074ca:	430a      	orrs	r2, r1
 80074cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074ce:	4b7b      	ldr	r3, [pc, #492]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	2201      	movs	r2, #1
 80074d4:	4013      	ands	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074da:	4b78      	ldr	r3, [pc, #480]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074de:	4b77      	ldr	r3, [pc, #476]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074e0:	2102      	movs	r1, #2
 80074e2:	430a      	orrs	r2, r1
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074e6:	4b75      	ldr	r3, [pc, #468]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	2202      	movs	r2, #2
 80074ec:	4013      	ands	r3, r2
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074f2:	4b72      	ldr	r3, [pc, #456]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f6:	4b71      	ldr	r3, [pc, #452]	@ (80076bc <MX_GPIO_Init+0x240>)
 80074f8:	2108      	movs	r1, #8
 80074fa:	430a      	orrs	r2, r1
 80074fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074fe:	4b6f      	ldr	r3, [pc, #444]	@ (80076bc <MX_GPIO_Init+0x240>)
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	2208      	movs	r2, #8
 8007504:	4013      	ands	r3, r2
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800750a:	4b6d      	ldr	r3, [pc, #436]	@ (80076c0 <MX_GPIO_Init+0x244>)
 800750c:	2201      	movs	r2, #1
 800750e:	2101      	movs	r1, #1
 8007510:	0018      	movs	r0, r3
 8007512:	f008 ff54 	bl	80103be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007516:	4b6a      	ldr	r3, [pc, #424]	@ (80076c0 <MX_GPIO_Init+0x244>)
 8007518:	2200      	movs	r2, #0
 800751a:	2102      	movs	r1, #2
 800751c:	0018      	movs	r0, r3
 800751e:	f008 ff4e 	bl	80103be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007522:	4968      	ldr	r1, [pc, #416]	@ (80076c4 <MX_GPIO_Init+0x248>)
 8007524:	4b68      	ldr	r3, [pc, #416]	@ (80076c8 <MX_GPIO_Init+0x24c>)
 8007526:	2201      	movs	r2, #1
 8007528:	0018      	movs	r0, r3
 800752a:	f008 ff48 	bl	80103be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800752e:	2380      	movs	r3, #128	@ 0x80
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	4866      	ldr	r0, [pc, #408]	@ (80076cc <MX_GPIO_Init+0x250>)
 8007534:	2201      	movs	r2, #1
 8007536:	0019      	movs	r1, r3
 8007538:	f008 ff41 	bl	80103be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800753c:	2380      	movs	r3, #128	@ 0x80
 800753e:	015b      	lsls	r3, r3, #5
 8007540:	4862      	ldr	r0, [pc, #392]	@ (80076cc <MX_GPIO_Init+0x250>)
 8007542:	2200      	movs	r2, #0
 8007544:	0019      	movs	r1, r3
 8007546:	f008 ff3a 	bl	80103be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800754a:	193b      	adds	r3, r7, r4
 800754c:	4a60      	ldr	r2, [pc, #384]	@ (80076d0 <MX_GPIO_Init+0x254>)
 800754e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007550:	193b      	adds	r3, r7, r4
 8007552:	2203      	movs	r2, #3
 8007554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007556:	193b      	adds	r3, r7, r4
 8007558:	2200      	movs	r2, #0
 800755a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800755c:	193b      	adds	r3, r7, r4
 800755e:	4a5b      	ldr	r2, [pc, #364]	@ (80076cc <MX_GPIO_Init+0x250>)
 8007560:	0019      	movs	r1, r3
 8007562:	0010      	movs	r0, r2
 8007564:	f008 fd90 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007568:	193b      	adds	r3, r7, r4
 800756a:	2203      	movs	r2, #3
 800756c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800756e:	193b      	adds	r3, r7, r4
 8007570:	2201      	movs	r2, #1
 8007572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007574:	193b      	adds	r3, r7, r4
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800757a:	193b      	adds	r3, r7, r4
 800757c:	2200      	movs	r2, #0
 800757e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007580:	193b      	adds	r3, r7, r4
 8007582:	4a4f      	ldr	r2, [pc, #316]	@ (80076c0 <MX_GPIO_Init+0x244>)
 8007584:	0019      	movs	r1, r3
 8007586:	0010      	movs	r0, r2
 8007588:	f008 fd7e 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2270      	movs	r2, #112	@ 0x70
 8007590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007592:	193b      	adds	r3, r7, r4
 8007594:	2203      	movs	r2, #3
 8007596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007598:	193b      	adds	r3, r7, r4
 800759a:	2200      	movs	r2, #0
 800759c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800759e:	193a      	adds	r2, r7, r4
 80075a0:	23a0      	movs	r3, #160	@ 0xa0
 80075a2:	05db      	lsls	r3, r3, #23
 80075a4:	0011      	movs	r1, r2
 80075a6:	0018      	movs	r0, r3
 80075a8:	f008 fd6e 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	22c0      	movs	r2, #192	@ 0xc0
 80075b0:	0052      	lsls	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075b4:	193b      	adds	r3, r7, r4
 80075b6:	2200      	movs	r2, #0
 80075b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ba:	193b      	adds	r3, r7, r4
 80075bc:	2200      	movs	r2, #0
 80075be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c0:	193a      	adds	r2, r7, r4
 80075c2:	23a0      	movs	r3, #160	@ 0xa0
 80075c4:	05db      	lsls	r3, r3, #23
 80075c6:	0011      	movs	r1, r2
 80075c8:	0018      	movs	r0, r3
 80075ca:	f008 fd5d 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80075ce:	193b      	adds	r3, r7, r4
 80075d0:	4a3c      	ldr	r2, [pc, #240]	@ (80076c4 <MX_GPIO_Init+0x248>)
 80075d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075d4:	193b      	adds	r3, r7, r4
 80075d6:	2201      	movs	r2, #1
 80075d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	2200      	movs	r2, #0
 80075de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e0:	193b      	adds	r3, r7, r4
 80075e2:	2200      	movs	r2, #0
 80075e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	4a37      	ldr	r2, [pc, #220]	@ (80076c8 <MX_GPIO_Init+0x24c>)
 80075ea:	0019      	movs	r1, r3
 80075ec:	0010      	movs	r0, r2
 80075ee:	f008 fd4b 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	4a37      	ldr	r2, [pc, #220]	@ (80076d4 <MX_GPIO_Init+0x258>)
 80075f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075f8:	193b      	adds	r3, r7, r4
 80075fa:	2203      	movs	r2, #3
 80075fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	193b      	adds	r3, r7, r4
 8007600:	2200      	movs	r2, #0
 8007602:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007604:	193b      	adds	r3, r7, r4
 8007606:	4a30      	ldr	r2, [pc, #192]	@ (80076c8 <MX_GPIO_Init+0x24c>)
 8007608:	0019      	movs	r1, r3
 800760a:	0010      	movs	r0, r2
 800760c:	f008 fd3c 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007610:	0021      	movs	r1, r4
 8007612:	187b      	adds	r3, r7, r1
 8007614:	2280      	movs	r2, #128	@ 0x80
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800761a:	000c      	movs	r4, r1
 800761c:	193b      	adds	r3, r7, r4
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	193b      	adds	r3, r7, r4
 8007624:	2200      	movs	r2, #0
 8007626:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007628:	193b      	adds	r3, r7, r4
 800762a:	4a28      	ldr	r2, [pc, #160]	@ (80076cc <MX_GPIO_Init+0x250>)
 800762c:	0019      	movs	r1, r3
 800762e:	0010      	movs	r0, r2
 8007630:	f008 fd2a 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007634:	193b      	adds	r3, r7, r4
 8007636:	2280      	movs	r2, #128	@ 0x80
 8007638:	0212      	lsls	r2, r2, #8
 800763a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800763c:	193b      	adds	r3, r7, r4
 800763e:	2288      	movs	r2, #136	@ 0x88
 8007640:	0352      	lsls	r2, r2, #13
 8007642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007644:	193b      	adds	r3, r7, r4
 8007646:	2200      	movs	r2, #0
 8007648:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800764a:	193a      	adds	r2, r7, r4
 800764c:	23a0      	movs	r3, #160	@ 0xa0
 800764e:	05db      	lsls	r3, r3, #23
 8007650:	0011      	movs	r1, r2
 8007652:	0018      	movs	r0, r3
 8007654:	f008 fd18 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007658:	0021      	movs	r1, r4
 800765a:	187b      	adds	r3, r7, r1
 800765c:	22c0      	movs	r2, #192	@ 0xc0
 800765e:	0152      	lsls	r2, r2, #5
 8007660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007662:	000c      	movs	r4, r1
 8007664:	193b      	adds	r3, r7, r4
 8007666:	2201      	movs	r2, #1
 8007668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766a:	193b      	adds	r3, r7, r4
 800766c:	2200      	movs	r2, #0
 800766e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007670:	193b      	adds	r3, r7, r4
 8007672:	2200      	movs	r2, #0
 8007674:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007676:	193b      	adds	r3, r7, r4
 8007678:	4a14      	ldr	r2, [pc, #80]	@ (80076cc <MX_GPIO_Init+0x250>)
 800767a:	0019      	movs	r1, r3
 800767c:	0010      	movs	r0, r2
 800767e:	f008 fd03 	bl	8010088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007682:	0021      	movs	r1, r4
 8007684:	187b      	adds	r3, r7, r1
 8007686:	2204      	movs	r2, #4
 8007688:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800768a:	187b      	adds	r3, r7, r1
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007690:	187b      	adds	r3, r7, r1
 8007692:	2201      	movs	r2, #1
 8007694:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007696:	187b      	adds	r3, r7, r1
 8007698:	4a0f      	ldr	r2, [pc, #60]	@ (80076d8 <MX_GPIO_Init+0x25c>)
 800769a:	0019      	movs	r1, r3
 800769c:	0010      	movs	r0, r2
 800769e:	f008 fcf3 	bl	8010088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	2007      	movs	r0, #7
 80076a8:	f008 f89c 	bl	800f7e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80076ac:	2007      	movs	r0, #7
 80076ae:	f008 f8ae 	bl	800f80e <HAL_NVIC_EnableIRQ>

}
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b00b      	add	sp, #44	@ 0x2c
 80076b8:	bd90      	pop	{r4, r7, pc}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	40021000 	.word	0x40021000
 80076c0:	50001c00 	.word	0x50001c00
 80076c4:	00000301 	.word	0x00000301
 80076c8:	50000400 	.word	0x50000400
 80076cc:	50000800 	.word	0x50000800
 80076d0:	0000200c 	.word	0x0000200c
 80076d4:	0000403e 	.word	0x0000403e
 80076d8:	50000c00 	.word	0x50000c00

080076dc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2100      	movs	r1, #0
 80076ea:	0018      	movs	r0, r3
 80076ec:	f00f fa42 	bl	8016b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2108      	movs	r1, #8
 80076f4:	0018      	movs	r0, r3
 80076f6:	f00f fa3d 	bl	8016b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	210c      	movs	r1, #12
 80076fe:	0018      	movs	r0, r3
 8007700:	f00f fa38 	bl	8016b74 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007704:	2380      	movs	r3, #128	@ 0x80
 8007706:	05db      	lsls	r3, r3, #23
 8007708:	22fa      	movs	r2, #250	@ 0xfa
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800770e:	2380      	movs	r3, #128	@ 0x80
 8007710:	05db      	lsls	r3, r3, #23
 8007712:	22fa      	movs	r2, #250	@ 0xfa
 8007714:	0112      	lsls	r2, r2, #4
 8007716:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007718:	2380      	movs	r3, #128	@ 0x80
 800771a:	05db      	lsls	r3, r3, #23
 800771c:	22fa      	movs	r2, #250	@ 0xfa
 800771e:	0112      	lsls	r2, r2, #4
 8007720:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007722:	2380      	movs	r3, #128	@ 0x80
 8007724:	05db      	lsls	r3, r3, #23
 8007726:	22fa      	movs	r2, #250	@ 0xfa
 8007728:	0112      	lsls	r2, r2, #4
 800772a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2100      	movs	r1, #0
 8007730:	0018      	movs	r0, r3
 8007732:	f00f fa1f 	bl	8016b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2104      	movs	r1, #4
 800773a:	0018      	movs	r0, r3
 800773c:	f00f fa1a 	bl	8016b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2108      	movs	r1, #8
 8007744:	0018      	movs	r0, r3
 8007746:	f00f fa15 	bl	8016b74 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800774a:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 800774c:	22fa      	movs	r2, #250	@ 0xfa
 800774e:	0112      	lsls	r2, r2, #4
 8007750:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007752:	4b08      	ldr	r3, [pc, #32]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 8007754:	22fa      	movs	r2, #250	@ 0xfa
 8007756:	0112      	lsls	r2, r2, #4
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800775a:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 800775c:	22fa      	movs	r2, #250	@ 0xfa
 800775e:	0112      	lsls	r2, r2, #4
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007762:	4b04      	ldr	r3, [pc, #16]	@ (8007774 <GPIO_InitPWMLEDs+0x98>)
 8007764:	22fa      	movs	r2, #250	@ 0xfa
 8007766:	0112      	lsls	r2, r2, #4
 8007768:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b002      	add	sp, #8
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	40000400 	.word	0x40000400

08007778 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	0018      	movs	r0, r3
 8007782:	2314      	movs	r3, #20
 8007784:	001a      	movs	r2, r3
 8007786:	2100      	movs	r1, #0
 8007788:	f018 fde0 	bl	802034c <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	2205      	movs	r2, #5
 8007790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007792:	1d3b      	adds	r3, r7, #4
 8007794:	2203      	movs	r2, #3
 8007796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007798:	1d3b      	adds	r3, r7, #4
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800779e:	1d3a      	adds	r2, r7, #4
 80077a0:	23a0      	movs	r3, #160	@ 0xa0
 80077a2:	05db      	lsls	r3, r3, #23
 80077a4:	0011      	movs	r1, r2
 80077a6:	0018      	movs	r0, r3
 80077a8:	f008 fc6e 	bl	8010088 <HAL_GPIO_Init>
}
 80077ac:	46c0      	nop			@ (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b006      	add	sp, #24
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077ba:	4a1c      	ldr	r2, [pc, #112]	@ (800782c <MX_I2C1_Init+0x78>)
 80077bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80077be:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007830 <MX_I2C1_Init+0x7c>)
 80077c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80077c4:	4b18      	ldr	r3, [pc, #96]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077ca:	4b17      	ldr	r3, [pc, #92]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077d0:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077d6:	4b14      	ldr	r3, [pc, #80]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077d8:	2200      	movs	r2, #0
 80077da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077dc:	4b12      	ldr	r3, [pc, #72]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077de:	2200      	movs	r2, #0
 80077e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077e2:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <MX_I2C1_Init+0x74>)
 80077f0:	0018      	movs	r0, r3
 80077f2:	f008 fe1d 	bl	8010430 <HAL_I2C_Init>
 80077f6:	1e03      	subs	r3, r0, #0
 80077f8:	d001      	beq.n	80077fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077fa:	f000 fd9b 	bl	8008334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <MX_I2C1_Init+0x74>)
 8007800:	2100      	movs	r1, #0
 8007802:	0018      	movs	r0, r3
 8007804:	f00b f9ee 	bl	8012be4 <HAL_I2CEx_ConfigAnalogFilter>
 8007808:	1e03      	subs	r3, r0, #0
 800780a:	d001      	beq.n	8007810 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800780c:	f000 fd92 	bl	8008334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <MX_I2C1_Init+0x74>)
 8007812:	2100      	movs	r1, #0
 8007814:	0018      	movs	r0, r3
 8007816:	f00b fa31 	bl	8012c7c <HAL_I2CEx_ConfigDigitalFilter>
 800781a:	1e03      	subs	r3, r0, #0
 800781c:	d001      	beq.n	8007822 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800781e:	f000 fd89 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000df4 	.word	0x20000df4
 800782c:	40005400 	.word	0x40005400
 8007830:	00503d58 	.word	0x00503d58

08007834 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007838:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800783a:	4a1c      	ldr	r2, [pc, #112]	@ (80078ac <MX_I2C2_Init+0x78>)
 800783c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800783e:	4b1a      	ldr	r3, [pc, #104]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007840:	4a1b      	ldr	r2, [pc, #108]	@ (80078b0 <MX_I2C2_Init+0x7c>)
 8007842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007844:	4b18      	ldr	r3, [pc, #96]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800784a:	4b17      	ldr	r3, [pc, #92]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800784c:	2201      	movs	r2, #1
 800784e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007850:	4b15      	ldr	r3, [pc, #84]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007852:	2200      	movs	r2, #0
 8007854:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007856:	4b14      	ldr	r3, [pc, #80]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007858:	2200      	movs	r2, #0
 800785a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800785e:	2200      	movs	r2, #0
 8007860:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007862:	4b11      	ldr	r3, [pc, #68]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007864:	2200      	movs	r2, #0
 8007866:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007868:	4b0f      	ldr	r3, [pc, #60]	@ (80078a8 <MX_I2C2_Init+0x74>)
 800786a:	2200      	movs	r2, #0
 800786c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800786e:	4b0e      	ldr	r3, [pc, #56]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007870:	0018      	movs	r0, r3
 8007872:	f008 fddd 	bl	8010430 <HAL_I2C_Init>
 8007876:	1e03      	subs	r3, r0, #0
 8007878:	d001      	beq.n	800787e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800787a:	f000 fd5b 	bl	8008334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800787e:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007880:	2100      	movs	r1, #0
 8007882:	0018      	movs	r0, r3
 8007884:	f00b f9ae 	bl	8012be4 <HAL_I2CEx_ConfigAnalogFilter>
 8007888:	1e03      	subs	r3, r0, #0
 800788a:	d001      	beq.n	8007890 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800788c:	f000 fd52 	bl	8008334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007890:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <MX_I2C2_Init+0x74>)
 8007892:	2100      	movs	r1, #0
 8007894:	0018      	movs	r0, r3
 8007896:	f00b f9f1 	bl	8012c7c <HAL_I2CEx_ConfigDigitalFilter>
 800789a:	1e03      	subs	r3, r0, #0
 800789c:	d001      	beq.n	80078a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800789e:	f000 fd49 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000e48 	.word	0x20000e48
 80078ac:	40005800 	.word	0x40005800
 80078b0:	00503d58 	.word	0x00503d58

080078b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b08b      	sub	sp, #44	@ 0x2c
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078bc:	2414      	movs	r4, #20
 80078be:	193b      	adds	r3, r7, r4
 80078c0:	0018      	movs	r0, r3
 80078c2:	2314      	movs	r3, #20
 80078c4:	001a      	movs	r2, r3
 80078c6:	2100      	movs	r1, #0
 80078c8:	f018 fd40 	bl	802034c <memset>
  if(i2cHandle->Instance==I2C1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a48 <HAL_I2C_MspInit+0x194>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d000      	beq.n	80078d8 <HAL_I2C_MspInit+0x24>
 80078d6:	e083      	b.n	80079e0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078d8:	4b5c      	ldr	r3, [pc, #368]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80078da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078dc:	4b5b      	ldr	r3, [pc, #364]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80078de:	2102      	movs	r1, #2
 80078e0:	430a      	orrs	r2, r1
 80078e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078e4:	4b59      	ldr	r3, [pc, #356]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	2202      	movs	r2, #2
 80078ea:	4013      	ands	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078f0:	0021      	movs	r1, r4
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	22c0      	movs	r2, #192	@ 0xc0
 80078f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	2212      	movs	r2, #18
 80078fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	2200      	movs	r2, #0
 8007902:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007904:	187b      	adds	r3, r7, r1
 8007906:	2203      	movs	r2, #3
 8007908:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800790a:	187b      	adds	r3, r7, r1
 800790c:	2201      	movs	r2, #1
 800790e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007910:	187b      	adds	r3, r7, r1
 8007912:	4a4f      	ldr	r2, [pc, #316]	@ (8007a50 <HAL_I2C_MspInit+0x19c>)
 8007914:	0019      	movs	r1, r3
 8007916:	0010      	movs	r0, r2
 8007918:	f008 fbb6 	bl	8010088 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800791c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 800791e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007920:	4b4a      	ldr	r3, [pc, #296]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 8007922:	2180      	movs	r1, #128	@ 0x80
 8007924:	0389      	lsls	r1, r1, #14
 8007926:	430a      	orrs	r2, r1
 8007928:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800792a:	4b4a      	ldr	r3, [pc, #296]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800792c:	4a4a      	ldr	r2, [pc, #296]	@ (8007a58 <HAL_I2C_MspInit+0x1a4>)
 800792e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007930:	4b48      	ldr	r3, [pc, #288]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007932:	2206      	movs	r2, #6
 8007934:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007936:	4b47      	ldr	r3, [pc, #284]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007938:	2200      	movs	r2, #0
 800793a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800793c:	4b45      	ldr	r3, [pc, #276]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800793e:	2200      	movs	r2, #0
 8007940:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007942:	4b44      	ldr	r3, [pc, #272]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007944:	2280      	movs	r2, #128	@ 0x80
 8007946:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007948:	4b42      	ldr	r3, [pc, #264]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800794a:	2200      	movs	r2, #0
 800794c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800794e:	4b41      	ldr	r3, [pc, #260]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007950:	2200      	movs	r2, #0
 8007952:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007954:	4b3f      	ldr	r3, [pc, #252]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007956:	2200      	movs	r2, #0
 8007958:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800795a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 800795c:	2200      	movs	r2, #0
 800795e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007960:	4b3c      	ldr	r3, [pc, #240]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007962:	0018      	movs	r0, r3
 8007964:	f007 ff74 	bl	800f850 <HAL_DMA_Init>
 8007968:	1e03      	subs	r3, r0, #0
 800796a:	d001      	beq.n	8007970 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800796c:	f000 fce2 	bl	8008334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a38      	ldr	r2, [pc, #224]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007974:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007976:	4b37      	ldr	r3, [pc, #220]	@ (8007a54 <HAL_I2C_MspInit+0x1a0>)
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800797c:	4b37      	ldr	r3, [pc, #220]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 800797e:	4a38      	ldr	r2, [pc, #224]	@ (8007a60 <HAL_I2C_MspInit+0x1ac>)
 8007980:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007982:	4b36      	ldr	r3, [pc, #216]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 8007984:	2206      	movs	r2, #6
 8007986:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007988:	4b34      	ldr	r3, [pc, #208]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 800798a:	2210      	movs	r2, #16
 800798c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800798e:	4b33      	ldr	r3, [pc, #204]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 8007990:	2200      	movs	r2, #0
 8007992:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007994:	4b31      	ldr	r3, [pc, #196]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 8007996:	2280      	movs	r2, #128	@ 0x80
 8007998:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800799a:	4b30      	ldr	r3, [pc, #192]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 800799c:	2200      	movs	r2, #0
 800799e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079a0:	4b2e      	ldr	r3, [pc, #184]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80079a6:	4b2d      	ldr	r3, [pc, #180]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079ac:	4b2b      	ldr	r3, [pc, #172]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80079b2:	4b2a      	ldr	r3, [pc, #168]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079b4:	0018      	movs	r0, r3
 80079b6:	f007 ff4b 	bl	800f850 <HAL_DMA_Init>
 80079ba:	1e03      	subs	r3, r0, #0
 80079bc:	d001      	beq.n	80079c2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80079be:	f000 fcb9 	bl	8008334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a25      	ldr	r2, [pc, #148]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80079c8:	4b24      	ldr	r3, [pc, #144]	@ (8007a5c <HAL_I2C_MspInit+0x1a8>)
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80079ce:	2200      	movs	r2, #0
 80079d0:	2100      	movs	r1, #0
 80079d2:	2017      	movs	r0, #23
 80079d4:	f007 ff06 	bl	800f7e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80079d8:	2017      	movs	r0, #23
 80079da:	f007 ff18 	bl	800f80e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079de:	e02e      	b.n	8007a3e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007a64 <HAL_I2C_MspInit+0x1b0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d129      	bne.n	8007a3e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ea:	4b18      	ldr	r3, [pc, #96]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80079ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ee:	4b17      	ldr	r3, [pc, #92]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80079f0:	2102      	movs	r1, #2
 80079f2:	430a      	orrs	r2, r1
 80079f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079f6:	4b15      	ldr	r3, [pc, #84]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	2202      	movs	r2, #2
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007a02:	2114      	movs	r1, #20
 8007a04:	187b      	adds	r3, r7, r1
 8007a06:	22c0      	movs	r2, #192	@ 0xc0
 8007a08:	0112      	lsls	r2, r2, #4
 8007a0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	2212      	movs	r2, #18
 8007a10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	2200      	movs	r2, #0
 8007a16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	2206      	movs	r2, #6
 8007a22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	4a0a      	ldr	r2, [pc, #40]	@ (8007a50 <HAL_I2C_MspInit+0x19c>)
 8007a28:	0019      	movs	r1, r3
 8007a2a:	0010      	movs	r0, r2
 8007a2c:	f008 fb2c 	bl	8010088 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 8007a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a34:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <HAL_I2C_MspInit+0x198>)
 8007a36:	2180      	movs	r1, #128	@ 0x80
 8007a38:	03c9      	lsls	r1, r1, #15
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b00b      	add	sp, #44	@ 0x2c
 8007a44:	bd90      	pop	{r4, r7, pc}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	40005400 	.word	0x40005400
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	50000400 	.word	0x50000400
 8007a54:	20000e9c 	.word	0x20000e9c
 8007a58:	40020030 	.word	0x40020030
 8007a5c:	20000ee4 	.word	0x20000ee4
 8007a60:	4002001c 	.word	0x4002001c
 8007a64:	40005800 	.word	0x40005800

08007a68 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a6c:	4b10      	ldr	r3, [pc, #64]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a6e:	4a11      	ldr	r2, [pc, #68]	@ (8007ab4 <MX_I2S2_Init+0x4c>)
 8007a70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a74:	22c0      	movs	r2, #192	@ 0xc0
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a82:	2203      	movs	r2, #3
 8007a84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a86:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a8c:	4b08      	ldr	r3, [pc, #32]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a8e:	22fa      	movs	r2, #250	@ 0xfa
 8007a90:	0192      	lsls	r2, r2, #6
 8007a92:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a94:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a9a:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <MX_I2S2_Init+0x48>)
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f00b f939 	bl	8012d14 <HAL_I2S_Init>
 8007aa2:	1e03      	subs	r3, r0, #0
 8007aa4:	d001      	beq.n	8007aaa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007aa6:	f000 fc45 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000f2c 	.word	0x20000f2c
 8007ab4:	40003800 	.word	0x40003800

08007ab8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b089      	sub	sp, #36	@ 0x24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac0:	240c      	movs	r4, #12
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	2314      	movs	r3, #20
 8007ac8:	001a      	movs	r2, r3
 8007aca:	2100      	movs	r1, #0
 8007acc:	f018 fc3e 	bl	802034c <memset>
  if(i2sHandle->Instance==SPI2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b8c <HAL_I2S_MspInit+0xd4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d154      	bne.n	8007b84 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ada:	4b2d      	ldr	r3, [pc, #180]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ade:	4b2c      	ldr	r3, [pc, #176]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007ae0:	2180      	movs	r1, #128	@ 0x80
 8007ae2:	01c9      	lsls	r1, r1, #7
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ae8:	4b29      	ldr	r3, [pc, #164]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aec:	4b28      	ldr	r3, [pc, #160]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007aee:	2102      	movs	r1, #2
 8007af0:	430a      	orrs	r2, r1
 8007af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007af4:	4b26      	ldr	r3, [pc, #152]	@ (8007b90 <HAL_I2S_MspInit+0xd8>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af8:	2202      	movs	r2, #2
 8007afa:	4013      	ands	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007b00:	193b      	adds	r3, r7, r4
 8007b02:	22b0      	movs	r2, #176	@ 0xb0
 8007b04:	0212      	lsls	r2, r2, #8
 8007b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b08:	0021      	movs	r1, r4
 8007b0a:	187b      	adds	r3, r7, r1
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	2200      	movs	r2, #0
 8007b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	2200      	movs	r2, #0
 8007b1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007b1c:	187b      	adds	r3, r7, r1
 8007b1e:	2200      	movs	r2, #0
 8007b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <HAL_I2S_MspInit+0xdc>)
 8007b26:	0019      	movs	r1, r3
 8007b28:	0010      	movs	r0, r2
 8007b2a:	f008 faad 	bl	8010088 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b30:	4a1a      	ldr	r2, [pc, #104]	@ (8007b9c <HAL_I2S_MspInit+0xe4>)
 8007b32:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007b34:	4b18      	ldr	r3, [pc, #96]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b36:	2202      	movs	r2, #2
 8007b38:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b3a:	4b17      	ldr	r3, [pc, #92]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b40:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b48:	2280      	movs	r2, #128	@ 0x80
 8007b4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b4e:	2280      	movs	r2, #128	@ 0x80
 8007b50:	0052      	lsls	r2, r2, #1
 8007b52:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b54:	4b10      	ldr	r3, [pc, #64]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b56:	2280      	movs	r2, #128	@ 0x80
 8007b58:	00d2      	lsls	r2, r2, #3
 8007b5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b5e:	2220      	movs	r2, #32
 8007b60:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b68:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f007 fe70 	bl	800f850 <HAL_DMA_Init>
 8007b70:	1e03      	subs	r3, r0, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b74:	f000 fbde 	bl	8008334 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a07      	ldr	r2, [pc, #28]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <HAL_I2S_MspInit+0xe0>)
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b84:	46c0      	nop			@ (mov r8, r8)
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b009      	add	sp, #36	@ 0x24
 8007b8a:	bd90      	pop	{r4, r7, pc}
 8007b8c:	40003800 	.word	0x40003800
 8007b90:	40021000 	.word	0x40021000
 8007b94:	50000400 	.word	0x50000400
 8007b98:	20000f68 	.word	0x20000f68
 8007b9c:	40020044 	.word	0x40020044

08007ba0 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  testDone = true;
 8007ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8007c20 <SetTestDone+0x80>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007baa:	23fa      	movs	r3, #250	@ 0xfa
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f007 f97e 	bl	800eeb0 <HAL_Delay>
  SetDBLED(false, false, true);
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f005 fb2d 	bl	800d218 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007bbe:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <SetTestDone+0x84>)
 8007bc0:	23fa      	movs	r3, #250	@ 0xfa
 8007bc2:	0119      	lsls	r1, r3, #4
 8007bc4:	23fa      	movs	r3, #250	@ 0xfa
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f005 faf1 	bl	800d1b0 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007bce:	4a15      	ldr	r2, [pc, #84]	@ (8007c24 <SetTestDone+0x84>)
 8007bd0:	23fa      	movs	r3, #250	@ 0xfa
 8007bd2:	0119      	lsls	r1, r3, #4
 8007bd4:	23fa      	movs	r3, #250	@ 0xfa
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f005 fb67 	bl	800d2ac <SetVocLED>
  HAL_Delay(500);
 8007bde:	23fa      	movs	r3, #250	@ 0xfa
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	0018      	movs	r0, r3
 8007be4:	f007 f964 	bl	800eeb0 <HAL_Delay>
  SetDBLED(false, false, false);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	2000      	movs	r0, #0
 8007bee:	f005 fb13 	bl	800d218 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007bf2:	23fa      	movs	r3, #250	@ 0xfa
 8007bf4:	011a      	lsls	r2, r3, #4
 8007bf6:	23fa      	movs	r3, #250	@ 0xfa
 8007bf8:	0119      	lsls	r1, r3, #4
 8007bfa:	23fa      	movs	r3, #250	@ 0xfa
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f005 fad6 	bl	800d1b0 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007c04:	23fa      	movs	r3, #250	@ 0xfa
 8007c06:	011a      	lsls	r2, r3, #4
 8007c08:	23fa      	movs	r3, #250	@ 0xfa
 8007c0a:	0119      	lsls	r1, r3, #4
 8007c0c:	23fa      	movs	r3, #250	@ 0xfa
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	0018      	movs	r0, r3
 8007c12:	f005 fb4b 	bl	800d2ac <SetVocLED>
  InitDone();
 8007c16:	f005 fa1f 	bl	800d058 <InitDone>
}
 8007c1a:	46c0      	nop			@ (mov r8, r8)
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000fb0 	.word	0x20000fb0
 8007c24:	00000bb8 	.word	0x00000bb8

08007c28 <FlashLEDs>:

void FlashLEDs(){
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007c2e:	1dfb      	adds	r3, r7, #7
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	e021      	b.n	8007c7a <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007c36:	2201      	movs	r2, #1
 8007c38:	2101      	movs	r1, #1
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	f005 faec 	bl	800d218 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007c40:	4a12      	ldr	r2, [pc, #72]	@ (8007c8c <FlashLEDs+0x64>)
 8007c42:	23fa      	movs	r3, #250	@ 0xfa
 8007c44:	0119      	lsls	r1, r3, #4
 8007c46:	23fa      	movs	r3, #250	@ 0xfa
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f005 fab0 	bl	800d1b0 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c50:	4a0e      	ldr	r2, [pc, #56]	@ (8007c8c <FlashLEDs+0x64>)
 8007c52:	23fa      	movs	r3, #250	@ 0xfa
 8007c54:	0119      	lsls	r1, r3, #4
 8007c56:	23fa      	movs	r3, #250	@ 0xfa
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f005 fb26 	bl	800d2ac <SetVocLED>
    HAL_Delay(250);
 8007c60:	20fa      	movs	r0, #250	@ 0xfa
 8007c62:	f007 f925 	bl	800eeb0 <HAL_Delay>
    SetLEDsOff();
 8007c66:	f005 fc61 	bl	800d52c <SetLEDsOff>
    HAL_Delay(250);
 8007c6a:	20fa      	movs	r0, #250	@ 0xfa
 8007c6c:	f007 f920 	bl	800eeb0 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c70:	1dfb      	adds	r3, r7, #7
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	1dfb      	adds	r3, r7, #7
 8007c76:	3201      	adds	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	1dfb      	adds	r3, r7, #7
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d9d9      	bls.n	8007c36 <FlashLEDs+0xe>
  }
}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	46c0      	nop			@ (mov r8, r8)
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b002      	add	sp, #8
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	00000bb8 	.word	0x00000bb8

08007c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c96:	f007 f89b 	bl	800edd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c9a:	f000 fa05 	bl	80080a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c9e:	f7ff fbed 	bl	800747c <MX_GPIO_Init>
  MX_DMA_Init();
 8007ca2:	f7ff fabb 	bl	800721c <MX_DMA_Init>
  MX_I2C1_Init();
 8007ca6:	f7ff fd85 	bl	80077b4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007caa:	f7ff fedd 	bl	8007a68 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007cae:	f006 fac3 	bl	800e238 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007cb2:	f7ff fdbf 	bl	8007834 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007cb6:	f006 f8b7 	bl	800de28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007cba:	f006 f929 	bl	800df10 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007cbe:	f006 faef 	bl	800e2a0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007cc2:	f7ff f9f9 	bl	80070b8 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007cc6:	f015 f84f 	bl	801cd68 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007cca:	f001 f943 	bl	8008f54 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007cce:	f006 fa7d 	bl	800e1cc <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007cd2:	f006 f99b 	bl	800e00c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007cd6:	4acd      	ldr	r2, [pc, #820]	@ (800800c <main+0x37c>)
 8007cd8:	4bcd      	ldr	r3, [pc, #820]	@ (8008010 <main+0x380>)
 8007cda:	0011      	movs	r1, r2
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7ff fcfd 	bl	80076dc <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8007ce2:	f006 fd1f 	bl	800e724 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8007ce6:	f005 ff29 	bl	800db3c <Battery_Upkeep>
 8007cea:	0003      	movs	r3, r0
 8007cec:	001a      	movs	r2, r3
 8007cee:	4bc9      	ldr	r3, [pc, #804]	@ (8008014 <main+0x384>)
 8007cf0:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8007cf2:	4bc8      	ldr	r3, [pc, #800]	@ (8008014 <main+0x384>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d113      	bne.n	8007d22 <main+0x92>
    SetAllREDLED();
 8007cfa:	f005 fc33 	bl	800d564 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007cfe:	f7fe fb03 	bl	8006308 <ReadBatteryVoltage>
 8007d02:	1c03      	adds	r3, r0, #0
 8007d04:	1c18      	adds	r0, r3, #0
 8007d06:	f7fb fbad 	bl	8003464 <__aeabi_f2d>
 8007d0a:	0002      	movs	r2, r0
 8007d0c:	000b      	movs	r3, r1
 8007d0e:	48c2      	ldr	r0, [pc, #776]	@ (8008018 <main+0x388>)
 8007d10:	49c2      	ldr	r1, [pc, #776]	@ (800801c <main+0x38c>)
 8007d12:	9200      	str	r2, [sp, #0]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	0002      	movs	r2, r0
 8007d18:	2002      	movs	r0, #2
 8007d1a:	f006 fc7f 	bl	800e61c <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8007d1e:	f7fe ff05 	bl	8006b2c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8007d22:	f7fe fbc7 	bl	80064b4 <UserButton_Pressed>
 8007d26:	1e03      	subs	r3, r0, #0
 8007d28:	d004      	beq.n	8007d34 <main+0xa4>
    EnableESPProg();
 8007d2a:	f015 f8ed 	bl	801cf08 <EnableESPProg>
    ESP_Programming = true;
 8007d2e:	4bbc      	ldr	r3, [pc, #752]	@ (8008020 <main+0x390>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007d34:	2003      	movs	r0, #3
 8007d36:	f006 fcdb 	bl	800e6f0 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007d3a:	49ba      	ldr	r1, [pc, #744]	@ (8008024 <main+0x394>)
 8007d3c:	4bba      	ldr	r3, [pc, #744]	@ (8008028 <main+0x398>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	0018      	movs	r0, r3
 8007d42:	f00f fb77 	bl	8017434 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007d46:	4bb9      	ldr	r3, [pc, #740]	@ (800802c <main+0x39c>)
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7fe ffbb 	bl	8006cc4 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007d4e:	4ab8      	ldr	r2, [pc, #736]	@ (8008030 <main+0x3a0>)
 8007d50:	49b8      	ldr	r1, [pc, #736]	@ (8008034 <main+0x3a4>)
 8007d52:	48b9      	ldr	r0, [pc, #740]	@ (8008038 <main+0x3a8>)
 8007d54:	230b      	movs	r3, #11
 8007d56:	f004 faf5 	bl	800c344 <soundInit>
 8007d5a:	0003      	movs	r3, r0
 8007d5c:	001a      	movs	r2, r3
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4053      	eors	r3, r2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007d68:	4ab4      	ldr	r2, [pc, #720]	@ (800803c <main+0x3ac>)
 8007d6a:	4bb5      	ldr	r3, [pc, #724]	@ (8008040 <main+0x3b0>)
 8007d6c:	21fb      	movs	r1, #251	@ 0xfb
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f006 fd0c 	bl	800e78c <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007d74:	4bb3      	ldr	r3, [pc, #716]	@ (8008044 <main+0x3b4>)
 8007d76:	4ab4      	ldr	r2, [pc, #720]	@ (8008048 <main+0x3b8>)
 8007d78:	49ae      	ldr	r1, [pc, #696]	@ (8008034 <main+0x3a4>)
 8007d7a:	48b4      	ldr	r0, [pc, #720]	@ (800804c <main+0x3bc>)
 8007d7c:	f000 fb9c 	bl	80084b8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8007d80:	f007 f88c 	bl	800ee9c <HAL_GetTick>
 8007d84:	0003      	movs	r3, r0
 8007d86:	4ab2      	ldr	r2, [pc, #712]	@ (8008050 <main+0x3c0>)
 8007d88:	189a      	adds	r2, r3, r2
 8007d8a:	4bb2      	ldr	r3, [pc, #712]	@ (8008054 <main+0x3c4>)
 8007d8c:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d8e:	f7fe fb71 	bl	8006474 <Check_USB_PowerOn>
 8007d92:	0003      	movs	r3, r0
 8007d94:	1e5a      	subs	r2, r3, #1
 8007d96:	4193      	sbcs	r3, r2
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4053      	eors	r3, r2
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	1c1a      	adds	r2, r3, #0
 8007da2:	2301      	movs	r3, #1
 8007da4:	4013      	ands	r3, r2
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	4bab      	ldr	r3, [pc, #684]	@ (8008058 <main+0x3c8>)
 8007daa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007dac:	4bab      	ldr	r3, [pc, #684]	@ (800805c <main+0x3cc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f006 fbdd 	bl	800e570 <TimestampIsReached>
 8007db6:	1e03      	subs	r3, r0, #0
 8007db8:	d00e      	beq.n	8007dd8 <main+0x148>
      charge = Battery_Upkeep();
 8007dba:	f005 febf 	bl	800db3c <Battery_Upkeep>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	4b94      	ldr	r3, [pc, #592]	@ (8008014 <main+0x384>)
 8007dc4:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007dc6:	f007 f869 	bl	800ee9c <HAL_GetTick>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	4aa4      	ldr	r2, [pc, #656]	@ (8008060 <main+0x3d0>)
 8007dce:	189a      	adds	r2, r3, r2
 8007dd0:	4ba2      	ldr	r3, [pc, #648]	@ (800805c <main+0x3cc>)
 8007dd2:	601a      	str	r2, [r3, #0]
        showTime();
 8007dd4:	f7fe fb7e 	bl	80064d4 <showTime>
    }
    configCheck();
 8007dd8:	f005 fd38 	bl	800d84c <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007ddc:	4ba1      	ldr	r3, [pc, #644]	@ (8008064 <main+0x3d4>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007de2:	4b8c      	ldr	r3, [pc, #560]	@ (8008014 <main+0x384>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d003      	beq.n	8007df2 <main+0x162>
 8007dea:	4b8a      	ldr	r3, [pc, #552]	@ (8008014 <main+0x384>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <main+0x16c>
          FlashLEDs();
 8007df2:	f7ff ff19 	bl	8007c28 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007df6:	4b9c      	ldr	r3, [pc, #624]	@ (8008068 <main+0x3d8>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007dfc:	4b85      	ldr	r3, [pc, #532]	@ (8008014 <main+0x384>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <main+0x188>
 8007e04:	4b99      	ldr	r3, [pc, #612]	@ (800806c <main+0x3dc>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b09      	cmp	r3, #9
 8007e0a:	d105      	bne.n	8007e18 <main+0x188>
          batteryEmpty = true;
 8007e0c:	4b98      	ldr	r3, [pc, #608]	@ (8008070 <main+0x3e0>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007e12:	f7fe fe8b 	bl	8006b2c <Enter_Standby_Mode>
 8007e16:	e002      	b.n	8007e1e <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8007e18:	4b95      	ldr	r3, [pc, #596]	@ (8008070 <main+0x3e0>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007e1e:	4b95      	ldr	r3, [pc, #596]	@ (8008074 <main+0x3e4>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d100      	bne.n	8007e28 <main+0x198>
 8007e26:	e0b0      	b.n	8007f8a <main+0x2fa>
 8007e28:	4b7d      	ldr	r3, [pc, #500]	@ (8008020 <main+0x390>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4053      	eors	r3, r2
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d100      	bne.n	8007e38 <main+0x1a8>
 8007e36:	e0a8      	b.n	8007f8a <main+0x2fa>
 8007e38:	4b8d      	ldr	r3, [pc, #564]	@ (8008070 <main+0x3e0>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4053      	eors	r3, r2
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d100      	bne.n	8007e48 <main+0x1b8>
 8007e46:	e0a0      	b.n	8007f8a <main+0x2fa>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007e48:	4b83      	ldr	r3, [pc, #524]	@ (8008058 <main+0x3c8>)
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8008078 <main+0x3e8>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d026      	beq.n	8007ea2 <main+0x212>
        Info("USB power state change detected");
 8007e54:	4a89      	ldr	r2, [pc, #548]	@ (800807c <main+0x3ec>)
 8007e56:	4b71      	ldr	r3, [pc, #452]	@ (800801c <main+0x38c>)
 8007e58:	0019      	movs	r1, r3
 8007e5a:	2002      	movs	r0, #2
 8007e5c:	f006 fbde 	bl	800e61c <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007e60:	f000 fab0 	bl	80083c4 <IsSGPPresent>
 8007e64:	1e03      	subs	r3, r0, #0
 8007e66:	d009      	beq.n	8007e7c <main+0x1ec>
 8007e68:	4b83      	ldr	r3, [pc, #524]	@ (8008078 <main+0x3e8>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	4053      	eors	r3, r2
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <main+0x1ec>
          SetVOCSensorDIS_ENA(true);
 8007e76:	2001      	movs	r0, #1
 8007e78:	f000 faae 	bl	80083d8 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007e7c:	4b80      	ldr	r3, [pc, #512]	@ (8008080 <main+0x3f0>)
 8007e7e:	791b      	ldrb	r3, [r3, #4]
 8007e80:	2b34      	cmp	r3, #52	@ 0x34
 8007e82:	d003      	beq.n	8007e8c <main+0x1fc>
 8007e84:	4b7e      	ldr	r3, [pc, #504]	@ (8008080 <main+0x3f0>)
 8007e86:	791b      	ldrb	r3, [r3, #4]
 8007e88:	2b35      	cmp	r3, #53	@ 0x35
 8007e8a:	d106      	bne.n	8007e9a <main+0x20a>
 8007e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8008078 <main+0x3e8>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <main+0x20a>
          SetVOCSensorDIS_ENA(false);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f000 fa9f 	bl	80083d8 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e9a:	4b77      	ldr	r3, [pc, #476]	@ (8008078 <main+0x3e8>)
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8008058 <main+0x3c8>)
 8007ea0:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007ea2:	4b78      	ldr	r3, [pc, #480]	@ (8008084 <main+0x3f4>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d00d      	beq.n	8007ec6 <main+0x236>
 8007eaa:	4b76      	ldr	r3, [pc, #472]	@ (8008084 <main+0x3f4>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d009      	beq.n	8007ec6 <main+0x236>
 8007eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8008068 <main+0x3d8>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <main+0x236>
        HIDSstate = HIDS_Upkeep();
 8007eba:	f006 fed3 	bl	800ec64 <HIDS_Upkeep>
 8007ebe:	0003      	movs	r3, r0
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	4b71      	ldr	r3, [pc, #452]	@ (8008088 <main+0x3f8>)
 8007ec4:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007ec6:	4b70      	ldr	r3, [pc, #448]	@ (8008088 <main+0x3f8>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d00d      	beq.n	8007eea <main+0x25a>
 8007ece:	4b6e      	ldr	r3, [pc, #440]	@ (8008088 <main+0x3f8>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d009      	beq.n	8007eea <main+0x25a>
 8007ed6:	4b64      	ldr	r3, [pc, #400]	@ (8008068 <main+0x3d8>)
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <main+0x25a>
        SGPstate = SGP_Upkeep();
 8007ede:	f004 f897 	bl	800c010 <SGP_Upkeep>
 8007ee2:	0003      	movs	r3, r0
 8007ee4:	001a      	movs	r2, r3
 8007ee6:	4b67      	ldr	r3, [pc, #412]	@ (8008084 <main+0x3f4>)
 8007ee8:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007eea:	4b5f      	ldr	r3, [pc, #380]	@ (8008068 <main+0x3d8>)
 8007eec:	78db      	ldrb	r3, [r3, #3]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <main+0x26e>
        MICstate = Mic_Upkeep();
 8007ef2:	f000 ff1b 	bl	8008d2c <Mic_Upkeep>
 8007ef6:	0003      	movs	r3, r0
 8007ef8:	001a      	movs	r2, r3
 8007efa:	4b64      	ldr	r3, [pc, #400]	@ (800808c <main+0x3fc>)
 8007efc:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007efe:	4b45      	ldr	r3, [pc, #276]	@ (8008014 <main+0x384>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d803      	bhi.n	8007f0e <main+0x27e>
 8007f06:	4b57      	ldr	r3, [pc, #348]	@ (8008064 <main+0x3d4>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d016      	beq.n	8007f3c <main+0x2ac>
 8007f0e:	4b56      	ldr	r3, [pc, #344]	@ (8008068 <main+0x3d8>)
 8007f10:	789b      	ldrb	r3, [r3, #2]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d012      	beq.n	8007f3c <main+0x2ac>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007f16:	f001 f8ab 	bl	8009070 <sen5x_Get_sen5x_enable_state>
 8007f1a:	0003      	movs	r3, r0
 8007f1c:	001a      	movs	r2, r3
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4053      	eors	r3, r2
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <main+0x2a6>
 8007f28:	4b53      	ldr	r3, [pc, #332]	@ (8008078 <main+0x3e8>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <main+0x2a6>
          sen5x_enable(0);
 8007f30:	2000      	movs	r0, #0
 8007f32:	f001 f8c9 	bl	80090c8 <sen5x_enable>
        }
        sen5x_statemachine();
 8007f36:	f001 fe8d 	bl	8009c54 <sen5x_statemachine>
 8007f3a:	e020      	b.n	8007f7e <main+0x2ee>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007f3c:	4b35      	ldr	r3, [pc, #212]	@ (8008014 <main+0x384>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d81c      	bhi.n	8007f7e <main+0x2ee>
 8007f44:	4b47      	ldr	r3, [pc, #284]	@ (8008064 <main+0x3d4>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4053      	eors	r3, r2
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d015      	beq.n	8007f7e <main+0x2ee>
 8007f52:	4b45      	ldr	r3, [pc, #276]	@ (8008068 <main+0x3d8>)
 8007f54:	789b      	ldrb	r3, [r3, #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d011      	beq.n	8007f7e <main+0x2ee>
        Info("Battery level insufficient for sen5x operation");
 8007f5a:	4a4d      	ldr	r2, [pc, #308]	@ (8008090 <main+0x400>)
 8007f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800801c <main+0x38c>)
 8007f5e:	0019      	movs	r1, r3
 8007f60:	2002      	movs	r0, #2
 8007f62:	f006 fb5b 	bl	800e61c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007f66:	4b40      	ldr	r3, [pc, #256]	@ (8008068 <main+0x3d8>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007f6c:	4b49      	ldr	r3, [pc, #292]	@ (8008094 <main+0x404>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007f72:	4b49      	ldr	r3, [pc, #292]	@ (8008098 <main+0x408>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <main+0x2ee>
          sen5x_Power_Off();
 8007f7a:	f001 f915 	bl	80091a8 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007f7e:	f7fd fa93 	bl	80054a8 <ESP_Upkeep>
 8007f82:	0003      	movs	r3, r0
 8007f84:	001a      	movs	r2, r3
 8007f86:	4b39      	ldr	r3, [pc, #228]	@ (800806c <main+0x3dc>)
 8007f88:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <main+0x3e4>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4053      	eors	r3, r2
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00f      	beq.n	8007fb8 <main+0x328>
 8007f98:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <main+0x390>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4053      	eors	r3, r2
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <main+0x328>
 8007fa6:	4b32      	ldr	r3, [pc, #200]	@ (8008070 <main+0x3e0>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2201      	movs	r2, #1
 8007fac:	4053      	eors	r3, r2
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <main+0x328>
      Device_Test();  // for device with startup time
 8007fb4:	f000 fbc6 	bl	8008744 <Device_Test>
    }
    if (!usbPluggedIn) {
 8007fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8008078 <main+0x3e8>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	4053      	eors	r3, r2
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d100      	bne.n	8007fc8 <main+0x338>
 8007fc6:	e6f1      	b.n	8007dac <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007fc8:	4b34      	ldr	r3, [pc, #208]	@ (800809c <main+0x40c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	4053      	eors	r3, r2
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d100      	bne.n	8007fd8 <main+0x348>
 8007fd6:	e6e9      	b.n	8007dac <main+0x11c>
 8007fd8:	f000 fc32 	bl	8008840 <AllDevicesReady>
 8007fdc:	1e03      	subs	r3, r0, #0
 8007fde:	d100      	bne.n	8007fe2 <main+0x352>
 8007fe0:	e6e4      	b.n	8007dac <main+0x11c>
 8007fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80080a0 <main+0x410>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d100      	bne.n	8007fec <main+0x35c>
 8007fea:	e6df      	b.n	8007dac <main+0x11c>
        EnabledConnectedDevices();
 8007fec:	f000 fc90 	bl	8008910 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80080a4 <main+0x414>)
 8007ff2:	789b      	ldrb	r3, [r3, #2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <main+0x36e>
 8007ff8:	23d7      	movs	r3, #215	@ 0xd7
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	e001      	b.n	8008002 <main+0x372>
 8007ffe:	23dc      	movs	r3, #220	@ 0xdc
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	0018      	movs	r0, r3
 8008004:	f7fe fdb2 	bl	8006b6c <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8008008:	e6d0      	b.n	8007dac <main+0x11c>
 800800a:	46c0      	nop			@ (mov r8, r8)
 800800c:	20002068 	.word	0x20002068
 8008010:	20002028 	.word	0x20002028
 8008014:	20000fcc 	.word	0x20000fcc
 8008018:	08024074 	.word	0x08024074
 800801c:	0802408c 	.word	0x0802408c
 8008020:	20000fb1 	.word	0x20000fb1
 8008024:	20000fb8 	.word	0x20000fb8
 8008028:	200021a0 	.word	0x200021a0
 800802c:	20001040 	.word	0x20001040
 8008030:	200020a8 	.word	0x200020a8
 8008034:	20000f2c 	.word	0x20000f2c
 8008038:	20000f68 	.word	0x20000f68
 800803c:	08024090 	.word	0x08024090
 8008040:	080256a0 	.word	0x080256a0
 8008044:	20002258 	.word	0x20002258
 8008048:	20000d98 	.word	0x20000d98
 800804c:	20000df4 	.word	0x20000df4
 8008050:	000061a8 	.word	0x000061a8
 8008054:	20000fc8 	.word	0x20000fc8
 8008058:	20000fb3 	.word	0x20000fb3
 800805c:	20000088 	.word	0x20000088
 8008060:	0000c350 	.word	0x0000c350
 8008064:	20000084 	.word	0x20000084
 8008068:	20000fd0 	.word	0x20000fd0
 800806c:	20000fb7 	.word	0x20000fb7
 8008070:	20000fb2 	.word	0x20000fb2
 8008074:	20000fb0 	.word	0x20000fb0
 8008078:	20002009 	.word	0x20002009
 800807c:	080240a4 	.word	0x080240a4
 8008080:	2000106c 	.word	0x2000106c
 8008084:	20000fb4 	.word	0x20000fb4
 8008088:	20000fb5 	.word	0x20000fb5
 800808c:	20000fb6 	.word	0x20000fb6
 8008090:	080240c4 	.word	0x080240c4
 8008094:	20001067 	.word	0x20001067
 8008098:	20001066 	.word	0x20001066
 800809c:	2000200a 	.word	0x2000200a
 80080a0:	20000558 	.word	0x20000558
 80080a4:	20000fd4 	.word	0x20000fd4

080080a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080a8:	b590      	push	{r4, r7, lr}
 80080aa:	b09d      	sub	sp, #116	@ 0x74
 80080ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080ae:	2438      	movs	r4, #56	@ 0x38
 80080b0:	193b      	adds	r3, r7, r4
 80080b2:	0018      	movs	r0, r3
 80080b4:	2338      	movs	r3, #56	@ 0x38
 80080b6:	001a      	movs	r2, r3
 80080b8:	2100      	movs	r1, #0
 80080ba:	f018 f947 	bl	802034c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080be:	2324      	movs	r3, #36	@ 0x24
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	0018      	movs	r0, r3
 80080c4:	2314      	movs	r3, #20
 80080c6:	001a      	movs	r2, r3
 80080c8:	2100      	movs	r1, #0
 80080ca:	f018 f93f 	bl	802034c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080ce:	003b      	movs	r3, r7
 80080d0:	0018      	movs	r0, r3
 80080d2:	2324      	movs	r3, #36	@ 0x24
 80080d4:	001a      	movs	r2, r3
 80080d6:	2100      	movs	r1, #0
 80080d8:	f018 f938 	bl	802034c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080dc:	4b34      	ldr	r3, [pc, #208]	@ (80081b0 <SystemClock_Config+0x108>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a34      	ldr	r2, [pc, #208]	@ (80081b4 <SystemClock_Config+0x10c>)
 80080e2:	401a      	ands	r2, r3
 80080e4:	4b32      	ldr	r3, [pc, #200]	@ (80081b0 <SystemClock_Config+0x108>)
 80080e6:	2180      	movs	r1, #128	@ 0x80
 80080e8:	0109      	lsls	r1, r1, #4
 80080ea:	430a      	orrs	r2, r1
 80080ec:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080ee:	f00c ff75 	bl	8014fdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80080f2:	4b31      	ldr	r3, [pc, #196]	@ (80081b8 <SystemClock_Config+0x110>)
 80080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f6:	4a2f      	ldr	r2, [pc, #188]	@ (80081b4 <SystemClock_Config+0x10c>)
 80080f8:	401a      	ands	r2, r3
 80080fa:	4b2f      	ldr	r3, [pc, #188]	@ (80081b8 <SystemClock_Config+0x110>)
 80080fc:	2180      	movs	r1, #128	@ 0x80
 80080fe:	0149      	lsls	r1, r1, #5
 8008100:	430a      	orrs	r2, r1
 8008102:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008104:	193b      	adds	r3, r7, r4
 8008106:	2226      	movs	r2, #38	@ 0x26
 8008108:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800810a:	193b      	adds	r3, r7, r4
 800810c:	2280      	movs	r2, #128	@ 0x80
 800810e:	0052      	lsls	r2, r2, #1
 8008110:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008112:	0021      	movs	r1, r4
 8008114:	187b      	adds	r3, r7, r1
 8008116:	2201      	movs	r2, #1
 8008118:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800811a:	187b      	adds	r3, r7, r1
 800811c:	2210      	movs	r2, #16
 800811e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008120:	187b      	adds	r3, r7, r1
 8008122:	2201      	movs	r2, #1
 8008124:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008126:	187b      	adds	r3, r7, r1
 8008128:	2200      	movs	r2, #0
 800812a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800812c:	187b      	adds	r3, r7, r1
 800812e:	0018      	movs	r0, r3
 8008130:	f00c ffe4 	bl	80150fc <HAL_RCC_OscConfig>
 8008134:	1e03      	subs	r3, r0, #0
 8008136:	d001      	beq.n	800813c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008138:	f000 f8fc 	bl	8008334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800813c:	2124      	movs	r1, #36	@ 0x24
 800813e:	187b      	adds	r3, r7, r1
 8008140:	220f      	movs	r2, #15
 8008142:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008144:	187b      	adds	r3, r7, r1
 8008146:	2201      	movs	r2, #1
 8008148:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800814a:	187b      	adds	r3, r7, r1
 800814c:	2200      	movs	r2, #0
 800814e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008150:	187b      	adds	r3, r7, r1
 8008152:	2200      	movs	r2, #0
 8008154:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008156:	187b      	adds	r3, r7, r1
 8008158:	2200      	movs	r2, #0
 800815a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800815c:	187b      	adds	r3, r7, r1
 800815e:	2100      	movs	r1, #0
 8008160:	0018      	movs	r0, r3
 8008162:	f00d fb9f 	bl	80158a4 <HAL_RCC_ClockConfig>
 8008166:	1e03      	subs	r3, r0, #0
 8008168:	d001      	beq.n	800816e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800816a:	f000 f8e3 	bl	8008334 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800816e:	003b      	movs	r3, r7
 8008170:	226d      	movs	r2, #109	@ 0x6d
 8008172:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008174:	003b      	movs	r3, r7
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800817a:	003b      	movs	r3, r7
 800817c:	2200      	movs	r2, #0
 800817e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008180:	003b      	movs	r3, r7
 8008182:	2200      	movs	r2, #0
 8008184:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008186:	003b      	movs	r3, r7
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	0252      	lsls	r2, r2, #9
 800818c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800818e:	003b      	movs	r3, r7
 8008190:	2280      	movs	r2, #128	@ 0x80
 8008192:	04d2      	lsls	r2, r2, #19
 8008194:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008196:	003b      	movs	r3, r7
 8008198:	0018      	movs	r0, r3
 800819a:	f00d fda7 	bl	8015cec <HAL_RCCEx_PeriphCLKConfig>
 800819e:	1e03      	subs	r3, r0, #0
 80081a0:	d001      	beq.n	80081a6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80081a2:	f000 f8c7 	bl	8008334 <Error_Handler>
  }
}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b01d      	add	sp, #116	@ 0x74
 80081ac:	bd90      	pop	{r4, r7, pc}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	40007000 	.word	0x40007000
 80081b4:	ffffe7ff 	.word	0xffffe7ff
 80081b8:	40021000 	.word	0x40021000

080081bc <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 80081c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008280 <check_cli_command+0xc4>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	3b61      	subs	r3, #97	@ 0x61
 80081c6:	2b13      	cmp	r3, #19
 80081c8:	d830      	bhi.n	800822c <check_cli_command+0x70>
 80081ca:	009a      	lsls	r2, r3, #2
 80081cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008284 <check_cli_command+0xc8>)
 80081ce:	18d3      	adds	r3, r2, r3
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80081d4:	4b2c      	ldr	r3, [pc, #176]	@ (8008288 <check_cli_command+0xcc>)
 80081d6:	0018      	movs	r0, r3
 80081d8:	f017 ff6a 	bl	80200b0 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80081dc:	2003      	movs	r0, #3
 80081de:	f006 fa87 	bl	800e6f0 <SetVerboseLevel>
      break;
 80081e2:	e04a      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80081e4:	f7fb fada 	bl	800379c <forceNTPupdate>
    break;
 80081e8:	e047      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80081ea:	4b28      	ldr	r3, [pc, #160]	@ (800828c <check_cli_command+0xd0>)
 80081ec:	0018      	movs	r0, r3
 80081ee:	f017 ff5f 	bl	80200b0 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80081f2:	2002      	movs	r0, #2
 80081f4:	f006 fa7c 	bl	800e6f0 <SetVerboseLevel>
      break;
 80081f8:	e03f      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 80081fa:	4b25      	ldr	r3, [pc, #148]	@ (8008290 <check_cli_command+0xd4>)
 80081fc:	0018      	movs	r0, r3
 80081fe:	f017 ff57 	bl	80200b0 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008202:	2001      	movs	r0, #1
 8008204:	f006 fa74 	bl	800e6f0 <SetVerboseLevel>
      break;
 8008208:	e037      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800820a:	4b22      	ldr	r3, [pc, #136]	@ (8008294 <check_cli_command+0xd8>)
 800820c:	0018      	movs	r0, r3
 800820e:	f017 ff4f 	bl	80200b0 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008212:	2000      	movs	r0, #0
 8008214:	f006 fa6c 	bl	800e6f0 <SetVerboseLevel>
      break;
 8008218:	e02f      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800821a:	f006 fe3f 	bl	800ee9c <HAL_GetTick>
 800821e:	0002      	movs	r2, r0
 8008220:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <check_cli_command+0xdc>)
 8008222:	601a      	str	r2, [r3, #0]
      break;
 8008224:	e029      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8008226:	f7fe f955 	bl	80064d4 <showTime>
      break;
 800822a:	e026      	b.n	800827a <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800822c:	4a1b      	ldr	r2, [pc, #108]	@ (800829c <check_cli_command+0xe0>)
 800822e:	4b1c      	ldr	r3, [pc, #112]	@ (80082a0 <check_cli_command+0xe4>)
 8008230:	0019      	movs	r1, r3
 8008232:	2001      	movs	r0, #1
 8008234:	f006 f9f2 	bl	800e61c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008238:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <check_cli_command+0xe8>)
 800823a:	0018      	movs	r0, r3
 800823c:	f017 ff38 	bl	80200b0 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008240:	4b19      	ldr	r3, [pc, #100]	@ (80082a8 <check_cli_command+0xec>)
 8008242:	0018      	movs	r0, r3
 8008244:	f017 ff34 	bl	80200b0 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008248:	4b18      	ldr	r3, [pc, #96]	@ (80082ac <check_cli_command+0xf0>)
 800824a:	0018      	movs	r0, r3
 800824c:	f017 ff30 	bl	80200b0 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008250:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <check_cli_command+0xf4>)
 8008252:	0018      	movs	r0, r3
 8008254:	f017 ff2c 	bl	80200b0 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008258:	4b16      	ldr	r3, [pc, #88]	@ (80082b4 <check_cli_command+0xf8>)
 800825a:	0018      	movs	r0, r3
 800825c:	f017 ff28 	bl	80200b0 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008260:	4b15      	ldr	r3, [pc, #84]	@ (80082b8 <check_cli_command+0xfc>)
 8008262:	0018      	movs	r0, r3
 8008264:	f017 ff24 	bl	80200b0 <puts>
      printf("s - Start particle measurement\r\n");
 8008268:	4b14      	ldr	r3, [pc, #80]	@ (80082bc <check_cli_command+0x100>)
 800826a:	0018      	movs	r0, r3
 800826c:	f017 ff20 	bl	80200b0 <puts>
      printf("t - Show actual systemtime\r\n");
 8008270:	4b13      	ldr	r3, [pc, #76]	@ (80082c0 <check_cli_command+0x104>)
 8008272:	0018      	movs	r0, r3
 8008274:	f017 ff1c 	bl	80200b0 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008278:	46c0      	nop			@ (mov r8, r8)
  }
}
 800827a:	46c0      	nop			@ (mov r8, r8)
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000fb8 	.word	0x20000fb8
 8008284:	08025650 	.word	0x08025650
 8008288:	080240f4 	.word	0x080240f4
 800828c:	08024110 	.word	0x08024110
 8008290:	0802412c 	.word	0x0802412c
 8008294:	0802414c 	.word	0x0802414c
 8008298:	20001088 	.word	0x20001088
 800829c:	08024168 	.word	0x08024168
 80082a0:	08024198 	.word	0x08024198
 80082a4:	0802419c 	.word	0x0802419c
 80082a8:	080241b4 	.word	0x080241b4
 80082ac:	080241d4 	.word	0x080241d4
 80082b0:	080241f8 	.word	0x080241f8
 80082b4:	08024218 	.word	0x08024218
 80082b8:	0802423c 	.word	0x0802423c
 80082bc:	0802425c 	.word	0x0802425c
 80082c0:	0802427c 	.word	0x0802427c

080082c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80082cc:	4908      	ldr	r1, [pc, #32]	@ (80082f0 <HAL_UART_RxCpltCallback+0x2c>)
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <HAL_UART_RxCpltCallback+0x30>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	0018      	movs	r0, r3
 80082d4:	f00f f8ae 	bl	8017434 <HAL_UART_Receive_IT>
  check_cli_command();
 80082d8:	f7ff ff70 	bl	80081bc <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80082dc:	4904      	ldr	r1, [pc, #16]	@ (80082f0 <HAL_UART_RxCpltCallback+0x2c>)
 80082de:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <HAL_UART_RxCpltCallback+0x30>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	0018      	movs	r0, r3
 80082e4:	f00f f8a6 	bl	8017434 <HAL_UART_Receive_IT>
}
 80082e8:	46c0      	nop			@ (mov r8, r8)
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b002      	add	sp, #8
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000fb8 	.word	0x20000fb8
 80082f4:	200021a0 	.word	0x200021a0

080082f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	0002      	movs	r2, r0
 8008300:	1dbb      	adds	r3, r7, #6
 8008302:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008304:	1dbb      	adds	r3, r7, #6
 8008306:	881a      	ldrh	r2, [r3, #0]
 8008308:	2380      	movs	r3, #128	@ 0x80
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	429a      	cmp	r2, r3
 800830e:	d10b      	bne.n	8008328 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008310:	f005 fc28 	bl	800db64 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008314:	f000 f84c 	bl	80083b0 <GetPMSensorPresence>
 8008318:	1e03      	subs	r3, r0, #0
 800831a:	d005      	beq.n	8008328 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800831c:	4b04      	ldr	r3, [pc, #16]	@ (8008330 <HAL_GPIO_EXTI_Callback+0x38>)
 800831e:	2201      	movs	r2, #1
 8008320:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 8008322:	2064      	movs	r0, #100	@ 0x64
 8008324:	f000 feae 	bl	8009084 <setsen5xReadTimer>
    }
  }
}
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000fd0 	.word	0x20000fd0

08008334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008338:	b672      	cpsid	i
}
 800833a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800833c:	4a05      	ldr	r2, [pc, #20]	@ (8008354 <Error_Handler+0x20>)
 800833e:	4b06      	ldr	r3, [pc, #24]	@ (8008358 <Error_Handler+0x24>)
 8008340:	0019      	movs	r1, r3
 8008342:	2001      	movs	r0, #1
 8008344:	f006 f96a 	bl	800e61c <CreateLine>
    HAL_Delay(2500);
 8008348:	4b04      	ldr	r3, [pc, #16]	@ (800835c <Error_Handler+0x28>)
 800834a:	0018      	movs	r0, r3
 800834c:	f006 fdb0 	bl	800eeb0 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008350:	46c0      	nop			@ (mov r8, r8)
 8008352:	e7f3      	b.n	800833c <Error_Handler+0x8>
 8008354:	08024298 	.word	0x08024298
 8008358:	08024198 	.word	0x08024198
 800835c:	000009c4 	.word	0x000009c4

08008360 <testInit>:
#include "statusCheck.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008364:	4b10      	ldr	r3, [pc, #64]	@ (80083a8 <testInit+0x48>)
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800836a:	4b0f      	ldr	r3, [pc, #60]	@ (80083a8 <testInit+0x48>)
 800836c:	2200      	movs	r2, #0
 800836e:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008370:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <testInit+0x48>)
 8008372:	2200      	movs	r2, #0
 8008374:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8008376:	4b0c      	ldr	r3, [pc, #48]	@ (80083a8 <testInit+0x48>)
 8008378:	2200      	movs	r2, #0
 800837a:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 800837c:	4b0a      	ldr	r3, [pc, #40]	@ (80083a8 <testInit+0x48>)
 800837e:	2200      	movs	r2, #0
 8008380:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008382:	4b09      	ldr	r3, [pc, #36]	@ (80083a8 <testInit+0x48>)
 8008384:	2200      	movs	r2, #0
 8008386:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008388:	4b08      	ldr	r3, [pc, #32]	@ (80083ac <testInit+0x4c>)
 800838a:	2201      	movs	r2, #1
 800838c:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800838e:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <testInit+0x4c>)
 8008390:	2201      	movs	r2, #1
 8008392:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <testInit+0x4c>)
 8008396:	2201      	movs	r2, #1
 8008398:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800839a:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <testInit+0x4c>)
 800839c:	2201      	movs	r2, #1
 800839e:	70da      	strb	r2, [r3, #3]
}
 80083a0:	46c0      	nop			@ (mov r8, r8)
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	46c0      	nop			@ (mov r8, r8)
 80083a8:	20000fd4 	.word	0x20000fd4
 80083ac:	20000fd0 	.word	0x20000fd0

080083b0 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 80083b4:	4b02      	ldr	r3, [pc, #8]	@ (80083c0 <GetPMSensorPresence+0x10>)
 80083b6:	789b      	ldrb	r3, [r3, #2]
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	46c0      	nop			@ (mov r8, r8)
 80083c0:	20000fd4 	.word	0x20000fd4

080083c4 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80083c8:	4b02      	ldr	r3, [pc, #8]	@ (80083d4 <IsSGPPresent+0x10>)
 80083ca:	785b      	ldrb	r3, [r3, #1]
}
 80083cc:	0018      	movs	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	46c0      	nop			@ (mov r8, r8)
 80083d4:	20000fd4 	.word	0x20000fd4

080083d8 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	0002      	movs	r2, r0
 80083e0:	1dfb      	adds	r3, r7, #7
 80083e2:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 80083e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <SetVOCSensorDIS_ENA+0x3c>)
 80083e6:	1dfa      	adds	r2, r7, #7
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <SetVOCSensorDIS_ENA+0x40>)
 80083ee:	1dfa      	adds	r2, r7, #7
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 80083f4:	1dfb      	adds	r3, r7, #7
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <SetVOCSensorDIS_ENA+0x28>
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <SetVOCSensorDIS_ENA+0x44>)
 80083fe:	e000      	b.n	8008402 <SetVOCSensorDIS_ENA+0x2a>
 8008400:	4b07      	ldr	r3, [pc, #28]	@ (8008420 <SetVOCSensorDIS_ENA+0x48>)
 8008402:	4a08      	ldr	r2, [pc, #32]	@ (8008424 <SetVOCSensorDIS_ENA+0x4c>)
 8008404:	4908      	ldr	r1, [pc, #32]	@ (8008428 <SetVOCSensorDIS_ENA+0x50>)
 8008406:	2003      	movs	r0, #3
 8008408:	f006 f908 	bl	800e61c <CreateLine>
}
 800840c:	46c0      	nop			@ (mov r8, r8)
 800840e:	46bd      	mov	sp, r7
 8008410:	b002      	add	sp, #8
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20000fd4 	.word	0x20000fd4
 8008418:	20000fd0 	.word	0x20000fd0
 800841c:	080242c4 	.word	0x080242c4
 8008420:	080242cc 	.word	0x080242cc
 8008424:	080242d8 	.word	0x080242d8
 8008428:	080242ec 	.word	0x080242ec

0800842c <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <IsPMSensorEnabled+0x10>)
 8008432:	789b      	ldrb	r3, [r3, #2]
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			@ (mov r8, r8)
 800843c:	20000fd0 	.word	0x20000fd0

08008440 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	0002      	movs	r2, r0
 8008448:	1dfb      	adds	r3, r7, #7
 800844a:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800844c:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <SetVOCSensorStatus+0x34>)
 800844e:	795b      	ldrb	r3, [r3, #5]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 8008454:	4b08      	ldr	r3, [pc, #32]	@ (8008478 <SetVOCSensorStatus+0x38>)
 8008456:	1dfa      	adds	r2, r7, #7
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	705a      	strb	r2, [r3, #1]
  }
  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
 800845c:	1dfb      	adds	r3, r7, #7
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4a06      	ldr	r2, [pc, #24]	@ (800847c <SetVOCSensorStatus+0x3c>)
 8008462:	4907      	ldr	r1, [pc, #28]	@ (8008480 <SetVOCSensorStatus+0x40>)
 8008464:	2003      	movs	r0, #3
 8008466:	f006 f8d9 	bl	800e61c <CreateLine>
}
 800846a:	46c0      	nop			@ (mov r8, r8)
 800846c:	46bd      	mov	sp, r7
 800846e:	b002      	add	sp, #8
 8008470:	bd80      	pop	{r7, pc}
 8008472:	46c0      	nop			@ (mov r8, r8)
 8008474:	20000fd4 	.word	0x20000fd4
 8008478:	20000fd0 	.word	0x20000fd0
 800847c:	080242f0 	.word	0x080242f0
 8008480:	080242ec 	.word	0x080242ec

08008484 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	0002      	movs	r2, r0
 800848c:	1dfb      	adds	r3, r7, #7
 800848e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008490:	4b03      	ldr	r3, [pc, #12]	@ (80084a0 <SetPMSensorStatus+0x1c>)
 8008492:	1dfa      	adds	r2, r7, #7
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	709a      	strb	r2, [r3, #2]
}
 8008498:	46c0      	nop			@ (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000fd0 	.word	0x20000fd0

080084a4 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80084a8:	4b02      	ldr	r3, [pc, #8]	@ (80084b4 <SetESPMeasurementDone+0x10>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	711a      	strb	r2, [r3, #4]
}
 80084ae:	46c0      	nop			@ (mov r8, r8)
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000fd4 	.word	0x20000fd4

080084b8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  testInit();
 80084c6:	f7ff ff4b 	bl	8008360 <testInit>
  I2CSensors_Init(sensorI2C);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7fd fc97 	bl	8005e00 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80084d2:	f006 fad5 	bl	800ea80 <HIDS_DeviceConnected>
 80084d6:	0003      	movs	r3, r0
 80084d8:	001a      	movs	r2, r3
 80084da:	2301      	movs	r3, #1
 80084dc:	4053      	eors	r3, r2
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00c      	beq.n	80084fe <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80084e4:	4a7f      	ldr	r2, [pc, #508]	@ (80086e4 <Device_Init+0x22c>)
 80084e6:	4b80      	ldr	r3, [pc, #512]	@ (80086e8 <Device_Init+0x230>)
 80084e8:	0019      	movs	r1, r3
 80084ea:	2001      	movs	r0, #1
 80084ec:	f006 f896 	bl	800e61c <CreateLine>
     SensorProbe.HT_Present = false;
 80084f0:	4b7e      	ldr	r3, [pc, #504]	@ (80086ec <Device_Init+0x234>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 80084f6:	4b7e      	ldr	r3, [pc, #504]	@ (80086f0 <Device_Init+0x238>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e008      	b.n	8008510 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80084fe:	4b7b      	ldr	r3, [pc, #492]	@ (80086ec <Device_Init+0x234>)
 8008500:	2201      	movs	r2, #1
 8008502:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008504:	4a7b      	ldr	r2, [pc, #492]	@ (80086f4 <Device_Init+0x23c>)
 8008506:	4b7c      	ldr	r3, [pc, #496]	@ (80086f8 <Device_Init+0x240>)
 8008508:	0019      	movs	r1, r3
 800850a:	2003      	movs	r0, #3
 800850c:	f006 f886 	bl	800e61c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008510:	f003 fb74 	bl	800bbfc <SGP_DeviceConnected>
 8008514:	0003      	movs	r3, r0
 8008516:	001a      	movs	r2, r3
 8008518:	2301      	movs	r3, #1
 800851a:	4053      	eors	r3, r2
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008522:	4b72      	ldr	r3, [pc, #456]	@ (80086ec <Device_Init+0x234>)
 8008524:	2200      	movs	r2, #0
 8008526:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008528:	4a74      	ldr	r2, [pc, #464]	@ (80086fc <Device_Init+0x244>)
 800852a:	4b6f      	ldr	r3, [pc, #444]	@ (80086e8 <Device_Init+0x230>)
 800852c:	0019      	movs	r1, r3
 800852e:	2001      	movs	r0, #1
 8008530:	f006 f874 	bl	800e61c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008534:	4b6e      	ldr	r3, [pc, #440]	@ (80086f0 <Device_Init+0x238>)
 8008536:	2200      	movs	r2, #0
 8008538:	705a      	strb	r2, [r3, #1]
 800853a:	e00b      	b.n	8008554 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800853c:	4b6b      	ldr	r3, [pc, #428]	@ (80086ec <Device_Init+0x234>)
 800853e:	2201      	movs	r2, #1
 8008540:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 8008542:	4b6a      	ldr	r3, [pc, #424]	@ (80086ec <Device_Init+0x234>)
 8008544:	2201      	movs	r2, #1
 8008546:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008548:	4a6d      	ldr	r2, [pc, #436]	@ (8008700 <Device_Init+0x248>)
 800854a:	4b6b      	ldr	r3, [pc, #428]	@ (80086f8 <Device_Init+0x240>)
 800854c:	0019      	movs	r1, r3
 800854e:	2003      	movs	r0, #3
 8008550:	f006 f864 	bl	800e61c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008554:	4b65      	ldr	r3, [pc, #404]	@ (80086ec <Device_Init+0x234>)
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d009      	beq.n	8008570 <Device_Init+0xb8>
 800855c:	4b63      	ldr	r3, [pc, #396]	@ (80086ec <Device_Init+0x234>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 8008564:	2200      	movs	r2, #0
 8008566:	2101      	movs	r1, #1
 8008568:	2000      	movs	r0, #0
 800856a:	f004 fe55 	bl	800d218 <SetDBLED>
 800856e:	e018      	b.n	80085a2 <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008570:	2200      	movs	r2, #0
 8008572:	2100      	movs	r1, #0
 8008574:	2001      	movs	r0, #1
 8008576:	f004 fe4f 	bl	800d218 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800857a:	4b62      	ldr	r3, [pc, #392]	@ (8008704 <Device_Init+0x24c>)
 800857c:	2200      	movs	r2, #0
 800857e:	2101      	movs	r1, #1
 8008580:	0018      	movs	r0, r3
 8008582:	f007 ff1c 	bl	80103be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008586:	2380      	movs	r3, #128	@ 0x80
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	485e      	ldr	r0, [pc, #376]	@ (8008704 <Device_Init+0x24c>)
 800858c:	2201      	movs	r2, #1
 800858e:	0019      	movs	r1, r3
 8008590:	f007 ff15 	bl	80103be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8008594:	2380      	movs	r3, #128	@ 0x80
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	485a      	ldr	r0, [pc, #360]	@ (8008704 <Device_Init+0x24c>)
 800859a:	2201      	movs	r2, #1
 800859c:	0019      	movs	r1, r3
 800859e:	f007 ff0e 	bl	80103be <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80085a2:	4b53      	ldr	r3, [pc, #332]	@ (80086f0 <Device_Init+0x238>)
 80085a4:	78db      	ldrb	r3, [r3, #3]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d028      	beq.n	80085fc <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80085aa:	4a57      	ldr	r2, [pc, #348]	@ (8008708 <Device_Init+0x250>)
 80085ac:	4b57      	ldr	r3, [pc, #348]	@ (800870c <Device_Init+0x254>)
 80085ae:	0019      	movs	r1, r3
 80085b0:	2002      	movs	r0, #2
 80085b2:	f006 f833 	bl	800e61c <CreateLine>
    if (!enableMicrophone(true)) {
 80085b6:	2001      	movs	r0, #1
 80085b8:	f003 ff2c 	bl	800c414 <enableMicrophone>
 80085bc:	0003      	movs	r3, r0
 80085be:	001a      	movs	r2, r3
 80085c0:	2301      	movs	r3, #1
 80085c2:	4053      	eors	r3, r2
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80085ca:	4a51      	ldr	r2, [pc, #324]	@ (8008710 <Device_Init+0x258>)
 80085cc:	4b46      	ldr	r3, [pc, #280]	@ (80086e8 <Device_Init+0x230>)
 80085ce:	0019      	movs	r1, r3
 80085d0:	2001      	movs	r0, #1
 80085d2:	f006 f823 	bl	800e61c <CreateLine>
      SensorProbe.MIC_Present = false;
 80085d6:	4b45      	ldr	r3, [pc, #276]	@ (80086ec <Device_Init+0x234>)
 80085d8:	2200      	movs	r2, #0
 80085da:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80085dc:	4b44      	ldr	r3, [pc, #272]	@ (80086f0 <Device_Init+0x238>)
 80085de:	2200      	movs	r2, #0
 80085e0:	70da      	strb	r2, [r3, #3]
 80085e2:	e00b      	b.n	80085fc <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80085e4:	4b41      	ldr	r3, [pc, #260]	@ (80086ec <Device_Init+0x234>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80085ea:	4b41      	ldr	r3, [pc, #260]	@ (80086f0 <Device_Init+0x238>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 80085f0:	4a48      	ldr	r2, [pc, #288]	@ (8008714 <Device_Init+0x25c>)
 80085f2:	4b41      	ldr	r3, [pc, #260]	@ (80086f8 <Device_Init+0x240>)
 80085f4:	0019      	movs	r1, r3
 80085f6:	2003      	movs	r0, #3
 80085f8:	f006 f810 	bl	800e61c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80085fc:	f000 fe28 	bl	8009250 <probe_sen5x>
 8008600:	1e03      	subs	r3, r0, #0
 8008602:	d122      	bne.n	800864a <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008604:	4a44      	ldr	r2, [pc, #272]	@ (8008718 <Device_Init+0x260>)
 8008606:	4b3c      	ldr	r3, [pc, #240]	@ (80086f8 <Device_Init+0x240>)
 8008608:	0019      	movs	r1, r3
 800860a:	2003      	movs	r0, #3
 800860c:	f006 f806 	bl	800e61c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008610:	4b36      	ldr	r3, [pc, #216]	@ (80086ec <Device_Init+0x234>)
 8008612:	2201      	movs	r2, #1
 8008614:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008616:	4b36      	ldr	r3, [pc, #216]	@ (80086f0 <Device_Init+0x238>)
 8008618:	2201      	movs	r2, #1
 800861a:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800861c:	4b3f      	ldr	r3, [pc, #252]	@ (800871c <Device_Init+0x264>)
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b34      	cmp	r3, #52	@ 0x34
 8008622:	d003      	beq.n	800862c <Device_Init+0x174>
 8008624:	4b3d      	ldr	r3, [pc, #244]	@ (800871c <Device_Init+0x264>)
 8008626:	791b      	ldrb	r3, [r3, #4]
 8008628:	2b35      	cmp	r3, #53	@ 0x35
 800862a:	d11c      	bne.n	8008666 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800862c:	4a3c      	ldr	r2, [pc, #240]	@ (8008720 <Device_Init+0x268>)
 800862e:	4b37      	ldr	r3, [pc, #220]	@ (800870c <Device_Init+0x254>)
 8008630:	0019      	movs	r1, r3
 8008632:	2002      	movs	r0, #2
 8008634:	f005 fff2 	bl	800e61c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008638:	4b2d      	ldr	r3, [pc, #180]	@ (80086f0 <Device_Init+0x238>)
 800863a:	2200      	movs	r2, #0
 800863c:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800863e:	4b2b      	ldr	r3, [pc, #172]	@ (80086ec <Device_Init+0x234>)
 8008640:	2200      	movs	r2, #0
 8008642:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8008644:	f003 fcbe 	bl	800bfc4 <SGP_SoftReset>
 8008648:	e00d      	b.n	8008666 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800864a:	f000 fdad 	bl	80091a8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800864e:	4a35      	ldr	r2, [pc, #212]	@ (8008724 <Device_Init+0x26c>)
 8008650:	4b29      	ldr	r3, [pc, #164]	@ (80086f8 <Device_Init+0x240>)
 8008652:	0019      	movs	r1, r3
 8008654:	2003      	movs	r0, #3
 8008656:	f005 ffe1 	bl	800e61c <CreateLine>
    SensorProbe.PM_Present = false;
 800865a:	4b24      	ldr	r3, [pc, #144]	@ (80086ec <Device_Init+0x234>)
 800865c:	2200      	movs	r2, #0
 800865e:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008660:	4b23      	ldr	r3, [pc, #140]	@ (80086f0 <Device_Init+0x238>)
 8008662:	2200      	movs	r2, #0
 8008664:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8008666:	4b21      	ldr	r3, [pc, #132]	@ (80086ec <Device_Init+0x234>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <Device_Init+0x1ba>
 800866e:	4b2e      	ldr	r3, [pc, #184]	@ (8008728 <Device_Init+0x270>)
 8008670:	e000      	b.n	8008674 <Device_Init+0x1bc>
 8008672:	4b2e      	ldr	r3, [pc, #184]	@ (800872c <Device_Init+0x274>)
 8008674:	4a2e      	ldr	r2, [pc, #184]	@ (8008730 <Device_Init+0x278>)
 8008676:	4925      	ldr	r1, [pc, #148]	@ (800870c <Device_Init+0x254>)
 8008678:	2002      	movs	r0, #2
 800867a:	f005 ffcf 	bl	800e61c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800867e:	4b1b      	ldr	r3, [pc, #108]	@ (80086ec <Device_Init+0x234>)
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <Device_Init+0x1d2>
 8008686:	4b28      	ldr	r3, [pc, #160]	@ (8008728 <Device_Init+0x270>)
 8008688:	e000      	b.n	800868c <Device_Init+0x1d4>
 800868a:	4b28      	ldr	r3, [pc, #160]	@ (800872c <Device_Init+0x274>)
 800868c:	4a29      	ldr	r2, [pc, #164]	@ (8008734 <Device_Init+0x27c>)
 800868e:	491f      	ldr	r1, [pc, #124]	@ (800870c <Device_Init+0x254>)
 8008690:	2002      	movs	r0, #2
 8008692:	f005 ffc3 	bl	800e61c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8008696:	4b15      	ldr	r3, [pc, #84]	@ (80086ec <Device_Init+0x234>)
 8008698:	789b      	ldrb	r3, [r3, #2]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <Device_Init+0x1ea>
 800869e:	4b22      	ldr	r3, [pc, #136]	@ (8008728 <Device_Init+0x270>)
 80086a0:	e000      	b.n	80086a4 <Device_Init+0x1ec>
 80086a2:	4b22      	ldr	r3, [pc, #136]	@ (800872c <Device_Init+0x274>)
 80086a4:	4a24      	ldr	r2, [pc, #144]	@ (8008738 <Device_Init+0x280>)
 80086a6:	4919      	ldr	r1, [pc, #100]	@ (800870c <Device_Init+0x254>)
 80086a8:	2002      	movs	r0, #2
 80086aa:	f005 ffb7 	bl	800e61c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80086ae:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <Device_Init+0x234>)
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <Device_Init+0x202>
 80086b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008728 <Device_Init+0x270>)
 80086b8:	e000      	b.n	80086bc <Device_Init+0x204>
 80086ba:	4b1c      	ldr	r3, [pc, #112]	@ (800872c <Device_Init+0x274>)
 80086bc:	4a1f      	ldr	r2, [pc, #124]	@ (800873c <Device_Init+0x284>)
 80086be:	4913      	ldr	r1, [pc, #76]	@ (800870c <Device_Init+0x254>)
 80086c0:	2002      	movs	r0, #2
 80086c2:	f005 ffab 	bl	800e61c <CreateLine>
  ESP_Init(espUart);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7fb fa23 	bl	8003b14 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80086ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008740 <Device_Init+0x288>)
 80086d0:	4b09      	ldr	r3, [pc, #36]	@ (80086f8 <Device_Init+0x240>)
 80086d2:	0019      	movs	r1, r3
 80086d4:	2003      	movs	r0, #3
 80086d6:	f005 ffa1 	bl	800e61c <CreateLine>
}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	46bd      	mov	sp, r7
 80086de:	b004      	add	sp, #16
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	08024320 	.word	0x08024320
 80086e8:	08024350 	.word	0x08024350
 80086ec:	20000fd4 	.word	0x20000fd4
 80086f0:	20000fd0 	.word	0x20000fd0
 80086f4:	08024354 	.word	0x08024354
 80086f8:	080242ec 	.word	0x080242ec
 80086fc:	08024380 	.word	0x08024380
 8008700:	0802439c 	.word	0x0802439c
 8008704:	50000400 	.word	0x50000400
 8008708:	080243b4 	.word	0x080243b4
 800870c:	080243d8 	.word	0x080243d8
 8008710:	080243dc 	.word	0x080243dc
 8008714:	08024408 	.word	0x08024408
 8008718:	08024434 	.word	0x08024434
 800871c:	2000106c 	.word	0x2000106c
 8008720:	0802444c 	.word	0x0802444c
 8008724:	0802449c 	.word	0x0802449c
 8008728:	080244c0 	.word	0x080244c0
 800872c:	080244c4 	.word	0x080244c4
 8008730:	080244c8 	.word	0x080244c8
 8008734:	080244e4 	.word	0x080244e4
 8008738:	08024500 	.word	0x08024500
 800873c:	0802451c 	.word	0x0802451c
 8008740:	08024538 	.word	0x08024538

08008744 <Device_Test>:

void Device_Test(){
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008748:	4b34      	ldr	r3, [pc, #208]	@ (800881c <Device_Test+0xd8>)
 800874a:	78db      	ldrb	r3, [r3, #3]
 800874c:	2201      	movs	r2, #1
 800874e:	4053      	eors	r3, r2
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d027      	beq.n	80087a6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8008756:	f000 fab9 	bl	8008ccc <MIC_TestMeasurementDone>
 800875a:	1e03      	subs	r3, r0, #0
 800875c:	d011      	beq.n	8008782 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800875e:	4b2f      	ldr	r3, [pc, #188]	@ (800881c <Device_Test+0xd8>)
 8008760:	2201      	movs	r2, #1
 8008762:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008764:	4b2e      	ldr	r3, [pc, #184]	@ (8008820 <Device_Test+0xdc>)
 8008766:	2201      	movs	r2, #1
 8008768:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800876a:	f004 fcd9 	bl	800d120 <Calculate_LED_ON>
 800876e:	0003      	movs	r3, r0
 8008770:	0019      	movs	r1, r3
 8008772:	23fa      	movs	r3, #250	@ 0xfa
 8008774:	011a      	lsls	r2, r3, #4
 8008776:	23fa      	movs	r3, #250	@ 0xfa
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	0018      	movs	r0, r3
 800877c:	f004 fd18 	bl	800d1b0 <SetStatusLED>
 8008780:	e011      	b.n	80087a6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 8008782:	f003 fe23 	bl	800c3cc <micSettlingComplete>
 8008786:	1e03      	subs	r3, r0, #0
 8008788:	d00d      	beq.n	80087a6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800878a:	4b25      	ldr	r3, [pc, #148]	@ (8008820 <Device_Test+0xdc>)
 800878c:	2201      	movs	r2, #1
 800878e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008790:	f004 fcc6 	bl	800d120 <Calculate_LED_ON>
 8008794:	0003      	movs	r3, r0
 8008796:	0018      	movs	r0, r3
 8008798:	23fa      	movs	r3, #250	@ 0xfa
 800879a:	011a      	lsls	r2, r3, #4
 800879c:	23fa      	movs	r3, #250	@ 0xfa
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	0019      	movs	r1, r3
 80087a2:	f004 fd05 	bl	800d1b0 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80087a6:	4b1d      	ldr	r3, [pc, #116]	@ (800881c <Device_Test+0xd8>)
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	4053      	eors	r3, r2
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80087b4:	f7fc fd5e 	bl	8005274 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80087b8:	4b18      	ldr	r3, [pc, #96]	@ (800881c <Device_Test+0xd8>)
 80087ba:	791b      	ldrb	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <Device_Test+0x84>
 80087c0:	4b16      	ldr	r3, [pc, #88]	@ (800881c <Device_Test+0xd8>)
 80087c2:	78db      	ldrb	r3, [r3, #3]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <Device_Test+0x92>
 80087c8:	4b16      	ldr	r3, [pc, #88]	@ (8008824 <Device_Test+0xe0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	0018      	movs	r0, r3
 80087ce:	f005 fecf 	bl	800e570 <TimestampIsReached>
 80087d2:	1e03      	subs	r3, r0, #0
 80087d4:	d01f      	beq.n	8008816 <Device_Test+0xd2>
    Info("Test completed");
 80087d6:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <Device_Test+0xe4>)
 80087d8:	4b14      	ldr	r3, [pc, #80]	@ (800882c <Device_Test+0xe8>)
 80087da:	0019      	movs	r1, r3
 80087dc:	2002      	movs	r0, #2
 80087de:	f005 ff1d 	bl	800e61c <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80087e2:	4b0e      	ldr	r3, [pc, #56]	@ (800881c <Device_Test+0xd8>)
 80087e4:	791b      	ldrb	r3, [r3, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <Device_Test+0xaa>
 80087ea:	4b11      	ldr	r3, [pc, #68]	@ (8008830 <Device_Test+0xec>)
 80087ec:	e000      	b.n	80087f0 <Device_Test+0xac>
 80087ee:	4b11      	ldr	r3, [pc, #68]	@ (8008834 <Device_Test+0xf0>)
 80087f0:	4a11      	ldr	r2, [pc, #68]	@ (8008838 <Device_Test+0xf4>)
 80087f2:	490e      	ldr	r1, [pc, #56]	@ (800882c <Device_Test+0xe8>)
 80087f4:	2002      	movs	r0, #2
 80087f6:	f005 ff11 	bl	800e61c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80087fa:	4b08      	ldr	r3, [pc, #32]	@ (800881c <Device_Test+0xd8>)
 80087fc:	78db      	ldrb	r3, [r3, #3]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <Device_Test+0xc2>
 8008802:	4b0b      	ldr	r3, [pc, #44]	@ (8008830 <Device_Test+0xec>)
 8008804:	e000      	b.n	8008808 <Device_Test+0xc4>
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <Device_Test+0xf0>)
 8008808:	4a0c      	ldr	r2, [pc, #48]	@ (800883c <Device_Test+0xf8>)
 800880a:	4908      	ldr	r1, [pc, #32]	@ (800882c <Device_Test+0xe8>)
 800880c:	2002      	movs	r0, #2
 800880e:	f005 ff05 	bl	800e61c <CreateLine>
    SetTestDone();
 8008812:	f7ff f9c5 	bl	8007ba0 <SetTestDone>
  }
}
 8008816:	46c0      	nop			@ (mov r8, r8)
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000fd4 	.word	0x20000fd4
 8008820:	20000fd0 	.word	0x20000fd0
 8008824:	20000fc8 	.word	0x20000fc8
 8008828:	0802455c 	.word	0x0802455c
 800882c:	080243d8 	.word	0x080243d8
 8008830:	0802456c 	.word	0x0802456c
 8008834:	08024574 	.word	0x08024574
 8008838:	0802457c 	.word	0x0802457c
 800883c:	08024590 	.word	0x08024590

08008840 <AllDevicesReady>:

bool AllDevicesReady() {
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008844:	4b2a      	ldr	r3, [pc, #168]	@ (80088f0 <AllDevicesReady+0xb0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	0018      	movs	r0, r3
 800884a:	f005 fe91 	bl	800e570 <TimestampIsReached>
 800884e:	1e03      	subs	r3, r0, #0
 8008850:	d04a      	beq.n	80088e8 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008852:	4b28      	ldr	r3, [pc, #160]	@ (80088f4 <AllDevicesReady+0xb4>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b06      	cmp	r3, #6
 8008858:	d102      	bne.n	8008860 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800885a:	4b27      	ldr	r3, [pc, #156]	@ (80088f8 <AllDevicesReady+0xb8>)
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008860:	4b26      	ldr	r3, [pc, #152]	@ (80088fc <AllDevicesReady+0xbc>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b07      	cmp	r3, #7
 8008866:	d006      	beq.n	8008876 <AllDevicesReady+0x36>
 8008868:	4b25      	ldr	r3, [pc, #148]	@ (8008900 <AllDevicesReady+0xc0>)
 800886a:	795b      	ldrb	r3, [r3, #5]
 800886c:	2201      	movs	r2, #1
 800886e:	4053      	eors	r3, r2
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8008876:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <AllDevicesReady+0xb8>)
 8008878:	2200      	movs	r2, #0
 800887a:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800887c:	4b21      	ldr	r3, [pc, #132]	@ (8008904 <AllDevicesReady+0xc4>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d102      	bne.n	800888a <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8008884:	4b1c      	ldr	r3, [pc, #112]	@ (80088f8 <AllDevicesReady+0xb8>)
 8008886:	2200      	movs	r2, #0
 8008888:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800888a:	4b1f      	ldr	r3, [pc, #124]	@ (8008908 <AllDevicesReady+0xc8>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b03      	cmp	r3, #3
 8008890:	d102      	bne.n	8008898 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 8008892:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <AllDevicesReady+0xb8>)
 8008894:	2200      	movs	r2, #0
 8008896:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008898:	4b1c      	ldr	r3, [pc, #112]	@ (800890c <AllDevicesReady+0xcc>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b09      	cmp	r3, #9
 800889e:	d123      	bne.n	80088e8 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088a0:	4b15      	ldr	r3, [pc, #84]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2201      	movs	r2, #1
 80088a6:	4053      	eors	r3, r2
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d016      	beq.n	80088dc <AllDevicesReady+0x9c>
 80088ae:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2201      	movs	r2, #1
 80088b4:	4053      	eors	r3, r2
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00f      	beq.n	80088dc <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088bc:	4b0e      	ldr	r3, [pc, #56]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088be:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088c0:	2201      	movs	r2, #1
 80088c2:	4053      	eors	r3, r2
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088ca:	4b0b      	ldr	r3, [pc, #44]	@ (80088f8 <AllDevicesReady+0xb8>)
 80088cc:	78db      	ldrb	r3, [r3, #3]
 80088ce:	2201      	movs	r2, #1
 80088d0:	4053      	eors	r3, r2
 80088d2:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <AllDevicesReady+0x9c>
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <AllDevicesReady+0x9e>
 80088dc:	2300      	movs	r3, #0
 80088de:	1c1a      	adds	r2, r3, #0
 80088e0:	2301      	movs	r3, #1
 80088e2:	4013      	ands	r3, r2
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	e000      	b.n	80088ea <AllDevicesReady+0xaa>
    }
  }
  return false;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	0018      	movs	r0, r3
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000fc8 	.word	0x20000fc8
 80088f4:	20000fb5 	.word	0x20000fb5
 80088f8:	20000fd0 	.word	0x20000fd0
 80088fc:	20000fb4 	.word	0x20000fb4
 8008900:	20000fd4 	.word	0x20000fd4
 8008904:	2000008d 	.word	0x2000008d
 8008908:	20000fb6 	.word	0x20000fb6
 800890c:	20000fb7 	.word	0x20000fb7

08008910 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008914:	4b11      	ldr	r3, [pc, #68]	@ (800895c <EnabledConnectedDevices+0x4c>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800891c:	4b10      	ldr	r3, [pc, #64]	@ (8008960 <EnabledConnectedDevices+0x50>)
 800891e:	2201      	movs	r2, #1
 8008920:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 8008922:	4b0e      	ldr	r3, [pc, #56]	@ (800895c <EnabledConnectedDevices+0x4c>)
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d006      	beq.n	8008938 <EnabledConnectedDevices+0x28>
 800892a:	4b0c      	ldr	r3, [pc, #48]	@ (800895c <EnabledConnectedDevices+0x4c>)
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 8008932:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <EnabledConnectedDevices+0x50>)
 8008934:	2201      	movs	r2, #1
 8008936:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008938:	4b08      	ldr	r3, [pc, #32]	@ (800895c <EnabledConnectedDevices+0x4c>)
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <EnabledConnectedDevices+0x50>)
 8008942:	2201      	movs	r2, #1
 8008944:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008946:	4b05      	ldr	r3, [pc, #20]	@ (800895c <EnabledConnectedDevices+0x4c>)
 8008948:	78db      	ldrb	r3, [r3, #3]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 800894e:	4b04      	ldr	r3, [pc, #16]	@ (8008960 <EnabledConnectedDevices+0x50>)
 8008950:	2201      	movs	r2, #1
 8008952:	70da      	strb	r2, [r3, #3]
  }
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	20000fd4 	.word	0x20000fd4
 8008960:	20000fd0 	.word	0x20000fd0

08008964 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008968:	4a0a      	ldr	r2, [pc, #40]	@ (8008994 <DisableConnectedDevices+0x30>)
 800896a:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <DisableConnectedDevices+0x34>)
 800896c:	0019      	movs	r1, r3
 800896e:	2003      	movs	r0, #3
 8008970:	f005 fe54 	bl	800e61c <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8008974:	4b09      	ldr	r3, [pc, #36]	@ (800899c <DisableConnectedDevices+0x38>)
 8008976:	2200      	movs	r2, #0
 8008978:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800897a:	4b08      	ldr	r3, [pc, #32]	@ (800899c <DisableConnectedDevices+0x38>)
 800897c:	2200      	movs	r2, #0
 800897e:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008980:	4b06      	ldr	r3, [pc, #24]	@ (800899c <DisableConnectedDevices+0x38>)
 8008982:	2200      	movs	r2, #0
 8008984:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8008986:	4b05      	ldr	r3, [pc, #20]	@ (800899c <DisableConnectedDevices+0x38>)
 8008988:	2200      	movs	r2, #0
 800898a:	70da      	strb	r2, [r3, #3]
}
 800898c:	46c0      	nop			@ (mov r8, r8)
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			@ (mov r8, r8)
 8008994:	080245a4 	.word	0x080245a4
 8008998:	080242ec 	.word	0x080242ec
 800899c:	20000fd0 	.word	0x20000fd0

080089a0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80089a4:	4b02      	ldr	r3, [pc, #8]	@ (80089b0 <ResetdBAmax+0x10>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20001020 	.word	0x20001020

080089b4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80089bc:	f006 fa6e 	bl	800ee9c <HAL_GetTick>
 80089c0:	0002      	movs	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	18d2      	adds	r2, r2, r3
 80089c6:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <setMICTimeStamp+0x20>)
 80089c8:	601a      	str	r2, [r3, #0]
}
 80089ca:	46c0      	nop			@ (mov r8, r8)
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b002      	add	sp, #8
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	46c0      	nop			@ (mov r8, r8)
 80089d4:	20001028 	.word	0x20001028

080089d8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  counter = 0;
 80089dc:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <ResetDBACalculator+0x1c>)
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80089e2:	4b05      	ldr	r3, [pc, #20]	@ (80089f8 <ResetDBACalculator+0x20>)
 80089e4:	2201      	movs	r2, #1
 80089e6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80089e8:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <ResetDBACalculator+0x24>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
}
 80089ee:	46c0      	nop			@ (mov r8, r8)
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20001024 	.word	0x20001024
 80089f8:	2000008c 	.word	0x2000008c
 80089fc:	20001025 	.word	0x20001025

08008a00 <MIC_Print>:

void MIC_Print(void) {
 8008a00:	b5b0      	push	{r4, r5, r7, lr}
 8008a02:	b08a      	sub	sp, #40	@ 0x28
 8008a04:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008a06:	4b9f      	ldr	r3, [pc, #636]	@ (8008c84 <MIC_Print+0x284>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b9f      	ldr	r3, [pc, #636]	@ (8008c88 <MIC_Print+0x288>)
 8008a0c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8008c8c <MIC_Print+0x28c>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	001a      	movs	r2, r3
 8008a14:	4b9c      	ldr	r3, [pc, #624]	@ (8008c88 <MIC_Print+0x288>)
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	4b9d      	ldr	r3, [pc, #628]	@ (8008c90 <MIC_Print+0x290>)
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	50d1      	str	r1, [r2, r3]
  counter++;
 8008a1e:	4b9b      	ldr	r3, [pc, #620]	@ (8008c8c <MIC_Print+0x28c>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	4b99      	ldr	r3, [pc, #612]	@ (8008c8c <MIC_Print+0x28c>)
 8008a28:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008a2a:	4b98      	ldr	r3, [pc, #608]	@ (8008c8c <MIC_Print+0x28c>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d80b      	bhi.n	8008a4a <MIC_Print+0x4a>
 8008a32:	4b98      	ldr	r3, [pc, #608]	@ (8008c94 <MIC_Print+0x294>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2201      	movs	r2, #1
 8008a38:	4053      	eors	r3, r2
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <MIC_Print+0x4a>
    denominator = counter;
 8008a40:	4b92      	ldr	r3, [pc, #584]	@ (8008c8c <MIC_Print+0x28c>)
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	4b94      	ldr	r3, [pc, #592]	@ (8008c98 <MIC_Print+0x298>)
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	e005      	b.n	8008a56 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008a4a:	4b93      	ldr	r3, [pc, #588]	@ (8008c98 <MIC_Print+0x298>)
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008a50:	4b90      	ldr	r3, [pc, #576]	@ (8008c94 <MIC_Print+0x294>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008a56:	4b91      	ldr	r3, [pc, #580]	@ (8008c9c <MIC_Print+0x29c>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008a5c:	230f      	movs	r3, #15
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
 8008a64:	e042      	b.n	8008aec <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8008a66:	240f      	movs	r4, #15
 8008a68:	193b      	adds	r3, r7, r4
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	4b88      	ldr	r3, [pc, #544]	@ (8008c90 <MIC_Print+0x290>)
 8008a6e:	0092      	lsls	r2, r2, #2
 8008a70:	58d2      	ldr	r2, [r2, r3]
 8008a72:	4b8a      	ldr	r3, [pc, #552]	@ (8008c9c <MIC_Print+0x29c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	1c19      	adds	r1, r3, #0
 8008a78:	1c10      	adds	r0, r2, #0
 8008a7a:	f7f7 ff21 	bl	80008c0 <__aeabi_fadd>
 8008a7e:	1c03      	adds	r3, r0, #0
 8008a80:	1c1a      	adds	r2, r3, #0
 8008a82:	4b86      	ldr	r3, [pc, #536]	@ (8008c9c <MIC_Print+0x29c>)
 8008a84:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	4b81      	ldr	r3, [pc, #516]	@ (8008c90 <MIC_Print+0x290>)
 8008a8c:	0092      	lsls	r2, r2, #2
 8008a8e:	58d2      	ldr	r2, [r2, r3]
 8008a90:	4b83      	ldr	r3, [pc, #524]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	1c19      	adds	r1, r3, #0
 8008a96:	1c10      	adds	r0, r2, #0
 8008a98:	f7f7 fd5e 	bl	8000558 <__aeabi_fcmpgt>
 8008a9c:	1e03      	subs	r3, r0, #0
 8008a9e:	d006      	beq.n	8008aae <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008aa0:	193b      	adds	r3, r7, r4
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8008c90 <MIC_Print+0x290>)
 8008aa6:	0092      	lsls	r2, r2, #2
 8008aa8:	58d2      	ldr	r2, [r2, r3]
 8008aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008aac:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008aae:	4b7b      	ldr	r3, [pc, #492]	@ (8008c9c <MIC_Print+0x29c>)
 8008ab0:	681c      	ldr	r4, [r3, #0]
 8008ab2:	4b79      	ldr	r3, [pc, #484]	@ (8008c98 <MIC_Print+0x298>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7f8 fdd6 	bl	8001668 <__aeabi_ui2f>
 8008abc:	1c03      	adds	r3, r0, #0
 8008abe:	1c19      	adds	r1, r3, #0
 8008ac0:	1c20      	adds	r0, r4, #0
 8008ac2:	f7f8 f887 	bl	8000bd4 <__aeabi_fdiv>
 8008ac6:	1c03      	adds	r3, r0, #0
 8008ac8:	1c1a      	adds	r2, r3, #0
 8008aca:	4b76      	ldr	r3, [pc, #472]	@ (8008ca4 <MIC_Print+0x2a4>)
 8008acc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 8008ace:	4b6e      	ldr	r3, [pc, #440]	@ (8008c88 <MIC_Print+0x288>)
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	4b73      	ldr	r3, [pc, #460]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008ad4:	6819      	ldr	r1, [r3, #0]
 8008ad6:	4b73      	ldr	r3, [pc, #460]	@ (8008ca4 <MIC_Print+0x2a4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	1c1a      	adds	r2, r3, #0
 8008adc:	f7fa ff2c 	bl	8003938 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008ae0:	210f      	movs	r1, #15
 8008ae2:	187b      	adds	r3, r7, r1
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	187b      	adds	r3, r7, r1
 8008ae8:	3201      	adds	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	4b6a      	ldr	r3, [pc, #424]	@ (8008c98 <MIC_Print+0x298>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	220f      	movs	r2, #15
 8008af2:	18ba      	adds	r2, r7, r2
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3b5      	bcc.n	8008a66 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008afa:	4b63      	ldr	r3, [pc, #396]	@ (8008c88 <MIC_Print+0x288>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	1c18      	adds	r0, r3, #0
 8008b00:	f7fa fcb0 	bl	8003464 <__aeabi_f2d>
 8008b04:	6038      	str	r0, [r7, #0]
 8008b06:	6079      	str	r1, [r7, #4]
 8008b08:	4b65      	ldr	r3, [pc, #404]	@ (8008ca0 <MIC_Print+0x2a0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	1c18      	adds	r0, r3, #0
 8008b0e:	f7fa fca9 	bl	8003464 <__aeabi_f2d>
 8008b12:	0004      	movs	r4, r0
 8008b14:	000d      	movs	r5, r1
 8008b16:	4b63      	ldr	r3, [pc, #396]	@ (8008ca4 <MIC_Print+0x2a4>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	1c18      	adds	r0, r3, #0
 8008b1c:	f7fa fca2 	bl	8003464 <__aeabi_f2d>
 8008b20:	0002      	movs	r2, r0
 8008b22:	000b      	movs	r3, r1
 8008b24:	4960      	ldr	r1, [pc, #384]	@ (8008ca8 <MIC_Print+0x2a8>)
 8008b26:	9204      	str	r2, [sp, #16]
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	9402      	str	r4, [sp, #8]
 8008b2c:	9503      	str	r5, [sp, #12]
 8008b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8008cac <MIC_Print+0x2ac>)
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	0008      	movs	r0, r1
 8008b38:	f017 fa54 	bl	801ffe4 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008b3c:	4b53      	ldr	r3, [pc, #332]	@ (8008c8c <MIC_Print+0x28c>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b0a      	cmp	r3, #10
 8008b42:	d902      	bls.n	8008b4a <MIC_Print+0x14a>
    counter = 0;
 8008b44:	4b51      	ldr	r3, [pc, #324]	@ (8008c8c <MIC_Print+0x28c>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008c88 <MIC_Print+0x288>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4958      	ldr	r1, [pc, #352]	@ (8008cb0 <MIC_Print+0x2b0>)
 8008b50:	1c18      	adds	r0, r3, #0
 8008b52:	f7f7 fd0b 	bl	800056c <__aeabi_fcmpge>
 8008b56:	1e03      	subs	r3, r0, #0
 8008b58:	d004      	beq.n	8008b64 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	2001      	movs	r0, #1
 8008b60:	f004 fb5a 	bl	800d218 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008b64:	4b48      	ldr	r3, [pc, #288]	@ (8008c88 <MIC_Print+0x288>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4952      	ldr	r1, [pc, #328]	@ (8008cb4 <MIC_Print+0x2b4>)
 8008b6a:	1c18      	adds	r0, r3, #0
 8008b6c:	f7f7 fcfe 	bl	800056c <__aeabi_fcmpge>
 8008b70:	1e03      	subs	r3, r0, #0
 8008b72:	d00c      	beq.n	8008b8e <MIC_Print+0x18e>
 8008b74:	4b44      	ldr	r3, [pc, #272]	@ (8008c88 <MIC_Print+0x288>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	494d      	ldr	r1, [pc, #308]	@ (8008cb0 <MIC_Print+0x2b0>)
 8008b7a:	1c18      	adds	r0, r3, #0
 8008b7c:	f7f7 fcd8 	bl	8000530 <__aeabi_fcmplt>
 8008b80:	1e03      	subs	r3, r0, #0
 8008b82:	d004      	beq.n	8008b8e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	2001      	movs	r0, #1
 8008b8a:	f004 fb45 	bl	800d218 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c88 <MIC_Print+0x288>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4949      	ldr	r1, [pc, #292]	@ (8008cb8 <MIC_Print+0x2b8>)
 8008b94:	1c18      	adds	r0, r3, #0
 8008b96:	f7f7 fce9 	bl	800056c <__aeabi_fcmpge>
 8008b9a:	1e03      	subs	r3, r0, #0
 8008b9c:	d00c      	beq.n	8008bb8 <MIC_Print+0x1b8>
 8008b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c88 <MIC_Print+0x288>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4944      	ldr	r1, [pc, #272]	@ (8008cb4 <MIC_Print+0x2b4>)
 8008ba4:	1c18      	adds	r0, r3, #0
 8008ba6:	f7f7 fcc3 	bl	8000530 <__aeabi_fcmplt>
 8008baa:	1e03      	subs	r3, r0, #0
 8008bac:	d004      	beq.n	8008bb8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	f004 fb30 	bl	800d218 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008bb8:	4b33      	ldr	r3, [pc, #204]	@ (8008c88 <MIC_Print+0x288>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	493f      	ldr	r1, [pc, #252]	@ (8008cbc <MIC_Print+0x2bc>)
 8008bbe:	1c18      	adds	r0, r3, #0
 8008bc0:	f7f7 fcd4 	bl	800056c <__aeabi_fcmpge>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d00c      	beq.n	8008be2 <MIC_Print+0x1e2>
 8008bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8008c88 <MIC_Print+0x288>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	493a      	ldr	r1, [pc, #232]	@ (8008cb8 <MIC_Print+0x2b8>)
 8008bce:	1c18      	adds	r0, r3, #0
 8008bd0:	f7f7 fcae 	bl	8000530 <__aeabi_fcmplt>
 8008bd4:	1e03      	subs	r3, r0, #0
 8008bd6:	d004      	beq.n	8008be2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2101      	movs	r1, #1
 8008bdc:	2000      	movs	r0, #0
 8008bde:	f004 fb1b 	bl	800d218 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008be2:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <MIC_Print+0x288>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4936      	ldr	r1, [pc, #216]	@ (8008cc0 <MIC_Print+0x2c0>)
 8008be8:	1c18      	adds	r0, r3, #0
 8008bea:	f7f7 fcbf 	bl	800056c <__aeabi_fcmpge>
 8008bee:	1e03      	subs	r3, r0, #0
 8008bf0:	d00c      	beq.n	8008c0c <MIC_Print+0x20c>
 8008bf2:	4b25      	ldr	r3, [pc, #148]	@ (8008c88 <MIC_Print+0x288>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4931      	ldr	r1, [pc, #196]	@ (8008cbc <MIC_Print+0x2bc>)
 8008bf8:	1c18      	adds	r0, r3, #0
 8008bfa:	f7f7 fc99 	bl	8000530 <__aeabi_fcmplt>
 8008bfe:	1e03      	subs	r3, r0, #0
 8008c00:	d004      	beq.n	8008c0c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8008c02:	2201      	movs	r2, #1
 8008c04:	2101      	movs	r1, #1
 8008c06:	2000      	movs	r0, #0
 8008c08:	f004 fb06 	bl	800d218 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8008c88 <MIC_Print+0x288>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	492c      	ldr	r1, [pc, #176]	@ (8008cc4 <MIC_Print+0x2c4>)
 8008c12:	1c18      	adds	r0, r3, #0
 8008c14:	f7f7 fcaa 	bl	800056c <__aeabi_fcmpge>
 8008c18:	1e03      	subs	r3, r0, #0
 8008c1a:	d00c      	beq.n	8008c36 <MIC_Print+0x236>
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c88 <MIC_Print+0x288>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4927      	ldr	r1, [pc, #156]	@ (8008cc0 <MIC_Print+0x2c0>)
 8008c22:	1c18      	adds	r0, r3, #0
 8008c24:	f7f7 fc84 	bl	8000530 <__aeabi_fcmplt>
 8008c28:	1e03      	subs	r3, r0, #0
 8008c2a:	d004      	beq.n	8008c36 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	2100      	movs	r1, #0
 8008c30:	2000      	movs	r0, #0
 8008c32:	f004 faf1 	bl	800d218 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008c36:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <MIC_Print+0x288>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4923      	ldr	r1, [pc, #140]	@ (8008cc8 <MIC_Print+0x2c8>)
 8008c3c:	1c18      	adds	r0, r3, #0
 8008c3e:	f7f7 fc95 	bl	800056c <__aeabi_fcmpge>
 8008c42:	1e03      	subs	r3, r0, #0
 8008c44:	d00c      	beq.n	8008c60 <MIC_Print+0x260>
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <MIC_Print+0x288>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	491e      	ldr	r1, [pc, #120]	@ (8008cc4 <MIC_Print+0x2c4>)
 8008c4c:	1c18      	adds	r0, r3, #0
 8008c4e:	f7f7 fc6f 	bl	8000530 <__aeabi_fcmplt>
 8008c52:	1e03      	subs	r3, r0, #0
 8008c54:	d004      	beq.n	8008c60 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8008c56:	2201      	movs	r2, #1
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	f004 fadc 	bl	800d218 <SetDBLED>
  }
  if(dBA < 35){//off
 8008c60:	4b09      	ldr	r3, [pc, #36]	@ (8008c88 <MIC_Print+0x288>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4918      	ldr	r1, [pc, #96]	@ (8008cc8 <MIC_Print+0x2c8>)
 8008c66:	1c18      	adds	r0, r3, #0
 8008c68:	f7f7 fc62 	bl	8000530 <__aeabi_fcmplt>
 8008c6c:	1e03      	subs	r3, r0, #0
 8008c6e:	d100      	bne.n	8008c72 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8008c70:	e004      	b.n	8008c7c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	2000      	movs	r0, #0
 8008c78:	f004 face 	bl	800d218 <SetDBLED>
}
 8008c7c:	46c0      	nop			@ (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b004      	add	sp, #16
 8008c82:	bdb0      	pop	{r4, r5, r7, pc}
 8008c84:	2000101c 	.word	0x2000101c
 8008c88:	20000fe8 	.word	0x20000fe8
 8008c8c:	20001024 	.word	0x20001024
 8008c90:	20000fec 	.word	0x20000fec
 8008c94:	20001025 	.word	0x20001025
 8008c98:	2000008c 	.word	0x2000008c
 8008c9c:	20001018 	.word	0x20001018
 8008ca0:	20001020 	.word	0x20001020
 8008ca4:	20001014 	.word	0x20001014
 8008ca8:	080245b8 	.word	0x080245b8
 8008cac:	20000fdc 	.word	0x20000fdc
 8008cb0:	42b40000 	.word	0x42b40000
 8008cb4:	42a00000 	.word	0x42a00000
 8008cb8:	428c0000 	.word	0x428c0000
 8008cbc:	42700000 	.word	0x42700000
 8008cc0:	42480000 	.word	0x42480000
 8008cc4:	42200000 	.word	0x42200000
 8008cc8:	420c0000 	.word	0x420c0000

08008ccc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008cd2:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <MIC_TestMeasurementDone+0x4c>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4a10      	ldr	r2, [pc, #64]	@ (8008d1c <MIC_TestMeasurementDone+0x50>)
 8008cda:	4911      	ldr	r1, [pc, #68]	@ (8008d20 <MIC_TestMeasurementDone+0x54>)
 8008cdc:	2002      	movs	r0, #2
 8008cde:	f005 fc9d 	bl	800e61c <CreateLine>
  if(DataReady) {
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <MIC_TestMeasurementDone+0x4c>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d010      	beq.n	8008d0e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008cec:	1dfb      	adds	r3, r7, #7
 8008cee:	4a0d      	ldr	r2, [pc, #52]	@ (8008d24 <MIC_TestMeasurementDone+0x58>)
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8008d24 <MIC_TestMeasurementDone+0x58>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8008d28 <MIC_TestMeasurementDone+0x5c>)
 8008cfc:	4908      	ldr	r1, [pc, #32]	@ (8008d20 <MIC_TestMeasurementDone+0x54>)
 8008cfe:	2002      	movs	r0, #2
 8008d00:	f005 fc8c 	bl	800e61c <CreateLine>
    ResetMICIndicator();
 8008d04:	f004 fb76 	bl	800d3f4 <ResetMICIndicator>
    return Check;
 8008d08:	1dfb      	adds	r3, r7, #7
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	e000      	b.n	8008d10 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	0018      	movs	r0, r3
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b002      	add	sp, #8
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	2000116d 	.word	0x2000116d
 8008d1c:	08024600 	.word	0x08024600
 8008d20:	0802462c 	.word	0x0802462c
 8008d24:	2000116e 	.word	0x2000116e
 8008d28:	08024630 	.word	0x08024630

08008d2c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008d32:	4b78      	ldr	r3, [pc, #480]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d100      	bne.n	8008d3c <Mic_Upkeep+0x10>
 8008d3a:	e0b8      	b.n	8008eae <Mic_Upkeep+0x182>
 8008d3c:	dd00      	ble.n	8008d40 <Mic_Upkeep+0x14>
 8008d3e:	e0d3      	b.n	8008ee8 <Mic_Upkeep+0x1bc>
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d037      	beq.n	8008db4 <Mic_Upkeep+0x88>
 8008d44:	dd00      	ble.n	8008d48 <Mic_Upkeep+0x1c>
 8008d46:	e0cf      	b.n	8008ee8 <Mic_Upkeep+0x1bc>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <Mic_Upkeep+0x26>
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d014      	beq.n	8008d7a <Mic_Upkeep+0x4e>
 8008d50:	e0ca      	b.n	8008ee8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008d52:	2001      	movs	r0, #1
 8008d54:	f003 fb5e 	bl	800c414 <enableMicrophone>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	001a      	movs	r2, r3
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	4053      	eors	r3, r2
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008d66:	4a6c      	ldr	r2, [pc, #432]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008d68:	4b6c      	ldr	r3, [pc, #432]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008d6a:	217f      	movs	r1, #127	@ 0x7f
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f005 fd0d 	bl	800e78c <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008d72:	4b68      	ldr	r3, [pc, #416]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008d74:	2201      	movs	r2, #1
 8008d76:	701a      	strb	r2, [r3, #0]
    break;
 8008d78:	e0c5      	b.n	8008f06 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008d7a:	f003 fb27 	bl	800c3cc <micSettlingComplete>
 8008d7e:	1e03      	subs	r3, r0, #0
 8008d80:	d105      	bne.n	8008d8e <Mic_Upkeep+0x62>
 8008d82:	4b67      	ldr	r3, [pc, #412]	@ (8008f20 <Mic_Upkeep+0x1f4>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d100      	bne.n	8008d8e <Mic_Upkeep+0x62>
 8008d8c:	e0b6      	b.n	8008efc <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008d8e:	f003 fbab 	bl	800c4e8 <startSPLcalculation>
 8008d92:	0003      	movs	r3, r0
 8008d94:	001a      	movs	r2, r3
 8008d96:	2301      	movs	r3, #1
 8008d98:	4053      	eors	r3, r2
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008da0:	4a5d      	ldr	r2, [pc, #372]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008da2:	4b5e      	ldr	r3, [pc, #376]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008da4:	2188      	movs	r1, #136	@ 0x88
 8008da6:	0018      	movs	r0, r3
 8008da8:	f005 fcf0 	bl	800e78c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008dac:	4b59      	ldr	r3, [pc, #356]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008dae:	2202      	movs	r2, #2
 8008db0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008db2:	e0a3      	b.n	8008efc <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008db4:	4b5b      	ldr	r3, [pc, #364]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	2101      	movs	r1, #1
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f003 f9e8 	bl	800c190 <getSoundData>
 8008dc0:	1e03      	subs	r3, r0, #0
 8008dc2:	d100      	bne.n	8008dc6 <Mic_Upkeep+0x9a>
 8008dc4:	e09c      	b.n	8008f00 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008dc6:	f003 fae1 	bl	800c38c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008dca:	4b56      	ldr	r3, [pc, #344]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	001a      	movs	r2, r3
 8008dd0:	4b54      	ldr	r3, [pc, #336]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	4954      	ldr	r1, [pc, #336]	@ (8008f28 <Mic_Upkeep+0x1fc>)
 8008dd6:	0038      	movs	r0, r7
 8008dd8:	f017 f974 	bl	80200c4 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008ddc:	4b51      	ldr	r3, [pc, #324]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008dde:	89db      	ldrh	r3, [r3, #14]
 8008de0:	001a      	movs	r2, r3
 8008de2:	4b50      	ldr	r3, [pc, #320]	@ (8008f24 <Mic_Upkeep+0x1f8>)
 8008de4:	7c1b      	ldrb	r3, [r3, #16]
 8008de6:	4951      	ldr	r1, [pc, #324]	@ (8008f2c <Mic_Upkeep+0x200>)
 8008de8:	4851      	ldr	r0, [pc, #324]	@ (8008f30 <Mic_Upkeep+0x204>)
 8008dea:	f017 f96b 	bl	80200c4 <siprintf>
      dBValue = atof(dBbuffer);
 8008dee:	003b      	movs	r3, r7
 8008df0:	0018      	movs	r0, r3
 8008df2:	f015 fd17 	bl	801e824 <atof>
 8008df6:	0002      	movs	r2, r0
 8008df8:	000b      	movs	r3, r1
 8008dfa:	0010      	movs	r0, r2
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	f7fa fb79 	bl	80034f4 <__aeabi_d2f>
 8008e02:	1c02      	adds	r2, r0, #0
 8008e04:	4b4b      	ldr	r3, [pc, #300]	@ (8008f34 <Mic_Upkeep+0x208>)
 8008e06:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008e08:	4b4a      	ldr	r3, [pc, #296]	@ (8008f34 <Mic_Upkeep+0x208>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	494a      	ldr	r1, [pc, #296]	@ (8008f38 <Mic_Upkeep+0x20c>)
 8008e0e:	1c18      	adds	r0, r3, #0
 8008e10:	f7f8 f8c6 	bl	8000fa0 <__aeabi_fmul>
 8008e14:	1c03      	adds	r3, r0, #0
 8008e16:	1c18      	adds	r0, r3, #0
 8008e18:	f7fa fb24 	bl	8003464 <__aeabi_f2d>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4b47      	ldr	r3, [pc, #284]	@ (8008f3c <Mic_Upkeep+0x210>)
 8008e20:	f7f8 fc64 	bl	80016ec <__aeabi_dadd>
 8008e24:	0002      	movs	r2, r0
 8008e26:	000b      	movs	r3, r1
 8008e28:	0010      	movs	r0, r2
 8008e2a:	0019      	movs	r1, r3
 8008e2c:	f7fa fa8c 	bl	8003348 <__aeabi_d2iz>
 8008e30:	0003      	movs	r3, r0
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7fa fac4 	bl	80033c0 <__aeabi_i2d>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4b41      	ldr	r3, [pc, #260]	@ (8008f40 <Mic_Upkeep+0x214>)
 8008e3c:	f7f8 ffba 	bl	8001db4 <__aeabi_ddiv>
 8008e40:	0002      	movs	r2, r0
 8008e42:	000b      	movs	r3, r1
 8008e44:	0010      	movs	r0, r2
 8008e46:	0019      	movs	r1, r3
 8008e48:	f7fa fb54 	bl	80034f4 <__aeabi_d2f>
 8008e4c:	1c02      	adds	r2, r0, #0
 8008e4e:	4b39      	ldr	r3, [pc, #228]	@ (8008f34 <Mic_Upkeep+0x208>)
 8008e50:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008e52:	f7ff fdd5 	bl	8008a00 <MIC_Print>
      if (!startSPLcalculation()) {
 8008e56:	f003 fb47 	bl	800c4e8 <startSPLcalculation>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	001a      	movs	r2, r3
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4053      	eors	r3, r2
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e68:	4a2b      	ldr	r2, [pc, #172]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008e6c:	2198      	movs	r1, #152	@ 0x98
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f005 fc8c 	bl	800e78c <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008e74:	2000      	movs	r0, #0
 8008e76:	f003 facd 	bl	800c414 <enableMicrophone>
 8008e7a:	0003      	movs	r3, r0
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4053      	eors	r3, r2
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e88:	4a23      	ldr	r2, [pc, #140]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008e8a:	4b24      	ldr	r3, [pc, #144]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008e8c:	219b      	movs	r1, #155	@ 0x9b
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f005 fc7c 	bl	800e78c <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008e94:	f006 f802 	bl	800ee9c <HAL_GetTick>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f44 <Mic_Upkeep+0x218>)
 8008e9c:	189a      	adds	r2, r3, r2
 8008e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f48 <Mic_Upkeep+0x21c>)
 8008ea0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008ea8:	f004 faa4 	bl	800d3f4 <ResetMICIndicator>
    }
    break;
 8008eac:	e028      	b.n	8008f00 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008eae:	4b26      	ldr	r3, [pc, #152]	@ (8008f48 <Mic_Upkeep+0x21c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f005 fb5c 	bl	800e570 <TimestampIsReached>
 8008eb8:	1e03      	subs	r3, r0, #0
 8008eba:	d023      	beq.n	8008f04 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	f003 faa9 	bl	800c414 <enableMicrophone>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4053      	eors	r3, r2
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008ed0:	4a11      	ldr	r2, [pc, #68]	@ (8008f18 <Mic_Upkeep+0x1ec>)
 8008ed2:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <Mic_Upkeep+0x1f0>)
 8008ed4:	21a6      	movs	r1, #166	@ 0xa6
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f005 fc58 	bl	800e78c <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008edc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008ee2:	f004 fa45 	bl	800d370 <SetMICIndicator>
    }
    break;
 8008ee6:	e00d      	b.n	8008f04 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008ee8:	4a18      	ldr	r2, [pc, #96]	@ (8008f4c <Mic_Upkeep+0x220>)
 8008eea:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <Mic_Upkeep+0x224>)
 8008eec:	0019      	movs	r1, r3
 8008eee:	2003      	movs	r0, #3
 8008ef0:	f005 fb94 	bl	800e61c <CreateLine>
    MicState = MIC_STATE_INIT;
 8008ef4:	4b07      	ldr	r3, [pc, #28]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
    break;
 8008efa:	e004      	b.n	8008f06 <Mic_Upkeep+0x1da>
    break;
 8008efc:	46c0      	nop			@ (mov r8, r8)
 8008efe:	e002      	b.n	8008f06 <Mic_Upkeep+0x1da>
    break;
 8008f00:	46c0      	nop			@ (mov r8, r8)
 8008f02:	e000      	b.n	8008f06 <Mic_Upkeep+0x1da>
    break;
 8008f04:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008f06:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <Mic_Upkeep+0x1e8>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
}
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	b002      	add	sp, #8
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	46c0      	nop			@ (mov r8, r8)
 8008f14:	2000103e 	.word	0x2000103e
 8008f18:	08024648 	.word	0x08024648
 8008f1c:	080256a8 	.word	0x080256a8
 8008f20:	2000116d 	.word	0x2000116d
 8008f24:	2000102c 	.word	0x2000102c
 8008f28:	08024664 	.word	0x08024664
 8008f2c:	0802466c 	.word	0x0802466c
 8008f30:	20000fdc 	.word	0x20000fdc
 8008f34:	2000101c 	.word	0x2000101c
 8008f38:	42c80000 	.word	0x42c80000
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	40590000 	.word	0x40590000
 8008f44:	000002f3 	.word	0x000002f3
 8008f48:	20001028 	.word	0x20001028
 8008f4c:	08024674 	.word	0x08024674
 8008f50:	08024694 	.word	0x08024694

08008f54 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008f5a:	1d3b      	adds	r3, r7, #4
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	2314      	movs	r3, #20
 8008f60:	001a      	movs	r2, r3
 8008f62:	2100      	movs	r1, #0
 8008f64:	f017 f9f2 	bl	802034c <memset>
  RTC_DateTypeDef sDate = {0};
 8008f68:	003b      	movs	r3, r7
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f70:	4a2e      	ldr	r2, [pc, #184]	@ (800902c <MX_RTC_Init+0xd8>)
 8008f72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008f74:	4b2c      	ldr	r3, [pc, #176]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f7c:	227f      	movs	r2, #127	@ 0x7f
 8008f7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008f80:	4b29      	ldr	r3, [pc, #164]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f82:	22ff      	movs	r2, #255	@ 0xff
 8008f84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f86:	4b28      	ldr	r3, [pc, #160]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008f8c:	4b26      	ldr	r3, [pc, #152]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f92:	4b25      	ldr	r3, [pc, #148]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f98:	4b23      	ldr	r3, [pc, #140]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f9e:	4b22      	ldr	r3, [pc, #136]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f00c ffff 	bl	8015fa4 <HAL_RTC_Init>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d001      	beq.n	8008fae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008faa:	f7ff f9c3 	bl	8008334 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008fae:	1d3b      	adds	r3, r7, #4
 8008fb0:	220d      	movs	r2, #13
 8008fb2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008fb4:	1d3b      	adds	r3, r7, #4
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008fc0:	1d3b      	adds	r3, r7, #4
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008fc6:	1d3b      	adds	r3, r7, #4
 8008fc8:	2200      	movs	r2, #0
 8008fca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008fcc:	1d39      	adds	r1, r7, #4
 8008fce:	4b16      	ldr	r3, [pc, #88]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f00d f882 	bl	80160dc <HAL_RTC_SetTime>
 8008fd8:	1e03      	subs	r3, r0, #0
 8008fda:	d001      	beq.n	8008fe0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008fdc:	f7ff f9aa 	bl	8008334 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008fe0:	003b      	movs	r3, r7
 8008fe2:	2206      	movs	r2, #6
 8008fe4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008fe6:	003b      	movs	r3, r7
 8008fe8:	2211      	movs	r2, #17
 8008fea:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008fec:	003b      	movs	r3, r7
 8008fee:	2217      	movs	r2, #23
 8008ff0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008ff2:	003b      	movs	r3, r7
 8008ff4:	2218      	movs	r2, #24
 8008ff6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008ff8:	0039      	movs	r1, r7
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8009028 <MX_RTC_Init+0xd4>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	0018      	movs	r0, r3
 8009000:	f00d f974 	bl	80162ec <HAL_RTC_SetDate>
 8009004:	1e03      	subs	r3, r0, #0
 8009006:	d001      	beq.n	800900c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009008:	f7ff f994 	bl	8008334 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800900c:	4b06      	ldr	r3, [pc, #24]	@ (8009028 <MX_RTC_Init+0xd4>)
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	0018      	movs	r0, r3
 8009014:	f00d fb24 	bl	8016660 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009018:	1e03      	subs	r3, r0, #0
 800901a:	d001      	beq.n	8009020 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800901c:	f7ff f98a 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009020:	46c0      	nop			@ (mov r8, r8)
 8009022:	46bd      	mov	sp, r7
 8009024:	b006      	add	sp, #24
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20001040 	.word	0x20001040
 800902c:	40002800 	.word	0x40002800

08009030 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a0a      	ldr	r2, [pc, #40]	@ (8009068 <HAL_RTC_MspInit+0x38>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d10e      	bne.n	8009060 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009042:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <HAL_RTC_MspInit+0x3c>)
 8009044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <HAL_RTC_MspInit+0x3c>)
 8009048:	2180      	movs	r1, #128	@ 0x80
 800904a:	02c9      	lsls	r1, r1, #11
 800904c:	430a      	orrs	r2, r1
 800904e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009050:	2200      	movs	r2, #0
 8009052:	2100      	movs	r1, #0
 8009054:	2002      	movs	r0, #2
 8009056:	f006 fbc5 	bl	800f7e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800905a:	2002      	movs	r0, #2
 800905c:	f006 fbd7 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009060:	46c0      	nop			@ (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b002      	add	sp, #8
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40002800 	.word	0x40002800
 800906c:	40021000 	.word	0x40021000

08009070 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoxi;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009074:	4b02      	ldr	r3, [pc, #8]	@ (8009080 <sen5x_Get_sen5x_enable_state+0x10>)
 8009076:	781b      	ldrb	r3, [r3, #0]
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	46c0      	nop			@ (mov r8, r8)
 8009080:	20001068 	.word	0x20001068

08009084 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800908c:	f005 ff06 	bl	800ee9c <HAL_GetTick>
 8009090:	0002      	movs	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	18d2      	adds	r2, r2, r3
 8009096:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <setsen5xReadTimer+0x20>)
 8009098:	601a      	str	r2, [r3, #0]
}
 800909a:	46c0      	nop			@ (mov r8, r8)
 800909c:	46bd      	mov	sp, r7
 800909e:	b002      	add	sp, #8
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	46c0      	nop			@ (mov r8, r8)
 80090a4:	20001088 	.word	0x20001088

080090a8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	0002      	movs	r2, r0
 80090b0:	1dfb      	adds	r3, r7, #7
 80090b2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 80090b4:	4b03      	ldr	r3, [pc, #12]	@ (80090c4 <setsen5xSamplecounter+0x1c>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	46bd      	mov	sp, r7
 80090be:	b002      	add	sp, #8
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	46c0      	nop			@ (mov r8, r8)
 80090c4:	20001074 	.word	0x20001074

080090c8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 80090d0:	f7ff f9ac 	bl	800842c <IsPMSensorEnabled>
 80090d4:	1e03      	subs	r3, r0, #0
 80090d6:	d02c      	beq.n	8009132 <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 80090d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009150 <sen5x_enable+0x88>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	1e5a      	subs	r2, r3, #1
 80090de:	4193      	sbcs	r3, r2
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2201      	movs	r2, #1
 80090e4:	4053      	eors	r3, r2
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	1c1a      	adds	r2, r3, #0
 80090ea:	2301      	movs	r3, #1
 80090ec:	4013      	ands	r3, r2
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	4b17      	ldr	r3, [pc, #92]	@ (8009150 <sen5x_enable+0x88>)
 80090f2:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 80090f4:	4b16      	ldr	r3, [pc, #88]	@ (8009150 <sen5x_enable+0x88>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 80090fc:	2000      	movs	r0, #0
 80090fe:	f7ff ffc1 	bl	8009084 <setsen5xReadTimer>
 8009102:	e009      	b.n	8009118 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009104:	f005 feca 	bl	800ee9c <HAL_GetTick>
 8009108:	0002      	movs	r2, r0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2164      	movs	r1, #100	@ 0x64
 800910e:	434b      	muls	r3, r1
 8009110:	18d3      	adds	r3, r2, r3
 8009112:	0018      	movs	r0, r3
 8009114:	f7ff ffb6 	bl	8009084 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is : %s", sen5x_Enable?"enabled":"disabled");
 8009118:	4b0d      	ldr	r3, [pc, #52]	@ (8009150 <sen5x_enable+0x88>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <sen5x_enable+0x5c>
 8009120:	4b0c      	ldr	r3, [pc, #48]	@ (8009154 <sen5x_enable+0x8c>)
 8009122:	e000      	b.n	8009126 <sen5x_enable+0x5e>
 8009124:	4b0c      	ldr	r3, [pc, #48]	@ (8009158 <sen5x_enable+0x90>)
 8009126:	4a0d      	ldr	r2, [pc, #52]	@ (800915c <sen5x_enable+0x94>)
 8009128:	490d      	ldr	r1, [pc, #52]	@ (8009160 <sen5x_enable+0x98>)
 800912a:	2002      	movs	r0, #2
 800912c:	f005 fa76 	bl	800e61c <CreateLine>
 8009130:	e005      	b.n	800913e <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 8009132:	4a0c      	ldr	r2, [pc, #48]	@ (8009164 <sen5x_enable+0x9c>)
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <sen5x_enable+0x98>)
 8009136:	0019      	movs	r1, r3
 8009138:	2002      	movs	r0, #2
 800913a:	f005 fa6f 	bl	800e61c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <sen5x_enable+0xa0>)
 8009140:	2201      	movs	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009144:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <sen5x_enable+0x88>)
 8009146:	781b      	ldrb	r3, [r3, #0]
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b002      	add	sp, #8
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001068 	.word	0x20001068
 8009154:	08024698 	.word	0x08024698
 8009158:	080246a0 	.word	0x080246a0
 800915c:	080246ac 	.word	0x080246ac
 8009160:	080246cc 	.word	0x080246cc
 8009164:	080246d0 	.word	0x080246d0
 8009168:	2000008d 	.word	0x2000008d

0800916c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8009170:	2380      	movs	r3, #128	@ 0x80
 8009172:	015b      	lsls	r3, r3, #5
 8009174:	4808      	ldr	r0, [pc, #32]	@ (8009198 <sen5x_Power_On+0x2c>)
 8009176:	2201      	movs	r2, #1
 8009178:	0019      	movs	r1, r3
 800917a:	f007 f920 	bl	80103be <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800917e:	4a07      	ldr	r2, [pc, #28]	@ (800919c <sen5x_Power_On+0x30>)
 8009180:	4b07      	ldr	r3, [pc, #28]	@ (80091a0 <sen5x_Power_On+0x34>)
 8009182:	0019      	movs	r1, r3
 8009184:	2003      	movs	r0, #3
 8009186:	f005 fa49 	bl	800e61c <CreateLine>
  }
  displayCreateStyle();
//  HAL_Delay(7000);
//  while (1){};
#endif
  sen5x_On = true;
 800918a:	4b06      	ldr	r3, [pc, #24]	@ (80091a4 <sen5x_Power_On+0x38>)
 800918c:	2201      	movs	r2, #1
 800918e:	701a      	strb	r2, [r3, #0]
}
 8009190:	46c0      	nop			@ (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	46c0      	nop			@ (mov r8, r8)
 8009198:	50000800 	.word	0x50000800
 800919c:	080246f0 	.word	0x080246f0
 80091a0:	0802470c 	.word	0x0802470c
 80091a4:	20001066 	.word	0x20001066

080091a8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 80091ac:	4b18      	ldr	r3, [pc, #96]	@ (8009210 <sen5x_Power_Off+0x68>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d006      	beq.n	80091c2 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 80091b4:	4a17      	ldr	r2, [pc, #92]	@ (8009214 <sen5x_Power_Off+0x6c>)
 80091b6:	4b18      	ldr	r3, [pc, #96]	@ (8009218 <sen5x_Power_Off+0x70>)
 80091b8:	0019      	movs	r1, r3
 80091ba:	2003      	movs	r0, #3
 80091bc:	f005 fa2e 	bl	800e61c <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 80091c0:	e022      	b.n	8009208 <sen5x_Power_Off+0x60>
  else if (SSD1306detected && (usbPluggedIn || userToggle)) {
 80091c2:	4b16      	ldr	r3, [pc, #88]	@ (800921c <sen5x_Power_Off+0x74>)
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00e      	beq.n	80091e8 <sen5x_Power_Off+0x40>
 80091ca:	4b15      	ldr	r3, [pc, #84]	@ (8009220 <sen5x_Power_Off+0x78>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d103      	bne.n	80091da <sen5x_Power_Off+0x32>
 80091d2:	4b14      	ldr	r3, [pc, #80]	@ (8009224 <sen5x_Power_Off+0x7c>)
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d006      	beq.n	80091e8 <sen5x_Power_Off+0x40>
    Info("Display detected and USB power or userToggle enabled");
 80091da:	4a13      	ldr	r2, [pc, #76]	@ (8009228 <sen5x_Power_Off+0x80>)
 80091dc:	4b13      	ldr	r3, [pc, #76]	@ (800922c <sen5x_Power_Off+0x84>)
 80091de:	0019      	movs	r1, r3
 80091e0:	2002      	movs	r0, #2
 80091e2:	f005 fa1b 	bl	800e61c <CreateLine>
}
 80091e6:	e00f      	b.n	8009208 <sen5x_Power_Off+0x60>
    Debug("executing sen5x_Power_Off");
 80091e8:	4a11      	ldr	r2, [pc, #68]	@ (8009230 <sen5x_Power_Off+0x88>)
 80091ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009218 <sen5x_Power_Off+0x70>)
 80091ec:	0019      	movs	r1, r3
 80091ee:	2003      	movs	r0, #3
 80091f0:	f005 fa14 	bl	800e61c <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80091f4:	2380      	movs	r3, #128	@ 0x80
 80091f6:	015b      	lsls	r3, r3, #5
 80091f8:	480e      	ldr	r0, [pc, #56]	@ (8009234 <sen5x_Power_Off+0x8c>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	0019      	movs	r1, r3
 80091fe:	f007 f8de 	bl	80103be <HAL_GPIO_WritePin>
    sen5x_On = false;
 8009202:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <sen5x_Power_Off+0x90>)
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
}
 8009208:	46c0      	nop			@ (mov r8, r8)
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	46c0      	nop			@ (mov r8, r8)
 8009210:	20001067 	.word	0x20001067
 8009214:	08024710 	.word	0x08024710
 8009218:	0802470c 	.word	0x0802470c
 800921c:	20001064 	.word	0x20001064
 8009220:	20002009 	.word	0x20002009
 8009224:	2000200a 	.word	0x2000200a
 8009228:	08024740 	.word	0x08024740
 800922c:	080246cc 	.word	0x080246cc
 8009230:	08024778 	.word	0x08024778
 8009234:	50000800 	.word	0x50000800
 8009238:	20001066 	.word	0x20001066

0800923c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009240:	4b02      	ldr	r3, [pc, #8]	@ (800924c <reset_fanCleaningDone+0x10>)
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
}
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20001065 	.word	0x20001065

08009250 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009252:	b093      	sub	sp, #76	@ 0x4c
 8009254:	af04      	add	r7, sp, #16
  int16_t error = 0;
 8009256:	2436      	movs	r4, #54	@ 0x36
 8009258:	193b      	adds	r3, r7, r4
 800925a:	2200      	movs	r2, #0
 800925c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800925e:	2335      	movs	r3, #53	@ 0x35
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	2220      	movs	r2, #32
 8009264:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009266:	2334      	movs	r3, #52	@ 0x34
 8009268:	18fb      	adds	r3, r7, r3
 800926a:	2220      	movs	r2, #32
 800926c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800926e:	f7ff ff7d 	bl	800916c <sen5x_Power_On>
  error = sen5x_device_reset();
 8009272:	0025      	movs	r5, r4
 8009274:	193c      	adds	r4, r7, r4
 8009276:	f001 f975 	bl	800a564 <sen5x_device_reset>
 800927a:	0003      	movs	r3, r0
 800927c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800927e:	002c      	movs	r4, r5
 8009280:	193b      	adds	r3, r7, r4
 8009282:	2200      	movs	r2, #0
 8009284:	5e9b      	ldrsh	r3, [r3, r2]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800928a:	193b      	adds	r3, r7, r4
 800928c:	2200      	movs	r2, #0
 800928e:	5e9b      	ldrsh	r3, [r3, r2]
 8009290:	4a6d      	ldr	r2, [pc, #436]	@ (8009448 <probe_sen5x+0x1f8>)
 8009292:	496e      	ldr	r1, [pc, #440]	@ (800944c <probe_sen5x+0x1fc>)
 8009294:	2001      	movs	r0, #1
 8009296:	f005 f9c1 	bl	800e61c <CreateLine>
      return error;
 800929a:	193b      	adds	r3, r7, r4
 800929c:	2200      	movs	r2, #0
 800929e:	5e9b      	ldrsh	r3, [r3, r2]
 80092a0:	e0cd      	b.n	800943e <probe_sen5x+0x1ee>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80092a2:	2536      	movs	r5, #54	@ 0x36
 80092a4:	197c      	adds	r4, r7, r5
 80092a6:	2335      	movs	r3, #53	@ 0x35
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	230c      	movs	r3, #12
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f001 f842 	bl	800a33c <sen5x_get_serial_number>
 80092b8:	0003      	movs	r3, r0
 80092ba:	8023      	strh	r3, [r4, #0]
  if (error) {
 80092bc:	197b      	adds	r3, r7, r5
 80092be:	2200      	movs	r2, #0
 80092c0:	5e9b      	ldrsh	r3, [r3, r2]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00b      	beq.n	80092de <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80092c6:	197b      	adds	r3, r7, r5
 80092c8:	2200      	movs	r2, #0
 80092ca:	5e9a      	ldrsh	r2, [r3, r2]
 80092cc:	4b60      	ldr	r3, [pc, #384]	@ (8009450 <probe_sen5x+0x200>)
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f016 fe87 	bl	801ffe4 <iprintf>
      return error;
 80092d6:	197b      	adds	r3, r7, r5
 80092d8:	2200      	movs	r2, #0
 80092da:	5e9b      	ldrsh	r3, [r3, r2]
 80092dc:	e0af      	b.n	800943e <probe_sen5x+0x1ee>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80092de:	230c      	movs	r3, #12
 80092e0:	18fa      	adds	r2, r7, r3
 80092e2:	4b5c      	ldr	r3, [pc, #368]	@ (8009454 <probe_sen5x+0x204>)
 80092e4:	0011      	movs	r1, r2
 80092e6:	0018      	movs	r0, r3
 80092e8:	f016 fe7c 	bl	801ffe4 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 80092ec:	2536      	movs	r5, #54	@ 0x36
 80092ee:	197c      	adds	r4, r7, r5
 80092f0:	2334      	movs	r3, #52	@ 0x34
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	4b58      	ldr	r3, [pc, #352]	@ (8009458 <probe_sen5x+0x208>)
 80092f8:	0011      	movs	r1, r2
 80092fa:	0018      	movs	r0, r3
 80092fc:	f000 ffc8 	bl	800a290 <sen5x_get_product_name>
 8009300:	0003      	movs	r3, r0
 8009302:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009304:	197b      	adds	r3, r7, r5
 8009306:	2200      	movs	r2, #0
 8009308:	5e9b      	ldrsh	r3, [r3, r2]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800930e:	197b      	adds	r3, r7, r5
 8009310:	2200      	movs	r2, #0
 8009312:	5e9a      	ldrsh	r2, [r3, r2]
 8009314:	4b51      	ldr	r3, [pc, #324]	@ (800945c <probe_sen5x+0x20c>)
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f016 fe63 	bl	801ffe4 <iprintf>
      return error;
 800931e:	197b      	adds	r3, r7, r5
 8009320:	2200      	movs	r2, #0
 8009322:	5e9b      	ldrsh	r3, [r3, r2]
 8009324:	e08b      	b.n	800943e <probe_sen5x+0x1ee>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009326:	4a4c      	ldr	r2, [pc, #304]	@ (8009458 <probe_sen5x+0x208>)
 8009328:	4b4d      	ldr	r3, [pc, #308]	@ (8009460 <probe_sen5x+0x210>)
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f016 fe59 	bl	801ffe4 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009332:	2636      	movs	r6, #54	@ 0x36
 8009334:	19bc      	adds	r4, r7, r6
 8009336:	2308      	movs	r3, #8
 8009338:	18fd      	adds	r5, r7, r3
 800933a:	2309      	movs	r3, #9
 800933c:	18fa      	adds	r2, r7, r3
 800933e:	230a      	movs	r3, #10
 8009340:	18f9      	adds	r1, r7, r3
 8009342:	230b      	movs	r3, #11
 8009344:	18f8      	adds	r0, r7, r3
 8009346:	1d7b      	adds	r3, r7, #5
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	1dbb      	adds	r3, r7, #6
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	1dfb      	adds	r3, r7, #7
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	002b      	movs	r3, r5
 8009354:	f001 f848 	bl	800a3e8 <sen5x_get_version>
 8009358:	0003      	movs	r3, r0
 800935a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800935c:	19bb      	adds	r3, r7, r6
 800935e:	2200      	movs	r2, #0
 8009360:	5e9b      	ldrsh	r3, [r3, r2]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009366:	19bb      	adds	r3, r7, r6
 8009368:	2200      	movs	r2, #0
 800936a:	5e9a      	ldrsh	r2, [r3, r2]
 800936c:	4b3d      	ldr	r3, [pc, #244]	@ (8009464 <probe_sen5x+0x214>)
 800936e:	0011      	movs	r1, r2
 8009370:	0018      	movs	r0, r3
 8009372:	f016 fe37 	bl	801ffe4 <iprintf>
      return error;
 8009376:	19bb      	adds	r3, r7, r6
 8009378:	2200      	movs	r2, #0
 800937a:	5e9b      	ldrsh	r3, [r3, r2]
 800937c:	e05f      	b.n	800943e <probe_sen5x+0x1ee>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800937e:	230b      	movs	r3, #11
 8009380:	18fb      	adds	r3, r7, r3
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	0019      	movs	r1, r3
 8009386:	230a      	movs	r3, #10
 8009388:	18fb      	adds	r3, r7, r3
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	001a      	movs	r2, r3
 800938e:	2308      	movs	r3, #8
 8009390:	18fb      	adds	r3, r7, r3
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	001c      	movs	r4, r3
 8009396:	1dfb      	adds	r3, r7, #7
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4833      	ldr	r0, [pc, #204]	@ (8009468 <probe_sen5x+0x218>)
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	0023      	movs	r3, r4
 80093a0:	f016 fe20 	bl	801ffe4 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80093a4:	2300      	movs	r3, #0
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80093a8:	262e      	movs	r6, #46	@ 0x2e
 80093aa:	19bb      	adds	r3, r7, r6
 80093ac:	2200      	movs	r2, #0
 80093ae:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80093b0:	232c      	movs	r3, #44	@ 0x2c
 80093b2:	18fb      	adds	r3, r7, r3
 80093b4:	2200      	movs	r2, #0
 80093b6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80093b8:	492c      	ldr	r1, [pc, #176]	@ (800946c <probe_sen5x+0x21c>)
 80093ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093bc:	f7f7 fdf0 	bl	8000fa0 <__aeabi_fmul>
 80093c0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80093c2:	1c18      	adds	r0, r3, #0
 80093c4:	f7f8 f8e4 	bl	8001590 <__aeabi_f2iz>
 80093c8:	0003      	movs	r3, r0
 80093ca:	b218      	sxth	r0, r3
 80093cc:	2536      	movs	r5, #54	@ 0x36
 80093ce:	197c      	adds	r4, r7, r5
 80093d0:	232c      	movs	r3, #44	@ 0x2c
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	881a      	ldrh	r2, [r3, #0]
 80093d6:	19bb      	adds	r3, r7, r6
 80093d8:	2100      	movs	r1, #0
 80093da:	5e5b      	ldrsh	r3, [r3, r1]
 80093dc:	0019      	movs	r1, r3
 80093de:	f000 fef3 	bl	800a1c8 <sen5x_set_temperature_offset_parameters>
 80093e2:	0003      	movs	r3, r0
 80093e4:	8023      	strh	r3, [r4, #0]
  if (error) {
 80093e6:	197b      	adds	r3, r7, r5
 80093e8:	2200      	movs	r2, #0
 80093ea:	5e9b      	ldrsh	r3, [r3, r2]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 80093f0:	197b      	adds	r3, r7, r5
 80093f2:	2200      	movs	r2, #0
 80093f4:	5e9b      	ldrsh	r3, [r3, r2]
 80093f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009470 <probe_sen5x+0x220>)
 80093f8:	4914      	ldr	r1, [pc, #80]	@ (800944c <probe_sen5x+0x1fc>)
 80093fa:	2001      	movs	r0, #1
 80093fc:	f005 f90e 	bl	800e61c <CreateLine>
      return error;
 8009400:	197b      	adds	r3, r7, r5
 8009402:	2200      	movs	r2, #0
 8009404:	5e9b      	ldrsh	r3, [r3, r2]
 8009406:	e01a      	b.n	800943e <probe_sen5x+0x1ee>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800940a:	f7fa f82b 	bl	8003464 <__aeabi_f2d>
 800940e:	0002      	movs	r2, r0
 8009410:	000b      	movs	r3, r1
 8009412:	4818      	ldr	r0, [pc, #96]	@ (8009474 <probe_sen5x+0x224>)
 8009414:	4918      	ldr	r1, [pc, #96]	@ (8009478 <probe_sen5x+0x228>)
 8009416:	9200      	str	r2, [sp, #0]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	0002      	movs	r2, r0
 800941c:	2002      	movs	r0, #2
 800941e:	f005 f8fd 	bl	800e61c <CreateLine>
  }
  sen5x_Power_Off();
 8009422:	f7ff fec1 	bl	80091a8 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 8009426:	f005 fd39 	bl	800ee9c <HAL_GetTick>
 800942a:	0003      	movs	r3, r0
 800942c:	22fa      	movs	r2, #250	@ 0xfa
 800942e:	00d2      	lsls	r2, r2, #3
 8009430:	189a      	adds	r2, r3, r2
 8009432:	4b12      	ldr	r3, [pc, #72]	@ (800947c <probe_sen5x+0x22c>)
 8009434:	601a      	str	r2, [r3, #0]
  return error;
 8009436:	2336      	movs	r3, #54	@ 0x36
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	2200      	movs	r2, #0
 800943c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800943e:	0018      	movs	r0, r3
 8009440:	46bd      	mov	sp, r7
 8009442:	b00f      	add	sp, #60	@ 0x3c
 8009444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009446:	46c0      	nop			@ (mov r8, r8)
 8009448:	08024794 	.word	0x08024794
 800944c:	080247c0 	.word	0x080247c0
 8009450:	080247c4 	.word	0x080247c4
 8009454:	080247f4 	.word	0x080247f4
 8009458:	2000106c 	.word	0x2000106c
 800945c:	08024808 	.word	0x08024808
 8009460:	08024838 	.word	0x08024838
 8009464:	0802484c 	.word	0x0802484c
 8009468:	08024878 	.word	0x08024878
 800946c:	43480000 	.word	0x43480000
 8009470:	0802489c 	.word	0x0802489c
 8009474:	080248dc 	.word	0x080248dc
 8009478:	080246cc 	.word	0x080246cc
 800947c:	20001088 	.word	0x20001088

08009480 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8009486:	1dbb      	adds	r3, r7, #6
 8009488:	2200      	movs	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800948c:	4b1b      	ldr	r3, [pc, #108]	@ (80094fc <sen5x_lightup_measurement+0x7c>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00b      	beq.n	80094ac <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 8009494:	4a1a      	ldr	r2, [pc, #104]	@ (8009500 <sen5x_lightup_measurement+0x80>)
 8009496:	4b1b      	ldr	r3, [pc, #108]	@ (8009504 <sen5x_lightup_measurement+0x84>)
 8009498:	0019      	movs	r1, r3
 800949a:	2002      	movs	r0, #2
 800949c:	f005 f8be 	bl	800e61c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80094a0:	1dbc      	adds	r4, r7, #6
 80094a2:	f000 fd1d 	bl	8009ee0 <sen5x_start_measurement_without_pm>
 80094a6:	0003      	movs	r3, r0
 80094a8:	8023      	strh	r3, [r4, #0]
 80094aa:	e00a      	b.n	80094c2 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80094ac:	4a16      	ldr	r2, [pc, #88]	@ (8009508 <sen5x_lightup_measurement+0x88>)
 80094ae:	4b15      	ldr	r3, [pc, #84]	@ (8009504 <sen5x_lightup_measurement+0x84>)
 80094b0:	0019      	movs	r1, r3
 80094b2:	2002      	movs	r0, #2
 80094b4:	f005 f8b2 	bl	800e61c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80094b8:	1dbc      	adds	r4, r7, #6
 80094ba:	f000 fce3 	bl	8009e84 <sen5x_start_measurement>
 80094be:	0003      	movs	r3, r0
 80094c0:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80094c2:	1dbb      	adds	r3, r7, #6
 80094c4:	2200      	movs	r2, #0
 80094c6:	5e9b      	ldrsh	r3, [r3, r2]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d008      	beq.n	80094de <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 80094cc:	1dbb      	adds	r3, r7, #6
 80094ce:	2200      	movs	r2, #0
 80094d0:	5e9b      	ldrsh	r3, [r3, r2]
 80094d2:	4a0e      	ldr	r2, [pc, #56]	@ (800950c <sen5x_lightup_measurement+0x8c>)
 80094d4:	490e      	ldr	r1, [pc, #56]	@ (8009510 <sen5x_lightup_measurement+0x90>)
 80094d6:	2001      	movs	r0, #1
 80094d8:	f005 f8a0 	bl	800e61c <CreateLine>
 80094dc:	e007      	b.n	80094ee <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 80094de:	f7fc fff9 	bl	80064d4 <showTime>
    Info("sen5x_start_measurement executed");
 80094e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009514 <sen5x_lightup_measurement+0x94>)
 80094e4:	4b07      	ldr	r3, [pc, #28]	@ (8009504 <sen5x_lightup_measurement+0x84>)
 80094e6:	0019      	movs	r1, r3
 80094e8:	2002      	movs	r0, #2
 80094ea:	f005 f897 	bl	800e61c <CreateLine>
  }
  return error;
 80094ee:	1dbb      	adds	r3, r7, #6
 80094f0:	2200      	movs	r2, #0
 80094f2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80094f4:	0018      	movs	r0, r3
 80094f6:	46bd      	mov	sp, r7
 80094f8:	b003      	add	sp, #12
 80094fa:	bd90      	pop	{r4, r7, pc}
 80094fc:	20001067 	.word	0x20001067
 8009500:	08024914 	.word	0x08024914
 8009504:	080246cc 	.word	0x080246cc
 8009508:	08024940 	.word	0x08024940
 800950c:	08024960 	.word	0x08024960
 8009510:	080247c0 	.word	0x080247c0
 8009514:	08024990 	.word	0x08024990

08009518 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009518:	b590      	push	{r4, r7, lr}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800951e:	1dbb      	adds	r3, r7, #6
 8009520:	2200      	movs	r2, #0
 8009522:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009524:	4b21      	ldr	r3, [pc, #132]	@ (80095ac <sen5x_extinguish_measurement+0x94>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01e      	beq.n	800956a <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800952c:	4a20      	ldr	r2, [pc, #128]	@ (80095b0 <sen5x_extinguish_measurement+0x98>)
 800952e:	4b21      	ldr	r3, [pc, #132]	@ (80095b4 <sen5x_extinguish_measurement+0x9c>)
 8009530:	0019      	movs	r1, r3
 8009532:	2002      	movs	r0, #2
 8009534:	f005 f872 	bl	800e61c <CreateLine>
    Info("PM measurement is disabled");
 8009538:	4a1f      	ldr	r2, [pc, #124]	@ (80095b8 <sen5x_extinguish_measurement+0xa0>)
 800953a:	4b1e      	ldr	r3, [pc, #120]	@ (80095b4 <sen5x_extinguish_measurement+0x9c>)
 800953c:	0019      	movs	r1, r3
 800953e:	2002      	movs	r0, #2
 8009540:	f005 f86c 	bl	800e61c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009544:	1dbc      	adds	r4, r7, #6
 8009546:	f000 fccb 	bl	8009ee0 <sen5x_start_measurement_without_pm>
 800954a:	0003      	movs	r3, r0
 800954c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800954e:	1dbb      	adds	r3, r7, #6
 8009550:	2200      	movs	r2, #0
 8009552:	5e9b      	ldrsh	r3, [r3, r2]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d022      	beq.n	800959e <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009558:	1dbb      	adds	r3, r7, #6
 800955a:	2200      	movs	r2, #0
 800955c:	5e9b      	ldrsh	r3, [r3, r2]
 800955e:	4a17      	ldr	r2, [pc, #92]	@ (80095bc <sen5x_extinguish_measurement+0xa4>)
 8009560:	4917      	ldr	r1, [pc, #92]	@ (80095c0 <sen5x_extinguish_measurement+0xa8>)
 8009562:	2001      	movs	r0, #1
 8009564:	f005 f85a 	bl	800e61c <CreateLine>
 8009568:	e019      	b.n	800959e <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800956a:	1dbc      	adds	r4, r7, #6
 800956c:	f000 fce6 	bl	8009f3c <sen5x_stop_measurement>
 8009570:	0003      	movs	r3, r0
 8009572:	8023      	strh	r3, [r4, #0]
    showTime();
 8009574:	f7fc ffae 	bl	80064d4 <showTime>
    Info("sen5x_stop_measurement executed");
 8009578:	4a12      	ldr	r2, [pc, #72]	@ (80095c4 <sen5x_extinguish_measurement+0xac>)
 800957a:	4b0e      	ldr	r3, [pc, #56]	@ (80095b4 <sen5x_extinguish_measurement+0x9c>)
 800957c:	0019      	movs	r1, r3
 800957e:	2002      	movs	r0, #2
 8009580:	f005 f84c 	bl	800e61c <CreateLine>
    if (error) {
 8009584:	1dbb      	adds	r3, r7, #6
 8009586:	2200      	movs	r2, #0
 8009588:	5e9b      	ldrsh	r3, [r3, r2]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d007      	beq.n	800959e <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800958e:	1dbb      	adds	r3, r7, #6
 8009590:	2200      	movs	r2, #0
 8009592:	5e9b      	ldrsh	r3, [r3, r2]
 8009594:	4a0c      	ldr	r2, [pc, #48]	@ (80095c8 <sen5x_extinguish_measurement+0xb0>)
 8009596:	490a      	ldr	r1, [pc, #40]	@ (80095c0 <sen5x_extinguish_measurement+0xa8>)
 8009598:	2001      	movs	r0, #1
 800959a:	f005 f83f 	bl	800e61c <CreateLine>
    }
  }
  return error;
 800959e:	1dbb      	adds	r3, r7, #6
 80095a0:	2200      	movs	r2, #0
 80095a2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80095a4:	0018      	movs	r0, r3
 80095a6:	46bd      	mov	sp, r7
 80095a8:	b003      	add	sp, #12
 80095aa:	bd90      	pop	{r4, r7, pc}
 80095ac:	20001067 	.word	0x20001067
 80095b0:	080249b4 	.word	0x080249b4
 80095b4:	080246cc 	.word	0x080246cc
 80095b8:	080249ec 	.word	0x080249ec
 80095bc:	08024a08 	.word	0x08024a08
 80095c0:	080247c0 	.word	0x080247c0
 80095c4:	08024a48 	.word	0x08024a48
 80095c8:	08024a68 	.word	0x08024a68

080095cc <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80095cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ce:	b08d      	sub	sp, #52	@ 0x34
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80095d4:	261e      	movs	r6, #30
 80095d6:	19bb      	adds	r3, r7, r6
 80095d8:	2200      	movs	r2, #0
 80095da:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80095dc:	19bc      	adds	r4, r7, r6
 80095de:	2316      	movs	r3, #22
 80095e0:	18fd      	adds	r5, r7, r3
 80095e2:	2318      	movs	r3, #24
 80095e4:	18fa      	adds	r2, r7, r3
 80095e6:	231a      	movs	r3, #26
 80095e8:	18f9      	adds	r1, r7, r3
 80095ea:	231c      	movs	r3, #28
 80095ec:	18f8      	adds	r0, r7, r3
 80095ee:	230e      	movs	r3, #14
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	2310      	movs	r3, #16
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	9302      	str	r3, [sp, #8]
 80095fa:	2312      	movs	r3, #18
 80095fc:	18fb      	adds	r3, r7, r3
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	2314      	movs	r3, #20
 8009602:	18fb      	adds	r3, r7, r3
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	002b      	movs	r3, r5
 8009608:	f000 fd1a 	bl	800a040 <sen5x_read_measured_values>
 800960c:	0003      	movs	r3, r0
 800960e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009610:	19bb      	adds	r3, r7, r6
 8009612:	2200      	movs	r2, #0
 8009614:	5e9b      	ldrsh	r3, [r3, r2]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <sen5x_read_measurement+0x56>
    return error;
 800961a:	19bb      	adds	r3, r7, r6
 800961c:	2200      	movs	r2, #0
 800961e:	5e9b      	ldrsh	r3, [r3, r2]
 8009620:	e02c      	b.n	800967c <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009622:	231c      	movs	r3, #28
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	881a      	ldrh	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800962c:	231a      	movs	r3, #26
 800962e:	18fb      	adds	r3, r7, r3
 8009630:	881a      	ldrh	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009636:	2318      	movs	r3, #24
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	881a      	ldrh	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009640:	2316      	movs	r3, #22
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	881a      	ldrh	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800964a:	2314      	movs	r3, #20
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	2200      	movs	r2, #0
 8009650:	5e9a      	ldrsh	r2, [r3, r2]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009656:	2312      	movs	r3, #18
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2200      	movs	r2, #0
 800965c:	5e9a      	ldrsh	r2, [r3, r2]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009662:	2310      	movs	r3, #16
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	2200      	movs	r2, #0
 8009668:	5e9a      	ldrsh	r2, [r3, r2]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800966e:	230e      	movs	r3, #14
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	2200      	movs	r2, #0
 8009674:	5e9a      	ldrsh	r2, [r3, r2]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	81da      	strh	r2, [r3, #14]
  return 0;
 800967a:	2300      	movs	r3, #0
}
 800967c:	0018      	movs	r0, r3
 800967e:	46bd      	mov	sp, r7
 8009680:	b009      	add	sp, #36	@ 0x24
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009684 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 8009688:	4b69      	ldr	r3, [pc, #420]	@ (8009830 <sen5x_printvalues+0x1ac>)
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	4a69      	ldr	r2, [pc, #420]	@ (8009834 <sen5x_printvalues+0x1b0>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8009692:	4b67      	ldr	r3, [pc, #412]	@ (8009830 <sen5x_printvalues+0x1ac>)
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	0018      	movs	r0, r3
 8009698:	f7f7 ff9a 	bl	80015d0 <__aeabi_i2f>
 800969c:	1c03      	adds	r3, r0, #0
 800969e:	4966      	ldr	r1, [pc, #408]	@ (8009838 <sen5x_printvalues+0x1b4>)
 80096a0:	1c18      	adds	r0, r3, #0
 80096a2:	f7f7 fa97 	bl	8000bd4 <__aeabi_fdiv>
 80096a6:	1c03      	adds	r3, r0, #0
 80096a8:	1c18      	adds	r0, r3, #0
 80096aa:	f7f9 fedb 	bl	8003464 <__aeabi_f2d>
 80096ae:	0002      	movs	r2, r0
 80096b0:	000b      	movs	r3, r1
 80096b2:	4962      	ldr	r1, [pc, #392]	@ (800983c <sen5x_printvalues+0x1b8>)
 80096b4:	0008      	movs	r0, r1
 80096b6:	f016 fc95 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80096ba:	4b5d      	ldr	r3, [pc, #372]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80096bc:	885b      	ldrh	r3, [r3, #2]
 80096be:	4a5d      	ldr	r2, [pc, #372]	@ (8009834 <sen5x_printvalues+0x1b0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d013      	beq.n	80096ec <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80096c4:	4b5a      	ldr	r3, [pc, #360]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80096c6:	885b      	ldrh	r3, [r3, #2]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f7f7 ff81 	bl	80015d0 <__aeabi_i2f>
 80096ce:	1c03      	adds	r3, r0, #0
 80096d0:	4959      	ldr	r1, [pc, #356]	@ (8009838 <sen5x_printvalues+0x1b4>)
 80096d2:	1c18      	adds	r0, r3, #0
 80096d4:	f7f7 fa7e 	bl	8000bd4 <__aeabi_fdiv>
 80096d8:	1c03      	adds	r3, r0, #0
 80096da:	1c18      	adds	r0, r3, #0
 80096dc:	f7f9 fec2 	bl	8003464 <__aeabi_f2d>
 80096e0:	0002      	movs	r2, r0
 80096e2:	000b      	movs	r3, r1
 80096e4:	4956      	ldr	r1, [pc, #344]	@ (8009840 <sen5x_printvalues+0x1bc>)
 80096e6:	0008      	movs	r0, r1
 80096e8:	f016 fc7c 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 80096ec:	4b50      	ldr	r3, [pc, #320]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80096ee:	889b      	ldrh	r3, [r3, #4]
 80096f0:	4a50      	ldr	r2, [pc, #320]	@ (8009834 <sen5x_printvalues+0x1b0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d013      	beq.n	800971e <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 80096f6:	4b4e      	ldr	r3, [pc, #312]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80096f8:	889b      	ldrh	r3, [r3, #4]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f7f7 ff68 	bl	80015d0 <__aeabi_i2f>
 8009700:	1c03      	adds	r3, r0, #0
 8009702:	494d      	ldr	r1, [pc, #308]	@ (8009838 <sen5x_printvalues+0x1b4>)
 8009704:	1c18      	adds	r0, r3, #0
 8009706:	f7f7 fa65 	bl	8000bd4 <__aeabi_fdiv>
 800970a:	1c03      	adds	r3, r0, #0
 800970c:	1c18      	adds	r0, r3, #0
 800970e:	f7f9 fea9 	bl	8003464 <__aeabi_f2d>
 8009712:	0002      	movs	r2, r0
 8009714:	000b      	movs	r3, r1
 8009716:	494b      	ldr	r1, [pc, #300]	@ (8009844 <sen5x_printvalues+0x1c0>)
 8009718:	0008      	movs	r0, r1
 800971a:	f016 fc63 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800971e:	4b44      	ldr	r3, [pc, #272]	@ (8009830 <sen5x_printvalues+0x1ac>)
 8009720:	88db      	ldrh	r3, [r3, #6]
 8009722:	4a44      	ldr	r2, [pc, #272]	@ (8009834 <sen5x_printvalues+0x1b0>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d013      	beq.n	8009750 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009728:	4b41      	ldr	r3, [pc, #260]	@ (8009830 <sen5x_printvalues+0x1ac>)
 800972a:	88db      	ldrh	r3, [r3, #6]
 800972c:	0018      	movs	r0, r3
 800972e:	f7f7 ff4f 	bl	80015d0 <__aeabi_i2f>
 8009732:	1c03      	adds	r3, r0, #0
 8009734:	4940      	ldr	r1, [pc, #256]	@ (8009838 <sen5x_printvalues+0x1b4>)
 8009736:	1c18      	adds	r0, r3, #0
 8009738:	f7f7 fa4c 	bl	8000bd4 <__aeabi_fdiv>
 800973c:	1c03      	adds	r3, r0, #0
 800973e:	1c18      	adds	r0, r3, #0
 8009740:	f7f9 fe90 	bl	8003464 <__aeabi_f2d>
 8009744:	0002      	movs	r2, r0
 8009746:	000b      	movs	r3, r1
 8009748:	493f      	ldr	r1, [pc, #252]	@ (8009848 <sen5x_printvalues+0x1c4>)
 800974a:	0008      	movs	r0, r1
 800974c:	f016 fc4a 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009750:	4b37      	ldr	r3, [pc, #220]	@ (8009830 <sen5x_printvalues+0x1ac>)
 8009752:	2208      	movs	r2, #8
 8009754:	5e9b      	ldrsh	r3, [r3, r2]
 8009756:	4a3d      	ldr	r2, [pc, #244]	@ (800984c <sen5x_printvalues+0x1c8>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d014      	beq.n	8009786 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800975c:	4b34      	ldr	r3, [pc, #208]	@ (8009830 <sen5x_printvalues+0x1ac>)
 800975e:	2208      	movs	r2, #8
 8009760:	5e9b      	ldrsh	r3, [r3, r2]
 8009762:	0018      	movs	r0, r3
 8009764:	f7f7 ff34 	bl	80015d0 <__aeabi_i2f>
 8009768:	1c03      	adds	r3, r0, #0
 800976a:	4939      	ldr	r1, [pc, #228]	@ (8009850 <sen5x_printvalues+0x1cc>)
 800976c:	1c18      	adds	r0, r3, #0
 800976e:	f7f7 fa31 	bl	8000bd4 <__aeabi_fdiv>
 8009772:	1c03      	adds	r3, r0, #0
 8009774:	1c18      	adds	r0, r3, #0
 8009776:	f7f9 fe75 	bl	8003464 <__aeabi_f2d>
 800977a:	0002      	movs	r2, r0
 800977c:	000b      	movs	r3, r1
 800977e:	4935      	ldr	r1, [pc, #212]	@ (8009854 <sen5x_printvalues+0x1d0>)
 8009780:	0008      	movs	r0, r1
 8009782:	f016 fc2f 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 8009786:	4b2a      	ldr	r3, [pc, #168]	@ (8009830 <sen5x_printvalues+0x1ac>)
 8009788:	220a      	movs	r2, #10
 800978a:	5e9b      	ldrsh	r3, [r3, r2]
 800978c:	4a2f      	ldr	r2, [pc, #188]	@ (800984c <sen5x_printvalues+0x1c8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d014      	beq.n	80097bc <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009792:	4b27      	ldr	r3, [pc, #156]	@ (8009830 <sen5x_printvalues+0x1ac>)
 8009794:	220a      	movs	r2, #10
 8009796:	5e9b      	ldrsh	r3, [r3, r2]
 8009798:	0018      	movs	r0, r3
 800979a:	f7f7 ff19 	bl	80015d0 <__aeabi_i2f>
 800979e:	1c03      	adds	r3, r0, #0
 80097a0:	492d      	ldr	r1, [pc, #180]	@ (8009858 <sen5x_printvalues+0x1d4>)
 80097a2:	1c18      	adds	r0, r3, #0
 80097a4:	f7f7 fa16 	bl	8000bd4 <__aeabi_fdiv>
 80097a8:	1c03      	adds	r3, r0, #0
 80097aa:	1c18      	adds	r0, r3, #0
 80097ac:	f7f9 fe5a 	bl	8003464 <__aeabi_f2d>
 80097b0:	0002      	movs	r2, r0
 80097b2:	000b      	movs	r3, r1
 80097b4:	4929      	ldr	r1, [pc, #164]	@ (800985c <sen5x_printvalues+0x1d8>)
 80097b6:	0008      	movs	r0, r1
 80097b8:	f016 fc14 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 80097bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80097be:	220c      	movs	r2, #12
 80097c0:	5e9b      	ldrsh	r3, [r3, r2]
 80097c2:	4a22      	ldr	r2, [pc, #136]	@ (800984c <sen5x_printvalues+0x1c8>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d014      	beq.n	80097f2 <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80097c8:	4b19      	ldr	r3, [pc, #100]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80097ca:	220c      	movs	r2, #12
 80097cc:	5e9b      	ldrsh	r3, [r3, r2]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7f7 fefe 	bl	80015d0 <__aeabi_i2f>
 80097d4:	1c03      	adds	r3, r0, #0
 80097d6:	4918      	ldr	r1, [pc, #96]	@ (8009838 <sen5x_printvalues+0x1b4>)
 80097d8:	1c18      	adds	r0, r3, #0
 80097da:	f7f7 f9fb 	bl	8000bd4 <__aeabi_fdiv>
 80097de:	1c03      	adds	r3, r0, #0
 80097e0:	1c18      	adds	r0, r3, #0
 80097e2:	f7f9 fe3f 	bl	8003464 <__aeabi_f2d>
 80097e6:	0002      	movs	r2, r0
 80097e8:	000b      	movs	r3, r1
 80097ea:	491d      	ldr	r1, [pc, #116]	@ (8009860 <sen5x_printvalues+0x1dc>)
 80097ec:	0008      	movs	r0, r1
 80097ee:	f016 fbf9 	bl	801ffe4 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 80097f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009830 <sen5x_printvalues+0x1ac>)
 80097f4:	220e      	movs	r2, #14
 80097f6:	5e9b      	ldrsh	r3, [r3, r2]
 80097f8:	4a14      	ldr	r2, [pc, #80]	@ (800984c <sen5x_printvalues+0x1c8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d014      	beq.n	8009828 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 80097fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009830 <sen5x_printvalues+0x1ac>)
 8009800:	220e      	movs	r2, #14
 8009802:	5e9b      	ldrsh	r3, [r3, r2]
 8009804:	0018      	movs	r0, r3
 8009806:	f7f7 fee3 	bl	80015d0 <__aeabi_i2f>
 800980a:	1c03      	adds	r3, r0, #0
 800980c:	490a      	ldr	r1, [pc, #40]	@ (8009838 <sen5x_printvalues+0x1b4>)
 800980e:	1c18      	adds	r0, r3, #0
 8009810:	f7f7 f9e0 	bl	8000bd4 <__aeabi_fdiv>
 8009814:	1c03      	adds	r3, r0, #0
 8009816:	1c18      	adds	r0, r3, #0
 8009818:	f7f9 fe24 	bl	8003464 <__aeabi_f2d>
 800981c:	0002      	movs	r2, r0
 800981e:	000b      	movs	r3, r1
 8009820:	4910      	ldr	r1, [pc, #64]	@ (8009864 <sen5x_printvalues+0x1e0>)
 8009822:	0008      	movs	r0, r1
 8009824:	f016 fbde 	bl	801ffe4 <iprintf>
  }
}
 8009828:	46c0      	nop			@ (mov r8, r8)
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	46c0      	nop			@ (mov r8, r8)
 8009830:	2000108c 	.word	0x2000108c
 8009834:	0000ffff 	.word	0x0000ffff
 8009838:	41200000 	.word	0x41200000
 800983c:	08024a98 	.word	0x08024a98
 8009840:	08024ac4 	.word	0x08024ac4
 8009844:	08024af0 	.word	0x08024af0
 8009848:	08024b1c 	.word	0x08024b1c
 800984c:	00007fff 	.word	0x00007fff
 8009850:	42c80000 	.word	0x42c80000
 8009854:	08024b48 	.word	0x08024b48
 8009858:	43480000 	.word	0x43480000
 800985c:	08024b6c 	.word	0x08024b6c
 8009860:	08024b94 	.word	0x08024b94
 8009864:	08024bac 	.word	0x08024bac

08009868 <sen5xResetMax>:

void sen5xResetMax() {
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  pm2p5max = 0;
 800986c:	4b07      	ldr	r3, [pc, #28]	@ (800988c <sen5xResetMax+0x24>)
 800986e:	2200      	movs	r2, #0
 8009870:	801a      	strh	r2, [r3, #0]
  pm10p0max = 0;
 8009872:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <sen5xResetMax+0x28>)
 8009874:	2200      	movs	r2, #0
 8009876:	801a      	strh	r2, [r3, #0]
  s5xvocimax = 0;
 8009878:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <sen5xResetMax+0x2c>)
 800987a:	2200      	movs	r2, #0
 800987c:	801a      	strh	r2, [r3, #0]
  s5xnoximax = 0;
 800987e:	4b06      	ldr	r3, [pc, #24]	@ (8009898 <sen5xResetMax+0x30>)
 8009880:	2200      	movs	r2, #0
 8009882:	801a      	strh	r2, [r3, #0]
}
 8009884:	46c0      	nop			@ (mov r8, r8)
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	46c0      	nop			@ (mov r8, r8)
 800988c:	20001076 	.word	0x20001076
 8009890:	20001078 	.word	0x20001078
 8009894:	2000107a 	.word	0x2000107a
 8009898:	2000107c 	.word	0x2000107c

0800989c <sen5xStoreMax>:

void sen5xStoreMax() {
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
  bool updateflag = false;
 80098a2:	1dfb      	adds	r3, r7, #7
 80098a4:	2200      	movs	r2, #0
 80098a6:	701a      	strb	r2, [r3, #0]
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 80098a8:	4b2a      	ldr	r3, [pc, #168]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098aa:	885b      	ldrh	r3, [r3, #2]
 80098ac:	4a2a      	ldr	r2, [pc, #168]	@ (8009958 <sen5xStoreMax+0xbc>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00c      	beq.n	80098cc <sen5xStoreMax+0x30>
 80098b2:	4b28      	ldr	r3, [pc, #160]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098b4:	885a      	ldrh	r2, [r3, #2]
 80098b6:	4b29      	ldr	r3, [pc, #164]	@ (800995c <sen5xStoreMax+0xc0>)
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d906      	bls.n	80098cc <sen5xStoreMax+0x30>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 80098be:	4b25      	ldr	r3, [pc, #148]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098c0:	885a      	ldrh	r2, [r3, #2]
 80098c2:	4b26      	ldr	r3, [pc, #152]	@ (800995c <sen5xStoreMax+0xc0>)
 80098c4:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 80098c6:	1dfb      	adds	r3, r7, #7
 80098c8:	2201      	movs	r2, #1
 80098ca:	701a      	strb	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 80098cc:	4b21      	ldr	r3, [pc, #132]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098ce:	88db      	ldrh	r3, [r3, #6]
 80098d0:	4a21      	ldr	r2, [pc, #132]	@ (8009958 <sen5xStoreMax+0xbc>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00c      	beq.n	80098f0 <sen5xStoreMax+0x54>
 80098d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098d8:	88da      	ldrh	r2, [r3, #6]
 80098da:	4b21      	ldr	r3, [pc, #132]	@ (8009960 <sen5xStoreMax+0xc4>)
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d906      	bls.n	80098f0 <sen5xStoreMax+0x54>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 80098e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098e4:	88da      	ldrh	r2, [r3, #6]
 80098e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009960 <sen5xStoreMax+0xc4>)
 80098e8:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 80098ea:	1dfb      	adds	r3, r7, #7
 80098ec:	2201      	movs	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 80098f0:	4b18      	ldr	r3, [pc, #96]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098f2:	220c      	movs	r2, #12
 80098f4:	5e9b      	ldrsh	r3, [r3, r2]
 80098f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009964 <sen5xStoreMax+0xc8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d010      	beq.n	800991e <sen5xStoreMax+0x82>
 80098fc:	4b15      	ldr	r3, [pc, #84]	@ (8009954 <sen5xStoreMax+0xb8>)
 80098fe:	220c      	movs	r2, #12
 8009900:	5e9b      	ldrsh	r3, [r3, r2]
 8009902:	001a      	movs	r2, r3
 8009904:	4b18      	ldr	r3, [pc, #96]	@ (8009968 <sen5xStoreMax+0xcc>)
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	dd08      	ble.n	800991e <sen5xStoreMax+0x82>
    s5xvocimax = sen5x_data.voc_index;
 800990c:	4b11      	ldr	r3, [pc, #68]	@ (8009954 <sen5xStoreMax+0xb8>)
 800990e:	220c      	movs	r2, #12
 8009910:	5e9b      	ldrsh	r3, [r3, r2]
 8009912:	b29a      	uxth	r2, r3
 8009914:	4b14      	ldr	r3, [pc, #80]	@ (8009968 <sen5xStoreMax+0xcc>)
 8009916:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 8009918:	1dfb      	adds	r3, r7, #7
 800991a:	2201      	movs	r2, #1
 800991c:	701a      	strb	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 800991e:	4b0d      	ldr	r3, [pc, #52]	@ (8009954 <sen5xStoreMax+0xb8>)
 8009920:	220e      	movs	r2, #14
 8009922:	5e9b      	ldrsh	r3, [r3, r2]
 8009924:	4a0f      	ldr	r2, [pc, #60]	@ (8009964 <sen5xStoreMax+0xc8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d010      	beq.n	800994c <sen5xStoreMax+0xb0>
 800992a:	4b0a      	ldr	r3, [pc, #40]	@ (8009954 <sen5xStoreMax+0xb8>)
 800992c:	220e      	movs	r2, #14
 800992e:	5e9b      	ldrsh	r3, [r3, r2]
 8009930:	001a      	movs	r2, r3
 8009932:	4b0e      	ldr	r3, [pc, #56]	@ (800996c <sen5xStoreMax+0xd0>)
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	dd08      	ble.n	800994c <sen5xStoreMax+0xb0>
    s5xnoximax = sen5x_data.nox_index;
 800993a:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <sen5xStoreMax+0xb8>)
 800993c:	220e      	movs	r2, #14
 800993e:	5e9b      	ldrsh	r3, [r3, r2]
 8009940:	b29a      	uxth	r2, r3
 8009942:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <sen5xStoreMax+0xd0>)
 8009944:	801a      	strh	r2, [r3, #0]
    updateflag = true;
 8009946:	1dfb      	adds	r3, r7, #7
 8009948:	2201      	movs	r2, #1
 800994a:	701a      	strb	r2, [r3, #0]
    else {
      setPMsen50(pm2p5max, pm10p0max);
    }
*/
  }
}
 800994c:	46c0      	nop			@ (mov r8, r8)
 800994e:	46bd      	mov	sp, r7
 8009950:	b002      	add	sp, #8
 8009952:	bd80      	pop	{r7, pc}
 8009954:	2000108c 	.word	0x2000108c
 8009958:	0000ffff 	.word	0x0000ffff
 800995c:	20001076 	.word	0x20001076
 8009960:	20001078 	.word	0x20001078
 8009964:	00007fff 	.word	0x00007fff
 8009968:	2000107a 	.word	0x2000107a
 800996c:	2000107c 	.word	0x2000107c

08009970 <sen5xStore>:

void sen5xStore() {
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009974:	4b29      	ldr	r3, [pc, #164]	@ (8009a1c <sen5xStore+0xac>)
 8009976:	885b      	ldrh	r3, [r3, #2]
 8009978:	4a29      	ldr	r2, [pc, #164]	@ (8009a20 <sen5xStore+0xb0>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d003      	beq.n	8009986 <sen5xStore+0x16>
    pm2p5 = sen5x_data.mass_concentration_pm2p5;
 800997e:	4b27      	ldr	r3, [pc, #156]	@ (8009a1c <sen5xStore+0xac>)
 8009980:	885a      	ldrh	r2, [r3, #2]
 8009982:	4b28      	ldr	r3, [pc, #160]	@ (8009a24 <sen5xStore+0xb4>)
 8009984:	801a      	strh	r2, [r3, #0]
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009986:	4b25      	ldr	r3, [pc, #148]	@ (8009a1c <sen5xStore+0xac>)
 8009988:	88db      	ldrh	r3, [r3, #6]
 800998a:	4a25      	ldr	r2, [pc, #148]	@ (8009a20 <sen5xStore+0xb0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d003      	beq.n	8009998 <sen5xStore+0x28>
    pm10p0 = sen5x_data.mass_concentration_pm10p0;
 8009990:	4b22      	ldr	r3, [pc, #136]	@ (8009a1c <sen5xStore+0xac>)
 8009992:	88da      	ldrh	r2, [r3, #6]
 8009994:	4b24      	ldr	r3, [pc, #144]	@ (8009a28 <sen5xStore+0xb8>)
 8009996:	801a      	strh	r2, [r3, #0]
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009998:	4b20      	ldr	r3, [pc, #128]	@ (8009a1c <sen5xStore+0xac>)
 800999a:	220c      	movs	r2, #12
 800999c:	5e9b      	ldrsh	r3, [r3, r2]
 800999e:	4a23      	ldr	r2, [pc, #140]	@ (8009a2c <sen5xStore+0xbc>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d010      	beq.n	80099c6 <sen5xStore+0x56>
    s5xvoci = sen5x_data.voc_index;
 80099a4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a1c <sen5xStore+0xac>)
 80099a6:	220c      	movs	r2, #12
 80099a8:	5e9b      	ldrsh	r3, [r3, r2]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	4b20      	ldr	r3, [pc, #128]	@ (8009a30 <sen5xStore+0xc0>)
 80099ae:	801a      	strh	r2, [r3, #0]
    SetVOCindicator(s5xvoci/10);
 80099b0:	4b1f      	ldr	r3, [pc, #124]	@ (8009a30 <sen5xStore+0xc0>)
 80099b2:	881b      	ldrh	r3, [r3, #0]
 80099b4:	210a      	movs	r1, #10
 80099b6:	0018      	movs	r0, r3
 80099b8:	f7f6 fbf4 	bl	80001a4 <__udivsi3>
 80099bc:	0003      	movs	r3, r0
 80099be:	b29b      	uxth	r3, r3
 80099c0:	0018      	movs	r0, r3
 80099c2:	f003 fdfd 	bl	800d5c0 <SetVOCindicator>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 80099c6:	4b15      	ldr	r3, [pc, #84]	@ (8009a1c <sen5xStore+0xac>)
 80099c8:	220e      	movs	r2, #14
 80099ca:	5e9b      	ldrsh	r3, [r3, r2]
 80099cc:	4a17      	ldr	r2, [pc, #92]	@ (8009a2c <sen5xStore+0xbc>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d005      	beq.n	80099de <sen5xStore+0x6e>
    s5xnoxi = sen5x_data.nox_index;
 80099d2:	4b12      	ldr	r3, [pc, #72]	@ (8009a1c <sen5xStore+0xac>)
 80099d4:	220e      	movs	r2, #14
 80099d6:	5e9b      	ldrsh	r3, [r3, r2]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	4b16      	ldr	r3, [pc, #88]	@ (8009a34 <sen5xStore+0xc4>)
 80099dc:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 80099de:	4b16      	ldr	r3, [pc, #88]	@ (8009a38 <sen5xStore+0xc8>)
 80099e0:	791b      	ldrb	r3, [r3, #4]
 80099e2:	2b34      	cmp	r3, #52	@ 0x34
 80099e4:	d003      	beq.n	80099ee <sen5xStore+0x7e>
 80099e6:	4b14      	ldr	r3, [pc, #80]	@ (8009a38 <sen5xStore+0xc8>)
 80099e8:	791b      	ldrb	r3, [r3, #4]
 80099ea:	2b35      	cmp	r3, #53	@ 0x35
 80099ec:	d10a      	bne.n	8009a04 <sen5xStore+0x94>
    setPMs(pm2p5, pm10p0, s5xvoci, s5xnoxi);
 80099ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <sen5xStore+0xb4>)
 80099f0:	8818      	ldrh	r0, [r3, #0]
 80099f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a28 <sen5xStore+0xb8>)
 80099f4:	8819      	ldrh	r1, [r3, #0]
 80099f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009a30 <sen5xStore+0xc0>)
 80099f8:	881a      	ldrh	r2, [r3, #0]
 80099fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009a34 <sen5xStore+0xc4>)
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	f7f9 ffdf 	bl	80039c0 <setPMs>
 8009a02:	e008      	b.n	8009a16 <sen5xStore+0xa6>
//    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
  }
  else {
    setPMsen50(pm2p5, pm10p0);
 8009a04:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <sen5xStore+0xb4>)
 8009a06:	881a      	ldrh	r2, [r3, #0]
 8009a08:	4b07      	ldr	r3, [pc, #28]	@ (8009a28 <sen5xStore+0xb8>)
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	0019      	movs	r1, r3
 8009a0e:	0010      	movs	r0, r2
 8009a10:	f7f9 ffa8 	bl	8003964 <setPMsen50>
  }
}
 8009a14:	46c0      	nop			@ (mov r8, r8)
 8009a16:	46c0      	nop			@ (mov r8, r8)
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	2000108c 	.word	0x2000108c
 8009a20:	0000ffff 	.word	0x0000ffff
 8009a24:	2000107e 	.word	0x2000107e
 8009a28:	20001080 	.word	0x20001080
 8009a2c:	00007fff 	.word	0x00007fff
 8009a30:	20001082 	.word	0x20001082
 8009a34:	20001084 	.word	0x20001084
 8009a38:	2000106c 	.word	0x2000106c

08009a3c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af02      	add	r7, sp, #8
 8009a42:	6039      	str	r1, [r7, #0]
 8009a44:	0011      	movs	r1, r2
 8009a46:	1dfb      	adds	r3, r7, #7
 8009a48:	1c02      	adds	r2, r0, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	1c0a      	adds	r2, r1, #0
 8009a50:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009a52:	1dfb      	adds	r3, r7, #7
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	18db      	adds	r3, r3, r3
 8009a5a:	b299      	uxth	r1, r3
 8009a5c:	1d3b      	adds	r3, r7, #4
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	4805      	ldr	r0, [pc, #20]	@ (8009a78 <sensirion_i2c_hal_read+0x3c>)
 8009a64:	2464      	movs	r4, #100	@ 0x64
 8009a66:	9400      	str	r4, [sp, #0]
 8009a68:	f006 fe80 	bl	801076c <HAL_I2C_Master_Receive>
 8009a6c:	0003      	movs	r3, r0
 8009a6e:	b25b      	sxtb	r3, r3
}
 8009a70:	0018      	movs	r0, r3
 8009a72:	46bd      	mov	sp, r7
 8009a74:	b003      	add	sp, #12
 8009a76:	bd90      	pop	{r4, r7, pc}
 8009a78:	20000e48 	.word	0x20000e48

08009a7c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	6039      	str	r1, [r7, #0]
 8009a84:	0011      	movs	r1, r2
 8009a86:	1dfb      	adds	r3, r7, #7
 8009a88:	1c02      	adds	r2, r0, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	1d3b      	adds	r3, r7, #4
 8009a8e:	1c0a      	adds	r2, r1, #0
 8009a90:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009a92:	1dfb      	adds	r3, r7, #7
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	18db      	adds	r3, r3, r3
 8009a9a:	b299      	uxth	r1, r3
 8009a9c:	1d3b      	adds	r3, r7, #4
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	4805      	ldr	r0, [pc, #20]	@ (8009ab8 <sensirion_i2c_hal_write+0x3c>)
 8009aa4:	2464      	movs	r4, #100	@ 0x64
 8009aa6:	9400      	str	r4, [sp, #0]
 8009aa8:	f006 fd58 	bl	801055c <HAL_I2C_Master_Transmit>
 8009aac:	0003      	movs	r3, r0
 8009aae:	b25b      	sxtb	r3, r3
}
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	b003      	add	sp, #12
 8009ab6:	bd90      	pop	{r4, r7, pc}
 8009ab8:	20000e48 	.word	0x20000e48

08009abc <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	22fa      	movs	r2, #250	@ 0xfa
 8009ac8:	0091      	lsls	r1, r2, #2
 8009aca:	0018      	movs	r0, r3
 8009acc:	f7f6 fb6a 	bl	80001a4 <__udivsi3>
 8009ad0:	0003      	movs	r3, r0
 8009ad2:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	22fa      	movs	r2, #250	@ 0xfa
 8009ad8:	0091      	lsls	r1, r2, #2
 8009ada:	0018      	movs	r0, r3
 8009adc:	f7f6 fbe8 	bl	80002b0 <__aeabi_uidivmod>
 8009ae0:	1e0b      	subs	r3, r1, #0
 8009ae2:	d002      	beq.n	8009aea <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	0018      	movs	r0, r3
 8009aee:	f005 f9df 	bl	800eeb0 <HAL_Delay>
}
 8009af2:	46c0      	nop			@ (mov r8, r8)
 8009af4:	46bd      	mov	sp, r7
 8009af6:	b004      	add	sp, #16
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009b06:	1d3b      	adds	r3, r7, #4
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f000 fcd9 	bl	800a4c0 <sen5x_read_device_status>
 8009b0e:	1e03      	subs	r3, r0, #0
 8009b10:	d007      	beq.n	8009b22 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009b12:	4a28      	ldr	r2, [pc, #160]	@ (8009bb4 <sen5x_check_for_errors+0xb8>)
 8009b14:	4b28      	ldr	r3, [pc, #160]	@ (8009bb8 <sen5x_check_for_errors+0xbc>)
 8009b16:	0019      	movs	r1, r3
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f004 fd7f 	bl	800e61c <CreateLine>
    return 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e043      	b.n	8009baa <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <sen5x_check_for_errors+0x30>
    return 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e03e      	b.n	8009baa <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	2380      	movs	r3, #128	@ 0x80
 8009b30:	039b      	lsls	r3, r3, #14
 8009b32:	4013      	ands	r3, r2
 8009b34:	d005      	beq.n	8009b42 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 8009b36:	4a21      	ldr	r2, [pc, #132]	@ (8009bbc <sen5x_check_for_errors+0xc0>)
 8009b38:	4b21      	ldr	r3, [pc, #132]	@ (8009bc0 <sen5x_check_for_errors+0xc4>)
 8009b3a:	0019      	movs	r1, r3
 8009b3c:	2003      	movs	r0, #3
 8009b3e:	f004 fd6d 	bl	800e61c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	2380      	movs	r3, #128	@ 0x80
 8009b46:	031b      	lsls	r3, r3, #12
 8009b48:	4013      	ands	r3, r2
 8009b4a:	d005      	beq.n	8009b58 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc4 <sen5x_check_for_errors+0xc8>)
 8009b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bc0 <sen5x_check_for_errors+0xc4>)
 8009b50:	0019      	movs	r1, r3
 8009b52:	2003      	movs	r0, #3
 8009b54:	f004 fd62 	bl	800e61c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2280      	movs	r2, #128	@ 0x80
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	d005      	beq.n	8009b6c <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009b60:	4a19      	ldr	r2, [pc, #100]	@ (8009bc8 <sen5x_check_for_errors+0xcc>)
 8009b62:	4b17      	ldr	r3, [pc, #92]	@ (8009bc0 <sen5x_check_for_errors+0xc4>)
 8009b64:	0019      	movs	r1, r3
 8009b66:	2003      	movs	r0, #3
 8009b68:	f004 fd58 	bl	800e61c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2240      	movs	r2, #64	@ 0x40
 8009b70:	4013      	ands	r3, r2
 8009b72:	d005      	beq.n	8009b80 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009b74:	4a15      	ldr	r2, [pc, #84]	@ (8009bcc <sen5x_check_for_errors+0xd0>)
 8009b76:	4b12      	ldr	r3, [pc, #72]	@ (8009bc0 <sen5x_check_for_errors+0xc4>)
 8009b78:	0019      	movs	r1, r3
 8009b7a:	2003      	movs	r0, #3
 8009b7c:	f004 fd4e 	bl	800e61c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	4013      	ands	r3, r2
 8009b86:	d005      	beq.n	8009b94 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009b88:	4a11      	ldr	r2, [pc, #68]	@ (8009bd0 <sen5x_check_for_errors+0xd4>)
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc0 <sen5x_check_for_errors+0xc4>)
 8009b8c:	0019      	movs	r1, r3
 8009b8e:	2003      	movs	r0, #3
 8009b90:	f004 fd44 	bl	800e61c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2210      	movs	r2, #16
 8009b98:	4013      	ands	r3, r2
 8009b9a:	d005      	beq.n	8009ba8 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd4 <sen5x_check_for_errors+0xd8>)
 8009b9e:	4b08      	ldr	r3, [pc, #32]	@ (8009bc0 <sen5x_check_for_errors+0xc4>)
 8009ba0:	0019      	movs	r1, r3
 8009ba2:	2003      	movs	r0, #3
 8009ba4:	f004 fd3a 	bl	800e61c <CreateLine>
  }
  return 1;
 8009ba8:	2301      	movs	r3, #1
}
 8009baa:	0018      	movs	r0, r3
 8009bac:	46bd      	mov	sp, r7
 8009bae:	b002      	add	sp, #8
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	08024bc4 	.word	0x08024bc4
 8009bb8:	080247c0 	.word	0x080247c0
 8009bbc:	08024bf0 	.word	0x08024bf0
 8009bc0:	0802470c 	.word	0x0802470c
 8009bc4:	08024c10 	.word	0x08024c10
 8009bc8:	08024c2c 	.word	0x08024c2c
 8009bcc:	08024c50 	.word	0x08024c50
 8009bd0:	08024c70 	.word	0x08024c70
 8009bd4:	08024c84 	.word	0x08024c84

08009bd8 <set_light_on_state>:

void set_light_on_state(void) {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009bdc:	4b15      	ldr	r3, [pc, #84]	@ (8009c34 <set_light_on_state+0x5c>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2201      	movs	r2, #1
 8009be2:	4053      	eors	r3, r2
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d008      	beq.n	8009bfc <set_light_on_state+0x24>
    sen5x_Power_On();
 8009bea:	f7ff fabf 	bl	800916c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009bee:	4a12      	ldr	r2, [pc, #72]	@ (8009c38 <set_light_on_state+0x60>)
 8009bf0:	4b12      	ldr	r3, [pc, #72]	@ (8009c3c <set_light_on_state+0x64>)
 8009bf2:	0019      	movs	r1, r3
 8009bf4:	2003      	movs	r0, #3
 8009bf6:	f004 fd11 	bl	800e61c <CreateLine>
 8009bfa:	e00a      	b.n	8009c12 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009bfc:	f005 f94e 	bl	800ee9c <HAL_GetTick>
 8009c00:	0002      	movs	r2, r0
 8009c02:	4b0f      	ldr	r3, [pc, #60]	@ (8009c40 <set_light_on_state+0x68>)
 8009c04:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009c06:	4a0f      	ldr	r2, [pc, #60]	@ (8009c44 <set_light_on_state+0x6c>)
 8009c08:	4b0c      	ldr	r3, [pc, #48]	@ (8009c3c <set_light_on_state+0x64>)
 8009c0a:	0019      	movs	r1, r3
 8009c0c:	2003      	movs	r0, #3
 8009c0e:	f004 fd05 	bl	800e61c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009c12:	f7ff fc35 	bl	8009480 <sen5x_lightup_measurement>
 8009c16:	1e03      	subs	r3, r0, #0
 8009c18:	d005      	beq.n	8009c26 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8009c48 <set_light_on_state+0x70>)
 8009c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <set_light_on_state+0x74>)
 8009c1e:	0019      	movs	r1, r3
 8009c20:	2001      	movs	r0, #1
 8009c22:	f004 fcfb 	bl	800e61c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009c26:	4b0a      	ldr	r3, [pc, #40]	@ (8009c50 <set_light_on_state+0x78>)
 8009c28:	2203      	movs	r2, #3
 8009c2a:	701a      	strb	r2, [r3, #0]
}
 8009c2c:	46c0      	nop			@ (mov r8, r8)
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	46c0      	nop			@ (mov r8, r8)
 8009c34:	20001066 	.word	0x20001066
 8009c38:	08024cc0 	.word	0x08024cc0
 8009c3c:	0802470c 	.word	0x0802470c
 8009c40:	20001088 	.word	0x20001088
 8009c44:	08024cec 	.word	0x08024cec
 8009c48:	08024d04 	.word	0x08024d04
 8009c4c:	080247c0 	.word	0x080247c0
 8009c50:	2000008d 	.word	0x2000008d

08009c54 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009c5a:	1dfb      	adds	r3, r7, #7
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009c60:	4b75      	ldr	r3, [pc, #468]	@ (8009e38 <sen5x_statemachine+0x1e4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	0018      	movs	r0, r3
 8009c66:	f004 fc83 	bl	800e570 <TimestampIsReached>
 8009c6a:	1e03      	subs	r3, r0, #0
 8009c6c:	d100      	bne.n	8009c70 <sen5x_statemachine+0x1c>
 8009c6e:	e0df      	b.n	8009e30 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009c70:	4b72      	ldr	r3, [pc, #456]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d900      	bls.n	8009c7a <sen5x_statemachine+0x26>
 8009c78:	e0da      	b.n	8009e30 <sen5x_statemachine+0x1dc>
 8009c7a:	009a      	lsls	r2, r3, #2
 8009c7c:	4b70      	ldr	r3, [pc, #448]	@ (8009e40 <sen5x_statemachine+0x1ec>)
 8009c7e:	18d3      	adds	r3, r2, r3
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009c84:	4a6f      	ldr	r2, [pc, #444]	@ (8009e44 <sen5x_statemachine+0x1f0>)
 8009c86:	4b70      	ldr	r3, [pc, #448]	@ (8009e48 <sen5x_statemachine+0x1f4>)
 8009c88:	0019      	movs	r1, r3
 8009c8a:	2001      	movs	r0, #1
 8009c8c:	f004 fcc6 	bl	800e61c <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009c90:	f005 f904 	bl	800ee9c <HAL_GetTick>
 8009c94:	0003      	movs	r3, r0
 8009c96:	4a6d      	ldr	r2, [pc, #436]	@ (8009e4c <sen5x_statemachine+0x1f8>)
 8009c98:	189a      	adds	r2, r3, r2
 8009c9a:	4b67      	ldr	r3, [pc, #412]	@ (8009e38 <sen5x_statemachine+0x1e4>)
 8009c9c:	601a      	str	r2, [r3, #0]
      break;
 8009c9e:	e0c7      	b.n	8009e30 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009ca0:	f005 f8fc 	bl	800ee9c <HAL_GetTick>
 8009ca4:	0003      	movs	r3, r0
 8009ca6:	4a6a      	ldr	r2, [pc, #424]	@ (8009e50 <sen5x_statemachine+0x1fc>)
 8009ca8:	189a      	adds	r2, r3, r2
 8009caa:	4b63      	ldr	r3, [pc, #396]	@ (8009e38 <sen5x_statemachine+0x1e4>)
 8009cac:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009cae:	f7ff ff93 	bl	8009bd8 <set_light_on_state>
      break;
 8009cb2:	e0bd      	b.n	8009e30 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009cb4:	4b61      	ldr	r3, [pc, #388]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009cba:	4b66      	ldr	r3, [pc, #408]	@ (8009e54 <sen5x_statemachine+0x200>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	d905      	bls.n	8009cce <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009cc8:	f7ff fa6e 	bl	80091a8 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009ccc:	e0ad      	b.n	8009e2a <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009cce:	f7ff ff15 	bl	8009afc <sen5x_check_for_errors>
 8009cd2:	1e03      	subs	r3, r0, #0
 8009cd4:	d100      	bne.n	8009cd8 <sen5x_statemachine+0x84>
 8009cd6:	e0a8      	b.n	8009e2a <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009cd8:	f000 fc44 	bl	800a564 <sen5x_device_reset>
 8009cdc:	1e03      	subs	r3, r0, #0
 8009cde:	d006      	beq.n	8009cee <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8009e58 <sen5x_statemachine+0x204>)
 8009ce2:	4b59      	ldr	r3, [pc, #356]	@ (8009e48 <sen5x_statemachine+0x1f4>)
 8009ce4:	0019      	movs	r1, r3
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f004 fc98 	bl	800e61c <CreateLine>
 8009cec:	e005      	b.n	8009cfa <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009cee:	4a5b      	ldr	r2, [pc, #364]	@ (8009e5c <sen5x_statemachine+0x208>)
 8009cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8009e60 <sen5x_statemachine+0x20c>)
 8009cf2:	0019      	movs	r1, r3
 8009cf4:	2002      	movs	r0, #2
 8009cf6:	f004 fc91 	bl	800e61c <CreateLine>
          sen5xErrors++;
 8009cfa:	4b56      	ldr	r3, [pc, #344]	@ (8009e54 <sen5x_statemachine+0x200>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	4b54      	ldr	r3, [pc, #336]	@ (8009e54 <sen5x_statemachine+0x200>)
 8009d04:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009d06:	f005 f8c9 	bl	800ee9c <HAL_GetTick>
 8009d0a:	0003      	movs	r3, r0
 8009d0c:	3396      	adds	r3, #150	@ 0x96
 8009d0e:	001a      	movs	r2, r3
 8009d10:	4b49      	ldr	r3, [pc, #292]	@ (8009e38 <sen5x_statemachine+0x1e4>)
 8009d12:	601a      	str	r2, [r3, #0]
      break;
 8009d14:	e089      	b.n	8009e2a <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009d16:	1dfb      	adds	r3, r7, #7
 8009d18:	0018      	movs	r0, r3
 8009d1a:	f000 f93f 	bl	8009f9c <sen5x_read_data_ready>
      if (data_ready) {
 8009d1e:	1dfb      	adds	r3, r7, #7
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d028      	beq.n	8009d78 <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009d26:	f003 fbbb 	bl	800d4a0 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8009e64 <sen5x_statemachine+0x210>)
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f7ff fc4d 	bl	80095cc <sen5x_read_measurement>
 8009d32:	1e03      	subs	r3, r0, #0
 8009d34:	d005      	beq.n	8009d42 <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009d36:	4a4c      	ldr	r2, [pc, #304]	@ (8009e68 <sen5x_statemachine+0x214>)
 8009d38:	4b43      	ldr	r3, [pc, #268]	@ (8009e48 <sen5x_statemachine+0x1f4>)
 8009d3a:	0019      	movs	r1, r3
 8009d3c:	2001      	movs	r0, #1
 8009d3e:	f004 fc6d 	bl	800e61c <CreateLine>
        }
        sen5xSamples++;
 8009d42:	4b4a      	ldr	r3, [pc, #296]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	4b48      	ldr	r3, [pc, #288]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d4c:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 8009d4e:	4b47      	ldr	r3, [pc, #284]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b1f      	cmp	r3, #31
 8009d54:	d102      	bne.n	8009d5c <sen5x_statemachine+0x108>
          sen5xSamples = 0;  // enable display on serial
 8009d56:	4b45      	ldr	r3, [pc, #276]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009d5c:	4b43      	ldr	r3, [pc, #268]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d901      	bls.n	8009d68 <sen5x_statemachine+0x114>
          sen5xStoreMax();
 8009d64:	f7ff fd9a 	bl	800989c <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009d68:	4b40      	ldr	r3, [pc, #256]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d103      	bne.n	8009d78 <sen5x_statemachine+0x124>
          sen5xStore();
 8009d70:	f7ff fdfe 	bl	8009970 <sen5xStore>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009d74:	f7ff fc86 	bl	8009684 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009d78:	4b3d      	ldr	r3, [pc, #244]	@ (8009e70 <sen5x_statemachine+0x21c>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <sen5x_statemachine+0x134>
 8009d80:	4b3a      	ldr	r3, [pc, #232]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d952      	bls.n	8009e2e <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009d88:	4b2c      	ldr	r3, [pc, #176]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d8e:	e04e      	b.n	8009e2e <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009d90:	f7fc fe4c 	bl	8006a2c <RTC_GetWeekday>
 8009d94:	0003      	movs	r3, r0
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d118      	bne.n	8009dcc <sen5x_statemachine+0x178>
 8009d9a:	4b36      	ldr	r3, [pc, #216]	@ (8009e74 <sen5x_statemachine+0x220>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	4053      	eors	r3, r2
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d011      	beq.n	8009dcc <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009da8:	f000 f9de 	bl	800a168 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009dac:	4a32      	ldr	r2, [pc, #200]	@ (8009e78 <sen5x_statemachine+0x224>)
 8009dae:	4b2c      	ldr	r3, [pc, #176]	@ (8009e60 <sen5x_statemachine+0x20c>)
 8009db0:	0019      	movs	r1, r3
 8009db2:	2002      	movs	r0, #2
 8009db4:	f004 fc32 	bl	800e61c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009db8:	f005 f870 	bl	800ee9c <HAL_GetTick>
 8009dbc:	0003      	movs	r3, r0
 8009dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8009e7c <sen5x_statemachine+0x228>)
 8009dc0:	189a      	adds	r2, r3, r2
 8009dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e38 <sen5x_statemachine+0x1e4>)
 8009dc4:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8009e74 <sen5x_statemachine+0x220>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009dce:	2205      	movs	r2, #5
 8009dd0:	701a      	strb	r2, [r3, #0]
      break;
 8009dd2:	e02d      	b.n	8009e30 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn) {
 8009dd4:	4b26      	ldr	r3, [pc, #152]	@ (8009e70 <sen5x_statemachine+0x21c>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4053      	eors	r3, r2
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d015      	beq.n	8009e0e <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009de2:	f7ff fb99 	bl	8009518 <sen5x_extinguish_measurement>
 8009de6:	1e03      	subs	r3, r0, #0
 8009de8:	d005      	beq.n	8009df6 <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009dea:	4a25      	ldr	r2, [pc, #148]	@ (8009e80 <sen5x_statemachine+0x22c>)
 8009dec:	4b16      	ldr	r3, [pc, #88]	@ (8009e48 <sen5x_statemachine+0x1f4>)
 8009dee:	0019      	movs	r1, r3
 8009df0:	2001      	movs	r0, #1
 8009df2:	f004 fc13 	bl	800e61c <CreateLine>
        }
        sen5xSamples = 0;
 8009df6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e6c <sen5x_statemachine+0x218>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009dfc:	f7ff f9d4 	bl	80091a8 <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009e00:	2000      	movs	r0, #0
 8009e02:	f7fe fb3f 	bl	8008484 <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009e06:	4b0d      	ldr	r3, [pc, #52]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e002      	b.n	8009e14 <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <sen5x_statemachine+0x1e8>)
 8009e10:	2203      	movs	r2, #3
 8009e12:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009e14:	f003 fb6a 	bl	800d4ec <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009e18:	f005 f840 	bl	800ee9c <HAL_GetTick>
 8009e1c:	0003      	movs	r3, r0
 8009e1e:	22fa      	movs	r2, #250	@ 0xfa
 8009e20:	0092      	lsls	r2, r2, #2
 8009e22:	189a      	adds	r2, r3, r2
 8009e24:	4b04      	ldr	r3, [pc, #16]	@ (8009e38 <sen5x_statemachine+0x1e4>)
 8009e26:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009e28:	e002      	b.n	8009e30 <sen5x_statemachine+0x1dc>
      break;
 8009e2a:	46c0      	nop			@ (mov r8, r8)
 8009e2c:	e000      	b.n	8009e30 <sen5x_statemachine+0x1dc>
      break;
 8009e2e:	46c0      	nop			@ (mov r8, r8)
}
 8009e30:	46c0      	nop			@ (mov r8, r8)
 8009e32:	46bd      	mov	sp, r7
 8009e34:	b002      	add	sp, #8
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20001088 	.word	0x20001088
 8009e3c:	2000008d 	.word	0x2000008d
 8009e40:	080256b4 	.word	0x080256b4
 8009e44:	08024d30 	.word	0x08024d30
 8009e48:	080247c0 	.word	0x080247c0
 8009e4c:	002fefd8 	.word	0x002fefd8
 8009e50:	00005910 	.word	0x00005910
 8009e54:	20001075 	.word	0x20001075
 8009e58:	08024d60 	.word	0x08024d60
 8009e5c:	08024d78 	.word	0x08024d78
 8009e60:	080246cc 	.word	0x080246cc
 8009e64:	2000108c 	.word	0x2000108c
 8009e68:	08024d90 	.word	0x08024d90
 8009e6c:	20001074 	.word	0x20001074
 8009e70:	20002009 	.word	0x20002009
 8009e74:	20001065 	.word	0x20001065
 8009e78:	08024dc0 	.word	0x08024dc0
 8009e7c:	00002710 	.word	0x00002710
 8009e80:	08024dd8 	.word	0x08024dd8

08009e84 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009e84:	b590      	push	{r4, r7, lr}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009e8a:	1dbb      	adds	r3, r7, #6
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009e90:	1dbc      	adds	r4, r7, #6
 8009e92:	1dbb      	adds	r3, r7, #6
 8009e94:	8819      	ldrh	r1, [r3, #0]
 8009e96:	003b      	movs	r3, r7
 8009e98:	2221      	movs	r2, #33	@ 0x21
 8009e9a:	0018      	movs	r0, r3
 8009e9c:	f001 fb56 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ea4:	1d3c      	adds	r4, r7, #4
 8009ea6:	1dbb      	adds	r3, r7, #6
 8009ea8:	881a      	ldrh	r2, [r3, #0]
 8009eaa:	003b      	movs	r3, r7
 8009eac:	0019      	movs	r1, r3
 8009eae:	2069      	movs	r0, #105	@ 0x69
 8009eb0:	f001 fbd0 	bl	800b654 <sensirion_i2c_write_data>
 8009eb4:	0003      	movs	r3, r0
 8009eb6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	2200      	movs	r2, #0
 8009ebc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <sen5x_start_measurement+0x46>
        return error;
 8009ec2:	1d3b      	adds	r3, r7, #4
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec8:	e004      	b.n	8009ed4 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009eca:	4b04      	ldr	r3, [pc, #16]	@ (8009edc <sen5x_start_measurement+0x58>)
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f7ff fdf5 	bl	8009abc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	b003      	add	sp, #12
 8009eda:	bd90      	pop	{r4, r7, pc}
 8009edc:	0000c350 	.word	0x0000c350

08009ee0 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009ee0:	b590      	push	{r4, r7, lr}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009ee6:	1dbb      	adds	r3, r7, #6
 8009ee8:	2200      	movs	r2, #0
 8009eea:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009eec:	1dbc      	adds	r4, r7, #6
 8009eee:	1dbb      	adds	r3, r7, #6
 8009ef0:	8819      	ldrh	r1, [r3, #0]
 8009ef2:	003b      	movs	r3, r7
 8009ef4:	2237      	movs	r2, #55	@ 0x37
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f001 fb28 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 8009efc:	0003      	movs	r3, r0
 8009efe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f00:	1d3c      	adds	r4, r7, #4
 8009f02:	1dbb      	adds	r3, r7, #6
 8009f04:	881a      	ldrh	r2, [r3, #0]
 8009f06:	003b      	movs	r3, r7
 8009f08:	0019      	movs	r1, r3
 8009f0a:	2069      	movs	r0, #105	@ 0x69
 8009f0c:	f001 fba2 	bl	800b654 <sensirion_i2c_write_data>
 8009f10:	0003      	movs	r3, r0
 8009f12:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f14:	1d3b      	adds	r3, r7, #4
 8009f16:	2200      	movs	r2, #0
 8009f18:	5e9b      	ldrsh	r3, [r3, r2]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009f1e:	1d3b      	adds	r3, r7, #4
 8009f20:	2200      	movs	r2, #0
 8009f22:	5e9b      	ldrsh	r3, [r3, r2]
 8009f24:	e004      	b.n	8009f30 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009f26:	4b04      	ldr	r3, [pc, #16]	@ (8009f38 <sen5x_start_measurement_without_pm+0x58>)
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f7ff fdc7 	bl	8009abc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	0018      	movs	r0, r3
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b003      	add	sp, #12
 8009f36:	bd90      	pop	{r4, r7, pc}
 8009f38:	0000c350 	.word	0x0000c350

08009f3c <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009f42:	1dbb      	adds	r3, r7, #6
 8009f44:	2200      	movs	r2, #0
 8009f46:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009f48:	1dbc      	adds	r4, r7, #6
 8009f4a:	2382      	movs	r3, #130	@ 0x82
 8009f4c:	005a      	lsls	r2, r3, #1
 8009f4e:	1dbb      	adds	r3, r7, #6
 8009f50:	8819      	ldrh	r1, [r3, #0]
 8009f52:	003b      	movs	r3, r7
 8009f54:	0018      	movs	r0, r3
 8009f56:	f001 faf9 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f5e:	1d3c      	adds	r4, r7, #4
 8009f60:	1dbb      	adds	r3, r7, #6
 8009f62:	881a      	ldrh	r2, [r3, #0]
 8009f64:	003b      	movs	r3, r7
 8009f66:	0019      	movs	r1, r3
 8009f68:	2069      	movs	r0, #105	@ 0x69
 8009f6a:	f001 fb73 	bl	800b654 <sensirion_i2c_write_data>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f72:	1d3b      	adds	r3, r7, #4
 8009f74:	2200      	movs	r2, #0
 8009f76:	5e9b      	ldrsh	r3, [r3, r2]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <sen5x_stop_measurement+0x48>
        return error;
 8009f7c:	1d3b      	adds	r3, r7, #4
 8009f7e:	2200      	movs	r2, #0
 8009f80:	5e9b      	ldrsh	r3, [r3, r2]
 8009f82:	e004      	b.n	8009f8e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009f84:	4b04      	ldr	r3, [pc, #16]	@ (8009f98 <sen5x_stop_measurement+0x5c>)
 8009f86:	0018      	movs	r0, r3
 8009f88:	f7ff fd98 	bl	8009abc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	0018      	movs	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b003      	add	sp, #12
 8009f94:	bd90      	pop	{r4, r7, pc}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	00030d40 	.word	0x00030d40

08009f9c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009fa4:	250e      	movs	r5, #14
 8009fa6:	197b      	adds	r3, r7, r5
 8009fa8:	2200      	movs	r2, #0
 8009faa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009fac:	197c      	adds	r4, r7, r5
 8009fae:	4a22      	ldr	r2, [pc, #136]	@ (800a038 <sen5x_read_data_ready+0x9c>)
 8009fb0:	197b      	adds	r3, r7, r5
 8009fb2:	8819      	ldrh	r1, [r3, #0]
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	18fb      	adds	r3, r7, r3
 8009fb8:	0018      	movs	r0, r3
 8009fba:	f001 fac7 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 8009fbe:	0003      	movs	r3, r0
 8009fc0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009fc2:	260c      	movs	r6, #12
 8009fc4:	19bc      	adds	r4, r7, r6
 8009fc6:	197b      	adds	r3, r7, r5
 8009fc8:	881a      	ldrh	r2, [r3, #0]
 8009fca:	2308      	movs	r3, #8
 8009fcc:	18fb      	adds	r3, r7, r3
 8009fce:	0019      	movs	r1, r3
 8009fd0:	2069      	movs	r0, #105	@ 0x69
 8009fd2:	f001 fb3f 	bl	800b654 <sensirion_i2c_write_data>
 8009fd6:	0003      	movs	r3, r0
 8009fd8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fda:	19bb      	adds	r3, r7, r6
 8009fdc:	2200      	movs	r2, #0
 8009fde:	5e9b      	ldrsh	r3, [r3, r2]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <sen5x_read_data_ready+0x50>
        return error;
 8009fe4:	19bb      	adds	r3, r7, r6
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fea:	e020      	b.n	800a02e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009fec:	4b13      	ldr	r3, [pc, #76]	@ (800a03c <sen5x_read_data_ready+0xa0>)
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f7ff fd64 	bl	8009abc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009ff4:	250c      	movs	r5, #12
 8009ff6:	197c      	adds	r4, r7, r5
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	18fb      	adds	r3, r7, r3
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	0019      	movs	r1, r3
 800a000:	2069      	movs	r0, #105	@ 0x69
 800a002:	f001 fb3f 	bl	800b684 <sensirion_i2c_read_data_inplace>
 800a006:	0003      	movs	r3, r0
 800a008:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a00a:	197b      	adds	r3, r7, r5
 800a00c:	2200      	movs	r2, #0
 800a00e:	5e9b      	ldrsh	r3, [r3, r2]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <sen5x_read_data_ready+0x80>
        return error;
 800a014:	197b      	adds	r3, r7, r5
 800a016:	2200      	movs	r2, #0
 800a018:	5e9b      	ldrsh	r3, [r3, r2]
 800a01a:	e008      	b.n	800a02e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a01c:	2308      	movs	r3, #8
 800a01e:	18fb      	adds	r3, r7, r3
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	1e5a      	subs	r2, r3, #1
 800a024:	4193      	sbcs	r3, r2
 800a026:	b2da      	uxtb	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	0018      	movs	r0, r3
 800a030:	46bd      	mov	sp, r7
 800a032:	b005      	add	sp, #20
 800a034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a036:	46c0      	nop			@ (mov r8, r8)
 800a038:	00000202 	.word	0x00000202
 800a03c:	00004e20 	.word	0x00004e20

0800a040 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a042:	b08d      	sub	sp, #52	@ 0x34
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a04e:	252e      	movs	r5, #46	@ 0x2e
 800a050:	197b      	adds	r3, r7, r5
 800a052:	2200      	movs	r2, #0
 800a054:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a056:	197c      	adds	r4, r7, r5
 800a058:	23f1      	movs	r3, #241	@ 0xf1
 800a05a:	009a      	lsls	r2, r3, #2
 800a05c:	197b      	adds	r3, r7, r5
 800a05e:	8819      	ldrh	r1, [r3, #0]
 800a060:	2314      	movs	r3, #20
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	0018      	movs	r0, r3
 800a066:	f001 fa71 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a06a:	0003      	movs	r3, r0
 800a06c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a06e:	262c      	movs	r6, #44	@ 0x2c
 800a070:	19bc      	adds	r4, r7, r6
 800a072:	197b      	adds	r3, r7, r5
 800a074:	881a      	ldrh	r2, [r3, #0]
 800a076:	2314      	movs	r3, #20
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	0019      	movs	r1, r3
 800a07c:	2069      	movs	r0, #105	@ 0x69
 800a07e:	f001 fae9 	bl	800b654 <sensirion_i2c_write_data>
 800a082:	0003      	movs	r3, r0
 800a084:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a086:	19bb      	adds	r3, r7, r6
 800a088:	2200      	movs	r2, #0
 800a08a:	5e9b      	ldrsh	r3, [r3, r2]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d003      	beq.n	800a098 <sen5x_read_measured_values+0x58>
        return error;
 800a090:	19bb      	adds	r3, r7, r6
 800a092:	2200      	movs	r2, #0
 800a094:	5e9b      	ldrsh	r3, [r3, r2]
 800a096:	e060      	b.n	800a15a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a098:	4b32      	ldr	r3, [pc, #200]	@ (800a164 <sen5x_read_measured_values+0x124>)
 800a09a:	0018      	movs	r0, r3
 800a09c:	f7ff fd0e 	bl	8009abc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a0a0:	252c      	movs	r5, #44	@ 0x2c
 800a0a2:	197c      	adds	r4, r7, r5
 800a0a4:	2314      	movs	r3, #20
 800a0a6:	18fb      	adds	r3, r7, r3
 800a0a8:	2210      	movs	r2, #16
 800a0aa:	0019      	movs	r1, r3
 800a0ac:	2069      	movs	r0, #105	@ 0x69
 800a0ae:	f001 fae9 	bl	800b684 <sensirion_i2c_read_data_inplace>
 800a0b2:	0003      	movs	r3, r0
 800a0b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a0b6:	197b      	adds	r3, r7, r5
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	5e9b      	ldrsh	r3, [r3, r2]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <sen5x_read_measured_values+0x88>
        return error;
 800a0c0:	197b      	adds	r3, r7, r5
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a0c6:	e048      	b.n	800a15a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a0c8:	2414      	movs	r4, #20
 800a0ca:	193b      	adds	r3, r7, r4
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f000 fa79 	bl	800a5c4 <sensirion_common_bytes_to_uint16_t>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	001a      	movs	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a0da:	193b      	adds	r3, r7, r4
 800a0dc:	3302      	adds	r3, #2
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f000 fa70 	bl	800a5c4 <sensirion_common_bytes_to_uint16_t>
 800a0e4:	0003      	movs	r3, r0
 800a0e6:	001a      	movs	r2, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a0ec:	193b      	adds	r3, r7, r4
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f000 fa67 	bl	800a5c4 <sensirion_common_bytes_to_uint16_t>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	001a      	movs	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a0fe:	193b      	adds	r3, r7, r4
 800a100:	3306      	adds	r3, #6
 800a102:	0018      	movs	r0, r3
 800a104:	f000 fa5e 	bl	800a5c4 <sensirion_common_bytes_to_uint16_t>
 800a108:	0003      	movs	r3, r0
 800a10a:	001a      	movs	r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a110:	193b      	adds	r3, r7, r4
 800a112:	3308      	adds	r3, #8
 800a114:	0018      	movs	r0, r3
 800a116:	f000 fa81 	bl	800a61c <sensirion_common_bytes_to_int16_t>
 800a11a:	0003      	movs	r3, r0
 800a11c:	001a      	movs	r2, r3
 800a11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a120:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a122:	193b      	adds	r3, r7, r4
 800a124:	330a      	adds	r3, #10
 800a126:	0018      	movs	r0, r3
 800a128:	f000 fa78 	bl	800a61c <sensirion_common_bytes_to_int16_t>
 800a12c:	0003      	movs	r3, r0
 800a12e:	001a      	movs	r2, r3
 800a130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a132:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a134:	193b      	adds	r3, r7, r4
 800a136:	330c      	adds	r3, #12
 800a138:	0018      	movs	r0, r3
 800a13a:	f000 fa6f 	bl	800a61c <sensirion_common_bytes_to_int16_t>
 800a13e:	0003      	movs	r3, r0
 800a140:	001a      	movs	r2, r3
 800a142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a144:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a146:	193b      	adds	r3, r7, r4
 800a148:	330e      	adds	r3, #14
 800a14a:	0018      	movs	r0, r3
 800a14c:	f000 fa66 	bl	800a61c <sensirion_common_bytes_to_int16_t>
 800a150:	0003      	movs	r3, r0
 800a152:	001a      	movs	r2, r3
 800a154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a156:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b00d      	add	sp, #52	@ 0x34
 800a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	00004e20 	.word	0x00004e20

0800a168 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a16e:	1dbb      	adds	r3, r7, #6
 800a170:	2200      	movs	r2, #0
 800a172:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a174:	1dbc      	adds	r4, r7, #6
 800a176:	4a12      	ldr	r2, [pc, #72]	@ (800a1c0 <sen5x_start_fan_cleaning+0x58>)
 800a178:	1dbb      	adds	r3, r7, #6
 800a17a:	8819      	ldrh	r1, [r3, #0]
 800a17c:	003b      	movs	r3, r7
 800a17e:	0018      	movs	r0, r3
 800a180:	f001 f9e4 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a184:	0003      	movs	r3, r0
 800a186:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a188:	1d3c      	adds	r4, r7, #4
 800a18a:	1dbb      	adds	r3, r7, #6
 800a18c:	881a      	ldrh	r2, [r3, #0]
 800a18e:	003b      	movs	r3, r7
 800a190:	0019      	movs	r1, r3
 800a192:	2069      	movs	r0, #105	@ 0x69
 800a194:	f001 fa5e 	bl	800b654 <sensirion_i2c_write_data>
 800a198:	0003      	movs	r3, r0
 800a19a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a19c:	1d3b      	adds	r3, r7, #4
 800a19e:	2200      	movs	r2, #0
 800a1a0:	5e9b      	ldrsh	r3, [r3, r2]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <sen5x_start_fan_cleaning+0x46>
        return error;
 800a1a6:	1d3b      	adds	r3, r7, #4
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a1ac:	e004      	b.n	800a1b8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a1ae:	4b05      	ldr	r3, [pc, #20]	@ (800a1c4 <sen5x_start_fan_cleaning+0x5c>)
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f7ff fc83 	bl	8009abc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	b003      	add	sp, #12
 800a1be:	bd90      	pop	{r4, r7, pc}
 800a1c0:	00005607 	.word	0x00005607
 800a1c4:	00004e20 	.word	0x00004e20

0800a1c8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	0004      	movs	r4, r0
 800a1d0:	0008      	movs	r0, r1
 800a1d2:	0011      	movs	r1, r2
 800a1d4:	1dbb      	adds	r3, r7, #6
 800a1d6:	1c22      	adds	r2, r4, #0
 800a1d8:	801a      	strh	r2, [r3, #0]
 800a1da:	1d3b      	adds	r3, r7, #4
 800a1dc:	1c02      	adds	r2, r0, #0
 800a1de:	801a      	strh	r2, [r3, #0]
 800a1e0:	1cbb      	adds	r3, r7, #2
 800a1e2:	1c0a      	adds	r2, r1, #0
 800a1e4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a1e6:	2516      	movs	r5, #22
 800a1e8:	197b      	adds	r3, r7, r5
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a1ee:	197c      	adds	r4, r7, r5
 800a1f0:	4a25      	ldr	r2, [pc, #148]	@ (800a288 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a1f2:	197b      	adds	r3, r7, r5
 800a1f4:	8819      	ldrh	r1, [r3, #0]
 800a1f6:	2608      	movs	r6, #8
 800a1f8:	19bb      	adds	r3, r7, r6
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f001 f9a6 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a200:	0003      	movs	r3, r0
 800a202:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a204:	197c      	adds	r4, r7, r5
 800a206:	1dbb      	adds	r3, r7, #6
 800a208:	2200      	movs	r2, #0
 800a20a:	5e9a      	ldrsh	r2, [r3, r2]
 800a20c:	197b      	adds	r3, r7, r5
 800a20e:	8819      	ldrh	r1, [r3, #0]
 800a210:	19bb      	adds	r3, r7, r6
 800a212:	0018      	movs	r0, r3
 800a214:	f001 fa05 	bl	800b622 <sensirion_i2c_add_int16_t_to_buffer>
 800a218:	0003      	movs	r3, r0
 800a21a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a21c:	197c      	adds	r4, r7, r5
 800a21e:	1d3b      	adds	r3, r7, #4
 800a220:	2200      	movs	r2, #0
 800a222:	5e9a      	ldrsh	r2, [r3, r2]
 800a224:	197b      	adds	r3, r7, r5
 800a226:	8819      	ldrh	r1, [r3, #0]
 800a228:	19bb      	adds	r3, r7, r6
 800a22a:	0018      	movs	r0, r3
 800a22c:	f001 f9f9 	bl	800b622 <sensirion_i2c_add_int16_t_to_buffer>
 800a230:	0003      	movs	r3, r0
 800a232:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a234:	197c      	adds	r4, r7, r5
 800a236:	1cbb      	adds	r3, r7, #2
 800a238:	881a      	ldrh	r2, [r3, #0]
 800a23a:	197b      	adds	r3, r7, r5
 800a23c:	8819      	ldrh	r1, [r3, #0]
 800a23e:	19bb      	adds	r3, r7, r6
 800a240:	0018      	movs	r0, r3
 800a242:	f001 f9af 	bl	800b5a4 <sensirion_i2c_add_uint16_t_to_buffer>
 800a246:	0003      	movs	r3, r0
 800a248:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a24a:	2214      	movs	r2, #20
 800a24c:	18bc      	adds	r4, r7, r2
 800a24e:	197b      	adds	r3, r7, r5
 800a250:	881a      	ldrh	r2, [r3, #0]
 800a252:	19bb      	adds	r3, r7, r6
 800a254:	0019      	movs	r1, r3
 800a256:	2069      	movs	r0, #105	@ 0x69
 800a258:	f001 f9fc 	bl	800b654 <sensirion_i2c_write_data>
 800a25c:	0003      	movs	r3, r0
 800a25e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a260:	2214      	movs	r2, #20
 800a262:	18bb      	adds	r3, r7, r2
 800a264:	2100      	movs	r1, #0
 800a266:	5e5b      	ldrsh	r3, [r3, r1]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a26c:	18bb      	adds	r3, r7, r2
 800a26e:	2200      	movs	r2, #0
 800a270:	5e9b      	ldrsh	r3, [r3, r2]
 800a272:	e004      	b.n	800a27e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a274:	4b05      	ldr	r3, [pc, #20]	@ (800a28c <sen5x_set_temperature_offset_parameters+0xc4>)
 800a276:	0018      	movs	r0, r3
 800a278:	f7ff fc20 	bl	8009abc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	0018      	movs	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	b007      	add	sp, #28
 800a284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a286:	46c0      	nop			@ (mov r8, r8)
 800a288:	000060b2 	.word	0x000060b2
 800a28c:	00004e20 	.word	0x00004e20

0800a290 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	b091      	sub	sp, #68	@ 0x44
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	000a      	movs	r2, r1
 800a29a:	1cfb      	adds	r3, r7, #3
 800a29c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a29e:	253e      	movs	r5, #62	@ 0x3e
 800a2a0:	197b      	adds	r3, r7, r5
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a2a6:	197c      	adds	r4, r7, r5
 800a2a8:	4a22      	ldr	r2, [pc, #136]	@ (800a334 <sen5x_get_product_name+0xa4>)
 800a2aa:	197b      	adds	r3, r7, r5
 800a2ac:	8819      	ldrh	r1, [r3, #0]
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	18fb      	adds	r3, r7, r3
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f001 f94a 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a2b8:	0003      	movs	r3, r0
 800a2ba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2bc:	263c      	movs	r6, #60	@ 0x3c
 800a2be:	19bc      	adds	r4, r7, r6
 800a2c0:	197b      	adds	r3, r7, r5
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	0019      	movs	r1, r3
 800a2ca:	2069      	movs	r0, #105	@ 0x69
 800a2cc:	f001 f9c2 	bl	800b654 <sensirion_i2c_write_data>
 800a2d0:	0003      	movs	r3, r0
 800a2d2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2d4:	19bb      	adds	r3, r7, r6
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	5e9b      	ldrsh	r3, [r3, r2]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <sen5x_get_product_name+0x56>
        return error;
 800a2de:	19bb      	adds	r3, r7, r6
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	5e9b      	ldrsh	r3, [r3, r2]
 800a2e4:	e021      	b.n	800a32a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a2e6:	4b14      	ldr	r3, [pc, #80]	@ (800a338 <sen5x_get_product_name+0xa8>)
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f7ff fbe7 	bl	8009abc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a2ee:	253c      	movs	r5, #60	@ 0x3c
 800a2f0:	197c      	adds	r4, r7, r5
 800a2f2:	230c      	movs	r3, #12
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	0019      	movs	r1, r3
 800a2fa:	2069      	movs	r0, #105	@ 0x69
 800a2fc:	f001 f9c2 	bl	800b684 <sensirion_i2c_read_data_inplace>
 800a300:	0003      	movs	r3, r0
 800a302:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a304:	197b      	adds	r3, r7, r5
 800a306:	2200      	movs	r2, #0
 800a308:	5e9b      	ldrsh	r3, [r3, r2]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <sen5x_get_product_name+0x86>
        return error;
 800a30e:	197b      	adds	r3, r7, r5
 800a310:	2200      	movs	r2, #0
 800a312:	5e9b      	ldrsh	r3, [r3, r2]
 800a314:	e009      	b.n	800a32a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a316:	1cfb      	adds	r3, r7, #3
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	230c      	movs	r3, #12
 800a320:	18fb      	adds	r3, r7, r3
 800a322:	0018      	movs	r0, r3
 800a324:	f000 f988 	bl	800a638 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	0018      	movs	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	b011      	add	sp, #68	@ 0x44
 800a330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a332:	46c0      	nop			@ (mov r8, r8)
 800a334:	0000d014 	.word	0x0000d014
 800a338:	0000c350 	.word	0x0000c350

0800a33c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a33e:	b091      	sub	sp, #68	@ 0x44
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	000a      	movs	r2, r1
 800a346:	1cfb      	adds	r3, r7, #3
 800a348:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a34a:	253e      	movs	r5, #62	@ 0x3e
 800a34c:	197b      	adds	r3, r7, r5
 800a34e:	2200      	movs	r2, #0
 800a350:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a352:	197c      	adds	r4, r7, r5
 800a354:	4a22      	ldr	r2, [pc, #136]	@ (800a3e0 <sen5x_get_serial_number+0xa4>)
 800a356:	197b      	adds	r3, r7, r5
 800a358:	8819      	ldrh	r1, [r3, #0]
 800a35a:	230c      	movs	r3, #12
 800a35c:	18fb      	adds	r3, r7, r3
 800a35e:	0018      	movs	r0, r3
 800a360:	f001 f8f4 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a364:	0003      	movs	r3, r0
 800a366:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a368:	263c      	movs	r6, #60	@ 0x3c
 800a36a:	19bc      	adds	r4, r7, r6
 800a36c:	197b      	adds	r3, r7, r5
 800a36e:	881a      	ldrh	r2, [r3, #0]
 800a370:	230c      	movs	r3, #12
 800a372:	18fb      	adds	r3, r7, r3
 800a374:	0019      	movs	r1, r3
 800a376:	2069      	movs	r0, #105	@ 0x69
 800a378:	f001 f96c 	bl	800b654 <sensirion_i2c_write_data>
 800a37c:	0003      	movs	r3, r0
 800a37e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a380:	19bb      	adds	r3, r7, r6
 800a382:	2200      	movs	r2, #0
 800a384:	5e9b      	ldrsh	r3, [r3, r2]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <sen5x_get_serial_number+0x56>
        return error;
 800a38a:	19bb      	adds	r3, r7, r6
 800a38c:	2200      	movs	r2, #0
 800a38e:	5e9b      	ldrsh	r3, [r3, r2]
 800a390:	e021      	b.n	800a3d6 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a392:	4b14      	ldr	r3, [pc, #80]	@ (800a3e4 <sen5x_get_serial_number+0xa8>)
 800a394:	0018      	movs	r0, r3
 800a396:	f7ff fb91 	bl	8009abc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a39a:	253c      	movs	r5, #60	@ 0x3c
 800a39c:	197c      	adds	r4, r7, r5
 800a39e:	230c      	movs	r3, #12
 800a3a0:	18fb      	adds	r3, r7, r3
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	0019      	movs	r1, r3
 800a3a6:	2069      	movs	r0, #105	@ 0x69
 800a3a8:	f001 f96c 	bl	800b684 <sensirion_i2c_read_data_inplace>
 800a3ac:	0003      	movs	r3, r0
 800a3ae:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3b0:	197b      	adds	r3, r7, r5
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	5e9b      	ldrsh	r3, [r3, r2]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <sen5x_get_serial_number+0x86>
        return error;
 800a3ba:	197b      	adds	r3, r7, r5
 800a3bc:	2200      	movs	r2, #0
 800a3be:	5e9b      	ldrsh	r3, [r3, r2]
 800a3c0:	e009      	b.n	800a3d6 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a3c2:	1cfb      	adds	r3, r7, #3
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	18fb      	adds	r3, r7, r3
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f000 f932 	bl	800a638 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	b011      	add	sp, #68	@ 0x44
 800a3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3de:	46c0      	nop			@ (mov r8, r8)
 800a3e0:	0000d033 	.word	0x0000d033
 800a3e4:	0000c350 	.word	0x0000c350

0800a3e8 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	b089      	sub	sp, #36	@ 0x24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a3f6:	251e      	movs	r5, #30
 800a3f8:	197b      	adds	r3, r7, r5
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a3fe:	197c      	adds	r4, r7, r5
 800a400:	23d1      	movs	r3, #209	@ 0xd1
 800a402:	021a      	lsls	r2, r3, #8
 800a404:	197b      	adds	r3, r7, r5
 800a406:	8819      	ldrh	r1, [r3, #0]
 800a408:	2310      	movs	r3, #16
 800a40a:	18fb      	adds	r3, r7, r3
 800a40c:	0018      	movs	r0, r3
 800a40e:	f001 f89d 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a412:	0003      	movs	r3, r0
 800a414:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a416:	261c      	movs	r6, #28
 800a418:	19bc      	adds	r4, r7, r6
 800a41a:	197b      	adds	r3, r7, r5
 800a41c:	881a      	ldrh	r2, [r3, #0]
 800a41e:	2310      	movs	r3, #16
 800a420:	18fb      	adds	r3, r7, r3
 800a422:	0019      	movs	r1, r3
 800a424:	2069      	movs	r0, #105	@ 0x69
 800a426:	f001 f915 	bl	800b654 <sensirion_i2c_write_data>
 800a42a:	0003      	movs	r3, r0
 800a42c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a42e:	19bb      	adds	r3, r7, r6
 800a430:	2200      	movs	r2, #0
 800a432:	5e9b      	ldrsh	r3, [r3, r2]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d003      	beq.n	800a440 <sen5x_get_version+0x58>
        return error;
 800a438:	19bb      	adds	r3, r7, r6
 800a43a:	2200      	movs	r2, #0
 800a43c:	5e9b      	ldrsh	r3, [r3, r2]
 800a43e:	e038      	b.n	800a4b2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a440:	4b1e      	ldr	r3, [pc, #120]	@ (800a4bc <sen5x_get_version+0xd4>)
 800a442:	0018      	movs	r0, r3
 800a444:	f7ff fb3a 	bl	8009abc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a448:	251c      	movs	r5, #28
 800a44a:	197c      	adds	r4, r7, r5
 800a44c:	2310      	movs	r3, #16
 800a44e:	18fb      	adds	r3, r7, r3
 800a450:	2208      	movs	r2, #8
 800a452:	0019      	movs	r1, r3
 800a454:	2069      	movs	r0, #105	@ 0x69
 800a456:	f001 f915 	bl	800b684 <sensirion_i2c_read_data_inplace>
 800a45a:	0003      	movs	r3, r0
 800a45c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a45e:	197b      	adds	r3, r7, r5
 800a460:	2200      	movs	r2, #0
 800a462:	5e9b      	ldrsh	r3, [r3, r2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <sen5x_get_version+0x88>
        return error;
 800a468:	197b      	adds	r3, r7, r5
 800a46a:	2200      	movs	r2, #0
 800a46c:	5e9b      	ldrsh	r3, [r3, r2]
 800a46e:	e020      	b.n	800a4b2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a470:	2110      	movs	r1, #16
 800a472:	187b      	adds	r3, r7, r1
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a47a:	187b      	adds	r3, r7, r1
 800a47c:	785a      	ldrb	r2, [r3, #1]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a482:	187b      	adds	r3, r7, r1
 800a484:	789b      	ldrb	r3, [r3, #2]
 800a486:	1e5a      	subs	r2, r3, #1
 800a488:	4193      	sbcs	r3, r2
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a490:	187b      	adds	r3, r7, r1
 800a492:	78da      	ldrb	r2, [r3, #3]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a498:	187b      	adds	r3, r7, r1
 800a49a:	791a      	ldrb	r2, [r3, #4]
 800a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a4a0:	187b      	adds	r3, r7, r1
 800a4a2:	795a      	ldrb	r2, [r3, #5]
 800a4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a6:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a4a8:	187b      	adds	r3, r7, r1
 800a4aa:	799a      	ldrb	r2, [r3, #6]
 800a4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4ae:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	b009      	add	sp, #36	@ 0x24
 800a4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ba:	46c0      	nop			@ (mov r8, r8)
 800a4bc:	00004e20 	.word	0x00004e20

0800a4c0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a4c8:	2516      	movs	r5, #22
 800a4ca:	197b      	adds	r3, r7, r5
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a4d0:	197c      	adds	r4, r7, r5
 800a4d2:	4a22      	ldr	r2, [pc, #136]	@ (800a55c <sen5x_read_device_status+0x9c>)
 800a4d4:	197b      	adds	r3, r7, r5
 800a4d6:	8819      	ldrh	r1, [r3, #0]
 800a4d8:	230c      	movs	r3, #12
 800a4da:	18fb      	adds	r3, r7, r3
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f001 f835 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a4e2:	0003      	movs	r3, r0
 800a4e4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a4e6:	2614      	movs	r6, #20
 800a4e8:	19bc      	adds	r4, r7, r6
 800a4ea:	197b      	adds	r3, r7, r5
 800a4ec:	881a      	ldrh	r2, [r3, #0]
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	18fb      	adds	r3, r7, r3
 800a4f2:	0019      	movs	r1, r3
 800a4f4:	2069      	movs	r0, #105	@ 0x69
 800a4f6:	f001 f8ad 	bl	800b654 <sensirion_i2c_write_data>
 800a4fa:	0003      	movs	r3, r0
 800a4fc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a4fe:	19bb      	adds	r3, r7, r6
 800a500:	2200      	movs	r2, #0
 800a502:	5e9b      	ldrsh	r3, [r3, r2]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <sen5x_read_device_status+0x50>
        return error;
 800a508:	19bb      	adds	r3, r7, r6
 800a50a:	2200      	movs	r2, #0
 800a50c:	5e9b      	ldrsh	r3, [r3, r2]
 800a50e:	e020      	b.n	800a552 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a510:	4b13      	ldr	r3, [pc, #76]	@ (800a560 <sen5x_read_device_status+0xa0>)
 800a512:	0018      	movs	r0, r3
 800a514:	f7ff fad2 	bl	8009abc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a518:	2514      	movs	r5, #20
 800a51a:	197c      	adds	r4, r7, r5
 800a51c:	230c      	movs	r3, #12
 800a51e:	18fb      	adds	r3, r7, r3
 800a520:	2204      	movs	r2, #4
 800a522:	0019      	movs	r1, r3
 800a524:	2069      	movs	r0, #105	@ 0x69
 800a526:	f001 f8ad 	bl	800b684 <sensirion_i2c_read_data_inplace>
 800a52a:	0003      	movs	r3, r0
 800a52c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a52e:	197b      	adds	r3, r7, r5
 800a530:	2200      	movs	r2, #0
 800a532:	5e9b      	ldrsh	r3, [r3, r2]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <sen5x_read_device_status+0x80>
        return error;
 800a538:	197b      	adds	r3, r7, r5
 800a53a:	2200      	movs	r2, #0
 800a53c:	5e9b      	ldrsh	r3, [r3, r2]
 800a53e:	e008      	b.n	800a552 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a540:	230c      	movs	r3, #12
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	0018      	movs	r0, r3
 800a546:	f000 f850 	bl	800a5ea <sensirion_common_bytes_to_uint32_t>
 800a54a:	0002      	movs	r2, r0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a550:	2300      	movs	r3, #0
}
 800a552:	0018      	movs	r0, r3
 800a554:	46bd      	mov	sp, r7
 800a556:	b007      	add	sp, #28
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	46c0      	nop			@ (mov r8, r8)
 800a55c:	0000d206 	.word	0x0000d206
 800a560:	00004e20 	.word	0x00004e20

0800a564 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a56a:	1dbb      	adds	r3, r7, #6
 800a56c:	2200      	movs	r2, #0
 800a56e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a570:	1dbc      	adds	r4, r7, #6
 800a572:	4a12      	ldr	r2, [pc, #72]	@ (800a5bc <sen5x_device_reset+0x58>)
 800a574:	1dbb      	adds	r3, r7, #6
 800a576:	8819      	ldrh	r1, [r3, #0]
 800a578:	003b      	movs	r3, r7
 800a57a:	0018      	movs	r0, r3
 800a57c:	f000 ffe6 	bl	800b54c <sensirion_i2c_add_command_to_buffer>
 800a580:	0003      	movs	r3, r0
 800a582:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a584:	1d3c      	adds	r4, r7, #4
 800a586:	1dbb      	adds	r3, r7, #6
 800a588:	881a      	ldrh	r2, [r3, #0]
 800a58a:	003b      	movs	r3, r7
 800a58c:	0019      	movs	r1, r3
 800a58e:	2069      	movs	r0, #105	@ 0x69
 800a590:	f001 f860 	bl	800b654 <sensirion_i2c_write_data>
 800a594:	0003      	movs	r3, r0
 800a596:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a598:	1d3b      	adds	r3, r7, #4
 800a59a:	2200      	movs	r2, #0
 800a59c:	5e9b      	ldrsh	r3, [r3, r2]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <sen5x_device_reset+0x46>
        return error;
 800a5a2:	1d3b      	adds	r3, r7, #4
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	5e9b      	ldrsh	r3, [r3, r2]
 800a5a8:	e004      	b.n	800a5b4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a5aa:	4b05      	ldr	r3, [pc, #20]	@ (800a5c0 <sen5x_device_reset+0x5c>)
 800a5ac:	0018      	movs	r0, r3
 800a5ae:	f7ff fa85 	bl	8009abc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	b003      	add	sp, #12
 800a5ba:	bd90      	pop	{r4, r7, pc}
 800a5bc:	0000d304 	.word	0x0000d304
 800a5c0:	00030d40 	.word	0x00030d40

0800a5c4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	b21a      	sxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b21b      	sxth	r3, r3
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	b21b      	sxth	r3, r3
 800a5e0:	b29b      	uxth	r3, r3
}
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	b002      	add	sp, #8
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	061a      	lsls	r2, r3, #24
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	041b      	lsls	r3, r3, #16
 800a600:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3302      	adds	r3, #2
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a60a:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	3203      	adds	r2, #3
 800a610:	7812      	ldrb	r2, [r2, #0]
 800a612:	4313      	orrs	r3, r2
}
 800a614:	0018      	movs	r0, r3
 800a616:	46bd      	mov	sp, r7
 800a618:	b002      	add	sp, #8
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	0018      	movs	r0, r3
 800a628:	f7ff ffcc 	bl	800a5c4 <sensirion_common_bytes_to_uint16_t>
 800a62c:	0003      	movs	r3, r0
 800a62e:	b21b      	sxth	r3, r3
}
 800a630:	0018      	movs	r0, r3
 800a632:	46bd      	mov	sp, r7
 800a634:	b002      	add	sp, #8
 800a636:	bd80      	pop	{r7, pc}

0800a638 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	1dbb      	adds	r3, r7, #6
 800a644:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a646:	2316      	movs	r3, #22
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	2200      	movs	r2, #0
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	e00f      	b.n	800a670 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a650:	2016      	movs	r0, #22
 800a652:	183b      	adds	r3, r7, r0
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	18d2      	adds	r2, r2, r3
 800a65a:	183b      	adds	r3, r7, r0
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	18cb      	adds	r3, r1, r3
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a666:	183b      	adds	r3, r7, r0
 800a668:	881a      	ldrh	r2, [r3, #0]
 800a66a:	183b      	adds	r3, r7, r0
 800a66c:	3201      	adds	r2, #1
 800a66e:	801a      	strh	r2, [r3, #0]
 800a670:	2316      	movs	r3, #22
 800a672:	18fa      	adds	r2, r7, r3
 800a674:	1dbb      	adds	r3, r7, #6
 800a676:	8812      	ldrh	r2, [r2, #0]
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d3e8      	bcc.n	800a650 <sensirion_common_copy_bytes+0x18>
    }
}
 800a67e:	46c0      	nop			@ (mov r8, r8)
 800a680:	46c0      	nop			@ (mov r8, r8)
 800a682:	46bd      	mov	sp, r7
 800a684:	b006      	add	sp, #24
 800a686:	bd80      	pop	{r7, pc}

0800a688 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d113      	bne.n	800a6ce <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	22fe      	movs	r2, #254	@ 0xfe
 800a6aa:	0592      	lsls	r2, r2, #22
 800a6ac:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a71c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a6b2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a720 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a6b8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4a19      	ldr	r2, [pc, #100]	@ (800a724 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a6be:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4a19      	ldr	r2, [pc, #100]	@ (800a728 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a6c4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4a18      	ldr	r2, [pc, #96]	@ (800a72c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a6ca:	61da      	str	r2, [r3, #28]
 800a6cc:	e011      	b.n	800a6f2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4a17      	ldr	r2, [pc, #92]	@ (800a730 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a6d2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4a17      	ldr	r2, [pc, #92]	@ (800a734 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a6d8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4a16      	ldr	r2, [pc, #88]	@ (800a738 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a6de:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4a16      	ldr	r2, [pc, #88]	@ (800a73c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a6e4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	@ (800a740 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a6ea:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4a15      	ldr	r2, [pc, #84]	@ (800a744 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a6f0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4a14      	ldr	r2, [pc, #80]	@ (800a748 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a6f6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a14      	ldr	r2, [pc, #80]	@ (800a74c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a6fc:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4a12      	ldr	r2, [pc, #72]	@ (800a74c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a702:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4a12      	ldr	r2, [pc, #72]	@ (800a750 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a708:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	0018      	movs	r0, r3
 800a70e:	f000 f833 	bl	800a778 <GasIndexAlgorithm_reset>
}
 800a712:	46c0      	nop			@ (mov r8, r8)
 800a714:	46bd      	mov	sp, r7
 800a716:	b004      	add	sp, #16
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	46c0      	nop			@ (mov r8, r8)
 800a71c:	00002710 	.word	0x00002710
 800a720:	44340000 	.word	0x44340000
 800a724:	46859800 	.word	0x46859800
 800a728:	46a05000 	.word	0x46a05000
 800a72c:	41f00000 	.word	0x41f00000
 800a730:	42c80000 	.word	0x42c80000
 800a734:	00004e20 	.word	0x00004e20
 800a738:	43340000 	.word	0x43340000
 800a73c:	4528c000 	.word	0x4528c000
 800a740:	45a32000 	.word	0x45a32000
 800a744:	43aa0000 	.word	0x43aa0000
 800a748:	43660000 	.word	0x43660000
 800a74c:	41400000 	.word	0x41400000
 800a750:	42480000 	.word	0x42480000

0800a754 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a75e:	4a05      	ldr	r2, [pc, #20]	@ (800a774 <GasIndexAlgorithm_init+0x20>)
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	0018      	movs	r0, r3
 800a766:	f7ff ff8f 	bl	800a688 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a76a:	46c0      	nop			@ (mov r8, r8)
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b002      	add	sp, #8
 800a770:	bd80      	pop	{r7, pc}
 800a772:	46c0      	nop			@ (mov r8, r8)
 800a774:	44610000 	.word	0x44610000

0800a778 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	0018      	movs	r0, r3
 800a796:	f000 f805 	bl	800a7a4 <GasIndexAlgorithm__init_instances>
}
 800a79a:	46c0      	nop			@ (mov r8, r8)
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b002      	add	sp, #8
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	f000 f8e8 	bl	800a984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f000 f9a6 	bl	800ab08 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a7bc:	1c04      	adds	r4, r0, #0
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f000 f9ab 	bl	800ab1c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a7c6:	1c02      	adds	r2, r0, #0
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	1c21      	adds	r1, r4, #0
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	f000 fc3b 	bl	800b048 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d107      	bne.n	800a7ea <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a7da:	23fe      	movs	r3, #254	@ 0xfe
 800a7dc:	059b      	lsls	r3, r3, #22
 800a7de:	4a0a      	ldr	r2, [pc, #40]	@ (800a808 <GasIndexAlgorithm__init_instances+0x64>)
 800a7e0:	490a      	ldr	r1, [pc, #40]	@ (800a80c <GasIndexAlgorithm__init_instances+0x68>)
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fc86 	bl	800b0f4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a7e8:	e005      	b.n	800a7f6 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a7ea:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <GasIndexAlgorithm__init_instances+0x6c>)
 800a7ec:	4a09      	ldr	r2, [pc, #36]	@ (800a814 <GasIndexAlgorithm__init_instances+0x70>)
 800a7ee:	490a      	ldr	r1, [pc, #40]	@ (800a818 <GasIndexAlgorithm__init_instances+0x74>)
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fc7f 	bl	800b0f4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f000 fd35 	bl	800b268 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a7fe:	46c0      	nop			@ (mov r8, r8)
 800a800:	46bd      	mov	sp, r7
 800a802:	b003      	add	sp, #12
 800a804:	bd90      	pop	{r4, r7, pc}
 800a806:	46c0      	nop			@ (mov r8, r8)
 800a808:	bc257a78 	.word	0xbc257a78
 800a80c:	44198000 	.word	0x44198000
 800a810:	42c80000 	.word	0x42c80000
 800a814:	bbd4fdf4 	.word	0xbbd4fdf4
 800a818:	43550000 	.word	0x43550000

0800a81c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a81c:	b590      	push	{r4, r7, lr}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82c:	4952      	ldr	r1, [pc, #328]	@ (800a978 <GasIndexAlgorithm_process+0x15c>)
 800a82e:	1c18      	adds	r0, r3, #0
 800a830:	f7f5 fe88 	bl	8000544 <__aeabi_fcmple>
 800a834:	1e03      	subs	r3, r0, #0
 800a836:	d00c      	beq.n	800a852 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	1c19      	adds	r1, r3, #0
 800a842:	1c10      	adds	r0, r2, #0
 800a844:	f7f6 f83c 	bl	80008c0 <__aeabi_fadd>
 800a848:	1c03      	adds	r3, r0, #0
 800a84a:	1c1a      	adds	r2, r3, #0
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a850:	e080      	b.n	800a954 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd25      	ble.n	800a8a4 <GasIndexAlgorithm_process+0x88>
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4a48      	ldr	r2, [pc, #288]	@ (800a97c <GasIndexAlgorithm_process+0x160>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	dc21      	bgt.n	800a8a4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	dc04      	bgt.n	800a874 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	3301      	adds	r3, #1
 800a870:	60bb      	str	r3, [r7, #8]
 800a872:	e00d      	b.n	800a890 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	4a41      	ldr	r2, [pc, #260]	@ (800a980 <GasIndexAlgorithm_process+0x164>)
 800a87a:	4694      	mov	ip, r2
 800a87c:	4463      	add	r3, ip
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	429a      	cmp	r2, r3
 800a882:	dd05      	ble.n	800a890 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	4a3d      	ldr	r2, [pc, #244]	@ (800a980 <GasIndexAlgorithm_process+0x164>)
 800a88a:	4694      	mov	ip, r2
 800a88c:	4463      	add	r3, ip
 800a88e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	0018      	movs	r0, r3
 800a89a:	f7f6 fe99 	bl	80015d0 <__aeabi_i2f>
 800a89e:	1c02      	adds	r2, r0, #0
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f000 f945 	bl	800ab3e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a8b4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a8b6:	d014      	beq.n	800a8e2 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	1c11      	adds	r1, r2, #0
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f000 fbd1 	bl	800b068 <GasIndexAlgorithm__mox_model__process>
 800a8c6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	1c11      	adds	r1, r2, #0
 800a8d4:	0018      	movs	r0, r3
 800a8d6:	f000 fc25 	bl	800b124 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a8da:	1c02      	adds	r2, r0, #0
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	639a      	str	r2, [r3, #56]	@ 0x38
 800a8e0:	e003      	b.n	800a8ea <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689a      	ldr	r2, [r3, #8]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	1c11      	adds	r1, r2, #0
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f000 fcec 	bl	800b2d0 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a8f8:	1c02      	adds	r2, r0, #0
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a902:	21fc      	movs	r1, #252	@ 0xfc
 800a904:	0589      	lsls	r1, r1, #22
 800a906:	1c18      	adds	r0, r3, #0
 800a908:	f7f5 fe12 	bl	8000530 <__aeabi_fcmplt>
 800a90c:	1e03      	subs	r3, r0, #0
 800a90e:	d003      	beq.n	800a918 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	22fc      	movs	r2, #252	@ 0xfc
 800a914:	0592      	lsls	r2, r2, #22
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a91c:	2100      	movs	r1, #0
 800a91e:	1c18      	adds	r0, r3, #0
 800a920:	f7f5 fe1a 	bl	8000558 <__aeabi_fcmpgt>
 800a924:	1e03      	subs	r3, r0, #0
 800a926:	d015      	beq.n	800a954 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	1c11      	adds	r1, r2, #0
 800a930:	0018      	movs	r0, r3
 800a932:	f000 fa4f 	bl	800add4 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	0018      	movs	r0, r3
 800a93a:	f000 f8e5 	bl	800ab08 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a93e:	1c04      	adds	r4, r0, #0
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	0018      	movs	r0, r3
 800a944:	f000 f8ea 	bl	800ab1c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a948:	1c02      	adds	r2, r0, #0
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	1c21      	adds	r1, r4, #0
 800a94e:	0018      	movs	r0, r3
 800a950:	f000 fb7a 	bl	800b048 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a958:	21fc      	movs	r1, #252	@ 0xfc
 800a95a:	0589      	lsls	r1, r1, #22
 800a95c:	1c18      	adds	r0, r3, #0
 800a95e:	f7f5 ffaf 	bl	80008c0 <__aeabi_fadd>
 800a962:	1c03      	adds	r3, r0, #0
 800a964:	1c18      	adds	r0, r3, #0
 800a966:	f7f6 fe13 	bl	8001590 <__aeabi_f2iz>
 800a96a:	0002      	movs	r2, r0
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	601a      	str	r2, [r3, #0]
    return;
 800a970:	46c0      	nop			@ (mov r8, r8)
}
 800a972:	46bd      	mov	sp, r7
 800a974:	b005      	add	sp, #20
 800a976:	bd90      	pop	{r4, r7, pc}
 800a978:	42340000 	.word	0x42340000
 800a97c:	0000fde7 	.word	0x0000fde7
 800a980:	00007fff 	.word	0x00007fff

0800a984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a984:	b5b0      	push	{r4, r5, r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	223c      	movs	r2, #60	@ 0x3c
 800a990:	2100      	movs	r1, #0
 800a992:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	4952      	ldr	r1, [pc, #328]	@ (800aaf8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9ae:	1c18      	adds	r0, r3, #0
 800a9b0:	f7f6 f910 	bl	8000bd4 <__aeabi_fdiv>
 800a9b4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a9b6:	2188      	movs	r1, #136	@ 0x88
 800a9b8:	05c9      	lsls	r1, r1, #23
 800a9ba:	1c18      	adds	r0, r3, #0
 800a9bc:	f7f6 faf0 	bl	8000fa0 <__aeabi_fmul>
 800a9c0:	1c03      	adds	r3, r0, #0
 800a9c2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	494a      	ldr	r1, [pc, #296]	@ (800aaf8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9ce:	1c18      	adds	r0, r3, #0
 800a9d0:	f7f6 f900 	bl	8000bd4 <__aeabi_fdiv>
 800a9d4:	1c03      	adds	r3, r0, #0
 800a9d6:	1c19      	adds	r1, r3, #0
 800a9d8:	1c20      	adds	r0, r4, #0
 800a9da:	f7f5 ff71 	bl	80008c0 <__aeabi_fadd>
 800a9de:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a9e0:	1c19      	adds	r1, r3, #0
 800a9e2:	1c28      	adds	r0, r5, #0
 800a9e4:	f7f6 f8f6 	bl	8000bd4 <__aeabi_fdiv>
 800a9e8:	1c03      	adds	r3, r0, #0
 800a9ea:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4940      	ldr	r1, [pc, #256]	@ (800aaf8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a9f6:	1c18      	adds	r0, r3, #0
 800a9f8:	f7f6 f8ec 	bl	8000bd4 <__aeabi_fdiv>
 800a9fc:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a9fe:	2185      	movs	r1, #133	@ 0x85
 800aa00:	05c9      	lsls	r1, r1, #23
 800aa02:	1c18      	adds	r0, r3, #0
 800aa04:	f7f6 facc 	bl	8000fa0 <__aeabi_fmul>
 800aa08:	1c03      	adds	r3, r0, #0
 800aa0a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4938      	ldr	r1, [pc, #224]	@ (800aaf8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800aa16:	1c18      	adds	r0, r3, #0
 800aa18:	f7f6 f8dc 	bl	8000bd4 <__aeabi_fdiv>
 800aa1c:	1c03      	adds	r3, r0, #0
 800aa1e:	1c19      	adds	r1, r3, #0
 800aa20:	1c20      	adds	r0, r4, #0
 800aa22:	f7f5 ff4d 	bl	80008c0 <__aeabi_fadd>
 800aa26:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800aa28:	1c19      	adds	r1, r3, #0
 800aa2a:	1c28      	adds	r0, r5, #0
 800aa2c:	f7f6 f8d2 	bl	8000bd4 <__aeabi_fdiv>
 800aa30:	1c03      	adds	r3, r0, #0
 800aa32:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d118      	bne.n	800aa72 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800aa44:	2188      	movs	r1, #136	@ 0x88
 800aa46:	05c9      	lsls	r1, r1, #23
 800aa48:	1c18      	adds	r0, r3, #0
 800aa4a:	f7f6 faa9 	bl	8000fa0 <__aeabi_fmul>
 800aa4e:	1c03      	adds	r3, r0, #0
 800aa50:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800aa56:	4929      	ldr	r1, [pc, #164]	@ (800aafc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800aa58:	1c18      	adds	r0, r3, #0
 800aa5a:	f7f5 ff31 	bl	80008c0 <__aeabi_fadd>
 800aa5e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800aa60:	1c19      	adds	r1, r3, #0
 800aa62:	1c20      	adds	r0, r4, #0
 800aa64:	f7f6 f8b6 	bl	8000bd4 <__aeabi_fdiv>
 800aa68:	1c03      	adds	r3, r0, #0
 800aa6a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa70:	e017      	b.n	800aaa2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800aa76:	2188      	movs	r1, #136	@ 0x88
 800aa78:	05c9      	lsls	r1, r1, #23
 800aa7a:	1c18      	adds	r0, r3, #0
 800aa7c:	f7f6 fa90 	bl	8000fa0 <__aeabi_fmul>
 800aa80:	1c03      	adds	r3, r0, #0
 800aa82:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800aa88:	491d      	ldr	r1, [pc, #116]	@ (800ab00 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800aa8a:	1c18      	adds	r0, r3, #0
 800aa8c:	f7f5 ff18 	bl	80008c0 <__aeabi_fadd>
 800aa90:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800aa92:	1c19      	adds	r1, r3, #0
 800aa94:	1c20      	adds	r0, r4, #0
 800aa96:	f7f6 f89d 	bl	8000bd4 <__aeabi_fdiv>
 800aa9a:	1c03      	adds	r3, r0, #0
 800aa9c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800aaa6:	2185      	movs	r1, #133	@ 0x85
 800aaa8:	05c9      	lsls	r1, r1, #23
 800aaaa:	1c18      	adds	r0, r3, #0
 800aaac:	f7f6 fa78 	bl	8000fa0 <__aeabi_fmul>
 800aab0:	1c03      	adds	r3, r0, #0
 800aab2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4912      	ldr	r1, [pc, #72]	@ (800ab04 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800aaba:	1c18      	adds	r0, r3, #0
 800aabc:	f7f5 ff00 	bl	80008c0 <__aeabi_fadd>
 800aac0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800aac2:	1c19      	adds	r1, r3, #0
 800aac4:	1c20      	adds	r0, r4, #0
 800aac6:	f7f6 f885 	bl	8000bd4 <__aeabi_fdiv>
 800aaca:	1c03      	adds	r3, r0, #0
 800aacc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800aaf0:	46c0      	nop			@ (mov r8, r8)
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	b002      	add	sp, #8
 800aaf6:	bdb0      	pop	{r4, r5, r7, pc}
 800aaf8:	45610000 	.word	0x45610000
 800aafc:	44960000 	.word	0x44960000
 800ab00:	41a00000 	.word	0x41a00000
 800ab04:	451c4000 	.word	0x451c4000

0800ab08 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ab14:	1c18      	adds	r0, r3, #0
 800ab16:	46bd      	mov	sp, r7
 800ab18:	b002      	add	sp, #8
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ab2c:	1c19      	adds	r1, r3, #0
 800ab2e:	1c10      	adds	r0, r2, #0
 800ab30:	f7f5 fec6 	bl	80008c0 <__aeabi_fadd>
 800ab34:	1c03      	adds	r3, r0, #0
}
 800ab36:	1c18      	adds	r0, r3, #0
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	223c      	movs	r2, #60	@ 0x3c
 800ab4a:	5c9b      	ldrb	r3, [r3, r2]
}
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	b002      	add	sp, #8
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ab54:	b5b0      	push	{r4, r5, r7, lr}
 800ab56:	b08c      	sub	sp, #48	@ 0x30
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ab60:	1c19      	adds	r1, r3, #0
 800ab62:	4895      	ldr	r0, [pc, #596]	@ (800adb8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800ab64:	f7f6 fb5a 	bl	800121c <__aeabi_fsub>
 800ab68:	1c03      	adds	r3, r0, #0
 800ab6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab70:	1c19      	adds	r1, r3, #0
 800ab72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab74:	f7f5 fcf0 	bl	8000558 <__aeabi_fcmpgt>
 800ab78:	1e03      	subs	r3, r0, #0
 800ab7a:	d00b      	beq.n	800ab94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ab84:	1c19      	adds	r1, r3, #0
 800ab86:	1c10      	adds	r0, r2, #0
 800ab88:	f7f5 fe9a 	bl	80008c0 <__aeabi_fadd>
 800ab8c:	1c03      	adds	r3, r0, #0
 800ab8e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab98:	1c19      	adds	r1, r3, #0
 800ab9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab9c:	f7f5 fcdc 	bl	8000558 <__aeabi_fcmpgt>
 800aba0:	1e03      	subs	r3, r0, #0
 800aba2:	d00b      	beq.n	800abbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800abac:	1c19      	adds	r1, r3, #0
 800abae:	1c10      	adds	r0, r2, #0
 800abb0:	f7f5 fe86 	bl	80008c0 <__aeabi_fadd>
 800abb4:	1c03      	adds	r3, r0, #0
 800abb6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6959      	ldr	r1, [r3, #20]
 800abc0:	4a7e      	ldr	r2, [pc, #504]	@ (800adbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	0018      	movs	r0, r3
 800abc6:	f000 f9f1 	bl	800afac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	1c11      	adds	r1, r2, #0
 800abd2:	0018      	movs	r0, r3
 800abd4:	f000 f9fa 	bl	800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800abd8:	1c03      	adds	r3, r0, #0
 800abda:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800abe8:	1c19      	adds	r1, r3, #0
 800abea:	1c10      	adds	r0, r2, #0
 800abec:	f7f6 fb16 	bl	800121c <__aeabi_fsub>
 800abf0:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800abf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf4:	1c18      	adds	r0, r3, #0
 800abf6:	f7f6 f9d3 	bl	8000fa0 <__aeabi_fmul>
 800abfa:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800abfc:	1c19      	adds	r1, r3, #0
 800abfe:	1c20      	adds	r0, r4, #0
 800ac00:	f7f5 fe5e 	bl	80008c0 <__aeabi_fadd>
 800ac04:	1c03      	adds	r3, r0, #0
 800ac06:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ac10:	1c19      	adds	r1, r3, #0
 800ac12:	486b      	ldr	r0, [pc, #428]	@ (800adc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ac14:	f7f6 fb02 	bl	800121c <__aeabi_fsub>
 800ac18:	1c03      	adds	r3, r0, #0
 800ac1a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	1c11      	adds	r1, r2, #0
 800ac24:	0018      	movs	r0, r3
 800ac26:	f000 f9d1 	bl	800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac2a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ac2c:	1c19      	adds	r1, r3, #0
 800ac2e:	1c28      	adds	r0, r5, #0
 800ac30:	f7f6 f9b6 	bl	8000fa0 <__aeabi_fmul>
 800ac34:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800ac36:	1c19      	adds	r1, r3, #0
 800ac38:	1c20      	adds	r0, r4, #0
 800ac3a:	f7f5 fe41 	bl	80008c0 <__aeabi_fadd>
 800ac3e:	1c03      	adds	r3, r0, #0
 800ac40:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ac42:	4a60      	ldr	r2, [pc, #384]	@ (800adc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ac44:	6a39      	ldr	r1, [r7, #32]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	0018      	movs	r0, r3
 800ac4a:	f000 f9af 	bl	800afac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	1c11      	adds	r1, r2, #0
 800ac56:	0018      	movs	r0, r3
 800ac58:	f000 f9b8 	bl	800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac5c:	1c03      	adds	r3, r0, #0
 800ac5e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800ac60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac62:	69f8      	ldr	r0, [r7, #28]
 800ac64:	f7f6 f99c 	bl	8000fa0 <__aeabi_fmul>
 800ac68:	1c03      	adds	r3, r0, #0
 800ac6a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6999      	ldr	r1, [r3, #24]
 800ac74:	4a51      	ldr	r2, [pc, #324]	@ (800adbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f000 f997 	bl	800afac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	1c11      	adds	r1, r2, #0
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 f9a0 	bl	800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ac8c:	1c03      	adds	r3, r0, #0
 800ac8e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ac9c:	1c19      	adds	r1, r3, #0
 800ac9e:	1c10      	adds	r0, r2, #0
 800aca0:	f7f6 fabc 	bl	800121c <__aeabi_fsub>
 800aca4:	1c03      	adds	r3, r0, #0
 800aca6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800aca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acaa:	69b8      	ldr	r0, [r7, #24]
 800acac:	f7f6 fab6 	bl	800121c <__aeabi_fsub>
 800acb0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800acb2:	1c19      	adds	r1, r3, #0
 800acb4:	1c28      	adds	r0, r5, #0
 800acb6:	f7f6 f973 	bl	8000fa0 <__aeabi_fmul>
 800acba:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800acbc:	1c19      	adds	r1, r3, #0
 800acbe:	1c20      	adds	r0, r4, #0
 800acc0:	f7f5 fdfe 	bl	80008c0 <__aeabi_fadd>
 800acc4:	1c03      	adds	r3, r0, #0
 800acc6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800acd0:	1c19      	adds	r1, r3, #0
 800acd2:	483b      	ldr	r0, [pc, #236]	@ (800adc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800acd4:	f7f6 faa2 	bl	800121c <__aeabi_fsub>
 800acd8:	1c03      	adds	r3, r0, #0
 800acda:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	1c11      	adds	r1, r2, #0
 800ace4:	0018      	movs	r0, r3
 800ace6:	f000 f971 	bl	800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800acea:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800acec:	1c19      	adds	r1, r3, #0
 800acee:	1c28      	adds	r0, r5, #0
 800acf0:	f7f6 f956 	bl	8000fa0 <__aeabi_fmul>
 800acf4:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800acf6:	1c19      	adds	r1, r3, #0
 800acf8:	1c20      	adds	r0, r4, #0
 800acfa:	f7f5 fde1 	bl	80008c0 <__aeabi_fadd>
 800acfe:	1c03      	adds	r3, r0, #0
 800ad00:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ad02:	4a30      	ldr	r2, [pc, #192]	@ (800adc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ad04:	6939      	ldr	r1, [r7, #16]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	0018      	movs	r0, r3
 800ad0a:	f000 f94f 	bl	800afac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1c11      	adds	r1, r2, #0
 800ad16:	0018      	movs	r0, r3
 800ad18:	f000 f958 	bl	800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ad1c:	1c03      	adds	r3, r0, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ad20:	6979      	ldr	r1, [r7, #20]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7f6 f93c 	bl	8000fa0 <__aeabi_fmul>
 800ad28:	1c03      	adds	r3, r0, #0
 800ad2a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4923      	ldr	r1, [pc, #140]	@ (800adc8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ad3a:	1c18      	adds	r0, r3, #0
 800ad3c:	f7f5 ff4a 	bl	8000bd4 <__aeabi_fdiv>
 800ad40:	1c03      	adds	r3, r0, #0
 800ad42:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ad44:	69f9      	ldr	r1, [r7, #28]
 800ad46:	20fe      	movs	r0, #254	@ 0xfe
 800ad48:	0580      	lsls	r0, r0, #22
 800ad4a:	f7f6 fa67 	bl	800121c <__aeabi_fsub>
 800ad4e:	1c03      	adds	r3, r0, #0
 800ad50:	491e      	ldr	r1, [pc, #120]	@ (800adcc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ad52:	1c18      	adds	r0, r3, #0
 800ad54:	f7f6 f924 	bl	8000fa0 <__aeabi_fmul>
 800ad58:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ad5a:	491d      	ldr	r1, [pc, #116]	@ (800add0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ad5c:	1c18      	adds	r0, r3, #0
 800ad5e:	f7f6 fa5d 	bl	800121c <__aeabi_fsub>
 800ad62:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ad64:	1c19      	adds	r1, r3, #0
 800ad66:	1c28      	adds	r0, r5, #0
 800ad68:	f7f6 f91a 	bl	8000fa0 <__aeabi_fmul>
 800ad6c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ad6e:	1c19      	adds	r1, r3, #0
 800ad70:	1c20      	adds	r0, r4, #0
 800ad72:	f7f5 fda5 	bl	80008c0 <__aeabi_fadd>
 800ad76:	1c03      	adds	r3, r0, #0
 800ad78:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad82:	2100      	movs	r1, #0
 800ad84:	1c18      	adds	r0, r3, #0
 800ad86:	f7f5 fbd3 	bl	8000530 <__aeabi_fcmplt>
 800ad8a:	1e03      	subs	r3, r0, #0
 800ad8c:	d002      	beq.n	800ad94 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ad9c:	1c19      	adds	r1, r3, #0
 800ad9e:	1c10      	adds	r0, r2, #0
 800ada0:	f7f5 fbda 	bl	8000558 <__aeabi_fcmpgt>
 800ada4:	1e03      	subs	r3, r0, #0
 800ada6:	d100      	bne.n	800adaa <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ada8:	e002      	b.n	800adb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800adb0:	46c0      	nop			@ (mov r8, r8)
 800adb2:	46bd      	mov	sp, r7
 800adb4:	b00c      	add	sp, #48	@ 0x30
 800adb6:	bdb0      	pop	{r4, r5, r7, pc}
 800adb8:	46fffe00 	.word	0x46fffe00
 800adbc:	3c23d70a 	.word	0x3c23d70a
 800adc0:	43ff0000 	.word	0x43ff0000
 800adc4:	3db851ec 	.word	0x3db851ec
 800adc8:	42700000 	.word	0x42700000
 800adcc:	3fa66666 	.word	0x3fa66666
 800add0:	3e99999a 	.word	0x3e99999a

0800add4 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	223c      	movs	r2, #60	@ 0x3c
 800ade2:	5c9b      	ldrb	r3, [r3, r2]
 800ade4:	2201      	movs	r2, #1
 800ade6:	4053      	eors	r3, r2
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	223c      	movs	r2, #60	@ 0x3c
 800adf2:	2101      	movs	r1, #1
 800adf4:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ae02:	e0c8      	b.n	800af96 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae08:	4965      	ldr	r1, [pc, #404]	@ (800afa0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ae0a:	1c18      	adds	r0, r3, #0
 800ae0c:	f7f5 fbae 	bl	800056c <__aeabi_fcmpge>
 800ae10:	1e03      	subs	r3, r0, #0
 800ae12:	d107      	bne.n	800ae24 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ae18:	4962      	ldr	r1, [pc, #392]	@ (800afa4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ae1a:	1c18      	adds	r0, r3, #0
 800ae1c:	f7f5 fb92 	bl	8000544 <__aeabi_fcmple>
 800ae20:	1e03      	subs	r3, r0, #0
 800ae22:	d00e      	beq.n	800ae42 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ae2c:	1c19      	adds	r1, r3, #0
 800ae2e:	1c10      	adds	r0, r2, #0
 800ae30:	f7f5 fd46 	bl	80008c0 <__aeabi_fadd>
 800ae34:	1c03      	adds	r3, r0, #0
 800ae36:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae46:	1c19      	adds	r1, r3, #0
 800ae48:	6838      	ldr	r0, [r7, #0]
 800ae4a:	f7f6 f9e7 	bl	800121c <__aeabi_fsub>
 800ae4e:	1c03      	adds	r3, r0, #0
 800ae50:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	0018      	movs	r0, r3
 800ae56:	f7ff fe7d 	bl	800ab54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5e:	1c19      	adds	r1, r3, #0
 800ae60:	6838      	ldr	r0, [r7, #0]
 800ae62:	f7f6 f9db 	bl	800121c <__aeabi_fsub>
 800ae66:	1c03      	adds	r3, r0, #0
 800ae68:	2185      	movs	r1, #133	@ 0x85
 800ae6a:	05c9      	lsls	r1, r1, #23
 800ae6c:	1c18      	adds	r0, r3, #0
 800ae6e:	f7f5 feb1 	bl	8000bd4 <__aeabi_fdiv>
 800ae72:	1c03      	adds	r3, r0, #0
 800ae74:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800ae76:	2100      	movs	r1, #0
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7f5 fb59 	bl	8000530 <__aeabi_fcmplt>
 800ae7e:	1e03      	subs	r3, r0, #0
 800ae80:	d008      	beq.n	800ae94 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae86:	68f9      	ldr	r1, [r7, #12]
 800ae88:	1c18      	adds	r0, r3, #0
 800ae8a:	f7f6 f9c7 	bl	800121c <__aeabi_fsub>
 800ae8e:	1c03      	adds	r3, r0, #0
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	e007      	b.n	800aea4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae98:	1c19      	adds	r1, r3, #0
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7f5 fd10 	bl	80008c0 <__aeabi_fadd>
 800aea0:	1c03      	adds	r3, r0, #0
 800aea2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800aea4:	23fe      	movs	r3, #254	@ 0xfe
 800aea6:	059b      	lsls	r3, r3, #22
 800aea8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800aeaa:	493f      	ldr	r1, [pc, #252]	@ (800afa8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aeac:	6978      	ldr	r0, [r7, #20]
 800aeae:	f7f5 fb53 	bl	8000558 <__aeabi_fcmpgt>
 800aeb2:	1e03      	subs	r3, r0, #0
 800aeb4:	d010      	beq.n	800aed8 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800aeb6:	493c      	ldr	r1, [pc, #240]	@ (800afa8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aeb8:	6978      	ldr	r0, [r7, #20]
 800aeba:	f7f5 fe8b 	bl	8000bd4 <__aeabi_fdiv>
 800aebe:	1c03      	adds	r3, r0, #0
 800aec0:	1c1c      	adds	r4, r3, #0
 800aec2:	4939      	ldr	r1, [pc, #228]	@ (800afa8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800aec4:	6978      	ldr	r0, [r7, #20]
 800aec6:	f7f5 fe85 	bl	8000bd4 <__aeabi_fdiv>
 800aeca:	1c03      	adds	r3, r0, #0
 800aecc:	1c19      	adds	r1, r3, #0
 800aece:	1c20      	adds	r0, r4, #0
 800aed0:	f7f6 f866 	bl	8000fa0 <__aeabi_fmul>
 800aed4:	1c03      	adds	r3, r0, #0
 800aed6:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800aedc:	1c19      	adds	r1, r3, #0
 800aede:	2085      	movs	r0, #133	@ 0x85
 800aee0:	05c0      	lsls	r0, r0, #23
 800aee2:	f7f6 f99b 	bl	800121c <__aeabi_fsub>
 800aee6:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800aee8:	6939      	ldr	r1, [r7, #16]
 800aeea:	1c18      	adds	r0, r3, #0
 800aeec:	f7f6 f858 	bl	8000fa0 <__aeabi_fmul>
 800aef0:	1c03      	adds	r3, r0, #0
 800aef2:	1c18      	adds	r0, r3, #0
 800aef4:	f017 fff4 	bl	8022ee0 <sqrtf>
 800aef8:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800af02:	2185      	movs	r1, #133	@ 0x85
 800af04:	05c9      	lsls	r1, r1, #23
 800af06:	6938      	ldr	r0, [r7, #16]
 800af08:	f7f6 f84a 	bl	8000fa0 <__aeabi_fmul>
 800af0c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800af0e:	1c19      	adds	r1, r3, #0
 800af10:	1c28      	adds	r0, r5, #0
 800af12:	f7f5 fe5f 	bl	8000bd4 <__aeabi_fdiv>
 800af16:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800af18:	1c19      	adds	r1, r3, #0
 800af1a:	1c20      	adds	r0, r4, #0
 800af1c:	f7f6 f840 	bl	8000fa0 <__aeabi_fmul>
 800af20:	1c03      	adds	r3, r0, #0
 800af22:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af28:	68f9      	ldr	r1, [r7, #12]
 800af2a:	1c18      	adds	r0, r3, #0
 800af2c:	f7f6 f838 	bl	8000fa0 <__aeabi_fmul>
 800af30:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800af32:	6939      	ldr	r1, [r7, #16]
 800af34:	1c18      	adds	r0, r3, #0
 800af36:	f7f5 fe4d 	bl	8000bd4 <__aeabi_fdiv>
 800af3a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	1c18      	adds	r0, r3, #0
 800af40:	f7f6 f82e 	bl	8000fa0 <__aeabi_fmul>
 800af44:	1c03      	adds	r3, r0, #0
             sqrtf(
 800af46:	1c19      	adds	r1, r3, #0
 800af48:	1c20      	adds	r0, r4, #0
 800af4a:	f7f5 fcb9 	bl	80008c0 <__aeabi_fadd>
 800af4e:	1c03      	adds	r3, r0, #0
 800af50:	1c18      	adds	r0, r3, #0
 800af52:	f017 ffc5 	bl	8022ee0 <sqrtf>
 800af56:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800af58:	1c19      	adds	r1, r3, #0
 800af5a:	1c30      	adds	r0, r6, #0
 800af5c:	f7f6 f820 	bl	8000fa0 <__aeabi_fmul>
 800af60:	1c03      	adds	r3, r0, #0
 800af62:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af70:	68f9      	ldr	r1, [r7, #12]
 800af72:	1c18      	adds	r0, r3, #0
 800af74:	f7f6 f814 	bl	8000fa0 <__aeabi_fmul>
 800af78:	1c03      	adds	r3, r0, #0
 800af7a:	2182      	movs	r1, #130	@ 0x82
 800af7c:	05c9      	lsls	r1, r1, #23
 800af7e:	1c18      	adds	r0, r3, #0
 800af80:	f7f5 fe28 	bl	8000bd4 <__aeabi_fdiv>
 800af84:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800af86:	1c19      	adds	r1, r3, #0
 800af88:	1c20      	adds	r0, r4, #0
 800af8a:	f7f5 fc99 	bl	80008c0 <__aeabi_fadd>
 800af8e:	1c03      	adds	r3, r0, #0
 800af90:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800af96:	46c0      	nop			@ (mov r8, r8)
 800af98:	46bd      	mov	sp, r7
 800af9a:	b007      	add	sp, #28
 800af9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af9e:	46c0      	nop			@ (mov r8, r8)
 800afa0:	42c80000 	.word	0x42c80000
 800afa4:	c2c80000 	.word	0xc2c80000
 800afa8:	44b40000 	.word	0x44b40000

0800afac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afc4:	46c0      	nop			@ (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b004      	add	sp, #16
 800afca:	bd80      	pop	{r7, pc}

0800afcc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800afcc:	b590      	push	{r4, r7, lr}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afde:	1c19      	adds	r1, r3, #0
 800afe0:	6838      	ldr	r0, [r7, #0]
 800afe2:	f7f6 f91b 	bl	800121c <__aeabi_fsub>
 800afe6:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800afe8:	1c19      	adds	r1, r3, #0
 800afea:	1c20      	adds	r0, r4, #0
 800afec:	f7f5 ffd8 	bl	8000fa0 <__aeabi_fmul>
 800aff0:	1c03      	adds	r3, r0, #0
 800aff2:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800aff4:	4912      	ldr	r1, [pc, #72]	@ (800b040 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7f5 fa9a 	bl	8000530 <__aeabi_fcmplt>
 800affc:	1e03      	subs	r3, r0, #0
 800affe:	d002      	beq.n	800b006 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b000:	23fe      	movs	r3, #254	@ 0xfe
 800b002:	059b      	lsls	r3, r3, #22
 800b004:	e018      	b.n	800b038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b006:	490f      	ldr	r1, [pc, #60]	@ (800b044 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7f5 faa5 	bl	8000558 <__aeabi_fcmpgt>
 800b00e:	1e03      	subs	r3, r0, #0
 800b010:	d001      	beq.n	800b016 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b012:	2300      	movs	r3, #0
 800b014:	e010      	b.n	800b038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	1c18      	adds	r0, r3, #0
 800b01a:	f017 ff39 	bl	8022e90 <expf>
 800b01e:	1c03      	adds	r3, r0, #0
 800b020:	21fe      	movs	r1, #254	@ 0xfe
 800b022:	0589      	lsls	r1, r1, #22
 800b024:	1c18      	adds	r0, r3, #0
 800b026:	f7f5 fc4b 	bl	80008c0 <__aeabi_fadd>
 800b02a:	1c03      	adds	r3, r0, #0
 800b02c:	1c19      	adds	r1, r3, #0
 800b02e:	20fe      	movs	r0, #254	@ 0xfe
 800b030:	0580      	lsls	r0, r0, #22
 800b032:	f7f5 fdcf 	bl	8000bd4 <__aeabi_fdiv>
 800b036:	1c03      	adds	r3, r0, #0
    }
}
 800b038:	1c18      	adds	r0, r3, #0
 800b03a:	46bd      	mov	sp, r7
 800b03c:	b005      	add	sp, #20
 800b03e:	bd90      	pop	{r4, r7, pc}
 800b040:	c2480000 	.word	0xc2480000
 800b044:	42480000 	.word	0x42480000

0800b048 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b060:	46c0      	nop			@ (mov r8, r8)
 800b062:	46bd      	mov	sp, r7
 800b064:	b004      	add	sp, #16
 800b066:	bd80      	pop	{r7, pc}

0800b068 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d114      	bne.n	800b0a4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b07e:	1c19      	adds	r1, r3, #0
 800b080:	6838      	ldr	r0, [r7, #0]
 800b082:	f7f6 f8cb 	bl	800121c <__aeabi_fsub>
 800b086:	1c03      	adds	r3, r0, #0
 800b088:	4918      	ldr	r1, [pc, #96]	@ (800b0ec <GasIndexAlgorithm__mox_model__process+0x84>)
 800b08a:	1c18      	adds	r0, r3, #0
 800b08c:	f7f5 fda2 	bl	8000bd4 <__aeabi_fdiv>
 800b090:	1c03      	adds	r3, r0, #0
 800b092:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b098:	1c19      	adds	r1, r3, #0
 800b09a:	1c10      	adds	r0, r2, #0
 800b09c:	f7f5 ff80 	bl	8000fa0 <__aeabi_fmul>
 800b0a0:	1c03      	adds	r3, r0, #0
 800b0a2:	e01f      	b.n	800b0e4 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0a8:	1c19      	adds	r1, r3, #0
 800b0aa:	6838      	ldr	r0, [r7, #0]
 800b0ac:	f7f6 f8b6 	bl	800121c <__aeabi_fsub>
 800b0b0:	1c03      	adds	r3, r0, #0
 800b0b2:	1c1a      	adds	r2, r3, #0
 800b0b4:	2380      	movs	r3, #128	@ 0x80
 800b0b6:	061b      	lsls	r3, r3, #24
 800b0b8:	4053      	eors	r3, r2
 800b0ba:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0c0:	490b      	ldr	r1, [pc, #44]	@ (800b0f0 <GasIndexAlgorithm__mox_model__process+0x88>)
 800b0c2:	1c18      	adds	r0, r3, #0
 800b0c4:	f7f5 fbfc 	bl	80008c0 <__aeabi_fadd>
 800b0c8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b0ca:	1c19      	adds	r1, r3, #0
 800b0cc:	1c20      	adds	r0, r4, #0
 800b0ce:	f7f5 fd81 	bl	8000bd4 <__aeabi_fdiv>
 800b0d2:	1c03      	adds	r3, r0, #0
 800b0d4:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b0da:	1c19      	adds	r1, r3, #0
 800b0dc:	1c10      	adds	r0, r2, #0
 800b0de:	f7f5 ff5f 	bl	8000fa0 <__aeabi_fmul>
 800b0e2:	1c03      	adds	r3, r0, #0
    }
}
 800b0e4:	1c18      	adds	r0, r3, #0
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	b003      	add	sp, #12
 800b0ea:	bd90      	pop	{r4, r7, pc}
 800b0ec:	44fa0000 	.word	0x44fa0000
 800b0f0:	435c0000 	.word	0x435c0000

0800b0f4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2180      	movs	r1, #128	@ 0x80
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2184      	movs	r1, #132	@ 0x84
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2188      	movs	r1, #136	@ 0x88
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	505a      	str	r2, [r3, r1]
}
 800b11a:	46c0      	nop			@ (mov r8, r8)
 800b11c:	46bd      	mov	sp, r7
 800b11e:	b004      	add	sp, #16
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b124:	b590      	push	{r4, r7, lr}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2280      	movs	r2, #128	@ 0x80
 800b132:	589c      	ldr	r4, [r3, r2]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2284      	movs	r2, #132	@ 0x84
 800b138:	589b      	ldr	r3, [r3, r2]
 800b13a:	1c19      	adds	r1, r3, #0
 800b13c:	6838      	ldr	r0, [r7, #0]
 800b13e:	f7f6 f86d 	bl	800121c <__aeabi_fsub>
 800b142:	1c03      	adds	r3, r0, #0
 800b144:	1c19      	adds	r1, r3, #0
 800b146:	1c20      	adds	r0, r4, #0
 800b148:	f7f5 ff2a 	bl	8000fa0 <__aeabi_fmul>
 800b14c:	1c03      	adds	r3, r0, #0
 800b14e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b150:	4940      	ldr	r1, [pc, #256]	@ (800b254 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b152:	68b8      	ldr	r0, [r7, #8]
 800b154:	f7f5 f9ec 	bl	8000530 <__aeabi_fcmplt>
 800b158:	1e03      	subs	r3, r0, #0
 800b15a:	d001      	beq.n	800b160 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b15c:	4b3e      	ldr	r3, [pc, #248]	@ (800b258 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b15e:	e075      	b.n	800b24c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b160:	493e      	ldr	r1, [pc, #248]	@ (800b25c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b162:	68b8      	ldr	r0, [r7, #8]
 800b164:	f7f5 f9f8 	bl	8000558 <__aeabi_fcmpgt>
 800b168:	1e03      	subs	r3, r0, #0
 800b16a:	d001      	beq.n	800b170 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e06d      	b.n	800b24c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b170:	2100      	movs	r1, #0
 800b172:	6838      	ldr	r0, [r7, #0]
 800b174:	f7f5 f9fa 	bl	800056c <__aeabi_fcmpge>
 800b178:	1e03      	subs	r3, r0, #0
 800b17a:	d047      	beq.n	800b20c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2288      	movs	r2, #136	@ 0x88
 800b180:	589b      	ldr	r3, [r3, r2]
 800b182:	21fe      	movs	r1, #254	@ 0xfe
 800b184:	0589      	lsls	r1, r1, #22
 800b186:	1c18      	adds	r0, r3, #0
 800b188:	f7f5 f9cc 	bl	8000524 <__aeabi_fcmpeq>
 800b18c:	1e03      	subs	r3, r0, #0
 800b18e:	d00e      	beq.n	800b1ae <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	1c19      	adds	r1, r3, #0
 800b196:	20fe      	movs	r0, #254	@ 0xfe
 800b198:	0580      	lsls	r0, r0, #22
 800b19a:	f7f6 f83f 	bl	800121c <__aeabi_fsub>
 800b19e:	1c03      	adds	r3, r0, #0
 800b1a0:	492f      	ldr	r1, [pc, #188]	@ (800b260 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b1a2:	1c18      	adds	r0, r3, #0
 800b1a4:	f7f5 fefc 	bl	8000fa0 <__aeabi_fmul>
 800b1a8:	1c03      	adds	r3, r0, #0
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	e012      	b.n	800b1d4 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	492c      	ldr	r1, [pc, #176]	@ (800b264 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b1b4:	1c18      	adds	r0, r3, #0
 800b1b6:	f7f5 fef3 	bl	8000fa0 <__aeabi_fmul>
 800b1ba:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b1bc:	1c19      	adds	r1, r3, #0
 800b1be:	4826      	ldr	r0, [pc, #152]	@ (800b258 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b1c0:	f7f6 f82c 	bl	800121c <__aeabi_fsub>
 800b1c4:	1c03      	adds	r3, r0, #0
 800b1c6:	2181      	movs	r1, #129	@ 0x81
 800b1c8:	05c9      	lsls	r1, r1, #23
 800b1ca:	1c18      	adds	r0, r3, #0
 800b1cc:	f7f5 fd02 	bl	8000bd4 <__aeabi_fdiv>
 800b1d0:	1c03      	adds	r3, r0, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b1d4:	4920      	ldr	r1, [pc, #128]	@ (800b258 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7f5 fb72 	bl	80008c0 <__aeabi_fadd>
 800b1dc:	1c03      	adds	r3, r0, #0
 800b1de:	1c1c      	adds	r4, r3, #0
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	1c18      	adds	r0, r3, #0
 800b1e4:	f017 fe54 	bl	8022e90 <expf>
 800b1e8:	1c03      	adds	r3, r0, #0
 800b1ea:	21fe      	movs	r1, #254	@ 0xfe
 800b1ec:	0589      	lsls	r1, r1, #22
 800b1ee:	1c18      	adds	r0, r3, #0
 800b1f0:	f7f5 fb66 	bl	80008c0 <__aeabi_fadd>
 800b1f4:	1c03      	adds	r3, r0, #0
 800b1f6:	1c19      	adds	r1, r3, #0
 800b1f8:	1c20      	adds	r0, r4, #0
 800b1fa:	f7f5 fceb 	bl	8000bd4 <__aeabi_fdiv>
 800b1fe:	1c03      	adds	r3, r0, #0
 800b200:	68f9      	ldr	r1, [r7, #12]
 800b202:	1c18      	adds	r0, r3, #0
 800b204:	f7f6 f80a 	bl	800121c <__aeabi_fsub>
 800b208:	1c03      	adds	r3, r0, #0
 800b20a:	e01f      	b.n	800b24c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2188      	movs	r1, #136	@ 0x88
 800b214:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b216:	1c19      	adds	r1, r3, #0
 800b218:	1c10      	adds	r0, r2, #0
 800b21a:	f7f5 fcdb 	bl	8000bd4 <__aeabi_fdiv>
 800b21e:	1c03      	adds	r3, r0, #0
 800b220:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	1c18      	adds	r0, r3, #0
 800b226:	f017 fe33 	bl	8022e90 <expf>
 800b22a:	1c03      	adds	r3, r0, #0
 800b22c:	21fe      	movs	r1, #254	@ 0xfe
 800b22e:	0589      	lsls	r1, r1, #22
 800b230:	1c18      	adds	r0, r3, #0
 800b232:	f7f5 fb45 	bl	80008c0 <__aeabi_fadd>
 800b236:	1c03      	adds	r3, r0, #0
 800b238:	1c19      	adds	r1, r3, #0
 800b23a:	4807      	ldr	r0, [pc, #28]	@ (800b258 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b23c:	f7f5 fcca 	bl	8000bd4 <__aeabi_fdiv>
 800b240:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b242:	1c19      	adds	r1, r3, #0
 800b244:	1c20      	adds	r0, r4, #0
 800b246:	f7f5 feab 	bl	8000fa0 <__aeabi_fmul>
 800b24a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b24c:	1c18      	adds	r0, r3, #0
 800b24e:	46bd      	mov	sp, r7
 800b250:	b005      	add	sp, #20
 800b252:	bd90      	pop	{r4, r7, pc}
 800b254:	c2480000 	.word	0xc2480000
 800b258:	43fa0000 	.word	0x43fa0000
 800b25c:	42480000 	.word	0x42480000
 800b260:	3f8041ab 	.word	0x3f8041ab
 800b264:	40a00000 	.word	0x40a00000

0800b268 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b268:	b590      	push	{r4, r7, lr}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	4913      	ldr	r1, [pc, #76]	@ (800b2c8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b27a:	1c18      	adds	r0, r3, #0
 800b27c:	f7f5 fb20 	bl	80008c0 <__aeabi_fadd>
 800b280:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b282:	1c19      	adds	r1, r3, #0
 800b284:	1c20      	adds	r0, r4, #0
 800b286:	f7f5 fca5 	bl	8000bd4 <__aeabi_fdiv>
 800b28a:	1c03      	adds	r3, r0, #0
 800b28c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	228c      	movs	r2, #140	@ 0x8c
 800b292:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	490b      	ldr	r1, [pc, #44]	@ (800b2cc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b29e:	1c18      	adds	r0, r3, #0
 800b2a0:	f7f5 fb0e 	bl	80008c0 <__aeabi_fadd>
 800b2a4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b2a6:	1c19      	adds	r1, r3, #0
 800b2a8:	1c20      	adds	r0, r4, #0
 800b2aa:	f7f5 fc93 	bl	8000bd4 <__aeabi_fdiv>
 800b2ae:	1c03      	adds	r3, r0, #0
 800b2b0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2290      	movs	r2, #144	@ 0x90
 800b2b6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2294      	movs	r2, #148	@ 0x94
 800b2bc:	2100      	movs	r1, #0
 800b2be:	5499      	strb	r1, [r3, r2]
}
 800b2c0:	46c0      	nop			@ (mov r8, r8)
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	b003      	add	sp, #12
 800b2c6:	bd90      	pop	{r4, r7, pc}
 800b2c8:	41a00000 	.word	0x41a00000
 800b2cc:	43fa0000 	.word	0x43fa0000

0800b2d0 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b2d0:	b590      	push	{r4, r7, lr}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2294      	movs	r2, #148	@ 0x94
 800b2de:	5c9b      	ldrb	r3, [r3, r2]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	4053      	eors	r3, r2
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00f      	beq.n	800b30a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2198      	movs	r1, #152	@ 0x98
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	219c      	movs	r1, #156	@ 0x9c
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	21a0      	movs	r1, #160	@ 0xa0
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2294      	movs	r2, #148	@ 0x94
 800b306:	2101      	movs	r1, #1
 800b308:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	228c      	movs	r2, #140	@ 0x8c
 800b30e:	589b      	ldr	r3, [r3, r2]
 800b310:	1c19      	adds	r1, r3, #0
 800b312:	20fe      	movs	r0, #254	@ 0xfe
 800b314:	0580      	lsls	r0, r0, #22
 800b316:	f7f5 ff81 	bl	800121c <__aeabi_fsub>
 800b31a:	1c03      	adds	r3, r0, #0
 800b31c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2298      	movs	r2, #152	@ 0x98
 800b322:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b324:	1c19      	adds	r1, r3, #0
 800b326:	f7f5 fe3b 	bl	8000fa0 <__aeabi_fmul>
 800b32a:	1c03      	adds	r3, r0, #0
 800b32c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	228c      	movs	r2, #140	@ 0x8c
 800b332:	589b      	ldr	r3, [r3, r2]
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	1c18      	adds	r0, r3, #0
 800b338:	f7f5 fe32 	bl	8000fa0 <__aeabi_fmul>
 800b33c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b33e:	1c19      	adds	r1, r3, #0
 800b340:	1c20      	adds	r0, r4, #0
 800b342:	f7f5 fabd 	bl	80008c0 <__aeabi_fadd>
 800b346:	1c03      	adds	r3, r0, #0
 800b348:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2298      	movs	r2, #152	@ 0x98
 800b34e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2290      	movs	r2, #144	@ 0x90
 800b354:	589b      	ldr	r3, [r3, r2]
 800b356:	1c19      	adds	r1, r3, #0
 800b358:	20fe      	movs	r0, #254	@ 0xfe
 800b35a:	0580      	lsls	r0, r0, #22
 800b35c:	f7f5 ff5e 	bl	800121c <__aeabi_fsub>
 800b360:	1c03      	adds	r3, r0, #0
 800b362:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	229c      	movs	r2, #156	@ 0x9c
 800b368:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b36a:	1c19      	adds	r1, r3, #0
 800b36c:	f7f5 fe18 	bl	8000fa0 <__aeabi_fmul>
 800b370:	1c03      	adds	r3, r0, #0
 800b372:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2290      	movs	r2, #144	@ 0x90
 800b378:	589b      	ldr	r3, [r3, r2]
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	1c18      	adds	r0, r3, #0
 800b37e:	f7f5 fe0f 	bl	8000fa0 <__aeabi_fmul>
 800b382:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b384:	1c19      	adds	r1, r3, #0
 800b386:	1c20      	adds	r0, r4, #0
 800b388:	f7f5 fa9a 	bl	80008c0 <__aeabi_fadd>
 800b38c:	1c03      	adds	r3, r0, #0
 800b38e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	229c      	movs	r2, #156	@ 0x9c
 800b394:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2298      	movs	r2, #152	@ 0x98
 800b39a:	589a      	ldr	r2, [r3, r2]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	219c      	movs	r1, #156	@ 0x9c
 800b3a0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b3a2:	1c19      	adds	r1, r3, #0
 800b3a4:	1c10      	adds	r0, r2, #0
 800b3a6:	f7f5 ff39 	bl	800121c <__aeabi_fsub>
 800b3aa:	1c03      	adds	r3, r0, #0
 800b3ac:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	6978      	ldr	r0, [r7, #20]
 800b3b2:	f7f5 f8bd 	bl	8000530 <__aeabi_fcmplt>
 800b3b6:	1e03      	subs	r3, r0, #0
 800b3b8:	d004      	beq.n	800b3c4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2280      	movs	r2, #128	@ 0x80
 800b3be:	0612      	lsls	r2, r2, #24
 800b3c0:	4053      	eors	r3, r2
 800b3c2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b3c4:	4923      	ldr	r1, [pc, #140]	@ (800b454 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b3c6:	6978      	ldr	r0, [r7, #20]
 800b3c8:	f7f5 fdea 	bl	8000fa0 <__aeabi_fmul>
 800b3cc:	1c03      	adds	r3, r0, #0
 800b3ce:	1c18      	adds	r0, r3, #0
 800b3d0:	f017 fd5e 	bl	8022e90 <expf>
 800b3d4:	1c03      	adds	r3, r0, #0
 800b3d6:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b3d8:	491f      	ldr	r1, [pc, #124]	@ (800b458 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b3da:	6938      	ldr	r0, [r7, #16]
 800b3dc:	f7f5 fde0 	bl	8000fa0 <__aeabi_fmul>
 800b3e0:	1c03      	adds	r3, r0, #0
 800b3e2:	491e      	ldr	r1, [pc, #120]	@ (800b45c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b3e4:	1c18      	adds	r0, r3, #0
 800b3e6:	f7f5 fa6b 	bl	80008c0 <__aeabi_fadd>
 800b3ea:	1c03      	adds	r3, r0, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685c      	ldr	r4, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	68f9      	ldr	r1, [r7, #12]
 800b3f8:	1c18      	adds	r0, r3, #0
 800b3fa:	f7f5 fa61 	bl	80008c0 <__aeabi_fadd>
 800b3fe:	1c03      	adds	r3, r0, #0
 800b400:	1c19      	adds	r1, r3, #0
 800b402:	1c20      	adds	r0, r4, #0
 800b404:	f7f5 fbe6 	bl	8000bd4 <__aeabi_fdiv>
 800b408:	1c03      	adds	r3, r0, #0
 800b40a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	20fe      	movs	r0, #254	@ 0xfe
 800b410:	0580      	lsls	r0, r0, #22
 800b412:	f7f5 ff03 	bl	800121c <__aeabi_fsub>
 800b416:	1c03      	adds	r3, r0, #0
 800b418:	1c18      	adds	r0, r3, #0
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	22a0      	movs	r2, #160	@ 0xa0
 800b41e:	589b      	ldr	r3, [r3, r2]
 800b420:	1c19      	adds	r1, r3, #0
 800b422:	f7f5 fdbd 	bl	8000fa0 <__aeabi_fmul>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	1c1c      	adds	r4, r3, #0
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	68b8      	ldr	r0, [r7, #8]
 800b42e:	f7f5 fdb7 	bl	8000fa0 <__aeabi_fmul>
 800b432:	1c03      	adds	r3, r0, #0
 800b434:	1c19      	adds	r1, r3, #0
 800b436:	1c20      	adds	r0, r4, #0
 800b438:	f7f5 fa42 	bl	80008c0 <__aeabi_fadd>
 800b43c:	1c03      	adds	r3, r0, #0
 800b43e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	22a0      	movs	r2, #160	@ 0xa0
 800b444:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	22a0      	movs	r2, #160	@ 0xa0
 800b44a:	589b      	ldr	r3, [r3, r2]
}
 800b44c:	1c18      	adds	r0, r3, #0
 800b44e:	46bd      	mov	sp, r7
 800b450:	b007      	add	sp, #28
 800b452:	bd90      	pop	{r4, r7, pc}
 800b454:	be4ccccd 	.word	0xbe4ccccd
 800b458:	43f00000 	.word	0x43f00000
 800b45c:	41a00000 	.word	0x41a00000

0800b460 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	000a      	movs	r2, r1
 800b46a:	1cbb      	adds	r3, r7, #2
 800b46c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b46e:	230d      	movs	r3, #13
 800b470:	18fb      	adds	r3, r7, r3
 800b472:	22ff      	movs	r2, #255	@ 0xff
 800b474:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b476:	230e      	movs	r3, #14
 800b478:	18fb      	adds	r3, r7, r3
 800b47a:	2200      	movs	r2, #0
 800b47c:	801a      	strh	r2, [r3, #0]
 800b47e:	e037      	b.n	800b4f0 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b480:	230e      	movs	r3, #14
 800b482:	18fb      	adds	r3, r7, r3
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	18d3      	adds	r3, r2, r3
 800b48a:	7819      	ldrb	r1, [r3, #0]
 800b48c:	220d      	movs	r2, #13
 800b48e:	18bb      	adds	r3, r7, r2
 800b490:	18ba      	adds	r2, r7, r2
 800b492:	7812      	ldrb	r2, [r2, #0]
 800b494:	404a      	eors	r2, r1
 800b496:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b498:	230c      	movs	r3, #12
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	2208      	movs	r2, #8
 800b49e:	701a      	strb	r2, [r3, #0]
 800b4a0:	e01b      	b.n	800b4da <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b4a2:	210d      	movs	r1, #13
 800b4a4:	187b      	adds	r3, r7, r1
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	b25b      	sxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da09      	bge.n	800b4c2 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b4ae:	187b      	adds	r3, r7, r1
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	b25b      	sxtb	r3, r3
 800b4b6:	2231      	movs	r2, #49	@ 0x31
 800b4b8:	4053      	eors	r3, r2
 800b4ba:	b25a      	sxtb	r2, r3
 800b4bc:	187b      	adds	r3, r7, r1
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	e005      	b.n	800b4ce <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b4c2:	230d      	movs	r3, #13
 800b4c4:	18fa      	adds	r2, r7, r3
 800b4c6:	18fb      	adds	r3, r7, r3
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	18db      	adds	r3, r3, r3
 800b4cc:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b4ce:	220c      	movs	r2, #12
 800b4d0:	18bb      	adds	r3, r7, r2
 800b4d2:	18ba      	adds	r2, r7, r2
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	3a01      	subs	r2, #1
 800b4d8:	701a      	strb	r2, [r3, #0]
 800b4da:	230c      	movs	r3, #12
 800b4dc:	18fb      	adds	r3, r7, r3
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1de      	bne.n	800b4a2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b4e4:	220e      	movs	r2, #14
 800b4e6:	18bb      	adds	r3, r7, r2
 800b4e8:	18ba      	adds	r2, r7, r2
 800b4ea:	8812      	ldrh	r2, [r2, #0]
 800b4ec:	3201      	adds	r2, #1
 800b4ee:	801a      	strh	r2, [r3, #0]
 800b4f0:	230e      	movs	r3, #14
 800b4f2:	18fa      	adds	r2, r7, r3
 800b4f4:	1cbb      	adds	r3, r7, #2
 800b4f6:	8812      	ldrh	r2, [r2, #0]
 800b4f8:	881b      	ldrh	r3, [r3, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d3c0      	bcc.n	800b480 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b4fe:	230d      	movs	r3, #13
 800b500:	18fb      	adds	r3, r7, r3
 800b502:	781b      	ldrb	r3, [r3, #0]
}
 800b504:	0018      	movs	r0, r3
 800b506:	46bd      	mov	sp, r7
 800b508:	b004      	add	sp, #16
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	0008      	movs	r0, r1
 800b516:	0011      	movs	r1, r2
 800b518:	1cbb      	adds	r3, r7, #2
 800b51a:	1c02      	adds	r2, r0, #0
 800b51c:	801a      	strh	r2, [r3, #0]
 800b51e:	1c7b      	adds	r3, r7, #1
 800b520:	1c0a      	adds	r2, r1, #0
 800b522:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b524:	1cbb      	adds	r3, r7, #2
 800b526:	881a      	ldrh	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	0011      	movs	r1, r2
 800b52c:	0018      	movs	r0, r3
 800b52e:	f7ff ff97 	bl	800b460 <sensirion_i2c_generate_crc>
 800b532:	0003      	movs	r3, r0
 800b534:	001a      	movs	r2, r3
 800b536:	1c7b      	adds	r3, r7, #1
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d001      	beq.n	800b542 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e000      	b.n	800b544 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b542:	2300      	movs	r3, #0
}
 800b544:	0018      	movs	r0, r3
 800b546:	46bd      	mov	sp, r7
 800b548:	b002      	add	sp, #8
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	0008      	movs	r0, r1
 800b556:	0011      	movs	r1, r2
 800b558:	1cbb      	adds	r3, r7, #2
 800b55a:	1c02      	adds	r2, r0, #0
 800b55c:	801a      	strh	r2, [r3, #0]
 800b55e:	003b      	movs	r3, r7
 800b560:	1c0a      	adds	r2, r1, #0
 800b562:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b564:	003b      	movs	r3, r7
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	0a1b      	lsrs	r3, r3, #8
 800b56a:	b299      	uxth	r1, r3
 800b56c:	1cbb      	adds	r3, r7, #2
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	1cba      	adds	r2, r7, #2
 800b572:	1c58      	adds	r0, r3, #1
 800b574:	8010      	strh	r0, [r2, #0]
 800b576:	001a      	movs	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	189b      	adds	r3, r3, r2
 800b57c:	b2ca      	uxtb	r2, r1
 800b57e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b580:	1cbb      	adds	r3, r7, #2
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	1cba      	adds	r2, r7, #2
 800b586:	1c59      	adds	r1, r3, #1
 800b588:	8011      	strh	r1, [r2, #0]
 800b58a:	001a      	movs	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	189b      	adds	r3, r3, r2
 800b590:	003a      	movs	r2, r7
 800b592:	8812      	ldrh	r2, [r2, #0]
 800b594:	b2d2      	uxtb	r2, r2
 800b596:	701a      	strb	r2, [r3, #0]
    return offset;
 800b598:	1cbb      	adds	r3, r7, #2
 800b59a:	881b      	ldrh	r3, [r3, #0]
}
 800b59c:	0018      	movs	r0, r3
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	b002      	add	sp, #8
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	0008      	movs	r0, r1
 800b5ae:	0011      	movs	r1, r2
 800b5b0:	1cbb      	adds	r3, r7, #2
 800b5b2:	1c02      	adds	r2, r0, #0
 800b5b4:	801a      	strh	r2, [r3, #0]
 800b5b6:	003b      	movs	r3, r7
 800b5b8:	1c0a      	adds	r2, r1, #0
 800b5ba:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b5bc:	003b      	movs	r3, r7
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	0a1b      	lsrs	r3, r3, #8
 800b5c2:	b299      	uxth	r1, r3
 800b5c4:	1cbb      	adds	r3, r7, #2
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	1cba      	adds	r2, r7, #2
 800b5ca:	1c58      	adds	r0, r3, #1
 800b5cc:	8010      	strh	r0, [r2, #0]
 800b5ce:	001a      	movs	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	189b      	adds	r3, r3, r2
 800b5d4:	b2ca      	uxtb	r2, r1
 800b5d6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b5d8:	1cbb      	adds	r3, r7, #2
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	1cba      	adds	r2, r7, #2
 800b5de:	1c59      	adds	r1, r3, #1
 800b5e0:	8011      	strh	r1, [r2, #0]
 800b5e2:	001a      	movs	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	189b      	adds	r3, r3, r2
 800b5e8:	003a      	movs	r2, r7
 800b5ea:	8812      	ldrh	r2, [r2, #0]
 800b5ec:	b2d2      	uxtb	r2, r2
 800b5ee:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b5f0:	1cbb      	adds	r3, r7, #2
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	3b02      	subs	r3, #2
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b5fa:	1cbb      	adds	r3, r7, #2
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	18d4      	adds	r4, r2, r3
 800b602:	2102      	movs	r1, #2
 800b604:	f7ff ff2c 	bl	800b460 <sensirion_i2c_generate_crc>
 800b608:	0003      	movs	r3, r0
 800b60a:	7023      	strb	r3, [r4, #0]
    offset++;
 800b60c:	1cbb      	adds	r3, r7, #2
 800b60e:	881a      	ldrh	r2, [r3, #0]
 800b610:	1cbb      	adds	r3, r7, #2
 800b612:	3201      	adds	r2, #1
 800b614:	801a      	strh	r2, [r3, #0]

    return offset;
 800b616:	1cbb      	adds	r3, r7, #2
 800b618:	881b      	ldrh	r3, [r3, #0]
}
 800b61a:	0018      	movs	r0, r3
 800b61c:	46bd      	mov	sp, r7
 800b61e:	b003      	add	sp, #12
 800b620:	bd90      	pop	{r4, r7, pc}

0800b622 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	0008      	movs	r0, r1
 800b62c:	0011      	movs	r1, r2
 800b62e:	1cbb      	adds	r3, r7, #2
 800b630:	1c02      	adds	r2, r0, #0
 800b632:	801a      	strh	r2, [r3, #0]
 800b634:	003b      	movs	r3, r7
 800b636:	1c0a      	adds	r2, r1, #0
 800b638:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b63a:	003b      	movs	r3, r7
 800b63c:	881a      	ldrh	r2, [r3, #0]
 800b63e:	1cbb      	adds	r3, r7, #2
 800b640:	8819      	ldrh	r1, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	0018      	movs	r0, r3
 800b646:	f7ff ffad 	bl	800b5a4 <sensirion_i2c_add_uint16_t_to_buffer>
 800b64a:	0003      	movs	r3, r0
}
 800b64c:	0018      	movs	r0, r3
 800b64e:	46bd      	mov	sp, r7
 800b650:	b002      	add	sp, #8
 800b652:	bd80      	pop	{r7, pc}

0800b654 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6039      	str	r1, [r7, #0]
 800b65c:	0011      	movs	r1, r2
 800b65e:	1dfb      	adds	r3, r7, #7
 800b660:	1c02      	adds	r2, r0, #0
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	1d3b      	adds	r3, r7, #4
 800b666:	1c0a      	adds	r2, r1, #0
 800b668:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b66a:	1d3b      	adds	r3, r7, #4
 800b66c:	881a      	ldrh	r2, [r3, #0]
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	1dfb      	adds	r3, r7, #7
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	0018      	movs	r0, r3
 800b676:	f7fe fa01 	bl	8009a7c <sensirion_i2c_hal_write>
 800b67a:	0003      	movs	r3, r0
}
 800b67c:	0018      	movs	r0, r3
 800b67e:	46bd      	mov	sp, r7
 800b680:	b002      	add	sp, #8
 800b682:	bd80      	pop	{r7, pc}

0800b684 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b684:	b5b0      	push	{r4, r5, r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6039      	str	r1, [r7, #0]
 800b68c:	0011      	movs	r1, r2
 800b68e:	1dfb      	adds	r3, r7, #7
 800b690:	1c02      	adds	r2, r0, #0
 800b692:	701a      	strb	r2, [r3, #0]
 800b694:	1d3b      	adds	r3, r7, #4
 800b696:	1c0a      	adds	r2, r1, #0
 800b698:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b69a:	1d3b      	adds	r3, r7, #4
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	085b      	lsrs	r3, r3, #1
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	220a      	movs	r2, #10
 800b6a4:	18ba      	adds	r2, r7, r2
 800b6a6:	1c19      	adds	r1, r3, #0
 800b6a8:	1c0b      	adds	r3, r1, #0
 800b6aa:	18db      	adds	r3, r3, r3
 800b6ac:	185b      	adds	r3, r3, r1
 800b6ae:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b6b0:	1d3b      	adds	r3, r7, #4
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b6be:	2304      	movs	r3, #4
 800b6c0:	e06b      	b.n	800b79a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b6c2:	230a      	movs	r3, #10
 800b6c4:	18fb      	adds	r3, r7, r3
 800b6c6:	881a      	ldrh	r2, [r3, #0]
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	1dfb      	adds	r3, r7, #7
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f7fe f9b4 	bl	8009a3c <sensirion_i2c_hal_read>
 800b6d4:	0003      	movs	r3, r0
 800b6d6:	001a      	movs	r2, r3
 800b6d8:	2108      	movs	r1, #8
 800b6da:	187b      	adds	r3, r7, r1
 800b6dc:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b6de:	000a      	movs	r2, r1
 800b6e0:	18bb      	adds	r3, r7, r2
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	5e5b      	ldrsh	r3, [r3, r1]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b6ea:	18bb      	adds	r3, r7, r2
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	5e9b      	ldrsh	r3, [r3, r2]
 800b6f0:	e053      	b.n	800b79a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b6f2:	230e      	movs	r3, #14
 800b6f4:	18fb      	adds	r3, r7, r3
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	230c      	movs	r3, #12
 800b6fc:	18fb      	adds	r3, r7, r3
 800b6fe:	2200      	movs	r2, #0
 800b700:	801a      	strh	r2, [r3, #0]
 800b702:	e041      	b.n	800b788 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b704:	210e      	movs	r1, #14
 800b706:	187b      	adds	r3, r7, r1
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b70e:	187b      	adds	r3, r7, r1
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	3302      	adds	r3, #2
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	001a      	movs	r2, r3
 800b71c:	2102      	movs	r1, #2
 800b71e:	f7ff fef5 	bl	800b50c <sensirion_i2c_check_crc>
 800b722:	0003      	movs	r3, r0
 800b724:	001a      	movs	r2, r3
 800b726:	2108      	movs	r1, #8
 800b728:	187b      	adds	r3, r7, r1
 800b72a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b72c:	000a      	movs	r2, r1
 800b72e:	18bb      	adds	r3, r7, r2
 800b730:	2100      	movs	r1, #0
 800b732:	5e5b      	ldrsh	r3, [r3, r1]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b738:	18bb      	adds	r3, r7, r2
 800b73a:	2200      	movs	r2, #0
 800b73c:	5e9b      	ldrsh	r3, [r3, r2]
 800b73e:	e02c      	b.n	800b79a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b740:	240e      	movs	r4, #14
 800b742:	193b      	adds	r3, r7, r4
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	18d2      	adds	r2, r2, r3
 800b74a:	250c      	movs	r5, #12
 800b74c:	197b      	adds	r3, r7, r5
 800b74e:	881b      	ldrh	r3, [r3, #0]
 800b750:	1979      	adds	r1, r7, r5
 800b752:	1c58      	adds	r0, r3, #1
 800b754:	8008      	strh	r0, [r1, #0]
 800b756:	0019      	movs	r1, r3
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	185b      	adds	r3, r3, r1
 800b75c:	7812      	ldrb	r2, [r2, #0]
 800b75e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b760:	193b      	adds	r3, r7, r4
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	3301      	adds	r3, #1
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	18d2      	adds	r2, r2, r3
 800b76a:	197b      	adds	r3, r7, r5
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	1979      	adds	r1, r7, r5
 800b770:	1c58      	adds	r0, r3, #1
 800b772:	8008      	strh	r0, [r1, #0]
 800b774:	0019      	movs	r1, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	185b      	adds	r3, r3, r1
 800b77a:	7812      	ldrb	r2, [r2, #0]
 800b77c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b77e:	193b      	adds	r3, r7, r4
 800b780:	193a      	adds	r2, r7, r4
 800b782:	8812      	ldrh	r2, [r2, #0]
 800b784:	3203      	adds	r2, #3
 800b786:	801a      	strh	r2, [r3, #0]
 800b788:	230e      	movs	r3, #14
 800b78a:	18fa      	adds	r2, r7, r3
 800b78c:	230a      	movs	r3, #10
 800b78e:	18fb      	adds	r3, r7, r3
 800b790:	8812      	ldrh	r2, [r2, #0]
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	429a      	cmp	r2, r3
 800b796:	d3b5      	bcc.n	800b704 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	0018      	movs	r0, r3
 800b79c:	46bd      	mov	sp, r7
 800b79e:	b004      	add	sp, #16
 800b7a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b7a4 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b7a4:	b590      	push	{r4, r7, lr}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6039      	str	r1, [r7, #0]
 800b7ac:	0011      	movs	r1, r2
 800b7ae:	1dfb      	adds	r3, r7, #7
 800b7b0:	1c02      	adds	r2, r0, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	1dbb      	adds	r3, r7, #6
 800b7b6:	1c0a      	adds	r2, r1, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b7ba:	4b08      	ldr	r3, [pc, #32]	@ (800b7dc <ReadRegister+0x38>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d008      	beq.n	800b7d4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b7c2:	4b06      	ldr	r3, [pc, #24]	@ (800b7dc <ReadRegister+0x38>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	1dba      	adds	r2, r7, #6
 800b7c8:	7814      	ldrb	r4, [r2, #0]
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	1dfa      	adds	r2, r7, #7
 800b7ce:	7810      	ldrb	r0, [r2, #0]
 800b7d0:	0022      	movs	r2, r4
 800b7d2:	4798      	blx	r3
  }
}
 800b7d4:	46c0      	nop			@ (mov r8, r8)
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b003      	add	sp, #12
 800b7da:	bd90      	pop	{r4, r7, pc}
 800b7dc:	200010a0 	.word	0x200010a0

0800b7e0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b7e0:	b590      	push	{r4, r7, lr}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6039      	str	r1, [r7, #0]
 800b7e8:	0011      	movs	r1, r2
 800b7ea:	1dfb      	adds	r3, r7, #7
 800b7ec:	1c02      	adds	r2, r0, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	1dbb      	adds	r3, r7, #6
 800b7f2:	1c0a      	adds	r2, r1, #0
 800b7f4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b7f6:	4b08      	ldr	r3, [pc, #32]	@ (800b818 <WriteRegister+0x38>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b7fe:	4b06      	ldr	r3, [pc, #24]	@ (800b818 <WriteRegister+0x38>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	1dba      	adds	r2, r7, #6
 800b804:	7814      	ldrb	r4, [r2, #0]
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	1dfa      	adds	r2, r7, #7
 800b80a:	7810      	ldrb	r0, [r2, #0]
 800b80c:	0022      	movs	r2, r4
 800b80e:	4798      	blx	r3
  }
}
 800b810:	46c0      	nop			@ (mov r8, r8)
 800b812:	46bd      	mov	sp, r7
 800b814:	b003      	add	sp, #12
 800b816:	bd90      	pop	{r4, r7, pc}
 800b818:	200010a4 	.word	0x200010a4

0800b81c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b824:	f003 fb3a 	bl	800ee9c <HAL_GetTick>
 800b828:	0002      	movs	r2, r0
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	18d2      	adds	r2, r2, r3
 800b82e:	4b03      	ldr	r3, [pc, #12]	@ (800b83c <setSGP40TimeStamp+0x20>)
 800b830:	601a      	str	r2, [r3, #0]
}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	46bd      	mov	sp, r7
 800b836:	b002      	add	sp, #8
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	46c0      	nop			@ (mov r8, r8)
 800b83c:	200010b4 	.word	0x200010b4

0800b840 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b844:	4b02      	ldr	r3, [pc, #8]	@ (800b850 <ResetSGP40samplecounter+0x10>)
 800b846:	2200      	movs	r2, #0
 800b848:	701a      	strb	r2, [r3, #0]
}
 800b84a:	46c0      	nop			@ (mov r8, r8)
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200010b2 	.word	0x200010b2

0800b854 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b85e:	4b07      	ldr	r3, [pc, #28]	@ (800b87c <SGP_Init+0x28>)
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b864:	4b06      	ldr	r3, [pc, #24]	@ (800b880 <SGP_Init+0x2c>)
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b86a:	4b06      	ldr	r3, [pc, #24]	@ (800b884 <SGP_Init+0x30>)
 800b86c:	2100      	movs	r1, #0
 800b86e:	0018      	movs	r0, r3
 800b870:	f7fe ff70 	bl	800a754 <GasIndexAlgorithm_init>
}
 800b874:	46c0      	nop			@ (mov r8, r8)
 800b876:	46bd      	mov	sp, r7
 800b878:	b002      	add	sp, #8
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	200010a0 	.word	0x200010a0
 800b880:	200010a4 	.word	0x200010a4
 800b884:	200010bc 	.word	0x200010bc

0800b888 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b88c:	4b07      	ldr	r3, [pc, #28]	@ (800b8ac <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d004      	beq.n	800b89e <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b894:	4b06      	ldr	r3, [pc, #24]	@ (800b8b0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b896:	22fe      	movs	r2, #254	@ 0xfe
 800b898:	0592      	lsls	r2, r2, #22
 800b89a:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b89c:	e002      	b.n	800b8a4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b89e:	4b04      	ldr	r3, [pc, #16]	@ (800b8b0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b8a0:	4a04      	ldr	r2, [pc, #16]	@ (800b8b4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b8a2:	605a      	str	r2, [r3, #4]
}
 800b8a4:	46c0      	nop			@ (mov r8, r8)
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	46c0      	nop			@ (mov r8, r8)
 800b8ac:	20002009 	.word	0x20002009
 800b8b0:	200010bc 	.word	0x200010bc
 800b8b4:	44610000 	.word	0x44610000

0800b8b8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b8bc:	4b13      	ldr	r3, [pc, #76]	@ (800b90c <SGP_StartMeasurement+0x54>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00d      	beq.n	800b8e0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8c4:	4b12      	ldr	r3, [pc, #72]	@ (800b910 <SGP_StartMeasurement+0x58>)
 800b8c6:	2208      	movs	r2, #8
 800b8c8:	0019      	movs	r1, r3
 800b8ca:	2059      	movs	r0, #89	@ 0x59
 800b8cc:	f7ff ff88 	bl	800b7e0 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b8d0:	f003 fae4 	bl	800ee9c <HAL_GetTick>
 800b8d4:	0003      	movs	r3, r0
 800b8d6:	331e      	adds	r3, #30
 800b8d8:	001a      	movs	r2, r3
 800b8da:	4b0e      	ldr	r3, [pc, #56]	@ (800b914 <SGP_StartMeasurement+0x5c>)
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	e00c      	b.n	800b8fa <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b8e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b918 <SGP_StartMeasurement+0x60>)
 800b8e2:	2208      	movs	r2, #8
 800b8e4:	0019      	movs	r1, r3
 800b8e6:	2059      	movs	r0, #89	@ 0x59
 800b8e8:	f7ff ff7a 	bl	800b7e0 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b8ec:	f003 fad6 	bl	800ee9c <HAL_GetTick>
 800b8f0:	0003      	movs	r3, r0
 800b8f2:	33aa      	adds	r3, #170	@ 0xaa
 800b8f4:	001a      	movs	r2, r3
 800b8f6:	4b09      	ldr	r3, [pc, #36]	@ (800b91c <SGP_StartMeasurement+0x64>)
 800b8f8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b8fa:	4b09      	ldr	r3, [pc, #36]	@ (800b920 <SGP_StartMeasurement+0x68>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b900:	4b08      	ldr	r3, [pc, #32]	@ (800b924 <SGP_StartMeasurement+0x6c>)
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
}
 800b906:	46c0      	nop			@ (mov r8, r8)
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20001164 	.word	0x20001164
 800b910:	200000a0 	.word	0x200000a0
 800b914:	200000b4 	.word	0x200000b4
 800b918:	20000098 	.word	0x20000098
 800b91c:	200000ac 	.word	0x200000ac
 800b920:	200010b8 	.word	0x200010b8
 800b924:	200010b9 	.word	0x200010b9

0800b928 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b928:	b580      	push	{r7, lr}
 800b92a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b92c:	4b04      	ldr	r3, [pc, #16]	@ (800b940 <SGP_HeatedUp+0x18>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	0018      	movs	r0, r3
 800b932:	f002 fe1d 	bl	800e570 <TimestampIsReached>
 800b936:	0003      	movs	r3, r0
}
 800b938:	0018      	movs	r0, r3
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	46c0      	nop			@ (mov r8, r8)
 800b940:	200000ac 	.word	0x200000ac

0800b944 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b948:	4b04      	ldr	r3, [pc, #16]	@ (800b95c <SGP_MeasurementReady+0x18>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	0018      	movs	r0, r3
 800b94e:	f002 fe0f 	bl	800e570 <TimestampIsReached>
 800b952:	0003      	movs	r3, r0
}
 800b954:	0018      	movs	r0, r3
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	46c0      	nop			@ (mov r8, r8)
 800b95c:	200000b4 	.word	0x200000b4

0800b960 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b964:	4b04      	ldr	r3, [pc, #16]	@ (800b978 <SGP_MeasurementDone+0x18>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	0018      	movs	r0, r3
 800b96a:	f002 fe01 	bl	800e570 <TimestampIsReached>
 800b96e:	0003      	movs	r3, r0
}
 800b970:	0018      	movs	r0, r3
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	46c0      	nop			@ (mov r8, r8)
 800b978:	200000b0 	.word	0x200000b0

0800b97c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b980:	4b04      	ldr	r3, [pc, #16]	@ (800b994 <SGP_TurnHeaterOff+0x18>)
 800b982:	2202      	movs	r2, #2
 800b984:	0019      	movs	r1, r3
 800b986:	2059      	movs	r0, #89	@ 0x59
 800b988:	f7ff ff2a 	bl	800b7e0 <WriteRegister>
}
 800b98c:	46c0      	nop			@ (mov r8, r8)
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	46c0      	nop			@ (mov r8, r8)
 800b994:	20000090 	.word	0x20000090

0800b998 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b998:	b590      	push	{r4, r7, lr}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af02      	add	r7, sp, #8
 800b99e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b9a0:	f7ff ffc2 	bl	800b928 <SGP_HeatedUp>
 800b9a4:	1e03      	subs	r3, r0, #0
 800b9a6:	d032      	beq.n	800ba0e <SGP_GetMeasurementValues+0x76>
 800b9a8:	4b7e      	ldr	r3, [pc, #504]	@ (800bba4 <SGP_GetMeasurementValues+0x20c>)
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	4053      	eors	r3, r2
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d02b      	beq.n	800ba0e <SGP_GetMeasurementValues+0x76>
 800b9b6:	4b7c      	ldr	r3, [pc, #496]	@ (800bba8 <SGP_GetMeasurementValues+0x210>)
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	4053      	eors	r3, r2
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d024      	beq.n	800ba0e <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800b9c4:	4b77      	ldr	r3, [pc, #476]	@ (800bba4 <SGP_GetMeasurementValues+0x20c>)
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b9ca:	4b78      	ldr	r3, [pc, #480]	@ (800bbac <SGP_GetMeasurementValues+0x214>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00d      	beq.n	800b9ee <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b9d2:	4b77      	ldr	r3, [pc, #476]	@ (800bbb0 <SGP_GetMeasurementValues+0x218>)
 800b9d4:	2208      	movs	r2, #8
 800b9d6:	0019      	movs	r1, r3
 800b9d8:	2059      	movs	r0, #89	@ 0x59
 800b9da:	f7ff ff01 	bl	800b7e0 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b9de:	f003 fa5d 	bl	800ee9c <HAL_GetTick>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	331e      	adds	r3, #30
 800b9e6:	001a      	movs	r2, r3
 800b9e8:	4b72      	ldr	r3, [pc, #456]	@ (800bbb4 <SGP_GetMeasurementValues+0x21c>)
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	e00c      	b.n	800ba08 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b9ee:	4b72      	ldr	r3, [pc, #456]	@ (800bbb8 <SGP_GetMeasurementValues+0x220>)
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	0019      	movs	r1, r3
 800b9f4:	2059      	movs	r0, #89	@ 0x59
 800b9f6:	f7ff fef3 	bl	800b7e0 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b9fa:	f003 fa4f 	bl	800ee9c <HAL_GetTick>
 800b9fe:	0003      	movs	r3, r0
 800ba00:	331e      	adds	r3, #30
 800ba02:	001a      	movs	r2, r3
 800ba04:	4b6b      	ldr	r3, [pc, #428]	@ (800bbb4 <SGP_GetMeasurementValues+0x21c>)
 800ba06:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800ba08:	4b67      	ldr	r3, [pc, #412]	@ (800bba8 <SGP_GetMeasurementValues+0x210>)
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800ba0e:	4b65      	ldr	r3, [pc, #404]	@ (800bba4 <SGP_GetMeasurementValues+0x20c>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d100      	bne.n	800ba18 <SGP_GetMeasurementValues+0x80>
 800ba16:	e0a8      	b.n	800bb6a <SGP_GetMeasurementValues+0x1d2>
 800ba18:	f7ff ff94 	bl	800b944 <SGP_MeasurementReady>
 800ba1c:	1e03      	subs	r3, r0, #0
 800ba1e:	d100      	bne.n	800ba22 <SGP_GetMeasurementValues+0x8a>
 800ba20:	e0a3      	b.n	800bb6a <SGP_GetMeasurementValues+0x1d2>
 800ba22:	4b66      	ldr	r3, [pc, #408]	@ (800bbbc <SGP_GetMeasurementValues+0x224>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2201      	movs	r2, #1
 800ba28:	4053      	eors	r3, r2
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d100      	bne.n	800ba32 <SGP_GetMeasurementValues+0x9a>
 800ba30:	e09b      	b.n	800bb6a <SGP_GetMeasurementValues+0x1d2>
    MeasurementIsReady = true;
 800ba32:	4b62      	ldr	r3, [pc, #392]	@ (800bbbc <SGP_GetMeasurementValues+0x224>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800ba38:	4b61      	ldr	r3, [pc, #388]	@ (800bbc0 <SGP_GetMeasurementValues+0x228>)
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	0019      	movs	r1, r3
 800ba3e:	2059      	movs	r0, #89	@ 0x59
 800ba40:	f7ff feb0 	bl	800b7a4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800ba44:	4b5e      	ldr	r3, [pc, #376]	@ (800bbc0 <SGP_GetMeasurementValues+0x228>)
 800ba46:	2203      	movs	r2, #3
 800ba48:	2103      	movs	r1, #3
 800ba4a:	0018      	movs	r0, r3
 800ba4c:	f000 f916 	bl	800bc7c <CheckCRC>
 800ba50:	0003      	movs	r3, r0
 800ba52:	001a      	movs	r2, r3
 800ba54:	2301      	movs	r3, #1
 800ba56:	4053      	eors	r3, r2
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d02a      	beq.n	800bab4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800ba5e:	4a59      	ldr	r2, [pc, #356]	@ (800bbc4 <SGP_GetMeasurementValues+0x22c>)
 800ba60:	4b59      	ldr	r3, [pc, #356]	@ (800bbc8 <SGP_GetMeasurementValues+0x230>)
 800ba62:	0019      	movs	r1, r3
 800ba64:	2001      	movs	r0, #1
 800ba66:	f002 fdd9 	bl	800e61c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ba6a:	4a58      	ldr	r2, [pc, #352]	@ (800bbcc <SGP_GetMeasurementValues+0x234>)
 800ba6c:	4b58      	ldr	r3, [pc, #352]	@ (800bbd0 <SGP_GetMeasurementValues+0x238>)
 800ba6e:	0019      	movs	r1, r3
 800ba70:	2002      	movs	r0, #2
 800ba72:	f002 fdd3 	bl	800e61c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ba76:	230f      	movs	r3, #15
 800ba78:	18fb      	adds	r3, r7, r3
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	e012      	b.n	800baa6 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ba80:	240f      	movs	r4, #15
 800ba82:	193b      	adds	r3, r7, r4
 800ba84:	7818      	ldrb	r0, [r3, #0]
 800ba86:	193b      	adds	r3, r7, r4
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	4a4d      	ldr	r2, [pc, #308]	@ (800bbc0 <SGP_GetMeasurementValues+0x228>)
 800ba8c:	5cd3      	ldrb	r3, [r2, r3]
 800ba8e:	4a51      	ldr	r2, [pc, #324]	@ (800bbd4 <SGP_GetMeasurementValues+0x23c>)
 800ba90:	4951      	ldr	r1, [pc, #324]	@ (800bbd8 <SGP_GetMeasurementValues+0x240>)
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	0003      	movs	r3, r0
 800ba96:	2003      	movs	r0, #3
 800ba98:	f002 fdc0 	bl	800e61c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ba9c:	193b      	adds	r3, r7, r4
 800ba9e:	781a      	ldrb	r2, [r3, #0]
 800baa0:	193b      	adds	r3, r7, r4
 800baa2:	3201      	adds	r2, #1
 800baa4:	701a      	strb	r2, [r3, #0]
 800baa6:	230f      	movs	r3, #15
 800baa8:	18fb      	adds	r3, r7, r3
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b02      	cmp	r3, #2
 800baae:	d9e7      	bls.n	800ba80 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800bab0:	2300      	movs	r3, #0
 800bab2:	e072      	b.n	800bb9a <SGP_GetMeasurementValues+0x202>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800bab4:	f003 f9f2 	bl	800ee9c <HAL_GetTick>
 800bab8:	0003      	movs	r3, r0
 800baba:	22fa      	movs	r2, #250	@ 0xfa
 800babc:	0092      	lsls	r2, r2, #2
 800babe:	189a      	adds	r2, r3, r2
 800bac0:	4b46      	ldr	r3, [pc, #280]	@ (800bbdc <SGP_GetMeasurementValues+0x244>)
 800bac2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800bac4:	f7ff ff5a 	bl	800b97c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800bac8:	4b45      	ldr	r3, [pc, #276]	@ (800bbe0 <SGP_GetMeasurementValues+0x248>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	b2da      	uxtb	r2, r3
 800bad0:	4b43      	ldr	r3, [pc, #268]	@ (800bbe0 <SGP_GetMeasurementValues+0x248>)
 800bad2:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800bad4:	4b42      	ldr	r3, [pc, #264]	@ (800bbe0 <SGP_GetMeasurementValues+0x248>)
 800bad6:	781a      	ldrb	r2, [r3, #0]
 800bad8:	4b42      	ldr	r3, [pc, #264]	@ (800bbe4 <SGP_GetMeasurementValues+0x24c>)
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	429a      	cmp	r2, r3
 800bade:	d344      	bcc.n	800bb6a <SGP_GetMeasurementValues+0x1d2>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800bae0:	4b37      	ldr	r3, [pc, #220]	@ (800bbc0 <SGP_GetMeasurementValues+0x228>)
 800bae2:	785b      	ldrb	r3, [r3, #1]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	b21a      	sxth	r2, r3
 800bae8:	4b35      	ldr	r3, [pc, #212]	@ (800bbc0 <SGP_GetMeasurementValues+0x228>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	b21b      	sxth	r3, r3
 800baee:	4313      	orrs	r3, r2
 800baf0:	b21a      	sxth	r2, r3
 800baf2:	240c      	movs	r4, #12
 800baf4:	193b      	adds	r3, r7, r4
 800baf6:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800bafc:	193b      	adds	r3, r7, r4
 800bafe:	8819      	ldrh	r1, [r3, #0]
 800bb00:	2308      	movs	r3, #8
 800bb02:	18fa      	adds	r2, r7, r3
 800bb04:	4b38      	ldr	r3, [pc, #224]	@ (800bbe8 <SGP_GetMeasurementValues+0x250>)
 800bb06:	0018      	movs	r0, r3
 800bb08:	f7fe fe88 	bl	800a81c <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800bb0c:	4b37      	ldr	r3, [pc, #220]	@ (800bbec <SGP_GetMeasurementValues+0x254>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	3301      	adds	r3, #1
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	4b35      	ldr	r3, [pc, #212]	@ (800bbec <SGP_GetMeasurementValues+0x254>)
 800bb16:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800bb18:	4b34      	ldr	r3, [pc, #208]	@ (800bbec <SGP_GetMeasurementValues+0x254>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d10d      	bne.n	800bb3c <SGP_GetMeasurementValues+0x1a4>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800bb20:	193b      	adds	r3, r7, r4
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	4a32      	ldr	r2, [pc, #200]	@ (800bbf0 <SGP_GetMeasurementValues+0x258>)
 800bb26:	492c      	ldr	r1, [pc, #176]	@ (800bbd8 <SGP_GetMeasurementValues+0x240>)
 800bb28:	2003      	movs	r0, #3
 800bb2a:	f002 fd77 	bl	800e61c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	4a30      	ldr	r2, [pc, #192]	@ (800bbf4 <SGP_GetMeasurementValues+0x25c>)
 800bb32:	4929      	ldr	r1, [pc, #164]	@ (800bbd8 <SGP_GetMeasurementValues+0x240>)
 800bb34:	2003      	movs	r0, #3
 800bb36:	f002 fd71 	bl	800e61c <CreateLine>
 800bb3a:	e006      	b.n	800bb4a <SGP_GetMeasurementValues+0x1b2>
      }
      else {
        if (sgp40samplecounter == 11) {
 800bb3c:	4b2b      	ldr	r3, [pc, #172]	@ (800bbec <SGP_GetMeasurementValues+0x254>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b0b      	cmp	r3, #11
 800bb42:	d102      	bne.n	800bb4a <SGP_GetMeasurementValues+0x1b2>
          sgp40samplecounter = 0;
 800bb44:	4b29      	ldr	r3, [pc, #164]	@ (800bbec <SGP_GetMeasurementValues+0x254>)
 800bb46:	2200      	movs	r2, #0
 800bb48:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	0018      	movs	r0, r3
 800bb50:	f001 fd36 	bl	800d5c0 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800bb54:	4b22      	ldr	r3, [pc, #136]	@ (800bbe0 <SGP_GetMeasurementValues+0x248>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bb5a:	4b14      	ldr	r3, [pc, #80]	@ (800bbac <SGP_GetMeasurementValues+0x214>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb60:	4b11      	ldr	r3, [pc, #68]	@ (800bba8 <SGP_GetMeasurementValues+0x210>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]
      return true;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e017      	b.n	800bb9a <SGP_GetMeasurementValues+0x202>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bb6a:	f7ff fef9 	bl	800b960 <SGP_MeasurementDone>
 800bb6e:	1e03      	subs	r3, r0, #0
 800bb70:	d012      	beq.n	800bb98 <SGP_GetMeasurementValues+0x200>
 800bb72:	4b0c      	ldr	r3, [pc, #48]	@ (800bba4 <SGP_GetMeasurementValues+0x20c>)
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00e      	beq.n	800bb98 <SGP_GetMeasurementValues+0x200>
 800bb7a:	4b10      	ldr	r3, [pc, #64]	@ (800bbbc <SGP_GetMeasurementValues+0x224>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <SGP_GetMeasurementValues+0x200>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bb82:	4a1d      	ldr	r2, [pc, #116]	@ (800bbf8 <SGP_GetMeasurementValues+0x260>)
 800bb84:	4b14      	ldr	r3, [pc, #80]	@ (800bbd8 <SGP_GetMeasurementValues+0x240>)
 800bb86:	0019      	movs	r1, r3
 800bb88:	2003      	movs	r0, #3
 800bb8a:	f002 fd47 	bl	800e61c <CreateLine>
    SGP_StartMeasurement();
 800bb8e:	f7ff fe93 	bl	800b8b8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bb92:	4b05      	ldr	r3, [pc, #20]	@ (800bba8 <SGP_GetMeasurementValues+0x210>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	b005      	add	sp, #20
 800bba0:	bd90      	pop	{r4, r7, pc}
 800bba2:	46c0      	nop			@ (mov r8, r8)
 800bba4:	200010b8 	.word	0x200010b8
 800bba8:	20001165 	.word	0x20001165
 800bbac:	20001164 	.word	0x20001164
 800bbb0:	200000a0 	.word	0x200000a0
 800bbb4:	200000b4 	.word	0x200000b4
 800bbb8:	20000098 	.word	0x20000098
 800bbbc:	200010b9 	.word	0x200010b9
 800bbc0:	200010a8 	.word	0x200010a8
 800bbc4:	08024e08 	.word	0x08024e08
 800bbc8:	08024e30 	.word	0x08024e30
 800bbcc:	08024e34 	.word	0x08024e34
 800bbd0:	08024e54 	.word	0x08024e54
 800bbd4:	08024e58 	.word	0x08024e58
 800bbd8:	08024e78 	.word	0x08024e78
 800bbdc:	200000b0 	.word	0x200000b0
 800bbe0:	200010b1 	.word	0x200010b1
 800bbe4:	200000aa 	.word	0x200000aa
 800bbe8:	200010bc 	.word	0x200010bc
 800bbec:	200010b2 	.word	0x200010b2
 800bbf0:	08024e7c 	.word	0x08024e7c
 800bbf4:	08024e98 	.word	0x08024e98
 800bbf8:	08024eb4 	.word	0x08024eb4

0800bbfc <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc02:	4b1a      	ldr	r3, [pc, #104]	@ (800bc6c <SGP_DeviceConnected+0x70>)
 800bc04:	2202      	movs	r2, #2
 800bc06:	0019      	movs	r1, r3
 800bc08:	2059      	movs	r0, #89	@ 0x59
 800bc0a:	f7ff fde9 	bl	800b7e0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc0e:	2001      	movs	r0, #1
 800bc10:	f003 f94e 	bl	800eeb0 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc14:	4b16      	ldr	r3, [pc, #88]	@ (800bc70 <SGP_DeviceConnected+0x74>)
 800bc16:	2209      	movs	r2, #9
 800bc18:	0019      	movs	r1, r3
 800bc1a:	2059      	movs	r0, #89	@ 0x59
 800bc1c:	f7ff fdc2 	bl	800b7a4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc20:	1dfb      	adds	r3, r7, #7
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	e011      	b.n	800bc4c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc28:	1dfb      	adds	r3, r7, #7
 800bc2a:	7818      	ldrb	r0, [r3, #0]
 800bc2c:	1dfb      	adds	r3, r7, #7
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	4a0f      	ldr	r2, [pc, #60]	@ (800bc70 <SGP_DeviceConnected+0x74>)
 800bc32:	5cd3      	ldrb	r3, [r2, r3]
 800bc34:	4a0f      	ldr	r2, [pc, #60]	@ (800bc74 <SGP_DeviceConnected+0x78>)
 800bc36:	4910      	ldr	r1, [pc, #64]	@ (800bc78 <SGP_DeviceConnected+0x7c>)
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	0003      	movs	r3, r0
 800bc3c:	2002      	movs	r0, #2
 800bc3e:	f002 fced 	bl	800e61c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc42:	1dfb      	adds	r3, r7, #7
 800bc44:	781a      	ldrb	r2, [r3, #0]
 800bc46:	1dfb      	adds	r3, r7, #7
 800bc48:	3201      	adds	r2, #1
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	1dfb      	adds	r3, r7, #7
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b08      	cmp	r3, #8
 800bc52:	d9e9      	bls.n	800bc28 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc54:	4b06      	ldr	r3, [pc, #24]	@ (800bc70 <SGP_DeviceConnected+0x74>)
 800bc56:	2203      	movs	r2, #3
 800bc58:	2109      	movs	r1, #9
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	f000 f80e 	bl	800bc7c <CheckCRC>
 800bc60:	0003      	movs	r3, r0
}
 800bc62:	0018      	movs	r0, r3
 800bc64:	46bd      	mov	sp, r7
 800bc66:	b002      	add	sp, #8
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	46c0      	nop			@ (mov r8, r8)
 800bc6c:	20000094 	.word	0x20000094
 800bc70:	200010a8 	.word	0x200010a8
 800bc74:	08024ed4 	.word	0x08024ed4
 800bc78:	08024e54 	.word	0x08024e54

0800bc7c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7e:	b08f      	sub	sp, #60	@ 0x3c
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc84:	0008      	movs	r0, r1
 800bc86:	0011      	movs	r1, r2
 800bc88:	2323      	movs	r3, #35	@ 0x23
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	1c02      	adds	r2, r0, #0
 800bc8e:	701a      	strb	r2, [r3, #0]
 800bc90:	2322      	movs	r3, #34	@ 0x22
 800bc92:	18fb      	adds	r3, r7, r3
 800bc94:	1c0a      	adds	r2, r1, #0
 800bc96:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bc98:	2317      	movs	r3, #23
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	189b      	adds	r3, r3, r2
 800bc9e:	19db      	adds	r3, r3, r7
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]
 800bca4:	e09f      	b.n	800bde6 <CheckCRC+0x16a>
 800bca6:	466b      	mov	r3, sp
 800bca8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bcaa:	2322      	movs	r3, #34	@ 0x22
 800bcac:	18fb      	adds	r3, r7, r3
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	001a      	movs	r2, r3
 800bcb2:	3a01      	subs	r2, #1
 800bcb4:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcb6:	60bb      	str	r3, [r7, #8]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	60fa      	str	r2, [r7, #12]
 800bcbc:	68b8      	ldr	r0, [r7, #8]
 800bcbe:	68f9      	ldr	r1, [r7, #12]
 800bcc0:	0002      	movs	r2, r0
 800bcc2:	0f52      	lsrs	r2, r2, #29
 800bcc4:	000c      	movs	r4, r1
 800bcc6:	00e4      	lsls	r4, r4, #3
 800bcc8:	61fc      	str	r4, [r7, #28]
 800bcca:	69fc      	ldr	r4, [r7, #28]
 800bccc:	4314      	orrs	r4, r2
 800bcce:	61fc      	str	r4, [r7, #28]
 800bcd0:	0002      	movs	r2, r0
 800bcd2:	00d2      	lsls	r2, r2, #3
 800bcd4:	61ba      	str	r2, [r7, #24]
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	6838      	ldr	r0, [r7, #0]
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	0002      	movs	r2, r0
 800bce2:	0f52      	lsrs	r2, r2, #29
 800bce4:	000c      	movs	r4, r1
 800bce6:	00e4      	lsls	r4, r4, #3
 800bce8:	617c      	str	r4, [r7, #20]
 800bcea:	697c      	ldr	r4, [r7, #20]
 800bcec:	4314      	orrs	r4, r2
 800bcee:	617c      	str	r4, [r7, #20]
 800bcf0:	0002      	movs	r2, r0
 800bcf2:	00d2      	lsls	r2, r2, #3
 800bcf4:	613a      	str	r2, [r7, #16]
 800bcf6:	3307      	adds	r3, #7
 800bcf8:	08db      	lsrs	r3, r3, #3
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	466a      	mov	r2, sp
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	469d      	mov	sp, r3
 800bd02:	466b      	mov	r3, sp
 800bd04:	3300      	adds	r3, #0
 800bd06:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd08:	2316      	movs	r3, #22
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	189b      	adds	r3, r3, r2
 800bd0e:	19db      	adds	r3, r3, r7
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
 800bd14:	e01e      	b.n	800bd54 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd16:	2317      	movs	r3, #23
 800bd18:	2220      	movs	r2, #32
 800bd1a:	189b      	adds	r3, r3, r2
 800bd1c:	19db      	adds	r3, r3, r7
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	2116      	movs	r1, #22
 800bd22:	2320      	movs	r3, #32
 800bd24:	18cb      	adds	r3, r1, r3
 800bd26:	19db      	adds	r3, r3, r7
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	18d3      	adds	r3, r2, r3
 800bd2c:	001a      	movs	r2, r3
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd30:	189a      	adds	r2, r3, r2
 800bd32:	0008      	movs	r0, r1
 800bd34:	2320      	movs	r3, #32
 800bd36:	18cb      	adds	r3, r1, r3
 800bd38:	19db      	adds	r3, r3, r7
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	7811      	ldrb	r1, [r2, #0]
 800bd3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd40:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd42:	2320      	movs	r3, #32
 800bd44:	18c3      	adds	r3, r0, r3
 800bd46:	19db      	adds	r3, r3, r7
 800bd48:	781a      	ldrb	r2, [r3, #0]
 800bd4a:	2320      	movs	r3, #32
 800bd4c:	18c3      	adds	r3, r0, r3
 800bd4e:	19db      	adds	r3, r3, r7
 800bd50:	3201      	adds	r2, #1
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	2316      	movs	r3, #22
 800bd56:	2220      	movs	r2, #32
 800bd58:	189b      	adds	r3, r3, r2
 800bd5a:	19da      	adds	r2, r3, r7
 800bd5c:	2322      	movs	r3, #34	@ 0x22
 800bd5e:	18fb      	adds	r3, r7, r3
 800bd60:	7812      	ldrb	r2, [r2, #0]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d3d6      	bcc.n	800bd16 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bd68:	2417      	movs	r4, #23
 800bd6a:	2320      	movs	r3, #32
 800bd6c:	18e3      	adds	r3, r4, r3
 800bd6e:	19db      	adds	r3, r3, r7
 800bd70:	781a      	ldrb	r2, [r3, #0]
 800bd72:	2322      	movs	r3, #34	@ 0x22
 800bd74:	18fb      	adds	r3, r7, r3
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	18d3      	adds	r3, r2, r3
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd7e:	18d2      	adds	r2, r2, r3
 800bd80:	250b      	movs	r5, #11
 800bd82:	2320      	movs	r3, #32
 800bd84:	18eb      	adds	r3, r5, r3
 800bd86:	19db      	adds	r3, r3, r7
 800bd88:	7812      	ldrb	r2, [r2, #0]
 800bd8a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bd8c:	2322      	movs	r3, #34	@ 0x22
 800bd8e:	18fb      	adds	r3, r7, r3
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd98:	0011      	movs	r1, r2
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f000 f838 	bl	800be10 <CalculateCRC>
 800bda0:	0003      	movs	r3, r0
 800bda2:	001a      	movs	r2, r3
 800bda4:	2320      	movs	r3, #32
 800bda6:	18eb      	adds	r3, r5, r3
 800bda8:	19db      	adds	r3, r3, r7
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d00c      	beq.n	800bdca <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bdb0:	2320      	movs	r3, #32
 800bdb2:	18e3      	adds	r3, r4, r3
 800bdb4:	19db      	adds	r3, r3, r7
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	4a13      	ldr	r2, [pc, #76]	@ (800be08 <CheckCRC+0x18c>)
 800bdbc:	4913      	ldr	r1, [pc, #76]	@ (800be0c <CheckCRC+0x190>)
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	f002 fc2c 	bl	800e61c <CreateLine>
      return false;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	46b5      	mov	sp, r6
 800bdc8:	e019      	b.n	800bdfe <CheckCRC+0x182>
 800bdca:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bdcc:	2217      	movs	r2, #23
 800bdce:	2320      	movs	r3, #32
 800bdd0:	18d3      	adds	r3, r2, r3
 800bdd2:	19db      	adds	r3, r3, r7
 800bdd4:	2120      	movs	r1, #32
 800bdd6:	1852      	adds	r2, r2, r1
 800bdd8:	19d1      	adds	r1, r2, r7
 800bdda:	2222      	movs	r2, #34	@ 0x22
 800bddc:	18ba      	adds	r2, r7, r2
 800bdde:	7809      	ldrb	r1, [r1, #0]
 800bde0:	7812      	ldrb	r2, [r2, #0]
 800bde2:	188a      	adds	r2, r1, r2
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	2317      	movs	r3, #23
 800bde8:	2220      	movs	r2, #32
 800bdea:	189b      	adds	r3, r3, r2
 800bdec:	19da      	adds	r2, r3, r7
 800bdee:	2323      	movs	r3, #35	@ 0x23
 800bdf0:	18fb      	adds	r3, r7, r3
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d200      	bcs.n	800bdfc <CheckCRC+0x180>
 800bdfa:	e754      	b.n	800bca6 <CheckCRC+0x2a>
    }
  }
  return true;
 800bdfc:	2301      	movs	r3, #1
}
 800bdfe:	0018      	movs	r0, r3
 800be00:	46bd      	mov	sp, r7
 800be02:	b00f      	add	sp, #60	@ 0x3c
 800be04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be06:	46c0      	nop			@ (mov r8, r8)
 800be08:	08024ef4 	.word	0x08024ef4
 800be0c:	08024e30 	.word	0x08024e30

0800be10 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	000a      	movs	r2, r1
 800be1a:	1cfb      	adds	r3, r7, #3
 800be1c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be1e:	230f      	movs	r3, #15
 800be20:	18fb      	adds	r3, r7, r3
 800be22:	22ff      	movs	r2, #255	@ 0xff
 800be24:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be26:	230e      	movs	r3, #14
 800be28:	18fb      	adds	r3, r7, r3
 800be2a:	2200      	movs	r2, #0
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e037      	b.n	800bea0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be30:	230e      	movs	r3, #14
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	18d3      	adds	r3, r2, r3
 800be3a:	7819      	ldrb	r1, [r3, #0]
 800be3c:	220f      	movs	r2, #15
 800be3e:	18bb      	adds	r3, r7, r2
 800be40:	18ba      	adds	r2, r7, r2
 800be42:	7812      	ldrb	r2, [r2, #0]
 800be44:	404a      	eors	r2, r1
 800be46:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be48:	230d      	movs	r3, #13
 800be4a:	18fb      	adds	r3, r7, r3
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]
 800be50:	e01b      	b.n	800be8a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be52:	210f      	movs	r1, #15
 800be54:	187b      	adds	r3, r7, r1
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	da09      	bge.n	800be72 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be5e:	187b      	adds	r3, r7, r1
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	b25b      	sxtb	r3, r3
 800be66:	2231      	movs	r2, #49	@ 0x31
 800be68:	4053      	eors	r3, r2
 800be6a:	b25a      	sxtb	r2, r3
 800be6c:	187b      	adds	r3, r7, r1
 800be6e:	701a      	strb	r2, [r3, #0]
 800be70:	e005      	b.n	800be7e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800be72:	230f      	movs	r3, #15
 800be74:	18fa      	adds	r2, r7, r3
 800be76:	18fb      	adds	r3, r7, r3
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	18db      	adds	r3, r3, r3
 800be7c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800be7e:	210d      	movs	r1, #13
 800be80:	187b      	adds	r3, r7, r1
 800be82:	781a      	ldrb	r2, [r3, #0]
 800be84:	187b      	adds	r3, r7, r1
 800be86:	3201      	adds	r2, #1
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	230d      	movs	r3, #13
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b07      	cmp	r3, #7
 800be92:	d9de      	bls.n	800be52 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800be94:	210e      	movs	r1, #14
 800be96:	187b      	adds	r3, r7, r1
 800be98:	781a      	ldrb	r2, [r3, #0]
 800be9a:	187b      	adds	r3, r7, r1
 800be9c:	3201      	adds	r2, #1
 800be9e:	701a      	strb	r2, [r3, #0]
 800bea0:	230e      	movs	r3, #14
 800bea2:	18fa      	adds	r2, r7, r3
 800bea4:	1cfb      	adds	r3, r7, #3
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d3c0      	bcc.n	800be30 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800beae:	230f      	movs	r3, #15
 800beb0:	18fb      	adds	r3, r7, r3
 800beb2:	781b      	ldrb	r3, [r3, #0]
}
 800beb4:	0018      	movs	r0, r3
 800beb6:	46bd      	mov	sp, r7
 800beb8:	b004      	add	sp, #16
 800beba:	bd80      	pop	{r7, pc}

0800bebc <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4936      	ldr	r1, [pc, #216]	@ (800bfa4 <SGP_SetHT+0xe8>)
 800becc:	1c18      	adds	r0, r3, #0
 800bece:	f7f4 fcf7 	bl	80008c0 <__aeabi_fadd>
 800bed2:	1c03      	adds	r3, r0, #0
 800bed4:	4934      	ldr	r1, [pc, #208]	@ (800bfa8 <SGP_SetHT+0xec>)
 800bed6:	1c18      	adds	r0, r3, #0
 800bed8:	f7f4 fe7c 	bl	8000bd4 <__aeabi_fdiv>
 800bedc:	1c03      	adds	r3, r0, #0
 800bede:	4933      	ldr	r1, [pc, #204]	@ (800bfac <SGP_SetHT+0xf0>)
 800bee0:	1c18      	adds	r0, r3, #0
 800bee2:	f7f5 f85d 	bl	8000fa0 <__aeabi_fmul>
 800bee6:	1c03      	adds	r3, r0, #0
 800bee8:	1c18      	adds	r0, r3, #0
 800beea:	f7f4 fb97 	bl	800061c <__aeabi_f2uiz>
 800beee:	0003      	movs	r3, r0
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	4b2f      	ldr	r3, [pc, #188]	@ (800bfb0 <SGP_SetHT+0xf4>)
 800bef4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	492e      	ldr	r1, [pc, #184]	@ (800bfb4 <SGP_SetHT+0xf8>)
 800befc:	1c18      	adds	r0, r3, #0
 800befe:	f7f4 fe69 	bl	8000bd4 <__aeabi_fdiv>
 800bf02:	1c03      	adds	r3, r0, #0
 800bf04:	4929      	ldr	r1, [pc, #164]	@ (800bfac <SGP_SetHT+0xf0>)
 800bf06:	1c18      	adds	r0, r3, #0
 800bf08:	f7f5 f84a 	bl	8000fa0 <__aeabi_fmul>
 800bf0c:	1c03      	adds	r3, r0, #0
 800bf0e:	1c18      	adds	r0, r3, #0
 800bf10:	f7f4 fb84 	bl	800061c <__aeabi_f2uiz>
 800bf14:	0003      	movs	r3, r0
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	4b27      	ldr	r3, [pc, #156]	@ (800bfb8 <SGP_SetHT+0xfc>)
 800bf1a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf1c:	4b26      	ldr	r3, [pc, #152]	@ (800bfb8 <SGP_SetHT+0xfc>)
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	0a1b      	lsrs	r3, r3, #8
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	4b25      	ldr	r3, [pc, #148]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf28:	709a      	strb	r2, [r3, #2]
 800bf2a:	4b24      	ldr	r3, [pc, #144]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf2c:	789a      	ldrb	r2, [r3, #2]
 800bf2e:	210c      	movs	r1, #12
 800bf30:	187b      	adds	r3, r7, r1
 800bf32:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf34:	4b20      	ldr	r3, [pc, #128]	@ (800bfb8 <SGP_SetHT+0xfc>)
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	4b20      	ldr	r3, [pc, #128]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf3c:	70da      	strb	r2, [r3, #3]
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf40:	78da      	ldrb	r2, [r3, #3]
 800bf42:	187b      	adds	r3, r7, r1
 800bf44:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf46:	187b      	adds	r3, r7, r1
 800bf48:	2102      	movs	r1, #2
 800bf4a:	0018      	movs	r0, r3
 800bf4c:	f7ff ff60 	bl	800be10 <CalculateCRC>
 800bf50:	0003      	movs	r3, r0
 800bf52:	001a      	movs	r2, r3
 800bf54:	4b19      	ldr	r3, [pc, #100]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf56:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf58:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <SGP_SetHT+0xf4>)
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	0a1b      	lsrs	r3, r3, #8
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	4b16      	ldr	r3, [pc, #88]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf64:	715a      	strb	r2, [r3, #5]
 800bf66:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf68:	795a      	ldrb	r2, [r3, #5]
 800bf6a:	2108      	movs	r1, #8
 800bf6c:	187b      	adds	r3, r7, r1
 800bf6e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bf70:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb0 <SGP_SetHT+0xf4>)
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	4b11      	ldr	r3, [pc, #68]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf78:	719a      	strb	r2, [r3, #6]
 800bf7a:	4b10      	ldr	r3, [pc, #64]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf7c:	799a      	ldrb	r2, [r3, #6]
 800bf7e:	187b      	adds	r3, r7, r1
 800bf80:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bf82:	187b      	adds	r3, r7, r1
 800bf84:	2102      	movs	r1, #2
 800bf86:	0018      	movs	r0, r3
 800bf88:	f7ff ff42 	bl	800be10 <CalculateCRC>
 800bf8c:	0003      	movs	r3, r0
 800bf8e:	001a      	movs	r2, r3
 800bf90:	4b0a      	ldr	r3, [pc, #40]	@ (800bfbc <SGP_SetHT+0x100>)
 800bf92:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bf94:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc0 <SGP_SetHT+0x104>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	701a      	strb	r2, [r3, #0]
}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	b004      	add	sp, #16
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	46c0      	nop			@ (mov r8, r8)
 800bfa4:	42340000 	.word	0x42340000
 800bfa8:	432f0000 	.word	0x432f0000
 800bfac:	477fff00 	.word	0x477fff00
 800bfb0:	20001162 	.word	0x20001162
 800bfb4:	42c80000 	.word	0x42c80000
 800bfb8:	20001160 	.word	0x20001160
 800bfbc:	200000a0 	.word	0x200000a0
 800bfc0:	20001164 	.word	0x20001164

0800bfc4 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bfc8:	4a09      	ldr	r2, [pc, #36]	@ (800bff0 <SGP_SoftReset+0x2c>)
 800bfca:	4b0a      	ldr	r3, [pc, #40]	@ (800bff4 <SGP_SoftReset+0x30>)
 800bfcc:	0019      	movs	r1, r3
 800bfce:	2003      	movs	r0, #3
 800bfd0:	f002 fb24 	bl	800e61c <CreateLine>
  SGP_TurnHeaterOff();
 800bfd4:	f7ff fcd2 	bl	800b97c <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bfd8:	200a      	movs	r0, #10
 800bfda:	f002 ff69 	bl	800eeb0 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bfde:	4b06      	ldr	r3, [pc, #24]	@ (800bff8 <SGP_SoftReset+0x34>)
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	0019      	movs	r1, r3
 800bfe4:	2059      	movs	r0, #89	@ 0x59
 800bfe6:	f7ff fbfb 	bl	800b7e0 <WriteRegister>
}
 800bfea:	46c0      	nop			@ (mov r8, r8)
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08024f9c 	.word	0x08024f9c
 800bff4:	08024e78 	.word	0x08024e78
 800bff8:	200000a8 	.word	0x200000a8

0800bffc <ResetVOCresult>:

void ResetVOCresult(void) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c000:	4b02      	ldr	r3, [pc, #8]	@ (800c00c <ResetVOCresult+0x10>)
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
}
 800c006:	46c0      	nop			@ (mov r8, r8)
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20001168 	.word	0x20001168

0800c010 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c010:	b580      	push	{r7, lr}
 800c012:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c014:	4b37      	ldr	r3, [pc, #220]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b07      	cmp	r3, #7
 800c01a:	d85f      	bhi.n	800c0dc <SGP_Upkeep+0xcc>
 800c01c:	009a      	lsls	r2, r3, #2
 800c01e:	4b36      	ldr	r3, [pc, #216]	@ (800c0f8 <SGP_Upkeep+0xe8>)
 800c020:	18d3      	adds	r3, r2, r3
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c026:	4a35      	ldr	r2, [pc, #212]	@ (800c0fc <SGP_Upkeep+0xec>)
 800c028:	4b35      	ldr	r3, [pc, #212]	@ (800c100 <SGP_Upkeep+0xf0>)
 800c02a:	0019      	movs	r1, r3
 800c02c:	2003      	movs	r0, #3
 800c02e:	f002 faf5 	bl	800e61c <CreateLine>
    break;
 800c032:	e05a      	b.n	800c0ea <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c034:	f7ff ffe2 	bl	800bffc <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c038:	4b2e      	ldr	r3, [pc, #184]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
    break;
 800c03e:	e054      	b.n	800c0ea <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c040:	f7ff fc3a 	bl	800b8b8 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c044:	f001 f966 	bl	800d314 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c048:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c04a:	2202      	movs	r2, #2
 800c04c:	701a      	strb	r2, [r3, #0]
    break;
 800c04e:	e04c      	b.n	800c0ea <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c050:	4b2c      	ldr	r3, [pc, #176]	@ (800c104 <SGP_Upkeep+0xf4>)
 800c052:	0018      	movs	r0, r3
 800c054:	f7ff fca0 	bl	800b998 <SGP_GetMeasurementValues>
 800c058:	1e03      	subs	r3, r0, #0
 800c05a:	d043      	beq.n	800c0e4 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c05c:	4b25      	ldr	r3, [pc, #148]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c05e:	2203      	movs	r2, #3
 800c060:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c062:	e03f      	b.n	800c0e4 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c064:	4b27      	ldr	r3, [pc, #156]	@ (800c104 <SGP_Upkeep+0xf4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	b29b      	uxth	r3, r3
 800c06a:	0018      	movs	r0, r3
 800c06c:	f7f7 fc54 	bl	8003918 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c070:	4b20      	ldr	r3, [pc, #128]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c072:	2206      	movs	r2, #6
 800c074:	701a      	strb	r2, [r3, #0]
    break;
 800c076:	e038      	b.n	800c0ea <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c078:	4b1e      	ldr	r3, [pc, #120]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c07a:	2207      	movs	r2, #7
 800c07c:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c07e:	4b22      	ldr	r3, [pc, #136]	@ (800c108 <SGP_Upkeep+0xf8>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d112      	bne.n	800c0ac <SGP_Upkeep+0x9c>
 800c086:	4b21      	ldr	r3, [pc, #132]	@ (800c10c <SGP_Upkeep+0xfc>)
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2201      	movs	r2, #1
 800c08c:	4053      	eors	r3, r2
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00b      	beq.n	800c0ac <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c094:	4b1e      	ldr	r3, [pc, #120]	@ (800c110 <SGP_Upkeep+0x100>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c09c:	f7ff ff92 	bl	800bfc4 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f7fc f9cd 	bl	8008440 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800c110 <SGP_Upkeep+0x100>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c0ac:	f002 fef6 	bl	800ee9c <HAL_GetTick>
 800c0b0:	0003      	movs	r3, r0
 800c0b2:	22c8      	movs	r2, #200	@ 0xc8
 800c0b4:	0092      	lsls	r2, r2, #2
 800c0b6:	189a      	adds	r2, r3, r2
 800c0b8:	4b16      	ldr	r3, [pc, #88]	@ (800c114 <SGP_Upkeep+0x104>)
 800c0ba:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0bc:	f001 f942 	bl	800d344 <ResetMeasurementIndicator>
  break;
 800c0c0:	e013      	b.n	800c0ea <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c0c2:	4b14      	ldr	r3, [pc, #80]	@ (800c114 <SGP_Upkeep+0x104>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f002 fa52 	bl	800e570 <TimestampIsReached>
 800c0cc:	1e03      	subs	r3, r0, #0
 800c0ce:	d00b      	beq.n	800c0e8 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c0d0:	f7ff fbda 	bl	800b888 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c0d4:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0da:	e005      	b.n	800c0e8 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c0dc:	4b05      	ldr	r3, [pc, #20]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	701a      	strb	r2, [r3, #0]
    break;
 800c0e2:	e002      	b.n	800c0ea <SGP_Upkeep+0xda>
    break;
 800c0e4:	46c0      	nop			@ (mov r8, r8)
 800c0e6:	e000      	b.n	800c0ea <SGP_Upkeep+0xda>
    break;
 800c0e8:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c0ea:	4b02      	ldr	r3, [pc, #8]	@ (800c0f4 <SGP_Upkeep+0xe4>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
}
 800c0ee:	0018      	movs	r0, r3
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	2000116c 	.word	0x2000116c
 800c0f8:	080256cc 	.word	0x080256cc
 800c0fc:	08024fb4 	.word	0x08024fb4
 800c100:	08024e78 	.word	0x08024e78
 800c104:	20001168 	.word	0x20001168
 800c108:	200010b2 	.word	0x200010b2
 800c10c:	20002009 	.word	0x20002009
 800c110:	2000109c 	.word	0x2000109c
 800c114:	200010b4 	.word	0x200010b4

0800c118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	0002      	movs	r2, r0
 800c120:	1dfb      	adds	r3, r7, #7
 800c122:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c124:	1dfb      	adds	r3, r7, #7
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b7f      	cmp	r3, #127	@ 0x7f
 800c12a:	d809      	bhi.n	800c140 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c12c:	1dfb      	adds	r3, r7, #7
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	001a      	movs	r2, r3
 800c132:	231f      	movs	r3, #31
 800c134:	401a      	ands	r2, r3
 800c136:	4b04      	ldr	r3, [pc, #16]	@ (800c148 <__NVIC_EnableIRQ+0x30>)
 800c138:	2101      	movs	r1, #1
 800c13a:	4091      	lsls	r1, r2
 800c13c:	000a      	movs	r2, r1
 800c13e:	601a      	str	r2, [r3, #0]
  }
}
 800c140:	46c0      	nop			@ (mov r8, r8)
 800c142:	46bd      	mov	sp, r7
 800c144:	b002      	add	sp, #8
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000e100 	.word	0xe000e100

0800c14c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	0002      	movs	r2, r0
 800c154:	1dfb      	adds	r3, r7, #7
 800c156:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c158:	1dfb      	adds	r3, r7, #7
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c15e:	d810      	bhi.n	800c182 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c160:	1dfb      	adds	r3, r7, #7
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	001a      	movs	r2, r3
 800c166:	231f      	movs	r3, #31
 800c168:	4013      	ands	r3, r2
 800c16a:	4908      	ldr	r1, [pc, #32]	@ (800c18c <__NVIC_DisableIRQ+0x40>)
 800c16c:	2201      	movs	r2, #1
 800c16e:	409a      	lsls	r2, r3
 800c170:	0013      	movs	r3, r2
 800c172:	2280      	movs	r2, #128	@ 0x80
 800c174:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c176:	f3bf 8f4f 	dsb	sy
}
 800c17a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c17c:	f3bf 8f6f 	isb	sy
}
 800c180:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c182:	46c0      	nop			@ (mov r8, r8)
 800c184:	46bd      	mov	sp, r7
 800c186:	b002      	add	sp, #8
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	46c0      	nop			@ (mov r8, r8)
 800c18c:	e000e100 	.word	0xe000e100

0800c190 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c190:	b5b0      	push	{r4, r5, r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af02      	add	r7, sp, #8
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	0008      	movs	r0, r1
 800c19a:	0011      	movs	r1, r2
 800c19c:	1cfb      	adds	r3, r7, #3
 800c19e:	1c02      	adds	r2, r0, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	1cbb      	adds	r3, r7, #2
 800c1a4:	1c0a      	adds	r2, r1, #0
 800c1a6:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c1a8:	4b5b      	ldr	r3, [pc, #364]	@ (800c318 <getSoundData+0x188>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4053      	eors	r3, r2
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d107      	bne.n	800c1c8 <getSoundData+0x38>
 800c1b8:	4b58      	ldr	r3, [pc, #352]	@ (800c31c <getSoundData+0x18c>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4053      	eors	r3, r2
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <getSoundData+0x3c>
    {
        return false;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	e0a0      	b.n	800c30e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c1cc:	4b54      	ldr	r3, [pc, #336]	@ (800c320 <getSoundData+0x190>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d005      	beq.n	800c1e2 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c1d6:	4b53      	ldr	r3, [pc, #332]	@ (800c324 <getSoundData+0x194>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	b25b      	sxtb	r3, r3
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f7ff ffb5 	bl	800c14c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1e2:	f3bf 8f4f 	dsb	sy
}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1e8:	f3bf 8f6f 	isb	sy
}
 800c1ec:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c1ee:	1cfb      	adds	r3, r7, #3
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d04c      	beq.n	800c290 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c1f6:	4b4c      	ldr	r3, [pc, #304]	@ (800c328 <getSoundData+0x198>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d11b      	bne.n	800c236 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c20a:	2300      	movs	r3, #0
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e00e      	b.n	800c22e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	18d3      	adds	r3, r2, r3
 800c216:	3302      	adds	r3, #2
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	18d3      	adds	r3, r2, r3
 800c222:	3308      	adds	r3, #8
 800c224:	2200      	movs	r2, #0
 800c226:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	3301      	adds	r3, #1
 800c22c:	617b      	str	r3, [r7, #20]
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b05      	cmp	r3, #5
 800c232:	d9ed      	bls.n	800c210 <getSoundData+0x80>
 800c234:	e02c      	b.n	800c290 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	1c59      	adds	r1, r3, #1
 800c23c:	4b3b      	ldr	r3, [pc, #236]	@ (800c32c <getSoundData+0x19c>)
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	4b3b      	ldr	r3, [pc, #236]	@ (800c330 <getSoundData+0x1a0>)
 800c242:	681c      	ldr	r4, [r3, #0]
 800c244:	4b38      	ldr	r3, [pc, #224]	@ (800c328 <getSoundData+0x198>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	0023      	movs	r3, r4
 800c24c:	f000 fde8 	bl	800ce20 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c250:	2300      	movs	r3, #0
 800c252:	613b      	str	r3, [r7, #16]
 800c254:	e019      	b.n	800c28a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	18d3      	adds	r3, r2, r3
 800c25c:	1c98      	adds	r0, r3, #2
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3308      	adds	r3, #8
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c266:	4b33      	ldr	r3, [pc, #204]	@ (800c334 <getSoundData+0x1a4>)
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	0092      	lsls	r2, r2, #2
 800c26c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c26e:	4b32      	ldr	r3, [pc, #200]	@ (800c338 <getSoundData+0x1a8>)
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c276:	4b2c      	ldr	r3, [pc, #176]	@ (800c328 <getSoundData+0x198>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	0013      	movs	r3, r2
 800c27e:	0022      	movs	r2, r4
 800c280:	f000 fdce 	bl	800ce20 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3301      	adds	r3, #1
 800c288:	613b      	str	r3, [r7, #16]
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b05      	cmp	r3, #5
 800c28e:	d9e2      	bls.n	800c256 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c290:	1cbb      	adds	r3, r7, #2
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d028      	beq.n	800c2ea <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c298:	240e      	movs	r4, #14
 800c29a:	193b      	adds	r3, r7, r4
 800c29c:	2200      	movs	r2, #0
 800c29e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c2a0:	250d      	movs	r5, #13
 800c2a2:	197b      	adds	r3, r7, r5
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c2a8:	4b24      	ldr	r3, [pc, #144]	@ (800c33c <getSoundData+0x1ac>)
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	4924      	ldr	r1, [pc, #144]	@ (800c340 <getSoundData+0x1b0>)
 800c2ae:	197b      	adds	r3, r7, r5
 800c2b0:	193a      	adds	r2, r7, r4
 800c2b2:	f000 fe59 	bl	800cf68 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c2b6:	193b      	adds	r3, r7, r4
 800c2b8:	881a      	ldrh	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	21ff      	movs	r1, #255	@ 0xff
 800c2be:	4011      	ands	r1, r2
 800c2c0:	000c      	movs	r4, r1
 800c2c2:	7b99      	ldrb	r1, [r3, #14]
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	4001      	ands	r1, r0
 800c2c8:	1c08      	adds	r0, r1, #0
 800c2ca:	1c21      	adds	r1, r4, #0
 800c2cc:	4301      	orrs	r1, r0
 800c2ce:	7399      	strb	r1, [r3, #14]
 800c2d0:	0a12      	lsrs	r2, r2, #8
 800c2d2:	b290      	uxth	r0, r2
 800c2d4:	7bda      	ldrb	r2, [r3, #15]
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	400a      	ands	r2, r1
 800c2da:	1c11      	adds	r1, r2, #0
 800c2dc:	1c02      	adds	r2, r0, #0
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c2e2:	197b      	adds	r3, r7, r5
 800c2e4:	781a      	ldrb	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c2ea:	f000 f86f 	bl	800c3cc <micSettlingComplete>
 800c2ee:	0003      	movs	r3, r0
 800c2f0:	001a      	movs	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c320 <getSoundData+0x190>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c300:	4b08      	ldr	r3, [pc, #32]	@ (800c324 <getSoundData+0x194>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	b25b      	sxtb	r3, r3
 800c306:	0018      	movs	r0, r3
 800c308:	f7ff ff06 	bl	800c118 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c30c:	2301      	movs	r3, #1
}
 800c30e:	0018      	movs	r0, r3
 800c310:	46bd      	mov	sp, r7
 800c312:	b006      	add	sp, #24
 800c314:	bdb0      	pop	{r4, r5, r7, pc}
 800c316:	46c0      	nop			@ (mov r8, r8)
 800c318:	2000116e 	.word	0x2000116e
 800c31c:	20001171 	.word	0x20001171
 800c320:	20001170 	.word	0x20001170
 800c324:	20001bc0 	.word	0x20001bc0
 800c328:	20001bfc 	.word	0x20001bfc
 800c32c:	20001bc4 	.word	0x20001bc4
 800c330:	20001bc8 	.word	0x20001bc8
 800c334:	20001bcc 	.word	0x20001bcc
 800c338:	20001be4 	.word	0x20001be4
 800c33c:	20001178 	.word	0x20001178
 800c340:	3b5c7333 	.word	0x3b5c7333

0800c344 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	001a      	movs	r2, r3
 800c352:	1cfb      	adds	r3, r7, #3
 800c354:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c356:	4b09      	ldr	r3, [pc, #36]	@ (800c37c <soundInit+0x38>)
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c35c:	4b08      	ldr	r3, [pc, #32]	@ (800c380 <soundInit+0x3c>)
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c362:	4b08      	ldr	r3, [pc, #32]	@ (800c384 <soundInit+0x40>)
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c368:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <soundInit+0x44>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	569a      	ldrsb	r2, [r3, r2]
 800c36e:	4b06      	ldr	r3, [pc, #24]	@ (800c388 <soundInit+0x44>)
 800c370:	701a      	strb	r2, [r3, #0]

    return true;
 800c372:	2301      	movs	r3, #1
}
 800c374:	0018      	movs	r0, r3
 800c376:	46bd      	mov	sp, r7
 800c378:	b004      	add	sp, #16
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20001bb8 	.word	0x20001bb8
 800c380:	20001bb4 	.word	0x20001bb4
 800c384:	20001bbc 	.word	0x20001bbc
 800c388:	20001bc0 	.word	0x20001bc0

0800c38c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c390:	4b02      	ldr	r3, [pc, #8]	@ (800c39c <clearMaximumAmplitude+0x10>)
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
}
 800c396:	46c0      	nop			@ (mov r8, r8)
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	20001178 	.word	0x20001178

0800c3a0 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c3a4:	4b08      	ldr	r3, [pc, #32]	@ (800c3c8 <startMicSettlingPeriod+0x28>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c3ae:	4b06      	ldr	r3, [pc, #24]	@ (800c3c8 <startMicSettlingPeriod+0x28>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	f00a fb36 	bl	8016a24 <HAL_TIM_Base_Start>
 800c3b8:	1e03      	subs	r3, r0, #0
 800c3ba:	d001      	beq.n	800c3c0 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e000      	b.n	800c3c2 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c3c0:	2301      	movs	r3, #1
}
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	20001bb4 	.word	0x20001bb4

0800c3cc <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c40c <micSettlingComplete+0x40>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	401a      	ands	r2, r3
 800c3de:	1dfb      	adds	r3, r7, #7
 800c3e0:	3a01      	subs	r2, #1
 800c3e2:	4251      	negs	r1, r2
 800c3e4:	414a      	adcs	r2, r1
 800c3e6:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c3e8:	1dfb      	adds	r3, r7, #7
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c3f0:	4b06      	ldr	r3, [pc, #24]	@ (800c40c <micSettlingComplete+0x40>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	f00a fb5f 	bl	8016ab8 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c3fa:	4b05      	ldr	r3, [pc, #20]	@ (800c410 <micSettlingComplete+0x44>)
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c400:	1dfb      	adds	r3, r7, #7
 800c402:	781b      	ldrb	r3, [r3, #0]
}
 800c404:	0018      	movs	r0, r3
 800c406:	46bd      	mov	sp, r7
 800c408:	b002      	add	sp, #8
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	20001bb4 	.word	0x20001bb4
 800c410:	2000116d 	.word	0x2000116d

0800c414 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	0002      	movs	r2, r0
 800c41c:	1dfb      	adds	r3, r7, #7
 800c41e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c420:	4b29      	ldr	r3, [pc, #164]	@ (800c4c8 <enableMicrophone+0xb4>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	1dfa      	adds	r2, r7, #7
 800c428:	7812      	ldrb	r2, [r2, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d101      	bne.n	800c432 <enableMicrophone+0x1e>
    {
        return true;
 800c42e:	2301      	movs	r3, #1
 800c430:	e045      	b.n	800c4be <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c432:	1dfb      	adds	r3, r7, #7
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d025      	beq.n	800c486 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c43a:	f7ff ffb1 	bl	800c3a0 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c43e:	4b23      	ldr	r3, [pc, #140]	@ (800c4cc <enableMicrophone+0xb8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2280      	movs	r2, #128	@ 0x80
 800c444:	0092      	lsls	r2, r2, #2
 800c446:	4922      	ldr	r1, [pc, #136]	@ (800c4d0 <enableMicrophone+0xbc>)
 800c448:	0018      	movs	r0, r3
 800c44a:	f006 fd55 	bl	8012ef8 <HAL_I2S_Receive_DMA>
 800c44e:	1e03      	subs	r3, r0, #0
 800c450:	d001      	beq.n	800c456 <enableMicrophone+0x42>
        {
            return false;
 800c452:	2300      	movs	r3, #0
 800c454:	e033      	b.n	800c4be <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c456:	f7ff ff99 	bl	800c38c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c45a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d4 <enableMicrophone+0xc0>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c460:	4b1d      	ldr	r3, [pc, #116]	@ (800c4d8 <enableMicrophone+0xc4>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b25b      	sxtb	r3, r3
 800c466:	0018      	movs	r0, r3
 800c468:	f7ff fe56 	bl	800c118 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c46c:	4b1b      	ldr	r3, [pc, #108]	@ (800c4dc <enableMicrophone+0xc8>)
 800c46e:	2201      	movs	r2, #1
 800c470:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c472:	4b15      	ldr	r3, [pc, #84]	@ (800c4c8 <enableMicrophone+0xb4>)
 800c474:	2201      	movs	r2, #1
 800c476:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c478:	4b19      	ldr	r3, [pc, #100]	@ (800c4e0 <enableMicrophone+0xcc>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c47e:	4b19      	ldr	r3, [pc, #100]	@ (800c4e4 <enableMicrophone+0xd0>)
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e01a      	b.n	800c4bc <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c486:	4b14      	ldr	r3, [pc, #80]	@ (800c4d8 <enableMicrophone+0xc4>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	b25b      	sxtb	r3, r3
 800c48c:	0018      	movs	r0, r3
 800c48e:	f7ff fe5d 	bl	800c14c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c492:	4b12      	ldr	r3, [pc, #72]	@ (800c4dc <enableMicrophone+0xc8>)
 800c494:	2200      	movs	r2, #0
 800c496:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c498:	4b11      	ldr	r3, [pc, #68]	@ (800c4e0 <enableMicrophone+0xcc>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c49e:	4b11      	ldr	r3, [pc, #68]	@ (800c4e4 <enableMicrophone+0xd0>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c4a4:	4b09      	ldr	r3, [pc, #36]	@ (800c4cc <enableMicrophone+0xb8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f006 fde7 	bl	801307c <HAL_I2S_DMAStop>
 800c4ae:	1e03      	subs	r3, r0, #0
 800c4b0:	d001      	beq.n	800c4b6 <enableMicrophone+0xa2>
        {
            return false;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e003      	b.n	800c4be <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c4b6:	4b04      	ldr	r3, [pc, #16]	@ (800c4c8 <enableMicrophone+0xb4>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4bc:	2301      	movs	r3, #1
}
 800c4be:	0018      	movs	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	b002      	add	sp, #8
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	46c0      	nop			@ (mov r8, r8)
 800c4c8:	2000116e 	.word	0x2000116e
 800c4cc:	20001bb8 	.word	0x20001bb8
 800c4d0:	200011b4 	.word	0x200011b4
 800c4d4:	20001174 	.word	0x20001174
 800c4d8:	20001bc0 	.word	0x20001bc0
 800c4dc:	20001170 	.word	0x20001170
 800c4e0:	2000116f 	.word	0x2000116f
 800c4e4:	20001171 	.word	0x20001171

0800c4e8 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <startSPLcalculation+0x38>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	4053      	eors	r3, r2
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <startSPLcalculation+0x18>
    {
        return false;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e00c      	b.n	800c51a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c500:	4b08      	ldr	r3, [pc, #32]	@ (800c524 <startSPLcalculation+0x3c>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <startSPLcalculation+0x26>
    {
        return true;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e005      	b.n	800c51a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c50e:	f000 fb63 	bl	800cbd8 <resetSPLstate>
    SPLcalcEnabled = true;
 800c512:	4b04      	ldr	r3, [pc, #16]	@ (800c524 <startSPLcalculation+0x3c>)
 800c514:	2201      	movs	r2, #1
 800c516:	701a      	strb	r2, [r3, #0]
    return true;
 800c518:	2301      	movs	r3, #1
}
 800c51a:	0018      	movs	r0, r3
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	2000116e 	.word	0x2000116e
 800c524:	2000116f 	.word	0x2000116f

0800c528 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c530:	4b05      	ldr	r3, [pc, #20]	@ (800c548 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	429a      	cmp	r2, r3
 800c538:	d102      	bne.n	800c540 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c53a:	2000      	movs	r0, #0
 800c53c:	f000 f81a 	bl	800c574 <processHalfDMAbuffer>
  }
}
 800c540:	46c0      	nop			@ (mov r8, r8)
 800c542:	46bd      	mov	sp, r7
 800c544:	b002      	add	sp, #8
 800c546:	bd80      	pop	{r7, pc}
 800c548:	20001bb8 	.word	0x20001bb8

0800c54c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c554:	4b06      	ldr	r3, [pc, #24]	@ (800c570 <HAL_I2S_RxCpltCallback+0x24>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d104      	bne.n	800c568 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c55e:	2380      	movs	r3, #128	@ 0x80
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	0018      	movs	r0, r3
 800c564:	f000 f806 	bl	800c574 <processHalfDMAbuffer>
  }
}
 800c568:	46c0      	nop			@ (mov r8, r8)
 800c56a:	46bd      	mov	sp, r7
 800c56c:	b002      	add	sp, #8
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20001bb8 	.word	0x20001bb8

0800c574 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	005a      	lsls	r2, r3, #1
 800c580:	4b15      	ldr	r3, [pc, #84]	@ (800c5d8 <processHalfDMAbuffer+0x64>)
 800c582:	18d3      	adds	r3, r2, r3
 800c584:	4a15      	ldr	r2, [pc, #84]	@ (800c5dc <processHalfDMAbuffer+0x68>)
 800c586:	2180      	movs	r1, #128	@ 0x80
 800c588:	0089      	lsls	r1, r1, #2
 800c58a:	0018      	movs	r0, r3
 800c58c:	f000 fd35 	bl	800cffa <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c590:	4b13      	ldr	r3, [pc, #76]	@ (800c5e0 <processHalfDMAbuffer+0x6c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	425a      	negs	r2, r3
 800c596:	4153      	adcs	r3, r2
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4b11      	ldr	r3, [pc, #68]	@ (800c5e0 <processHalfDMAbuffer+0x6c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2109      	movs	r1, #9
 800c5a0:	4299      	cmp	r1, r3
 800c5a2:	419b      	sbcs	r3, r3
 800c5a4:	425b      	negs	r3, r3
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	480c      	ldr	r0, [pc, #48]	@ (800c5dc <processHalfDMAbuffer+0x68>)
 800c5aa:	2180      	movs	r1, #128	@ 0x80
 800c5ac:	f000 fb46 	bl	800cc3c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e0 <processHalfDMAbuffer+0x6c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d804      	bhi.n	800c5c2 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c5b8:	4b09      	ldr	r3, [pc, #36]	@ (800c5e0 <processHalfDMAbuffer+0x6c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	4b08      	ldr	r3, [pc, #32]	@ (800c5e0 <processHalfDMAbuffer+0x6c>)
 800c5c0:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c5c2:	4b08      	ldr	r3, [pc, #32]	@ (800c5e4 <processHalfDMAbuffer+0x70>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c5cc:	f000 f826 	bl	800c61c <calculateSPLQ31>
    }
}
 800c5d0:	46c0      	nop			@ (mov r8, r8)
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	b002      	add	sp, #8
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	200011b4 	.word	0x200011b4
 800c5dc:	200019b4 	.word	0x200019b4
 800c5e0:	20001174 	.word	0x20001174
 800c5e4:	2000116f 	.word	0x2000116f

0800c5e8 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5f0:	4b07      	ldr	r3, [pc, #28]	@ (800c610 <HAL_I2S_ErrorCallback+0x28>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d106      	bne.n	800c608 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c5fa:	4a06      	ldr	r2, [pc, #24]	@ (800c614 <HAL_I2S_ErrorCallback+0x2c>)
 800c5fc:	239e      	movs	r3, #158	@ 0x9e
 800c5fe:	0059      	lsls	r1, r3, #1
 800c600:	4b05      	ldr	r3, [pc, #20]	@ (800c618 <HAL_I2S_ErrorCallback+0x30>)
 800c602:	0018      	movs	r0, r3
 800c604:	f002 f8c2 	bl	800e78c <errorHandler>
  }
}
 800c608:	46c0      	nop			@ (mov r8, r8)
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b002      	add	sp, #8
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20001bb8 	.word	0x20001bb8
 800c614:	08024fdc 	.word	0x08024fdc
 800c618:	080257bc 	.word	0x080257bc

0800c61c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61e:	b0b3      	sub	sp, #204	@ 0xcc
 800c620:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c622:	4ae2      	ldr	r2, [pc, #904]	@ (800c9ac <calculateSPLQ31+0x390>)
 800c624:	2338      	movs	r3, #56	@ 0x38
 800c626:	2030      	movs	r0, #48	@ 0x30
 800c628:	181b      	adds	r3, r3, r0
 800c62a:	19d9      	adds	r1, r3, r7
 800c62c:	2334      	movs	r3, #52	@ 0x34
 800c62e:	181b      	adds	r3, r3, r0
 800c630:	19d8      	adds	r0, r3, r7
 800c632:	2380      	movs	r3, #128	@ 0x80
 800c634:	f000 fc36 	bl	800cea4 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	da00      	bge.n	800c640 <calculateSPLQ31+0x24>
 800c63e:	3301      	adds	r3, #1
 800c640:	105b      	asrs	r3, r3, #1
 800c642:	001a      	movs	r2, r3
 800c644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c646:	2b00      	cmp	r3, #0
 800c648:	da00      	bge.n	800c64c <calculateSPLQ31+0x30>
 800c64a:	3301      	adds	r3, #1
 800c64c:	105b      	asrs	r3, r3, #1
 800c64e:	18d3      	adds	r3, r2, r3
 800c650:	2188      	movs	r1, #136	@ 0x88
 800c652:	187a      	adds	r2, r7, r1
 800c654:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c656:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c658:	187b      	adds	r3, r7, r1
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	3304      	adds	r3, #4
 800c660:	2284      	movs	r2, #132	@ 0x84
 800c662:	18b9      	adds	r1, r7, r2
 800c664:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c666:	18bb      	adds	r3, r7, r2
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4ad1      	ldr	r2, [pc, #836]	@ (800c9b0 <calculateSPLQ31+0x394>)
 800c66c:	0019      	movs	r1, r3
 800c66e:	0010      	movs	r0, r2
 800c670:	f000 fc58 	bl	800cf24 <getPo2factor>
 800c674:	0003      	movs	r3, r0
 800c676:	2280      	movs	r2, #128	@ 0x80
 800c678:	18ba      	adds	r2, r7, r2
 800c67a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	2284      	movs	r2, #132	@ 0x84
 800c680:	2130      	movs	r1, #48	@ 0x30
 800c682:	1852      	adds	r2, r2, r1
 800c684:	19d2      	adds	r2, r2, r7
 800c686:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c688:	2300      	movs	r3, #0
 800c68a:	2280      	movs	r2, #128	@ 0x80
 800c68c:	1852      	adds	r2, r2, r1
 800c68e:	19d2      	adds	r2, r2, r7
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	e032      	b.n	800c6fa <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c694:	4ac5      	ldr	r2, [pc, #788]	@ (800c9ac <calculateSPLQ31+0x390>)
 800c696:	2680      	movs	r6, #128	@ 0x80
 800c698:	2330      	movs	r3, #48	@ 0x30
 800c69a:	18f1      	adds	r1, r6, r3
 800c69c:	19cb      	adds	r3, r1, r7
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	589a      	ldr	r2, [r3, r2]
 800c6a4:	2188      	movs	r1, #136	@ 0x88
 800c6a6:	1879      	adds	r1, r7, r1
 800c6a8:	680b      	ldr	r3, [r1, #0]
 800c6aa:	1ad2      	subs	r2, r2, r3
 800c6ac:	2180      	movs	r1, #128	@ 0x80
 800c6ae:	1879      	adds	r1, r7, r1
 800c6b0:	680b      	ldr	r3, [r1, #0]
 800c6b2:	409a      	lsls	r2, r3
 800c6b4:	0011      	movs	r1, r2
 800c6b6:	4abf      	ldr	r2, [pc, #764]	@ (800c9b4 <calculateSPLQ31+0x398>)
 800c6b8:	2084      	movs	r0, #132	@ 0x84
 800c6ba:	2330      	movs	r3, #48	@ 0x30
 800c6bc:	18c3      	adds	r3, r0, r3
 800c6be:	19db      	adds	r3, r3, r7
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c6c6:	2230      	movs	r2, #48	@ 0x30
 800c6c8:	1883      	adds	r3, r0, r2
 800c6ca:	19db      	adds	r3, r3, r7
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	49b8      	ldr	r1, [pc, #736]	@ (800c9b4 <calculateSPLQ31+0x398>)
 800c6d2:	009a      	lsls	r2, r3, #2
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	5053      	str	r3, [r2, r1]
        count += 2;
 800c6d8:	2230      	movs	r2, #48	@ 0x30
 800c6da:	1883      	adds	r3, r0, r2
 800c6dc:	19db      	adds	r3, r3, r7
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3302      	adds	r3, #2
 800c6e2:	0011      	movs	r1, r2
 800c6e4:	1882      	adds	r2, r0, r2
 800c6e6:	19d2      	adds	r2, r2, r7
 800c6e8:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6ea:	000a      	movs	r2, r1
 800c6ec:	18b3      	adds	r3, r6, r2
 800c6ee:	19db      	adds	r3, r3, r7
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	18b2      	adds	r2, r6, r2
 800c6f6:	19d2      	adds	r2, r2, r7
 800c6f8:	6013      	str	r3, [r2, #0]
 800c6fa:	2380      	movs	r3, #128	@ 0x80
 800c6fc:	2630      	movs	r6, #48	@ 0x30
 800c6fe:	199b      	adds	r3, r3, r6
 800c700:	19db      	adds	r3, r3, r7
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b7f      	cmp	r3, #127	@ 0x7f
 800c706:	d9c5      	bls.n	800c694 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c708:	4bab      	ldr	r3, [pc, #684]	@ (800c9b8 <calculateSPLQ31+0x39c>)
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	49a9      	ldr	r1, [pc, #676]	@ (800c9b4 <calculateSPLQ31+0x398>)
 800c70e:	2301      	movs	r3, #1
 800c710:	2200      	movs	r2, #0
 800c712:	f011 fa4d 	bl	801dbb0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c716:	4aa9      	ldr	r2, [pc, #676]	@ (800c9bc <calculateSPLQ31+0x3a0>)
 800c718:	2338      	movs	r3, #56	@ 0x38
 800c71a:	199b      	adds	r3, r3, r6
 800c71c:	19d9      	adds	r1, r3, r7
 800c71e:	2334      	movs	r3, #52	@ 0x34
 800c720:	199b      	adds	r3, r3, r6
 800c722:	19d8      	adds	r0, r3, r7
 800c724:	237e      	movs	r3, #126	@ 0x7e
 800c726:	f000 fbbd 	bl	800cea4 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c72a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c72c:	2380      	movs	r3, #128	@ 0x80
 800c72e:	061b      	lsls	r3, r3, #24
 800c730:	429a      	cmp	r2, r3
 800c732:	d101      	bne.n	800c738 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c734:	4b9e      	ldr	r3, [pc, #632]	@ (800c9b0 <calculateSPLQ31+0x394>)
 800c736:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c738:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c73a:	2380      	movs	r3, #128	@ 0x80
 800c73c:	061b      	lsls	r3, r3, #24
 800c73e:	429a      	cmp	r2, r3
 800c740:	d101      	bne.n	800c746 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c742:	4b9b      	ldr	r3, [pc, #620]	@ (800c9b0 <calculateSPLQ31+0x394>)
 800c744:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c748:	17da      	asrs	r2, r3, #31
 800c74a:	189b      	adds	r3, r3, r2
 800c74c:	4053      	eors	r3, r2
 800c74e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c752:	17da      	asrs	r2, r3, #31
 800c754:	189b      	adds	r3, r3, r2
 800c756:	4053      	eors	r3, r2
 800c758:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c75a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c75c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c75e:	429a      	cmp	r2, r3
 800c760:	dd01      	ble.n	800c766 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c764:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c768:	3304      	adds	r3, #4
 800c76a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c76c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c76e:	4a90      	ldr	r2, [pc, #576]	@ (800c9b0 <calculateSPLQ31+0x394>)
 800c770:	0019      	movs	r1, r3
 800c772:	0010      	movs	r0, r2
 800c774:	f000 fbd6 	bl	800cf24 <getPo2factor>
 800c778:	0003      	movs	r3, r0
 800c77a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c77c:	2302      	movs	r3, #2
 800c77e:	22ac      	movs	r2, #172	@ 0xac
 800c780:	18ba      	adds	r2, r7, r2
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	e012      	b.n	800c7ac <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c786:	4a8b      	ldr	r2, [pc, #556]	@ (800c9b4 <calculateSPLQ31+0x398>)
 800c788:	20ac      	movs	r0, #172	@ 0xac
 800c78a:	183b      	adds	r3, r7, r0
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	589a      	ldr	r2, [r3, r2]
 800c792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c794:	409a      	lsls	r2, r3
 800c796:	0011      	movs	r1, r2
 800c798:	4a86      	ldr	r2, [pc, #536]	@ (800c9b4 <calculateSPLQ31+0x398>)
 800c79a:	183b      	adds	r3, r7, r0
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c7a2:	183b      	adds	r3, r7, r0
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	183a      	adds	r2, r7, r0
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	23ac      	movs	r3, #172	@ 0xac
 800c7ae:	18fb      	adds	r3, r7, r3
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7b4:	d9e7      	bls.n	800c786 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c7b6:	4b7d      	ldr	r3, [pc, #500]	@ (800c9ac <calculateSPLQ31+0x390>)
 800c7b8:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c7ba:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7bc:	4b7d      	ldr	r3, [pc, #500]	@ (800c9b4 <calculateSPLQ31+0x398>)
 800c7be:	2240      	movs	r2, #64	@ 0x40
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	f011 ff9f 	bl	801e704 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c7c6:	2330      	movs	r3, #48	@ 0x30
 800c7c8:	18fb      	adds	r3, r7, r3
 800c7ca:	0018      	movs	r0, r3
 800c7cc:	2330      	movs	r3, #48	@ 0x30
 800c7ce:	001a      	movs	r2, r3
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	f013 fdbb 	bl	802034c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	2300      	movs	r3, #0
 800c7da:	21a0      	movs	r1, #160	@ 0xa0
 800c7dc:	1879      	adds	r1, r7, r1
 800c7de:	600a      	str	r2, [r1, #0]
 800c7e0:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	229c      	movs	r2, #156	@ 0x9c
 800c7e6:	18ba      	adds	r2, r7, r2
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	e05b      	b.n	800c8a4 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c7ec:	269c      	movs	r6, #156	@ 0x9c
 800c7ee:	19bb      	adds	r3, r7, r6
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	009a      	lsls	r2, r3, #2
 800c7f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7f6:	189b      	adds	r3, r3, r2
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	613b      	str	r3, [r7, #16]
 800c7fc:	17db      	asrs	r3, r3, #31
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	4b6f      	ldr	r3, [pc, #444]	@ (800c9c0 <calculateSPLQ31+0x3a4>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	19bb      	adds	r3, r7, r6
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	18d3      	adds	r3, r2, r3
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	60bb      	str	r3, [r7, #8]
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6938      	ldr	r0, [r7, #16]
 800c81a:	6979      	ldr	r1, [r7, #20]
 800c81c:	f7f3 fed0 	bl	80005c0 <__aeabi_lmul>
 800c820:	0002      	movs	r2, r0
 800c822:	000b      	movs	r3, r1
 800c824:	0010      	movs	r0, r2
 800c826:	0019      	movs	r1, r3
 800c828:	23a0      	movs	r3, #160	@ 0xa0
 800c82a:	18fa      	adds	r2, r7, r3
 800c82c:	6853      	ldr	r3, [r2, #4]
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	1812      	adds	r2, r2, r0
 800c832:	414b      	adcs	r3, r1
 800c834:	21a0      	movs	r1, #160	@ 0xa0
 800c836:	1879      	adds	r1, r7, r1
 800c838:	600a      	str	r2, [r1, #0]
 800c83a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c83c:	4b61      	ldr	r3, [pc, #388]	@ (800c9c4 <calculateSPLQ31+0x3a8>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	19bb      	adds	r3, r7, r6
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	18d3      	adds	r3, r2, r3
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b06      	cmp	r3, #6
 800c84a:	d025      	beq.n	800c898 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c84c:	4b5d      	ldr	r3, [pc, #372]	@ (800c9c4 <calculateSPLQ31+0x3a8>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	19bb      	adds	r3, r7, r6
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	18d3      	adds	r3, r2, r3
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	2230      	movs	r2, #48	@ 0x30
 800c85a:	18ba      	adds	r2, r7, r2
 800c85c:	00db      	lsls	r3, r3, #3
 800c85e:	18d3      	adds	r3, r2, r3
 800c860:	6818      	ldr	r0, [r3, #0]
 800c862:	6859      	ldr	r1, [r3, #4]
 800c864:	19bb      	adds	r3, r7, r6
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	009a      	lsls	r2, r3, #2
 800c86a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c86c:	189b      	adds	r3, r3, r2
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	603b      	str	r3, [r7, #0]
 800c872:	17db      	asrs	r3, r3, #31
 800c874:	607b      	str	r3, [r7, #4]
 800c876:	4b53      	ldr	r3, [pc, #332]	@ (800c9c4 <calculateSPLQ31+0x3a8>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	19be      	adds	r6, r7, r6
 800c87c:	6833      	ldr	r3, [r6, #0]
 800c87e:	18d3      	adds	r3, r2, r3
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	001e      	movs	r6, r3
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	1880      	adds	r0, r0, r2
 800c88a:	4159      	adcs	r1, r3
 800c88c:	2330      	movs	r3, #48	@ 0x30
 800c88e:	18fa      	adds	r2, r7, r3
 800c890:	00f3      	lsls	r3, r6, #3
 800c892:	18d3      	adds	r3, r2, r3
 800c894:	6018      	str	r0, [r3, #0]
 800c896:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c898:	229c      	movs	r2, #156	@ 0x9c
 800c89a:	18bb      	adds	r3, r7, r2
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	18ba      	adds	r2, r7, r2
 800c8a2:	6013      	str	r3, [r2, #0]
 800c8a4:	239c      	movs	r3, #156	@ 0x9c
 800c8a6:	18fb      	adds	r3, r7, r3
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800c8ac:	d99e      	bls.n	800c7ec <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c8ae:	2380      	movs	r3, #128	@ 0x80
 800c8b0:	18fb      	adds	r3, r7, r3
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	001a      	movs	r2, r3
 800c8b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	18d3      	adds	r3, r2, r3
 800c8be:	3b22      	subs	r3, #34	@ 0x22
 800c8c0:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c8c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c4:	17da      	asrs	r2, r3, #31
 800c8c6:	189b      	adds	r3, r3, r2
 800c8c8:	4053      	eors	r3, r2
 800c8ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c8cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	da62      	bge.n	800c998 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c8d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8d4:	3b20      	subs	r3, #32
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	db05      	blt.n	800c8e6 <calculateSPLQ31+0x2ca>
 800c8da:	22a0      	movs	r2, #160	@ 0xa0
 800c8dc:	18ba      	adds	r2, r7, r2
 800c8de:	6812      	ldr	r2, [r2, #0]
 800c8e0:	409a      	lsls	r2, r3
 800c8e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8e4:	e010      	b.n	800c908 <calculateSPLQ31+0x2ec>
 800c8e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	22a0      	movs	r2, #160	@ 0xa0
 800c8ee:	18ba      	adds	r2, r7, r2
 800c8f0:	6812      	ldr	r2, [r2, #0]
 800c8f2:	40da      	lsrs	r2, r3
 800c8f4:	0013      	movs	r3, r2
 800c8f6:	22a4      	movs	r2, #164	@ 0xa4
 800c8f8:	18ba      	adds	r2, r7, r2
 800c8fa:	6811      	ldr	r1, [r2, #0]
 800c8fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8fe:	4091      	lsls	r1, r2
 800c900:	6279      	str	r1, [r7, #36]	@ 0x24
 800c902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c904:	431a      	orrs	r2, r3
 800c906:	627a      	str	r2, [r7, #36]	@ 0x24
 800c908:	21a0      	movs	r1, #160	@ 0xa0
 800c90a:	187b      	adds	r3, r7, r1
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c910:	409a      	lsls	r2, r3
 800c912:	623a      	str	r2, [r7, #32]
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c918:	187a      	adds	r2, r7, r1
 800c91a:	6013      	str	r3, [r2, #0]
 800c91c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c91e:	2300      	movs	r3, #0
 800c920:	2298      	movs	r2, #152	@ 0x98
 800c922:	18ba      	adds	r2, r7, r2
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	e031      	b.n	800c98c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c928:	2330      	movs	r3, #48	@ 0x30
 800c92a:	18fa      	adds	r2, r7, r3
 800c92c:	2398      	movs	r3, #152	@ 0x98
 800c92e:	18fb      	adds	r3, r7, r3
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	18d3      	adds	r3, r2, r3
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c93c:	3920      	subs	r1, #32
 800c93e:	2900      	cmp	r1, #0
 800c940:	db03      	blt.n	800c94a <calculateSPLQ31+0x32e>
 800c942:	0010      	movs	r0, r2
 800c944:	4088      	lsls	r0, r1
 800c946:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c948:	e00c      	b.n	800c964 <calculateSPLQ31+0x348>
 800c94a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c94c:	2020      	movs	r0, #32
 800c94e:	1a41      	subs	r1, r0, r1
 800c950:	0010      	movs	r0, r2
 800c952:	40c8      	lsrs	r0, r1
 800c954:	0001      	movs	r1, r0
 800c956:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c958:	001c      	movs	r4, r3
 800c95a:	4084      	lsls	r4, r0
 800c95c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c95e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c960:	4308      	orrs	r0, r1
 800c962:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c964:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c966:	0013      	movs	r3, r2
 800c968:	408b      	lsls	r3, r1
 800c96a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c96c:	2330      	movs	r3, #48	@ 0x30
 800c96e:	18fa      	adds	r2, r7, r3
 800c970:	2098      	movs	r0, #152	@ 0x98
 800c972:	183b      	adds	r3, r7, r0
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	18d3      	adds	r3, r2, r3
 800c97a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c97c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c97e:	6019      	str	r1, [r3, #0]
 800c980:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c982:	183b      	adds	r3, r7, r0
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3301      	adds	r3, #1
 800c988:	183a      	adds	r2, r7, r0
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	2398      	movs	r3, #152	@ 0x98
 800c98e:	18fb      	adds	r3, r7, r3
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b05      	cmp	r3, #5
 800c994:	d9c8      	bls.n	800c928 <calculateSPLQ31+0x30c>
 800c996:	e06b      	b.n	800ca70 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c99a:	3b20      	subs	r3, #32
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	db13      	blt.n	800c9c8 <calculateSPLQ31+0x3ac>
 800c9a0:	22a4      	movs	r2, #164	@ 0xa4
 800c9a2:	18ba      	adds	r2, r7, r2
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	40da      	lsrs	r2, r3
 800c9a8:	61ba      	str	r2, [r7, #24]
 800c9aa:	e01e      	b.n	800c9ea <calculateSPLQ31+0x3ce>
 800c9ac:	200019b4 	.word	0x200019b4
 800c9b0:	7fffffff 	.word	0x7fffffff
 800c9b4:	20001c00 	.word	0x20001c00
 800c9b8:	200000b8 	.word	0x200000b8
 800c9bc:	20001c08 	.word	0x20001c08
 800c9c0:	200000bc 	.word	0x200000bc
 800c9c4:	200000c8 	.word	0x200000c8
 800c9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	22a4      	movs	r2, #164	@ 0xa4
 800c9d0:	18ba      	adds	r2, r7, r2
 800c9d2:	6812      	ldr	r2, [r2, #0]
 800c9d4:	409a      	lsls	r2, r3
 800c9d6:	0013      	movs	r3, r2
 800c9d8:	22a0      	movs	r2, #160	@ 0xa0
 800c9da:	18ba      	adds	r2, r7, r2
 800c9dc:	6811      	ldr	r1, [r2, #0]
 800c9de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9e0:	40d1      	lsrs	r1, r2
 800c9e2:	61b9      	str	r1, [r7, #24]
 800c9e4:	69ba      	ldr	r2, [r7, #24]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	61ba      	str	r2, [r7, #24]
 800c9ea:	23a4      	movs	r3, #164	@ 0xa4
 800c9ec:	18fb      	adds	r3, r7, r3
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9f2:	40da      	lsrs	r2, r3
 800c9f4:	61fa      	str	r2, [r7, #28]
 800c9f6:	69ba      	ldr	r2, [r7, #24]
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	21a0      	movs	r1, #160	@ 0xa0
 800c9fc:	1879      	adds	r1, r7, r1
 800c9fe:	600a      	str	r2, [r1, #0]
 800ca00:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca02:	2300      	movs	r3, #0
 800ca04:	2294      	movs	r2, #148	@ 0x94
 800ca06:	18ba      	adds	r2, r7, r2
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	e02c      	b.n	800ca66 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca0c:	2330      	movs	r3, #48	@ 0x30
 800ca0e:	18fa      	adds	r2, r7, r3
 800ca10:	2394      	movs	r3, #148	@ 0x94
 800ca12:	18fb      	adds	r3, r7, r3
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	18d3      	adds	r3, r2, r3
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca20:	3920      	subs	r1, #32
 800ca22:	2900      	cmp	r1, #0
 800ca24:	db03      	blt.n	800ca2e <calculateSPLQ31+0x412>
 800ca26:	0018      	movs	r0, r3
 800ca28:	40c8      	lsrs	r0, r1
 800ca2a:	0004      	movs	r4, r0
 800ca2c:	e00a      	b.n	800ca44 <calculateSPLQ31+0x428>
 800ca2e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca30:	2020      	movs	r0, #32
 800ca32:	1a41      	subs	r1, r0, r1
 800ca34:	0018      	movs	r0, r3
 800ca36:	4088      	lsls	r0, r1
 800ca38:	0001      	movs	r1, r0
 800ca3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca3c:	0016      	movs	r6, r2
 800ca3e:	40c6      	lsrs	r6, r0
 800ca40:	0034      	movs	r4, r6
 800ca42:	430c      	orrs	r4, r1
 800ca44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca46:	40cb      	lsrs	r3, r1
 800ca48:	001d      	movs	r5, r3
 800ca4a:	2330      	movs	r3, #48	@ 0x30
 800ca4c:	18fa      	adds	r2, r7, r3
 800ca4e:	2194      	movs	r1, #148	@ 0x94
 800ca50:	187b      	adds	r3, r7, r1
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	18d3      	adds	r3, r2, r3
 800ca58:	601c      	str	r4, [r3, #0]
 800ca5a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca5c:	187b      	adds	r3, r7, r1
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3301      	adds	r3, #1
 800ca62:	187a      	adds	r2, r7, r1
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	2394      	movs	r3, #148	@ 0x94
 800ca68:	18fb      	adds	r3, r7, r3
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b05      	cmp	r3, #5
 800ca6e:	d9cd      	bls.n	800ca0c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ca70:	230f      	movs	r3, #15
 800ca72:	425d      	negs	r5, r3
 800ca74:	2305      	movs	r3, #5
 800ca76:	425e      	negs	r6, r3
 800ca78:	4b4a      	ldr	r3, [pc, #296]	@ (800cba4 <calculateSPLQ31+0x588>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	4b4a      	ldr	r3, [pc, #296]	@ (800cba8 <calculateSPLQ31+0x58c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	21a0      	movs	r1, #160	@ 0xa0
 800ca86:	1879      	adds	r1, r7, r1
 800ca88:	6808      	ldr	r0, [r1, #0]
 800ca8a:	6849      	ldr	r1, [r1, #4]
 800ca8c:	4c47      	ldr	r4, [pc, #284]	@ (800cbac <calculateSPLQ31+0x590>)
 800ca8e:	9403      	str	r4, [sp, #12]
 800ca90:	4c47      	ldr	r4, [pc, #284]	@ (800cbb0 <calculateSPLQ31+0x594>)
 800ca92:	9402      	str	r4, [sp, #8]
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	9200      	str	r2, [sp, #0]
 800ca98:	0033      	movs	r3, r6
 800ca9a:	002a      	movs	r2, r5
 800ca9c:	f000 fa86 	bl	800cfac <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800caa0:	2300      	movs	r3, #0
 800caa2:	2290      	movs	r2, #144	@ 0x90
 800caa4:	18ba      	adds	r2, r7, r2
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	e026      	b.n	800caf8 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800caaa:	2330      	movs	r3, #48	@ 0x30
 800caac:	18fa      	adds	r2, r7, r3
 800caae:	2490      	movs	r4, #144	@ 0x90
 800cab0:	193b      	adds	r3, r7, r4
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	18d3      	adds	r3, r2, r3
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	6859      	ldr	r1, [r3, #4]
 800cabc:	230f      	movs	r3, #15
 800cabe:	425d      	negs	r5, r3
 800cac0:	2305      	movs	r3, #5
 800cac2:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cac4:	193b      	adds	r3, r7, r4
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	009a      	lsls	r2, r3, #2
 800caca:	4b3a      	ldr	r3, [pc, #232]	@ (800cbb4 <calculateSPLQ31+0x598>)
 800cacc:	18d3      	adds	r3, r2, r3
 800cace:	193a      	adds	r2, r7, r4
 800cad0:	6812      	ldr	r2, [r2, #0]
 800cad2:	0094      	lsls	r4, r2, #2
 800cad4:	4a38      	ldr	r2, [pc, #224]	@ (800cbb8 <calculateSPLQ31+0x59c>)
 800cad6:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cad8:	9203      	str	r2, [sp, #12]
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	2300      	movs	r3, #0
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	0033      	movs	r3, r6
 800cae6:	002a      	movs	r2, r5
 800cae8:	f000 fa60 	bl	800cfac <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800caec:	2490      	movs	r4, #144	@ 0x90
 800caee:	193b      	adds	r3, r7, r4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3301      	adds	r3, #1
 800caf4:	193a      	adds	r2, r7, r4
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	2390      	movs	r3, #144	@ 0x90
 800cafa:	18fb      	adds	r3, r7, r3
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b05      	cmp	r3, #5
 800cb00:	d9d3      	bls.n	800caaa <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cb02:	4b2b      	ldr	r3, [pc, #172]	@ (800cbb0 <calculateSPLQ31+0x594>)
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	4b2d      	ldr	r3, [pc, #180]	@ (800cbbc <calculateSPLQ31+0x5a0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	18d2      	adds	r2, r2, r3
 800cb0c:	4b2b      	ldr	r3, [pc, #172]	@ (800cbbc <calculateSPLQ31+0x5a0>)
 800cb0e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb10:	4b26      	ldr	r3, [pc, #152]	@ (800cbac <calculateSPLQ31+0x590>)
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc0 <calculateSPLQ31+0x5a4>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	18d2      	adds	r2, r2, r3
 800cb1a:	4b29      	ldr	r3, [pc, #164]	@ (800cbc0 <calculateSPLQ31+0x5a4>)
 800cb1c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb1e:	2300      	movs	r3, #0
 800cb20:	228c      	movs	r2, #140	@ 0x8c
 800cb22:	18ba      	adds	r2, r7, r2
 800cb24:	6013      	str	r3, [r2, #0]
 800cb26:	e025      	b.n	800cb74 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb28:	4b22      	ldr	r3, [pc, #136]	@ (800cbb4 <calculateSPLQ31+0x598>)
 800cb2a:	208c      	movs	r0, #140	@ 0x8c
 800cb2c:	183a      	adds	r2, r7, r0
 800cb2e:	6812      	ldr	r2, [r2, #0]
 800cb30:	0092      	lsls	r2, r2, #2
 800cb32:	58d2      	ldr	r2, [r2, r3]
 800cb34:	4b23      	ldr	r3, [pc, #140]	@ (800cbc4 <calculateSPLQ31+0x5a8>)
 800cb36:	1839      	adds	r1, r7, r0
 800cb38:	6809      	ldr	r1, [r1, #0]
 800cb3a:	0089      	lsls	r1, r1, #2
 800cb3c:	58cb      	ldr	r3, [r1, r3]
 800cb3e:	18d1      	adds	r1, r2, r3
 800cb40:	4b20      	ldr	r3, [pc, #128]	@ (800cbc4 <calculateSPLQ31+0x5a8>)
 800cb42:	183a      	adds	r2, r7, r0
 800cb44:	6812      	ldr	r2, [r2, #0]
 800cb46:	0092      	lsls	r2, r2, #2
 800cb48:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb4a:	4b1b      	ldr	r3, [pc, #108]	@ (800cbb8 <calculateSPLQ31+0x59c>)
 800cb4c:	183a      	adds	r2, r7, r0
 800cb4e:	6812      	ldr	r2, [r2, #0]
 800cb50:	0092      	lsls	r2, r2, #2
 800cb52:	58d2      	ldr	r2, [r2, r3]
 800cb54:	4b1c      	ldr	r3, [pc, #112]	@ (800cbc8 <calculateSPLQ31+0x5ac>)
 800cb56:	1839      	adds	r1, r7, r0
 800cb58:	6809      	ldr	r1, [r1, #0]
 800cb5a:	0089      	lsls	r1, r1, #2
 800cb5c:	58cb      	ldr	r3, [r1, r3]
 800cb5e:	18d1      	adds	r1, r2, r3
 800cb60:	4b19      	ldr	r3, [pc, #100]	@ (800cbc8 <calculateSPLQ31+0x5ac>)
 800cb62:	183a      	adds	r2, r7, r0
 800cb64:	6812      	ldr	r2, [r2, #0]
 800cb66:	0092      	lsls	r2, r2, #2
 800cb68:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb6a:	183b      	adds	r3, r7, r0
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	183a      	adds	r2, r7, r0
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	238c      	movs	r3, #140	@ 0x8c
 800cb76:	18fb      	adds	r3, r7, r3
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b05      	cmp	r3, #5
 800cb7c:	d9d4      	bls.n	800cb28 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cb7e:	4b13      	ldr	r3, [pc, #76]	@ (800cbcc <calculateSPLQ31+0x5b0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	4b11      	ldr	r3, [pc, #68]	@ (800cbcc <calculateSPLQ31+0x5b0>)
 800cb86:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cb88:	4b10      	ldr	r3, [pc, #64]	@ (800cbcc <calculateSPLQ31+0x5b0>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b0f      	cmp	r3, #15
 800cb8e:	d905      	bls.n	800cb9c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cb90:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd0 <calculateSPLQ31+0x5b4>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cb96:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd4 <calculateSPLQ31+0x5b8>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	701a      	strb	r2, [r3, #0]
    }
}
 800cb9c:	46c0      	nop			@ (mov r8, r8)
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	b02f      	add	sp, #188	@ 0xbc
 800cba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cba4:	200000c0 	.word	0x200000c0
 800cba8:	200000c4 	.word	0x200000c4
 800cbac:	20001180 	.word	0x20001180
 800cbb0:	2000117c 	.word	0x2000117c
 800cbb4:	20001184 	.word	0x20001184
 800cbb8:	2000119c 	.word	0x2000119c
 800cbbc:	20001bc4 	.word	0x20001bc4
 800cbc0:	20001bc8 	.word	0x20001bc8
 800cbc4:	20001bcc 	.word	0x20001bcc
 800cbc8:	20001be4 	.word	0x20001be4
 800cbcc:	20001bfc 	.word	0x20001bfc
 800cbd0:	20001171 	.word	0x20001171
 800cbd4:	2000116f 	.word	0x2000116f

0800cbd8 <resetSPLstate>:

static void resetSPLstate(void)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cbde:	4b11      	ldr	r3, [pc, #68]	@ (800cc24 <resetSPLstate+0x4c>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cbe4:	4b10      	ldr	r3, [pc, #64]	@ (800cc28 <resetSPLstate+0x50>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cbea:	4b10      	ldr	r3, [pc, #64]	@ (800cc2c <resetSPLstate+0x54>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	607b      	str	r3, [r7, #4]
 800cbf4:	e00c      	b.n	800cc10 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cbf6:	4b0e      	ldr	r3, [pc, #56]	@ (800cc30 <resetSPLstate+0x58>)
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	0092      	lsls	r2, r2, #2
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cc00:	4b0c      	ldr	r3, [pc, #48]	@ (800cc34 <resetSPLstate+0x5c>)
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	0092      	lsls	r2, r2, #2
 800cc06:	2100      	movs	r1, #0
 800cc08:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	607b      	str	r3, [r7, #4]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d9ef      	bls.n	800cbf6 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc16:	4b08      	ldr	r3, [pc, #32]	@ (800cc38 <resetSPLstate+0x60>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	701a      	strb	r2, [r3, #0]
}
 800cc1c:	46c0      	nop			@ (mov r8, r8)
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	b002      	add	sp, #8
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	20001bc4 	.word	0x20001bc4
 800cc28:	20001bc8 	.word	0x20001bc8
 800cc2c:	20001bfc 	.word	0x20001bfc
 800cc30:	20001bcc 	.word	0x20001bcc
 800cc34:	20001be4 	.word	0x20001be4
 800cc38:	20001171 	.word	0x20001171

0800cc3c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc3c:	b5b0      	push	{r4, r5, r7, lr}
 800cc3e:	b090      	sub	sp, #64	@ 0x40
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	0019      	movs	r1, r3
 800cc48:	1dfb      	adds	r3, r7, #7
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	1dbb      	adds	r3, r7, #6
 800cc4e:	1c0a      	adds	r2, r1, #0
 800cc50:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc52:	1dfb      	adds	r3, r7, #7
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc5a:	4b3b      	ldr	r3, [pc, #236]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cc60:	4b3a      	ldr	r3, [pc, #232]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x110>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cc6e:	2305      	movs	r3, #5
 800cc70:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cc72:	2300      	movs	r3, #0
 800cc74:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc76:	e040      	b.n	800ccfa <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	18d3      	adds	r3, r2, r3
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	409a      	lsls	r2, r3
 800cc86:	0013      	movs	r3, r2
 800cc88:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cc8a:	4b30      	ldr	r3, [pc, #192]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x110>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	425a      	negs	r2, r3
 800cc90:	4b2e      	ldr	r3, [pc, #184]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x110>)
 800cc92:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cc94:	2418      	movs	r4, #24
 800cc96:	193a      	adds	r2, r7, r4
 800cc98:	492c      	ldr	r1, [pc, #176]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x110>)
 800cc9a:	231c      	movs	r3, #28
 800cc9c:	18f8      	adds	r0, r7, r3
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f011 fd88 	bl	801e7b4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cca4:	2514      	movs	r5, #20
 800cca6:	197a      	adds	r2, r7, r5
 800cca8:	1939      	adds	r1, r7, r4
 800ccaa:	4829      	ldr	r0, [pc, #164]	@ (800cd50 <getFilteredMaxAmplitudeQ31+0x114>)
 800ccac:	2301      	movs	r3, #1
 800ccae:	f011 fd4f 	bl	801e750 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800ccb2:	2410      	movs	r4, #16
 800ccb4:	193a      	adds	r2, r7, r4
 800ccb6:	4924      	ldr	r1, [pc, #144]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccb8:	4826      	ldr	r0, [pc, #152]	@ (800cd54 <getFilteredMaxAmplitudeQ31+0x118>)
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f011 fd48 	bl	801e750 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800ccc0:	4a21      	ldr	r2, [pc, #132]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc2:	1939      	adds	r1, r7, r4
 800ccc4:	1978      	adds	r0, r7, r5
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	f011 fd74 	bl	801e7b4 <arm_add_q31>

        lastData = fx;
 800cccc:	69fa      	ldr	r2, [r7, #28]
 800ccce:	4b1f      	ldr	r3, [pc, #124]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x110>)
 800ccd0:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ccd2:	4b1d      	ldr	r3, [pc, #116]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	da03      	bge.n	800cce4 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cce2:	e007      	b.n	800ccf4 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cce4:	4b18      	ldr	r3, [pc, #96]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccea:	429a      	cmp	r2, r3
 800ccec:	dd02      	ble.n	800ccf4 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800ccee:	4b16      	ldr	r3, [pc, #88]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800ccf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d3ba      	bcc.n	800cc78 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd04:	17da      	asrs	r2, r3, #31
 800cd06:	189b      	adds	r3, r3, r2
 800cd08:	4053      	eors	r3, r2
 800cd0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d200      	bcs.n	800cd1a <getFilteredMaxAmplitudeQ31+0xde>
 800cd18:	0013      	movs	r3, r2
 800cd1a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd20:	40da      	lsrs	r2, r3
 800cd22:	0013      	movs	r3, r2
 800cd24:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd26:	1dbb      	adds	r3, r7, #6
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d007      	beq.n	800cd3e <getFilteredMaxAmplitudeQ31+0x102>
 800cd2e:	4b0a      	ldr	r3, [pc, #40]	@ (800cd58 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6a3a      	ldr	r2, [r7, #32]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d902      	bls.n	800cd3e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd3a:	6a3a      	ldr	r2, [r7, #32]
 800cd3c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
}
 800cd40:	0018      	movs	r0, r3
 800cd42:	46bd      	mov	sp, r7
 800cd44:	b010      	add	sp, #64	@ 0x40
 800cd46:	bdb0      	pop	{r4, r5, r7, pc}
 800cd48:	20002000 	.word	0x20002000
 800cd4c:	20002004 	.word	0x20002004
 800cd50:	080257b4 	.word	0x080257b4
 800cd54:	080257b8 	.word	0x080257b8
 800cd58:	20001178 	.word	0x20001178

0800cd5c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cd68:	4913      	ldr	r1, [pc, #76]	@ (800cdb8 <floatToIntAndFrac2dp+0x5c>)
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7f4 f918 	bl	8000fa0 <__aeabi_fmul>
 800cd70:	1c03      	adds	r3, r0, #0
 800cd72:	1c18      	adds	r0, r3, #0
 800cd74:	f016 f952 	bl	802301c <roundf>
 800cd78:	1c03      	adds	r3, r0, #0
 800cd7a:	1c18      	adds	r0, r3, #0
 800cd7c:	f7f3 fc4e 	bl	800061c <__aeabi_f2uiz>
 800cd80:	0003      	movs	r3, r0
 800cd82:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2164      	movs	r1, #100	@ 0x64
 800cd88:	0018      	movs	r0, r3
 800cd8a:	f7f3 fa0b 	bl	80001a4 <__udivsi3>
 800cd8e:	0003      	movs	r3, r0
 800cd90:	001a      	movs	r2, r3
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2164      	movs	r1, #100	@ 0x64
 800cda2:	434b      	muls	r3, r1
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	701a      	strb	r2, [r3, #0]
}
 800cdae:	46c0      	nop			@ (mov r8, r8)
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	b006      	add	sp, #24
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	46c0      	nop			@ (mov r8, r8)
 800cdb8:	42c80000 	.word	0x42c80000

0800cdbc <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800cdc8:	4914      	ldr	r1, [pc, #80]	@ (800ce1c <floatToIntAndFrac1dp+0x60>)
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7f4 f8e8 	bl	8000fa0 <__aeabi_fmul>
 800cdd0:	1c03      	adds	r3, r0, #0
 800cdd2:	1c18      	adds	r0, r3, #0
 800cdd4:	f016 f922 	bl	802301c <roundf>
 800cdd8:	1c03      	adds	r3, r0, #0
 800cdda:	1c18      	adds	r0, r3, #0
 800cddc:	f7f3 fc1e 	bl	800061c <__aeabi_f2uiz>
 800cde0:	0003      	movs	r3, r0
 800cde2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	210a      	movs	r1, #10
 800cde8:	0018      	movs	r0, r3
 800cdea:	f7f3 f9db 	bl	80001a4 <__udivsi3>
 800cdee:	0003      	movs	r3, r0
 800cdf0:	001a      	movs	r2, r3
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	1c19      	adds	r1, r3, #0
 800ce02:	0089      	lsls	r1, r1, #2
 800ce04:	18cb      	adds	r3, r1, r3
 800ce06:	18db      	adds	r3, r3, r3
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	701a      	strb	r2, [r3, #0]
}
 800ce12:	46c0      	nop			@ (mov r8, r8)
 800ce14:	46bd      	mov	sp, r7
 800ce16:	b006      	add	sp, #24
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	46c0      	nop			@ (mov r8, r8)
 800ce1c:	41200000 	.word	0x41200000

0800ce20 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce20:	b590      	push	{r4, r7, lr}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7f4 fbce 	bl	80015d0 <__aeabi_i2f>
 800ce34:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	f7f4 fbca 	bl	80015d0 <__aeabi_i2f>
 800ce3c:	1c03      	adds	r3, r0, #0
 800ce3e:	4918      	ldr	r1, [pc, #96]	@ (800cea0 <sumToIntAverage+0x80>)
 800ce40:	1c18      	adds	r0, r3, #0
 800ce42:	f7f3 fec7 	bl	8000bd4 <__aeabi_fdiv>
 800ce46:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce48:	1c19      	adds	r1, r3, #0
 800ce4a:	1c20      	adds	r0, r4, #0
 800ce4c:	f7f3 fd38 	bl	80008c0 <__aeabi_fadd>
 800ce50:	1c03      	adds	r3, r0, #0
 800ce52:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce56:	f7f4 fc07 	bl	8001668 <__aeabi_ui2f>
 800ce5a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce5c:	1c19      	adds	r1, r3, #0
 800ce5e:	1c20      	adds	r0, r4, #0
 800ce60:	f7f3 feb8 	bl	8000bd4 <__aeabi_fdiv>
 800ce64:	1c03      	adds	r3, r0, #0
 800ce66:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	2310      	movs	r3, #16
 800ce70:	18f9      	adds	r1, r7, r3
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	1c18      	adds	r0, r3, #0
 800ce76:	f7ff ffa1 	bl	800cdbc <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	2bff      	cmp	r3, #255	@ 0xff
 800ce7e:	d906      	bls.n	800ce8e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	22ff      	movs	r2, #255	@ 0xff
 800ce84:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2209      	movs	r2, #9
 800ce8a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ce8c:	e003      	b.n	800ce96 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	701a      	strb	r2, [r3, #0]
}
 800ce96:	46c0      	nop			@ (mov r8, r8)
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	b007      	add	sp, #28
 800ce9c:	bd90      	pop	{r4, r7, pc}
 800ce9e:	46c0      	nop			@ (mov r8, r8)
 800cea0:	41200000 	.word	0x41200000

0800cea4 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2280      	movs	r2, #128	@ 0x80
 800ceb6:	0612      	lsls	r2, r2, #24
 800ceb8:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	4a18      	ldr	r2, [pc, #96]	@ (800cf20 <findMinMax+0x7c>)
 800cebe:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cec0:	2300      	movs	r3, #0
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	e022      	b.n	800cf0c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	18d3      	adds	r3, r2, r3
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	da06      	bge.n	800cee6 <findMinMax+0x42>
        {
            min[0] = array[i];
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	18d3      	adds	r3, r2, r3
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	18d3      	adds	r3, r2, r3
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	dd06      	ble.n	800cf06 <findMinMax+0x62>
        {
            max[0] = array[i];
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	18d3      	adds	r3, r2, r3
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	617b      	str	r3, [r7, #20]
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d3d8      	bcc.n	800cec6 <findMinMax+0x22>
        }
    }
}
 800cf14:	46c0      	nop			@ (mov r8, r8)
 800cf16:	46c0      	nop			@ (mov r8, r8)
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b006      	add	sp, #24
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	46c0      	nop			@ (mov r8, r8)
 800cf20:	7fffffff 	.word	0x7fffffff

0800cf24 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d302      	bcc.n	800cf40 <getPo2factor+0x1c>
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d107      	bne.n	800cf50 <getPo2factor+0x2c>
    {
        return 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	e00d      	b.n	800cf60 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	085b      	lsrs	r3, r3, #1
 800cf48:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d2f5      	bcs.n	800cf44 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
}
 800cf60:	0018      	movs	r0, r3
 800cf62:	46bd      	mov	sp, r7
 800cf64:	b004      	add	sp, #16
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7f4 fb76 	bl	8001668 <__aeabi_ui2f>
 800cf7c:	1c03      	adds	r3, r0, #0
 800cf7e:	1c19      	adds	r1, r3, #0
 800cf80:	68b8      	ldr	r0, [r7, #8]
 800cf82:	f7f4 f80d 	bl	8000fa0 <__aeabi_fmul>
 800cf86:	1c03      	adds	r3, r0, #0
 800cf88:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	2310      	movs	r3, #16
 800cf92:	18f9      	adds	r1, r7, r3
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	1c18      	adds	r0, r3, #0
 800cf98:	f7ff fee0 	bl	800cd5c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	801a      	strh	r2, [r3, #0]
}
 800cfa4:	46c0      	nop			@ (mov r8, r8)
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	b006      	add	sp, #24
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60b8      	str	r0, [r7, #8]
 800cfb4:	60f9      	str	r1, [r7, #12]
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	6a3a      	ldr	r2, [r7, #32]
 800cfbe:	68b8      	ldr	r0, [r7, #8]
 800cfc0:	68f9      	ldr	r1, [r7, #12]
 800cfc2:	f7fa f97b 	bl	80072bc <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	18d2      	adds	r2, r2, r3
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	18d2      	adds	r2, r2, r3
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	18d2      	adds	r2, r2, r3
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	18d2      	adds	r2, r2, r3
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cfe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	0011      	movs	r1, r2
 800cfec:	0018      	movs	r0, r3
 800cfee:	f7fa f9f5 	bl	80073dc <correctIntFracNumber>
}
 800cff2:	46c0      	nop			@ (mov r8, r8)
 800cff4:	46bd      	mov	sp, r7
 800cff6:	b004      	add	sp, #16
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b086      	sub	sp, #24
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d00a:	2300      	movs	r3, #0
 800d00c:	613b      	str	r3, [r7, #16]
 800d00e:	e019      	b.n	800d044 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	18d3      	adds	r3, r2, r3
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	3201      	adds	r2, #1
 800d020:	0052      	lsls	r2, r2, #1
 800d022:	68f9      	ldr	r1, [r7, #12]
 800d024:	188a      	adds	r2, r1, r2
 800d026:	8812      	ldrh	r2, [r2, #0]
 800d028:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d02a:	0019      	movs	r1, r3
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d034:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d036:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	3301      	adds	r3, #1
 800d03c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	3304      	adds	r3, #4
 800d042:	613b      	str	r3, [r7, #16]
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d3e1      	bcc.n	800d010 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d04c:	46c0      	nop			@ (mov r8, r8)
 800d04e:	46c0      	nop			@ (mov r8, r8)
 800d050:	46bd      	mov	sp, r7
 800d052:	b006      	add	sp, #24
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d058:	b580      	push	{r7, lr}
 800d05a:	af00      	add	r7, sp, #0
  init = false;
 800d05c:	4b02      	ldr	r3, [pc, #8]	@ (800d068 <InitDone+0x10>)
 800d05e:	2200      	movs	r2, #0
 800d060:	701a      	strb	r2, [r3, #0]
}
 800d062:	46c0      	nop			@ (mov r8, r8)
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	200000cc 	.word	0x200000cc

0800d06c <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d072:	f7f9 f949 	bl	8006308 <ReadBatteryVoltage>
 800d076:	1c02      	adds	r2, r0, #0
 800d078:	4b25      	ldr	r3, [pc, #148]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d07a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d07c:	4b24      	ldr	r3, [pc, #144]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4924      	ldr	r1, [pc, #144]	@ (800d114 <batteryChargeCheck+0xa8>)
 800d082:	1c18      	adds	r0, r3, #0
 800d084:	f7f3 fa54 	bl	8000530 <__aeabi_fcmplt>
 800d088:	1e03      	subs	r3, r0, #0
 800d08a:	d002      	beq.n	800d092 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d08c:	1dfb      	adds	r3, r7, #7
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d092:	4b1f      	ldr	r3, [pc, #124]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	491f      	ldr	r1, [pc, #124]	@ (800d114 <batteryChargeCheck+0xa8>)
 800d098:	1c18      	adds	r0, r3, #0
 800d09a:	f7f3 fa67 	bl	800056c <__aeabi_fcmpge>
 800d09e:	1e03      	subs	r3, r0, #0
 800d0a0:	d00d      	beq.n	800d0be <batteryChargeCheck+0x52>
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	1c18      	adds	r0, r3, #0
 800d0a8:	f7f6 f9dc 	bl	8003464 <__aeabi_f2d>
 800d0ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d118 <batteryChargeCheck+0xac>)
 800d0ae:	4b1b      	ldr	r3, [pc, #108]	@ (800d11c <batteryChargeCheck+0xb0>)
 800d0b0:	f7f3 fa04 	bl	80004bc <__aeabi_dcmplt>
 800d0b4:	1e03      	subs	r3, r0, #0
 800d0b6:	d002      	beq.n	800d0be <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d0b8:	1dfb      	adds	r3, r7, #7
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d0be:	4b14      	ldr	r3, [pc, #80]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	1c18      	adds	r0, r3, #0
 800d0c4:	f7f6 f9ce 	bl	8003464 <__aeabi_f2d>
 800d0c8:	4a13      	ldr	r2, [pc, #76]	@ (800d118 <batteryChargeCheck+0xac>)
 800d0ca:	4b14      	ldr	r3, [pc, #80]	@ (800d11c <batteryChargeCheck+0xb0>)
 800d0cc:	f7f3 fa14 	bl	80004f8 <__aeabi_dcmpge>
 800d0d0:	1e03      	subs	r3, r0, #0
 800d0d2:	d00b      	beq.n	800d0ec <batteryChargeCheck+0x80>
 800d0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2181      	movs	r1, #129	@ 0x81
 800d0da:	05c9      	lsls	r1, r1, #23
 800d0dc:	1c18      	adds	r0, r3, #0
 800d0de:	f7f3 fa27 	bl	8000530 <__aeabi_fcmplt>
 800d0e2:	1e03      	subs	r3, r0, #0
 800d0e4:	d002      	beq.n	800d0ec <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d0e6:	1dfb      	adds	r3, r7, #7
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d0ec:	4b08      	ldr	r3, [pc, #32]	@ (800d110 <batteryChargeCheck+0xa4>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2181      	movs	r1, #129	@ 0x81
 800d0f2:	05c9      	lsls	r1, r1, #23
 800d0f4:	1c18      	adds	r0, r3, #0
 800d0f6:	f7f3 fa39 	bl	800056c <__aeabi_fcmpge>
 800d0fa:	1e03      	subs	r3, r0, #0
 800d0fc:	d002      	beq.n	800d104 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d0fe:	1dfb      	adds	r3, r7, #7
 800d100:	2203      	movs	r2, #3
 800d102:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d104:	1dfb      	adds	r3, r7, #7
 800d106:	781b      	ldrb	r3, [r3, #0]
}
 800d108:	0018      	movs	r0, r3
 800d10a:	46bd      	mov	sp, r7
 800d10c:	b002      	add	sp, #8
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	20002018 	.word	0x20002018
 800d114:	40600000 	.word	0x40600000
 800d118:	9999999a 	.word	0x9999999a
 800d11c:	400d9999 	.word	0x400d9999

0800d120 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d120:	b5b0      	push	{r4, r5, r7, lr}
 800d122:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d124:	f7f9 f952 	bl	80063cc <ReadSolarVoltage>
 800d128:	0003      	movs	r3, r0
 800d12a:	001a      	movs	r2, r3
 800d12c:	4b1a      	ldr	r3, [pc, #104]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d12e:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d130:	4b19      	ldr	r3, [pc, #100]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	4a19      	ldr	r2, [pc, #100]	@ (800d19c <Calculate_LED_ON+0x7c>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d802      	bhi.n	800d140 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d13a:	4b17      	ldr	r3, [pc, #92]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d13c:	4a18      	ldr	r2, [pc, #96]	@ (800d1a0 <Calculate_LED_ON+0x80>)
 800d13e:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d140:	4b15      	ldr	r3, [pc, #84]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	4a17      	ldr	r2, [pc, #92]	@ (800d1a4 <Calculate_LED_ON+0x84>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d902      	bls.n	800d150 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d14a:	4b13      	ldr	r3, [pc, #76]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d14c:	4a15      	ldr	r2, [pc, #84]	@ (800d1a4 <Calculate_LED_ON+0x84>)
 800d14e:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d150:	4b11      	ldr	r3, [pc, #68]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d152:	881b      	ldrh	r3, [r3, #0]
 800d154:	0018      	movs	r0, r3
 800d156:	f7f6 f933 	bl	80033c0 <__aeabi_i2d>
 800d15a:	0004      	movs	r4, r0
 800d15c:	000d      	movs	r5, r1
 800d15e:	4b0e      	ldr	r3, [pc, #56]	@ (800d198 <Calculate_LED_ON+0x78>)
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	001a      	movs	r2, r3
 800d164:	4b10      	ldr	r3, [pc, #64]	@ (800d1a8 <Calculate_LED_ON+0x88>)
 800d166:	1a9b      	subs	r3, r3, r2
 800d168:	0018      	movs	r0, r3
 800d16a:	f7f6 f929 	bl	80033c0 <__aeabi_i2d>
 800d16e:	2200      	movs	r2, #0
 800d170:	4b0e      	ldr	r3, [pc, #56]	@ (800d1ac <Calculate_LED_ON+0x8c>)
 800d172:	f7f5 fa63 	bl	800263c <__aeabi_dmul>
 800d176:	0002      	movs	r2, r0
 800d178:	000b      	movs	r3, r1
 800d17a:	0020      	movs	r0, r4
 800d17c:	0029      	movs	r1, r5
 800d17e:	f7f4 fab5 	bl	80016ec <__aeabi_dadd>
 800d182:	0002      	movs	r2, r0
 800d184:	000b      	movs	r3, r1
 800d186:	0010      	movs	r0, r2
 800d188:	0019      	movs	r1, r3
 800d18a:	f7f3 fa5f 	bl	800064c <__aeabi_d2uiz>
 800d18e:	0003      	movs	r3, r0
 800d190:	b29b      	uxth	r3, r3
}
 800d192:	0018      	movs	r0, r3
 800d194:	46bd      	mov	sp, r7
 800d196:	bdb0      	pop	{r4, r5, r7, pc}
 800d198:	2000201c 	.word	0x2000201c
 800d19c:	00000b53 	.word	0x00000b53
 800d1a0:	00000b54 	.word	0x00000b54
 800d1a4:	0000125c 	.word	0x0000125c
 800d1a8:	00000dee 	.word	0x00000dee
 800d1ac:	3ff80000 	.word	0x3ff80000

0800d1b0 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	0004      	movs	r4, r0
 800d1b8:	0008      	movs	r0, r1
 800d1ba:	0011      	movs	r1, r2
 800d1bc:	1dbb      	adds	r3, r7, #6
 800d1be:	1c22      	adds	r2, r4, #0
 800d1c0:	801a      	strh	r2, [r3, #0]
 800d1c2:	1d3b      	adds	r3, r7, #4
 800d1c4:	1c02      	adds	r2, r0, #0
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	1cbb      	adds	r3, r7, #2
 800d1ca:	1c0a      	adds	r2, r1, #0
 800d1cc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d1ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d20c <SetStatusLED+0x5c>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d107      	bne.n	800d1e6 <SetStatusLED+0x36>
 800d1d6:	4b0e      	ldr	r3, [pc, #56]	@ (800d210 <SetStatusLED+0x60>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d103      	bne.n	800d1e6 <SetStatusLED+0x36>
 800d1de:	4b0d      	ldr	r3, [pc, #52]	@ (800d214 <SetStatusLED+0x64>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00e      	beq.n	800d204 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d1e6:	2380      	movs	r3, #128	@ 0x80
 800d1e8:	05db      	lsls	r3, r3, #23
 800d1ea:	1dba      	adds	r2, r7, #6
 800d1ec:	8812      	ldrh	r2, [r2, #0]
 800d1ee:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d1f0:	2380      	movs	r3, #128	@ 0x80
 800d1f2:	05db      	lsls	r3, r3, #23
 800d1f4:	1d3a      	adds	r2, r7, #4
 800d1f6:	8812      	ldrh	r2, [r2, #0]
 800d1f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d1fa:	2380      	movs	r3, #128	@ 0x80
 800d1fc:	05db      	lsls	r3, r3, #23
 800d1fe:	1cba      	adds	r2, r7, #2
 800d200:	8812      	ldrh	r2, [r2, #0]
 800d202:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d204:	46c0      	nop			@ (mov r8, r8)
 800d206:	46bd      	mov	sp, r7
 800d208:	b003      	add	sp, #12
 800d20a:	bd90      	pop	{r4, r7, pc}
 800d20c:	20002009 	.word	0x20002009
 800d210:	200000cc 	.word	0x200000cc
 800d214:	2000200a 	.word	0x2000200a

0800d218 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d218:	b590      	push	{r4, r7, lr}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	0004      	movs	r4, r0
 800d220:	0008      	movs	r0, r1
 800d222:	0011      	movs	r1, r2
 800d224:	1dfb      	adds	r3, r7, #7
 800d226:	1c22      	adds	r2, r4, #0
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	1dbb      	adds	r3, r7, #6
 800d22c:	1c02      	adds	r2, r0, #0
 800d22e:	701a      	strb	r2, [r3, #0]
 800d230:	1d7b      	adds	r3, r7, #5
 800d232:	1c0a      	adds	r2, r1, #0
 800d234:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d236:	4b19      	ldr	r3, [pc, #100]	@ (800d29c <SetDBLED+0x84>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d107      	bne.n	800d24e <SetDBLED+0x36>
 800d23e:	4b18      	ldr	r3, [pc, #96]	@ (800d2a0 <SetDBLED+0x88>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d103      	bne.n	800d24e <SetDBLED+0x36>
 800d246:	4b17      	ldr	r3, [pc, #92]	@ (800d2a4 <SetDBLED+0x8c>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d022      	beq.n	800d294 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d24e:	1dfb      	adds	r3, r7, #7
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2201      	movs	r2, #1
 800d254:	4053      	eors	r3, r2
 800d256:	b2db      	uxtb	r3, r3
 800d258:	001a      	movs	r2, r3
 800d25a:	4b13      	ldr	r3, [pc, #76]	@ (800d2a8 <SetDBLED+0x90>)
 800d25c:	2101      	movs	r1, #1
 800d25e:	0018      	movs	r0, r3
 800d260:	f003 f8ad 	bl	80103be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d264:	1dbb      	adds	r3, r7, #6
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2201      	movs	r2, #1
 800d26a:	4053      	eors	r3, r2
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	001a      	movs	r2, r3
 800d270:	2380      	movs	r3, #128	@ 0x80
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	480c      	ldr	r0, [pc, #48]	@ (800d2a8 <SetDBLED+0x90>)
 800d276:	0019      	movs	r1, r3
 800d278:	f003 f8a1 	bl	80103be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d27c:	1d7b      	adds	r3, r7, #5
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2201      	movs	r2, #1
 800d282:	4053      	eors	r3, r2
 800d284:	b2db      	uxtb	r3, r3
 800d286:	001a      	movs	r2, r3
 800d288:	2380      	movs	r3, #128	@ 0x80
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4806      	ldr	r0, [pc, #24]	@ (800d2a8 <SetDBLED+0x90>)
 800d28e:	0019      	movs	r1, r3
 800d290:	f003 f895 	bl	80103be <HAL_GPIO_WritePin>
  }
}
 800d294:	46c0      	nop			@ (mov r8, r8)
 800d296:	46bd      	mov	sp, r7
 800d298:	b003      	add	sp, #12
 800d29a:	bd90      	pop	{r4, r7, pc}
 800d29c:	20002009 	.word	0x20002009
 800d2a0:	200000cc 	.word	0x200000cc
 800d2a4:	2000200a 	.word	0x2000200a
 800d2a8:	50000400 	.word	0x50000400

0800d2ac <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d2ac:	b590      	push	{r4, r7, lr}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	0004      	movs	r4, r0
 800d2b4:	0008      	movs	r0, r1
 800d2b6:	0011      	movs	r1, r2
 800d2b8:	1dbb      	adds	r3, r7, #6
 800d2ba:	1c22      	adds	r2, r4, #0
 800d2bc:	801a      	strh	r2, [r3, #0]
 800d2be:	1d3b      	adds	r3, r7, #4
 800d2c0:	1c02      	adds	r2, r0, #0
 800d2c2:	801a      	strh	r2, [r3, #0]
 800d2c4:	1cbb      	adds	r3, r7, #2
 800d2c6:	1c0a      	adds	r2, r1, #0
 800d2c8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d304 <SetVocLED+0x58>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d107      	bne.n	800d2e2 <SetVocLED+0x36>
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d308 <SetVocLED+0x5c>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d103      	bne.n	800d2e2 <SetVocLED+0x36>
 800d2da:	4b0c      	ldr	r3, [pc, #48]	@ (800d30c <SetVocLED+0x60>)
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00b      	beq.n	800d2fa <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d2e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d310 <SetVocLED+0x64>)
 800d2e4:	1dba      	adds	r2, r7, #6
 800d2e6:	8812      	ldrh	r2, [r2, #0]
 800d2e8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d2ea:	4b09      	ldr	r3, [pc, #36]	@ (800d310 <SetVocLED+0x64>)
 800d2ec:	1d3a      	adds	r2, r7, #4
 800d2ee:	8812      	ldrh	r2, [r2, #0]
 800d2f0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d2f2:	4b07      	ldr	r3, [pc, #28]	@ (800d310 <SetVocLED+0x64>)
 800d2f4:	1cba      	adds	r2, r7, #2
 800d2f6:	8812      	ldrh	r2, [r2, #0]
 800d2f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d2fa:	46c0      	nop			@ (mov r8, r8)
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	b003      	add	sp, #12
 800d300:	bd90      	pop	{r4, r7, pc}
 800d302:	46c0      	nop			@ (mov r8, r8)
 800d304:	20002009 	.word	0x20002009
 800d308:	200000cc 	.word	0x200000cc
 800d30c:	2000200a 	.word	0x2000200a
 800d310:	40000400 	.word	0x40000400

0800d314 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d318:	4b08      	ldr	r3, [pc, #32]	@ (800d33c <SetMeasurementIndicator+0x28>)
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d103      	bne.n	800d328 <SetMeasurementIndicator+0x14>
 800d320:	4b07      	ldr	r3, [pc, #28]	@ (800d340 <SetMeasurementIndicator+0x2c>)
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d328:	f7ff fefa 	bl	800d120 <Calculate_LED_ON>
 800d32c:	0003      	movs	r3, r0
 800d32e:	001a      	movs	r2, r3
 800d330:	2380      	movs	r3, #128	@ 0x80
 800d332:	05db      	lsls	r3, r3, #23
 800d334:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d336:	46c0      	nop			@ (mov r8, r8)
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	20002009 	.word	0x20002009
 800d340:	2000200a 	.word	0x2000200a

0800d344 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d344:	b580      	push	{r7, lr}
 800d346:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d348:	4b07      	ldr	r3, [pc, #28]	@ (800d368 <ResetMeasurementIndicator+0x24>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d103      	bne.n	800d358 <ResetMeasurementIndicator+0x14>
 800d350:	4b06      	ldr	r3, [pc, #24]	@ (800d36c <ResetMeasurementIndicator+0x28>)
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d358:	2380      	movs	r3, #128	@ 0x80
 800d35a:	05db      	lsls	r3, r3, #23
 800d35c:	22fa      	movs	r2, #250	@ 0xfa
 800d35e:	0112      	lsls	r2, r2, #4
 800d360:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d362:	46c0      	nop			@ (mov r8, r8)
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20002009 	.word	0x20002009
 800d36c:	2000200a 	.word	0x2000200a

0800d370 <SetMICIndicator>:
void SetMICIndicator(){
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d374:	4b19      	ldr	r3, [pc, #100]	@ (800d3dc <SetMICIndicator+0x6c>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d103      	bne.n	800d384 <SetMICIndicator+0x14>
 800d37c:	4b18      	ldr	r3, [pc, #96]	@ (800d3e0 <SetMICIndicator+0x70>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d007      	beq.n	800d394 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d384:	f7ff fecc 	bl	800d120 <Calculate_LED_ON>
 800d388:	0003      	movs	r3, r0
 800d38a:	001a      	movs	r2, r3
 800d38c:	2380      	movs	r3, #128	@ 0x80
 800d38e:	05db      	lsls	r3, r3, #23
 800d390:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d392:	e01f      	b.n	800d3d4 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d394:	4b13      	ldr	r3, [pc, #76]	@ (800d3e4 <SetMICIndicator+0x74>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	1c18      	adds	r0, r3, #0
 800d39a:	f7f6 f863 	bl	8003464 <__aeabi_f2d>
 800d39e:	4a12      	ldr	r2, [pc, #72]	@ (800d3e8 <SetMICIndicator+0x78>)
 800d3a0:	4b12      	ldr	r3, [pc, #72]	@ (800d3ec <SetMICIndicator+0x7c>)
 800d3a2:	f7f3 f89f 	bl	80004e4 <__aeabi_dcmpgt>
 800d3a6:	1e03      	subs	r3, r0, #0
 800d3a8:	d00a      	beq.n	800d3c0 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d3aa:	f7ff feb9 	bl	800d120 <Calculate_LED_ON>
 800d3ae:	0003      	movs	r3, r0
 800d3b0:	001a      	movs	r2, r3
 800d3b2:	2380      	movs	r3, #128	@ 0x80
 800d3b4:	05db      	lsls	r3, r3, #23
 800d3b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d3b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f0 <SetMICIndicator+0x80>)
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	701a      	strb	r2, [r3, #0]
}
 800d3be:	e009      	b.n	800d3d4 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d3c0:	f7ff feae 	bl	800d120 <Calculate_LED_ON>
 800d3c4:	0003      	movs	r3, r0
 800d3c6:	001a      	movs	r2, r3
 800d3c8:	2380      	movs	r3, #128	@ 0x80
 800d3ca:	05db      	lsls	r3, r3, #23
 800d3cc:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d3ce:	4b08      	ldr	r3, [pc, #32]	@ (800d3f0 <SetMICIndicator+0x80>)
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	701a      	strb	r2, [r3, #0]
}
 800d3d4:	46c0      	nop			@ (mov r8, r8)
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	46c0      	nop			@ (mov r8, r8)
 800d3dc:	20002009 	.word	0x20002009
 800d3e0:	2000200a 	.word	0x2000200a
 800d3e4:	20002018 	.word	0x20002018
 800d3e8:	9999999a 	.word	0x9999999a
 800d3ec:	400d9999 	.word	0x400d9999
 800d3f0:	2000200c 	.word	0x2000200c

0800d3f4 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d438 <ResetMICIndicator+0x44>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d103      	bne.n	800d408 <ResetMICIndicator+0x14>
 800d400:	4b0e      	ldr	r3, [pc, #56]	@ (800d43c <ResetMICIndicator+0x48>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d005      	beq.n	800d414 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d408:	2380      	movs	r3, #128	@ 0x80
 800d40a:	05db      	lsls	r3, r3, #23
 800d40c:	22fa      	movs	r2, #250	@ 0xfa
 800d40e:	0112      	lsls	r2, r2, #4
 800d410:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d412:	e00e      	b.n	800d432 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d414:	4b0a      	ldr	r3, [pc, #40]	@ (800d440 <ResetMICIndicator+0x4c>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d105      	bne.n	800d428 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d41c:	2380      	movs	r3, #128	@ 0x80
 800d41e:	05db      	lsls	r3, r3, #23
 800d420:	22fa      	movs	r2, #250	@ 0xfa
 800d422:	0112      	lsls	r2, r2, #4
 800d424:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d426:	e004      	b.n	800d432 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d428:	2380      	movs	r3, #128	@ 0x80
 800d42a:	05db      	lsls	r3, r3, #23
 800d42c:	22fa      	movs	r2, #250	@ 0xfa
 800d42e:	0112      	lsls	r2, r2, #4
 800d430:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d432:	46c0      	nop			@ (mov r8, r8)
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	20002009 	.word	0x20002009
 800d43c:	2000200a 	.word	0x2000200a
 800d440:	2000200c 	.word	0x2000200c

0800d444 <SetESPIndicator>:
void SetESPIndicator(){
 800d444:	b580      	push	{r7, lr}
 800d446:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d448:	4b08      	ldr	r3, [pc, #32]	@ (800d46c <SetESPIndicator+0x28>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d103      	bne.n	800d458 <SetESPIndicator+0x14>
 800d450:	4b07      	ldr	r3, [pc, #28]	@ (800d470 <SetESPIndicator+0x2c>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d006      	beq.n	800d466 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d458:	f7ff fe62 	bl	800d120 <Calculate_LED_ON>
 800d45c:	0003      	movs	r3, r0
 800d45e:	001a      	movs	r2, r3
 800d460:	2380      	movs	r3, #128	@ 0x80
 800d462:	05db      	lsls	r3, r3, #23
 800d464:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d466:	46c0      	nop			@ (mov r8, r8)
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20002009 	.word	0x20002009
 800d470:	2000200a 	.word	0x2000200a

0800d474 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d478:	4b07      	ldr	r3, [pc, #28]	@ (800d498 <ResetESPIndicator+0x24>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d103      	bne.n	800d488 <ResetESPIndicator+0x14>
 800d480:	4b06      	ldr	r3, [pc, #24]	@ (800d49c <ResetESPIndicator+0x28>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d004      	beq.n	800d492 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d488:	2380      	movs	r3, #128	@ 0x80
 800d48a:	05db      	lsls	r3, r3, #23
 800d48c:	22fa      	movs	r2, #250	@ 0xfa
 800d48e:	0112      	lsls	r2, r2, #4
 800d490:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d492:	46c0      	nop			@ (mov r8, r8)
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20002009 	.word	0x20002009
 800d49c:	2000200a 	.word	0x2000200a

0800d4a0 <SetPMIndicator>:

void SetPMIndicator() {
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e4 <SetPMIndicator+0x44>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d103      	bne.n	800d4b4 <SetPMIndicator+0x14>
 800d4ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e8 <SetPMIndicator+0x48>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d014      	beq.n	800d4de <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4b4:	f7ff fe34 	bl	800d120 <Calculate_LED_ON>
 800d4b8:	0003      	movs	r3, r0
 800d4ba:	001a      	movs	r2, r3
 800d4bc:	2380      	movs	r3, #128	@ 0x80
 800d4be:	05db      	lsls	r3, r3, #23
 800d4c0:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d4c2:	f7ff fe2d 	bl	800d120 <Calculate_LED_ON>
 800d4c6:	0003      	movs	r3, r0
 800d4c8:	001a      	movs	r2, r3
 800d4ca:	2380      	movs	r3, #128	@ 0x80
 800d4cc:	05db      	lsls	r3, r3, #23
 800d4ce:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d4d0:	f7ff fe26 	bl	800d120 <Calculate_LED_ON>
 800d4d4:	0003      	movs	r3, r0
 800d4d6:	001a      	movs	r2, r3
 800d4d8:	2380      	movs	r3, #128	@ 0x80
 800d4da:	05db      	lsls	r3, r3, #23
 800d4dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d4de:	46c0      	nop			@ (mov r8, r8)
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	20002009 	.word	0x20002009
 800d4e8:	2000200a 	.word	0x2000200a

0800d4ec <ResetPMIndicator>:

void ResetPMIndicator() {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d524 <ResetPMIndicator+0x38>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d103      	bne.n	800d500 <ResetPMIndicator+0x14>
 800d4f8:	4b0b      	ldr	r3, [pc, #44]	@ (800d528 <ResetPMIndicator+0x3c>)
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00e      	beq.n	800d51e <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d500:	2380      	movs	r3, #128	@ 0x80
 800d502:	05db      	lsls	r3, r3, #23
 800d504:	22fa      	movs	r2, #250	@ 0xfa
 800d506:	0112      	lsls	r2, r2, #4
 800d508:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d50a:	2380      	movs	r3, #128	@ 0x80
 800d50c:	05db      	lsls	r3, r3, #23
 800d50e:	22fa      	movs	r2, #250	@ 0xfa
 800d510:	0112      	lsls	r2, r2, #4
 800d512:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d514:	2380      	movs	r3, #128	@ 0x80
 800d516:	05db      	lsls	r3, r3, #23
 800d518:	22fa      	movs	r2, #250	@ 0xfa
 800d51a:	0112      	lsls	r2, r2, #4
 800d51c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d51e:	46c0      	nop			@ (mov r8, r8)
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	20002009 	.word	0x20002009
 800d528:	2000200a 	.word	0x2000200a

0800d52c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d52c:	b580      	push	{r7, lr}
 800d52e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d530:	23fa      	movs	r3, #250	@ 0xfa
 800d532:	011a      	lsls	r2, r3, #4
 800d534:	23fa      	movs	r3, #250	@ 0xfa
 800d536:	0119      	lsls	r1, r3, #4
 800d538:	23fa      	movs	r3, #250	@ 0xfa
 800d53a:	011b      	lsls	r3, r3, #4
 800d53c:	0018      	movs	r0, r3
 800d53e:	f7ff fe37 	bl	800d1b0 <SetStatusLED>
  SetDBLED(false,false,false);
 800d542:	2200      	movs	r2, #0
 800d544:	2100      	movs	r1, #0
 800d546:	2000      	movs	r0, #0
 800d548:	f7ff fe66 	bl	800d218 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d54c:	23fa      	movs	r3, #250	@ 0xfa
 800d54e:	011a      	lsls	r2, r3, #4
 800d550:	23fa      	movs	r3, #250	@ 0xfa
 800d552:	0119      	lsls	r1, r3, #4
 800d554:	23fa      	movs	r3, #250	@ 0xfa
 800d556:	011b      	lsls	r3, r3, #4
 800d558:	0018      	movs	r0, r3
 800d55a:	f7ff fea7 	bl	800d2ac <SetVocLED>
return;
 800d55e:	46c0      	nop			@ (mov r8, r8)
}
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <SetAllREDLED>:

void SetAllREDLED() {
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d568:	2380      	movs	r3, #128	@ 0x80
 800d56a:	05db      	lsls	r3, r3, #23
 800d56c:	2200      	movs	r2, #0
 800d56e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d570:	2380      	movs	r3, #128	@ 0x80
 800d572:	05db      	lsls	r3, r3, #23
 800d574:	22fa      	movs	r2, #250	@ 0xfa
 800d576:	0112      	lsls	r2, r2, #4
 800d578:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d57a:	2380      	movs	r3, #128	@ 0x80
 800d57c:	05db      	lsls	r3, r3, #23
 800d57e:	22fa      	movs	r2, #250	@ 0xfa
 800d580:	0112      	lsls	r2, r2, #4
 800d582:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d584:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <SetAllREDLED+0x54>)
 800d586:	2200      	movs	r2, #0
 800d588:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d58a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5b8 <SetAllREDLED+0x54>)
 800d58c:	22fa      	movs	r2, #250	@ 0xfa
 800d58e:	0112      	lsls	r2, r2, #4
 800d590:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d592:	4b09      	ldr	r3, [pc, #36]	@ (800d5b8 <SetAllREDLED+0x54>)
 800d594:	22fa      	movs	r2, #250	@ 0xfa
 800d596:	0112      	lsls	r2, r2, #4
 800d598:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d59a:	4b08      	ldr	r3, [pc, #32]	@ (800d5bc <SetAllREDLED+0x58>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	2101      	movs	r1, #1
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f002 ff0c 	bl	80103be <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d5a6:	23fa      	movs	r3, #250	@ 0xfa
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f001 fc80 	bl	800eeb0 <HAL_Delay>
}
 800d5b0:	46c0      	nop			@ (mov r8, r8)
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	46c0      	nop			@ (mov r8, r8)
 800d5b8:	40000400 	.word	0x40000400
 800d5bc:	50000400 	.word	0x50000400

0800d5c0 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800d5c0:	b5b0      	push	{r4, r5, r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	0002      	movs	r2, r0
 800d5c8:	1dbb      	adds	r3, r7, #6
 800d5ca:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800d5cc:	1dbb      	adds	r3, r7, #6
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d05a      	beq.n	800d68a <SetVOCindicator+0xca>
 800d5d4:	1dbb      	adds	r3, r7, #6
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	2b64      	cmp	r3, #100	@ 0x64
 800d5da:	d856      	bhi.n	800d68a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800d5dc:	1dbb      	adds	r3, r7, #6
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	0018      	movs	r0, r3
 800d5e2:	f7f5 feed 	bl	80033c0 <__aeabi_i2d>
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	4b5f      	ldr	r3, [pc, #380]	@ (800d768 <SetVOCindicator+0x1a8>)
 800d5ea:	f7f4 fbe3 	bl	8001db4 <__aeabi_ddiv>
 800d5ee:	0002      	movs	r2, r0
 800d5f0:	000b      	movs	r3, r1
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	495d      	ldr	r1, [pc, #372]	@ (800d76c <SetVOCindicator+0x1ac>)
 800d5f6:	f7f5 fae9 	bl	8002bcc <__aeabi_dsub>
 800d5fa:	0002      	movs	r2, r0
 800d5fc:	000b      	movs	r3, r1
 800d5fe:	0014      	movs	r4, r2
 800d600:	001d      	movs	r5, r3
 800d602:	4b5b      	ldr	r3, [pc, #364]	@ (800d770 <SetVOCindicator+0x1b0>)
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	0018      	movs	r0, r3
 800d608:	f7f5 feda 	bl	80033c0 <__aeabi_i2d>
 800d60c:	0002      	movs	r2, r0
 800d60e:	000b      	movs	r3, r1
 800d610:	0020      	movs	r0, r4
 800d612:	0029      	movs	r1, r5
 800d614:	f7f5 f812 	bl	800263c <__aeabi_dmul>
 800d618:	0002      	movs	r2, r0
 800d61a:	000b      	movs	r3, r1
 800d61c:	0010      	movs	r0, r2
 800d61e:	0019      	movs	r1, r3
 800d620:	f7f3 f814 	bl	800064c <__aeabi_d2uiz>
 800d624:	0003      	movs	r3, r0
 800d626:	b29a      	uxth	r2, r3
 800d628:	4b52      	ldr	r3, [pc, #328]	@ (800d774 <SetVOCindicator+0x1b4>)
 800d62a:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800d62c:	1dbb      	adds	r3, r7, #6
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	0018      	movs	r0, r3
 800d632:	f7f5 fec5 	bl	80033c0 <__aeabi_i2d>
 800d636:	2200      	movs	r2, #0
 800d638:	4b4b      	ldr	r3, [pc, #300]	@ (800d768 <SetVOCindicator+0x1a8>)
 800d63a:	f7f4 fbbb 	bl	8001db4 <__aeabi_ddiv>
 800d63e:	0002      	movs	r2, r0
 800d640:	000b      	movs	r3, r1
 800d642:	0014      	movs	r4, r2
 800d644:	001d      	movs	r5, r3
 800d646:	4b4a      	ldr	r3, [pc, #296]	@ (800d770 <SetVOCindicator+0x1b0>)
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	0018      	movs	r0, r3
 800d64c:	f7f5 feb8 	bl	80033c0 <__aeabi_i2d>
 800d650:	0002      	movs	r2, r0
 800d652:	000b      	movs	r3, r1
 800d654:	0020      	movs	r0, r4
 800d656:	0029      	movs	r1, r5
 800d658:	f7f4 fff0 	bl	800263c <__aeabi_dmul>
 800d65c:	0002      	movs	r2, r0
 800d65e:	000b      	movs	r3, r1
 800d660:	0010      	movs	r0, r2
 800d662:	0019      	movs	r1, r3
 800d664:	f7f2 fff2 	bl	800064c <__aeabi_d2uiz>
 800d668:	0003      	movs	r3, r0
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	4b42      	ldr	r3, [pc, #264]	@ (800d778 <SetVOCindicator+0x1b8>)
 800d66e:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800d670:	4b3f      	ldr	r3, [pc, #252]	@ (800d770 <SetVOCindicator+0x1b0>)
 800d672:	881a      	ldrh	r2, [r3, #0]
 800d674:	4b41      	ldr	r3, [pc, #260]	@ (800d77c <SetVOCindicator+0x1bc>)
 800d676:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d678:	4b40      	ldr	r3, [pc, #256]	@ (800d77c <SetVOCindicator+0x1bc>)
 800d67a:	8818      	ldrh	r0, [r3, #0]
 800d67c:	4b3d      	ldr	r3, [pc, #244]	@ (800d774 <SetVOCindicator+0x1b4>)
 800d67e:	8819      	ldrh	r1, [r3, #0]
 800d680:	4b3d      	ldr	r3, [pc, #244]	@ (800d778 <SetVOCindicator+0x1b8>)
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	001a      	movs	r2, r3
 800d686:	f7ff fe11 	bl	800d2ac <SetVocLED>
  }
  if(VOCi > 100){
 800d68a:	1dbb      	adds	r3, r7, #6
 800d68c:	881b      	ldrh	r3, [r3, #0]
 800d68e:	2b64      	cmp	r3, #100	@ 0x64
 800d690:	d966      	bls.n	800d760 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800d692:	1dbb      	adds	r3, r7, #6
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	0018      	movs	r0, r3
 800d698:	f7f5 fe92 	bl	80033c0 <__aeabi_i2d>
 800d69c:	2200      	movs	r2, #0
 800d69e:	4b32      	ldr	r3, [pc, #200]	@ (800d768 <SetVOCindicator+0x1a8>)
 800d6a0:	f7f5 fa94 	bl	8002bcc <__aeabi_dsub>
 800d6a4:	0002      	movs	r2, r0
 800d6a6:	000b      	movs	r3, r1
 800d6a8:	0010      	movs	r0, r2
 800d6aa:	0019      	movs	r1, r3
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	4b34      	ldr	r3, [pc, #208]	@ (800d780 <SetVOCindicator+0x1c0>)
 800d6b0:	f7f4 fb80 	bl	8001db4 <__aeabi_ddiv>
 800d6b4:	0002      	movs	r2, r0
 800d6b6:	000b      	movs	r3, r1
 800d6b8:	0014      	movs	r4, r2
 800d6ba:	001d      	movs	r5, r3
 800d6bc:	4b2c      	ldr	r3, [pc, #176]	@ (800d770 <SetVOCindicator+0x1b0>)
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	0018      	movs	r0, r3
 800d6c2:	f7f5 fe7d 	bl	80033c0 <__aeabi_i2d>
 800d6c6:	0002      	movs	r2, r0
 800d6c8:	000b      	movs	r3, r1
 800d6ca:	0020      	movs	r0, r4
 800d6cc:	0029      	movs	r1, r5
 800d6ce:	f7f4 ffb5 	bl	800263c <__aeabi_dmul>
 800d6d2:	0002      	movs	r2, r0
 800d6d4:	000b      	movs	r3, r1
 800d6d6:	0010      	movs	r0, r2
 800d6d8:	0019      	movs	r1, r3
 800d6da:	f7f2 ffb7 	bl	800064c <__aeabi_d2uiz>
 800d6de:	0003      	movs	r3, r0
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	4b24      	ldr	r3, [pc, #144]	@ (800d774 <SetVOCindicator+0x1b4>)
 800d6e4:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800d6e6:	1dbb      	adds	r3, r7, #6
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	f7f5 fe68 	bl	80033c0 <__aeabi_i2d>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d768 <SetVOCindicator+0x1a8>)
 800d6f4:	f7f5 fa6a 	bl	8002bcc <__aeabi_dsub>
 800d6f8:	0002      	movs	r2, r0
 800d6fa:	000b      	movs	r3, r1
 800d6fc:	0010      	movs	r0, r2
 800d6fe:	0019      	movs	r1, r3
 800d700:	2200      	movs	r2, #0
 800d702:	4b1f      	ldr	r3, [pc, #124]	@ (800d780 <SetVOCindicator+0x1c0>)
 800d704:	f7f4 fb56 	bl	8001db4 <__aeabi_ddiv>
 800d708:	0002      	movs	r2, r0
 800d70a:	000b      	movs	r3, r1
 800d70c:	2000      	movs	r0, #0
 800d70e:	4917      	ldr	r1, [pc, #92]	@ (800d76c <SetVOCindicator+0x1ac>)
 800d710:	f7f5 fa5c 	bl	8002bcc <__aeabi_dsub>
 800d714:	0002      	movs	r2, r0
 800d716:	000b      	movs	r3, r1
 800d718:	0014      	movs	r4, r2
 800d71a:	001d      	movs	r5, r3
 800d71c:	4b14      	ldr	r3, [pc, #80]	@ (800d770 <SetVOCindicator+0x1b0>)
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	0018      	movs	r0, r3
 800d722:	f7f5 fe4d 	bl	80033c0 <__aeabi_i2d>
 800d726:	0002      	movs	r2, r0
 800d728:	000b      	movs	r3, r1
 800d72a:	0020      	movs	r0, r4
 800d72c:	0029      	movs	r1, r5
 800d72e:	f7f4 ff85 	bl	800263c <__aeabi_dmul>
 800d732:	0002      	movs	r2, r0
 800d734:	000b      	movs	r3, r1
 800d736:	0010      	movs	r0, r2
 800d738:	0019      	movs	r1, r3
 800d73a:	f7f2 ff87 	bl	800064c <__aeabi_d2uiz>
 800d73e:	0003      	movs	r3, r0
 800d740:	b29a      	uxth	r2, r3
 800d742:	4b0e      	ldr	r3, [pc, #56]	@ (800d77c <SetVOCindicator+0x1bc>)
 800d744:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800d746:	4b0a      	ldr	r3, [pc, #40]	@ (800d770 <SetVOCindicator+0x1b0>)
 800d748:	881a      	ldrh	r2, [r3, #0]
 800d74a:	4b0b      	ldr	r3, [pc, #44]	@ (800d778 <SetVOCindicator+0x1b8>)
 800d74c:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d74e:	4b0b      	ldr	r3, [pc, #44]	@ (800d77c <SetVOCindicator+0x1bc>)
 800d750:	8818      	ldrh	r0, [r3, #0]
 800d752:	4b08      	ldr	r3, [pc, #32]	@ (800d774 <SetVOCindicator+0x1b4>)
 800d754:	8819      	ldrh	r1, [r3, #0]
 800d756:	4b08      	ldr	r3, [pc, #32]	@ (800d778 <SetVOCindicator+0x1b8>)
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	001a      	movs	r2, r3
 800d75c:	f7ff fda6 	bl	800d2ac <SetVocLED>
  }

}
 800d760:	46c0      	nop			@ (mov r8, r8)
 800d762:	46bd      	mov	sp, r7
 800d764:	b002      	add	sp, #8
 800d766:	bdb0      	pop	{r4, r5, r7, pc}
 800d768:	40590000 	.word	0x40590000
 800d76c:	3ff00000 	.word	0x3ff00000
 800d770:	200000ce 	.word	0x200000ce
 800d774:	2000201e 	.word	0x2000201e
 800d778:	20002020 	.word	0x20002020
 800d77c:	20002022 	.word	0x20002022
 800d780:	40790000 	.word	0x40790000

0800d784 <powerCheck>:

Battery_Status powerCheck(){
 800d784:	b590      	push	{r4, r7, lr}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d78a:	f7f8 fe73 	bl	8006474 <Check_USB_PowerOn>
 800d78e:	0003      	movs	r3, r0
 800d790:	001a      	movs	r2, r3
 800d792:	2301      	movs	r3, #1
 800d794:	4053      	eors	r3, r2
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d79c:	1dfc      	adds	r4, r7, #7
 800d79e:	f7ff fc65 	bl	800d06c <batteryChargeCheck>
 800d7a2:	0003      	movs	r3, r0
 800d7a4:	7023      	strb	r3, [r4, #0]
 800d7a6:	e002      	b.n	800d7ae <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d7a8:	1dfb      	adds	r3, r7, #7
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d7ae:	1dfb      	adds	r3, r7, #7
 800d7b0:	781b      	ldrb	r3, [r3, #0]
}
 800d7b2:	0018      	movs	r0, r3
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	b003      	add	sp, #12
 800d7b8:	bd90      	pop	{r4, r7, pc}
	...

0800d7bc <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	0002      	movs	r2, r0
 800d7c4:	1dfb      	adds	r3, r7, #7
 800d7c6:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d7c8:	1dfb      	adds	r3, r7, #7
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b04      	cmp	r3, #4
 800d7ce:	d105      	bne.n	800d7dc <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800d7d0:	4a18      	ldr	r2, [pc, #96]	@ (800d834 <powerDisplay+0x78>)
 800d7d2:	4b19      	ldr	r3, [pc, #100]	@ (800d838 <powerDisplay+0x7c>)
 800d7d4:	0019      	movs	r1, r3
 800d7d6:	2003      	movs	r0, #3
 800d7d8:	f000 ff20 	bl	800e61c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d7dc:	1dfb      	adds	r3, r7, #7
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	2b03      	cmp	r3, #3
 800d7e2:	d105      	bne.n	800d7f0 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d7e4:	4a15      	ldr	r2, [pc, #84]	@ (800d83c <powerDisplay+0x80>)
 800d7e6:	4b14      	ldr	r3, [pc, #80]	@ (800d838 <powerDisplay+0x7c>)
 800d7e8:	0019      	movs	r1, r3
 800d7ea:	2003      	movs	r0, #3
 800d7ec:	f000 ff16 	bl	800e61c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d7f0:	1dfb      	adds	r3, r7, #7
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d105      	bne.n	800d804 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d7f8:	4a11      	ldr	r2, [pc, #68]	@ (800d840 <powerDisplay+0x84>)
 800d7fa:	4b0f      	ldr	r3, [pc, #60]	@ (800d838 <powerDisplay+0x7c>)
 800d7fc:	0019      	movs	r1, r3
 800d7fe:	2003      	movs	r0, #3
 800d800:	f000 ff0c 	bl	800e61c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d804:	1dfb      	adds	r3, r7, #7
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d105      	bne.n	800d818 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d80c:	4a0d      	ldr	r2, [pc, #52]	@ (800d844 <powerDisplay+0x88>)
 800d80e:	4b0a      	ldr	r3, [pc, #40]	@ (800d838 <powerDisplay+0x7c>)
 800d810:	0019      	movs	r1, r3
 800d812:	2003      	movs	r0, #3
 800d814:	f000 ff02 	bl	800e61c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d818:	1dfb      	adds	r3, r7, #7
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d105      	bne.n	800d82c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d820:	4a09      	ldr	r2, [pc, #36]	@ (800d848 <powerDisplay+0x8c>)
 800d822:	4b05      	ldr	r3, [pc, #20]	@ (800d838 <powerDisplay+0x7c>)
 800d824:	0019      	movs	r1, r3
 800d826:	2003      	movs	r0, #3
 800d828:	f000 fef8 	bl	800e61c <CreateLine>
  }
}
 800d82c:	46c0      	nop			@ (mov r8, r8)
 800d82e:	46bd      	mov	sp, r7
 800d830:	b002      	add	sp, #8
 800d832:	bd80      	pop	{r7, pc}
 800d834:	08024ffc 	.word	0x08024ffc
 800d838:	08025020 	.word	0x08025020
 800d83c:	08025024 	.word	0x08025024
 800d840:	0802503c 	.word	0x0802503c
 800d844:	0802505c 	.word	0x0802505c
 800d848:	08025074 	.word	0x08025074

0800d84c <configCheck>:

void configCheck(){
 800d84c:	b590      	push	{r4, r7, lr}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d852:	f7f8 fe1e 	bl	8006492 <BootButton_Pressed>
 800d856:	1e03      	subs	r3, r0, #0
 800d858:	d007      	beq.n	800d86a <configCheck+0x1e>
 800d85a:	f7f8 fe2b 	bl	80064b4 <UserButton_Pressed>
 800d85e:	1e03      	subs	r3, r0, #0
 800d860:	d003      	beq.n	800d86a <configCheck+0x1e>
    configSet = true;
 800d862:	4ba4      	ldr	r3, [pc, #656]	@ (800daf4 <configCheck+0x2a8>)
 800d864:	2201      	movs	r2, #1
 800d866:	701a      	strb	r2, [r3, #0]
 800d868:	e00a      	b.n	800d880 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d86a:	4ba2      	ldr	r3, [pc, #648]	@ (800daf4 <configCheck+0x2a8>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d870:	f001 fb14 	bl	800ee9c <HAL_GetTick>
 800d874:	0003      	movs	r3, r0
 800d876:	22fa      	movs	r2, #250	@ 0xfa
 800d878:	00d2      	lsls	r2, r2, #3
 800d87a:	189a      	adds	r2, r3, r2
 800d87c:	4b9e      	ldr	r3, [pc, #632]	@ (800daf8 <configCheck+0x2ac>)
 800d87e:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d880:	4b9c      	ldr	r3, [pc, #624]	@ (800daf4 <configCheck+0x2a8>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00d      	beq.n	800d8a4 <configCheck+0x58>
 800d888:	4b9b      	ldr	r3, [pc, #620]	@ (800daf8 <configCheck+0x2ac>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	0018      	movs	r0, r3
 800d88e:	f000 fe6f 	bl	800e570 <TimestampIsReached>
 800d892:	1e03      	subs	r3, r0, #0
 800d894:	d006      	beq.n	800d8a4 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d896:	f7f6 f8fd 	bl	8003a94 <SetConfigMode>
    SetDBLED(true, true, true);
 800d89a:	2201      	movs	r2, #1
 800d89c:	2101      	movs	r1, #1
 800d89e:	2001      	movs	r0, #1
 800d8a0:	f7ff fcba 	bl	800d218 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld && !GetReconfigMode()){
 800d8a4:	f7f8 fdf5 	bl	8006492 <BootButton_Pressed>
 800d8a8:	0003      	movs	r3, r0
 800d8aa:	001a      	movs	r2, r3
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	4053      	eors	r3, r2
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d03a      	beq.n	800d92c <configCheck+0xe0>
 800d8b6:	f7f8 fdfd 	bl	80064b4 <UserButton_Pressed>
 800d8ba:	1e03      	subs	r3, r0, #0
 800d8bc:	d036      	beq.n	800d92c <configCheck+0xe0>
 800d8be:	4b8f      	ldr	r3, [pc, #572]	@ (800dafc <configCheck+0x2b0>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	4053      	eors	r3, r2
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d02f      	beq.n	800d92c <configCheck+0xe0>
 800d8cc:	f7f6 f902 	bl	8003ad4 <GetReconfigMode>
 800d8d0:	0003      	movs	r3, r0
 800d8d2:	001a      	movs	r2, r3
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4053      	eors	r3, r2
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d026      	beq.n	800d92c <configCheck+0xe0>
    SetLEDsOff();
 800d8de:	f7ff fe25 	bl	800d52c <SetLEDsOff>
    Debug("userToggle flipped");
 800d8e2:	4a87      	ldr	r2, [pc, #540]	@ (800db00 <configCheck+0x2b4>)
 800d8e4:	4b87      	ldr	r3, [pc, #540]	@ (800db04 <configCheck+0x2b8>)
 800d8e6:	0019      	movs	r1, r3
 800d8e8:	2003      	movs	r0, #3
 800d8ea:	f000 fe97 	bl	800e61c <CreateLine>
    userToggle = !userToggle;
 800d8ee:	4b86      	ldr	r3, [pc, #536]	@ (800db08 <configCheck+0x2bc>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	1e5a      	subs	r2, r3, #1
 800d8f4:	4193      	sbcs	r3, r2
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	4053      	eors	r3, r2
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	1c1a      	adds	r2, r3, #0
 800d900:	2301      	movs	r3, #1
 800d902:	4013      	ands	r3, r2
 800d904:	b2da      	uxtb	r2, r3
 800d906:	4b80      	ldr	r3, [pc, #512]	@ (800db08 <configCheck+0x2bc>)
 800d908:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d90a:	4b7f      	ldr	r3, [pc, #508]	@ (800db08 <configCheck+0x2bc>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <configCheck+0xca>
      EnabledConnectedDevices();
 800d912:	f7fa fffd 	bl	8008910 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d916:	4b79      	ldr	r3, [pc, #484]	@ (800dafc <configCheck+0x2b0>)
 800d918:	2201      	movs	r2, #1
 800d91a:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d91c:	f001 fabe 	bl	800ee9c <HAL_GetTick>
 800d920:	0003      	movs	r3, r0
 800d922:	22fa      	movs	r2, #250	@ 0xfa
 800d924:	00d2      	lsls	r2, r2, #3
 800d926:	189a      	adds	r2, r3, r2
 800d928:	4b78      	ldr	r3, [pc, #480]	@ (800db0c <configCheck+0x2c0>)
 800d92a:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d92c:	f7f8 fdb1 	bl	8006492 <BootButton_Pressed>
 800d930:	0003      	movs	r3, r0
 800d932:	001a      	movs	r2, r3
 800d934:	2301      	movs	r3, #1
 800d936:	4053      	eors	r3, r2
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d100      	bne.n	800d940 <configCheck+0xf4>
 800d93e:	e0a4      	b.n	800da8a <configCheck+0x23e>
 800d940:	4b6e      	ldr	r3, [pc, #440]	@ (800dafc <configCheck+0x2b0>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d100      	bne.n	800d94a <configCheck+0xfe>
 800d948:	e09f      	b.n	800da8a <configCheck+0x23e>
 800d94a:	4b70      	ldr	r3, [pc, #448]	@ (800db0c <configCheck+0x2c0>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	0018      	movs	r0, r3
 800d950:	f000 fe0e 	bl	800e570 <TimestampIsReached>
 800d954:	1e03      	subs	r3, r0, #0
 800d956:	d100      	bne.n	800d95a <configCheck+0x10e>
 800d958:	e097      	b.n	800da8a <configCheck+0x23e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d95a:	f7fa fd29 	bl	80083b0 <GetPMSensorPresence>
 800d95e:	1e03      	subs	r3, r0, #0
 800d960:	d100      	bne.n	800d964 <configCheck+0x118>
 800d962:	e082      	b.n	800da6a <configCheck+0x21e>
 800d964:	4b6a      	ldr	r3, [pc, #424]	@ (800db10 <configCheck+0x2c4>)
 800d966:	791b      	ldrb	r3, [r3, #4]
 800d968:	2b34      	cmp	r3, #52	@ 0x34
 800d96a:	d004      	beq.n	800d976 <configCheck+0x12a>
 800d96c:	4b68      	ldr	r3, [pc, #416]	@ (800db10 <configCheck+0x2c4>)
 800d96e:	791b      	ldrb	r3, [r3, #4]
 800d970:	2b35      	cmp	r3, #53	@ 0x35
 800d972:	d000      	beq.n	800d976 <configCheck+0x12a>
 800d974:	e079      	b.n	800da6a <configCheck+0x21e>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d976:	4b67      	ldr	r3, [pc, #412]	@ (800db14 <configCheck+0x2c8>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	1e5a      	subs	r2, r3, #1
 800d97c:	4193      	sbcs	r3, r2
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2201      	movs	r2, #1
 800d982:	4053      	eors	r3, r2
 800d984:	b2db      	uxtb	r3, r3
 800d986:	1c1a      	adds	r2, r3, #0
 800d988:	2301      	movs	r3, #1
 800d98a:	4013      	ands	r3, r2
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	4b61      	ldr	r3, [pc, #388]	@ (800db14 <configCheck+0x2c8>)
 800d990:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d992:	4b60      	ldr	r3, [pc, #384]	@ (800db14 <configCheck+0x2c8>)
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <configCheck+0x15a>
 800d99a:	1dbc      	adds	r4, r7, #6
 800d99c:	f7ff fbc0 	bl	800d120 <Calculate_LED_ON>
 800d9a0:	0003      	movs	r3, r0
 800d9a2:	8023      	strh	r3, [r4, #0]
 800d9a4:	e003      	b.n	800d9ae <configCheck+0x162>
        else color = 4000;
 800d9a6:	1dbb      	adds	r3, r7, #6
 800d9a8:	22fa      	movs	r2, #250	@ 0xfa
 800d9aa:	0112      	lsls	r2, r2, #4
 800d9ac:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d9ae:	4b59      	ldr	r3, [pc, #356]	@ (800db14 <configCheck+0x2c8>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <configCheck+0x16e>
 800d9b6:	4b58      	ldr	r3, [pc, #352]	@ (800db18 <configCheck+0x2cc>)
 800d9b8:	e000      	b.n	800d9bc <configCheck+0x170>
 800d9ba:	4b58      	ldr	r3, [pc, #352]	@ (800db1c <configCheck+0x2d0>)
 800d9bc:	4a58      	ldr	r2, [pc, #352]	@ (800db20 <configCheck+0x2d4>)
 800d9be:	4959      	ldr	r1, [pc, #356]	@ (800db24 <configCheck+0x2d8>)
 800d9c0:	2002      	movs	r0, #2
 800d9c2:	f000 fe2b 	bl	800e61c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d9c6:	1d7b      	adds	r3, r7, #5
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	701a      	strb	r2, [r3, #0]
 800d9cc:	e028      	b.n	800da20 <configCheck+0x1d4>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d9ce:	f7ff fba7 	bl	800d120 <Calculate_LED_ON>
 800d9d2:	0003      	movs	r3, r0
 800d9d4:	001a      	movs	r2, r3
 800d9d6:	4b54      	ldr	r3, [pc, #336]	@ (800db28 <configCheck+0x2dc>)
 800d9d8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d9da:	4b53      	ldr	r3, [pc, #332]	@ (800db28 <configCheck+0x2dc>)
 800d9dc:	1dba      	adds	r2, r7, #6
 800d9de:	8812      	ldrh	r2, [r2, #0]
 800d9e0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d9e2:	4b51      	ldr	r3, [pc, #324]	@ (800db28 <configCheck+0x2dc>)
 800d9e4:	1dba      	adds	r2, r7, #6
 800d9e6:	8812      	ldrh	r2, [r2, #0]
 800d9e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d9ea:	23c8      	movs	r3, #200	@ 0xc8
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f001 fa5e 	bl	800eeb0 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d9f4:	4b4c      	ldr	r3, [pc, #304]	@ (800db28 <configCheck+0x2dc>)
 800d9f6:	22fa      	movs	r2, #250	@ 0xfa
 800d9f8:	0112      	lsls	r2, r2, #4
 800d9fa:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d9fc:	4b4a      	ldr	r3, [pc, #296]	@ (800db28 <configCheck+0x2dc>)
 800d9fe:	22fa      	movs	r2, #250	@ 0xfa
 800da00:	0112      	lsls	r2, r2, #4
 800da02:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800da04:	4b48      	ldr	r3, [pc, #288]	@ (800db28 <configCheck+0x2dc>)
 800da06:	22fa      	movs	r2, #250	@ 0xfa
 800da08:	0112      	lsls	r2, r2, #4
 800da0a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800da0c:	23c8      	movs	r3, #200	@ 0xc8
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	0018      	movs	r0, r3
 800da12:	f001 fa4d 	bl	800eeb0 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800da16:	1d7b      	adds	r3, r7, #5
 800da18:	781a      	ldrb	r2, [r3, #0]
 800da1a:	1d7b      	adds	r3, r7, #5
 800da1c:	3201      	adds	r2, #1
 800da1e:	701a      	strb	r2, [r3, #0]
 800da20:	1d7b      	adds	r3, r7, #5
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d9d2      	bls.n	800d9ce <configCheck+0x182>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800da28:	4b37      	ldr	r3, [pc, #220]	@ (800db08 <configCheck+0x2bc>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	1e5a      	subs	r2, r3, #1
 800da2e:	4193      	sbcs	r3, r2
 800da30:	b2db      	uxtb	r3, r3
 800da32:	2201      	movs	r2, #1
 800da34:	4053      	eors	r3, r2
 800da36:	b2db      	uxtb	r3, r3
 800da38:	1c1a      	adds	r2, r3, #0
 800da3a:	2301      	movs	r3, #1
 800da3c:	4013      	ands	r3, r2
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	4b31      	ldr	r3, [pc, #196]	@ (800db08 <configCheck+0x2bc>)
 800da42:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800da44:	4b30      	ldr	r3, [pc, #192]	@ (800db08 <configCheck+0x2bc>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d001      	beq.n	800da50 <configCheck+0x204>
 800da4c:	4b32      	ldr	r3, [pc, #200]	@ (800db18 <configCheck+0x2cc>)
 800da4e:	e000      	b.n	800da52 <configCheck+0x206>
 800da50:	4b32      	ldr	r3, [pc, #200]	@ (800db1c <configCheck+0x2d0>)
 800da52:	4a36      	ldr	r2, [pc, #216]	@ (800db2c <configCheck+0x2e0>)
 800da54:	4933      	ldr	r1, [pc, #204]	@ (800db24 <configCheck+0x2d8>)
 800da56:	2002      	movs	r0, #2
 800da58:	f000 fde0 	bl	800e61c <CreateLine>
      if (usbPluggedIn) {
 800da5c:	4b34      	ldr	r3, [pc, #208]	@ (800db30 <configCheck+0x2e4>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d009      	beq.n	800da78 <configCheck+0x22c>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800da64:	f7fc f8b8 	bl	8009bd8 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800da68:	e006      	b.n	800da78 <configCheck+0x22c>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800da6a:	4a32      	ldr	r2, [pc, #200]	@ (800db34 <configCheck+0x2e8>)
 800da6c:	4b2d      	ldr	r3, [pc, #180]	@ (800db24 <configCheck+0x2d8>)
 800da6e:	0019      	movs	r1, r3
 800da70:	2002      	movs	r0, #2
 800da72:	f000 fdd3 	bl	800e61c <CreateLine>
 800da76:	e000      	b.n	800da7a <configCheck+0x22e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800da78:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800da7a:	46c0      	nop			@ (mov r8, r8)
 800da7c:	f7f8 fd1a 	bl	80064b4 <UserButton_Pressed>
 800da80:	1e03      	subs	r3, r0, #0
 800da82:	d1fb      	bne.n	800da7c <configCheck+0x230>
    }
    buttonHeld = false;
 800da84:	4b1d      	ldr	r3, [pc, #116]	@ (800dafc <configCheck+0x2b0>)
 800da86:	2200      	movs	r2, #0
 800da88:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800da8a:	f7f8 fd02 	bl	8006492 <BootButton_Pressed>
 800da8e:	0003      	movs	r3, r0
 800da90:	001a      	movs	r2, r3
 800da92:	2301      	movs	r3, #1
 800da94:	4053      	eors	r3, r2
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00b      	beq.n	800dab4 <configCheck+0x268>
 800da9c:	f7f8 fd0a 	bl	80064b4 <UserButton_Pressed>
 800daa0:	0003      	movs	r3, r0
 800daa2:	001a      	movs	r2, r3
 800daa4:	2301      	movs	r3, #1
 800daa6:	4053      	eors	r3, r2
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <configCheck+0x268>
    buttonHeld = false;
 800daae:	4b13      	ldr	r3, [pc, #76]	@ (800dafc <configCheck+0x2b0>)
 800dab0:	2200      	movs	r2, #0
 800dab2:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800dab4:	f7f8 fcde 	bl	8006474 <Check_USB_PowerOn>
 800dab8:	1e03      	subs	r3, r0, #0
 800daba:	d003      	beq.n	800dac4 <configCheck+0x278>
    usbPluggedIn = true;
 800dabc:	4b1c      	ldr	r3, [pc, #112]	@ (800db30 <configCheck+0x2e4>)
 800dabe:	2201      	movs	r2, #1
 800dac0:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800dac2:	e012      	b.n	800daea <configCheck+0x29e>
    if(!userToggle && !init){
 800dac4:	4b10      	ldr	r3, [pc, #64]	@ (800db08 <configCheck+0x2bc>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2201      	movs	r2, #1
 800daca:	4053      	eors	r3, r2
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d008      	beq.n	800dae4 <configCheck+0x298>
 800dad2:	4b19      	ldr	r3, [pc, #100]	@ (800db38 <configCheck+0x2ec>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2201      	movs	r2, #1
 800dad8:	4053      	eors	r3, r2
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <configCheck+0x298>
      SetLEDsOff();
 800dae0:	f7ff fd24 	bl	800d52c <SetLEDsOff>
    usbPluggedIn = false;
 800dae4:	4b12      	ldr	r3, [pc, #72]	@ (800db30 <configCheck+0x2e4>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	701a      	strb	r2, [r3, #0]
}
 800daea:	46c0      	nop			@ (mov r8, r8)
 800daec:	46bd      	mov	sp, r7
 800daee:	b003      	add	sp, #12
 800daf0:	bd90      	pop	{r4, r7, pc}
 800daf2:	46c0      	nop			@ (mov r8, r8)
 800daf4:	20002008 	.word	0x20002008
 800daf8:	20002010 	.word	0x20002010
 800dafc:	2000200b 	.word	0x2000200b
 800db00:	08025098 	.word	0x08025098
 800db04:	08025020 	.word	0x08025020
 800db08:	2000200a 	.word	0x2000200a
 800db0c:	20002014 	.word	0x20002014
 800db10:	2000106c 	.word	0x2000106c
 800db14:	20001067 	.word	0x20001067
 800db18:	080250ac 	.word	0x080250ac
 800db1c:	080250b4 	.word	0x080250b4
 800db20:	080250c0 	.word	0x080250c0
 800db24:	080250e0 	.word	0x080250e0
 800db28:	40000400 	.word	0x40000400
 800db2c:	080250e4 	.word	0x080250e4
 800db30:	20002009 	.word	0x20002009
 800db34:	080250fc 	.word	0x080250fc
 800db38:	200000cc 	.word	0x200000cc

0800db3c <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800db3c:	b590      	push	{r4, r7, lr}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800db42:	1dfc      	adds	r4, r7, #7
 800db44:	f7ff fe1e 	bl	800d784 <powerCheck>
 800db48:	0003      	movs	r3, r0
 800db4a:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800db4c:	1dfb      	adds	r3, r7, #7
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	0018      	movs	r0, r3
 800db52:	f7ff fe33 	bl	800d7bc <powerDisplay>
  return status;
 800db56:	1dfb      	adds	r3, r7, #7
 800db58:	781b      	ldrb	r3, [r3, #0]
}
 800db5a:	0018      	movs	r0, r3
 800db5c:	46bd      	mov	sp, r7
 800db5e:	b003      	add	sp, #12
 800db60:	bd90      	pop	{r4, r7, pc}
	...

0800db64 <setuserToggle>:

void setuserToggle(void) {
 800db64:	b580      	push	{r7, lr}
 800db66:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800db68:	f7ff fe0c 	bl	800d784 <powerCheck>
 800db6c:	0003      	movs	r3, r0
 800db6e:	2b04      	cmp	r3, #4
 800db70:	d002      	beq.n	800db78 <setuserToggle+0x14>
    userToggle = true;
 800db72:	4b03      	ldr	r3, [pc, #12]	@ (800db80 <setuserToggle+0x1c>)
 800db74:	2201      	movs	r2, #1
 800db76:	701a      	strb	r2, [r3, #0]
  }
}
 800db78:	46c0      	nop			@ (mov r8, r8)
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	46c0      	nop			@ (mov r8, r8)
 800db80:	2000200a 	.word	0x2000200a

0800db84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db88:	4b07      	ldr	r3, [pc, #28]	@ (800dba8 <HAL_MspInit+0x24>)
 800db8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db8c:	4b06      	ldr	r3, [pc, #24]	@ (800dba8 <HAL_MspInit+0x24>)
 800db8e:	2101      	movs	r1, #1
 800db90:	430a      	orrs	r2, r1
 800db92:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800db94:	4b04      	ldr	r3, [pc, #16]	@ (800dba8 <HAL_MspInit+0x24>)
 800db96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db98:	4b03      	ldr	r3, [pc, #12]	@ (800dba8 <HAL_MspInit+0x24>)
 800db9a:	2180      	movs	r1, #128	@ 0x80
 800db9c:	0549      	lsls	r1, r1, #21
 800db9e:	430a      	orrs	r2, r1
 800dba0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dba2:	46c0      	nop			@ (mov r8, r8)
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	40021000 	.word	0x40021000

0800dbac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800dbb0:	46c0      	nop			@ (mov r8, r8)
 800dbb2:	e7fd      	b.n	800dbb0 <NMI_Handler+0x4>

0800dbb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dbb8:	46c0      	nop			@ (mov r8, r8)
 800dbba:	e7fd      	b.n	800dbb8 <HardFault_Handler+0x4>

0800dbbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800dbc0:	46c0      	nop			@ (mov r8, r8)
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dbca:	46c0      	nop			@ (mov r8, r8)
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dbd4:	f001 f950 	bl	800ee78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800dbd8:	46c0      	nop			@ (mov r8, r8)
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800dbe4:	4b03      	ldr	r3, [pc, #12]	@ (800dbf4 <RTC_IRQHandler+0x14>)
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	f008 fe76 	bl	80168d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800dbec:	46c0      	nop			@ (mov r8, r8)
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	46c0      	nop			@ (mov r8, r8)
 800dbf4:	20001040 	.word	0x20001040

0800dbf8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800dbfc:	2380      	movs	r3, #128	@ 0x80
 800dbfe:	021b      	lsls	r3, r3, #8
 800dc00:	0018      	movs	r0, r3
 800dc02:	f002 fbf9 	bl	80103f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800dc06:	46c0      	nop			@ (mov r8, r8)
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800dc12:	0018      	movs	r0, r3
 800dc14:	f001 ff81 	bl	800fb1a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dc18:	4b04      	ldr	r3, [pc, #16]	@ (800dc2c <DMA1_Channel2_3_IRQHandler+0x20>)
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	f001 ff7d 	bl	800fb1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800dc20:	46c0      	nop			@ (mov r8, r8)
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	46c0      	nop			@ (mov r8, r8)
 800dc28:	20000ee4 	.word	0x20000ee4
 800dc2c:	20000e9c 	.word	0x20000e9c

0800dc30 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dc34:	4b07      	ldr	r3, [pc, #28]	@ (800dc54 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800dc36:	0018      	movs	r0, r3
 800dc38:	f001 ff6f 	bl	800fb1a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800dc3c:	4b06      	ldr	r3, [pc, #24]	@ (800dc58 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800dc3e:	0018      	movs	r0, r3
 800dc40:	f001 ff6b 	bl	800fb1a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800dc44:	4b05      	ldr	r3, [pc, #20]	@ (800dc5c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800dc46:	0018      	movs	r0, r3
 800dc48:	f001 ff67 	bl	800fb1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800dc4c:	46c0      	nop			@ (mov r8, r8)
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	46c0      	nop			@ (mov r8, r8)
 800dc54:	20000f68 	.word	0x20000f68
 800dc58:	20002310 	.word	0x20002310
 800dc5c:	20002358 	.word	0x20002358

0800dc60 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800dc64:	4b03      	ldr	r3, [pc, #12]	@ (800dc74 <USART4_5_IRQHandler+0x14>)
 800dc66:	0018      	movs	r0, r3
 800dc68:	f009 fd30 	bl	80176cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800dc6c:	46c0      	nop			@ (mov r8, r8)
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	46c0      	nop			@ (mov r8, r8)
 800dc74:	20002258 	.word	0x20002258

0800dc78 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800dc7c:	4b09      	ldr	r3, [pc, #36]	@ (800dca4 <I2C1_IRQHandler+0x2c>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	699a      	ldr	r2, [r3, #24]
 800dc82:	23e0      	movs	r3, #224	@ 0xe0
 800dc84:	00db      	lsls	r3, r3, #3
 800dc86:	4013      	ands	r3, r2
 800dc88:	d004      	beq.n	800dc94 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800dc8a:	4b06      	ldr	r3, [pc, #24]	@ (800dca4 <I2C1_IRQHandler+0x2c>)
 800dc8c:	0018      	movs	r0, r3
 800dc8e:	f003 f89b 	bl	8010dc8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800dc92:	e003      	b.n	800dc9c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800dc94:	4b03      	ldr	r3, [pc, #12]	@ (800dca4 <I2C1_IRQHandler+0x2c>)
 800dc96:	0018      	movs	r0, r3
 800dc98:	f003 f87c 	bl	8010d94 <HAL_I2C_EV_IRQHandler>
}
 800dc9c:	46c0      	nop			@ (mov r8, r8)
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	20000df4 	.word	0x20000df4

0800dca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800dcac:	4b03      	ldr	r3, [pc, #12]	@ (800dcbc <USART1_IRQHandler+0x14>)
 800dcae:	0018      	movs	r0, r3
 800dcb0:	f009 fd0c 	bl	80176cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800dcb4:	46c0      	nop			@ (mov r8, r8)
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	46c0      	nop			@ (mov r8, r8)
 800dcbc:	200021a0 	.word	0x200021a0

0800dcc0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800dcc4:	4b03      	ldr	r3, [pc, #12]	@ (800dcd4 <USB_IRQHandler+0x14>)
 800dcc6:	0018      	movs	r0, r3
 800dcc8:	f005 fc5c 	bl	8013584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800dccc:	46c0      	nop			@ (mov r8, r8)
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	46c0      	nop			@ (mov r8, r8)
 800dcd4:	2000316c 	.word	0x2000316c

0800dcd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
  return 1;
 800dcdc:	2301      	movs	r3, #1
}
 800dcde:	0018      	movs	r0, r3
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <_kill>:

int _kill(int pid, int sig)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dcee:	f012 fbd1 	bl	8020494 <__errno>
 800dcf2:	0003      	movs	r3, r0
 800dcf4:	2216      	movs	r2, #22
 800dcf6:	601a      	str	r2, [r3, #0]
  return -1;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	425b      	negs	r3, r3
}
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	b002      	add	sp, #8
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <_exit>:

void _exit (int status)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	425a      	negs	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	0011      	movs	r1, r2
 800dd14:	0018      	movs	r0, r3
 800dd16:	f7ff ffe5 	bl	800dce4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dd1a:	46c0      	nop			@ (mov r8, r8)
 800dd1c:	e7fd      	b.n	800dd1a <_exit+0x16>

0800dd1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b086      	sub	sp, #24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	617b      	str	r3, [r7, #20]
 800dd2e:	e00a      	b.n	800dd46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dd30:	e000      	b.n	800dd34 <_read+0x16>
 800dd32:	bf00      	nop
 800dd34:	0001      	movs	r1, r0
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	60ba      	str	r2, [r7, #8]
 800dd3c:	b2ca      	uxtb	r2, r1
 800dd3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	3301      	adds	r3, #1
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	dbf0      	blt.n	800dd30 <_read+0x12>
  }

  return len;
 800dd4e:	687b      	ldr	r3, [r7, #4]
}
 800dd50:	0018      	movs	r0, r3
 800dd52:	46bd      	mov	sp, r7
 800dd54:	b006      	add	sp, #24
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <_close>:
  }
  return len;
}

int _close(int file)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dd60:	2301      	movs	r3, #1
 800dd62:	425b      	negs	r3, r3
}
 800dd64:	0018      	movs	r0, r3
 800dd66:	46bd      	mov	sp, r7
 800dd68:	b002      	add	sp, #8
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	2280      	movs	r2, #128	@ 0x80
 800dd7a:	0192      	lsls	r2, r2, #6
 800dd7c:	605a      	str	r2, [r3, #4]
  return 0;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	0018      	movs	r0, r3
 800dd82:	46bd      	mov	sp, r7
 800dd84:	b002      	add	sp, #8
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <_isatty>:

int _isatty(int file)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dd90:	2301      	movs	r3, #1
}
 800dd92:	0018      	movs	r0, r3
 800dd94:	46bd      	mov	sp, r7
 800dd96:	b002      	add	sp, #8
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b084      	sub	sp, #16
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dda6:	2300      	movs	r3, #0
}
 800dda8:	0018      	movs	r0, r3
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	b004      	add	sp, #16
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ddb8:	4a14      	ldr	r2, [pc, #80]	@ (800de0c <_sbrk+0x5c>)
 800ddba:	4b15      	ldr	r3, [pc, #84]	@ (800de10 <_sbrk+0x60>)
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ddc4:	4b13      	ldr	r3, [pc, #76]	@ (800de14 <_sbrk+0x64>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d102      	bne.n	800ddd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ddcc:	4b11      	ldr	r3, [pc, #68]	@ (800de14 <_sbrk+0x64>)
 800ddce:	4a12      	ldr	r2, [pc, #72]	@ (800de18 <_sbrk+0x68>)
 800ddd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ddd2:	4b10      	ldr	r3, [pc, #64]	@ (800de14 <_sbrk+0x64>)
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	18d3      	adds	r3, r2, r3
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d207      	bcs.n	800ddf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dde0:	f012 fb58 	bl	8020494 <__errno>
 800dde4:	0003      	movs	r3, r0
 800dde6:	220c      	movs	r2, #12
 800dde8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ddea:	2301      	movs	r3, #1
 800ddec:	425b      	negs	r3, r3
 800ddee:	e009      	b.n	800de04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ddf0:	4b08      	ldr	r3, [pc, #32]	@ (800de14 <_sbrk+0x64>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ddf6:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <_sbrk+0x64>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	18d2      	adds	r2, r2, r3
 800ddfe:	4b05      	ldr	r3, [pc, #20]	@ (800de14 <_sbrk+0x64>)
 800de00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800de02:	68fb      	ldr	r3, [r7, #12]
}
 800de04:	0018      	movs	r0, r3
 800de06:	46bd      	mov	sp, r7
 800de08:	b006      	add	sp, #24
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	20005000 	.word	0x20005000
 800de10:	00000400 	.word	0x00000400
 800de14:	20002024 	.word	0x20002024
 800de18:	200037d0 	.word	0x200037d0

0800de1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800de20:	46c0      	nop			@ (mov r8, r8)
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de2e:	2310      	movs	r3, #16
 800de30:	18fb      	adds	r3, r7, r3
 800de32:	0018      	movs	r0, r3
 800de34:	2308      	movs	r3, #8
 800de36:	001a      	movs	r2, r3
 800de38:	2100      	movs	r1, #0
 800de3a:	f012 fa87 	bl	802034c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de3e:	003b      	movs	r3, r7
 800de40:	0018      	movs	r0, r3
 800de42:	2310      	movs	r3, #16
 800de44:	001a      	movs	r2, r3
 800de46:	2100      	movs	r1, #0
 800de48:	f012 fa80 	bl	802034c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800de4c:	4b2e      	ldr	r3, [pc, #184]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de4e:	2280      	movs	r2, #128	@ 0x80
 800de50:	05d2      	lsls	r2, r2, #23
 800de52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800de54:	4b2c      	ldr	r3, [pc, #176]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de56:	2200      	movs	r2, #0
 800de58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de5a:	4b2b      	ldr	r3, [pc, #172]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800de60:	4b29      	ldr	r3, [pc, #164]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de62:	4a2a      	ldr	r2, [pc, #168]	@ (800df0c <MX_TIM2_Init+0xe4>)
 800de64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de66:	4b28      	ldr	r3, [pc, #160]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de68:	2200      	movs	r2, #0
 800de6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de6c:	4b26      	ldr	r3, [pc, #152]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de6e:	2200      	movs	r2, #0
 800de70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800de72:	4b25      	ldr	r3, [pc, #148]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de74:	0018      	movs	r0, r3
 800de76:	f008 fe3d 	bl	8016af4 <HAL_TIM_PWM_Init>
 800de7a:	1e03      	subs	r3, r0, #0
 800de7c:	d001      	beq.n	800de82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800de7e:	f7fa fa59 	bl	8008334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de82:	2110      	movs	r1, #16
 800de84:	187b      	adds	r3, r7, r1
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de8a:	187b      	adds	r3, r7, r1
 800de8c:	2200      	movs	r2, #0
 800de8e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800de90:	187a      	adds	r2, r7, r1
 800de92:	4b1d      	ldr	r3, [pc, #116]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800de94:	0011      	movs	r1, r2
 800de96:	0018      	movs	r0, r3
 800de98:	f009 f94a 	bl	8017130 <HAL_TIMEx_MasterConfigSynchronization>
 800de9c:	1e03      	subs	r3, r0, #0
 800de9e:	d001      	beq.n	800dea4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dea0:	f7fa fa48 	bl	8008334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dea4:	003b      	movs	r3, r7
 800dea6:	2260      	movs	r2, #96	@ 0x60
 800dea8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800deaa:	003b      	movs	r3, r7
 800deac:	2200      	movs	r2, #0
 800deae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800deb0:	003b      	movs	r3, r7
 800deb2:	2200      	movs	r2, #0
 800deb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800deb6:	003b      	movs	r3, r7
 800deb8:	2200      	movs	r2, #0
 800deba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800debc:	0039      	movs	r1, r7
 800debe:	4b12      	ldr	r3, [pc, #72]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	0018      	movs	r0, r3
 800dec4:	f008 fee8 	bl	8016c98 <HAL_TIM_PWM_ConfigChannel>
 800dec8:	1e03      	subs	r3, r0, #0
 800deca:	d001      	beq.n	800ded0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800decc:	f7fa fa32 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ded0:	0039      	movs	r1, r7
 800ded2:	4b0d      	ldr	r3, [pc, #52]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800ded4:	2208      	movs	r2, #8
 800ded6:	0018      	movs	r0, r3
 800ded8:	f008 fede 	bl	8016c98 <HAL_TIM_PWM_ConfigChannel>
 800dedc:	1e03      	subs	r3, r0, #0
 800dede:	d001      	beq.n	800dee4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dee0:	f7fa fa28 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dee4:	0039      	movs	r1, r7
 800dee6:	4b08      	ldr	r3, [pc, #32]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800dee8:	220c      	movs	r2, #12
 800deea:	0018      	movs	r0, r3
 800deec:	f008 fed4 	bl	8016c98 <HAL_TIM_PWM_ConfigChannel>
 800def0:	1e03      	subs	r3, r0, #0
 800def2:	d001      	beq.n	800def8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800def4:	f7fa fa1e 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800def8:	4b03      	ldr	r3, [pc, #12]	@ (800df08 <MX_TIM2_Init+0xe0>)
 800defa:	0018      	movs	r0, r3
 800defc:	f000 f8fe 	bl	800e0fc <HAL_TIM_MspPostInit>

}
 800df00:	46c0      	nop			@ (mov r8, r8)
 800df02:	46bd      	mov	sp, r7
 800df04:	b006      	add	sp, #24
 800df06:	bd80      	pop	{r7, pc}
 800df08:	20002028 	.word	0x20002028
 800df0c:	0000ffff 	.word	0x0000ffff

0800df10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df16:	2310      	movs	r3, #16
 800df18:	18fb      	adds	r3, r7, r3
 800df1a:	0018      	movs	r0, r3
 800df1c:	2308      	movs	r3, #8
 800df1e:	001a      	movs	r2, r3
 800df20:	2100      	movs	r1, #0
 800df22:	f012 fa13 	bl	802034c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df26:	003b      	movs	r3, r7
 800df28:	0018      	movs	r0, r3
 800df2a:	2310      	movs	r3, #16
 800df2c:	001a      	movs	r2, r3
 800df2e:	2100      	movs	r1, #0
 800df30:	f012 fa0c 	bl	802034c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800df34:	4b32      	ldr	r3, [pc, #200]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df36:	4a33      	ldr	r2, [pc, #204]	@ (800e004 <MX_TIM3_Init+0xf4>)
 800df38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800df3a:	4b31      	ldr	r3, [pc, #196]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df40:	4b2f      	ldr	r3, [pc, #188]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df42:	2200      	movs	r2, #0
 800df44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800df46:	4b2e      	ldr	r3, [pc, #184]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df48:	4a2f      	ldr	r2, [pc, #188]	@ (800e008 <MX_TIM3_Init+0xf8>)
 800df4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df4c:	4b2c      	ldr	r3, [pc, #176]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df4e:	2200      	movs	r2, #0
 800df50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df52:	4b2b      	ldr	r3, [pc, #172]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df54:	2200      	movs	r2, #0
 800df56:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800df58:	4b29      	ldr	r3, [pc, #164]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df5a:	0018      	movs	r0, r3
 800df5c:	f008 fdca 	bl	8016af4 <HAL_TIM_PWM_Init>
 800df60:	1e03      	subs	r3, r0, #0
 800df62:	d001      	beq.n	800df68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800df64:	f7fa f9e6 	bl	8008334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df68:	2110      	movs	r1, #16
 800df6a:	187b      	adds	r3, r7, r1
 800df6c:	2200      	movs	r2, #0
 800df6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df70:	187b      	adds	r3, r7, r1
 800df72:	2200      	movs	r2, #0
 800df74:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800df76:	187a      	adds	r2, r7, r1
 800df78:	4b21      	ldr	r3, [pc, #132]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800df7a:	0011      	movs	r1, r2
 800df7c:	0018      	movs	r0, r3
 800df7e:	f009 f8d7 	bl	8017130 <HAL_TIMEx_MasterConfigSynchronization>
 800df82:	1e03      	subs	r3, r0, #0
 800df84:	d001      	beq.n	800df8a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800df86:	f7fa f9d5 	bl	8008334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800df8a:	003b      	movs	r3, r7
 800df8c:	2260      	movs	r2, #96	@ 0x60
 800df8e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800df90:	003b      	movs	r3, r7
 800df92:	2200      	movs	r2, #0
 800df94:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df96:	003b      	movs	r3, r7
 800df98:	2200      	movs	r2, #0
 800df9a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df9c:	003b      	movs	r3, r7
 800df9e:	2200      	movs	r2, #0
 800dfa0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dfa2:	0039      	movs	r1, r7
 800dfa4:	4b16      	ldr	r3, [pc, #88]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	0018      	movs	r0, r3
 800dfaa:	f008 fe75 	bl	8016c98 <HAL_TIM_PWM_ConfigChannel>
 800dfae:	1e03      	subs	r3, r0, #0
 800dfb0:	d001      	beq.n	800dfb6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800dfb2:	f7fa f9bf 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800dfb6:	4b12      	ldr	r3, [pc, #72]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800dfb8:	2104      	movs	r1, #4
 800dfba:	0018      	movs	r0, r3
 800dfbc:	f009 f916 	bl	80171ec <HAL_TIMEx_RemapConfig>
 800dfc0:	1e03      	subs	r3, r0, #0
 800dfc2:	d001      	beq.n	800dfc8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800dfc4:	f7fa f9b6 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dfc8:	0039      	movs	r1, r7
 800dfca:	4b0d      	ldr	r3, [pc, #52]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800dfcc:	2204      	movs	r2, #4
 800dfce:	0018      	movs	r0, r3
 800dfd0:	f008 fe62 	bl	8016c98 <HAL_TIM_PWM_ConfigChannel>
 800dfd4:	1e03      	subs	r3, r0, #0
 800dfd6:	d001      	beq.n	800dfdc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800dfd8:	f7fa f9ac 	bl	8008334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dfdc:	0039      	movs	r1, r7
 800dfde:	4b08      	ldr	r3, [pc, #32]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800dfe0:	2208      	movs	r2, #8
 800dfe2:	0018      	movs	r0, r3
 800dfe4:	f008 fe58 	bl	8016c98 <HAL_TIM_PWM_ConfigChannel>
 800dfe8:	1e03      	subs	r3, r0, #0
 800dfea:	d001      	beq.n	800dff0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800dfec:	f7fa f9a2 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800dff0:	4b03      	ldr	r3, [pc, #12]	@ (800e000 <MX_TIM3_Init+0xf0>)
 800dff2:	0018      	movs	r0, r3
 800dff4:	f000 f882 	bl	800e0fc <HAL_TIM_MspPostInit>

}
 800dff8:	46c0      	nop			@ (mov r8, r8)
 800dffa:	46bd      	mov	sp, r7
 800dffc:	b006      	add	sp, #24
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20002068 	.word	0x20002068
 800e004:	40000400 	.word	0x40000400
 800e008:	0000ffff 	.word	0x0000ffff

0800e00c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e012:	003b      	movs	r3, r7
 800e014:	0018      	movs	r0, r3
 800e016:	2308      	movs	r3, #8
 800e018:	001a      	movs	r2, r3
 800e01a:	2100      	movs	r1, #0
 800e01c:	f012 f996 	bl	802034c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e020:	4b15      	ldr	r3, [pc, #84]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e022:	4a16      	ldr	r2, [pc, #88]	@ (800e07c <MX_TIM6_Init+0x70>)
 800e024:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e026:	4b14      	ldr	r3, [pc, #80]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e028:	220a      	movs	r2, #10
 800e02a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e02c:	4b12      	ldr	r3, [pc, #72]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e02e:	2200      	movs	r2, #0
 800e030:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e032:	4b11      	ldr	r3, [pc, #68]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e034:	4a12      	ldr	r2, [pc, #72]	@ (800e080 <MX_TIM6_Init+0x74>)
 800e036:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e038:	4b0f      	ldr	r3, [pc, #60]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e03e:	4b0e      	ldr	r3, [pc, #56]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e040:	0018      	movs	r0, r3
 800e042:	f008 fcaf 	bl	80169a4 <HAL_TIM_Base_Init>
 800e046:	1e03      	subs	r3, r0, #0
 800e048:	d001      	beq.n	800e04e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e04a:	f7fa f973 	bl	8008334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e04e:	003b      	movs	r3, r7
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e054:	003b      	movs	r3, r7
 800e056:	2200      	movs	r2, #0
 800e058:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e05a:	003a      	movs	r2, r7
 800e05c:	4b06      	ldr	r3, [pc, #24]	@ (800e078 <MX_TIM6_Init+0x6c>)
 800e05e:	0011      	movs	r1, r2
 800e060:	0018      	movs	r0, r3
 800e062:	f009 f865 	bl	8017130 <HAL_TIMEx_MasterConfigSynchronization>
 800e066:	1e03      	subs	r3, r0, #0
 800e068:	d001      	beq.n	800e06e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e06a:	f7fa f963 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e06e:	46c0      	nop			@ (mov r8, r8)
 800e070:	46bd      	mov	sp, r7
 800e072:	b002      	add	sp, #8
 800e074:	bd80      	pop	{r7, pc}
 800e076:	46c0      	nop			@ (mov r8, r8)
 800e078:	200020a8 	.word	0x200020a8
 800e07c:	40001000 	.word	0x40001000
 800e080:	0000ffff 	.word	0x0000ffff

0800e084 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	2380      	movs	r3, #128	@ 0x80
 800e092:	05db      	lsls	r3, r3, #23
 800e094:	429a      	cmp	r2, r3
 800e096:	d106      	bne.n	800e0a6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e098:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c4 <HAL_TIM_PWM_MspInit+0x40>)
 800e09a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e09c:	4b09      	ldr	r3, [pc, #36]	@ (800e0c4 <HAL_TIM_PWM_MspInit+0x40>)
 800e09e:	2101      	movs	r1, #1
 800e0a0:	430a      	orrs	r2, r1
 800e0a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e0a4:	e00a      	b.n	800e0bc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a07      	ldr	r2, [pc, #28]	@ (800e0c8 <HAL_TIM_PWM_MspInit+0x44>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d105      	bne.n	800e0bc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e0b0:	4b04      	ldr	r3, [pc, #16]	@ (800e0c4 <HAL_TIM_PWM_MspInit+0x40>)
 800e0b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0b4:	4b03      	ldr	r3, [pc, #12]	@ (800e0c4 <HAL_TIM_PWM_MspInit+0x40>)
 800e0b6:	2102      	movs	r1, #2
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e0bc:	46c0      	nop			@ (mov r8, r8)
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	b002      	add	sp, #8
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	40021000 	.word	0x40021000
 800e0c8:	40000400 	.word	0x40000400

0800e0cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a06      	ldr	r2, [pc, #24]	@ (800e0f4 <HAL_TIM_Base_MspInit+0x28>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d105      	bne.n	800e0ea <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e0de:	4b06      	ldr	r3, [pc, #24]	@ (800e0f8 <HAL_TIM_Base_MspInit+0x2c>)
 800e0e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0e2:	4b05      	ldr	r3, [pc, #20]	@ (800e0f8 <HAL_TIM_Base_MspInit+0x2c>)
 800e0e4:	2110      	movs	r1, #16
 800e0e6:	430a      	orrs	r2, r1
 800e0e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e0ea:	46c0      	nop			@ (mov r8, r8)
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	b002      	add	sp, #8
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	46c0      	nop			@ (mov r8, r8)
 800e0f4:	40001000 	.word	0x40001000
 800e0f8:	40021000 	.word	0x40021000

0800e0fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e0fc:	b590      	push	{r4, r7, lr}
 800e0fe:	b08b      	sub	sp, #44	@ 0x2c
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e104:	2414      	movs	r4, #20
 800e106:	193b      	adds	r3, r7, r4
 800e108:	0018      	movs	r0, r3
 800e10a:	2314      	movs	r3, #20
 800e10c:	001a      	movs	r2, r3
 800e10e:	2100      	movs	r1, #0
 800e110:	f012 f91c 	bl	802034c <memset>
  if(timHandle->Instance==TIM2)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	2380      	movs	r3, #128	@ 0x80
 800e11a:	05db      	lsls	r3, r3, #23
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d123      	bne.n	800e168 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e120:	4b27      	ldr	r3, [pc, #156]	@ (800e1c0 <HAL_TIM_MspPostInit+0xc4>)
 800e122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e124:	4b26      	ldr	r3, [pc, #152]	@ (800e1c0 <HAL_TIM_MspPostInit+0xc4>)
 800e126:	2101      	movs	r1, #1
 800e128:	430a      	orrs	r2, r1
 800e12a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e12c:	4b24      	ldr	r3, [pc, #144]	@ (800e1c0 <HAL_TIM_MspPostInit+0xc4>)
 800e12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e130:	2201      	movs	r2, #1
 800e132:	4013      	ands	r3, r2
 800e134:	613b      	str	r3, [r7, #16]
 800e136:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e138:	0021      	movs	r1, r4
 800e13a:	187b      	adds	r3, r7, r1
 800e13c:	220d      	movs	r2, #13
 800e13e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e140:	187b      	adds	r3, r7, r1
 800e142:	2202      	movs	r2, #2
 800e144:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e146:	187b      	adds	r3, r7, r1
 800e148:	2200      	movs	r2, #0
 800e14a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e14c:	187b      	adds	r3, r7, r1
 800e14e:	2200      	movs	r2, #0
 800e150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e152:	187b      	adds	r3, r7, r1
 800e154:	2202      	movs	r2, #2
 800e156:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e158:	187a      	adds	r2, r7, r1
 800e15a:	23a0      	movs	r3, #160	@ 0xa0
 800e15c:	05db      	lsls	r3, r3, #23
 800e15e:	0011      	movs	r1, r2
 800e160:	0018      	movs	r0, r3
 800e162:	f001 ff91 	bl	8010088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e166:	e027      	b.n	800e1b8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a15      	ldr	r2, [pc, #84]	@ (800e1c4 <HAL_TIM_MspPostInit+0xc8>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d122      	bne.n	800e1b8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e172:	4b13      	ldr	r3, [pc, #76]	@ (800e1c0 <HAL_TIM_MspPostInit+0xc4>)
 800e174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e176:	4b12      	ldr	r3, [pc, #72]	@ (800e1c0 <HAL_TIM_MspPostInit+0xc4>)
 800e178:	2104      	movs	r1, #4
 800e17a:	430a      	orrs	r2, r1
 800e17c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e17e:	4b10      	ldr	r3, [pc, #64]	@ (800e1c0 <HAL_TIM_MspPostInit+0xc4>)
 800e180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e182:	2204      	movs	r2, #4
 800e184:	4013      	ands	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]
 800e188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e18a:	2114      	movs	r1, #20
 800e18c:	187b      	adds	r3, r7, r1
 800e18e:	22e0      	movs	r2, #224	@ 0xe0
 800e190:	0052      	lsls	r2, r2, #1
 800e192:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e194:	187b      	adds	r3, r7, r1
 800e196:	2202      	movs	r2, #2
 800e198:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19a:	187b      	adds	r3, r7, r1
 800e19c:	2200      	movs	r2, #0
 800e19e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1a0:	187b      	adds	r3, r7, r1
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e1a6:	187b      	adds	r3, r7, r1
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1ac:	187b      	adds	r3, r7, r1
 800e1ae:	4a06      	ldr	r2, [pc, #24]	@ (800e1c8 <HAL_TIM_MspPostInit+0xcc>)
 800e1b0:	0019      	movs	r1, r3
 800e1b2:	0010      	movs	r0, r2
 800e1b4:	f001 ff68 	bl	8010088 <HAL_GPIO_Init>
}
 800e1b8:	46c0      	nop			@ (mov r8, r8)
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	b00b      	add	sp, #44	@ 0x2c
 800e1be:	bd90      	pop	{r4, r7, pc}
 800e1c0:	40021000 	.word	0x40021000
 800e1c4:	40000400 	.word	0x40000400
 800e1c8:	50000800 	.word	0x50000800

0800e1cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e1d0:	4b17      	ldr	r3, [pc, #92]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1d2:	4a18      	ldr	r2, [pc, #96]	@ (800e234 <MX_LPUART1_UART_Init+0x68>)
 800e1d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e1d6:	4b16      	ldr	r3, [pc, #88]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1d8:	22e1      	movs	r2, #225	@ 0xe1
 800e1da:	0252      	lsls	r2, r2, #9
 800e1dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e1de:	4b14      	ldr	r3, [pc, #80]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e1e4:	4b12      	ldr	r3, [pc, #72]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e1ea:	4b11      	ldr	r3, [pc, #68]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1f2:	220c      	movs	r2, #12
 800e1f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e202:	4b0b      	ldr	r3, [pc, #44]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e204:	2218      	movs	r2, #24
 800e206:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e208:	4b09      	ldr	r3, [pc, #36]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e20a:	2280      	movs	r2, #128	@ 0x80
 800e20c:	0212      	lsls	r2, r2, #8
 800e20e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e210:	4b07      	ldr	r3, [pc, #28]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e212:	2280      	movs	r2, #128	@ 0x80
 800e214:	0152      	lsls	r2, r2, #5
 800e216:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e218:	4b05      	ldr	r3, [pc, #20]	@ (800e230 <MX_LPUART1_UART_Init+0x64>)
 800e21a:	0018      	movs	r0, r3
 800e21c:	f009 f804 	bl	8017228 <HAL_UART_Init>
 800e220:	1e03      	subs	r3, r0, #0
 800e222:	d001      	beq.n	800e228 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e224:	f7fa f886 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e228:	46c0      	nop			@ (mov r8, r8)
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	46c0      	nop			@ (mov r8, r8)
 800e230:	200020e8 	.word	0x200020e8
 800e234:	40004800 	.word	0x40004800

0800e238 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e23c:	4b16      	ldr	r3, [pc, #88]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e23e:	4a17      	ldr	r2, [pc, #92]	@ (800e29c <MX_USART1_UART_Init+0x64>)
 800e240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e242:	4b15      	ldr	r3, [pc, #84]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e244:	22e1      	movs	r2, #225	@ 0xe1
 800e246:	0252      	lsls	r2, r2, #9
 800e248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e24a:	4b13      	ldr	r3, [pc, #76]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e250:	4b11      	ldr	r3, [pc, #68]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e252:	2200      	movs	r2, #0
 800e254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e256:	4b10      	ldr	r3, [pc, #64]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e258:	2200      	movs	r2, #0
 800e25a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e25c:	4b0e      	ldr	r3, [pc, #56]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e25e:	220c      	movs	r2, #12
 800e260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e262:	4b0d      	ldr	r3, [pc, #52]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e264:	2200      	movs	r2, #0
 800e266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e268:	4b0b      	ldr	r3, [pc, #44]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e26e:	4b0a      	ldr	r3, [pc, #40]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e270:	2200      	movs	r2, #0
 800e272:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e274:	4b08      	ldr	r3, [pc, #32]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e276:	2208      	movs	r2, #8
 800e278:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e27a:	4b07      	ldr	r3, [pc, #28]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e27c:	2280      	movs	r2, #128	@ 0x80
 800e27e:	0212      	lsls	r2, r2, #8
 800e280:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e282:	4b05      	ldr	r3, [pc, #20]	@ (800e298 <MX_USART1_UART_Init+0x60>)
 800e284:	0018      	movs	r0, r3
 800e286:	f008 ffcf 	bl	8017228 <HAL_UART_Init>
 800e28a:	1e03      	subs	r3, r0, #0
 800e28c:	d001      	beq.n	800e292 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e28e:	f7fa f851 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e292:	46c0      	nop			@ (mov r8, r8)
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	200021a0 	.word	0x200021a0
 800e29c:	40013800 	.word	0x40013800

0800e2a0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e2a4:	4b14      	ldr	r3, [pc, #80]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2a6:	4a15      	ldr	r2, [pc, #84]	@ (800e2fc <MX_USART4_UART_Init+0x5c>)
 800e2a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e2aa:	4b13      	ldr	r3, [pc, #76]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2ac:	22e1      	movs	r2, #225	@ 0xe1
 800e2ae:	0252      	lsls	r2, r2, #9
 800e2b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e2b2:	4b11      	ldr	r3, [pc, #68]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e2be:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2c6:	220c      	movs	r2, #12
 800e2c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e2d0:	4b09      	ldr	r3, [pc, #36]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e2d6:	4b08      	ldr	r3, [pc, #32]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e2dc:	4b06      	ldr	r3, [pc, #24]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e2e2:	4b05      	ldr	r3, [pc, #20]	@ (800e2f8 <MX_USART4_UART_Init+0x58>)
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	f008 ff9f 	bl	8017228 <HAL_UART_Init>
 800e2ea:	1e03      	subs	r3, r0, #0
 800e2ec:	d001      	beq.n	800e2f2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e2ee:	f7fa f821 	bl	8008334 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e2f2:	46c0      	nop			@ (mov r8, r8)
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	20002258 	.word	0x20002258
 800e2fc:	40004c00 	.word	0x40004c00

0800e300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b08d      	sub	sp, #52	@ 0x34
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e308:	241c      	movs	r4, #28
 800e30a:	193b      	adds	r3, r7, r4
 800e30c:	0018      	movs	r0, r3
 800e30e:	2314      	movs	r3, #20
 800e310:	001a      	movs	r2, r3
 800e312:	2100      	movs	r1, #0
 800e314:	f012 f81a 	bl	802034c <memset>
  if(uartHandle->Instance==LPUART1)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a8b      	ldr	r2, [pc, #556]	@ (800e54c <HAL_UART_MspInit+0x24c>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d129      	bne.n	800e376 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e322:	4b8b      	ldr	r3, [pc, #556]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e326:	4b8a      	ldr	r3, [pc, #552]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e328:	2180      	movs	r1, #128	@ 0x80
 800e32a:	02c9      	lsls	r1, r1, #11
 800e32c:	430a      	orrs	r2, r1
 800e32e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e330:	4b87      	ldr	r3, [pc, #540]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e334:	4b86      	ldr	r3, [pc, #536]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e336:	2104      	movs	r1, #4
 800e338:	430a      	orrs	r2, r1
 800e33a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e33c:	4b84      	ldr	r3, [pc, #528]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e340:	2204      	movs	r2, #4
 800e342:	4013      	ands	r3, r2
 800e344:	61bb      	str	r3, [r7, #24]
 800e346:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e348:	0021      	movs	r1, r4
 800e34a:	187b      	adds	r3, r7, r1
 800e34c:	2203      	movs	r2, #3
 800e34e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e350:	187b      	adds	r3, r7, r1
 800e352:	2202      	movs	r2, #2
 800e354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e356:	187b      	adds	r3, r7, r1
 800e358:	2200      	movs	r2, #0
 800e35a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e35c:	187b      	adds	r3, r7, r1
 800e35e:	2203      	movs	r2, #3
 800e360:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e362:	187b      	adds	r3, r7, r1
 800e364:	2206      	movs	r2, #6
 800e366:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e368:	187b      	adds	r3, r7, r1
 800e36a:	4a7a      	ldr	r2, [pc, #488]	@ (800e554 <HAL_UART_MspInit+0x254>)
 800e36c:	0019      	movs	r1, r3
 800e36e:	0010      	movs	r0, r2
 800e370:	f001 fe8a 	bl	8010088 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e374:	e0e5      	b.n	800e542 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a77      	ldr	r2, [pc, #476]	@ (800e558 <HAL_UART_MspInit+0x258>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d133      	bne.n	800e3e8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e380:	4b73      	ldr	r3, [pc, #460]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e384:	4b72      	ldr	r3, [pc, #456]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e386:	2180      	movs	r1, #128	@ 0x80
 800e388:	01c9      	lsls	r1, r1, #7
 800e38a:	430a      	orrs	r2, r1
 800e38c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e38e:	4b70      	ldr	r3, [pc, #448]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e392:	4b6f      	ldr	r3, [pc, #444]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e394:	2101      	movs	r1, #1
 800e396:	430a      	orrs	r2, r1
 800e398:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e39a:	4b6d      	ldr	r3, [pc, #436]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4013      	ands	r3, r2
 800e3a2:	617b      	str	r3, [r7, #20]
 800e3a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e3a6:	211c      	movs	r1, #28
 800e3a8:	187b      	adds	r3, r7, r1
 800e3aa:	22c0      	movs	r2, #192	@ 0xc0
 800e3ac:	00d2      	lsls	r2, r2, #3
 800e3ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3b0:	187b      	adds	r3, r7, r1
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3b6:	187b      	adds	r3, r7, r1
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3bc:	187b      	adds	r3, r7, r1
 800e3be:	2203      	movs	r2, #3
 800e3c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e3c2:	187b      	adds	r3, r7, r1
 800e3c4:	2204      	movs	r2, #4
 800e3c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3c8:	187a      	adds	r2, r7, r1
 800e3ca:	23a0      	movs	r3, #160	@ 0xa0
 800e3cc:	05db      	lsls	r3, r3, #23
 800e3ce:	0011      	movs	r1, r2
 800e3d0:	0018      	movs	r0, r3
 800e3d2:	f001 fe59 	bl	8010088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2100      	movs	r1, #0
 800e3da:	201b      	movs	r0, #27
 800e3dc:	f001 fa02 	bl	800f7e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e3e0:	201b      	movs	r0, #27
 800e3e2:	f001 fa14 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800e3e6:	e0ac      	b.n	800e542 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a5b      	ldr	r2, [pc, #364]	@ (800e55c <HAL_UART_MspInit+0x25c>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d000      	beq.n	800e3f4 <HAL_UART_MspInit+0xf4>
 800e3f2:	e0a6      	b.n	800e542 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e3f4:	4b56      	ldr	r3, [pc, #344]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e3f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3f8:	4b55      	ldr	r3, [pc, #340]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e3fa:	2180      	movs	r1, #128	@ 0x80
 800e3fc:	0309      	lsls	r1, r1, #12
 800e3fe:	430a      	orrs	r2, r1
 800e400:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e402:	4b53      	ldr	r3, [pc, #332]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e406:	4b52      	ldr	r3, [pc, #328]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e408:	2101      	movs	r1, #1
 800e40a:	430a      	orrs	r2, r1
 800e40c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e40e:	4b50      	ldr	r3, [pc, #320]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e412:	2201      	movs	r2, #1
 800e414:	4013      	ands	r3, r2
 800e416:	613b      	str	r3, [r7, #16]
 800e418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e41a:	4b4d      	ldr	r3, [pc, #308]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41e:	4b4c      	ldr	r3, [pc, #304]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e420:	2104      	movs	r1, #4
 800e422:	430a      	orrs	r2, r1
 800e424:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e426:	4b4a      	ldr	r3, [pc, #296]	@ (800e550 <HAL_UART_MspInit+0x250>)
 800e428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42a:	2204      	movs	r2, #4
 800e42c:	4013      	ands	r3, r2
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e432:	241c      	movs	r4, #28
 800e434:	193b      	adds	r3, r7, r4
 800e436:	2202      	movs	r2, #2
 800e438:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e43a:	193b      	adds	r3, r7, r4
 800e43c:	2202      	movs	r2, #2
 800e43e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e440:	193b      	adds	r3, r7, r4
 800e442:	2200      	movs	r2, #0
 800e444:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e446:	193b      	adds	r3, r7, r4
 800e448:	2203      	movs	r2, #3
 800e44a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e44c:	193b      	adds	r3, r7, r4
 800e44e:	2206      	movs	r2, #6
 800e450:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e452:	193a      	adds	r2, r7, r4
 800e454:	23a0      	movs	r3, #160	@ 0xa0
 800e456:	05db      	lsls	r3, r3, #23
 800e458:	0011      	movs	r1, r2
 800e45a:	0018      	movs	r0, r3
 800e45c:	f001 fe14 	bl	8010088 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e460:	0021      	movs	r1, r4
 800e462:	187b      	adds	r3, r7, r1
 800e464:	2280      	movs	r2, #128	@ 0x80
 800e466:	00d2      	lsls	r2, r2, #3
 800e468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e46a:	187b      	adds	r3, r7, r1
 800e46c:	2202      	movs	r2, #2
 800e46e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e470:	187b      	adds	r3, r7, r1
 800e472:	2200      	movs	r2, #0
 800e474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e476:	187b      	adds	r3, r7, r1
 800e478:	2203      	movs	r2, #3
 800e47a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e47c:	187b      	adds	r3, r7, r1
 800e47e:	2206      	movs	r2, #6
 800e480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e482:	187b      	adds	r3, r7, r1
 800e484:	4a33      	ldr	r2, [pc, #204]	@ (800e554 <HAL_UART_MspInit+0x254>)
 800e486:	0019      	movs	r1, r3
 800e488:	0010      	movs	r0, r2
 800e48a:	f001 fdfd 	bl	8010088 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e48e:	4b34      	ldr	r3, [pc, #208]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e490:	4a34      	ldr	r2, [pc, #208]	@ (800e564 <HAL_UART_MspInit+0x264>)
 800e492:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e494:	4b32      	ldr	r3, [pc, #200]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e496:	220c      	movs	r2, #12
 800e498:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e49a:	4b31      	ldr	r3, [pc, #196]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4a0:	4b2f      	ldr	r3, [pc, #188]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e4a6:	4b2e      	ldr	r3, [pc, #184]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4a8:	2280      	movs	r2, #128	@ 0x80
 800e4aa:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e4ac:	4b2c      	ldr	r3, [pc, #176]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e4b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e4b8:	4b29      	ldr	r3, [pc, #164]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4ba:	2220      	movs	r2, #32
 800e4bc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e4be:	4b28      	ldr	r3, [pc, #160]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e4c4:	4b26      	ldr	r3, [pc, #152]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4c6:	0018      	movs	r0, r3
 800e4c8:	f001 f9c2 	bl	800f850 <HAL_DMA_Init>
 800e4cc:	1e03      	subs	r3, r0, #0
 800e4ce:	d001      	beq.n	800e4d4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e4d0:	f7f9 ff30 	bl	8008334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a22      	ldr	r2, [pc, #136]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800e4da:	4b21      	ldr	r3, [pc, #132]	@ (800e560 <HAL_UART_MspInit+0x260>)
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e4e0:	4b21      	ldr	r3, [pc, #132]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e4e2:	4a22      	ldr	r2, [pc, #136]	@ (800e56c <HAL_UART_MspInit+0x26c>)
 800e4e4:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e4e6:	4b20      	ldr	r3, [pc, #128]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e4e8:	220c      	movs	r2, #12
 800e4ea:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e4ec:	4b1e      	ldr	r3, [pc, #120]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e4ee:	2210      	movs	r2, #16
 800e4f0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4f2:	4b1d      	ldr	r3, [pc, #116]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e4f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e4fa:	2280      	movs	r2, #128	@ 0x80
 800e4fc:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e500:	2200      	movs	r2, #0
 800e502:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e504:	4b18      	ldr	r3, [pc, #96]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e506:	2200      	movs	r2, #0
 800e508:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e50a:	4b17      	ldr	r3, [pc, #92]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e510:	4b15      	ldr	r3, [pc, #84]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e512:	2200      	movs	r2, #0
 800e514:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e516:	4b14      	ldr	r3, [pc, #80]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e518:	0018      	movs	r0, r3
 800e51a:	f001 f999 	bl	800f850 <HAL_DMA_Init>
 800e51e:	1e03      	subs	r3, r0, #0
 800e520:	d001      	beq.n	800e526 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e522:	f7f9 ff07 	bl	8008334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a0f      	ldr	r2, [pc, #60]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e52a:	671a      	str	r2, [r3, #112]	@ 0x70
 800e52c:	4b0e      	ldr	r3, [pc, #56]	@ (800e568 <HAL_UART_MspInit+0x268>)
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e532:	2200      	movs	r2, #0
 800e534:	2100      	movs	r1, #0
 800e536:	200e      	movs	r0, #14
 800e538:	f001 f954 	bl	800f7e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e53c:	200e      	movs	r0, #14
 800e53e:	f001 f966 	bl	800f80e <HAL_NVIC_EnableIRQ>
}
 800e542:	46c0      	nop			@ (mov r8, r8)
 800e544:	46bd      	mov	sp, r7
 800e546:	b00d      	add	sp, #52	@ 0x34
 800e548:	bd90      	pop	{r4, r7, pc}
 800e54a:	46c0      	nop			@ (mov r8, r8)
 800e54c:	40004800 	.word	0x40004800
 800e550:	40021000 	.word	0x40021000
 800e554:	50000800 	.word	0x50000800
 800e558:	40013800 	.word	0x40013800
 800e55c:	40004c00 	.word	0x40004c00
 800e560:	20002310 	.word	0x20002310
 800e564:	4002006c 	.word	0x4002006c
 800e568:	20002358 	.word	0x20002358
 800e56c:	40020080 	.word	0x40020080

0800e570 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e578:	f000 fc90 	bl	800ee9c <HAL_GetTick>
 800e57c:	0003      	movs	r3, r0
 800e57e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e580:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f4 <TimestampIsReached+0x84>)
 800e582:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e584:	697a      	ldr	r2, [r7, #20]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d307      	bcc.n	800e59c <TimestampIsReached+0x2c>
 800e58c:	697a      	ldr	r2, [r7, #20]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	693a      	ldr	r2, [r7, #16]
 800e594:	429a      	cmp	r2, r3
 800e596:	d901      	bls.n	800e59c <TimestampIsReached+0x2c>
 800e598:	2201      	movs	r2, #1
 800e59a:	e000      	b.n	800e59e <TimestampIsReached+0x2e>
 800e59c:	2200      	movs	r2, #0
 800e59e:	230f      	movs	r3, #15
 800e5a0:	18fb      	adds	r3, r7, r3
 800e5a2:	701a      	strb	r2, [r3, #0]
 800e5a4:	781a      	ldrb	r2, [r3, #0]
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	400a      	ands	r2, r1
 800e5aa:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e5ac:	697a      	ldr	r2, [r7, #20]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d207      	bcs.n	800e5c4 <TimestampIsReached+0x54>
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	693a      	ldr	r2, [r7, #16]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d201      	bcs.n	800e5c4 <TimestampIsReached+0x54>
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	e000      	b.n	800e5c6 <TimestampIsReached+0x56>
 800e5c4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e5c6:	200e      	movs	r0, #14
 800e5c8:	183b      	adds	r3, r7, r0
 800e5ca:	701a      	strb	r2, [r3, #0]
 800e5cc:	781a      	ldrb	r2, [r3, #0]
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	400a      	ands	r2, r1
 800e5d2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e5d4:	230f      	movs	r3, #15
 800e5d6:	18fb      	adds	r3, r7, r3
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d103      	bne.n	800e5e6 <TimestampIsReached+0x76>
 800e5de:	183b      	adds	r3, r7, r0
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e000      	b.n	800e5ec <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	b006      	add	sp, #24
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	7fffffff 	.word	0x7fffffff

0800e5f8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e600:	f000 fc4c 	bl	800ee9c <HAL_GetTick>
 800e604:	0002      	movs	r2, r0
 800e606:	4904      	ldr	r1, [pc, #16]	@ (800e618 <AddTimestamp+0x20>)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	0018      	movs	r0, r3
 800e60c:	f011 fd5a 	bl	80200c4 <siprintf>
}
 800e610:	46c0      	nop			@ (mov r8, r8)
 800e612:	46bd      	mov	sp, r7
 800e614:	b002      	add	sp, #8
 800e616:	bd80      	pop	{r7, pc}
 800e618:	08025130 	.word	0x08025130

0800e61c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e61c:	b40c      	push	{r2, r3}
 800e61e:	b5b0      	push	{r4, r5, r7, lr}
 800e620:	b0a4      	sub	sp, #144	@ 0x90
 800e622:	af00      	add	r7, sp, #0
 800e624:	0002      	movs	r2, r0
 800e626:	6039      	str	r1, [r7, #0]
 800e628:	1dfb      	adds	r3, r7, #7
 800e62a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e62c:	4b23      	ldr	r3, [pc, #140]	@ (800e6bc <CreateLine+0xa0>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	1dfa      	adds	r2, r7, #7
 800e632:	7812      	ldrb	r2, [r2, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	d839      	bhi.n	800e6ac <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e638:	683a      	ldr	r2, [r7, #0]
 800e63a:	4921      	ldr	r1, [pc, #132]	@ (800e6c0 <CreateLine+0xa4>)
 800e63c:	240c      	movs	r4, #12
 800e63e:	193b      	adds	r3, r7, r4
 800e640:	0018      	movs	r0, r3
 800e642:	f011 fd3f 	bl	80200c4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e646:	4b1d      	ldr	r3, [pc, #116]	@ (800e6bc <CreateLine+0xa0>)
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d909      	bls.n	800e662 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e64e:	193b      	adds	r3, r7, r4
 800e650:	0018      	movs	r0, r3
 800e652:	f7f1 fd8b 	bl	800016c <strlen>
 800e656:	0002      	movs	r2, r0
 800e658:	193b      	adds	r3, r7, r4
 800e65a:	189b      	adds	r3, r3, r2
 800e65c:	0018      	movs	r0, r3
 800e65e:	f7ff ffcb 	bl	800e5f8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e662:	240c      	movs	r4, #12
 800e664:	193b      	adds	r3, r7, r4
 800e666:	0018      	movs	r0, r3
 800e668:	f7f1 fd80 	bl	800016c <strlen>
 800e66c:	0003      	movs	r3, r0
 800e66e:	218c      	movs	r1, #140	@ 0x8c
 800e670:	187a      	adds	r2, r7, r1
 800e672:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e674:	239c      	movs	r3, #156	@ 0x9c
 800e676:	2508      	movs	r5, #8
 800e678:	195b      	adds	r3, r3, r5
 800e67a:	19db      	adds	r3, r3, r7
 800e67c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e67e:	193a      	adds	r2, r7, r4
 800e680:	187b      	adds	r3, r7, r1
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	18d0      	adds	r0, r2, r3
 800e686:	187b      	adds	r3, r7, r1
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2280      	movs	r2, #128	@ 0x80
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	0019      	movs	r1, r3
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	2298      	movs	r2, #152	@ 0x98
 800e694:	1952      	adds	r2, r2, r5
 800e696:	19d2      	adds	r2, r2, r7
 800e698:	6812      	ldr	r2, [r2, #0]
 800e69a:	f011 fdab 	bl	80201f4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e69e:	193a      	adds	r2, r7, r4
 800e6a0:	4b08      	ldr	r3, [pc, #32]	@ (800e6c4 <CreateLine+0xa8>)
 800e6a2:	0011      	movs	r1, r2
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f011 fc9d 	bl	801ffe4 <iprintf>
 800e6aa:	e000      	b.n	800e6ae <CreateLine+0x92>
    return;
 800e6ac:	46c0      	nop			@ (mov r8, r8)
}
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	b024      	add	sp, #144	@ 0x90
 800e6b2:	bcb0      	pop	{r4, r5, r7}
 800e6b4:	bc08      	pop	{r3}
 800e6b6:	b002      	add	sp, #8
 800e6b8:	4718      	bx	r3
 800e6ba:	46c0      	nop			@ (mov r8, r8)
 800e6bc:	200000d4 	.word	0x200000d4
 800e6c0:	0802513c 	.word	0x0802513c
 800e6c4:	08025140 	.word	0x08025140

0800e6c8 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	68b9      	ldr	r1, [r7, #8]
 800e6da:	4804      	ldr	r0, [pc, #16]	@ (800e6ec <_write+0x24>)
 800e6dc:	2364      	movs	r3, #100	@ 0x64
 800e6de:	f008 fe09 	bl	80172f4 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e6e2:	687b      	ldr	r3, [r7, #4]
}
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	b004      	add	sp, #16
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	200021a0 	.word	0x200021a0

0800e6f0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	0002      	movs	r2, r0
 800e6f8:	1dfb      	adds	r3, r7, #7
 800e6fa:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e6fc:	4b03      	ldr	r3, [pc, #12]	@ (800e70c <SetVerboseLevel+0x1c>)
 800e6fe:	1dfa      	adds	r2, r7, #7
 800e700:	7812      	ldrb	r2, [r2, #0]
 800e702:	701a      	strb	r2, [r3, #0]
}
 800e704:	46c0      	nop			@ (mov r8, r8)
 800e706:	46bd      	mov	sp, r7
 800e708:	b002      	add	sp, #8
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	200000d4 	.word	0x200000d4

0800e710 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e710:	b580      	push	{r7, lr}
 800e712:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e714:	4b02      	ldr	r3, [pc, #8]	@ (800e720 <GetVerboseLevel+0x10>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	0018      	movs	r0, r3
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	46c0      	nop			@ (mov r8, r8)
 800e720:	200000d4 	.word	0x200000d4

0800e724 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e72a:	4a0f      	ldr	r2, [pc, #60]	@ (800e768 <BinaryReleaseInfo+0x44>)
 800e72c:	4b0f      	ldr	r3, [pc, #60]	@ (800e76c <BinaryReleaseInfo+0x48>)
 800e72e:	0019      	movs	r1, r3
 800e730:	2002      	movs	r0, #2
 800e732:	f7ff ff73 	bl	800e61c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e736:	480e      	ldr	r0, [pc, #56]	@ (800e770 <BinaryReleaseInfo+0x4c>)
 800e738:	4a0e      	ldr	r2, [pc, #56]	@ (800e774 <BinaryReleaseInfo+0x50>)
 800e73a:	490c      	ldr	r1, [pc, #48]	@ (800e76c <BinaryReleaseInfo+0x48>)
 800e73c:	4b0e      	ldr	r3, [pc, #56]	@ (800e778 <BinaryReleaseInfo+0x54>)
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	0003      	movs	r3, r0
 800e742:	2002      	movs	r0, #2
 800e744:	f7ff ff6a 	bl	800e61c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e748:	4b0c      	ldr	r3, [pc, #48]	@ (800e77c <BinaryReleaseInfo+0x58>)
 800e74a:	4a0d      	ldr	r2, [pc, #52]	@ (800e780 <BinaryReleaseInfo+0x5c>)
 800e74c:	4907      	ldr	r1, [pc, #28]	@ (800e76c <BinaryReleaseInfo+0x48>)
 800e74e:	2002      	movs	r0, #2
 800e750:	f7ff ff64 	bl	800e61c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e754:	4b0b      	ldr	r3, [pc, #44]	@ (800e784 <BinaryReleaseInfo+0x60>)
 800e756:	4a0c      	ldr	r2, [pc, #48]	@ (800e788 <BinaryReleaseInfo+0x64>)
 800e758:	4904      	ldr	r1, [pc, #16]	@ (800e76c <BinaryReleaseInfo+0x48>)
 800e75a:	2002      	movs	r0, #2
 800e75c:	f7ff ff5e 	bl	800e61c <CreateLine>
}
 800e760:	46c0      	nop			@ (mov r8, r8)
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	46c0      	nop			@ (mov r8, r8)
 800e768:	08025148 	.word	0x08025148
 800e76c:	08025174 	.word	0x08025174
 800e770:	08025178 	.word	0x08025178
 800e774:	08025184 	.word	0x08025184
 800e778:	08025198 	.word	0x08025198
 800e77c:	080251a4 	.word	0x080251a4
 800e780:	080251b0 	.word	0x080251b0
 800e784:	080251b8 	.word	0x080251b8
 800e788:	080251c0 	.word	0x080251c0

0800e78c <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	68f9      	ldr	r1, [r7, #12]
 800e79e:	4803      	ldr	r0, [pc, #12]	@ (800e7ac <errorHandler+0x20>)
 800e7a0:	f011 fc20 	bl	801ffe4 <iprintf>
//    while (true)
//    {
//    }
}
 800e7a4:	46c0      	nop			@ (mov r8, r8)
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	b004      	add	sp, #16
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	080251d8 	.word	0x080251d8

0800e7b0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e7b0:	b590      	push	{r4, r7, lr}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6039      	str	r1, [r7, #0]
 800e7b8:	0011      	movs	r1, r2
 800e7ba:	1dfb      	adds	r3, r7, #7
 800e7bc:	1c02      	adds	r2, r0, #0
 800e7be:	701a      	strb	r2, [r3, #0]
 800e7c0:	1dbb      	adds	r3, r7, #6
 800e7c2:	1c0a      	adds	r2, r1, #0
 800e7c4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f0 <ReadRegister+0x40>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00a      	beq.n	800e7e4 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e7ce:	4b08      	ldr	r3, [pc, #32]	@ (800e7f0 <ReadRegister+0x40>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	1dba      	adds	r2, r7, #6
 800e7d4:	7814      	ldrb	r4, [r2, #0]
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	1dfa      	adds	r2, r7, #7
 800e7da:	7810      	ldrb	r0, [r2, #0]
 800e7dc:	0022      	movs	r2, r4
 800e7de:	4798      	blx	r3
 800e7e0:	0003      	movs	r3, r0
 800e7e2:	e000      	b.n	800e7e6 <ReadRegister+0x36>
	}
	return false;
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	b003      	add	sp, #12
 800e7ec:	bd90      	pop	{r4, r7, pc}
 800e7ee:	46c0      	nop			@ (mov r8, r8)
 800e7f0:	200023a8 	.word	0x200023a8

0800e7f4 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e7f4:	b590      	push	{r4, r7, lr}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6039      	str	r1, [r7, #0]
 800e7fc:	0011      	movs	r1, r2
 800e7fe:	1dfb      	adds	r3, r7, #7
 800e800:	1c02      	adds	r2, r0, #0
 800e802:	701a      	strb	r2, [r3, #0]
 800e804:	1dbb      	adds	r3, r7, #6
 800e806:	1c0a      	adds	r2, r1, #0
 800e808:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e80a:	4b0a      	ldr	r3, [pc, #40]	@ (800e834 <WriteRegister+0x40>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00a      	beq.n	800e828 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e812:	4b08      	ldr	r3, [pc, #32]	@ (800e834 <WriteRegister+0x40>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	1dba      	adds	r2, r7, #6
 800e818:	7814      	ldrb	r4, [r2, #0]
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	1dfa      	adds	r2, r7, #7
 800e81e:	7810      	ldrb	r0, [r2, #0]
 800e820:	0022      	movs	r2, r4
 800e822:	4798      	blx	r3
 800e824:	0003      	movs	r3, r0
 800e826:	e000      	b.n	800e82a <WriteRegister+0x36>
  }
  return false;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	0018      	movs	r0, r3
 800e82c:	46bd      	mov	sp, r7
 800e82e:	b003      	add	sp, #12
 800e830:	bd90      	pop	{r4, r7, pc}
 800e832:	46c0      	nop			@ (mov r8, r8)
 800e834:	200023ac 	.word	0x200023ac

0800e838 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	000a      	movs	r2, r1
 800e842:	1cfb      	adds	r3, r7, #3
 800e844:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e846:	230f      	movs	r3, #15
 800e848:	18fb      	adds	r3, r7, r3
 800e84a:	22ff      	movs	r2, #255	@ 0xff
 800e84c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e84e:	230e      	movs	r3, #14
 800e850:	18fb      	adds	r3, r7, r3
 800e852:	2200      	movs	r2, #0
 800e854:	701a      	strb	r2, [r3, #0]
 800e856:	e037      	b.n	800e8c8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e858:	230e      	movs	r3, #14
 800e85a:	18fb      	adds	r3, r7, r3
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	18d3      	adds	r3, r2, r3
 800e862:	7819      	ldrb	r1, [r3, #0]
 800e864:	220f      	movs	r2, #15
 800e866:	18bb      	adds	r3, r7, r2
 800e868:	18ba      	adds	r2, r7, r2
 800e86a:	7812      	ldrb	r2, [r2, #0]
 800e86c:	404a      	eors	r2, r1
 800e86e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e870:	230d      	movs	r3, #13
 800e872:	18fb      	adds	r3, r7, r3
 800e874:	2200      	movs	r2, #0
 800e876:	701a      	strb	r2, [r3, #0]
 800e878:	e01b      	b.n	800e8b2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e87a:	210f      	movs	r1, #15
 800e87c:	187b      	adds	r3, r7, r1
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	b25b      	sxtb	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	da09      	bge.n	800e89a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e886:	187b      	adds	r3, r7, r1
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	b25b      	sxtb	r3, r3
 800e88e:	2231      	movs	r2, #49	@ 0x31
 800e890:	4053      	eors	r3, r2
 800e892:	b25a      	sxtb	r2, r3
 800e894:	187b      	adds	r3, r7, r1
 800e896:	701a      	strb	r2, [r3, #0]
 800e898:	e005      	b.n	800e8a6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e89a:	230f      	movs	r3, #15
 800e89c:	18fa      	adds	r2, r7, r3
 800e89e:	18fb      	adds	r3, r7, r3
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	18db      	adds	r3, r3, r3
 800e8a4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e8a6:	210d      	movs	r1, #13
 800e8a8:	187b      	adds	r3, r7, r1
 800e8aa:	781a      	ldrb	r2, [r3, #0]
 800e8ac:	187b      	adds	r3, r7, r1
 800e8ae:	3201      	adds	r2, #1
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	230d      	movs	r3, #13
 800e8b4:	18fb      	adds	r3, r7, r3
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b07      	cmp	r3, #7
 800e8ba:	d9de      	bls.n	800e87a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e8bc:	210e      	movs	r1, #14
 800e8be:	187b      	adds	r3, r7, r1
 800e8c0:	781a      	ldrb	r2, [r3, #0]
 800e8c2:	187b      	adds	r3, r7, r1
 800e8c4:	3201      	adds	r2, #1
 800e8c6:	701a      	strb	r2, [r3, #0]
 800e8c8:	230e      	movs	r3, #14
 800e8ca:	18fa      	adds	r2, r7, r3
 800e8cc:	1cfb      	adds	r3, r7, #3
 800e8ce:	7812      	ldrb	r2, [r2, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d3c0      	bcc.n	800e858 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e8d6:	230f      	movs	r3, #15
 800e8d8:	18fb      	adds	r3, r7, r3
 800e8da:	781b      	ldrb	r3, [r3, #0]
}
 800e8dc:	0018      	movs	r0, r3
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	b004      	add	sp, #16
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <HIDS_Init+0x34>)
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e8f4:	4b09      	ldr	r3, [pc, #36]	@ (800e91c <HIDS_Init+0x38>)
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e8fa:	4b09      	ldr	r3, [pc, #36]	@ (800e920 <HIDS_Init+0x3c>)
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	0018      	movs	r0, r3
 800e900:	f000 f840 	bl	800e984 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e904:	4b07      	ldr	r3, [pc, #28]	@ (800e924 <HIDS_Init+0x40>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	0018      	movs	r0, r3
 800e90a:	f000 f82b 	bl	800e964 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e90e:	46c0      	nop			@ (mov r8, r8)
 800e910:	46bd      	mov	sp, r7
 800e912:	b002      	add	sp, #8
 800e914:	bd80      	pop	{r7, pc}
 800e916:	46c0      	nop			@ (mov r8, r8)
 800e918:	200023a8 	.word	0x200023a8
 800e91c:	200023ac 	.word	0x200023ac
 800e920:	200000d6 	.word	0x200000d6
 800e924:	200000d5 	.word	0x200000d5

0800e928 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e92c:	f000 fab6 	bl	800ee9c <HAL_GetTick>
 800e930:	0002      	movs	r2, r0
 800e932:	4b08      	ldr	r3, [pc, #32]	@ (800e954 <HIDS_StartMeasurement+0x2c>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	18d2      	adds	r2, r2, r3
 800e938:	4b07      	ldr	r3, [pc, #28]	@ (800e958 <HIDS_StartMeasurement+0x30>)
 800e93a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e93c:	4b07      	ldr	r3, [pc, #28]	@ (800e95c <HIDS_StartMeasurement+0x34>)
 800e93e:	2201      	movs	r2, #1
 800e940:	0019      	movs	r1, r3
 800e942:	2044      	movs	r0, #68	@ 0x44
 800e944:	f7ff ff56 	bl	800e7f4 <WriteRegister>
  MeasurementDone = false;
 800e948:	4b05      	ldr	r3, [pc, #20]	@ (800e960 <HIDS_StartMeasurement+0x38>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	701a      	strb	r2, [r3, #0]
}
 800e94e:	46c0      	nop			@ (mov r8, r8)
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	200000dc 	.word	0x200000dc
 800e958:	200000d8 	.word	0x200000d8
 800e95c:	200000d6 	.word	0x200000d6
 800e960:	200023be 	.word	0x200023be

0800e964 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	0002      	movs	r2, r0
 800e96c:	1dfb      	adds	r3, r7, #7
 800e96e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e970:	4b03      	ldr	r3, [pc, #12]	@ (800e980 <HIDS_SetHeaterMode+0x1c>)
 800e972:	1dfa      	adds	r2, r7, #7
 800e974:	7812      	ldrb	r2, [r2, #0]
 800e976:	701a      	strb	r2, [r3, #0]
}
 800e978:	46c0      	nop			@ (mov r8, r8)
 800e97a:	46bd      	mov	sp, r7
 800e97c:	b002      	add	sp, #8
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	200000d5 	.word	0x200000d5

0800e984 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	0002      	movs	r2, r0
 800e98c:	1dfb      	adds	r3, r7, #7
 800e98e:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e990:	4b03      	ldr	r3, [pc, #12]	@ (800e9a0 <HIDS_SetMeasurementMode+0x1c>)
 800e992:	1dfa      	adds	r2, r7, #7
 800e994:	7812      	ldrb	r2, [r2, #0]
 800e996:	701a      	strb	r2, [r3, #0]
}
 800e998:	46c0      	nop			@ (mov r8, r8)
 800e99a:	46bd      	mov	sp, r7
 800e99c:	b002      	add	sp, #8
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	200000d6 	.word	0x200000d6

0800e9a4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e9ac:	f000 fa76 	bl	800ee9c <HAL_GetTick>
 800e9b0:	0002      	movs	r2, r0
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	18d2      	adds	r2, r2, r3
 800e9b6:	4b03      	ldr	r3, [pc, #12]	@ (800e9c4 <setHIDSTimeStamp+0x20>)
 800e9b8:	601a      	str	r2, [r3, #0]
}
 800e9ba:	46c0      	nop			@ (mov r8, r8)
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	b002      	add	sp, #8
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	46c0      	nop			@ (mov r8, r8)
 800e9c4:	200023c0 	.word	0x200023c0

0800e9c8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e9c8:	b590      	push	{r4, r7, lr}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	781a      	ldrb	r2, [r3, #0]
 800e9d4:	210c      	movs	r1, #12
 800e9d6:	187b      	adds	r3, r7, r1
 800e9d8:	701a      	strb	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	785a      	ldrb	r2, [r3, #1]
 800e9de:	187b      	adds	r3, r7, r1
 800e9e0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e9e2:	240f      	movs	r4, #15
 800e9e4:	193b      	adds	r3, r7, r4
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	7892      	ldrb	r2, [r2, #2]
 800e9ea:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e9ec:	187b      	adds	r3, r7, r1
 800e9ee:	2102      	movs	r1, #2
 800e9f0:	0018      	movs	r0, r3
 800e9f2:	f7ff ff21 	bl	800e838 <CalculateCRC>
 800e9f6:	0003      	movs	r3, r0
 800e9f8:	001a      	movs	r2, r3
 800e9fa:	193b      	adds	r3, r7, r4
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d007      	beq.n	800ea12 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800ea02:	4a1a      	ldr	r2, [pc, #104]	@ (800ea6c <CheckCRC+0xa4>)
 800ea04:	4b1a      	ldr	r3, [pc, #104]	@ (800ea70 <CheckCRC+0xa8>)
 800ea06:	0019      	movs	r1, r3
 800ea08:	2001      	movs	r0, #1
 800ea0a:	f7ff fe07 	bl	800e61c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e027      	b.n	800ea62 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	78da      	ldrb	r2, [r3, #3]
 800ea16:	2108      	movs	r1, #8
 800ea18:	187b      	adds	r3, r7, r1
 800ea1a:	701a      	strb	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	791a      	ldrb	r2, [r3, #4]
 800ea20:	187b      	adds	r3, r7, r1
 800ea22:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800ea24:	240e      	movs	r4, #14
 800ea26:	193b      	adds	r3, r7, r4
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	7952      	ldrb	r2, [r2, #5]
 800ea2c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800ea2e:	187b      	adds	r3, r7, r1
 800ea30:	2102      	movs	r1, #2
 800ea32:	0018      	movs	r0, r3
 800ea34:	f7ff ff00 	bl	800e838 <CalculateCRC>
 800ea38:	0003      	movs	r3, r0
 800ea3a:	001a      	movs	r2, r3
 800ea3c:	193b      	adds	r3, r7, r4
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d00d      	beq.n	800ea60 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ea44:	4a0b      	ldr	r2, [pc, #44]	@ (800ea74 <CheckCRC+0xac>)
 800ea46:	4b0a      	ldr	r3, [pc, #40]	@ (800ea70 <CheckCRC+0xa8>)
 800ea48:	0019      	movs	r1, r3
 800ea4a:	2001      	movs	r0, #1
 800ea4c:	f7ff fde6 	bl	800e61c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800ea50:	4a09      	ldr	r2, [pc, #36]	@ (800ea78 <CheckCRC+0xb0>)
 800ea52:	4b0a      	ldr	r3, [pc, #40]	@ (800ea7c <CheckCRC+0xb4>)
 800ea54:	217c      	movs	r1, #124	@ 0x7c
 800ea56:	0018      	movs	r0, r3
 800ea58:	f7ff fe98 	bl	800e78c <errorHandler>
		return false;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	e000      	b.n	800ea62 <CheckCRC+0x9a>
	}
	return true;
 800ea60:	2301      	movs	r3, #1
}
 800ea62:	0018      	movs	r0, r3
 800ea64:	46bd      	mov	sp, r7
 800ea66:	b005      	add	sp, #20
 800ea68:	bd90      	pop	{r4, r7, pc}
 800ea6a:	46c0      	nop			@ (mov r8, r8)
 800ea6c:	08025224 	.word	0x08025224
 800ea70:	0802524c 	.word	0x0802524c
 800ea74:	08025250 	.word	0x08025250
 800ea78:	0802527c 	.word	0x0802527c
 800ea7c:	08025814 	.word	0x08025814

0800ea80 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ea86:	1dbb      	adds	r3, r7, #6
 800ea88:	2289      	movs	r2, #137	@ 0x89
 800ea8a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800ea8c:	1dbb      	adds	r3, r7, #6
 800ea8e:	2201      	movs	r2, #1
 800ea90:	0019      	movs	r1, r3
 800ea92:	2044      	movs	r0, #68	@ 0x44
 800ea94:	f7ff feae 	bl	800e7f4 <WriteRegister>
	HAL_Delay(30);
 800ea98:	201e      	movs	r0, #30
 800ea9a:	f000 fa09 	bl	800eeb0 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800ea9e:	4b14      	ldr	r3, [pc, #80]	@ (800eaf0 <HIDS_DeviceConnected+0x70>)
 800eaa0:	2206      	movs	r2, #6
 800eaa2:	0019      	movs	r1, r3
 800eaa4:	2044      	movs	r0, #68	@ 0x44
 800eaa6:	f7ff fe83 	bl	800e7b0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800eaaa:	1dfb      	adds	r3, r7, #7
 800eaac:	2200      	movs	r2, #0
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	e011      	b.n	800ead6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800eab2:	1dfb      	adds	r3, r7, #7
 800eab4:	7818      	ldrb	r0, [r3, #0]
 800eab6:	1dfb      	adds	r3, r7, #7
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	4a0d      	ldr	r2, [pc, #52]	@ (800eaf0 <HIDS_DeviceConnected+0x70>)
 800eabc:	5cd3      	ldrb	r3, [r2, r3]
 800eabe:	4a0d      	ldr	r2, [pc, #52]	@ (800eaf4 <HIDS_DeviceConnected+0x74>)
 800eac0:	490d      	ldr	r1, [pc, #52]	@ (800eaf8 <HIDS_DeviceConnected+0x78>)
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	0003      	movs	r3, r0
 800eac6:	2002      	movs	r0, #2
 800eac8:	f7ff fda8 	bl	800e61c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800eacc:	1dfb      	adds	r3, r7, #7
 800eace:	781a      	ldrb	r2, [r3, #0]
 800ead0:	1dfb      	adds	r3, r7, #7
 800ead2:	3201      	adds	r2, #1
 800ead4:	701a      	strb	r2, [r3, #0]
 800ead6:	1dfb      	adds	r3, r7, #7
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	2b05      	cmp	r3, #5
 800eadc:	d9e9      	bls.n	800eab2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800eade:	4b04      	ldr	r3, [pc, #16]	@ (800eaf0 <HIDS_DeviceConnected+0x70>)
 800eae0:	0018      	movs	r0, r3
 800eae2:	f7ff ff71 	bl	800e9c8 <CheckCRC>
 800eae6:	0003      	movs	r3, r0
}
 800eae8:	0018      	movs	r0, r3
 800eaea:	46bd      	mov	sp, r7
 800eaec:	b002      	add	sp, #8
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	200023b0 	.word	0x200023b0
 800eaf4:	08025294 	.word	0x08025294
 800eaf8:	08025220 	.word	0x08025220

0800eafc <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800eb00:	4b04      	ldr	r3, [pc, #16]	@ (800eb14 <HIDS_MeasurementReady+0x18>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	0018      	movs	r0, r3
 800eb06:	f7ff fd33 	bl	800e570 <TimestampIsReached>
 800eb0a:	0003      	movs	r3, r0
}
 800eb0c:	0018      	movs	r0, r3
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	46c0      	nop			@ (mov r8, r8)
 800eb14:	200000d8 	.word	0x200000d8

0800eb18 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800eb22:	4b41      	ldr	r3, [pc, #260]	@ (800ec28 <HIDS_GetMeasurementValues+0x110>)
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d001      	beq.n	800eb2e <HIDS_GetMeasurementValues+0x16>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e077      	b.n	800ec1e <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800eb2e:	f7ff ffe5 	bl	800eafc <HIDS_MeasurementReady>
 800eb32:	0003      	movs	r3, r0
 800eb34:	001a      	movs	r2, r3
 800eb36:	2301      	movs	r3, #1
 800eb38:	4053      	eors	r3, r2
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <HIDS_GetMeasurementValues+0x2c>
 800eb40:	2300      	movs	r3, #0
 800eb42:	e06c      	b.n	800ec1e <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800eb44:	4b39      	ldr	r3, [pc, #228]	@ (800ec2c <HIDS_GetMeasurementValues+0x114>)
 800eb46:	2206      	movs	r2, #6
 800eb48:	0019      	movs	r1, r3
 800eb4a:	2044      	movs	r0, #68	@ 0x44
 800eb4c:	f7ff fe30 	bl	800e7b0 <ReadRegister>
 800eb50:	0003      	movs	r3, r0
 800eb52:	001a      	movs	r2, r3
 800eb54:	2301      	movs	r3, #1
 800eb56:	4053      	eors	r3, r2
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d005      	beq.n	800eb6a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800eb5e:	4a34      	ldr	r2, [pc, #208]	@ (800ec30 <HIDS_GetMeasurementValues+0x118>)
 800eb60:	4b34      	ldr	r3, [pc, #208]	@ (800ec34 <HIDS_GetMeasurementValues+0x11c>)
 800eb62:	0019      	movs	r1, r3
 800eb64:	2001      	movs	r0, #1
 800eb66:	f7ff fd59 	bl	800e61c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800eb6a:	4b30      	ldr	r3, [pc, #192]	@ (800ec2c <HIDS_GetMeasurementValues+0x114>)
 800eb6c:	0018      	movs	r0, r3
 800eb6e:	f7ff ff2b 	bl	800e9c8 <CheckCRC>
 800eb72:	0003      	movs	r3, r0
 800eb74:	001a      	movs	r2, r3
 800eb76:	2301      	movs	r3, #1
 800eb78:	4053      	eors	r3, r2
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800eb80:	2300      	movs	r3, #0
 800eb82:	e04c      	b.n	800ec1e <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800eb84:	4b29      	ldr	r3, [pc, #164]	@ (800ec2c <HIDS_GetMeasurementValues+0x114>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	021b      	lsls	r3, r3, #8
 800eb8a:	4a28      	ldr	r2, [pc, #160]	@ (800ec2c <HIDS_GetMeasurementValues+0x114>)
 800eb8c:	7852      	ldrb	r2, [r2, #1]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	22af      	movs	r2, #175	@ 0xaf
 800eb92:	4353      	muls	r3, r2
 800eb94:	0018      	movs	r0, r3
 800eb96:	f7f4 fc13 	bl	80033c0 <__aeabi_i2d>
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	4b26      	ldr	r3, [pc, #152]	@ (800ec38 <HIDS_GetMeasurementValues+0x120>)
 800eb9e:	f7f3 f909 	bl	8001db4 <__aeabi_ddiv>
 800eba2:	0002      	movs	r2, r0
 800eba4:	000b      	movs	r3, r1
 800eba6:	0010      	movs	r0, r2
 800eba8:	0019      	movs	r1, r3
 800ebaa:	f7f4 fca3 	bl	80034f4 <__aeabi_d2f>
 800ebae:	1c03      	adds	r3, r0, #0
 800ebb0:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ebb2:	4922      	ldr	r1, [pc, #136]	@ (800ec3c <HIDS_GetMeasurementValues+0x124>)
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7f2 fb31 	bl	800121c <__aeabi_fsub>
 800ebba:	1c03      	adds	r3, r0, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ebbe:	4b1b      	ldr	r3, [pc, #108]	@ (800ec2c <HIDS_GetMeasurementValues+0x114>)
 800ebc0:	78db      	ldrb	r3, [r3, #3]
 800ebc2:	021b      	lsls	r3, r3, #8
 800ebc4:	4a19      	ldr	r2, [pc, #100]	@ (800ec2c <HIDS_GetMeasurementValues+0x114>)
 800ebc6:	7912      	ldrb	r2, [r2, #4]
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	0013      	movs	r3, r2
 800ebcc:	015b      	lsls	r3, r3, #5
 800ebce:	1a9b      	subs	r3, r3, r2
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	189b      	adds	r3, r3, r2
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	f7f4 fbf3 	bl	80033c0 <__aeabi_i2d>
 800ebda:	2200      	movs	r2, #0
 800ebdc:	4b16      	ldr	r3, [pc, #88]	@ (800ec38 <HIDS_GetMeasurementValues+0x120>)
 800ebde:	f7f3 f8e9 	bl	8001db4 <__aeabi_ddiv>
 800ebe2:	0002      	movs	r2, r0
 800ebe4:	000b      	movs	r3, r1
 800ebe6:	0010      	movs	r0, r2
 800ebe8:	0019      	movs	r1, r3
 800ebea:	f7f4 fc83 	bl	80034f4 <__aeabi_d2f>
 800ebee:	1c03      	adds	r3, r0, #0
 800ebf0:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ebf2:	4913      	ldr	r1, [pc, #76]	@ (800ec40 <HIDS_GetMeasurementValues+0x128>)
 800ebf4:	68b8      	ldr	r0, [r7, #8]
 800ebf6:	f7f2 fb11 	bl	800121c <__aeabi_fsub>
 800ebfa:	1c03      	adds	r3, r0, #0
 800ebfc:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	0011      	movs	r1, r2
 800ec10:	0018      	movs	r0, r3
 800ec12:	f7fd f953 	bl	800bebc <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800ec16:	4b04      	ldr	r3, [pc, #16]	@ (800ec28 <HIDS_GetMeasurementValues+0x110>)
 800ec18:	2201      	movs	r2, #1
 800ec1a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ec1c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ec1e:	0018      	movs	r0, r3
 800ec20:	46bd      	mov	sp, r7
 800ec22:	b004      	add	sp, #16
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	46c0      	nop			@ (mov r8, r8)
 800ec28:	200023be 	.word	0x200023be
 800ec2c:	200023b8 	.word	0x200023b8
 800ec30:	080252b4 	.word	0x080252b4
 800ec34:	0802524c 	.word	0x0802524c
 800ec38:	40efffe0 	.word	0x40efffe0
 800ec3c:	42340000 	.word	0x42340000
 800ec40:	40c00000 	.word	0x40c00000

0800ec44 <ResetHIDSresults>:

void ResetHIDSresults() {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ec48:	4b04      	ldr	r3, [pc, #16]	@ (800ec5c <ResetHIDSresults+0x18>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ec4e:	4b04      	ldr	r3, [pc, #16]	@ (800ec60 <ResetHIDSresults+0x1c>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	601a      	str	r2, [r3, #0]
}
 800ec54:	46c0      	nop			@ (mov r8, r8)
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	46c0      	nop			@ (mov r8, r8)
 800ec5c:	200023a0 	.word	0x200023a0
 800ec60:	200023a4 	.word	0x200023a4

0800ec64 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800ec64:	b5b0      	push	{r4, r5, r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ec6a:	4b3b      	ldr	r3, [pc, #236]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b06      	cmp	r3, #6
 800ec70:	d865      	bhi.n	800ed3e <HIDS_Upkeep+0xda>
 800ec72:	009a      	lsls	r2, r3, #2
 800ec74:	4b39      	ldr	r3, [pc, #228]	@ (800ed5c <HIDS_Upkeep+0xf8>)
 800ec76:	18d3      	adds	r3, r2, r3
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ec7c:	4a38      	ldr	r2, [pc, #224]	@ (800ed60 <HIDS_Upkeep+0xfc>)
 800ec7e:	4b39      	ldr	r3, [pc, #228]	@ (800ed64 <HIDS_Upkeep+0x100>)
 800ec80:	0019      	movs	r1, r3
 800ec82:	2003      	movs	r0, #3
 800ec84:	f7ff fcca 	bl	800e61c <CreateLine>
      break;
 800ec88:	e060      	b.n	800ed4c <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800ec8a:	f7ff ffdb 	bl	800ec44 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ec8e:	4b32      	ldr	r3, [pc, #200]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ec90:	2201      	movs	r2, #1
 800ec92:	701a      	strb	r2, [r3, #0]
      break;
 800ec94:	e05a      	b.n	800ed4c <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800ec96:	f7fe fb3d 	bl	800d314 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800ec9a:	f7ff fe45 	bl	800e928 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800ec9e:	4b2e      	ldr	r3, [pc, #184]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800eca0:	2202      	movs	r2, #2
 800eca2:	701a      	strb	r2, [r3, #0]
      break;
 800eca4:	e052      	b.n	800ed4c <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800eca6:	4a30      	ldr	r2, [pc, #192]	@ (800ed68 <HIDS_Upkeep+0x104>)
 800eca8:	4b30      	ldr	r3, [pc, #192]	@ (800ed6c <HIDS_Upkeep+0x108>)
 800ecaa:	0011      	movs	r1, r2
 800ecac:	0018      	movs	r0, r3
 800ecae:	f7ff ff33 	bl	800eb18 <HIDS_GetMeasurementValues>
 800ecb2:	1e03      	subs	r3, r0, #0
 800ecb4:	d047      	beq.n	800ed46 <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800ecb6:	4b28      	ldr	r3, [pc, #160]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ecb8:	2203      	movs	r2, #3
 800ecba:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ecbc:	e043      	b.n	800ed46 <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ecbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ed6c <HIDS_Upkeep+0x108>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	1c18      	adds	r0, r3, #0
 800ecc4:	f7f4 fbce 	bl	8003464 <__aeabi_f2d>
 800ecc8:	0004      	movs	r4, r0
 800ecca:	000d      	movs	r5, r1
 800eccc:	4b26      	ldr	r3, [pc, #152]	@ (800ed68 <HIDS_Upkeep+0x104>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	1c18      	adds	r0, r3, #0
 800ecd2:	f7f4 fbc7 	bl	8003464 <__aeabi_f2d>
 800ecd6:	0002      	movs	r2, r0
 800ecd8:	000b      	movs	r3, r1
 800ecda:	4825      	ldr	r0, [pc, #148]	@ (800ed70 <HIDS_Upkeep+0x10c>)
 800ecdc:	4921      	ldr	r1, [pc, #132]	@ (800ed64 <HIDS_Upkeep+0x100>)
 800ecde:	9202      	str	r2, [sp, #8]
 800ece0:	9303      	str	r3, [sp, #12]
 800ece2:	9400      	str	r4, [sp, #0]
 800ece4:	9501      	str	r5, [sp, #4]
 800ece6:	0002      	movs	r2, r0
 800ece8:	2003      	movs	r0, #3
 800ecea:	f7ff fc97 	bl	800e61c <CreateLine>
      setHIDS(temp, humid);
 800ecee:	4b1e      	ldr	r3, [pc, #120]	@ (800ed68 <HIDS_Upkeep+0x104>)
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	4b1e      	ldr	r3, [pc, #120]	@ (800ed6c <HIDS_Upkeep+0x108>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	1c19      	adds	r1, r3, #0
 800ecf8:	1c10      	adds	r0, r2, #0
 800ecfa:	f7f4 fdfb 	bl	80038f4 <setHIDS>
      ResetMeasurementIndicator();
 800ecfe:	f7fe fb21 	bl	800d344 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800ed02:	f000 f8cb 	bl	800ee9c <HAL_GetTick>
 800ed06:	0004      	movs	r4, r0
 800ed08:	f7fe fd3c 	bl	800d784 <powerCheck>
 800ed0c:	0003      	movs	r3, r0
 800ed0e:	2b04      	cmp	r3, #4
 800ed10:	d101      	bne.n	800ed16 <HIDS_Upkeep+0xb2>
 800ed12:	4b18      	ldr	r3, [pc, #96]	@ (800ed74 <HIDS_Upkeep+0x110>)
 800ed14:	e001      	b.n	800ed1a <HIDS_Upkeep+0xb6>
 800ed16:	23fa      	movs	r3, #250	@ 0xfa
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	191a      	adds	r2, r3, r4
 800ed1c:	4b16      	ldr	r3, [pc, #88]	@ (800ed78 <HIDS_Upkeep+0x114>)
 800ed1e:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800ed20:	4b0d      	ldr	r3, [pc, #52]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ed22:	2206      	movs	r2, #6
 800ed24:	701a      	strb	r2, [r3, #0]
      break;
 800ed26:	e011      	b.n	800ed4c <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800ed28:	4b13      	ldr	r3, [pc, #76]	@ (800ed78 <HIDS_Upkeep+0x114>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	0018      	movs	r0, r3
 800ed2e:	f7ff fc1f 	bl	800e570 <TimestampIsReached>
 800ed32:	1e03      	subs	r3, r0, #0
 800ed34:	d009      	beq.n	800ed4a <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800ed36:	4b08      	ldr	r3, [pc, #32]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed3c:	e005      	b.n	800ed4a <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800ed3e:	4b06      	ldr	r3, [pc, #24]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ed40:	2200      	movs	r2, #0
 800ed42:	701a      	strb	r2, [r3, #0]
      break;
 800ed44:	e002      	b.n	800ed4c <HIDS_Upkeep+0xe8>
      break;
 800ed46:	46c0      	nop			@ (mov r8, r8)
 800ed48:	e000      	b.n	800ed4c <HIDS_Upkeep+0xe8>
      break;
 800ed4a:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800ed4c:	4b02      	ldr	r3, [pc, #8]	@ (800ed58 <HIDS_Upkeep+0xf4>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
}
 800ed50:	0018      	movs	r0, r3
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bdb0      	pop	{r4, r5, r7, pc}
 800ed56:	46c0      	nop			@ (mov r8, r8)
 800ed58:	200023c4 	.word	0x200023c4
 800ed5c:	080257f8 	.word	0x080257f8
 800ed60:	080252e8 	.word	0x080252e8
 800ed64:	0802531c 	.word	0x0802531c
 800ed68:	200023a4 	.word	0x200023a4
 800ed6c:	200023a0 	.word	0x200023a0
 800ed70:	08025320 	.word	0x08025320
 800ed74:	00002710 	.word	0x00002710
 800ed78:	200023c0 	.word	0x200023c0

0800ed7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800ed7c:	480d      	ldr	r0, [pc, #52]	@ (800edb4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800ed7e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ed80:	f7ff f84c 	bl	800de1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ed84:	480c      	ldr	r0, [pc, #48]	@ (800edb8 <LoopForever+0x6>)
  ldr r1, =_edata
 800ed86:	490d      	ldr	r1, [pc, #52]	@ (800edbc <LoopForever+0xa>)
  ldr r2, =_sidata
 800ed88:	4a0d      	ldr	r2, [pc, #52]	@ (800edc0 <LoopForever+0xe>)
  movs r3, #0
 800ed8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ed8c:	e002      	b.n	800ed94 <LoopCopyDataInit>

0800ed8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ed8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ed90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ed92:	3304      	adds	r3, #4

0800ed94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ed94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ed96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ed98:	d3f9      	bcc.n	800ed8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ed9a:	4a0a      	ldr	r2, [pc, #40]	@ (800edc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ed9c:	4c0a      	ldr	r4, [pc, #40]	@ (800edc8 <LoopForever+0x16>)
  movs r3, #0
 800ed9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eda0:	e001      	b.n	800eda6 <LoopFillZerobss>

0800eda2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eda2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eda4:	3204      	adds	r2, #4

0800eda6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eda6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eda8:	d3fb      	bcc.n	800eda2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800edaa:	f011 fb79 	bl	80204a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800edae:	f7f8 ff6f 	bl	8007c90 <main>

0800edb2 <LoopForever>:

LoopForever:
    b LoopForever
 800edb2:	e7fe      	b.n	800edb2 <LoopForever>
   ldr   r0, =_estack
 800edb4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800edb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800edbc:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800edc0:	08026198 	.word	0x08026198
  ldr r2, =_sbss
 800edc4:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800edc8:	200037cc 	.word	0x200037cc

0800edcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800edcc:	e7fe      	b.n	800edcc <ADC1_COMP_IRQHandler>
	...

0800edd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800edd6:	1dfb      	adds	r3, r7, #7
 800edd8:	2200      	movs	r2, #0
 800edda:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800eddc:	4b0b      	ldr	r3, [pc, #44]	@ (800ee0c <HAL_Init+0x3c>)
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	4b0a      	ldr	r3, [pc, #40]	@ (800ee0c <HAL_Init+0x3c>)
 800ede2:	2140      	movs	r1, #64	@ 0x40
 800ede4:	430a      	orrs	r2, r1
 800ede6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ede8:	2003      	movs	r0, #3
 800edea:	f000 f811 	bl	800ee10 <HAL_InitTick>
 800edee:	1e03      	subs	r3, r0, #0
 800edf0:	d003      	beq.n	800edfa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800edf2:	1dfb      	adds	r3, r7, #7
 800edf4:	2201      	movs	r2, #1
 800edf6:	701a      	strb	r2, [r3, #0]
 800edf8:	e001      	b.n	800edfe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800edfa:	f7fe fec3 	bl	800db84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800edfe:	1dfb      	adds	r3, r7, #7
 800ee00:	781b      	ldrb	r3, [r3, #0]
}
 800ee02:	0018      	movs	r0, r3
 800ee04:	46bd      	mov	sp, r7
 800ee06:	b002      	add	sp, #8
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	46c0      	nop			@ (mov r8, r8)
 800ee0c:	40022000 	.word	0x40022000

0800ee10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ee10:	b590      	push	{r4, r7, lr}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ee18:	4b14      	ldr	r3, [pc, #80]	@ (800ee6c <HAL_InitTick+0x5c>)
 800ee1a:	681c      	ldr	r4, [r3, #0]
 800ee1c:	4b14      	ldr	r3, [pc, #80]	@ (800ee70 <HAL_InitTick+0x60>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	0019      	movs	r1, r3
 800ee22:	23fa      	movs	r3, #250	@ 0xfa
 800ee24:	0098      	lsls	r0, r3, #2
 800ee26:	f7f1 f9bd 	bl	80001a4 <__udivsi3>
 800ee2a:	0003      	movs	r3, r0
 800ee2c:	0019      	movs	r1, r3
 800ee2e:	0020      	movs	r0, r4
 800ee30:	f7f1 f9b8 	bl	80001a4 <__udivsi3>
 800ee34:	0003      	movs	r3, r0
 800ee36:	0018      	movs	r0, r3
 800ee38:	f000 fcfd 	bl	800f836 <HAL_SYSTICK_Config>
 800ee3c:	1e03      	subs	r3, r0, #0
 800ee3e:	d001      	beq.n	800ee44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ee40:	2301      	movs	r3, #1
 800ee42:	e00f      	b.n	800ee64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d80b      	bhi.n	800ee62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ee4a:	6879      	ldr	r1, [r7, #4]
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	425b      	negs	r3, r3
 800ee50:	2200      	movs	r2, #0
 800ee52:	0018      	movs	r0, r3
 800ee54:	f000 fcc6 	bl	800f7e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ee58:	4b06      	ldr	r3, [pc, #24]	@ (800ee74 <HAL_InitTick+0x64>)
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	e000      	b.n	800ee64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
}
 800ee64:	0018      	movs	r0, r3
 800ee66:	46bd      	mov	sp, r7
 800ee68:	b003      	add	sp, #12
 800ee6a:	bd90      	pop	{r4, r7, pc}
 800ee6c:	200000d0 	.word	0x200000d0
 800ee70:	200000e4 	.word	0x200000e4
 800ee74:	200000e0 	.word	0x200000e0

0800ee78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ee7c:	4b05      	ldr	r3, [pc, #20]	@ (800ee94 <HAL_IncTick+0x1c>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	001a      	movs	r2, r3
 800ee82:	4b05      	ldr	r3, [pc, #20]	@ (800ee98 <HAL_IncTick+0x20>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	18d2      	adds	r2, r2, r3
 800ee88:	4b03      	ldr	r3, [pc, #12]	@ (800ee98 <HAL_IncTick+0x20>)
 800ee8a:	601a      	str	r2, [r3, #0]
}
 800ee8c:	46c0      	nop			@ (mov r8, r8)
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	46c0      	nop			@ (mov r8, r8)
 800ee94:	200000e4 	.word	0x200000e4
 800ee98:	200023c8 	.word	0x200023c8

0800ee9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	af00      	add	r7, sp, #0
  return uwTick;
 800eea0:	4b02      	ldr	r3, [pc, #8]	@ (800eeac <HAL_GetTick+0x10>)
 800eea2:	681b      	ldr	r3, [r3, #0]
}
 800eea4:	0018      	movs	r0, r3
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	46c0      	nop			@ (mov r8, r8)
 800eeac:	200023c8 	.word	0x200023c8

0800eeb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800eeb8:	f7ff fff0 	bl	800ee9c <HAL_GetTick>
 800eebc:	0003      	movs	r3, r0
 800eebe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	3301      	adds	r3, #1
 800eec8:	d005      	beq.n	800eed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800eeca:	4b0a      	ldr	r3, [pc, #40]	@ (800eef4 <HAL_Delay+0x44>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	001a      	movs	r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	189b      	adds	r3, r3, r2
 800eed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800eed6:	46c0      	nop			@ (mov r8, r8)
 800eed8:	f7ff ffe0 	bl	800ee9c <HAL_GetTick>
 800eedc:	0002      	movs	r2, r0
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d8f7      	bhi.n	800eed8 <HAL_Delay+0x28>
  {
  }
}
 800eee8:	46c0      	nop			@ (mov r8, r8)
 800eeea:	46c0      	nop			@ (mov r8, r8)
 800eeec:	46bd      	mov	sp, r7
 800eeee:	b004      	add	sp, #16
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	46c0      	nop			@ (mov r8, r8)
 800eef4:	200000e4 	.word	0x200000e4

0800eef8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800eefc:	4b04      	ldr	r3, [pc, #16]	@ (800ef10 <HAL_SuspendTick+0x18>)
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	4b03      	ldr	r3, [pc, #12]	@ (800ef10 <HAL_SuspendTick+0x18>)
 800ef02:	2102      	movs	r1, #2
 800ef04:	438a      	bics	r2, r1
 800ef06:	601a      	str	r2, [r3, #0]
}
 800ef08:	46c0      	nop			@ (mov r8, r8)
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	46c0      	nop			@ (mov r8, r8)
 800ef10:	e000e010 	.word	0xe000e010

0800ef14 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ef18:	4b04      	ldr	r3, [pc, #16]	@ (800ef2c <HAL_ResumeTick+0x18>)
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	4b03      	ldr	r3, [pc, #12]	@ (800ef2c <HAL_ResumeTick+0x18>)
 800ef1e:	2102      	movs	r1, #2
 800ef20:	430a      	orrs	r2, r1
 800ef22:	601a      	str	r2, [r3, #0]
}
 800ef24:	46c0      	nop			@ (mov r8, r8)
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	46c0      	nop			@ (mov r8, r8)
 800ef2c:	e000e010 	.word	0xe000e010

0800ef30 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ef34:	4b02      	ldr	r3, [pc, #8]	@ (800ef40 <HAL_GetUIDw0+0x10>)
 800ef36:	681b      	ldr	r3, [r3, #0]
}
 800ef38:	0018      	movs	r0, r3
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	46c0      	nop			@ (mov r8, r8)
 800ef40:	1ff80050 	.word	0x1ff80050

0800ef44 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ef48:	4b02      	ldr	r3, [pc, #8]	@ (800ef54 <HAL_GetUIDw1+0x10>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
}
 800ef4c:	0018      	movs	r0, r3
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	46c0      	nop			@ (mov r8, r8)
 800ef54:	1ff80054 	.word	0x1ff80054

0800ef58 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800ef5c:	4b02      	ldr	r3, [pc, #8]	@ (800ef68 <HAL_GetUIDw2+0x10>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
}
 800ef60:	0018      	movs	r0, r3
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	46c0      	nop			@ (mov r8, r8)
 800ef68:	1ff80064 	.word	0x1ff80064

0800ef6c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d101      	bne.n	800ef7e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e159      	b.n	800f232 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10a      	bne.n	800ef9c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2250      	movs	r2, #80	@ 0x50
 800ef90:	2100      	movs	r1, #0
 800ef92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	0018      	movs	r0, r3
 800ef98:	f7f8 f902 	bl	80071a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efa0:	2210      	movs	r2, #16
 800efa2:	4013      	ands	r3, r2
 800efa4:	2b10      	cmp	r3, #16
 800efa6:	d005      	beq.n	800efb4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	2204      	movs	r2, #4
 800efb0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800efb2:	d00b      	beq.n	800efcc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efb8:	2210      	movs	r2, #16
 800efba:	431a      	orrs	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2250      	movs	r2, #80	@ 0x50
 800efc4:	2100      	movs	r1, #0
 800efc6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	e132      	b.n	800f232 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efd0:	4a9a      	ldr	r2, [pc, #616]	@ (800f23c <HAL_ADC_Init+0x2d0>)
 800efd2:	4013      	ands	r3, r2
 800efd4:	2202      	movs	r2, #2
 800efd6:	431a      	orrs	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	2203      	movs	r2, #3
 800efe4:	4013      	ands	r3, r2
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d108      	bne.n	800effc <HAL_ADC_Init+0x90>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2201      	movs	r2, #1
 800eff2:	4013      	ands	r3, r2
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d101      	bne.n	800effc <HAL_ADC_Init+0x90>
 800eff8:	2301      	movs	r3, #1
 800effa:	e000      	b.n	800effe <HAL_ADC_Init+0x92>
 800effc:	2300      	movs	r3, #0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d149      	bne.n	800f096 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	685a      	ldr	r2, [r3, #4]
 800f006:	23c0      	movs	r3, #192	@ 0xc0
 800f008:	061b      	lsls	r3, r3, #24
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d00b      	beq.n	800f026 <HAL_ADC_Init+0xba>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	2380      	movs	r3, #128	@ 0x80
 800f014:	05db      	lsls	r3, r3, #23
 800f016:	429a      	cmp	r2, r3
 800f018:	d005      	beq.n	800f026 <HAL_ADC_Init+0xba>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	2380      	movs	r3, #128	@ 0x80
 800f020:	061b      	lsls	r3, r3, #24
 800f022:	429a      	cmp	r2, r3
 800f024:	d111      	bne.n	800f04a <HAL_ADC_Init+0xde>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	691a      	ldr	r2, [r3, #16]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	0092      	lsls	r2, r2, #2
 800f032:	0892      	lsrs	r2, r2, #2
 800f034:	611a      	str	r2, [r3, #16]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	6919      	ldr	r1, [r3, #16]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	685a      	ldr	r2, [r3, #4]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	430a      	orrs	r2, r1
 800f046:	611a      	str	r2, [r3, #16]
 800f048:	e014      	b.n	800f074 <HAL_ADC_Init+0x108>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	691a      	ldr	r2, [r3, #16]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	0092      	lsls	r2, r2, #2
 800f056:	0892      	lsrs	r2, r2, #2
 800f058:	611a      	str	r2, [r3, #16]
 800f05a:	4b79      	ldr	r3, [pc, #484]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	4b78      	ldr	r3, [pc, #480]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f060:	4978      	ldr	r1, [pc, #480]	@ (800f244 <HAL_ADC_Init+0x2d8>)
 800f062:	400a      	ands	r2, r1
 800f064:	601a      	str	r2, [r3, #0]
 800f066:	4b76      	ldr	r3, [pc, #472]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f068:	6819      	ldr	r1, [r3, #0]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	685a      	ldr	r2, [r3, #4]
 800f06e:	4b74      	ldr	r3, [pc, #464]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f070:	430a      	orrs	r2, r1
 800f072:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68da      	ldr	r2, [r3, #12]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2118      	movs	r1, #24
 800f080:	438a      	bics	r2, r1
 800f082:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68d9      	ldr	r1, [r3, #12]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	689a      	ldr	r2, [r3, #8]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	430a      	orrs	r2, r1
 800f094:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f096:	4b6a      	ldr	r3, [pc, #424]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	4b69      	ldr	r3, [pc, #420]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f09c:	496a      	ldr	r1, [pc, #424]	@ (800f248 <HAL_ADC_Init+0x2dc>)
 800f09e:	400a      	ands	r2, r1
 800f0a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f0a2:	4b67      	ldr	r3, [pc, #412]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f0a4:	6819      	ldr	r1, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0aa:	065a      	lsls	r2, r3, #25
 800f0ac:	4b64      	ldr	r3, [pc, #400]	@ (800f240 <HAL_ADC_Init+0x2d4>)
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	689a      	ldr	r2, [r3, #8]
 800f0b8:	2380      	movs	r3, #128	@ 0x80
 800f0ba:	055b      	lsls	r3, r3, #21
 800f0bc:	4013      	ands	r3, r2
 800f0be:	d108      	bne.n	800f0d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	689a      	ldr	r2, [r3, #8]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2180      	movs	r1, #128	@ 0x80
 800f0cc:	0549      	lsls	r1, r1, #21
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68da      	ldr	r2, [r3, #12]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	495b      	ldr	r1, [pc, #364]	@ (800f24c <HAL_ADC_Init+0x2e0>)
 800f0de:	400a      	ands	r2, r1
 800f0e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68d9      	ldr	r1, [r3, #12]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	691b      	ldr	r3, [r3, #16]
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	d101      	bne.n	800f0f8 <HAL_ADC_Init+0x18c>
 800f0f4:	2304      	movs	r3, #4
 800f0f6:	e000      	b.n	800f0fa <HAL_ADC_Init+0x18e>
 800f0f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f0fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2020      	movs	r0, #32
 800f100:	5c1b      	ldrb	r3, [r3, r0]
 800f102:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f104:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	202c      	movs	r0, #44	@ 0x2c
 800f10a:	5c1b      	ldrb	r3, [r3, r0]
 800f10c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f10e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f114:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	699b      	ldr	r3, [r3, #24]
 800f11a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f11c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	69db      	ldr	r3, [r3, #28]
 800f122:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f124:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	430a      	orrs	r2, r1
 800f12c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f132:	23c2      	movs	r3, #194	@ 0xc2
 800f134:	33ff      	adds	r3, #255	@ 0xff
 800f136:	429a      	cmp	r2, r3
 800f138:	d00b      	beq.n	800f152 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68d9      	ldr	r1, [r3, #12]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f148:	431a      	orrs	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	430a      	orrs	r2, r1
 800f150:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2221      	movs	r2, #33	@ 0x21
 800f156:	5c9b      	ldrb	r3, [r3, r2]
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d11a      	bne.n	800f192 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2220      	movs	r2, #32
 800f160:	5c9b      	ldrb	r3, [r3, r2]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d109      	bne.n	800f17a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68da      	ldr	r2, [r3, #12]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2180      	movs	r1, #128	@ 0x80
 800f172:	0249      	lsls	r1, r1, #9
 800f174:	430a      	orrs	r2, r1
 800f176:	60da      	str	r2, [r3, #12]
 800f178:	e00b      	b.n	800f192 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f17e:	2220      	movs	r2, #32
 800f180:	431a      	orrs	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f18a:	2201      	movs	r2, #1
 800f18c:	431a      	orrs	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f196:	2b01      	cmp	r3, #1
 800f198:	d11f      	bne.n	800f1da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	691a      	ldr	r2, [r3, #16]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	492a      	ldr	r1, [pc, #168]	@ (800f250 <HAL_ADC_Init+0x2e4>)
 800f1a6:	400a      	ands	r2, r1
 800f1a8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	6919      	ldr	r1, [r3, #16]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1b8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f1be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	430a      	orrs	r2, r1
 800f1c6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	691a      	ldr	r2, [r3, #16]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2101      	movs	r1, #1
 800f1d4:	430a      	orrs	r2, r1
 800f1d6:	611a      	str	r2, [r3, #16]
 800f1d8:	e00e      	b.n	800f1f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	4013      	ands	r3, r2
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d107      	bne.n	800f1f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	691a      	ldr	r2, [r3, #16]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2101      	movs	r1, #1
 800f1f4:	438a      	bics	r2, r1
 800f1f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	695a      	ldr	r2, [r3, #20]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2107      	movs	r1, #7
 800f204:	438a      	bics	r2, r1
 800f206:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6959      	ldr	r1, [r3, #20]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	430a      	orrs	r2, r1
 800f218:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f224:	2203      	movs	r2, #3
 800f226:	4393      	bics	r3, r2
 800f228:	2201      	movs	r2, #1
 800f22a:	431a      	orrs	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	0018      	movs	r0, r3
 800f234:	46bd      	mov	sp, r7
 800f236:	b002      	add	sp, #8
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	46c0      	nop			@ (mov r8, r8)
 800f23c:	fffffefd 	.word	0xfffffefd
 800f240:	40012708 	.word	0x40012708
 800f244:	ffc3ffff 	.word	0xffc3ffff
 800f248:	fdffffff 	.word	0xfdffffff
 800f24c:	fffe0219 	.word	0xfffe0219
 800f250:	fffffc03 	.word	0xfffffc03

0800f254 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f254:	b590      	push	{r4, r7, lr}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f25c:	230f      	movs	r3, #15
 800f25e:	18fb      	adds	r3, r7, r3
 800f260:	2200      	movs	r2, #0
 800f262:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	2204      	movs	r2, #4
 800f26c:	4013      	ands	r3, r2
 800f26e:	d138      	bne.n	800f2e2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2250      	movs	r2, #80	@ 0x50
 800f274:	5c9b      	ldrb	r3, [r3, r2]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d101      	bne.n	800f27e <HAL_ADC_Start+0x2a>
 800f27a:	2302      	movs	r3, #2
 800f27c:	e038      	b.n	800f2f0 <HAL_ADC_Start+0x9c>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2250      	movs	r2, #80	@ 0x50
 800f282:	2101      	movs	r1, #1
 800f284:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	69db      	ldr	r3, [r3, #28]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d007      	beq.n	800f29e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f28e:	230f      	movs	r3, #15
 800f290:	18fc      	adds	r4, r7, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	0018      	movs	r0, r3
 800f296:	f000 f95f 	bl	800f558 <ADC_Enable>
 800f29a:	0003      	movs	r3, r0
 800f29c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f29e:	230f      	movs	r3, #15
 800f2a0:	18fb      	adds	r3, r7, r3
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d120      	bne.n	800f2ea <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ac:	4a12      	ldr	r2, [pc, #72]	@ (800f2f8 <HAL_ADC_Start+0xa4>)
 800f2ae:	4013      	ands	r3, r2
 800f2b0:	2280      	movs	r2, #128	@ 0x80
 800f2b2:	0052      	lsls	r2, r2, #1
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2250      	movs	r2, #80	@ 0x50
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	221c      	movs	r2, #28
 800f2ce:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	689a      	ldr	r2, [r3, #8]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2104      	movs	r1, #4
 800f2dc:	430a      	orrs	r2, r1
 800f2de:	609a      	str	r2, [r3, #8]
 800f2e0:	e003      	b.n	800f2ea <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f2e2:	230f      	movs	r3, #15
 800f2e4:	18fb      	adds	r3, r7, r3
 800f2e6:	2202      	movs	r2, #2
 800f2e8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f2ea:	230f      	movs	r3, #15
 800f2ec:	18fb      	adds	r3, r7, r3
 800f2ee:	781b      	ldrb	r3, [r3, #0]
}
 800f2f0:	0018      	movs	r0, r3
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	b005      	add	sp, #20
 800f2f6:	bd90      	pop	{r4, r7, pc}
 800f2f8:	fffff0fe 	.word	0xfffff0fe

0800f2fc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f30a:	2300      	movs	r3, #0
 800f30c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	695b      	ldr	r3, [r3, #20]
 800f312:	2b08      	cmp	r3, #8
 800f314:	d102      	bne.n	800f31c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f316:	2308      	movs	r3, #8
 800f318:	60fb      	str	r3, [r7, #12]
 800f31a:	e014      	b.n	800f346 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	2201      	movs	r2, #1
 800f324:	4013      	ands	r3, r2
 800f326:	2b01      	cmp	r3, #1
 800f328:	d10b      	bne.n	800f342 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f32e:	2220      	movs	r2, #32
 800f330:	431a      	orrs	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2250      	movs	r2, #80	@ 0x50
 800f33a:	2100      	movs	r1, #0
 800f33c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	e072      	b.n	800f428 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f342:	230c      	movs	r3, #12
 800f344:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f346:	f7ff fda9 	bl	800ee9c <HAL_GetTick>
 800f34a:	0003      	movs	r3, r0
 800f34c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f34e:	e01f      	b.n	800f390 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	3301      	adds	r3, #1
 800f354:	d01c      	beq.n	800f390 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <HAL_ADC_PollForConversion+0x70>
 800f35c:	f7ff fd9e 	bl	800ee9c <HAL_GetTick>
 800f360:	0002      	movs	r2, r0
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d211      	bcs.n	800f390 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	4013      	ands	r3, r2
 800f376:	d10b      	bne.n	800f390 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f37c:	2204      	movs	r2, #4
 800f37e:	431a      	orrs	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2250      	movs	r2, #80	@ 0x50
 800f388:	2100      	movs	r1, #0
 800f38a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f38c:	2303      	movs	r3, #3
 800f38e:	e04b      	b.n	800f428 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	4013      	ands	r3, r2
 800f39a:	d0d9      	beq.n	800f350 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a0:	2280      	movs	r2, #128	@ 0x80
 800f3a2:	0092      	lsls	r2, r2, #2
 800f3a4:	431a      	orrs	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	23c0      	movs	r3, #192	@ 0xc0
 800f3b2:	011b      	lsls	r3, r3, #4
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	d12e      	bne.n	800f416 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2220      	movs	r2, #32
 800f3bc:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d129      	bne.n	800f416 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2208      	movs	r2, #8
 800f3ca:	4013      	ands	r3, r2
 800f3cc:	2b08      	cmp	r3, #8
 800f3ce:	d122      	bne.n	800f416 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	2204      	movs	r2, #4
 800f3d8:	4013      	ands	r3, r2
 800f3da:	d110      	bne.n	800f3fe <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	685a      	ldr	r2, [r3, #4]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	210c      	movs	r1, #12
 800f3e8:	438a      	bics	r2, r1
 800f3ea:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3f0:	4a0f      	ldr	r2, [pc, #60]	@ (800f430 <HAL_ADC_PollForConversion+0x134>)
 800f3f2:	4013      	ands	r3, r2
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	431a      	orrs	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	655a      	str	r2, [r3, #84]	@ 0x54
 800f3fc:	e00b      	b.n	800f416 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f402:	2220      	movs	r2, #32
 800f404:	431a      	orrs	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f40e:	2201      	movs	r2, #1
 800f410:	431a      	orrs	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d103      	bne.n	800f426 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	220c      	movs	r2, #12
 800f424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	0018      	movs	r0, r3
 800f42a:	46bd      	mov	sp, r7
 800f42c:	b004      	add	sp, #16
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	fffffefe 	.word	0xfffffefe

0800f434 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f442:	0018      	movs	r0, r3
 800f444:	46bd      	mov	sp, r7
 800f446:	b002      	add	sp, #8
 800f448:	bd80      	pop	{r7, pc}
	...

0800f44c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2250      	movs	r2, #80	@ 0x50
 800f45a:	5c9b      	ldrb	r3, [r3, r2]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d101      	bne.n	800f464 <HAL_ADC_ConfigChannel+0x18>
 800f460:	2302      	movs	r3, #2
 800f462:	e06c      	b.n	800f53e <HAL_ADC_ConfigChannel+0xf2>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2250      	movs	r2, #80	@ 0x50
 800f468:	2101      	movs	r1, #1
 800f46a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	2204      	movs	r2, #4
 800f474:	4013      	ands	r3, r2
 800f476:	d00b      	beq.n	800f490 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f47c:	2220      	movs	r2, #32
 800f47e:	431a      	orrs	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2250      	movs	r2, #80	@ 0x50
 800f488:	2100      	movs	r1, #0
 800f48a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	e056      	b.n	800f53e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	4a2c      	ldr	r2, [pc, #176]	@ (800f548 <HAL_ADC_ConfigChannel+0xfc>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d028      	beq.n	800f4ec <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	035b      	lsls	r3, r3, #13
 800f4a6:	0b5a      	lsrs	r2, r3, #13
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	430a      	orrs	r2, r1
 800f4ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	2380      	movs	r3, #128	@ 0x80
 800f4b6:	02db      	lsls	r3, r3, #11
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	d009      	beq.n	800f4d0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f4bc:	4b23      	ldr	r3, [pc, #140]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	4b22      	ldr	r3, [pc, #136]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f4c2:	2180      	movs	r1, #128	@ 0x80
 800f4c4:	0409      	lsls	r1, r1, #16
 800f4c6:	430a      	orrs	r2, r1
 800f4c8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f4ca:	200a      	movs	r0, #10
 800f4cc:	f000 f8ac 	bl	800f628 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	2380      	movs	r3, #128	@ 0x80
 800f4d6:	029b      	lsls	r3, r3, #10
 800f4d8:	4013      	ands	r3, r2
 800f4da:	d02b      	beq.n	800f534 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f4dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	4b1a      	ldr	r3, [pc, #104]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f4e2:	2180      	movs	r1, #128	@ 0x80
 800f4e4:	03c9      	lsls	r1, r1, #15
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	e023      	b.n	800f534 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	035b      	lsls	r3, r3, #13
 800f4f8:	0b5b      	lsrs	r3, r3, #13
 800f4fa:	43d9      	mvns	r1, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	400a      	ands	r2, r1
 800f502:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	2380      	movs	r3, #128	@ 0x80
 800f50a:	02db      	lsls	r3, r3, #11
 800f50c:	4013      	ands	r3, r2
 800f50e:	d005      	beq.n	800f51c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f510:	4b0e      	ldr	r3, [pc, #56]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	4b0d      	ldr	r3, [pc, #52]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f516:	490e      	ldr	r1, [pc, #56]	@ (800f550 <HAL_ADC_ConfigChannel+0x104>)
 800f518:	400a      	ands	r2, r1
 800f51a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	2380      	movs	r3, #128	@ 0x80
 800f522:	029b      	lsls	r3, r3, #10
 800f524:	4013      	ands	r3, r2
 800f526:	d005      	beq.n	800f534 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f528:	4b08      	ldr	r3, [pc, #32]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	4b07      	ldr	r3, [pc, #28]	@ (800f54c <HAL_ADC_ConfigChannel+0x100>)
 800f52e:	4909      	ldr	r1, [pc, #36]	@ (800f554 <HAL_ADC_ConfigChannel+0x108>)
 800f530:	400a      	ands	r2, r1
 800f532:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2250      	movs	r2, #80	@ 0x50
 800f538:	2100      	movs	r1, #0
 800f53a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	0018      	movs	r0, r3
 800f540:	46bd      	mov	sp, r7
 800f542:	b002      	add	sp, #8
 800f544:	bd80      	pop	{r7, pc}
 800f546:	46c0      	nop			@ (mov r8, r8)
 800f548:	00001001 	.word	0x00001001
 800f54c:	40012708 	.word	0x40012708
 800f550:	ff7fffff 	.word	0xff7fffff
 800f554:	ffbfffff 	.word	0xffbfffff

0800f558 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f560:	2300      	movs	r3, #0
 800f562:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	2203      	movs	r2, #3
 800f56c:	4013      	ands	r3, r2
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d108      	bne.n	800f584 <ADC_Enable+0x2c>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2201      	movs	r2, #1
 800f57a:	4013      	ands	r3, r2
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d101      	bne.n	800f584 <ADC_Enable+0x2c>
 800f580:	2301      	movs	r3, #1
 800f582:	e000      	b.n	800f586 <ADC_Enable+0x2e>
 800f584:	2300      	movs	r3, #0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d146      	bne.n	800f618 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	4a24      	ldr	r2, [pc, #144]	@ (800f624 <ADC_Enable+0xcc>)
 800f592:	4013      	ands	r3, r2
 800f594:	d00d      	beq.n	800f5b2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f59a:	2210      	movs	r2, #16
 800f59c:	431a      	orrs	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	431a      	orrs	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e033      	b.n	800f61a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	689a      	ldr	r2, [r3, #8]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2101      	movs	r1, #1
 800f5be:	430a      	orrs	r2, r1
 800f5c0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f5c2:	2001      	movs	r0, #1
 800f5c4:	f000 f830 	bl	800f628 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f5c8:	f7ff fc68 	bl	800ee9c <HAL_GetTick>
 800f5cc:	0003      	movs	r3, r0
 800f5ce:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5d0:	e01b      	b.n	800f60a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f5d2:	f7ff fc63 	bl	800ee9c <HAL_GetTick>
 800f5d6:	0002      	movs	r2, r0
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	2b0a      	cmp	r3, #10
 800f5de:	d914      	bls.n	800f60a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d00d      	beq.n	800f60a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5f2:	2210      	movs	r2, #16
 800f5f4:	431a      	orrs	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5fe:	2201      	movs	r2, #1
 800f600:	431a      	orrs	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	e007      	b.n	800f61a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2201      	movs	r2, #1
 800f612:	4013      	ands	r3, r2
 800f614:	2b01      	cmp	r3, #1
 800f616:	d1dc      	bne.n	800f5d2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	0018      	movs	r0, r3
 800f61c:	46bd      	mov	sp, r7
 800f61e:	b004      	add	sp, #16
 800f620:	bd80      	pop	{r7, pc}
 800f622:	46c0      	nop			@ (mov r8, r8)
 800f624:	80000017 	.word	0x80000017

0800f628 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f630:	4b0b      	ldr	r3, [pc, #44]	@ (800f660 <ADC_DelayMicroSecond+0x38>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	490b      	ldr	r1, [pc, #44]	@ (800f664 <ADC_DelayMicroSecond+0x3c>)
 800f636:	0018      	movs	r0, r3
 800f638:	f7f0 fdb4 	bl	80001a4 <__udivsi3>
 800f63c:	0003      	movs	r3, r0
 800f63e:	001a      	movs	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4353      	muls	r3, r2
 800f644:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f646:	e002      	b.n	800f64e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	3b01      	subs	r3, #1
 800f64c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1f9      	bne.n	800f648 <ADC_DelayMicroSecond+0x20>
  }
}
 800f654:	46c0      	nop			@ (mov r8, r8)
 800f656:	46c0      	nop			@ (mov r8, r8)
 800f658:	46bd      	mov	sp, r7
 800f65a:	b004      	add	sp, #16
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	46c0      	nop			@ (mov r8, r8)
 800f660:	200000d0 	.word	0x200000d0
 800f664:	000f4240 	.word	0x000f4240

0800f668 <__NVIC_EnableIRQ>:
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	0002      	movs	r2, r0
 800f670:	1dfb      	adds	r3, r7, #7
 800f672:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f674:	1dfb      	adds	r3, r7, #7
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	2b7f      	cmp	r3, #127	@ 0x7f
 800f67a:	d809      	bhi.n	800f690 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f67c:	1dfb      	adds	r3, r7, #7
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	001a      	movs	r2, r3
 800f682:	231f      	movs	r3, #31
 800f684:	401a      	ands	r2, r3
 800f686:	4b04      	ldr	r3, [pc, #16]	@ (800f698 <__NVIC_EnableIRQ+0x30>)
 800f688:	2101      	movs	r1, #1
 800f68a:	4091      	lsls	r1, r2
 800f68c:	000a      	movs	r2, r1
 800f68e:	601a      	str	r2, [r3, #0]
}
 800f690:	46c0      	nop			@ (mov r8, r8)
 800f692:	46bd      	mov	sp, r7
 800f694:	b002      	add	sp, #8
 800f696:	bd80      	pop	{r7, pc}
 800f698:	e000e100 	.word	0xe000e100

0800f69c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f69c:	b590      	push	{r4, r7, lr}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	0002      	movs	r2, r0
 800f6a4:	6039      	str	r1, [r7, #0]
 800f6a6:	1dfb      	adds	r3, r7, #7
 800f6a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f6aa:	1dfb      	adds	r3, r7, #7
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6b0:	d828      	bhi.n	800f704 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6b2:	4a2f      	ldr	r2, [pc, #188]	@ (800f770 <__NVIC_SetPriority+0xd4>)
 800f6b4:	1dfb      	adds	r3, r7, #7
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	b25b      	sxtb	r3, r3
 800f6ba:	089b      	lsrs	r3, r3, #2
 800f6bc:	33c0      	adds	r3, #192	@ 0xc0
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	589b      	ldr	r3, [r3, r2]
 800f6c2:	1dfa      	adds	r2, r7, #7
 800f6c4:	7812      	ldrb	r2, [r2, #0]
 800f6c6:	0011      	movs	r1, r2
 800f6c8:	2203      	movs	r2, #3
 800f6ca:	400a      	ands	r2, r1
 800f6cc:	00d2      	lsls	r2, r2, #3
 800f6ce:	21ff      	movs	r1, #255	@ 0xff
 800f6d0:	4091      	lsls	r1, r2
 800f6d2:	000a      	movs	r2, r1
 800f6d4:	43d2      	mvns	r2, r2
 800f6d6:	401a      	ands	r2, r3
 800f6d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	019b      	lsls	r3, r3, #6
 800f6de:	22ff      	movs	r2, #255	@ 0xff
 800f6e0:	401a      	ands	r2, r3
 800f6e2:	1dfb      	adds	r3, r7, #7
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	0018      	movs	r0, r3
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	4003      	ands	r3, r0
 800f6ec:	00db      	lsls	r3, r3, #3
 800f6ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6f0:	481f      	ldr	r0, [pc, #124]	@ (800f770 <__NVIC_SetPriority+0xd4>)
 800f6f2:	1dfb      	adds	r3, r7, #7
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	b25b      	sxtb	r3, r3
 800f6f8:	089b      	lsrs	r3, r3, #2
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	33c0      	adds	r3, #192	@ 0xc0
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f702:	e031      	b.n	800f768 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f704:	4a1b      	ldr	r2, [pc, #108]	@ (800f774 <__NVIC_SetPriority+0xd8>)
 800f706:	1dfb      	adds	r3, r7, #7
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	0019      	movs	r1, r3
 800f70c:	230f      	movs	r3, #15
 800f70e:	400b      	ands	r3, r1
 800f710:	3b08      	subs	r3, #8
 800f712:	089b      	lsrs	r3, r3, #2
 800f714:	3306      	adds	r3, #6
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	18d3      	adds	r3, r2, r3
 800f71a:	3304      	adds	r3, #4
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	1dfa      	adds	r2, r7, #7
 800f720:	7812      	ldrb	r2, [r2, #0]
 800f722:	0011      	movs	r1, r2
 800f724:	2203      	movs	r2, #3
 800f726:	400a      	ands	r2, r1
 800f728:	00d2      	lsls	r2, r2, #3
 800f72a:	21ff      	movs	r1, #255	@ 0xff
 800f72c:	4091      	lsls	r1, r2
 800f72e:	000a      	movs	r2, r1
 800f730:	43d2      	mvns	r2, r2
 800f732:	401a      	ands	r2, r3
 800f734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	019b      	lsls	r3, r3, #6
 800f73a:	22ff      	movs	r2, #255	@ 0xff
 800f73c:	401a      	ands	r2, r3
 800f73e:	1dfb      	adds	r3, r7, #7
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	0018      	movs	r0, r3
 800f744:	2303      	movs	r3, #3
 800f746:	4003      	ands	r3, r0
 800f748:	00db      	lsls	r3, r3, #3
 800f74a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f74c:	4809      	ldr	r0, [pc, #36]	@ (800f774 <__NVIC_SetPriority+0xd8>)
 800f74e:	1dfb      	adds	r3, r7, #7
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	001c      	movs	r4, r3
 800f754:	230f      	movs	r3, #15
 800f756:	4023      	ands	r3, r4
 800f758:	3b08      	subs	r3, #8
 800f75a:	089b      	lsrs	r3, r3, #2
 800f75c:	430a      	orrs	r2, r1
 800f75e:	3306      	adds	r3, #6
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	18c3      	adds	r3, r0, r3
 800f764:	3304      	adds	r3, #4
 800f766:	601a      	str	r2, [r3, #0]
}
 800f768:	46c0      	nop			@ (mov r8, r8)
 800f76a:	46bd      	mov	sp, r7
 800f76c:	b003      	add	sp, #12
 800f76e:	bd90      	pop	{r4, r7, pc}
 800f770:	e000e100 	.word	0xe000e100
 800f774:	e000ed00 	.word	0xe000ed00

0800f778 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f77c:	f3bf 8f4f 	dsb	sy
}
 800f780:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f782:	4b04      	ldr	r3, [pc, #16]	@ (800f794 <__NVIC_SystemReset+0x1c>)
 800f784:	4a04      	ldr	r2, [pc, #16]	@ (800f798 <__NVIC_SystemReset+0x20>)
 800f786:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f788:	f3bf 8f4f 	dsb	sy
}
 800f78c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f78e:	46c0      	nop			@ (mov r8, r8)
 800f790:	e7fd      	b.n	800f78e <__NVIC_SystemReset+0x16>
 800f792:	46c0      	nop			@ (mov r8, r8)
 800f794:	e000ed00 	.word	0xe000ed00
 800f798:	05fa0004 	.word	0x05fa0004

0800f79c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	1e5a      	subs	r2, r3, #1
 800f7a8:	2380      	movs	r3, #128	@ 0x80
 800f7aa:	045b      	lsls	r3, r3, #17
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d301      	bcc.n	800f7b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e010      	b.n	800f7d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f7b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f7e0 <SysTick_Config+0x44>)
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	3a01      	subs	r2, #1
 800f7ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f7bc:	2301      	movs	r3, #1
 800f7be:	425b      	negs	r3, r3
 800f7c0:	2103      	movs	r1, #3
 800f7c2:	0018      	movs	r0, r3
 800f7c4:	f7ff ff6a 	bl	800f69c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f7c8:	4b05      	ldr	r3, [pc, #20]	@ (800f7e0 <SysTick_Config+0x44>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f7ce:	4b04      	ldr	r3, [pc, #16]	@ (800f7e0 <SysTick_Config+0x44>)
 800f7d0:	2207      	movs	r2, #7
 800f7d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	0018      	movs	r0, r3
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	b002      	add	sp, #8
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	46c0      	nop			@ (mov r8, r8)
 800f7e0:	e000e010 	.word	0xe000e010

0800f7e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
 800f7ee:	210f      	movs	r1, #15
 800f7f0:	187b      	adds	r3, r7, r1
 800f7f2:	1c02      	adds	r2, r0, #0
 800f7f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f7f6:	68ba      	ldr	r2, [r7, #8]
 800f7f8:	187b      	adds	r3, r7, r1
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	b25b      	sxtb	r3, r3
 800f7fe:	0011      	movs	r1, r2
 800f800:	0018      	movs	r0, r3
 800f802:	f7ff ff4b 	bl	800f69c <__NVIC_SetPriority>
}
 800f806:	46c0      	nop			@ (mov r8, r8)
 800f808:	46bd      	mov	sp, r7
 800f80a:	b004      	add	sp, #16
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	0002      	movs	r2, r0
 800f816:	1dfb      	adds	r3, r7, #7
 800f818:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f81a:	1dfb      	adds	r3, r7, #7
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	b25b      	sxtb	r3, r3
 800f820:	0018      	movs	r0, r3
 800f822:	f7ff ff21 	bl	800f668 <__NVIC_EnableIRQ>
}
 800f826:	46c0      	nop			@ (mov r8, r8)
 800f828:	46bd      	mov	sp, r7
 800f82a:	b002      	add	sp, #8
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f832:	f7ff ffa1 	bl	800f778 <__NVIC_SystemReset>

0800f836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b082      	sub	sp, #8
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	0018      	movs	r0, r3
 800f842:	f7ff ffab 	bl	800f79c <SysTick_Config>
 800f846:	0003      	movs	r3, r0
}
 800f848:	0018      	movs	r0, r3
 800f84a:	46bd      	mov	sp, r7
 800f84c:	b002      	add	sp, #8
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d101      	bne.n	800f862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f85e:	2301      	movs	r3, #1
 800f860:	e061      	b.n	800f926 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a32      	ldr	r2, [pc, #200]	@ (800f930 <HAL_DMA_Init+0xe0>)
 800f868:	4694      	mov	ip, r2
 800f86a:	4463      	add	r3, ip
 800f86c:	2114      	movs	r1, #20
 800f86e:	0018      	movs	r0, r3
 800f870:	f7f0 fc98 	bl	80001a4 <__udivsi3>
 800f874:	0003      	movs	r3, r0
 800f876:	009a      	lsls	r2, r3, #2
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a2d      	ldr	r2, [pc, #180]	@ (800f934 <HAL_DMA_Init+0xe4>)
 800f880:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2225      	movs	r2, #37	@ 0x25
 800f886:	2102      	movs	r1, #2
 800f888:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	4a28      	ldr	r2, [pc, #160]	@ (800f938 <HAL_DMA_Init+0xe8>)
 800f896:	4013      	ands	r3, r2
 800f898:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f8a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f8ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	699b      	ldr	r3, [r3, #24]
 800f8b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f8ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6a1b      	ldr	r3, [r3, #32]
 800f8c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	689a      	ldr	r2, [r3, #8]
 800f8d4:	2380      	movs	r3, #128	@ 0x80
 800f8d6:	01db      	lsls	r3, r3, #7
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d018      	beq.n	800f90e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f8dc:	4b17      	ldr	r3, [pc, #92]	@ (800f93c <HAL_DMA_Init+0xec>)
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e4:	211c      	movs	r1, #28
 800f8e6:	400b      	ands	r3, r1
 800f8e8:	210f      	movs	r1, #15
 800f8ea:	4099      	lsls	r1, r3
 800f8ec:	000b      	movs	r3, r1
 800f8ee:	43d9      	mvns	r1, r3
 800f8f0:	4b12      	ldr	r3, [pc, #72]	@ (800f93c <HAL_DMA_Init+0xec>)
 800f8f2:	400a      	ands	r2, r1
 800f8f4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f8f6:	4b11      	ldr	r3, [pc, #68]	@ (800f93c <HAL_DMA_Init+0xec>)
 800f8f8:	6819      	ldr	r1, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f902:	201c      	movs	r0, #28
 800f904:	4003      	ands	r3, r0
 800f906:	409a      	lsls	r2, r3
 800f908:	4b0c      	ldr	r3, [pc, #48]	@ (800f93c <HAL_DMA_Init+0xec>)
 800f90a:	430a      	orrs	r2, r1
 800f90c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2225      	movs	r2, #37	@ 0x25
 800f918:	2101      	movs	r1, #1
 800f91a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2224      	movs	r2, #36	@ 0x24
 800f920:	2100      	movs	r1, #0
 800f922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	0018      	movs	r0, r3
 800f928:	46bd      	mov	sp, r7
 800f92a:	b004      	add	sp, #16
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	46c0      	nop			@ (mov r8, r8)
 800f930:	bffdfff8 	.word	0xbffdfff8
 800f934:	40020000 	.word	0x40020000
 800f938:	ffff800f 	.word	0xffff800f
 800f93c:	400200a8 	.word	0x400200a8

0800f940 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f94e:	2317      	movs	r3, #23
 800f950:	18fb      	adds	r3, r7, r3
 800f952:	2200      	movs	r2, #0
 800f954:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2224      	movs	r2, #36	@ 0x24
 800f95a:	5c9b      	ldrb	r3, [r3, r2]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d101      	bne.n	800f964 <HAL_DMA_Start_IT+0x24>
 800f960:	2302      	movs	r3, #2
 800f962:	e04f      	b.n	800fa04 <HAL_DMA_Start_IT+0xc4>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2224      	movs	r2, #36	@ 0x24
 800f968:	2101      	movs	r1, #1
 800f96a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2225      	movs	r2, #37	@ 0x25
 800f970:	5c9b      	ldrb	r3, [r3, r2]
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b01      	cmp	r3, #1
 800f976:	d13a      	bne.n	800f9ee <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2225      	movs	r2, #37	@ 0x25
 800f97c:	2102      	movs	r1, #2
 800f97e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2200      	movs	r2, #0
 800f984:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2101      	movs	r1, #1
 800f992:	438a      	bics	r2, r1
 800f994:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	68b9      	ldr	r1, [r7, #8]
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 f976 	bl	800fc8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d008      	beq.n	800f9bc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	210e      	movs	r1, #14
 800f9b6:	430a      	orrs	r2, r1
 800f9b8:	601a      	str	r2, [r3, #0]
 800f9ba:	e00f      	b.n	800f9dc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2104      	movs	r1, #4
 800f9c8:	438a      	bics	r2, r1
 800f9ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	210a      	movs	r1, #10
 800f9d8:	430a      	orrs	r2, r1
 800f9da:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	430a      	orrs	r2, r1
 800f9ea:	601a      	str	r2, [r3, #0]
 800f9ec:	e007      	b.n	800f9fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2224      	movs	r2, #36	@ 0x24
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f9f6:	2317      	movs	r3, #23
 800f9f8:	18fb      	adds	r3, r7, r3
 800f9fa:	2202      	movs	r2, #2
 800f9fc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f9fe:	2317      	movs	r3, #23
 800fa00:	18fb      	adds	r3, r7, r3
 800fa02:	781b      	ldrb	r3, [r3, #0]
}
 800fa04:	0018      	movs	r0, r3
 800fa06:	46bd      	mov	sp, r7
 800fa08:	b006      	add	sp, #24
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa14:	230f      	movs	r3, #15
 800fa16:	18fb      	adds	r3, r7, r3
 800fa18:	2200      	movs	r2, #0
 800fa1a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2225      	movs	r2, #37	@ 0x25
 800fa20:	5c9b      	ldrb	r3, [r3, r2]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d008      	beq.n	800fa3a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2204      	movs	r2, #4
 800fa2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2224      	movs	r2, #36	@ 0x24
 800fa32:	2100      	movs	r1, #0
 800fa34:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	e024      	b.n	800fa84 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	210e      	movs	r1, #14
 800fa46:	438a      	bics	r2, r1
 800fa48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2101      	movs	r1, #1
 800fa56:	438a      	bics	r2, r1
 800fa58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa5e:	221c      	movs	r2, #28
 800fa60:	401a      	ands	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa66:	2101      	movs	r1, #1
 800fa68:	4091      	lsls	r1, r2
 800fa6a:	000a      	movs	r2, r1
 800fa6c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2225      	movs	r2, #37	@ 0x25
 800fa72:	2101      	movs	r1, #1
 800fa74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2224      	movs	r2, #36	@ 0x24
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	5499      	strb	r1, [r3, r2]

    return status;
 800fa7e:	230f      	movs	r3, #15
 800fa80:	18fb      	adds	r3, r7, r3
 800fa82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa84:	0018      	movs	r0, r3
 800fa86:	46bd      	mov	sp, r7
 800fa88:	b004      	add	sp, #16
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa94:	210f      	movs	r1, #15
 800fa96:	187b      	adds	r3, r7, r1
 800fa98:	2200      	movs	r2, #0
 800fa9a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2225      	movs	r2, #37	@ 0x25
 800faa0:	5c9b      	ldrb	r3, [r3, r2]
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	d006      	beq.n	800fab6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2204      	movs	r2, #4
 800faac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800faae:	187b      	adds	r3, r7, r1
 800fab0:	2201      	movs	r2, #1
 800fab2:	701a      	strb	r2, [r3, #0]
 800fab4:	e02a      	b.n	800fb0c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	210e      	movs	r1, #14
 800fac2:	438a      	bics	r2, r1
 800fac4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2101      	movs	r1, #1
 800fad2:	438a      	bics	r2, r1
 800fad4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fada:	221c      	movs	r2, #28
 800fadc:	401a      	ands	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae2:	2101      	movs	r1, #1
 800fae4:	4091      	lsls	r1, r2
 800fae6:	000a      	movs	r2, r1
 800fae8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2225      	movs	r2, #37	@ 0x25
 800faee:	2101      	movs	r1, #1
 800faf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2224      	movs	r2, #36	@ 0x24
 800faf6:	2100      	movs	r1, #0
 800faf8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d004      	beq.n	800fb0c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	0010      	movs	r0, r2
 800fb0a:	4798      	blx	r3
    }
  }
  return status;
 800fb0c:	230f      	movs	r3, #15
 800fb0e:	18fb      	adds	r3, r7, r3
 800fb10:	781b      	ldrb	r3, [r3, #0]
}
 800fb12:	0018      	movs	r0, r3
 800fb14:	46bd      	mov	sp, r7
 800fb16:	b004      	add	sp, #16
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b084      	sub	sp, #16
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb36:	221c      	movs	r2, #28
 800fb38:	4013      	ands	r3, r2
 800fb3a:	2204      	movs	r2, #4
 800fb3c:	409a      	lsls	r2, r3
 800fb3e:	0013      	movs	r3, r2
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	4013      	ands	r3, r2
 800fb44:	d026      	beq.n	800fb94 <HAL_DMA_IRQHandler+0x7a>
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	2204      	movs	r2, #4
 800fb4a:	4013      	ands	r3, r2
 800fb4c:	d022      	beq.n	800fb94 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2220      	movs	r2, #32
 800fb56:	4013      	ands	r3, r2
 800fb58:	d107      	bne.n	800fb6a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2104      	movs	r1, #4
 800fb66:	438a      	bics	r2, r1
 800fb68:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb6e:	221c      	movs	r2, #28
 800fb70:	401a      	ands	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb76:	2104      	movs	r1, #4
 800fb78:	4091      	lsls	r1, r2
 800fb7a:	000a      	movs	r2, r1
 800fb7c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d100      	bne.n	800fb88 <HAL_DMA_IRQHandler+0x6e>
 800fb86:	e071      	b.n	800fc6c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	0010      	movs	r0, r2
 800fb90:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fb92:	e06b      	b.n	800fc6c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb98:	221c      	movs	r2, #28
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	2202      	movs	r2, #2
 800fb9e:	409a      	lsls	r2, r3
 800fba0:	0013      	movs	r3, r2
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	4013      	ands	r3, r2
 800fba6:	d02d      	beq.n	800fc04 <HAL_DMA_IRQHandler+0xea>
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	2202      	movs	r2, #2
 800fbac:	4013      	ands	r3, r2
 800fbae:	d029      	beq.n	800fc04 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2220      	movs	r2, #32
 800fbb8:	4013      	ands	r3, r2
 800fbba:	d10b      	bne.n	800fbd4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	210a      	movs	r1, #10
 800fbc8:	438a      	bics	r2, r1
 800fbca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2225      	movs	r2, #37	@ 0x25
 800fbd0:	2101      	movs	r1, #1
 800fbd2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbd8:	221c      	movs	r2, #28
 800fbda:	401a      	ands	r2, r3
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbe0:	2102      	movs	r1, #2
 800fbe2:	4091      	lsls	r1, r2
 800fbe4:	000a      	movs	r2, r1
 800fbe6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2224      	movs	r2, #36	@ 0x24
 800fbec:	2100      	movs	r1, #0
 800fbee:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d039      	beq.n	800fc6c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	0010      	movs	r0, r2
 800fc00:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800fc02:	e033      	b.n	800fc6c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc08:	221c      	movs	r2, #28
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	2208      	movs	r2, #8
 800fc0e:	409a      	lsls	r2, r3
 800fc10:	0013      	movs	r3, r2
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	4013      	ands	r3, r2
 800fc16:	d02a      	beq.n	800fc6e <HAL_DMA_IRQHandler+0x154>
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2208      	movs	r2, #8
 800fc1c:	4013      	ands	r3, r2
 800fc1e:	d026      	beq.n	800fc6e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	210e      	movs	r1, #14
 800fc2c:	438a      	bics	r2, r1
 800fc2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc34:	221c      	movs	r2, #28
 800fc36:	401a      	ands	r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	4091      	lsls	r1, r2
 800fc40:	000a      	movs	r2, r1
 800fc42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2201      	movs	r2, #1
 800fc48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2225      	movs	r2, #37	@ 0x25
 800fc4e:	2101      	movs	r1, #1
 800fc50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2224      	movs	r2, #36	@ 0x24
 800fc56:	2100      	movs	r1, #0
 800fc58:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d005      	beq.n	800fc6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	0010      	movs	r0, r2
 800fc6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fc6c:	46c0      	nop			@ (mov r8, r8)
 800fc6e:	46c0      	nop			@ (mov r8, r8)
}
 800fc70:	46bd      	mov	sp, r7
 800fc72:	b004      	add	sp, #16
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b082      	sub	sp, #8
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2225      	movs	r2, #37	@ 0x25
 800fc82:	5c9b      	ldrb	r3, [r3, r2]
 800fc84:	b2db      	uxtb	r3, r3
}
 800fc86:	0018      	movs	r0, r3
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	b002      	add	sp, #8
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b084      	sub	sp, #16
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	607a      	str	r2, [r7, #4]
 800fc9a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fca0:	221c      	movs	r2, #28
 800fca2:	401a      	ands	r2, r3
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fca8:	2101      	movs	r1, #1
 800fcaa:	4091      	lsls	r1, r2
 800fcac:	000a      	movs	r2, r1
 800fcae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	2b10      	cmp	r3, #16
 800fcbe:	d108      	bne.n	800fcd2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fcd0:	e007      	b.n	800fce2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	60da      	str	r2, [r3, #12]
}
 800fce2:	46c0      	nop			@ (mov r8, r8)
 800fce4:	46bd      	mov	sp, r7
 800fce6:	b004      	add	sp, #16
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fcf4:	f7ff f8d2 	bl	800ee9c <HAL_GetTick>
 800fcf8:	0003      	movs	r3, r0
 800fcfa:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fcfc:	e00f      	b.n	800fd1e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	3301      	adds	r3, #1
 800fd02:	d00c      	beq.n	800fd1e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d007      	beq.n	800fd1a <FLASH_WaitForLastOperation+0x2e>
 800fd0a:	f7ff f8c7 	bl	800ee9c <HAL_GetTick>
 800fd0e:	0002      	movs	r2, r0
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d201      	bcs.n	800fd1e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e052      	b.n	800fdc4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fd1e:	4b2b      	ldr	r3, [pc, #172]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd20:	699b      	ldr	r3, [r3, #24]
 800fd22:	2201      	movs	r2, #1
 800fd24:	4013      	ands	r3, r2
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d0e9      	beq.n	800fcfe <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fd2a:	4b28      	ldr	r3, [pc, #160]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	2202      	movs	r2, #2
 800fd30:	4013      	ands	r3, r2
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d102      	bne.n	800fd3c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fd36:	4b25      	ldr	r3, [pc, #148]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd38:	2202      	movs	r2, #2
 800fd3a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fd3c:	4b23      	ldr	r3, [pc, #140]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd3e:	699a      	ldr	r2, [r3, #24]
 800fd40:	2380      	movs	r3, #128	@ 0x80
 800fd42:	005b      	lsls	r3, r3, #1
 800fd44:	401a      	ands	r2, r3
 800fd46:	2380      	movs	r3, #128	@ 0x80
 800fd48:	005b      	lsls	r3, r3, #1
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d035      	beq.n	800fdba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fd4e:	4b1f      	ldr	r3, [pc, #124]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd50:	699a      	ldr	r2, [r3, #24]
 800fd52:	2380      	movs	r3, #128	@ 0x80
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fd58:	2380      	movs	r3, #128	@ 0x80
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d02c      	beq.n	800fdba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fd60:	4b1a      	ldr	r3, [pc, #104]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd62:	699a      	ldr	r2, [r3, #24]
 800fd64:	2380      	movs	r3, #128	@ 0x80
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fd6a:	2380      	movs	r3, #128	@ 0x80
 800fd6c:	00db      	lsls	r3, r3, #3
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d023      	beq.n	800fdba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fd72:	4b16      	ldr	r3, [pc, #88]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd74:	699a      	ldr	r2, [r3, #24]
 800fd76:	2380      	movs	r3, #128	@ 0x80
 800fd78:	011b      	lsls	r3, r3, #4
 800fd7a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fd7c:	2380      	movs	r3, #128	@ 0x80
 800fd7e:	011b      	lsls	r3, r3, #4
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d01a      	beq.n	800fdba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fd84:	4b11      	ldr	r3, [pc, #68]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd86:	699a      	ldr	r2, [r3, #24]
 800fd88:	2380      	movs	r3, #128	@ 0x80
 800fd8a:	019b      	lsls	r3, r3, #6
 800fd8c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fd8e:	2380      	movs	r3, #128	@ 0x80
 800fd90:	019b      	lsls	r3, r3, #6
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d011      	beq.n	800fdba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fd96:	4b0d      	ldr	r3, [pc, #52]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fd98:	699a      	ldr	r2, [r3, #24]
 800fd9a:	2380      	movs	r3, #128	@ 0x80
 800fd9c:	029b      	lsls	r3, r3, #10
 800fd9e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fda0:	2380      	movs	r3, #128	@ 0x80
 800fda2:	029b      	lsls	r3, r3, #10
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d008      	beq.n	800fdba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fda8:	4b08      	ldr	r3, [pc, #32]	@ (800fdcc <FLASH_WaitForLastOperation+0xe0>)
 800fdaa:	699a      	ldr	r2, [r3, #24]
 800fdac:	2380      	movs	r3, #128	@ 0x80
 800fdae:	025b      	lsls	r3, r3, #9
 800fdb0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fdb2:	2380      	movs	r3, #128	@ 0x80
 800fdb4:	025b      	lsls	r3, r3, #9
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d103      	bne.n	800fdc2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fdba:	f000 f809 	bl	800fdd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e000      	b.n	800fdc4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	0018      	movs	r0, r3
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	b004      	add	sp, #16
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	40022000 	.word	0x40022000

0800fdd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fdda:	4b49      	ldr	r3, [pc, #292]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fddc:	699a      	ldr	r2, [r3, #24]
 800fdde:	2380      	movs	r3, #128	@ 0x80
 800fde0:	005b      	lsls	r3, r3, #1
 800fde2:	401a      	ands	r2, r3
 800fde4:	2380      	movs	r3, #128	@ 0x80
 800fde6:	005b      	lsls	r3, r3, #1
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d10a      	bne.n	800fe02 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fdec:	4b45      	ldr	r3, [pc, #276]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fdee:	695b      	ldr	r3, [r3, #20]
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	431a      	orrs	r2, r3
 800fdf4:	4b43      	ldr	r3, [pc, #268]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fdf6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2280      	movs	r2, #128	@ 0x80
 800fdfc:	0052      	lsls	r2, r2, #1
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fe02:	4b3f      	ldr	r3, [pc, #252]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fe04:	699a      	ldr	r2, [r3, #24]
 800fe06:	2380      	movs	r3, #128	@ 0x80
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	401a      	ands	r2, r3
 800fe0c:	2380      	movs	r3, #128	@ 0x80
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d10a      	bne.n	800fe2a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fe14:	4b3b      	ldr	r3, [pc, #236]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe16:	695b      	ldr	r3, [r3, #20]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	4b39      	ldr	r3, [pc, #228]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe1e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2280      	movs	r2, #128	@ 0x80
 800fe24:	0092      	lsls	r2, r2, #2
 800fe26:	4313      	orrs	r3, r2
 800fe28:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fe2a:	4b35      	ldr	r3, [pc, #212]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fe2c:	699a      	ldr	r2, [r3, #24]
 800fe2e:	2380      	movs	r3, #128	@ 0x80
 800fe30:	00db      	lsls	r3, r3, #3
 800fe32:	401a      	ands	r2, r3
 800fe34:	2380      	movs	r3, #128	@ 0x80
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d10a      	bne.n	800fe52 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fe3c:	4b31      	ldr	r3, [pc, #196]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	2208      	movs	r2, #8
 800fe42:	431a      	orrs	r2, r3
 800fe44:	4b2f      	ldr	r3, [pc, #188]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe46:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2280      	movs	r2, #128	@ 0x80
 800fe4c:	00d2      	lsls	r2, r2, #3
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fe52:	4b2b      	ldr	r3, [pc, #172]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fe54:	699a      	ldr	r2, [r3, #24]
 800fe56:	2380      	movs	r3, #128	@ 0x80
 800fe58:	011b      	lsls	r3, r3, #4
 800fe5a:	401a      	ands	r2, r3
 800fe5c:	2380      	movs	r3, #128	@ 0x80
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d10a      	bne.n	800fe7a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fe64:	4b27      	ldr	r3, [pc, #156]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe66:	695b      	ldr	r3, [r3, #20]
 800fe68:	2204      	movs	r2, #4
 800fe6a:	431a      	orrs	r2, r3
 800fe6c:	4b25      	ldr	r3, [pc, #148]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe6e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2280      	movs	r2, #128	@ 0x80
 800fe74:	0112      	lsls	r2, r2, #4
 800fe76:	4313      	orrs	r3, r2
 800fe78:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fe7a:	4b21      	ldr	r3, [pc, #132]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fe7c:	699a      	ldr	r2, [r3, #24]
 800fe7e:	2380      	movs	r3, #128	@ 0x80
 800fe80:	019b      	lsls	r3, r3, #6
 800fe82:	401a      	ands	r2, r3
 800fe84:	2380      	movs	r3, #128	@ 0x80
 800fe86:	019b      	lsls	r3, r3, #6
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d10a      	bne.n	800fea2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fe8c:	4b1d      	ldr	r3, [pc, #116]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe8e:	695b      	ldr	r3, [r3, #20]
 800fe90:	2210      	movs	r2, #16
 800fe92:	431a      	orrs	r2, r3
 800fe94:	4b1b      	ldr	r3, [pc, #108]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fe96:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2280      	movs	r2, #128	@ 0x80
 800fe9c:	0192      	lsls	r2, r2, #6
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fea2:	4b17      	ldr	r3, [pc, #92]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fea4:	699a      	ldr	r2, [r3, #24]
 800fea6:	2380      	movs	r3, #128	@ 0x80
 800fea8:	029b      	lsls	r3, r3, #10
 800feaa:	401a      	ands	r2, r3
 800feac:	2380      	movs	r3, #128	@ 0x80
 800feae:	029b      	lsls	r3, r3, #10
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d109      	bne.n	800fec8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800feb4:	4b13      	ldr	r3, [pc, #76]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800feb6:	695b      	ldr	r3, [r3, #20]
 800feb8:	2220      	movs	r2, #32
 800feba:	431a      	orrs	r2, r3
 800febc:	4b11      	ldr	r3, [pc, #68]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800febe:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2220      	movs	r2, #32
 800fec4:	4313      	orrs	r3, r2
 800fec6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fec8:	4b0d      	ldr	r3, [pc, #52]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800feca:	699a      	ldr	r2, [r3, #24]
 800fecc:	2380      	movs	r3, #128	@ 0x80
 800fece:	025b      	lsls	r3, r3, #9
 800fed0:	401a      	ands	r2, r3
 800fed2:	2380      	movs	r3, #128	@ 0x80
 800fed4:	025b      	lsls	r3, r3, #9
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d10a      	bne.n	800fef0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800feda:	4b0a      	ldr	r3, [pc, #40]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fedc:	695b      	ldr	r3, [r3, #20]
 800fede:	2240      	movs	r2, #64	@ 0x40
 800fee0:	431a      	orrs	r2, r3
 800fee2:	4b08      	ldr	r3, [pc, #32]	@ (800ff04 <FLASH_SetErrorCode+0x134>)
 800fee4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2280      	movs	r2, #128	@ 0x80
 800feea:	0252      	lsls	r2, r2, #9
 800feec:	4313      	orrs	r3, r2
 800feee:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fef0:	4b03      	ldr	r3, [pc, #12]	@ (800ff00 <FLASH_SetErrorCode+0x130>)
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	619a      	str	r2, [r3, #24]
}  
 800fef6:	46c0      	nop			@ (mov r8, r8)
 800fef8:	46bd      	mov	sp, r7
 800fefa:	b002      	add	sp, #8
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	46c0      	nop			@ (mov r8, r8)
 800ff00:	40022000 	.word	0x40022000
 800ff04:	200023cc 	.word	0x200023cc

0800ff08 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ff0e:	4b12      	ldr	r3, [pc, #72]	@ (800ff58 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	4013      	ands	r3, r2
 800ff16:	d019      	beq.n	800ff4c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff18:	f3ef 8310 	mrs	r3, PRIMASK
 800ff1c:	607b      	str	r3, [r7, #4]
  return(result);
 800ff1e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ff20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff22:	b672      	cpsid	i
}
 800ff24:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ff26:	4b0c      	ldr	r3, [pc, #48]	@ (800ff58 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff28:	4a0c      	ldr	r2, [pc, #48]	@ (800ff5c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ff2a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ff2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff58 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ff60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ff30:	60da      	str	r2, [r3, #12]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	f383 8810 	msr	PRIMASK, r3
}
 800ff3c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ff3e:	4b06      	ldr	r3, [pc, #24]	@ (800ff58 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	2201      	movs	r2, #1
 800ff44:	4013      	ands	r3, r2
 800ff46:	d001      	beq.n	800ff4c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e000      	b.n	800ff4e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ff4c:	2300      	movs	r3, #0
}
 800ff4e:	0018      	movs	r0, r3
 800ff50:	46bd      	mov	sp, r7
 800ff52:	b004      	add	sp, #16
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	46c0      	nop			@ (mov r8, r8)
 800ff58:	40022000 	.word	0x40022000
 800ff5c:	89abcdef 	.word	0x89abcdef
 800ff60:	02030405 	.word	0x02030405

0800ff64 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ff68:	4b04      	ldr	r3, [pc, #16]	@ (800ff7c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ff6a:	685a      	ldr	r2, [r3, #4]
 800ff6c:	4b03      	ldr	r3, [pc, #12]	@ (800ff7c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ff6e:	2101      	movs	r1, #1
 800ff70:	430a      	orrs	r2, r1
 800ff72:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	0018      	movs	r0, r3
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	40022000 	.word	0x40022000

0800ff80 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ff80:	b5b0      	push	{r4, r5, r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff88:	250f      	movs	r5, #15
 800ff8a:	197b      	adds	r3, r7, r5
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ff90:	197c      	adds	r4, r7, r5
 800ff92:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ff94:	0018      	movs	r0, r3
 800ff96:	f7ff fea9 	bl	800fcec <FLASH_WaitForLastOperation>
 800ff9a:	0003      	movs	r3, r0
 800ff9c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ff9e:	0029      	movs	r1, r5
 800ffa0:	187b      	adds	r3, r7, r1
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d10c      	bne.n	800ffc2 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ffaa:	2200      	movs	r2, #0
 800ffac:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ffb4:	187c      	adds	r4, r7, r1
 800ffb6:	4b06      	ldr	r3, [pc, #24]	@ (800ffd0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ffb8:	0018      	movs	r0, r3
 800ffba:	f7ff fe97 	bl	800fcec <FLASH_WaitForLastOperation>
 800ffbe:	0003      	movs	r3, r0
 800ffc0:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800ffc2:	230f      	movs	r3, #15
 800ffc4:	18fb      	adds	r3, r7, r3
 800ffc6:	781b      	ldrb	r3, [r3, #0]
}  
 800ffc8:	0018      	movs	r0, r3
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	b004      	add	sp, #16
 800ffce:	bdb0      	pop	{r4, r5, r7, pc}
 800ffd0:	0000c350 	.word	0x0000c350
 800ffd4:	200023cc 	.word	0x200023cc

0800ffd8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800ffd8:	b5b0      	push	{r4, r5, r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ffe4:	2317      	movs	r3, #23
 800ffe6:	18fb      	adds	r3, r7, r3
 800ffe8:	2201      	movs	r2, #1
 800ffea:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ffec:	4b24      	ldr	r3, [pc, #144]	@ (8010080 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ffee:	7c1b      	ldrb	r3, [r3, #16]
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d101      	bne.n	800fff8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fff4:	2302      	movs	r3, #2
 800fff6:	e03e      	b.n	8010076 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fff8:	4b21      	ldr	r3, [pc, #132]	@ (8010080 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fffa:	2201      	movs	r2, #1
 800fffc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fffe:	2517      	movs	r5, #23
 8010000:	197c      	adds	r4, r7, r5
 8010002:	4b20      	ldr	r3, [pc, #128]	@ (8010084 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010004:	0018      	movs	r0, r3
 8010006:	f7ff fe71 	bl	800fcec <FLASH_WaitForLastOperation>
 801000a:	0003      	movs	r3, r0
 801000c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801000e:	197b      	adds	r3, r7, r5
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d129      	bne.n	801006a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010016:	4b1a      	ldr	r3, [pc, #104]	@ (8010080 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010018:	2200      	movs	r2, #0
 801001a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b02      	cmp	r3, #2
 8010020:	d103      	bne.n	801002a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	e013      	b.n	8010052 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d104      	bne.n	801003a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	b292      	uxth	r2, r2
 8010036:	801a      	strh	r2, [r3, #0]
 8010038:	e00b      	b.n	8010052 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d104      	bne.n	801004a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	b2d2      	uxtb	r2, r2
 8010046:	701a      	strb	r2, [r3, #0]
 8010048:	e003      	b.n	8010052 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 801004a:	2317      	movs	r3, #23
 801004c:	18fb      	adds	r3, r7, r3
 801004e:	2201      	movs	r2, #1
 8010050:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8010052:	2217      	movs	r2, #23
 8010054:	18bb      	adds	r3, r7, r2
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d106      	bne.n	801006a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801005c:	18bc      	adds	r4, r7, r2
 801005e:	4b09      	ldr	r3, [pc, #36]	@ (8010084 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010060:	0018      	movs	r0, r3
 8010062:	f7ff fe43 	bl	800fcec <FLASH_WaitForLastOperation>
 8010066:	0003      	movs	r3, r0
 8010068:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801006a:	4b05      	ldr	r3, [pc, #20]	@ (8010080 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801006c:	2200      	movs	r2, #0
 801006e:	741a      	strb	r2, [r3, #16]

  return status;
 8010070:	2317      	movs	r3, #23
 8010072:	18fb      	adds	r3, r7, r3
 8010074:	781b      	ldrb	r3, [r3, #0]
}
 8010076:	0018      	movs	r0, r3
 8010078:	46bd      	mov	sp, r7
 801007a:	b006      	add	sp, #24
 801007c:	bdb0      	pop	{r4, r5, r7, pc}
 801007e:	46c0      	nop			@ (mov r8, r8)
 8010080:	200023cc 	.word	0x200023cc
 8010084:	0000c350 	.word	0x0000c350

08010088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010092:	2300      	movs	r3, #0
 8010094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010096:	2300      	movs	r3, #0
 8010098:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801009a:	2300      	movs	r3, #0
 801009c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801009e:	e155      	b.n	801034c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2101      	movs	r1, #1
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	4091      	lsls	r1, r2
 80100aa:	000a      	movs	r2, r1
 80100ac:	4013      	ands	r3, r2
 80100ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d100      	bne.n	80100b8 <HAL_GPIO_Init+0x30>
 80100b6:	e146      	b.n	8010346 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	2203      	movs	r2, #3
 80100be:	4013      	ands	r3, r2
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d005      	beq.n	80100d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	2203      	movs	r2, #3
 80100ca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80100cc:	2b02      	cmp	r3, #2
 80100ce:	d130      	bne.n	8010132 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	005b      	lsls	r3, r3, #1
 80100da:	2203      	movs	r2, #3
 80100dc:	409a      	lsls	r2, r3
 80100de:	0013      	movs	r3, r2
 80100e0:	43da      	mvns	r2, r3
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	4013      	ands	r3, r2
 80100e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	68da      	ldr	r2, [r3, #12]
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	409a      	lsls	r2, r3
 80100f2:	0013      	movs	r3, r2
 80100f4:	693a      	ldr	r2, [r7, #16]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010106:	2201      	movs	r2, #1
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	409a      	lsls	r2, r3
 801010c:	0013      	movs	r3, r2
 801010e:	43da      	mvns	r2, r3
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	4013      	ands	r3, r2
 8010114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	091b      	lsrs	r3, r3, #4
 801011c:	2201      	movs	r2, #1
 801011e:	401a      	ands	r2, r3
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	409a      	lsls	r2, r3
 8010124:	0013      	movs	r3, r2
 8010126:	693a      	ldr	r2, [r7, #16]
 8010128:	4313      	orrs	r3, r2
 801012a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	2203      	movs	r2, #3
 8010138:	4013      	ands	r3, r2
 801013a:	2b03      	cmp	r3, #3
 801013c:	d017      	beq.n	801016e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	005b      	lsls	r3, r3, #1
 8010148:	2203      	movs	r2, #3
 801014a:	409a      	lsls	r2, r3
 801014c:	0013      	movs	r3, r2
 801014e:	43da      	mvns	r2, r3
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	4013      	ands	r3, r2
 8010154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	689a      	ldr	r2, [r3, #8]
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	005b      	lsls	r3, r3, #1
 801015e:	409a      	lsls	r2, r3
 8010160:	0013      	movs	r3, r2
 8010162:	693a      	ldr	r2, [r7, #16]
 8010164:	4313      	orrs	r3, r2
 8010166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	693a      	ldr	r2, [r7, #16]
 801016c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	2203      	movs	r2, #3
 8010174:	4013      	ands	r3, r2
 8010176:	2b02      	cmp	r3, #2
 8010178:	d123      	bne.n	80101c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	08da      	lsrs	r2, r3, #3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	3208      	adds	r2, #8
 8010182:	0092      	lsls	r2, r2, #2
 8010184:	58d3      	ldr	r3, [r2, r3]
 8010186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	2207      	movs	r2, #7
 801018c:	4013      	ands	r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	220f      	movs	r2, #15
 8010192:	409a      	lsls	r2, r3
 8010194:	0013      	movs	r3, r2
 8010196:	43da      	mvns	r2, r3
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	4013      	ands	r3, r2
 801019c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	691a      	ldr	r2, [r3, #16]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	2107      	movs	r1, #7
 80101a6:	400b      	ands	r3, r1
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	409a      	lsls	r2, r3
 80101ac:	0013      	movs	r3, r2
 80101ae:	693a      	ldr	r2, [r7, #16]
 80101b0:	4313      	orrs	r3, r2
 80101b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	08da      	lsrs	r2, r3, #3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	3208      	adds	r2, #8
 80101bc:	0092      	lsls	r2, r2, #2
 80101be:	6939      	ldr	r1, [r7, #16]
 80101c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	2203      	movs	r2, #3
 80101ce:	409a      	lsls	r2, r3
 80101d0:	0013      	movs	r3, r2
 80101d2:	43da      	mvns	r2, r3
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	4013      	ands	r3, r2
 80101d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	2203      	movs	r2, #3
 80101e0:	401a      	ands	r2, r3
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	005b      	lsls	r3, r3, #1
 80101e6:	409a      	lsls	r2, r3
 80101e8:	0013      	movs	r3, r2
 80101ea:	693a      	ldr	r2, [r7, #16]
 80101ec:	4313      	orrs	r3, r2
 80101ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	693a      	ldr	r2, [r7, #16]
 80101f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	685a      	ldr	r2, [r3, #4]
 80101fa:	23c0      	movs	r3, #192	@ 0xc0
 80101fc:	029b      	lsls	r3, r3, #10
 80101fe:	4013      	ands	r3, r2
 8010200:	d100      	bne.n	8010204 <HAL_GPIO_Init+0x17c>
 8010202:	e0a0      	b.n	8010346 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010204:	4b57      	ldr	r3, [pc, #348]	@ (8010364 <HAL_GPIO_Init+0x2dc>)
 8010206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010208:	4b56      	ldr	r3, [pc, #344]	@ (8010364 <HAL_GPIO_Init+0x2dc>)
 801020a:	2101      	movs	r1, #1
 801020c:	430a      	orrs	r2, r1
 801020e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010210:	4a55      	ldr	r2, [pc, #340]	@ (8010368 <HAL_GPIO_Init+0x2e0>)
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	089b      	lsrs	r3, r3, #2
 8010216:	3302      	adds	r3, #2
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	589b      	ldr	r3, [r3, r2]
 801021c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	2203      	movs	r2, #3
 8010222:	4013      	ands	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	220f      	movs	r2, #15
 8010228:	409a      	lsls	r2, r3
 801022a:	0013      	movs	r3, r2
 801022c:	43da      	mvns	r2, r3
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	4013      	ands	r3, r2
 8010232:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	23a0      	movs	r3, #160	@ 0xa0
 8010238:	05db      	lsls	r3, r3, #23
 801023a:	429a      	cmp	r2, r3
 801023c:	d01f      	beq.n	801027e <HAL_GPIO_Init+0x1f6>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4a4a      	ldr	r2, [pc, #296]	@ (801036c <HAL_GPIO_Init+0x2e4>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d019      	beq.n	801027a <HAL_GPIO_Init+0x1f2>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4a49      	ldr	r2, [pc, #292]	@ (8010370 <HAL_GPIO_Init+0x2e8>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d013      	beq.n	8010276 <HAL_GPIO_Init+0x1ee>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4a48      	ldr	r2, [pc, #288]	@ (8010374 <HAL_GPIO_Init+0x2ec>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d00d      	beq.n	8010272 <HAL_GPIO_Init+0x1ea>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a47      	ldr	r2, [pc, #284]	@ (8010378 <HAL_GPIO_Init+0x2f0>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d007      	beq.n	801026e <HAL_GPIO_Init+0x1e6>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a46      	ldr	r2, [pc, #280]	@ (801037c <HAL_GPIO_Init+0x2f4>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d101      	bne.n	801026a <HAL_GPIO_Init+0x1e2>
 8010266:	2305      	movs	r3, #5
 8010268:	e00a      	b.n	8010280 <HAL_GPIO_Init+0x1f8>
 801026a:	2306      	movs	r3, #6
 801026c:	e008      	b.n	8010280 <HAL_GPIO_Init+0x1f8>
 801026e:	2304      	movs	r3, #4
 8010270:	e006      	b.n	8010280 <HAL_GPIO_Init+0x1f8>
 8010272:	2303      	movs	r3, #3
 8010274:	e004      	b.n	8010280 <HAL_GPIO_Init+0x1f8>
 8010276:	2302      	movs	r3, #2
 8010278:	e002      	b.n	8010280 <HAL_GPIO_Init+0x1f8>
 801027a:	2301      	movs	r3, #1
 801027c:	e000      	b.n	8010280 <HAL_GPIO_Init+0x1f8>
 801027e:	2300      	movs	r3, #0
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	2103      	movs	r1, #3
 8010284:	400a      	ands	r2, r1
 8010286:	0092      	lsls	r2, r2, #2
 8010288:	4093      	lsls	r3, r2
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	4313      	orrs	r3, r2
 801028e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010290:	4935      	ldr	r1, [pc, #212]	@ (8010368 <HAL_GPIO_Init+0x2e0>)
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	089b      	lsrs	r3, r3, #2
 8010296:	3302      	adds	r3, #2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	693a      	ldr	r2, [r7, #16]
 801029c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801029e:	4b38      	ldr	r3, [pc, #224]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	43da      	mvns	r2, r3
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	4013      	ands	r3, r2
 80102ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	685a      	ldr	r2, [r3, #4]
 80102b2:	2380      	movs	r3, #128	@ 0x80
 80102b4:	035b      	lsls	r3, r3, #13
 80102b6:	4013      	ands	r3, r2
 80102b8:	d003      	beq.n	80102c2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80102ba:	693a      	ldr	r2, [r7, #16]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4313      	orrs	r3, r2
 80102c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80102c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 80102c4:	693a      	ldr	r2, [r7, #16]
 80102c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80102c8:	4b2d      	ldr	r3, [pc, #180]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	43da      	mvns	r2, r3
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	4013      	ands	r3, r2
 80102d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	685a      	ldr	r2, [r3, #4]
 80102dc:	2380      	movs	r3, #128	@ 0x80
 80102de:	039b      	lsls	r3, r3, #14
 80102e0:	4013      	ands	r3, r2
 80102e2:	d003      	beq.n	80102ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80102e4:	693a      	ldr	r2, [r7, #16]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80102ec:	4b24      	ldr	r3, [pc, #144]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 80102ee:	693a      	ldr	r2, [r7, #16]
 80102f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80102f2:	4b23      	ldr	r3, [pc, #140]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	43da      	mvns	r2, r3
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	4013      	ands	r3, r2
 8010300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	2380      	movs	r3, #128	@ 0x80
 8010308:	029b      	lsls	r3, r3, #10
 801030a:	4013      	ands	r3, r2
 801030c:	d003      	beq.n	8010316 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801030e:	693a      	ldr	r2, [r7, #16]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4313      	orrs	r3, r2
 8010314:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8010316:	4b1a      	ldr	r3, [pc, #104]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 8010318:	693a      	ldr	r2, [r7, #16]
 801031a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801031c:	4b18      	ldr	r3, [pc, #96]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	43da      	mvns	r2, r3
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	4013      	ands	r3, r2
 801032a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	2380      	movs	r3, #128	@ 0x80
 8010332:	025b      	lsls	r3, r3, #9
 8010334:	4013      	ands	r3, r2
 8010336:	d003      	beq.n	8010340 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010338:	693a      	ldr	r2, [r7, #16]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	4313      	orrs	r3, r2
 801033e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010340:	4b0f      	ldr	r3, [pc, #60]	@ (8010380 <HAL_GPIO_Init+0x2f8>)
 8010342:	693a      	ldr	r2, [r7, #16]
 8010344:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	3301      	adds	r3, #1
 801034a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	40da      	lsrs	r2, r3
 8010354:	1e13      	subs	r3, r2, #0
 8010356:	d000      	beq.n	801035a <HAL_GPIO_Init+0x2d2>
 8010358:	e6a2      	b.n	80100a0 <HAL_GPIO_Init+0x18>
  }
}
 801035a:	46c0      	nop			@ (mov r8, r8)
 801035c:	46c0      	nop			@ (mov r8, r8)
 801035e:	46bd      	mov	sp, r7
 8010360:	b006      	add	sp, #24
 8010362:	bd80      	pop	{r7, pc}
 8010364:	40021000 	.word	0x40021000
 8010368:	40010000 	.word	0x40010000
 801036c:	50000400 	.word	0x50000400
 8010370:	50000800 	.word	0x50000800
 8010374:	50000c00 	.word	0x50000c00
 8010378:	50001000 	.word	0x50001000
 801037c:	50001c00 	.word	0x50001c00
 8010380:	40010400 	.word	0x40010400

08010384 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	000a      	movs	r2, r1
 801038e:	1cbb      	adds	r3, r7, #2
 8010390:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	691b      	ldr	r3, [r3, #16]
 8010396:	1cba      	adds	r2, r7, #2
 8010398:	8812      	ldrh	r2, [r2, #0]
 801039a:	4013      	ands	r3, r2
 801039c:	d004      	beq.n	80103a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801039e:	230f      	movs	r3, #15
 80103a0:	18fb      	adds	r3, r7, r3
 80103a2:	2201      	movs	r2, #1
 80103a4:	701a      	strb	r2, [r3, #0]
 80103a6:	e003      	b.n	80103b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80103a8:	230f      	movs	r3, #15
 80103aa:	18fb      	adds	r3, r7, r3
 80103ac:	2200      	movs	r2, #0
 80103ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80103b0:	230f      	movs	r3, #15
 80103b2:	18fb      	adds	r3, r7, r3
 80103b4:	781b      	ldrb	r3, [r3, #0]
}
 80103b6:	0018      	movs	r0, r3
 80103b8:	46bd      	mov	sp, r7
 80103ba:	b004      	add	sp, #16
 80103bc:	bd80      	pop	{r7, pc}

080103be <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	0008      	movs	r0, r1
 80103c8:	0011      	movs	r1, r2
 80103ca:	1cbb      	adds	r3, r7, #2
 80103cc:	1c02      	adds	r2, r0, #0
 80103ce:	801a      	strh	r2, [r3, #0]
 80103d0:	1c7b      	adds	r3, r7, #1
 80103d2:	1c0a      	adds	r2, r1, #0
 80103d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80103d6:	1c7b      	adds	r3, r7, #1
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d004      	beq.n	80103e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80103de:	1cbb      	adds	r3, r7, #2
 80103e0:	881a      	ldrh	r2, [r3, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80103e6:	e003      	b.n	80103f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80103e8:	1cbb      	adds	r3, r7, #2
 80103ea:	881a      	ldrh	r2, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80103f0:	46c0      	nop			@ (mov r8, r8)
 80103f2:	46bd      	mov	sp, r7
 80103f4:	b002      	add	sp, #8
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	0002      	movs	r2, r0
 8010400:	1dbb      	adds	r3, r7, #6
 8010402:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010404:	4b09      	ldr	r3, [pc, #36]	@ (801042c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	1dba      	adds	r2, r7, #6
 801040a:	8812      	ldrh	r2, [r2, #0]
 801040c:	4013      	ands	r3, r2
 801040e:	d008      	beq.n	8010422 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010410:	4b06      	ldr	r3, [pc, #24]	@ (801042c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010412:	1dba      	adds	r2, r7, #6
 8010414:	8812      	ldrh	r2, [r2, #0]
 8010416:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010418:	1dbb      	adds	r3, r7, #6
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	0018      	movs	r0, r3
 801041e:	f7f7 ff6b 	bl	80082f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8010422:	46c0      	nop			@ (mov r8, r8)
 8010424:	46bd      	mov	sp, r7
 8010426:	b002      	add	sp, #8
 8010428:	bd80      	pop	{r7, pc}
 801042a:	46c0      	nop			@ (mov r8, r8)
 801042c:	40010400 	.word	0x40010400

08010430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801043e:	2301      	movs	r3, #1
 8010440:	e082      	b.n	8010548 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2241      	movs	r2, #65	@ 0x41
 8010446:	5c9b      	ldrb	r3, [r3, r2]
 8010448:	b2db      	uxtb	r3, r3
 801044a:	2b00      	cmp	r3, #0
 801044c:	d107      	bne.n	801045e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2240      	movs	r2, #64	@ 0x40
 8010452:	2100      	movs	r1, #0
 8010454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	0018      	movs	r0, r3
 801045a:	f7f7 fa2b 	bl	80078b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2241      	movs	r2, #65	@ 0x41
 8010462:	2124      	movs	r1, #36	@ 0x24
 8010464:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2101      	movs	r1, #1
 8010472:	438a      	bics	r2, r1
 8010474:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	685a      	ldr	r2, [r3, #4]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4934      	ldr	r1, [pc, #208]	@ (8010550 <HAL_I2C_Init+0x120>)
 8010480:	400a      	ands	r2, r1
 8010482:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	689a      	ldr	r2, [r3, #8]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4931      	ldr	r1, [pc, #196]	@ (8010554 <HAL_I2C_Init+0x124>)
 8010490:	400a      	ands	r2, r1
 8010492:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d108      	bne.n	80104ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	689a      	ldr	r2, [r3, #8]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2180      	movs	r1, #128	@ 0x80
 80104a6:	0209      	lsls	r1, r1, #8
 80104a8:	430a      	orrs	r2, r1
 80104aa:	609a      	str	r2, [r3, #8]
 80104ac:	e007      	b.n	80104be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	689a      	ldr	r2, [r3, #8]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2184      	movs	r1, #132	@ 0x84
 80104b8:	0209      	lsls	r1, r1, #8
 80104ba:	430a      	orrs	r2, r1
 80104bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	2b02      	cmp	r3, #2
 80104c4:	d104      	bne.n	80104d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2280      	movs	r2, #128	@ 0x80
 80104cc:	0112      	lsls	r2, r2, #4
 80104ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	491f      	ldr	r1, [pc, #124]	@ (8010558 <HAL_I2C_Init+0x128>)
 80104dc:	430a      	orrs	r2, r1
 80104de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68da      	ldr	r2, [r3, #12]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	491a      	ldr	r1, [pc, #104]	@ (8010554 <HAL_I2C_Init+0x124>)
 80104ec:	400a      	ands	r2, r1
 80104ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	691a      	ldr	r2, [r3, #16]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	431a      	orrs	r2, r3
 80104fa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	430a      	orrs	r2, r1
 8010508:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	69d9      	ldr	r1, [r3, #28]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6a1a      	ldr	r2, [r3, #32]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	430a      	orrs	r2, r1
 8010518:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2101      	movs	r1, #1
 8010526:	430a      	orrs	r2, r1
 8010528:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2241      	movs	r2, #65	@ 0x41
 8010534:	2120      	movs	r1, #32
 8010536:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2242      	movs	r2, #66	@ 0x42
 8010542:	2100      	movs	r1, #0
 8010544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	0018      	movs	r0, r3
 801054a:	46bd      	mov	sp, r7
 801054c:	b002      	add	sp, #8
 801054e:	bd80      	pop	{r7, pc}
 8010550:	f0ffffff 	.word	0xf0ffffff
 8010554:	ffff7fff 	.word	0xffff7fff
 8010558:	02008000 	.word	0x02008000

0801055c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801055c:	b590      	push	{r4, r7, lr}
 801055e:	b089      	sub	sp, #36	@ 0x24
 8010560:	af02      	add	r7, sp, #8
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	0008      	movs	r0, r1
 8010566:	607a      	str	r2, [r7, #4]
 8010568:	0019      	movs	r1, r3
 801056a:	230a      	movs	r3, #10
 801056c:	18fb      	adds	r3, r7, r3
 801056e:	1c02      	adds	r2, r0, #0
 8010570:	801a      	strh	r2, [r3, #0]
 8010572:	2308      	movs	r3, #8
 8010574:	18fb      	adds	r3, r7, r3
 8010576:	1c0a      	adds	r2, r1, #0
 8010578:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2241      	movs	r2, #65	@ 0x41
 801057e:	5c9b      	ldrb	r3, [r3, r2]
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b20      	cmp	r3, #32
 8010584:	d000      	beq.n	8010588 <HAL_I2C_Master_Transmit+0x2c>
 8010586:	e0e7      	b.n	8010758 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2240      	movs	r2, #64	@ 0x40
 801058c:	5c9b      	ldrb	r3, [r3, r2]
 801058e:	2b01      	cmp	r3, #1
 8010590:	d101      	bne.n	8010596 <HAL_I2C_Master_Transmit+0x3a>
 8010592:	2302      	movs	r3, #2
 8010594:	e0e1      	b.n	801075a <HAL_I2C_Master_Transmit+0x1fe>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2240      	movs	r2, #64	@ 0x40
 801059a:	2101      	movs	r1, #1
 801059c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801059e:	f7fe fc7d 	bl	800ee9c <HAL_GetTick>
 80105a2:	0003      	movs	r3, r0
 80105a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80105a6:	2380      	movs	r3, #128	@ 0x80
 80105a8:	0219      	lsls	r1, r3, #8
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	2319      	movs	r3, #25
 80105b2:	2201      	movs	r2, #1
 80105b4:	f001 ff98 	bl	80124e8 <I2C_WaitOnFlagUntilTimeout>
 80105b8:	1e03      	subs	r3, r0, #0
 80105ba:	d001      	beq.n	80105c0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80105bc:	2301      	movs	r3, #1
 80105be:	e0cc      	b.n	801075a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2241      	movs	r2, #65	@ 0x41
 80105c4:	2121      	movs	r1, #33	@ 0x21
 80105c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2242      	movs	r2, #66	@ 0x42
 80105cc:	2110      	movs	r1, #16
 80105ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2200      	movs	r2, #0
 80105d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2208      	movs	r2, #8
 80105e0:	18ba      	adds	r2, r7, r2
 80105e2:	8812      	ldrh	r2, [r2, #0]
 80105e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2200      	movs	r2, #0
 80105ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	2bff      	cmp	r3, #255	@ 0xff
 80105f4:	d911      	bls.n	801061a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	22ff      	movs	r2, #255	@ 0xff
 80105fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010600:	b2da      	uxtb	r2, r3
 8010602:	2380      	movs	r3, #128	@ 0x80
 8010604:	045c      	lsls	r4, r3, #17
 8010606:	230a      	movs	r3, #10
 8010608:	18fb      	adds	r3, r7, r3
 801060a:	8819      	ldrh	r1, [r3, #0]
 801060c:	68f8      	ldr	r0, [r7, #12]
 801060e:	4b55      	ldr	r3, [pc, #340]	@ (8010764 <HAL_I2C_Master_Transmit+0x208>)
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	0023      	movs	r3, r4
 8010614:	f002 f9ba 	bl	801298c <I2C_TransferConfig>
 8010618:	e075      	b.n	8010706 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801061e:	b29a      	uxth	r2, r3
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010628:	b2da      	uxtb	r2, r3
 801062a:	2380      	movs	r3, #128	@ 0x80
 801062c:	049c      	lsls	r4, r3, #18
 801062e:	230a      	movs	r3, #10
 8010630:	18fb      	adds	r3, r7, r3
 8010632:	8819      	ldrh	r1, [r3, #0]
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	4b4b      	ldr	r3, [pc, #300]	@ (8010764 <HAL_I2C_Master_Transmit+0x208>)
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	0023      	movs	r3, r4
 801063c:	f002 f9a6 	bl	801298c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010640:	e061      	b.n	8010706 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010642:	697a      	ldr	r2, [r7, #20]
 8010644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	0018      	movs	r0, r3
 801064a:	f001 ff9b 	bl	8012584 <I2C_WaitOnTXISFlagUntilTimeout>
 801064e:	1e03      	subs	r3, r0, #0
 8010650:	d001      	beq.n	8010656 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010652:	2301      	movs	r3, #1
 8010654:	e081      	b.n	801075a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801065a:	781a      	ldrb	r2, [r3, #0]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010670:	b29b      	uxth	r3, r3
 8010672:	3b01      	subs	r3, #1
 8010674:	b29a      	uxth	r2, r3
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801067e:	3b01      	subs	r3, #1
 8010680:	b29a      	uxth	r2, r3
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801068a:	b29b      	uxth	r3, r3
 801068c:	2b00      	cmp	r3, #0
 801068e:	d03a      	beq.n	8010706 <HAL_I2C_Master_Transmit+0x1aa>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010694:	2b00      	cmp	r3, #0
 8010696:	d136      	bne.n	8010706 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	0013      	movs	r3, r2
 80106a2:	2200      	movs	r2, #0
 80106a4:	2180      	movs	r1, #128	@ 0x80
 80106a6:	f001 ff1f 	bl	80124e8 <I2C_WaitOnFlagUntilTimeout>
 80106aa:	1e03      	subs	r3, r0, #0
 80106ac:	d001      	beq.n	80106b2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e053      	b.n	801075a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	2bff      	cmp	r3, #255	@ 0xff
 80106ba:	d911      	bls.n	80106e0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	22ff      	movs	r2, #255	@ 0xff
 80106c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c6:	b2da      	uxtb	r2, r3
 80106c8:	2380      	movs	r3, #128	@ 0x80
 80106ca:	045c      	lsls	r4, r3, #17
 80106cc:	230a      	movs	r3, #10
 80106ce:	18fb      	adds	r3, r7, r3
 80106d0:	8819      	ldrh	r1, [r3, #0]
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	2300      	movs	r3, #0
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	0023      	movs	r3, r4
 80106da:	f002 f957 	bl	801298c <I2C_TransferConfig>
 80106de:	e012      	b.n	8010706 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	2380      	movs	r3, #128	@ 0x80
 80106f2:	049c      	lsls	r4, r3, #18
 80106f4:	230a      	movs	r3, #10
 80106f6:	18fb      	adds	r3, r7, r3
 80106f8:	8819      	ldrh	r1, [r3, #0]
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	2300      	movs	r3, #0
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	0023      	movs	r3, r4
 8010702:	f002 f943 	bl	801298c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801070a:	b29b      	uxth	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d198      	bne.n	8010642 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	0018      	movs	r0, r3
 8010718:	f001 ff7a 	bl	8012610 <I2C_WaitOnSTOPFlagUntilTimeout>
 801071c:	1e03      	subs	r3, r0, #0
 801071e:	d001      	beq.n	8010724 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010720:	2301      	movs	r3, #1
 8010722:	e01a      	b.n	801075a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2220      	movs	r2, #32
 801072a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	685a      	ldr	r2, [r3, #4]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	490c      	ldr	r1, [pc, #48]	@ (8010768 <HAL_I2C_Master_Transmit+0x20c>)
 8010738:	400a      	ands	r2, r1
 801073a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2241      	movs	r2, #65	@ 0x41
 8010740:	2120      	movs	r1, #32
 8010742:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2242      	movs	r2, #66	@ 0x42
 8010748:	2100      	movs	r1, #0
 801074a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2240      	movs	r2, #64	@ 0x40
 8010750:	2100      	movs	r1, #0
 8010752:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010754:	2300      	movs	r3, #0
 8010756:	e000      	b.n	801075a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010758:	2302      	movs	r3, #2
  }
}
 801075a:	0018      	movs	r0, r3
 801075c:	46bd      	mov	sp, r7
 801075e:	b007      	add	sp, #28
 8010760:	bd90      	pop	{r4, r7, pc}
 8010762:	46c0      	nop			@ (mov r8, r8)
 8010764:	80002000 	.word	0x80002000
 8010768:	fe00e800 	.word	0xfe00e800

0801076c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b089      	sub	sp, #36	@ 0x24
 8010770:	af02      	add	r7, sp, #8
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	0008      	movs	r0, r1
 8010776:	607a      	str	r2, [r7, #4]
 8010778:	0019      	movs	r1, r3
 801077a:	230a      	movs	r3, #10
 801077c:	18fb      	adds	r3, r7, r3
 801077e:	1c02      	adds	r2, r0, #0
 8010780:	801a      	strh	r2, [r3, #0]
 8010782:	2308      	movs	r3, #8
 8010784:	18fb      	adds	r3, r7, r3
 8010786:	1c0a      	adds	r2, r1, #0
 8010788:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2241      	movs	r2, #65	@ 0x41
 801078e:	5c9b      	ldrb	r3, [r3, r2]
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b20      	cmp	r3, #32
 8010794:	d000      	beq.n	8010798 <HAL_I2C_Master_Receive+0x2c>
 8010796:	e0e8      	b.n	801096a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2240      	movs	r2, #64	@ 0x40
 801079c:	5c9b      	ldrb	r3, [r3, r2]
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d101      	bne.n	80107a6 <HAL_I2C_Master_Receive+0x3a>
 80107a2:	2302      	movs	r3, #2
 80107a4:	e0e2      	b.n	801096c <HAL_I2C_Master_Receive+0x200>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2240      	movs	r2, #64	@ 0x40
 80107aa:	2101      	movs	r1, #1
 80107ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80107ae:	f7fe fb75 	bl	800ee9c <HAL_GetTick>
 80107b2:	0003      	movs	r3, r0
 80107b4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80107b6:	2380      	movs	r3, #128	@ 0x80
 80107b8:	0219      	lsls	r1, r3, #8
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	2319      	movs	r3, #25
 80107c2:	2201      	movs	r2, #1
 80107c4:	f001 fe90 	bl	80124e8 <I2C_WaitOnFlagUntilTimeout>
 80107c8:	1e03      	subs	r3, r0, #0
 80107ca:	d001      	beq.n	80107d0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80107cc:	2301      	movs	r3, #1
 80107ce:	e0cd      	b.n	801096c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2241      	movs	r2, #65	@ 0x41
 80107d4:	2122      	movs	r1, #34	@ 0x22
 80107d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2242      	movs	r2, #66	@ 0x42
 80107dc:	2110      	movs	r1, #16
 80107de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2200      	movs	r2, #0
 80107e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2208      	movs	r2, #8
 80107f0:	18ba      	adds	r2, r7, r2
 80107f2:	8812      	ldrh	r2, [r2, #0]
 80107f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2200      	movs	r2, #0
 80107fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010800:	b29b      	uxth	r3, r3
 8010802:	2bff      	cmp	r3, #255	@ 0xff
 8010804:	d911      	bls.n	801082a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	22ff      	movs	r2, #255	@ 0xff
 801080a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010810:	b2da      	uxtb	r2, r3
 8010812:	2380      	movs	r3, #128	@ 0x80
 8010814:	045c      	lsls	r4, r3, #17
 8010816:	230a      	movs	r3, #10
 8010818:	18fb      	adds	r3, r7, r3
 801081a:	8819      	ldrh	r1, [r3, #0]
 801081c:	68f8      	ldr	r0, [r7, #12]
 801081e:	4b55      	ldr	r3, [pc, #340]	@ (8010974 <HAL_I2C_Master_Receive+0x208>)
 8010820:	9300      	str	r3, [sp, #0]
 8010822:	0023      	movs	r3, r4
 8010824:	f002 f8b2 	bl	801298c <I2C_TransferConfig>
 8010828:	e076      	b.n	8010918 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801082e:	b29a      	uxth	r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010838:	b2da      	uxtb	r2, r3
 801083a:	2380      	movs	r3, #128	@ 0x80
 801083c:	049c      	lsls	r4, r3, #18
 801083e:	230a      	movs	r3, #10
 8010840:	18fb      	adds	r3, r7, r3
 8010842:	8819      	ldrh	r1, [r3, #0]
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	4b4b      	ldr	r3, [pc, #300]	@ (8010974 <HAL_I2C_Master_Receive+0x208>)
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	0023      	movs	r3, r4
 801084c:	f002 f89e 	bl	801298c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010850:	e062      	b.n	8010918 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010852:	697a      	ldr	r2, [r7, #20]
 8010854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	0018      	movs	r0, r3
 801085a:	f001 ff1d 	bl	8012698 <I2C_WaitOnRXNEFlagUntilTimeout>
 801085e:	1e03      	subs	r3, r0, #0
 8010860:	d001      	beq.n	8010866 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010862:	2301      	movs	r3, #1
 8010864:	e082      	b.n	801096c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010870:	b2d2      	uxtb	r2, r2
 8010872:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010878:	1c5a      	adds	r2, r3, #1
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010882:	3b01      	subs	r3, #1
 8010884:	b29a      	uxth	r2, r3
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801088e:	b29b      	uxth	r3, r3
 8010890:	3b01      	subs	r3, #1
 8010892:	b29a      	uxth	r2, r3
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801089c:	b29b      	uxth	r3, r3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d03a      	beq.n	8010918 <HAL_I2C_Master_Receive+0x1ac>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d136      	bne.n	8010918 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80108aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	0013      	movs	r3, r2
 80108b4:	2200      	movs	r2, #0
 80108b6:	2180      	movs	r1, #128	@ 0x80
 80108b8:	f001 fe16 	bl	80124e8 <I2C_WaitOnFlagUntilTimeout>
 80108bc:	1e03      	subs	r3, r0, #0
 80108be:	d001      	beq.n	80108c4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80108c0:	2301      	movs	r3, #1
 80108c2:	e053      	b.n	801096c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	2bff      	cmp	r3, #255	@ 0xff
 80108cc:	d911      	bls.n	80108f2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	22ff      	movs	r2, #255	@ 0xff
 80108d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	2380      	movs	r3, #128	@ 0x80
 80108dc:	045c      	lsls	r4, r3, #17
 80108de:	230a      	movs	r3, #10
 80108e0:	18fb      	adds	r3, r7, r3
 80108e2:	8819      	ldrh	r1, [r3, #0]
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	2300      	movs	r3, #0
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	0023      	movs	r3, r4
 80108ec:	f002 f84e 	bl	801298c <I2C_TransferConfig>
 80108f0:	e012      	b.n	8010918 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108f6:	b29a      	uxth	r2, r3
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010900:	b2da      	uxtb	r2, r3
 8010902:	2380      	movs	r3, #128	@ 0x80
 8010904:	049c      	lsls	r4, r3, #18
 8010906:	230a      	movs	r3, #10
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	8819      	ldrh	r1, [r3, #0]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	2300      	movs	r3, #0
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	0023      	movs	r3, r4
 8010914:	f002 f83a 	bl	801298c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801091c:	b29b      	uxth	r3, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	d197      	bne.n	8010852 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	0018      	movs	r0, r3
 801092a:	f001 fe71 	bl	8012610 <I2C_WaitOnSTOPFlagUntilTimeout>
 801092e:	1e03      	subs	r3, r0, #0
 8010930:	d001      	beq.n	8010936 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010932:	2301      	movs	r3, #1
 8010934:	e01a      	b.n	801096c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2220      	movs	r2, #32
 801093c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	685a      	ldr	r2, [r3, #4]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	490b      	ldr	r1, [pc, #44]	@ (8010978 <HAL_I2C_Master_Receive+0x20c>)
 801094a:	400a      	ands	r2, r1
 801094c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2241      	movs	r2, #65	@ 0x41
 8010952:	2120      	movs	r1, #32
 8010954:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2242      	movs	r2, #66	@ 0x42
 801095a:	2100      	movs	r1, #0
 801095c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2240      	movs	r2, #64	@ 0x40
 8010962:	2100      	movs	r1, #0
 8010964:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010966:	2300      	movs	r3, #0
 8010968:	e000      	b.n	801096c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801096a:	2302      	movs	r3, #2
  }
}
 801096c:	0018      	movs	r0, r3
 801096e:	46bd      	mov	sp, r7
 8010970:	b007      	add	sp, #28
 8010972:	bd90      	pop	{r4, r7, pc}
 8010974:	80002400 	.word	0x80002400
 8010978:	fe00e800 	.word	0xfe00e800

0801097c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801097c:	b5b0      	push	{r4, r5, r7, lr}
 801097e:	b088      	sub	sp, #32
 8010980:	af02      	add	r7, sp, #8
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	0008      	movs	r0, r1
 8010986:	607a      	str	r2, [r7, #4]
 8010988:	0019      	movs	r1, r3
 801098a:	230a      	movs	r3, #10
 801098c:	18fb      	adds	r3, r7, r3
 801098e:	1c02      	adds	r2, r0, #0
 8010990:	801a      	strh	r2, [r3, #0]
 8010992:	2308      	movs	r3, #8
 8010994:	18fb      	adds	r3, r7, r3
 8010996:	1c0a      	adds	r2, r1, #0
 8010998:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2241      	movs	r2, #65	@ 0x41
 801099e:	5c9b      	ldrb	r3, [r3, r2]
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	2b20      	cmp	r3, #32
 80109a4:	d000      	beq.n	80109a8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80109a6:	e0dd      	b.n	8010b64 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	699a      	ldr	r2, [r3, #24]
 80109ae:	2380      	movs	r3, #128	@ 0x80
 80109b0:	021b      	lsls	r3, r3, #8
 80109b2:	401a      	ands	r2, r3
 80109b4:	2380      	movs	r3, #128	@ 0x80
 80109b6:	021b      	lsls	r3, r3, #8
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d101      	bne.n	80109c0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80109bc:	2302      	movs	r3, #2
 80109be:	e0d2      	b.n	8010b66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2240      	movs	r2, #64	@ 0x40
 80109c4:	5c9b      	ldrb	r3, [r3, r2]
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	d101      	bne.n	80109ce <HAL_I2C_Master_Transmit_DMA+0x52>
 80109ca:	2302      	movs	r3, #2
 80109cc:	e0cb      	b.n	8010b66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2240      	movs	r2, #64	@ 0x40
 80109d2:	2101      	movs	r1, #1
 80109d4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2241      	movs	r2, #65	@ 0x41
 80109da:	2121      	movs	r1, #33	@ 0x21
 80109dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2242      	movs	r2, #66	@ 0x42
 80109e2:	2110      	movs	r1, #16
 80109e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2200      	movs	r2, #0
 80109ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2208      	movs	r2, #8
 80109f6:	18ba      	adds	r2, r7, r2
 80109f8:	8812      	ldrh	r2, [r2, #0]
 80109fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	4a5c      	ldr	r2, [pc, #368]	@ (8010b70 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010a00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	4a5b      	ldr	r2, [pc, #364]	@ (8010b74 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8010a06:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	2bff      	cmp	r3, #255	@ 0xff
 8010a10:	d906      	bls.n	8010a20 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	22ff      	movs	r2, #255	@ 0xff
 8010a16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010a18:	2380      	movs	r3, #128	@ 0x80
 8010a1a:	045b      	lsls	r3, r3, #17
 8010a1c:	617b      	str	r3, [r7, #20]
 8010a1e:	e007      	b.n	8010a30 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010a2a:	2380      	movs	r3, #128	@ 0x80
 8010a2c:	049b      	lsls	r3, r3, #18
 8010a2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d100      	bne.n	8010a3a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010a38:	e078      	b.n	8010b2c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d023      	beq.n	8010a8a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a46:	4a4c      	ldr	r2, [pc, #304]	@ (8010b78 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010a48:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a4e:	4a4b      	ldr	r2, [pc, #300]	@ (8010b7c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010a50:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a56:	2200      	movs	r2, #0
 8010a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a5e:	2200      	movs	r2, #0
 8010a60:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010a66:	6879      	ldr	r1, [r7, #4]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	3328      	adds	r3, #40	@ 0x28
 8010a6e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010a74:	2513      	movs	r5, #19
 8010a76:	197c      	adds	r4, r7, r5
 8010a78:	f7fe ff62 	bl	800f940 <HAL_DMA_Start_IT>
 8010a7c:	0003      	movs	r3, r0
 8010a7e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010a80:	197b      	adds	r3, r7, r5
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d13d      	bne.n	8010b04 <HAL_I2C_Master_Transmit_DMA+0x188>
 8010a88:	e013      	b.n	8010ab2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2241      	movs	r2, #65	@ 0x41
 8010a8e:	2120      	movs	r1, #32
 8010a90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2242      	movs	r2, #66	@ 0x42
 8010a96:	2100      	movs	r1, #0
 8010a98:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a9e:	2280      	movs	r2, #128	@ 0x80
 8010aa0:	431a      	orrs	r2, r3
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2240      	movs	r2, #64	@ 0x40
 8010aaa:	2100      	movs	r1, #0
 8010aac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e059      	b.n	8010b66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	697c      	ldr	r4, [r7, #20]
 8010aba:	230a      	movs	r3, #10
 8010abc:	18fb      	adds	r3, r7, r3
 8010abe:	8819      	ldrh	r1, [r3, #0]
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8010b80 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	0023      	movs	r3, r4
 8010ac8:	f001 ff60 	bl	801298c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ad6:	1ad3      	subs	r3, r2, r3
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2240      	movs	r2, #64	@ 0x40
 8010ae2:	2100      	movs	r1, #0
 8010ae4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2110      	movs	r1, #16
 8010aea:	0018      	movs	r0, r3
 8010aec:	f001 ff88 	bl	8012a00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2180      	movs	r1, #128	@ 0x80
 8010afc:	01c9      	lsls	r1, r1, #7
 8010afe:	430a      	orrs	r2, r1
 8010b00:	601a      	str	r2, [r3, #0]
 8010b02:	e02d      	b.n	8010b60 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2241      	movs	r2, #65	@ 0x41
 8010b08:	2120      	movs	r1, #32
 8010b0a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2242      	movs	r2, #66	@ 0x42
 8010b10:	2100      	movs	r1, #0
 8010b12:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b18:	2210      	movs	r2, #16
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2240      	movs	r2, #64	@ 0x40
 8010b24:	2100      	movs	r1, #0
 8010b26:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e01c      	b.n	8010b66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4a15      	ldr	r2, [pc, #84]	@ (8010b84 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010b30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	2380      	movs	r3, #128	@ 0x80
 8010b3a:	049c      	lsls	r4, r3, #18
 8010b3c:	230a      	movs	r3, #10
 8010b3e:	18fb      	adds	r3, r7, r3
 8010b40:	8819      	ldrh	r1, [r3, #0]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	4b0e      	ldr	r3, [pc, #56]	@ (8010b80 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	0023      	movs	r3, r4
 8010b4a:	f001 ff1f 	bl	801298c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2240      	movs	r2, #64	@ 0x40
 8010b52:	2100      	movs	r1, #0
 8010b54:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2101      	movs	r1, #1
 8010b5a:	0018      	movs	r0, r3
 8010b5c:	f001 ff50 	bl	8012a00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	e000      	b.n	8010b66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010b64:	2302      	movs	r3, #2
  }
}
 8010b66:	0018      	movs	r0, r3
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	b006      	add	sp, #24
 8010b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b6e:	46c0      	nop			@ (mov r8, r8)
 8010b70:	ffff0000 	.word	0xffff0000
 8010b74:	08011381 	.word	0x08011381
 8010b78:	08012339 	.word	0x08012339
 8010b7c:	08012479 	.word	0x08012479
 8010b80:	80002000 	.word	0x80002000
 8010b84:	08010f2d 	.word	0x08010f2d

08010b88 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010b88:	b5b0      	push	{r4, r5, r7, lr}
 8010b8a:	b088      	sub	sp, #32
 8010b8c:	af02      	add	r7, sp, #8
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	0008      	movs	r0, r1
 8010b92:	607a      	str	r2, [r7, #4]
 8010b94:	0019      	movs	r1, r3
 8010b96:	230a      	movs	r3, #10
 8010b98:	18fb      	adds	r3, r7, r3
 8010b9a:	1c02      	adds	r2, r0, #0
 8010b9c:	801a      	strh	r2, [r3, #0]
 8010b9e:	2308      	movs	r3, #8
 8010ba0:	18fb      	adds	r3, r7, r3
 8010ba2:	1c0a      	adds	r2, r1, #0
 8010ba4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2241      	movs	r2, #65	@ 0x41
 8010baa:	5c9b      	ldrb	r3, [r3, r2]
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	2b20      	cmp	r3, #32
 8010bb0:	d000      	beq.n	8010bb4 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010bb2:	e0dd      	b.n	8010d70 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	699a      	ldr	r2, [r3, #24]
 8010bba:	2380      	movs	r3, #128	@ 0x80
 8010bbc:	021b      	lsls	r3, r3, #8
 8010bbe:	401a      	ands	r2, r3
 8010bc0:	2380      	movs	r3, #128	@ 0x80
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d101      	bne.n	8010bcc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010bc8:	2302      	movs	r3, #2
 8010bca:	e0d2      	b.n	8010d72 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2240      	movs	r2, #64	@ 0x40
 8010bd0:	5c9b      	ldrb	r3, [r3, r2]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d101      	bne.n	8010bda <HAL_I2C_Master_Receive_DMA+0x52>
 8010bd6:	2302      	movs	r3, #2
 8010bd8:	e0cb      	b.n	8010d72 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2240      	movs	r2, #64	@ 0x40
 8010bde:	2101      	movs	r1, #1
 8010be0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2241      	movs	r2, #65	@ 0x41
 8010be6:	2122      	movs	r1, #34	@ 0x22
 8010be8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2242      	movs	r2, #66	@ 0x42
 8010bee:	2110      	movs	r1, #16
 8010bf0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2208      	movs	r2, #8
 8010c02:	18ba      	adds	r2, r7, r2
 8010c04:	8812      	ldrh	r2, [r2, #0]
 8010c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8010d7c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	4a5b      	ldr	r2, [pc, #364]	@ (8010d80 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010c12:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	2bff      	cmp	r3, #255	@ 0xff
 8010c1c:	d906      	bls.n	8010c2c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	22ff      	movs	r2, #255	@ 0xff
 8010c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010c24:	2380      	movs	r3, #128	@ 0x80
 8010c26:	045b      	lsls	r3, r3, #17
 8010c28:	617b      	str	r3, [r7, #20]
 8010c2a:	e007      	b.n	8010c3c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c30:	b29a      	uxth	r2, r3
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010c36:	2380      	movs	r3, #128	@ 0x80
 8010c38:	049b      	lsls	r3, r3, #18
 8010c3a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d100      	bne.n	8010c46 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010c44:	e078      	b.n	8010d38 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d023      	beq.n	8010c96 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c52:	4a4c      	ldr	r2, [pc, #304]	@ (8010d84 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010c54:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c5a:	4a4b      	ldr	r2, [pc, #300]	@ (8010d88 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010c5c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c62:	2200      	movs	r2, #0
 8010c64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	3324      	adds	r3, #36	@ 0x24
 8010c78:	0019      	movs	r1, r3
 8010c7a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010c80:	2513      	movs	r5, #19
 8010c82:	197c      	adds	r4, r7, r5
 8010c84:	f7fe fe5c 	bl	800f940 <HAL_DMA_Start_IT>
 8010c88:	0003      	movs	r3, r0
 8010c8a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010c8c:	197b      	adds	r3, r7, r5
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d13d      	bne.n	8010d10 <HAL_I2C_Master_Receive_DMA+0x188>
 8010c94:	e013      	b.n	8010cbe <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	2241      	movs	r2, #65	@ 0x41
 8010c9a:	2120      	movs	r1, #32
 8010c9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2242      	movs	r2, #66	@ 0x42
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010caa:	2280      	movs	r2, #128	@ 0x80
 8010cac:	431a      	orrs	r2, r3
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2240      	movs	r2, #64	@ 0x40
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e059      	b.n	8010d72 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	697c      	ldr	r4, [r7, #20]
 8010cc6:	230a      	movs	r3, #10
 8010cc8:	18fb      	adds	r3, r7, r3
 8010cca:	8819      	ldrh	r1, [r3, #0]
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	4b2f      	ldr	r3, [pc, #188]	@ (8010d8c <HAL_I2C_Master_Receive_DMA+0x204>)
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	0023      	movs	r3, r4
 8010cd4:	f001 fe5a 	bl	801298c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2240      	movs	r2, #64	@ 0x40
 8010cee:	2100      	movs	r1, #0
 8010cf0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2110      	movs	r1, #16
 8010cf6:	0018      	movs	r0, r3
 8010cf8:	f001 fe82 	bl	8012a00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2180      	movs	r1, #128	@ 0x80
 8010d08:	0209      	lsls	r1, r1, #8
 8010d0a:	430a      	orrs	r2, r1
 8010d0c:	601a      	str	r2, [r3, #0]
 8010d0e:	e02d      	b.n	8010d6c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2241      	movs	r2, #65	@ 0x41
 8010d14:	2120      	movs	r1, #32
 8010d16:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2242      	movs	r2, #66	@ 0x42
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d24:	2210      	movs	r2, #16
 8010d26:	431a      	orrs	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2240      	movs	r2, #64	@ 0x40
 8010d30:	2100      	movs	r1, #0
 8010d32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010d34:	2301      	movs	r3, #1
 8010d36:	e01c      	b.n	8010d72 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	4a15      	ldr	r2, [pc, #84]	@ (8010d90 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010d3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	2380      	movs	r3, #128	@ 0x80
 8010d46:	049c      	lsls	r4, r3, #18
 8010d48:	230a      	movs	r3, #10
 8010d4a:	18fb      	adds	r3, r7, r3
 8010d4c:	8819      	ldrh	r1, [r3, #0]
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	4b0e      	ldr	r3, [pc, #56]	@ (8010d8c <HAL_I2C_Master_Receive_DMA+0x204>)
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	0023      	movs	r3, r4
 8010d56:	f001 fe19 	bl	801298c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2240      	movs	r2, #64	@ 0x40
 8010d5e:	2100      	movs	r1, #0
 8010d60:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2101      	movs	r1, #1
 8010d66:	0018      	movs	r0, r3
 8010d68:	f001 fe4a 	bl	8012a00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	e000      	b.n	8010d72 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010d70:	2302      	movs	r3, #2
  }
}
 8010d72:	0018      	movs	r0, r3
 8010d74:	46bd      	mov	sp, r7
 8010d76:	b006      	add	sp, #24
 8010d78:	bdb0      	pop	{r4, r5, r7, pc}
 8010d7a:	46c0      	nop			@ (mov r8, r8)
 8010d7c:	ffff0000 	.word	0xffff0000
 8010d80:	08011381 	.word	0x08011381
 8010d84:	080123d9 	.word	0x080123d9
 8010d88:	08012479 	.word	0x08012479
 8010d8c:	80002400 	.word	0x80002400
 8010d90:	08010f2d 	.word	0x08010f2d

08010d94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	699b      	ldr	r3, [r3, #24]
 8010da2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d005      	beq.n	8010dc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	68f9      	ldr	r1, [r7, #12]
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	4798      	blx	r3
  }
}
 8010dc0:	46c0      	nop			@ (mov r8, r8)
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	b004      	add	sp, #16
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b086      	sub	sp, #24
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	699b      	ldr	r3, [r3, #24]
 8010dd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	2380      	movs	r3, #128	@ 0x80
 8010de4:	005b      	lsls	r3, r3, #1
 8010de6:	4013      	ands	r3, r2
 8010de8:	d00e      	beq.n	8010e08 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	2280      	movs	r2, #128	@ 0x80
 8010dee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010df0:	d00a      	beq.n	8010e08 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010df6:	2201      	movs	r2, #1
 8010df8:	431a      	orrs	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2280      	movs	r2, #128	@ 0x80
 8010e04:	0052      	lsls	r2, r2, #1
 8010e06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010e08:	697a      	ldr	r2, [r7, #20]
 8010e0a:	2380      	movs	r3, #128	@ 0x80
 8010e0c:	00db      	lsls	r3, r3, #3
 8010e0e:	4013      	ands	r3, r2
 8010e10:	d00e      	beq.n	8010e30 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	2280      	movs	r2, #128	@ 0x80
 8010e16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010e18:	d00a      	beq.n	8010e30 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e1e:	2208      	movs	r2, #8
 8010e20:	431a      	orrs	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2280      	movs	r2, #128	@ 0x80
 8010e2c:	00d2      	lsls	r2, r2, #3
 8010e2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010e30:	697a      	ldr	r2, [r7, #20]
 8010e32:	2380      	movs	r3, #128	@ 0x80
 8010e34:	009b      	lsls	r3, r3, #2
 8010e36:	4013      	ands	r3, r2
 8010e38:	d00e      	beq.n	8010e58 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	2280      	movs	r2, #128	@ 0x80
 8010e3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010e40:	d00a      	beq.n	8010e58 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e46:	2202      	movs	r2, #2
 8010e48:	431a      	orrs	r2, r3
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2280      	movs	r2, #128	@ 0x80
 8010e54:	0092      	lsls	r2, r2, #2
 8010e56:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e5c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	220b      	movs	r2, #11
 8010e62:	4013      	ands	r3, r2
 8010e64:	d005      	beq.n	8010e72 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	0011      	movs	r1, r2
 8010e6c:	0018      	movs	r0, r3
 8010e6e:	f001 f915 	bl	801209c <I2C_ITError>
  }
}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	46bd      	mov	sp, r7
 8010e76:	b006      	add	sp, #24
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b082      	sub	sp, #8
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010e82:	46c0      	nop			@ (mov r8, r8)
 8010e84:	46bd      	mov	sp, r7
 8010e86:	b002      	add	sp, #8
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010e92:	46c0      	nop			@ (mov r8, r8)
 8010e94:	46bd      	mov	sp, r7
 8010e96:	b002      	add	sp, #8
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b082      	sub	sp, #8
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010ea2:	46c0      	nop			@ (mov r8, r8)
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	b002      	add	sp, #8
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b082      	sub	sp, #8
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010eb2:	46c0      	nop			@ (mov r8, r8)
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	b002      	add	sp, #8
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b082      	sub	sp, #8
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
 8010ec2:	0008      	movs	r0, r1
 8010ec4:	0011      	movs	r1, r2
 8010ec6:	1cfb      	adds	r3, r7, #3
 8010ec8:	1c02      	adds	r2, r0, #0
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	003b      	movs	r3, r7
 8010ece:	1c0a      	adds	r2, r1, #0
 8010ed0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010ed2:	46c0      	nop			@ (mov r8, r8)
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	b002      	add	sp, #8
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b082      	sub	sp, #8
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010ee2:	46c0      	nop			@ (mov r8, r8)
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	b002      	add	sp, #8
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010ef2:	46c0      	nop			@ (mov r8, r8)
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	b002      	add	sp, #8
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b082      	sub	sp, #8
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010f02:	46c0      	nop			@ (mov r8, r8)
 8010f04:	46bd      	mov	sp, r7
 8010f06:	b002      	add	sp, #8
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010f12:	46c0      	nop			@ (mov r8, r8)
 8010f14:	46bd      	mov	sp, r7
 8010f16:	b002      	add	sp, #8
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b082      	sub	sp, #8
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010f22:	46c0      	nop			@ (mov r8, r8)
 8010f24:	46bd      	mov	sp, r7
 8010f26:	b002      	add	sp, #8
 8010f28:	bd80      	pop	{r7, pc}
	...

08010f2c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b089      	sub	sp, #36	@ 0x24
 8010f30:	af02      	add	r7, sp, #8
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2240      	movs	r2, #64	@ 0x40
 8010f40:	5c9b      	ldrb	r3, [r3, r2]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d101      	bne.n	8010f4a <I2C_Master_ISR_IT+0x1e>
 8010f46:	2302      	movs	r3, #2
 8010f48:	e113      	b.n	8011172 <I2C_Master_ISR_IT+0x246>
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2240      	movs	r2, #64	@ 0x40
 8010f4e:	2101      	movs	r1, #1
 8010f50:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	2210      	movs	r2, #16
 8010f56:	4013      	ands	r3, r2
 8010f58:	d012      	beq.n	8010f80 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2210      	movs	r2, #16
 8010f5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f60:	d00e      	beq.n	8010f80 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2210      	movs	r2, #16
 8010f68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f6e:	2204      	movs	r2, #4
 8010f70:	431a      	orrs	r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	0018      	movs	r0, r3
 8010f7a:	f001 f9ba 	bl	80122f2 <I2C_Flush_TXDR>
 8010f7e:	e0e5      	b.n	801114c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	2204      	movs	r2, #4
 8010f84:	4013      	ands	r3, r2
 8010f86:	d021      	beq.n	8010fcc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2204      	movs	r2, #4
 8010f8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010f8e:	d01d      	beq.n	8010fcc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2204      	movs	r2, #4
 8010f94:	4393      	bics	r3, r2
 8010f96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fa2:	b2d2      	uxtb	r2, r2
 8010fa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010faa:	1c5a      	adds	r2, r3, #1
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010fca:	e0bf      	b.n	801114c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	2202      	movs	r2, #2
 8010fd0:	4013      	ands	r3, r2
 8010fd2:	d01c      	beq.n	801100e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2202      	movs	r2, #2
 8010fd8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010fda:	d018      	beq.n	801100e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fe0:	781a      	ldrb	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fec:	1c5a      	adds	r2, r3, #1
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011002:	b29b      	uxth	r3, r3
 8011004:	3b01      	subs	r3, #1
 8011006:	b29a      	uxth	r2, r3
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801100c:	e09e      	b.n	801114c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	2280      	movs	r2, #128	@ 0x80
 8011012:	4013      	ands	r3, r2
 8011014:	d100      	bne.n	8011018 <I2C_Master_ISR_IT+0xec>
 8011016:	e069      	b.n	80110ec <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2240      	movs	r2, #64	@ 0x40
 801101c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801101e:	d065      	beq.n	80110ec <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011024:	b29b      	uxth	r3, r3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d04a      	beq.n	80110c0 <I2C_Master_ISR_IT+0x194>
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801102e:	2b00      	cmp	r3, #0
 8011030:	d146      	bne.n	80110c0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	b29a      	uxth	r2, r3
 801103a:	2112      	movs	r1, #18
 801103c:	187b      	adds	r3, r7, r1
 801103e:	0592      	lsls	r2, r2, #22
 8011040:	0d92      	lsrs	r2, r2, #22
 8011042:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011048:	b29b      	uxth	r3, r3
 801104a:	2bff      	cmp	r3, #255	@ 0xff
 801104c:	d910      	bls.n	8011070 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	22ff      	movs	r2, #255	@ 0xff
 8011052:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011058:	b2da      	uxtb	r2, r3
 801105a:	2380      	movs	r3, #128	@ 0x80
 801105c:	045c      	lsls	r4, r3, #17
 801105e:	187b      	adds	r3, r7, r1
 8011060:	8819      	ldrh	r1, [r3, #0]
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	2300      	movs	r3, #0
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	0023      	movs	r3, r4
 801106a:	f001 fc8f 	bl	801298c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801106e:	e03c      	b.n	80110ea <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011074:	b29a      	uxth	r2, r3
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801107e:	4a3f      	ldr	r2, [pc, #252]	@ (801117c <I2C_Master_ISR_IT+0x250>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d00e      	beq.n	80110a2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011088:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801108e:	2312      	movs	r3, #18
 8011090:	18fb      	adds	r3, r7, r3
 8011092:	8819      	ldrh	r1, [r3, #0]
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	2300      	movs	r3, #0
 8011098:	9300      	str	r3, [sp, #0]
 801109a:	0023      	movs	r3, r4
 801109c:	f001 fc76 	bl	801298c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110a0:	e023      	b.n	80110ea <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	2380      	movs	r3, #128	@ 0x80
 80110aa:	049c      	lsls	r4, r3, #18
 80110ac:	2312      	movs	r3, #18
 80110ae:	18fb      	adds	r3, r7, r3
 80110b0:	8819      	ldrh	r1, [r3, #0]
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	2300      	movs	r3, #0
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	0023      	movs	r3, r4
 80110ba:	f001 fc67 	bl	801298c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110be:	e014      	b.n	80110ea <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	2380      	movs	r3, #128	@ 0x80
 80110c8:	049b      	lsls	r3, r3, #18
 80110ca:	401a      	ands	r2, r3
 80110cc:	2380      	movs	r3, #128	@ 0x80
 80110ce:	049b      	lsls	r3, r3, #18
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d004      	beq.n	80110de <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	0018      	movs	r0, r3
 80110d8:	f000 fcf4 	bl	8011ac4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110dc:	e036      	b.n	801114c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2140      	movs	r1, #64	@ 0x40
 80110e2:	0018      	movs	r0, r3
 80110e4:	f000 ffda 	bl	801209c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110e8:	e030      	b.n	801114c <I2C_Master_ISR_IT+0x220>
 80110ea:	e02f      	b.n	801114c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	2240      	movs	r2, #64	@ 0x40
 80110f0:	4013      	ands	r3, r2
 80110f2:	d02b      	beq.n	801114c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2240      	movs	r2, #64	@ 0x40
 80110f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80110fa:	d027      	beq.n	801114c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011100:	b29b      	uxth	r3, r3
 8011102:	2b00      	cmp	r3, #0
 8011104:	d11d      	bne.n	8011142 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	685a      	ldr	r2, [r3, #4]
 801110c:	2380      	movs	r3, #128	@ 0x80
 801110e:	049b      	lsls	r3, r3, #18
 8011110:	401a      	ands	r2, r3
 8011112:	2380      	movs	r3, #128	@ 0x80
 8011114:	049b      	lsls	r3, r3, #18
 8011116:	429a      	cmp	r2, r3
 8011118:	d018      	beq.n	801114c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801111e:	4a17      	ldr	r2, [pc, #92]	@ (801117c <I2C_Master_ISR_IT+0x250>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d109      	bne.n	8011138 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	685a      	ldr	r2, [r3, #4]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2180      	movs	r1, #128	@ 0x80
 8011130:	01c9      	lsls	r1, r1, #7
 8011132:	430a      	orrs	r2, r1
 8011134:	605a      	str	r2, [r3, #4]
 8011136:	e009      	b.n	801114c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	0018      	movs	r0, r3
 801113c:	f000 fcc2 	bl	8011ac4 <I2C_ITMasterSeqCplt>
 8011140:	e004      	b.n	801114c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2140      	movs	r1, #64	@ 0x40
 8011146:	0018      	movs	r0, r3
 8011148:	f000 ffa8 	bl	801209c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2220      	movs	r2, #32
 8011150:	4013      	ands	r3, r2
 8011152:	d009      	beq.n	8011168 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2220      	movs	r2, #32
 8011158:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801115a:	d005      	beq.n	8011168 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	0011      	movs	r1, r2
 8011162:	0018      	movs	r0, r3
 8011164:	f000 fd54 	bl	8011c10 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2240      	movs	r2, #64	@ 0x40
 801116c:	2100      	movs	r1, #0
 801116e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	0018      	movs	r0, r3
 8011174:	46bd      	mov	sp, r7
 8011176:	b007      	add	sp, #28
 8011178:	bd90      	pop	{r4, r7, pc}
 801117a:	46c0      	nop			@ (mov r8, r8)
 801117c:	ffff0000 	.word	0xffff0000

08011180 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b086      	sub	sp, #24
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011190:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2240      	movs	r2, #64	@ 0x40
 801119a:	5c9b      	ldrb	r3, [r3, r2]
 801119c:	2b01      	cmp	r3, #1
 801119e:	d101      	bne.n	80111a4 <I2C_Slave_ISR_IT+0x24>
 80111a0:	2302      	movs	r3, #2
 80111a2:	e0e6      	b.n	8011372 <I2C_Slave_ISR_IT+0x1f2>
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2240      	movs	r2, #64	@ 0x40
 80111a8:	2101      	movs	r1, #1
 80111aa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	2220      	movs	r2, #32
 80111b0:	4013      	ands	r3, r2
 80111b2:	d009      	beq.n	80111c8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2220      	movs	r2, #32
 80111b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80111ba:	d005      	beq.n	80111c8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	0011      	movs	r1, r2
 80111c2:	0018      	movs	r0, r3
 80111c4:	f000 fdf2 	bl	8011dac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	2210      	movs	r2, #16
 80111cc:	4013      	ands	r3, r2
 80111ce:	d052      	beq.n	8011276 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2210      	movs	r2, #16
 80111d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80111d6:	d04e      	beq.n	8011276 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111dc:	b29b      	uxth	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d12d      	bne.n	801123e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2241      	movs	r2, #65	@ 0x41
 80111e6:	5c9b      	ldrb	r3, [r3, r2]
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	2b28      	cmp	r3, #40	@ 0x28
 80111ec:	d10b      	bne.n	8011206 <I2C_Slave_ISR_IT+0x86>
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	2380      	movs	r3, #128	@ 0x80
 80111f2:	049b      	lsls	r3, r3, #18
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d106      	bne.n	8011206 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80111f8:	693a      	ldr	r2, [r7, #16]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	0011      	movs	r1, r2
 80111fe:	0018      	movs	r0, r3
 8011200:	f000 fef4 	bl	8011fec <I2C_ITListenCplt>
 8011204:	e036      	b.n	8011274 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2241      	movs	r2, #65	@ 0x41
 801120a:	5c9b      	ldrb	r3, [r3, r2]
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b29      	cmp	r3, #41	@ 0x29
 8011210:	d110      	bne.n	8011234 <I2C_Slave_ISR_IT+0xb4>
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	4a59      	ldr	r2, [pc, #356]	@ (801137c <I2C_Slave_ISR_IT+0x1fc>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d00c      	beq.n	8011234 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2210      	movs	r2, #16
 8011220:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	0018      	movs	r0, r3
 8011226:	f001 f864 	bl	80122f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	0018      	movs	r0, r3
 801122e:	f000 fc8b 	bl	8011b48 <I2C_ITSlaveSeqCplt>
 8011232:	e01f      	b.n	8011274 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2210      	movs	r2, #16
 801123a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801123c:	e091      	b.n	8011362 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2210      	movs	r2, #16
 8011244:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801124a:	2204      	movs	r2, #4
 801124c:	431a      	orrs	r2, r3
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d005      	beq.n	8011264 <I2C_Slave_ISR_IT+0xe4>
 8011258:	697a      	ldr	r2, [r7, #20]
 801125a:	2380      	movs	r3, #128	@ 0x80
 801125c:	045b      	lsls	r3, r3, #17
 801125e:	429a      	cmp	r2, r3
 8011260:	d000      	beq.n	8011264 <I2C_Slave_ISR_IT+0xe4>
 8011262:	e07e      	b.n	8011362 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	0011      	movs	r1, r2
 801126c:	0018      	movs	r0, r3
 801126e:	f000 ff15 	bl	801209c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011272:	e076      	b.n	8011362 <I2C_Slave_ISR_IT+0x1e2>
 8011274:	e075      	b.n	8011362 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	2204      	movs	r2, #4
 801127a:	4013      	ands	r3, r2
 801127c:	d02f      	beq.n	80112de <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2204      	movs	r2, #4
 8011282:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011284:	d02b      	beq.n	80112de <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801128a:	b29b      	uxth	r3, r3
 801128c:	2b00      	cmp	r3, #0
 801128e:	d018      	beq.n	80112c2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129a:	b2d2      	uxtb	r2, r2
 801129c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a2:	1c5a      	adds	r2, r3, #1
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112ac:	3b01      	subs	r3, #1
 80112ae:	b29a      	uxth	r2, r3
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	3b01      	subs	r3, #1
 80112bc:	b29a      	uxth	r2, r3
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d14c      	bne.n	8011366 <I2C_Slave_ISR_IT+0x1e6>
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	4a2b      	ldr	r2, [pc, #172]	@ (801137c <I2C_Slave_ISR_IT+0x1fc>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d048      	beq.n	8011366 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	0018      	movs	r0, r3
 80112d8:	f000 fc36 	bl	8011b48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80112dc:	e043      	b.n	8011366 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2208      	movs	r2, #8
 80112e2:	4013      	ands	r3, r2
 80112e4:	d00a      	beq.n	80112fc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2208      	movs	r2, #8
 80112ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80112ec:	d006      	beq.n	80112fc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80112ee:	693a      	ldr	r2, [r7, #16]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	0011      	movs	r1, r2
 80112f4:	0018      	movs	r0, r3
 80112f6:	f000 fb41 	bl	801197c <I2C_ITAddrCplt>
 80112fa:	e035      	b.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	2202      	movs	r2, #2
 8011300:	4013      	ands	r3, r2
 8011302:	d031      	beq.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2202      	movs	r2, #2
 8011308:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801130a:	d02d      	beq.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011310:	b29b      	uxth	r3, r3
 8011312:	2b00      	cmp	r3, #0
 8011314:	d018      	beq.n	8011348 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131a:	781a      	ldrb	r2, [r3, #0]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011330:	b29b      	uxth	r3, r3
 8011332:	3b01      	subs	r3, #1
 8011334:	b29a      	uxth	r2, r3
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801133e:	3b01      	subs	r3, #1
 8011340:	b29a      	uxth	r2, r3
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011346:	e00f      	b.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	2380      	movs	r3, #128	@ 0x80
 801134c:	045b      	lsls	r3, r3, #17
 801134e:	429a      	cmp	r2, r3
 8011350:	d002      	beq.n	8011358 <I2C_Slave_ISR_IT+0x1d8>
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d107      	bne.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	0018      	movs	r0, r3
 801135c:	f000 fbf4 	bl	8011b48 <I2C_ITSlaveSeqCplt>
 8011360:	e002      	b.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8011362:	46c0      	nop			@ (mov r8, r8)
 8011364:	e000      	b.n	8011368 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8011366:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2240      	movs	r2, #64	@ 0x40
 801136c:	2100      	movs	r1, #0
 801136e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011370:	2300      	movs	r3, #0
}
 8011372:	0018      	movs	r0, r3
 8011374:	46bd      	mov	sp, r7
 8011376:	b006      	add	sp, #24
 8011378:	bd80      	pop	{r7, pc}
 801137a:	46c0      	nop			@ (mov r8, r8)
 801137c:	ffff0000 	.word	0xffff0000

08011380 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011380:	b590      	push	{r4, r7, lr}
 8011382:	b089      	sub	sp, #36	@ 0x24
 8011384:	af02      	add	r7, sp, #8
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2240      	movs	r2, #64	@ 0x40
 8011390:	5c9b      	ldrb	r3, [r3, r2]
 8011392:	2b01      	cmp	r3, #1
 8011394:	d101      	bne.n	801139a <I2C_Master_ISR_DMA+0x1a>
 8011396:	2302      	movs	r3, #2
 8011398:	e0e7      	b.n	801156a <I2C_Master_ISR_DMA+0x1ea>
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2240      	movs	r2, #64	@ 0x40
 801139e:	2101      	movs	r1, #1
 80113a0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	2210      	movs	r2, #16
 80113a6:	4013      	ands	r3, r2
 80113a8:	d017      	beq.n	80113da <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2210      	movs	r2, #16
 80113ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113b0:	d013      	beq.n	80113da <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2210      	movs	r2, #16
 80113b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113be:	2204      	movs	r2, #4
 80113c0:	431a      	orrs	r2, r3
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2120      	movs	r1, #32
 80113ca:	0018      	movs	r0, r3
 80113cc:	f001 fb18 	bl	8012a00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	0018      	movs	r0, r3
 80113d4:	f000 ff8d 	bl	80122f2 <I2C_Flush_TXDR>
 80113d8:	e0c2      	b.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2280      	movs	r2, #128	@ 0x80
 80113de:	4013      	ands	r3, r2
 80113e0:	d100      	bne.n	80113e4 <I2C_Master_ISR_DMA+0x64>
 80113e2:	e07c      	b.n	80114de <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2240      	movs	r2, #64	@ 0x40
 80113e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113ea:	d100      	bne.n	80113ee <I2C_Master_ISR_DMA+0x6e>
 80113ec:	e077      	b.n	80114de <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2140      	movs	r1, #64	@ 0x40
 80113fa:	438a      	bics	r2, r1
 80113fc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011402:	b29b      	uxth	r3, r3
 8011404:	2b00      	cmp	r3, #0
 8011406:	d055      	beq.n	80114b4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	b29a      	uxth	r2, r3
 8011410:	2312      	movs	r3, #18
 8011412:	18fb      	adds	r3, r7, r3
 8011414:	0592      	lsls	r2, r2, #22
 8011416:	0d92      	lsrs	r2, r2, #22
 8011418:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801141e:	b29b      	uxth	r3, r3
 8011420:	2bff      	cmp	r3, #255	@ 0xff
 8011422:	d906      	bls.n	8011432 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	22ff      	movs	r2, #255	@ 0xff
 8011428:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801142a:	2380      	movs	r3, #128	@ 0x80
 801142c:	045b      	lsls	r3, r3, #17
 801142e:	617b      	str	r3, [r7, #20]
 8011430:	e010      	b.n	8011454 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011436:	b29a      	uxth	r2, r3
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011440:	4a4c      	ldr	r2, [pc, #304]	@ (8011574 <I2C_Master_ISR_DMA+0x1f4>)
 8011442:	4293      	cmp	r3, r2
 8011444:	d003      	beq.n	801144e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801144a:	617b      	str	r3, [r7, #20]
 801144c:	e002      	b.n	8011454 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801144e:	2380      	movs	r3, #128	@ 0x80
 8011450:	049b      	lsls	r3, r3, #18
 8011452:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011458:	b2da      	uxtb	r2, r3
 801145a:	697c      	ldr	r4, [r7, #20]
 801145c:	2312      	movs	r3, #18
 801145e:	18fb      	adds	r3, r7, r3
 8011460:	8819      	ldrh	r1, [r3, #0]
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	2300      	movs	r3, #0
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	0023      	movs	r3, r4
 801146a:	f001 fa8f 	bl	801298c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011472:	b29a      	uxth	r2, r3
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	b29a      	uxth	r2, r3
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	2241      	movs	r2, #65	@ 0x41
 8011484:	5c9b      	ldrb	r3, [r3, r2]
 8011486:	b2db      	uxtb	r3, r3
 8011488:	2b22      	cmp	r3, #34	@ 0x22
 801148a:	d109      	bne.n	80114a0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2180      	movs	r1, #128	@ 0x80
 8011498:	0209      	lsls	r1, r1, #8
 801149a:	430a      	orrs	r2, r1
 801149c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801149e:	e05f      	b.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2180      	movs	r1, #128	@ 0x80
 80114ac:	01c9      	lsls	r1, r1, #7
 80114ae:	430a      	orrs	r2, r1
 80114b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114b2:	e055      	b.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	685a      	ldr	r2, [r3, #4]
 80114ba:	2380      	movs	r3, #128	@ 0x80
 80114bc:	049b      	lsls	r3, r3, #18
 80114be:	401a      	ands	r2, r3
 80114c0:	2380      	movs	r3, #128	@ 0x80
 80114c2:	049b      	lsls	r3, r3, #18
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d004      	beq.n	80114d2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	0018      	movs	r0, r3
 80114cc:	f000 fafa 	bl	8011ac4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80114d0:	e046      	b.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2140      	movs	r1, #64	@ 0x40
 80114d6:	0018      	movs	r0, r3
 80114d8:	f000 fde0 	bl	801209c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80114dc:	e040      	b.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	2240      	movs	r2, #64	@ 0x40
 80114e2:	4013      	ands	r3, r2
 80114e4:	d02c      	beq.n	8011540 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2240      	movs	r2, #64	@ 0x40
 80114ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114ec:	d028      	beq.n	8011540 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d11d      	bne.n	8011534 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	685a      	ldr	r2, [r3, #4]
 80114fe:	2380      	movs	r3, #128	@ 0x80
 8011500:	049b      	lsls	r3, r3, #18
 8011502:	401a      	ands	r2, r3
 8011504:	2380      	movs	r3, #128	@ 0x80
 8011506:	049b      	lsls	r3, r3, #18
 8011508:	429a      	cmp	r2, r3
 801150a:	d028      	beq.n	801155e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011510:	4a18      	ldr	r2, [pc, #96]	@ (8011574 <I2C_Master_ISR_DMA+0x1f4>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d109      	bne.n	801152a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	685a      	ldr	r2, [r3, #4]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2180      	movs	r1, #128	@ 0x80
 8011522:	01c9      	lsls	r1, r1, #7
 8011524:	430a      	orrs	r2, r1
 8011526:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011528:	e019      	b.n	801155e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	0018      	movs	r0, r3
 801152e:	f000 fac9 	bl	8011ac4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011532:	e014      	b.n	801155e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2140      	movs	r1, #64	@ 0x40
 8011538:	0018      	movs	r0, r3
 801153a:	f000 fdaf 	bl	801209c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801153e:	e00e      	b.n	801155e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2220      	movs	r2, #32
 8011544:	4013      	ands	r3, r2
 8011546:	d00b      	beq.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2220      	movs	r2, #32
 801154c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801154e:	d007      	beq.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	0011      	movs	r1, r2
 8011556:	0018      	movs	r0, r3
 8011558:	f000 fb5a 	bl	8011c10 <I2C_ITMasterCplt>
 801155c:	e000      	b.n	8011560 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801155e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2240      	movs	r2, #64	@ 0x40
 8011564:	2100      	movs	r1, #0
 8011566:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011568:	2300      	movs	r3, #0
}
 801156a:	0018      	movs	r0, r3
 801156c:	46bd      	mov	sp, r7
 801156e:	b007      	add	sp, #28
 8011570:	bd90      	pop	{r4, r7, pc}
 8011572:	46c0      	nop			@ (mov r8, r8)
 8011574:	ffff0000 	.word	0xffff0000

08011578 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011578:	b590      	push	{r4, r7, lr}
 801157a:	b089      	sub	sp, #36	@ 0x24
 801157c:	af02      	add	r7, sp, #8
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011584:	4b88      	ldr	r3, [pc, #544]	@ (80117a8 <I2C_Mem_ISR_DMA+0x230>)
 8011586:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2240      	movs	r2, #64	@ 0x40
 801158c:	5c9b      	ldrb	r3, [r3, r2]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d101      	bne.n	8011596 <I2C_Mem_ISR_DMA+0x1e>
 8011592:	2302      	movs	r3, #2
 8011594:	e104      	b.n	80117a0 <I2C_Mem_ISR_DMA+0x228>
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2240      	movs	r2, #64	@ 0x40
 801159a:	2101      	movs	r1, #1
 801159c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	2210      	movs	r2, #16
 80115a2:	4013      	ands	r3, r2
 80115a4:	d017      	beq.n	80115d6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2210      	movs	r2, #16
 80115aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115ac:	d013      	beq.n	80115d6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2210      	movs	r2, #16
 80115b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115ba:	2204      	movs	r2, #4
 80115bc:	431a      	orrs	r2, r3
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2120      	movs	r1, #32
 80115c6:	0018      	movs	r0, r3
 80115c8:	f001 fa1a 	bl	8012a00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	0018      	movs	r0, r3
 80115d0:	f000 fe8f 	bl	80122f2 <I2C_Flush_TXDR>
 80115d4:	e0df      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	2202      	movs	r2, #2
 80115da:	4013      	ands	r3, r2
 80115dc:	d00d      	beq.n	80115fa <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2202      	movs	r2, #2
 80115e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115e4:	d009      	beq.n	80115fa <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80115ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2201      	movs	r2, #1
 80115f4:	4252      	negs	r2, r2
 80115f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80115f8:	e0cd      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	2280      	movs	r2, #128	@ 0x80
 80115fe:	4013      	ands	r3, r2
 8011600:	d05e      	beq.n	80116c0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2240      	movs	r2, #64	@ 0x40
 8011606:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011608:	d05a      	beq.n	80116c0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2110      	movs	r1, #16
 801160e:	0018      	movs	r0, r3
 8011610:	f001 f9f6 	bl	8012a00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011618:	b29b      	uxth	r3, r3
 801161a:	2b00      	cmp	r3, #0
 801161c:	d04a      	beq.n	80116b4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011622:	b29b      	uxth	r3, r3
 8011624:	2bff      	cmp	r3, #255	@ 0xff
 8011626:	d910      	bls.n	801164a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	22ff      	movs	r2, #255	@ 0xff
 801162c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011632:	b299      	uxth	r1, r3
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011638:	b2da      	uxtb	r2, r3
 801163a:	2380      	movs	r3, #128	@ 0x80
 801163c:	045b      	lsls	r3, r3, #17
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	2400      	movs	r4, #0
 8011642:	9400      	str	r4, [sp, #0]
 8011644:	f001 f9a2 	bl	801298c <I2C_TransferConfig>
 8011648:	e011      	b.n	801166e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801164e:	b29a      	uxth	r2, r3
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011658:	b299      	uxth	r1, r3
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801165e:	b2da      	uxtb	r2, r3
 8011660:	2380      	movs	r3, #128	@ 0x80
 8011662:	049b      	lsls	r3, r3, #18
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	2400      	movs	r4, #0
 8011668:	9400      	str	r4, [sp, #0]
 801166a:	f001 f98f 	bl	801298c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011672:	b29a      	uxth	r2, r3
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011678:	1ad3      	subs	r3, r2, r3
 801167a:	b29a      	uxth	r2, r3
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2241      	movs	r2, #65	@ 0x41
 8011684:	5c9b      	ldrb	r3, [r3, r2]
 8011686:	b2db      	uxtb	r3, r3
 8011688:	2b22      	cmp	r3, #34	@ 0x22
 801168a:	d109      	bne.n	80116a0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2180      	movs	r1, #128	@ 0x80
 8011698:	0209      	lsls	r1, r1, #8
 801169a:	430a      	orrs	r2, r1
 801169c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801169e:	e07a      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2180      	movs	r1, #128	@ 0x80
 80116ac:	01c9      	lsls	r1, r1, #7
 80116ae:	430a      	orrs	r2, r1
 80116b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80116b2:	e070      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2140      	movs	r1, #64	@ 0x40
 80116b8:	0018      	movs	r0, r3
 80116ba:	f000 fcef 	bl	801209c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80116be:	e06a      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2240      	movs	r2, #64	@ 0x40
 80116c4:	4013      	ands	r3, r2
 80116c6:	d058      	beq.n	801177a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2240      	movs	r2, #64	@ 0x40
 80116cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80116ce:	d054      	beq.n	801177a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2241      	movs	r2, #65	@ 0x41
 80116d4:	5c9b      	ldrb	r3, [r3, r2]
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b22      	cmp	r3, #34	@ 0x22
 80116da:	d101      	bne.n	80116e0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80116dc:	4b33      	ldr	r3, [pc, #204]	@ (80117ac <I2C_Mem_ISR_DMA+0x234>)
 80116de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	2bff      	cmp	r3, #255	@ 0xff
 80116e8:	d911      	bls.n	801170e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	22ff      	movs	r2, #255	@ 0xff
 80116ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116f4:	b299      	uxth	r1, r3
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116fa:	b2da      	uxtb	r2, r3
 80116fc:	2380      	movs	r3, #128	@ 0x80
 80116fe:	045c      	lsls	r4, r3, #17
 8011700:	68f8      	ldr	r0, [r7, #12]
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	0023      	movs	r3, r4
 8011708:	f001 f940 	bl	801298c <I2C_TransferConfig>
 801170c:	e012      	b.n	8011734 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011712:	b29a      	uxth	r2, r3
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801171c:	b299      	uxth	r1, r3
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011722:	b2da      	uxtb	r2, r3
 8011724:	2380      	movs	r3, #128	@ 0x80
 8011726:	049c      	lsls	r4, r3, #18
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	9300      	str	r3, [sp, #0]
 801172e:	0023      	movs	r3, r4
 8011730:	f001 f92c 	bl	801298c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011738:	b29a      	uxth	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	b29a      	uxth	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2241      	movs	r2, #65	@ 0x41
 801174a:	5c9b      	ldrb	r3, [r3, r2]
 801174c:	b2db      	uxtb	r3, r3
 801174e:	2b22      	cmp	r3, #34	@ 0x22
 8011750:	d109      	bne.n	8011766 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2180      	movs	r1, #128	@ 0x80
 801175e:	0209      	lsls	r1, r1, #8
 8011760:	430a      	orrs	r2, r1
 8011762:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011764:	e017      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2180      	movs	r1, #128	@ 0x80
 8011772:	01c9      	lsls	r1, r1, #7
 8011774:	430a      	orrs	r2, r1
 8011776:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011778:	e00d      	b.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	2220      	movs	r2, #32
 801177e:	4013      	ands	r3, r2
 8011780:	d009      	beq.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2220      	movs	r2, #32
 8011786:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011788:	d005      	beq.n	8011796 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	0011      	movs	r1, r2
 8011790:	0018      	movs	r0, r3
 8011792:	f000 fa3d 	bl	8011c10 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2240      	movs	r2, #64	@ 0x40
 801179a:	2100      	movs	r1, #0
 801179c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801179e:	2300      	movs	r3, #0
}
 80117a0:	0018      	movs	r0, r3
 80117a2:	46bd      	mov	sp, r7
 80117a4:	b007      	add	sp, #28
 80117a6:	bd90      	pop	{r4, r7, pc}
 80117a8:	80002000 	.word	0x80002000
 80117ac:	80002400 	.word	0x80002400

080117b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b088      	sub	sp, #32
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80117c2:	2300      	movs	r3, #0
 80117c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2240      	movs	r2, #64	@ 0x40
 80117ca:	5c9b      	ldrb	r3, [r3, r2]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d101      	bne.n	80117d4 <I2C_Slave_ISR_DMA+0x24>
 80117d0:	2302      	movs	r3, #2
 80117d2:	e0cd      	b.n	8011970 <I2C_Slave_ISR_DMA+0x1c0>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2240      	movs	r2, #64	@ 0x40
 80117d8:	2101      	movs	r1, #1
 80117da:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	2220      	movs	r2, #32
 80117e0:	4013      	ands	r3, r2
 80117e2:	d009      	beq.n	80117f8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2220      	movs	r2, #32
 80117e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117ea:	d005      	beq.n	80117f8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	0011      	movs	r1, r2
 80117f2:	0018      	movs	r0, r3
 80117f4:	f000 fada 	bl	8011dac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	2210      	movs	r2, #16
 80117fc:	4013      	ands	r3, r2
 80117fe:	d100      	bne.n	8011802 <I2C_Slave_ISR_DMA+0x52>
 8011800:	e0a3      	b.n	801194a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2210      	movs	r2, #16
 8011806:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011808:	d100      	bne.n	801180c <I2C_Slave_ISR_DMA+0x5c>
 801180a:	e09e      	b.n	801194a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	2380      	movs	r3, #128	@ 0x80
 8011810:	01db      	lsls	r3, r3, #7
 8011812:	4013      	ands	r3, r2
 8011814:	d105      	bne.n	8011822 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	2380      	movs	r3, #128	@ 0x80
 801181a:	021b      	lsls	r3, r3, #8
 801181c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801181e:	d100      	bne.n	8011822 <I2C_Slave_ISR_DMA+0x72>
 8011820:	e08c      	b.n	801193c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00c      	beq.n	8011844 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	2380      	movs	r3, #128	@ 0x80
 801182e:	021b      	lsls	r3, r3, #8
 8011830:	4013      	ands	r3, r2
 8011832:	d007      	beq.n	8011844 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d101      	bne.n	8011844 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011840:	2301      	movs	r3, #1
 8011842:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00c      	beq.n	8011866 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	2380      	movs	r3, #128	@ 0x80
 8011850:	01db      	lsls	r3, r3, #7
 8011852:	4013      	ands	r3, r2
 8011854:	d007      	beq.n	8011866 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d101      	bne.n	8011866 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011862:	2301      	movs	r3, #1
 8011864:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d12d      	bne.n	80118c8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2241      	movs	r2, #65	@ 0x41
 8011870:	5c9b      	ldrb	r3, [r3, r2]
 8011872:	b2db      	uxtb	r3, r3
 8011874:	2b28      	cmp	r3, #40	@ 0x28
 8011876:	d10b      	bne.n	8011890 <I2C_Slave_ISR_DMA+0xe0>
 8011878:	69ba      	ldr	r2, [r7, #24]
 801187a:	2380      	movs	r3, #128	@ 0x80
 801187c:	049b      	lsls	r3, r3, #18
 801187e:	429a      	cmp	r2, r3
 8011880:	d106      	bne.n	8011890 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011882:	68ba      	ldr	r2, [r7, #8]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	0011      	movs	r1, r2
 8011888:	0018      	movs	r0, r3
 801188a:	f000 fbaf 	bl	8011fec <I2C_ITListenCplt>
 801188e:	e054      	b.n	801193a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2241      	movs	r2, #65	@ 0x41
 8011894:	5c9b      	ldrb	r3, [r3, r2]
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b29      	cmp	r3, #41	@ 0x29
 801189a:	d110      	bne.n	80118be <I2C_Slave_ISR_DMA+0x10e>
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	4a36      	ldr	r2, [pc, #216]	@ (8011978 <I2C_Slave_ISR_DMA+0x1c8>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d00c      	beq.n	80118be <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2210      	movs	r2, #16
 80118aa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	0018      	movs	r0, r3
 80118b0:	f000 fd1f 	bl	80122f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	0018      	movs	r0, r3
 80118b8:	f000 f946 	bl	8011b48 <I2C_ITSlaveSeqCplt>
 80118bc:	e03d      	b.n	801193a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2210      	movs	r2, #16
 80118c4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80118c6:	e03e      	b.n	8011946 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2210      	movs	r2, #16
 80118ce:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118d4:	2204      	movs	r2, #4
 80118d6:	431a      	orrs	r2, r3
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80118dc:	2317      	movs	r3, #23
 80118de:	18fb      	adds	r3, r7, r3
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	2141      	movs	r1, #65	@ 0x41
 80118e4:	5c52      	ldrb	r2, [r2, r1]
 80118e6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d004      	beq.n	80118f8 <I2C_Slave_ISR_DMA+0x148>
 80118ee:	69ba      	ldr	r2, [r7, #24]
 80118f0:	2380      	movs	r3, #128	@ 0x80
 80118f2:	045b      	lsls	r3, r3, #17
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d126      	bne.n	8011946 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80118f8:	2217      	movs	r2, #23
 80118fa:	18bb      	adds	r3, r7, r2
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b21      	cmp	r3, #33	@ 0x21
 8011900:	d003      	beq.n	801190a <I2C_Slave_ISR_DMA+0x15a>
 8011902:	18bb      	adds	r3, r7, r2
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	2b29      	cmp	r3, #41	@ 0x29
 8011908:	d103      	bne.n	8011912 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2221      	movs	r2, #33	@ 0x21
 801190e:	631a      	str	r2, [r3, #48]	@ 0x30
 8011910:	e00b      	b.n	801192a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011912:	2217      	movs	r2, #23
 8011914:	18bb      	adds	r3, r7, r2
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	2b22      	cmp	r3, #34	@ 0x22
 801191a:	d003      	beq.n	8011924 <I2C_Slave_ISR_DMA+0x174>
 801191c:	18bb      	adds	r3, r7, r2
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	2b2a      	cmp	r3, #42	@ 0x2a
 8011922:	d102      	bne.n	801192a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	2222      	movs	r2, #34	@ 0x22
 8011928:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	0011      	movs	r1, r2
 8011932:	0018      	movs	r0, r3
 8011934:	f000 fbb2 	bl	801209c <I2C_ITError>
      if (treatdmanack == 1U)
 8011938:	e005      	b.n	8011946 <I2C_Slave_ISR_DMA+0x196>
 801193a:	e004      	b.n	8011946 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2210      	movs	r2, #16
 8011942:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011944:	e00f      	b.n	8011966 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8011946:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011948:	e00d      	b.n	8011966 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2208      	movs	r2, #8
 801194e:	4013      	ands	r3, r2
 8011950:	d009      	beq.n	8011966 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2208      	movs	r2, #8
 8011956:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011958:	d005      	beq.n	8011966 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	0011      	movs	r1, r2
 8011960:	0018      	movs	r0, r3
 8011962:	f000 f80b 	bl	801197c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2240      	movs	r2, #64	@ 0x40
 801196a:	2100      	movs	r1, #0
 801196c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	0018      	movs	r0, r3
 8011972:	46bd      	mov	sp, r7
 8011974:	b008      	add	sp, #32
 8011976:	bd80      	pop	{r7, pc}
 8011978:	ffff0000 	.word	0xffff0000

0801197c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801197c:	b5b0      	push	{r4, r5, r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2241      	movs	r2, #65	@ 0x41
 801198a:	5c9b      	ldrb	r3, [r3, r2]
 801198c:	b2db      	uxtb	r3, r3
 801198e:	001a      	movs	r2, r3
 8011990:	2328      	movs	r3, #40	@ 0x28
 8011992:	4013      	ands	r3, r2
 8011994:	2b28      	cmp	r3, #40	@ 0x28
 8011996:	d000      	beq.n	801199a <I2C_ITAddrCplt+0x1e>
 8011998:	e088      	b.n	8011aac <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	699b      	ldr	r3, [r3, #24]
 80119a0:	0c1b      	lsrs	r3, r3, #16
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	250f      	movs	r5, #15
 80119a6:	197b      	adds	r3, r7, r5
 80119a8:	2101      	movs	r1, #1
 80119aa:	400a      	ands	r2, r1
 80119ac:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	699b      	ldr	r3, [r3, #24]
 80119b4:	0c1b      	lsrs	r3, r3, #16
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	200c      	movs	r0, #12
 80119ba:	183b      	adds	r3, r7, r0
 80119bc:	21fe      	movs	r1, #254	@ 0xfe
 80119be:	400a      	ands	r2, r1
 80119c0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	240a      	movs	r4, #10
 80119cc:	193b      	adds	r3, r7, r4
 80119ce:	0592      	lsls	r2, r2, #22
 80119d0:	0d92      	lsrs	r2, r2, #22
 80119d2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	68db      	ldr	r3, [r3, #12]
 80119da:	b29a      	uxth	r2, r3
 80119dc:	2308      	movs	r3, #8
 80119de:	18fb      	adds	r3, r7, r3
 80119e0:	21fe      	movs	r1, #254	@ 0xfe
 80119e2:	400a      	ands	r2, r1
 80119e4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	68db      	ldr	r3, [r3, #12]
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d148      	bne.n	8011a80 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80119ee:	0021      	movs	r1, r4
 80119f0:	187b      	adds	r3, r7, r1
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	09db      	lsrs	r3, r3, #7
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	183b      	adds	r3, r7, r0
 80119fa:	881b      	ldrh	r3, [r3, #0]
 80119fc:	4053      	eors	r3, r2
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	001a      	movs	r2, r3
 8011a02:	2306      	movs	r3, #6
 8011a04:	4013      	ands	r3, r2
 8011a06:	d120      	bne.n	8011a4a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011a08:	183b      	adds	r3, r7, r0
 8011a0a:	187a      	adds	r2, r7, r1
 8011a0c:	8812      	ldrh	r2, [r2, #0]
 8011a0e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a14:	1c5a      	adds	r2, r3, #1
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	d14c      	bne.n	8011abc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2200      	movs	r2, #0
 8011a26:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2208      	movs	r2, #8
 8011a2e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2240      	movs	r2, #64	@ 0x40
 8011a34:	2100      	movs	r1, #0
 8011a36:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a38:	183b      	adds	r3, r7, r0
 8011a3a:	881a      	ldrh	r2, [r3, #0]
 8011a3c:	197b      	adds	r3, r7, r5
 8011a3e:	7819      	ldrb	r1, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	0018      	movs	r0, r3
 8011a44:	f7ff fa39 	bl	8010eba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011a48:	e038      	b.n	8011abc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011a4a:	240c      	movs	r4, #12
 8011a4c:	193b      	adds	r3, r7, r4
 8011a4e:	2208      	movs	r2, #8
 8011a50:	18ba      	adds	r2, r7, r2
 8011a52:	8812      	ldrh	r2, [r2, #0]
 8011a54:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a56:	2380      	movs	r3, #128	@ 0x80
 8011a58:	021a      	lsls	r2, r3, #8
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	0011      	movs	r1, r2
 8011a5e:	0018      	movs	r0, r3
 8011a60:	f001 f85c 	bl	8012b1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2240      	movs	r2, #64	@ 0x40
 8011a68:	2100      	movs	r1, #0
 8011a6a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a6c:	193b      	adds	r3, r7, r4
 8011a6e:	881a      	ldrh	r2, [r3, #0]
 8011a70:	230f      	movs	r3, #15
 8011a72:	18fb      	adds	r3, r7, r3
 8011a74:	7819      	ldrb	r1, [r3, #0]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	0018      	movs	r0, r3
 8011a7a:	f7ff fa1e 	bl	8010eba <HAL_I2C_AddrCallback>
}
 8011a7e:	e01d      	b.n	8011abc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a80:	2380      	movs	r3, #128	@ 0x80
 8011a82:	021a      	lsls	r2, r3, #8
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	0011      	movs	r1, r2
 8011a88:	0018      	movs	r0, r3
 8011a8a:	f001 f847 	bl	8012b1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2240      	movs	r2, #64	@ 0x40
 8011a92:	2100      	movs	r1, #0
 8011a94:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a96:	230c      	movs	r3, #12
 8011a98:	18fb      	adds	r3, r7, r3
 8011a9a:	881a      	ldrh	r2, [r3, #0]
 8011a9c:	230f      	movs	r3, #15
 8011a9e:	18fb      	adds	r3, r7, r3
 8011aa0:	7819      	ldrb	r1, [r3, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	0018      	movs	r0, r3
 8011aa6:	f7ff fa08 	bl	8010eba <HAL_I2C_AddrCallback>
}
 8011aaa:	e007      	b.n	8011abc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2208      	movs	r2, #8
 8011ab2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2240      	movs	r2, #64	@ 0x40
 8011ab8:	2100      	movs	r1, #0
 8011aba:	5499      	strb	r1, [r3, r2]
}
 8011abc:	46c0      	nop			@ (mov r8, r8)
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	b004      	add	sp, #16
 8011ac2:	bdb0      	pop	{r4, r5, r7, pc}

08011ac4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2242      	movs	r2, #66	@ 0x42
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2241      	movs	r2, #65	@ 0x41
 8011ad8:	5c9b      	ldrb	r3, [r3, r2]
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	2b21      	cmp	r3, #33	@ 0x21
 8011ade:	d117      	bne.n	8011b10 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2241      	movs	r2, #65	@ 0x41
 8011ae4:	2120      	movs	r1, #32
 8011ae6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2211      	movs	r2, #17
 8011aec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2101      	movs	r1, #1
 8011af8:	0018      	movs	r0, r3
 8011afa:	f001 f80f 	bl	8012b1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2240      	movs	r2, #64	@ 0x40
 8011b02:	2100      	movs	r1, #0
 8011b04:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	0018      	movs	r0, r3
 8011b0a:	f7ff f9b6 	bl	8010e7a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011b0e:	e016      	b.n	8011b3e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2241      	movs	r2, #65	@ 0x41
 8011b14:	2120      	movs	r1, #32
 8011b16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2212      	movs	r2, #18
 8011b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2102      	movs	r1, #2
 8011b28:	0018      	movs	r0, r3
 8011b2a:	f000 fff7 	bl	8012b1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2240      	movs	r2, #64	@ 0x40
 8011b32:	2100      	movs	r1, #0
 8011b34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	0018      	movs	r0, r3
 8011b3a:	f7ff f9a6 	bl	8010e8a <HAL_I2C_MasterRxCpltCallback>
}
 8011b3e:	46c0      	nop			@ (mov r8, r8)
 8011b40:	46bd      	mov	sp, r7
 8011b42:	b002      	add	sp, #8
 8011b44:	bd80      	pop	{r7, pc}
	...

08011b48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2242      	movs	r2, #66	@ 0x42
 8011b5c:	2100      	movs	r1, #0
 8011b5e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011b60:	68fa      	ldr	r2, [r7, #12]
 8011b62:	2380      	movs	r3, #128	@ 0x80
 8011b64:	01db      	lsls	r3, r3, #7
 8011b66:	4013      	ands	r3, r2
 8011b68:	d008      	beq.n	8011b7c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4924      	ldr	r1, [pc, #144]	@ (8011c08 <I2C_ITSlaveSeqCplt+0xc0>)
 8011b76:	400a      	ands	r2, r1
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	e00c      	b.n	8011b96 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	2380      	movs	r3, #128	@ 0x80
 8011b80:	021b      	lsls	r3, r3, #8
 8011b82:	4013      	ands	r3, r2
 8011b84:	d007      	beq.n	8011b96 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	491e      	ldr	r1, [pc, #120]	@ (8011c0c <I2C_ITSlaveSeqCplt+0xc4>)
 8011b92:	400a      	ands	r2, r1
 8011b94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2241      	movs	r2, #65	@ 0x41
 8011b9a:	5c9b      	ldrb	r3, [r3, r2]
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b29      	cmp	r3, #41	@ 0x29
 8011ba0:	d114      	bne.n	8011bcc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2241      	movs	r2, #65	@ 0x41
 8011ba6:	2128      	movs	r1, #40	@ 0x28
 8011ba8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2221      	movs	r2, #33	@ 0x21
 8011bae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2101      	movs	r1, #1
 8011bb4:	0018      	movs	r0, r3
 8011bb6:	f000 ffb1 	bl	8012b1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2240      	movs	r2, #64	@ 0x40
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	0018      	movs	r0, r3
 8011bc6:	f7ff f968 	bl	8010e9a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011bca:	e019      	b.n	8011c00 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2241      	movs	r2, #65	@ 0x41
 8011bd0:	5c9b      	ldrb	r3, [r3, r2]
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bd6:	d113      	bne.n	8011c00 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2241      	movs	r2, #65	@ 0x41
 8011bdc:	2128      	movs	r1, #40	@ 0x28
 8011bde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2222      	movs	r2, #34	@ 0x22
 8011be4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2102      	movs	r1, #2
 8011bea:	0018      	movs	r0, r3
 8011bec:	f000 ff96 	bl	8012b1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2240      	movs	r2, #64	@ 0x40
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	0018      	movs	r0, r3
 8011bfc:	f7ff f955 	bl	8010eaa <HAL_I2C_SlaveRxCpltCallback>
}
 8011c00:	46c0      	nop			@ (mov r8, r8)
 8011c02:	46bd      	mov	sp, r7
 8011c04:	b004      	add	sp, #16
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	ffffbfff 	.word	0xffffbfff
 8011c0c:	ffff7fff 	.word	0xffff7fff

08011c10 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	2220      	movs	r2, #32
 8011c24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2241      	movs	r2, #65	@ 0x41
 8011c2a:	5c9b      	ldrb	r3, [r3, r2]
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	2b21      	cmp	r3, #33	@ 0x21
 8011c30:	d108      	bne.n	8011c44 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2101      	movs	r1, #1
 8011c36:	0018      	movs	r0, r3
 8011c38:	f000 ff70 	bl	8012b1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2211      	movs	r2, #17
 8011c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c42:	e00d      	b.n	8011c60 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2241      	movs	r2, #65	@ 0x41
 8011c48:	5c9b      	ldrb	r3, [r3, r2]
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	2b22      	cmp	r3, #34	@ 0x22
 8011c4e:	d107      	bne.n	8011c60 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2102      	movs	r1, #2
 8011c54:	0018      	movs	r0, r3
 8011c56:	f000 ff61 	bl	8012b1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2212      	movs	r2, #18
 8011c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	685a      	ldr	r2, [r3, #4]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	494e      	ldr	r1, [pc, #312]	@ (8011da4 <I2C_ITMasterCplt+0x194>)
 8011c6c:	400a      	ands	r2, r1
 8011c6e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4a4b      	ldr	r2, [pc, #300]	@ (8011da8 <I2C_ITMasterCplt+0x198>)
 8011c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	2210      	movs	r2, #16
 8011c80:	4013      	ands	r3, r2
 8011c82:	d009      	beq.n	8011c98 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2210      	movs	r2, #16
 8011c8a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c90:	2204      	movs	r2, #4
 8011c92:	431a      	orrs	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2241      	movs	r2, #65	@ 0x41
 8011c9c:	5c9b      	ldrb	r3, [r3, r2]
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	2b60      	cmp	r3, #96	@ 0x60
 8011ca2:	d109      	bne.n	8011cb8 <I2C_ITMasterCplt+0xa8>
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	2204      	movs	r2, #4
 8011ca8:	4013      	ands	r3, r2
 8011caa:	d005      	beq.n	8011cb8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	0018      	movs	r0, r3
 8011cbc:	f000 fb19 	bl	80122f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cc4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2241      	movs	r2, #65	@ 0x41
 8011cca:	5c9b      	ldrb	r3, [r3, r2]
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	2b60      	cmp	r3, #96	@ 0x60
 8011cd0:	d002      	beq.n	8011cd8 <I2C_ITMasterCplt+0xc8>
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d007      	beq.n	8011ce8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	0011      	movs	r1, r2
 8011ce0:	0018      	movs	r0, r3
 8011ce2:	f000 f9db 	bl	801209c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011ce6:	e058      	b.n	8011d9a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2241      	movs	r2, #65	@ 0x41
 8011cec:	5c9b      	ldrb	r3, [r3, r2]
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	2b21      	cmp	r3, #33	@ 0x21
 8011cf2:	d126      	bne.n	8011d42 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2241      	movs	r2, #65	@ 0x41
 8011cf8:	2120      	movs	r1, #32
 8011cfa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2242      	movs	r2, #66	@ 0x42
 8011d06:	5c9b      	ldrb	r3, [r3, r2]
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	2b40      	cmp	r3, #64	@ 0x40
 8011d0c:	d10c      	bne.n	8011d28 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2242      	movs	r2, #66	@ 0x42
 8011d12:	2100      	movs	r1, #0
 8011d14:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2240      	movs	r2, #64	@ 0x40
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	0018      	movs	r0, r3
 8011d22:	f7ff f8e2 	bl	8010eea <HAL_I2C_MemTxCpltCallback>
}
 8011d26:	e038      	b.n	8011d9a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2242      	movs	r2, #66	@ 0x42
 8011d2c:	2100      	movs	r1, #0
 8011d2e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2240      	movs	r2, #64	@ 0x40
 8011d34:	2100      	movs	r1, #0
 8011d36:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	0018      	movs	r0, r3
 8011d3c:	f7ff f89d 	bl	8010e7a <HAL_I2C_MasterTxCpltCallback>
}
 8011d40:	e02b      	b.n	8011d9a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2241      	movs	r2, #65	@ 0x41
 8011d46:	5c9b      	ldrb	r3, [r3, r2]
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	2b22      	cmp	r3, #34	@ 0x22
 8011d4c:	d125      	bne.n	8011d9a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2241      	movs	r2, #65	@ 0x41
 8011d52:	2120      	movs	r1, #32
 8011d54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2242      	movs	r2, #66	@ 0x42
 8011d60:	5c9b      	ldrb	r3, [r3, r2]
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	2b40      	cmp	r3, #64	@ 0x40
 8011d66:	d10c      	bne.n	8011d82 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2242      	movs	r2, #66	@ 0x42
 8011d6c:	2100      	movs	r1, #0
 8011d6e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2240      	movs	r2, #64	@ 0x40
 8011d74:	2100      	movs	r1, #0
 8011d76:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	0018      	movs	r0, r3
 8011d7c:	f7ff f8bd 	bl	8010efa <HAL_I2C_MemRxCpltCallback>
}
 8011d80:	e00b      	b.n	8011d9a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2242      	movs	r2, #66	@ 0x42
 8011d86:	2100      	movs	r1, #0
 8011d88:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2240      	movs	r2, #64	@ 0x40
 8011d8e:	2100      	movs	r1, #0
 8011d90:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	0018      	movs	r0, r3
 8011d96:	f7ff f878 	bl	8010e8a <HAL_I2C_MasterRxCpltCallback>
}
 8011d9a:	46c0      	nop			@ (mov r8, r8)
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	b006      	add	sp, #24
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	46c0      	nop			@ (mov r8, r8)
 8011da4:	fe00e800 	.word	0xfe00e800
 8011da8:	ffff0000 	.word	0xffff0000

08011dac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011dc2:	200f      	movs	r0, #15
 8011dc4:	183b      	adds	r3, r7, r0
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	2141      	movs	r1, #65	@ 0x41
 8011dca:	5c52      	ldrb	r2, [r2, r1]
 8011dcc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2220      	movs	r2, #32
 8011dd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011dd6:	183b      	adds	r3, r7, r0
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	2b21      	cmp	r3, #33	@ 0x21
 8011ddc:	d003      	beq.n	8011de6 <I2C_ITSlaveCplt+0x3a>
 8011dde:	183b      	adds	r3, r7, r0
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	2b29      	cmp	r3, #41	@ 0x29
 8011de4:	d109      	bne.n	8011dfa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011de6:	4a7b      	ldr	r2, [pc, #492]	@ (8011fd4 <I2C_ITSlaveCplt+0x228>)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	0011      	movs	r1, r2
 8011dec:	0018      	movs	r0, r3
 8011dee:	f000 fe95 	bl	8012b1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2221      	movs	r2, #33	@ 0x21
 8011df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8011df8:	e011      	b.n	8011e1e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011dfa:	220f      	movs	r2, #15
 8011dfc:	18bb      	adds	r3, r7, r2
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	2b22      	cmp	r3, #34	@ 0x22
 8011e02:	d003      	beq.n	8011e0c <I2C_ITSlaveCplt+0x60>
 8011e04:	18bb      	adds	r3, r7, r2
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e0a:	d108      	bne.n	8011e1e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011e0c:	4a72      	ldr	r2, [pc, #456]	@ (8011fd8 <I2C_ITSlaveCplt+0x22c>)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	0011      	movs	r1, r2
 8011e12:	0018      	movs	r0, r3
 8011e14:	f000 fe82 	bl	8012b1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2222      	movs	r2, #34	@ 0x22
 8011e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	685a      	ldr	r2, [r3, #4]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2180      	movs	r1, #128	@ 0x80
 8011e2a:	0209      	lsls	r1, r1, #8
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4968      	ldr	r1, [pc, #416]	@ (8011fdc <I2C_ITSlaveCplt+0x230>)
 8011e3c:	400a      	ands	r2, r1
 8011e3e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	0018      	movs	r0, r3
 8011e44:	f000 fa55 	bl	80122f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011e48:	693a      	ldr	r2, [r7, #16]
 8011e4a:	2380      	movs	r3, #128	@ 0x80
 8011e4c:	01db      	lsls	r3, r3, #7
 8011e4e:	4013      	ands	r3, r2
 8011e50:	d013      	beq.n	8011e7a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4960      	ldr	r1, [pc, #384]	@ (8011fe0 <I2C_ITSlaveCplt+0x234>)
 8011e5e:	400a      	ands	r2, r1
 8011e60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d01f      	beq.n	8011eaa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011e78:	e017      	b.n	8011eaa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	2380      	movs	r3, #128	@ 0x80
 8011e7e:	021b      	lsls	r3, r3, #8
 8011e80:	4013      	ands	r3, r2
 8011e82:	d012      	beq.n	8011eaa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4955      	ldr	r1, [pc, #340]	@ (8011fe4 <I2C_ITSlaveCplt+0x238>)
 8011e90:	400a      	ands	r2, r1
 8011e92:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d006      	beq.n	8011eaa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	b29a      	uxth	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2204      	movs	r2, #4
 8011eae:	4013      	ands	r3, r2
 8011eb0:	d020      	beq.n	8011ef4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	2204      	movs	r2, #4
 8011eb6:	4393      	bics	r3, r2
 8011eb8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ec4:	b2d2      	uxtb	r2, r2
 8011ec6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d00c      	beq.n	8011ef4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ede:	3b01      	subs	r3, #1
 8011ee0:	b29a      	uxth	r2, r3
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	3b01      	subs	r3, #1
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d005      	beq.n	8011f0a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f02:	2204      	movs	r2, #4
 8011f04:	431a      	orrs	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2242      	movs	r2, #66	@ 0x42
 8011f0e:	2100      	movs	r1, #0
 8011f10:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2200      	movs	r2, #0
 8011f16:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d013      	beq.n	8011f48 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	0011      	movs	r1, r2
 8011f28:	0018      	movs	r0, r3
 8011f2a:	f000 f8b7 	bl	801209c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2241      	movs	r2, #65	@ 0x41
 8011f32:	5c9b      	ldrb	r3, [r3, r2]
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	2b28      	cmp	r3, #40	@ 0x28
 8011f38:	d147      	bne.n	8011fca <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011f3a:	697a      	ldr	r2, [r7, #20]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	0011      	movs	r1, r2
 8011f40:	0018      	movs	r0, r3
 8011f42:	f000 f853 	bl	8011fec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011f46:	e040      	b.n	8011fca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f4c:	4a26      	ldr	r2, [pc, #152]	@ (8011fe8 <I2C_ITSlaveCplt+0x23c>)
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d016      	beq.n	8011f80 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	0018      	movs	r0, r3
 8011f56:	f7ff fdf7 	bl	8011b48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	4a22      	ldr	r2, [pc, #136]	@ (8011fe8 <I2C_ITSlaveCplt+0x23c>)
 8011f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2241      	movs	r2, #65	@ 0x41
 8011f64:	2120      	movs	r1, #32
 8011f66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2240      	movs	r2, #64	@ 0x40
 8011f72:	2100      	movs	r1, #0
 8011f74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	0018      	movs	r0, r3
 8011f7a:	f7fe ffae 	bl	8010eda <HAL_I2C_ListenCpltCallback>
}
 8011f7e:	e024      	b.n	8011fca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2241      	movs	r2, #65	@ 0x41
 8011f84:	5c9b      	ldrb	r3, [r3, r2]
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b22      	cmp	r3, #34	@ 0x22
 8011f8a:	d10f      	bne.n	8011fac <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2241      	movs	r2, #65	@ 0x41
 8011f90:	2120      	movs	r1, #32
 8011f92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2240      	movs	r2, #64	@ 0x40
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	0018      	movs	r0, r3
 8011fa6:	f7fe ff80 	bl	8010eaa <HAL_I2C_SlaveRxCpltCallback>
}
 8011faa:	e00e      	b.n	8011fca <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2241      	movs	r2, #65	@ 0x41
 8011fb0:	2120      	movs	r1, #32
 8011fb2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2240      	movs	r2, #64	@ 0x40
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	0018      	movs	r0, r3
 8011fc6:	f7fe ff68 	bl	8010e9a <HAL_I2C_SlaveTxCpltCallback>
}
 8011fca:	46c0      	nop			@ (mov r8, r8)
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	b006      	add	sp, #24
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	46c0      	nop			@ (mov r8, r8)
 8011fd4:	00008001 	.word	0x00008001
 8011fd8:	00008002 	.word	0x00008002
 8011fdc:	fe00e800 	.word	0xfe00e800
 8011fe0:	ffffbfff 	.word	0xffffbfff
 8011fe4:	ffff7fff 	.word	0xffff7fff
 8011fe8:	ffff0000 	.word	0xffff0000

08011fec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4a26      	ldr	r2, [pc, #152]	@ (8012094 <I2C_ITListenCplt+0xa8>)
 8011ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2200      	movs	r2, #0
 8012000:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2241      	movs	r2, #65	@ 0x41
 8012006:	2120      	movs	r1, #32
 8012008:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2242      	movs	r2, #66	@ 0x42
 801200e:	2100      	movs	r1, #0
 8012010:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	2204      	movs	r2, #4
 801201c:	4013      	ands	r3, r2
 801201e:	d022      	beq.n	8012066 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801202a:	b2d2      	uxtb	r2, r2
 801202c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012032:	1c5a      	adds	r2, r3, #1
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801203c:	2b00      	cmp	r3, #0
 801203e:	d012      	beq.n	8012066 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012044:	3b01      	subs	r3, #1
 8012046:	b29a      	uxth	r2, r3
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012050:	b29b      	uxth	r3, r3
 8012052:	3b01      	subs	r3, #1
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801205e:	2204      	movs	r2, #4
 8012060:	431a      	orrs	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012066:	4a0c      	ldr	r2, [pc, #48]	@ (8012098 <I2C_ITListenCplt+0xac>)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	0011      	movs	r1, r2
 801206c:	0018      	movs	r0, r3
 801206e:	f000 fd55 	bl	8012b1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2210      	movs	r2, #16
 8012078:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2240      	movs	r2, #64	@ 0x40
 801207e:	2100      	movs	r1, #0
 8012080:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	0018      	movs	r0, r3
 8012086:	f7fe ff28 	bl	8010eda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801208a:	46c0      	nop			@ (mov r8, r8)
 801208c:	46bd      	mov	sp, r7
 801208e:	b002      	add	sp, #8
 8012090:	bd80      	pop	{r7, pc}
 8012092:	46c0      	nop			@ (mov r8, r8)
 8012094:	ffff0000 	.word	0xffff0000
 8012098:	00008003 	.word	0x00008003

0801209c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80120a6:	200f      	movs	r0, #15
 80120a8:	183b      	adds	r3, r7, r0
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	2141      	movs	r1, #65	@ 0x41
 80120ae:	5c52      	ldrb	r2, [r2, r1]
 80120b0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2242      	movs	r2, #66	@ 0x42
 80120b6:	2100      	movs	r1, #0
 80120b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	4a72      	ldr	r2, [pc, #456]	@ (8012288 <I2C_ITError+0x1ec>)
 80120be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2200      	movs	r2, #0
 80120c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	431a      	orrs	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80120d2:	183b      	adds	r3, r7, r0
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	2b28      	cmp	r3, #40	@ 0x28
 80120d8:	d007      	beq.n	80120ea <I2C_ITError+0x4e>
 80120da:	183b      	adds	r3, r7, r0
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	2b29      	cmp	r3, #41	@ 0x29
 80120e0:	d003      	beq.n	80120ea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80120e2:	183b      	adds	r3, r7, r0
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80120e8:	d10c      	bne.n	8012104 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2103      	movs	r1, #3
 80120ee:	0018      	movs	r0, r3
 80120f0:	f000 fd14 	bl	8012b1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2241      	movs	r2, #65	@ 0x41
 80120f8:	2128      	movs	r1, #40	@ 0x28
 80120fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	4a63      	ldr	r2, [pc, #396]	@ (801228c <I2C_ITError+0x1f0>)
 8012100:	635a      	str	r2, [r3, #52]	@ 0x34
 8012102:	e032      	b.n	801216a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012104:	4a62      	ldr	r2, [pc, #392]	@ (8012290 <I2C_ITError+0x1f4>)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	0011      	movs	r1, r2
 801210a:	0018      	movs	r0, r3
 801210c:	f000 fd06 	bl	8012b1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	0018      	movs	r0, r3
 8012114:	f000 f8ed 	bl	80122f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2241      	movs	r2, #65	@ 0x41
 801211c:	5c9b      	ldrb	r3, [r3, r2]
 801211e:	b2db      	uxtb	r3, r3
 8012120:	2b60      	cmp	r3, #96	@ 0x60
 8012122:	d01f      	beq.n	8012164 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2241      	movs	r2, #65	@ 0x41
 8012128:	2120      	movs	r1, #32
 801212a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	699b      	ldr	r3, [r3, #24]
 8012132:	2220      	movs	r2, #32
 8012134:	4013      	ands	r3, r2
 8012136:	2b20      	cmp	r3, #32
 8012138:	d114      	bne.n	8012164 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	699b      	ldr	r3, [r3, #24]
 8012140:	2210      	movs	r2, #16
 8012142:	4013      	ands	r3, r2
 8012144:	2b10      	cmp	r3, #16
 8012146:	d109      	bne.n	801215c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2210      	movs	r2, #16
 801214e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012154:	2204      	movs	r2, #4
 8012156:	431a      	orrs	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	2220      	movs	r2, #32
 8012162:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2200      	movs	r2, #0
 8012168:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801216e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012174:	2b00      	cmp	r3, #0
 8012176:	d03b      	beq.n	80121f0 <I2C_ITError+0x154>
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	2b11      	cmp	r3, #17
 801217c:	d002      	beq.n	8012184 <I2C_ITError+0xe8>
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	2b21      	cmp	r3, #33	@ 0x21
 8012182:	d135      	bne.n	80121f0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	2380      	movs	r3, #128	@ 0x80
 801218c:	01db      	lsls	r3, r3, #7
 801218e:	401a      	ands	r2, r3
 8012190:	2380      	movs	r3, #128	@ 0x80
 8012192:	01db      	lsls	r3, r3, #7
 8012194:	429a      	cmp	r2, r3
 8012196:	d107      	bne.n	80121a8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	493c      	ldr	r1, [pc, #240]	@ (8012294 <I2C_ITError+0x1f8>)
 80121a4:	400a      	ands	r2, r1
 80121a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121ac:	0018      	movs	r0, r3
 80121ae:	f7fd fd62 	bl	800fc76 <HAL_DMA_GetState>
 80121b2:	0003      	movs	r3, r0
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d016      	beq.n	80121e6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121bc:	4a36      	ldr	r2, [pc, #216]	@ (8012298 <I2C_ITError+0x1fc>)
 80121be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2240      	movs	r2, #64	@ 0x40
 80121c4:	2100      	movs	r1, #0
 80121c6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121cc:	0018      	movs	r0, r3
 80121ce:	f7fd fc5d 	bl	800fa8c <HAL_DMA_Abort_IT>
 80121d2:	1e03      	subs	r3, r0, #0
 80121d4:	d051      	beq.n	801227a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121e0:	0018      	movs	r0, r3
 80121e2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121e4:	e049      	b.n	801227a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	0018      	movs	r0, r3
 80121ea:	f000 f859 	bl	80122a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80121ee:	e044      	b.n	801227a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d03b      	beq.n	8012270 <I2C_ITError+0x1d4>
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	2b12      	cmp	r3, #18
 80121fc:	d002      	beq.n	8012204 <I2C_ITError+0x168>
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	2b22      	cmp	r3, #34	@ 0x22
 8012202:	d135      	bne.n	8012270 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	2380      	movs	r3, #128	@ 0x80
 801220c:	021b      	lsls	r3, r3, #8
 801220e:	401a      	ands	r2, r3
 8012210:	2380      	movs	r3, #128	@ 0x80
 8012212:	021b      	lsls	r3, r3, #8
 8012214:	429a      	cmp	r2, r3
 8012216:	d107      	bne.n	8012228 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	491e      	ldr	r1, [pc, #120]	@ (801229c <I2C_ITError+0x200>)
 8012224:	400a      	ands	r2, r1
 8012226:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801222c:	0018      	movs	r0, r3
 801222e:	f7fd fd22 	bl	800fc76 <HAL_DMA_GetState>
 8012232:	0003      	movs	r3, r0
 8012234:	2b01      	cmp	r3, #1
 8012236:	d016      	beq.n	8012266 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801223c:	4a16      	ldr	r2, [pc, #88]	@ (8012298 <I2C_ITError+0x1fc>)
 801223e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2240      	movs	r2, #64	@ 0x40
 8012244:	2100      	movs	r1, #0
 8012246:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801224c:	0018      	movs	r0, r3
 801224e:	f7fd fc1d 	bl	800fa8c <HAL_DMA_Abort_IT>
 8012252:	1e03      	subs	r3, r0, #0
 8012254:	d013      	beq.n	801227e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801225a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012260:	0018      	movs	r0, r3
 8012262:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012264:	e00b      	b.n	801227e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	0018      	movs	r0, r3
 801226a:	f000 f819 	bl	80122a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801226e:	e006      	b.n	801227e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	0018      	movs	r0, r3
 8012274:	f000 f814 	bl	80122a0 <I2C_TreatErrorCallback>
  }
}
 8012278:	e002      	b.n	8012280 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801227a:	46c0      	nop			@ (mov r8, r8)
 801227c:	e000      	b.n	8012280 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801227e:	46c0      	nop			@ (mov r8, r8)
}
 8012280:	46c0      	nop			@ (mov r8, r8)
 8012282:	46bd      	mov	sp, r7
 8012284:	b004      	add	sp, #16
 8012286:	bd80      	pop	{r7, pc}
 8012288:	ffff0000 	.word	0xffff0000
 801228c:	08011181 	.word	0x08011181
 8012290:	00008003 	.word	0x00008003
 8012294:	ffffbfff 	.word	0xffffbfff
 8012298:	080124ab 	.word	0x080124ab
 801229c:	ffff7fff 	.word	0xffff7fff

080122a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2241      	movs	r2, #65	@ 0x41
 80122ac:	5c9b      	ldrb	r3, [r3, r2]
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	2b60      	cmp	r3, #96	@ 0x60
 80122b2:	d10f      	bne.n	80122d4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2241      	movs	r2, #65	@ 0x41
 80122b8:	2120      	movs	r1, #32
 80122ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2240      	movs	r2, #64	@ 0x40
 80122c6:	2100      	movs	r1, #0
 80122c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	0018      	movs	r0, r3
 80122ce:	f7fe fe24 	bl	8010f1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80122d2:	e00a      	b.n	80122ea <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2240      	movs	r2, #64	@ 0x40
 80122de:	2100      	movs	r1, #0
 80122e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	0018      	movs	r0, r3
 80122e6:	f7fe fe10 	bl	8010f0a <HAL_I2C_ErrorCallback>
}
 80122ea:	46c0      	nop			@ (mov r8, r8)
 80122ec:	46bd      	mov	sp, r7
 80122ee:	b002      	add	sp, #8
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b082      	sub	sp, #8
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	699b      	ldr	r3, [r3, #24]
 8012300:	2202      	movs	r2, #2
 8012302:	4013      	ands	r3, r2
 8012304:	2b02      	cmp	r3, #2
 8012306:	d103      	bne.n	8012310 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	2200      	movs	r2, #0
 801230e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	699b      	ldr	r3, [r3, #24]
 8012316:	2201      	movs	r2, #1
 8012318:	4013      	ands	r3, r2
 801231a:	2b01      	cmp	r3, #1
 801231c:	d007      	beq.n	801232e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	699a      	ldr	r2, [r3, #24]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2101      	movs	r1, #1
 801232a:	430a      	orrs	r2, r1
 801232c:	619a      	str	r2, [r3, #24]
  }
}
 801232e:	46c0      	nop			@ (mov r8, r8)
 8012330:	46bd      	mov	sp, r7
 8012332:	b002      	add	sp, #8
 8012334:	bd80      	pop	{r7, pc}
	...

08012338 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012344:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4920      	ldr	r1, [pc, #128]	@ (80123d4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012352:	400a      	ands	r2, r1
 8012354:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801235a:	b29b      	uxth	r3, r3
 801235c:	2b00      	cmp	r3, #0
 801235e:	d105      	bne.n	801236c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2120      	movs	r1, #32
 8012364:	0018      	movs	r0, r3
 8012366:	f000 fb4b 	bl	8012a00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801236a:	e02e      	b.n	80123ca <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012374:	189a      	adds	r2, r3, r2
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801237e:	b29b      	uxth	r3, r3
 8012380:	2bff      	cmp	r3, #255	@ 0xff
 8012382:	d903      	bls.n	801238c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	22ff      	movs	r2, #255	@ 0xff
 8012388:	851a      	strh	r2, [r3, #40]	@ 0x28
 801238a:	e004      	b.n	8012396 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012390:	b29a      	uxth	r2, r3
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801239e:	0019      	movs	r1, r3
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	3328      	adds	r3, #40	@ 0x28
 80123a6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80123ac:	f7fd fac8 	bl	800f940 <HAL_DMA_Start_IT>
 80123b0:	1e03      	subs	r3, r0, #0
 80123b2:	d005      	beq.n	80123c0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2110      	movs	r1, #16
 80123b8:	0018      	movs	r0, r3
 80123ba:	f7ff fe6f 	bl	801209c <I2C_ITError>
}
 80123be:	e004      	b.n	80123ca <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2140      	movs	r1, #64	@ 0x40
 80123c4:	0018      	movs	r0, r3
 80123c6:	f000 fb1b 	bl	8012a00 <I2C_Enable_IRQ>
}
 80123ca:	46c0      	nop			@ (mov r8, r8)
 80123cc:	46bd      	mov	sp, r7
 80123ce:	b004      	add	sp, #16
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	46c0      	nop			@ (mov r8, r8)
 80123d4:	ffffbfff 	.word	0xffffbfff

080123d8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4920      	ldr	r1, [pc, #128]	@ (8012474 <I2C_DMAMasterReceiveCplt+0x9c>)
 80123f2:	400a      	ands	r2, r1
 80123f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d105      	bne.n	801240c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2120      	movs	r1, #32
 8012404:	0018      	movs	r0, r3
 8012406:	f000 fafb 	bl	8012a00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801240a:	e02e      	b.n	801246a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012410:	68fa      	ldr	r2, [r7, #12]
 8012412:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012414:	189a      	adds	r2, r3, r2
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801241e:	b29b      	uxth	r3, r3
 8012420:	2bff      	cmp	r3, #255	@ 0xff
 8012422:	d903      	bls.n	801242c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	22ff      	movs	r2, #255	@ 0xff
 8012428:	851a      	strh	r2, [r3, #40]	@ 0x28
 801242a:	e004      	b.n	8012436 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012430:	b29a      	uxth	r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	3324      	adds	r3, #36	@ 0x24
 8012440:	0019      	movs	r1, r3
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012446:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801244c:	f7fd fa78 	bl	800f940 <HAL_DMA_Start_IT>
 8012450:	1e03      	subs	r3, r0, #0
 8012452:	d005      	beq.n	8012460 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2110      	movs	r1, #16
 8012458:	0018      	movs	r0, r3
 801245a:	f7ff fe1f 	bl	801209c <I2C_ITError>
}
 801245e:	e004      	b.n	801246a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2140      	movs	r1, #64	@ 0x40
 8012464:	0018      	movs	r0, r3
 8012466:	f000 facb 	bl	8012a00 <I2C_Enable_IRQ>
}
 801246a:	46c0      	nop			@ (mov r8, r8)
 801246c:	46bd      	mov	sp, r7
 801246e:	b004      	add	sp, #16
 8012470:	bd80      	pop	{r7, pc}
 8012472:	46c0      	nop			@ (mov r8, r8)
 8012474:	ffff7fff 	.word	0xffff7fff

08012478 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012484:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	685a      	ldr	r2, [r3, #4]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2180      	movs	r1, #128	@ 0x80
 8012492:	0209      	lsls	r1, r1, #8
 8012494:	430a      	orrs	r2, r1
 8012496:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2110      	movs	r1, #16
 801249c:	0018      	movs	r0, r3
 801249e:	f7ff fdfd 	bl	801209c <I2C_ITError>
}
 80124a2:	46c0      	nop			@ (mov r8, r8)
 80124a4:	46bd      	mov	sp, r7
 80124a6:	b004      	add	sp, #16
 80124a8:	bd80      	pop	{r7, pc}

080124aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b084      	sub	sp, #16
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d003      	beq.n	80124c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124c4:	2200      	movs	r2, #0
 80124c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d003      	beq.n	80124d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124d4:	2200      	movs	r2, #0
 80124d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	0018      	movs	r0, r3
 80124dc:	f7ff fee0 	bl	80122a0 <I2C_TreatErrorCallback>
}
 80124e0:	46c0      	nop			@ (mov r8, r8)
 80124e2:	46bd      	mov	sp, r7
 80124e4:	b004      	add	sp, #16
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	1dfb      	adds	r3, r7, #7
 80124f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80124f8:	e030      	b.n	801255c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	3301      	adds	r3, #1
 80124fe:	d02d      	beq.n	801255c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012500:	f7fc fccc 	bl	800ee9c <HAL_GetTick>
 8012504:	0002      	movs	r2, r0
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	429a      	cmp	r2, r3
 801250e:	d302      	bcc.n	8012516 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d122      	bne.n	801255c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	699b      	ldr	r3, [r3, #24]
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	4013      	ands	r3, r2
 8012520:	68ba      	ldr	r2, [r7, #8]
 8012522:	1ad3      	subs	r3, r2, r3
 8012524:	425a      	negs	r2, r3
 8012526:	4153      	adcs	r3, r2
 8012528:	b2db      	uxtb	r3, r3
 801252a:	001a      	movs	r2, r3
 801252c:	1dfb      	adds	r3, r7, #7
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	429a      	cmp	r2, r3
 8012532:	d113      	bne.n	801255c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012538:	2220      	movs	r2, #32
 801253a:	431a      	orrs	r2, r3
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2241      	movs	r2, #65	@ 0x41
 8012544:	2120      	movs	r1, #32
 8012546:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2242      	movs	r2, #66	@ 0x42
 801254c:	2100      	movs	r1, #0
 801254e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2240      	movs	r2, #64	@ 0x40
 8012554:	2100      	movs	r1, #0
 8012556:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012558:	2301      	movs	r3, #1
 801255a:	e00f      	b.n	801257c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	699b      	ldr	r3, [r3, #24]
 8012562:	68ba      	ldr	r2, [r7, #8]
 8012564:	4013      	ands	r3, r2
 8012566:	68ba      	ldr	r2, [r7, #8]
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	425a      	negs	r2, r3
 801256c:	4153      	adcs	r3, r2
 801256e:	b2db      	uxtb	r3, r3
 8012570:	001a      	movs	r2, r3
 8012572:	1dfb      	adds	r3, r7, #7
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	429a      	cmp	r2, r3
 8012578:	d0bf      	beq.n	80124fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801257a:	2300      	movs	r3, #0
}
 801257c:	0018      	movs	r0, r3
 801257e:	46bd      	mov	sp, r7
 8012580:	b004      	add	sp, #16
 8012582:	bd80      	pop	{r7, pc}

08012584 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012590:	e032      	b.n	80125f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	68b9      	ldr	r1, [r7, #8]
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	0018      	movs	r0, r3
 801259a:	f000 f8ff 	bl	801279c <I2C_IsErrorOccurred>
 801259e:	1e03      	subs	r3, r0, #0
 80125a0:	d001      	beq.n	80125a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80125a2:	2301      	movs	r3, #1
 80125a4:	e030      	b.n	8012608 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	3301      	adds	r3, #1
 80125aa:	d025      	beq.n	80125f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125ac:	f7fc fc76 	bl	800ee9c <HAL_GetTick>
 80125b0:	0002      	movs	r2, r0
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	1ad3      	subs	r3, r2, r3
 80125b6:	68ba      	ldr	r2, [r7, #8]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d302      	bcc.n	80125c2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d11a      	bne.n	80125f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	699b      	ldr	r3, [r3, #24]
 80125c8:	2202      	movs	r2, #2
 80125ca:	4013      	ands	r3, r2
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d013      	beq.n	80125f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125d4:	2220      	movs	r2, #32
 80125d6:	431a      	orrs	r2, r3
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2241      	movs	r2, #65	@ 0x41
 80125e0:	2120      	movs	r1, #32
 80125e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2242      	movs	r2, #66	@ 0x42
 80125e8:	2100      	movs	r1, #0
 80125ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2240      	movs	r2, #64	@ 0x40
 80125f0:	2100      	movs	r1, #0
 80125f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	e007      	b.n	8012608 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	699b      	ldr	r3, [r3, #24]
 80125fe:	2202      	movs	r2, #2
 8012600:	4013      	ands	r3, r2
 8012602:	2b02      	cmp	r3, #2
 8012604:	d1c5      	bne.n	8012592 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012606:	2300      	movs	r3, #0
}
 8012608:	0018      	movs	r0, r3
 801260a:	46bd      	mov	sp, r7
 801260c:	b004      	add	sp, #16
 801260e:	bd80      	pop	{r7, pc}

08012610 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801261c:	e02f      	b.n	801267e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	68b9      	ldr	r1, [r7, #8]
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	0018      	movs	r0, r3
 8012626:	f000 f8b9 	bl	801279c <I2C_IsErrorOccurred>
 801262a:	1e03      	subs	r3, r0, #0
 801262c:	d001      	beq.n	8012632 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801262e:	2301      	movs	r3, #1
 8012630:	e02d      	b.n	801268e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012632:	f7fc fc33 	bl	800ee9c <HAL_GetTick>
 8012636:	0002      	movs	r2, r0
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	1ad3      	subs	r3, r2, r3
 801263c:	68ba      	ldr	r2, [r7, #8]
 801263e:	429a      	cmp	r2, r3
 8012640:	d302      	bcc.n	8012648 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d11a      	bne.n	801267e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	2220      	movs	r2, #32
 8012650:	4013      	ands	r3, r2
 8012652:	2b20      	cmp	r3, #32
 8012654:	d013      	beq.n	801267e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801265a:	2220      	movs	r2, #32
 801265c:	431a      	orrs	r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2241      	movs	r2, #65	@ 0x41
 8012666:	2120      	movs	r1, #32
 8012668:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2242      	movs	r2, #66	@ 0x42
 801266e:	2100      	movs	r1, #0
 8012670:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2240      	movs	r2, #64	@ 0x40
 8012676:	2100      	movs	r1, #0
 8012678:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801267a:	2301      	movs	r3, #1
 801267c:	e007      	b.n	801268e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	699b      	ldr	r3, [r3, #24]
 8012684:	2220      	movs	r2, #32
 8012686:	4013      	ands	r3, r2
 8012688:	2b20      	cmp	r3, #32
 801268a:	d1c8      	bne.n	801261e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801268c:	2300      	movs	r3, #0
}
 801268e:	0018      	movs	r0, r3
 8012690:	46bd      	mov	sp, r7
 8012692:	b004      	add	sp, #16
 8012694:	bd80      	pop	{r7, pc}
	...

08012698 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80126a4:	e06b      	b.n	801277e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	68b9      	ldr	r1, [r7, #8]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	0018      	movs	r0, r3
 80126ae:	f000 f875 	bl	801279c <I2C_IsErrorOccurred>
 80126b2:	1e03      	subs	r3, r0, #0
 80126b4:	d001      	beq.n	80126ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80126b6:	2301      	movs	r3, #1
 80126b8:	e069      	b.n	801278e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	699b      	ldr	r3, [r3, #24]
 80126c0:	2220      	movs	r2, #32
 80126c2:	4013      	ands	r3, r2
 80126c4:	2b20      	cmp	r3, #32
 80126c6:	d138      	bne.n	801273a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	699b      	ldr	r3, [r3, #24]
 80126ce:	2204      	movs	r2, #4
 80126d0:	4013      	ands	r3, r2
 80126d2:	2b04      	cmp	r3, #4
 80126d4:	d105      	bne.n	80126e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d001      	beq.n	80126e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	e055      	b.n	801278e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	699b      	ldr	r3, [r3, #24]
 80126e8:	2210      	movs	r2, #16
 80126ea:	4013      	ands	r3, r2
 80126ec:	2b10      	cmp	r3, #16
 80126ee:	d107      	bne.n	8012700 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	2210      	movs	r2, #16
 80126f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2204      	movs	r2, #4
 80126fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80126fe:	e002      	b.n	8012706 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2200      	movs	r2, #0
 8012704:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2220      	movs	r2, #32
 801270c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	685a      	ldr	r2, [r3, #4]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	491f      	ldr	r1, [pc, #124]	@ (8012798 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801271a:	400a      	ands	r2, r1
 801271c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2241      	movs	r2, #65	@ 0x41
 8012722:	2120      	movs	r1, #32
 8012724:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2242      	movs	r2, #66	@ 0x42
 801272a:	2100      	movs	r1, #0
 801272c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2240      	movs	r2, #64	@ 0x40
 8012732:	2100      	movs	r1, #0
 8012734:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012736:	2301      	movs	r3, #1
 8012738:	e029      	b.n	801278e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801273a:	f7fc fbaf 	bl	800ee9c <HAL_GetTick>
 801273e:	0002      	movs	r2, r0
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	1ad3      	subs	r3, r2, r3
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	429a      	cmp	r2, r3
 8012748:	d302      	bcc.n	8012750 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d116      	bne.n	801277e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	699b      	ldr	r3, [r3, #24]
 8012756:	2204      	movs	r2, #4
 8012758:	4013      	ands	r3, r2
 801275a:	2b04      	cmp	r3, #4
 801275c:	d00f      	beq.n	801277e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012762:	2220      	movs	r2, #32
 8012764:	431a      	orrs	r2, r3
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	2241      	movs	r2, #65	@ 0x41
 801276e:	2120      	movs	r1, #32
 8012770:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2240      	movs	r2, #64	@ 0x40
 8012776:	2100      	movs	r1, #0
 8012778:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801277a:	2301      	movs	r3, #1
 801277c:	e007      	b.n	801278e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	699b      	ldr	r3, [r3, #24]
 8012784:	2204      	movs	r2, #4
 8012786:	4013      	ands	r3, r2
 8012788:	2b04      	cmp	r3, #4
 801278a:	d18c      	bne.n	80126a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801278c:	2300      	movs	r3, #0
}
 801278e:	0018      	movs	r0, r3
 8012790:	46bd      	mov	sp, r7
 8012792:	b004      	add	sp, #16
 8012794:	bd80      	pop	{r7, pc}
 8012796:	46c0      	nop			@ (mov r8, r8)
 8012798:	fe00e800 	.word	0xfe00e800

0801279c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b08a      	sub	sp, #40	@ 0x28
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80127a8:	2327      	movs	r3, #39	@ 0x27
 80127aa:	18fb      	adds	r3, r7, r3
 80127ac:	2200      	movs	r2, #0
 80127ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	699b      	ldr	r3, [r3, #24]
 80127b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80127b8:	2300      	movs	r3, #0
 80127ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	2210      	movs	r2, #16
 80127c4:	4013      	ands	r3, r2
 80127c6:	d100      	bne.n	80127ca <I2C_IsErrorOccurred+0x2e>
 80127c8:	e079      	b.n	80128be <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2210      	movs	r2, #16
 80127d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80127d2:	e057      	b.n	8012884 <I2C_IsErrorOccurred+0xe8>
 80127d4:	2227      	movs	r2, #39	@ 0x27
 80127d6:	18bb      	adds	r3, r7, r2
 80127d8:	18ba      	adds	r2, r7, r2
 80127da:	7812      	ldrb	r2, [r2, #0]
 80127dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	3301      	adds	r3, #1
 80127e2:	d04f      	beq.n	8012884 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80127e4:	f7fc fb5a 	bl	800ee9c <HAL_GetTick>
 80127e8:	0002      	movs	r2, r0
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	1ad3      	subs	r3, r2, r3
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d302      	bcc.n	80127fa <I2C_IsErrorOccurred+0x5e>
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d144      	bne.n	8012884 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	685a      	ldr	r2, [r3, #4]
 8012800:	2380      	movs	r3, #128	@ 0x80
 8012802:	01db      	lsls	r3, r3, #7
 8012804:	4013      	ands	r3, r2
 8012806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012808:	2013      	movs	r0, #19
 801280a:	183b      	adds	r3, r7, r0
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	2142      	movs	r1, #66	@ 0x42
 8012810:	5c52      	ldrb	r2, [r2, r1]
 8012812:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	699a      	ldr	r2, [r3, #24]
 801281a:	2380      	movs	r3, #128	@ 0x80
 801281c:	021b      	lsls	r3, r3, #8
 801281e:	401a      	ands	r2, r3
 8012820:	2380      	movs	r3, #128	@ 0x80
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	429a      	cmp	r2, r3
 8012826:	d126      	bne.n	8012876 <I2C_IsErrorOccurred+0xda>
 8012828:	697a      	ldr	r2, [r7, #20]
 801282a:	2380      	movs	r3, #128	@ 0x80
 801282c:	01db      	lsls	r3, r3, #7
 801282e:	429a      	cmp	r2, r3
 8012830:	d021      	beq.n	8012876 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012832:	183b      	adds	r3, r7, r0
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b20      	cmp	r3, #32
 8012838:	d01d      	beq.n	8012876 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2180      	movs	r1, #128	@ 0x80
 8012846:	01c9      	lsls	r1, r1, #7
 8012848:	430a      	orrs	r2, r1
 801284a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801284c:	f7fc fb26 	bl	800ee9c <HAL_GetTick>
 8012850:	0003      	movs	r3, r0
 8012852:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012854:	e00f      	b.n	8012876 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8012856:	f7fc fb21 	bl	800ee9c <HAL_GetTick>
 801285a:	0002      	movs	r2, r0
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	1ad3      	subs	r3, r2, r3
 8012860:	2b19      	cmp	r3, #25
 8012862:	d908      	bls.n	8012876 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012864:	6a3b      	ldr	r3, [r7, #32]
 8012866:	2220      	movs	r2, #32
 8012868:	4313      	orrs	r3, r2
 801286a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801286c:	2327      	movs	r3, #39	@ 0x27
 801286e:	18fb      	adds	r3, r7, r3
 8012870:	2201      	movs	r2, #1
 8012872:	701a      	strb	r2, [r3, #0]

              break;
 8012874:	e006      	b.n	8012884 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	699b      	ldr	r3, [r3, #24]
 801287c:	2220      	movs	r2, #32
 801287e:	4013      	ands	r3, r2
 8012880:	2b20      	cmp	r3, #32
 8012882:	d1e8      	bne.n	8012856 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	699b      	ldr	r3, [r3, #24]
 801288a:	2220      	movs	r2, #32
 801288c:	4013      	ands	r3, r2
 801288e:	2b20      	cmp	r3, #32
 8012890:	d004      	beq.n	801289c <I2C_IsErrorOccurred+0x100>
 8012892:	2327      	movs	r3, #39	@ 0x27
 8012894:	18fb      	adds	r3, r7, r3
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d09b      	beq.n	80127d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801289c:	2327      	movs	r3, #39	@ 0x27
 801289e:	18fb      	adds	r3, r7, r3
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d103      	bne.n	80128ae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2220      	movs	r2, #32
 80128ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80128ae:	6a3b      	ldr	r3, [r7, #32]
 80128b0:	2204      	movs	r2, #4
 80128b2:	4313      	orrs	r3, r2
 80128b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80128b6:	2327      	movs	r3, #39	@ 0x27
 80128b8:	18fb      	adds	r3, r7, r3
 80128ba:	2201      	movs	r2, #1
 80128bc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	699b      	ldr	r3, [r3, #24]
 80128c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80128c6:	69ba      	ldr	r2, [r7, #24]
 80128c8:	2380      	movs	r3, #128	@ 0x80
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	4013      	ands	r3, r2
 80128ce:	d00c      	beq.n	80128ea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	2201      	movs	r2, #1
 80128d4:	4313      	orrs	r3, r2
 80128d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2280      	movs	r2, #128	@ 0x80
 80128de:	0052      	lsls	r2, r2, #1
 80128e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80128e2:	2327      	movs	r3, #39	@ 0x27
 80128e4:	18fb      	adds	r3, r7, r3
 80128e6:	2201      	movs	r2, #1
 80128e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80128ea:	69ba      	ldr	r2, [r7, #24]
 80128ec:	2380      	movs	r3, #128	@ 0x80
 80128ee:	00db      	lsls	r3, r3, #3
 80128f0:	4013      	ands	r3, r2
 80128f2:	d00c      	beq.n	801290e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80128f4:	6a3b      	ldr	r3, [r7, #32]
 80128f6:	2208      	movs	r2, #8
 80128f8:	4313      	orrs	r3, r2
 80128fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2280      	movs	r2, #128	@ 0x80
 8012902:	00d2      	lsls	r2, r2, #3
 8012904:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012906:	2327      	movs	r3, #39	@ 0x27
 8012908:	18fb      	adds	r3, r7, r3
 801290a:	2201      	movs	r2, #1
 801290c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801290e:	69ba      	ldr	r2, [r7, #24]
 8012910:	2380      	movs	r3, #128	@ 0x80
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	4013      	ands	r3, r2
 8012916:	d00c      	beq.n	8012932 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012918:	6a3b      	ldr	r3, [r7, #32]
 801291a:	2202      	movs	r2, #2
 801291c:	4313      	orrs	r3, r2
 801291e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2280      	movs	r2, #128	@ 0x80
 8012926:	0092      	lsls	r2, r2, #2
 8012928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801292a:	2327      	movs	r3, #39	@ 0x27
 801292c:	18fb      	adds	r3, r7, r3
 801292e:	2201      	movs	r2, #1
 8012930:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012932:	2327      	movs	r3, #39	@ 0x27
 8012934:	18fb      	adds	r3, r7, r3
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d01d      	beq.n	8012978 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	0018      	movs	r0, r3
 8012940:	f7ff fcd7 	bl	80122f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	685a      	ldr	r2, [r3, #4]
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	490e      	ldr	r1, [pc, #56]	@ (8012988 <I2C_IsErrorOccurred+0x1ec>)
 8012950:	400a      	ands	r2, r1
 8012952:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012958:	6a3b      	ldr	r3, [r7, #32]
 801295a:	431a      	orrs	r2, r3
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2241      	movs	r2, #65	@ 0x41
 8012964:	2120      	movs	r1, #32
 8012966:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	2242      	movs	r2, #66	@ 0x42
 801296c:	2100      	movs	r1, #0
 801296e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2240      	movs	r2, #64	@ 0x40
 8012974:	2100      	movs	r1, #0
 8012976:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012978:	2327      	movs	r3, #39	@ 0x27
 801297a:	18fb      	adds	r3, r7, r3
 801297c:	781b      	ldrb	r3, [r3, #0]
}
 801297e:	0018      	movs	r0, r3
 8012980:	46bd      	mov	sp, r7
 8012982:	b00a      	add	sp, #40	@ 0x28
 8012984:	bd80      	pop	{r7, pc}
 8012986:	46c0      	nop			@ (mov r8, r8)
 8012988:	fe00e800 	.word	0xfe00e800

0801298c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801298c:	b590      	push	{r4, r7, lr}
 801298e:	b087      	sub	sp, #28
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	0008      	movs	r0, r1
 8012996:	0011      	movs	r1, r2
 8012998:	607b      	str	r3, [r7, #4]
 801299a:	240a      	movs	r4, #10
 801299c:	193b      	adds	r3, r7, r4
 801299e:	1c02      	adds	r2, r0, #0
 80129a0:	801a      	strh	r2, [r3, #0]
 80129a2:	2009      	movs	r0, #9
 80129a4:	183b      	adds	r3, r7, r0
 80129a6:	1c0a      	adds	r2, r1, #0
 80129a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129aa:	193b      	adds	r3, r7, r4
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	059b      	lsls	r3, r3, #22
 80129b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129b2:	183b      	adds	r3, r7, r0
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	0419      	lsls	r1, r3, #16
 80129b8:	23ff      	movs	r3, #255	@ 0xff
 80129ba:	041b      	lsls	r3, r3, #16
 80129bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80129c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129c6:	4313      	orrs	r3, r2
 80129c8:	005b      	lsls	r3, r3, #1
 80129ca:	085b      	lsrs	r3, r3, #1
 80129cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129d6:	0d51      	lsrs	r1, r2, #21
 80129d8:	2280      	movs	r2, #128	@ 0x80
 80129da:	00d2      	lsls	r2, r2, #3
 80129dc:	400a      	ands	r2, r1
 80129de:	4907      	ldr	r1, [pc, #28]	@ (80129fc <I2C_TransferConfig+0x70>)
 80129e0:	430a      	orrs	r2, r1
 80129e2:	43d2      	mvns	r2, r2
 80129e4:	401a      	ands	r2, r3
 80129e6:	0011      	movs	r1, r2
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	697a      	ldr	r2, [r7, #20]
 80129ee:	430a      	orrs	r2, r1
 80129f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80129f2:	46c0      	nop			@ (mov r8, r8)
 80129f4:	46bd      	mov	sp, r7
 80129f6:	b007      	add	sp, #28
 80129f8:	bd90      	pop	{r4, r7, pc}
 80129fa:	46c0      	nop			@ (mov r8, r8)
 80129fc:	03ff63ff 	.word	0x03ff63ff

08012a00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	000a      	movs	r2, r1
 8012a0a:	1cbb      	adds	r3, r7, #2
 8012a0c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a16:	4b3e      	ldr	r3, [pc, #248]	@ (8012b10 <I2C_Enable_IRQ+0x110>)
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d035      	beq.n	8012a88 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012a20:	4b3c      	ldr	r3, [pc, #240]	@ (8012b14 <I2C_Enable_IRQ+0x114>)
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d030      	beq.n	8012a88 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8012b18 <I2C_Enable_IRQ+0x118>)
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d02b      	beq.n	8012a88 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a30:	1cbb      	adds	r3, r7, #2
 8012a32:	2200      	movs	r2, #0
 8012a34:	5e9b      	ldrsh	r3, [r3, r2]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	da03      	bge.n	8012a42 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	22b8      	movs	r2, #184	@ 0xb8
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012a42:	1cbb      	adds	r3, r7, #2
 8012a44:	881b      	ldrh	r3, [r3, #0]
 8012a46:	2201      	movs	r2, #1
 8012a48:	4013      	ands	r3, r2
 8012a4a:	d003      	beq.n	8012a54 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	22f2      	movs	r2, #242	@ 0xf2
 8012a50:	4313      	orrs	r3, r2
 8012a52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012a54:	1cbb      	adds	r3, r7, #2
 8012a56:	881b      	ldrh	r3, [r3, #0]
 8012a58:	2202      	movs	r2, #2
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	d003      	beq.n	8012a66 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	22f4      	movs	r2, #244	@ 0xf4
 8012a62:	4313      	orrs	r3, r2
 8012a64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012a66:	1cbb      	adds	r3, r7, #2
 8012a68:	881b      	ldrh	r3, [r3, #0]
 8012a6a:	2b10      	cmp	r3, #16
 8012a6c:	d103      	bne.n	8012a76 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2290      	movs	r2, #144	@ 0x90
 8012a72:	4313      	orrs	r3, r2
 8012a74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012a76:	1cbb      	adds	r3, r7, #2
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	2b20      	cmp	r3, #32
 8012a7c:	d13c      	bne.n	8012af8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2220      	movs	r2, #32
 8012a82:	4313      	orrs	r3, r2
 8012a84:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012a86:	e037      	b.n	8012af8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a88:	1cbb      	adds	r3, r7, #2
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	5e9b      	ldrsh	r3, [r3, r2]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	da03      	bge.n	8012a9a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	22b8      	movs	r2, #184	@ 0xb8
 8012a96:	4313      	orrs	r3, r2
 8012a98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012a9a:	1cbb      	adds	r3, r7, #2
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	d003      	beq.n	8012aac <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	22f2      	movs	r2, #242	@ 0xf2
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012aac:	1cbb      	adds	r3, r7, #2
 8012aae:	881b      	ldrh	r3, [r3, #0]
 8012ab0:	2202      	movs	r2, #2
 8012ab2:	4013      	ands	r3, r2
 8012ab4:	d003      	beq.n	8012abe <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	22f4      	movs	r2, #244	@ 0xf4
 8012aba:	4313      	orrs	r3, r2
 8012abc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012abe:	1cbb      	adds	r3, r7, #2
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	2b10      	cmp	r3, #16
 8012ac4:	d103      	bne.n	8012ace <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2290      	movs	r2, #144	@ 0x90
 8012aca:	4313      	orrs	r3, r2
 8012acc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012ace:	1cbb      	adds	r3, r7, #2
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	2b20      	cmp	r3, #32
 8012ad4:	d103      	bne.n	8012ade <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2260      	movs	r2, #96	@ 0x60
 8012ada:	4313      	orrs	r3, r2
 8012adc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8012b18 <I2C_Enable_IRQ+0x118>)
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d007      	beq.n	8012af8 <I2C_Enable_IRQ+0xf8>
 8012ae8:	1cbb      	adds	r3, r7, #2
 8012aea:	881b      	ldrh	r3, [r3, #0]
 8012aec:	2b40      	cmp	r3, #64	@ 0x40
 8012aee:	d103      	bne.n	8012af8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2240      	movs	r2, #64	@ 0x40
 8012af4:	4313      	orrs	r3, r2
 8012af6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	6819      	ldr	r1, [r3, #0]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	68fa      	ldr	r2, [r7, #12]
 8012b04:	430a      	orrs	r2, r1
 8012b06:	601a      	str	r2, [r3, #0]
}
 8012b08:	46c0      	nop			@ (mov r8, r8)
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	b004      	add	sp, #16
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	08011381 	.word	0x08011381
 8012b14:	080117b1 	.word	0x080117b1
 8012b18:	08011579 	.word	0x08011579

08012b1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	000a      	movs	r2, r1
 8012b26:	1cbb      	adds	r3, r7, #2
 8012b28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012b2e:	1cbb      	adds	r3, r7, #2
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	2201      	movs	r2, #1
 8012b34:	4013      	ands	r3, r2
 8012b36:	d010      	beq.n	8012b5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2242      	movs	r2, #66	@ 0x42
 8012b3c:	4313      	orrs	r3, r2
 8012b3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2241      	movs	r2, #65	@ 0x41
 8012b44:	5c9b      	ldrb	r3, [r3, r2]
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	001a      	movs	r2, r3
 8012b4a:	2328      	movs	r3, #40	@ 0x28
 8012b4c:	4013      	ands	r3, r2
 8012b4e:	2b28      	cmp	r3, #40	@ 0x28
 8012b50:	d003      	beq.n	8012b5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	22b0      	movs	r2, #176	@ 0xb0
 8012b56:	4313      	orrs	r3, r2
 8012b58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012b5a:	1cbb      	adds	r3, r7, #2
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	2202      	movs	r2, #2
 8012b60:	4013      	ands	r3, r2
 8012b62:	d010      	beq.n	8012b86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2244      	movs	r2, #68	@ 0x44
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2241      	movs	r2, #65	@ 0x41
 8012b70:	5c9b      	ldrb	r3, [r3, r2]
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	001a      	movs	r2, r3
 8012b76:	2328      	movs	r3, #40	@ 0x28
 8012b78:	4013      	ands	r3, r2
 8012b7a:	2b28      	cmp	r3, #40	@ 0x28
 8012b7c:	d003      	beq.n	8012b86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	22b0      	movs	r2, #176	@ 0xb0
 8012b82:	4313      	orrs	r3, r2
 8012b84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012b86:	1cbb      	adds	r3, r7, #2
 8012b88:	2200      	movs	r2, #0
 8012b8a:	5e9b      	ldrsh	r3, [r3, r2]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	da03      	bge.n	8012b98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	22b8      	movs	r2, #184	@ 0xb8
 8012b94:	4313      	orrs	r3, r2
 8012b96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012b98:	1cbb      	adds	r3, r7, #2
 8012b9a:	881b      	ldrh	r3, [r3, #0]
 8012b9c:	2b10      	cmp	r3, #16
 8012b9e:	d103      	bne.n	8012ba8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2290      	movs	r2, #144	@ 0x90
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012ba8:	1cbb      	adds	r3, r7, #2
 8012baa:	881b      	ldrh	r3, [r3, #0]
 8012bac:	2b20      	cmp	r3, #32
 8012bae:	d103      	bne.n	8012bb8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2220      	movs	r2, #32
 8012bb4:	4313      	orrs	r3, r2
 8012bb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012bb8:	1cbb      	adds	r3, r7, #2
 8012bba:	881b      	ldrh	r3, [r3, #0]
 8012bbc:	2b40      	cmp	r3, #64	@ 0x40
 8012bbe:	d103      	bne.n	8012bc8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2240      	movs	r2, #64	@ 0x40
 8012bc4:	4313      	orrs	r3, r2
 8012bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	681a      	ldr	r2, [r3, #0]
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	43d9      	mvns	r1, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	400a      	ands	r2, r1
 8012bd8:	601a      	str	r2, [r3, #0]
}
 8012bda:	46c0      	nop			@ (mov r8, r8)
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	b004      	add	sp, #16
 8012be0:	bd80      	pop	{r7, pc}
	...

08012be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2241      	movs	r2, #65	@ 0x41
 8012bf2:	5c9b      	ldrb	r3, [r3, r2]
 8012bf4:	b2db      	uxtb	r3, r3
 8012bf6:	2b20      	cmp	r3, #32
 8012bf8:	d138      	bne.n	8012c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2240      	movs	r2, #64	@ 0x40
 8012bfe:	5c9b      	ldrb	r3, [r3, r2]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d101      	bne.n	8012c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012c04:	2302      	movs	r3, #2
 8012c06:	e032      	b.n	8012c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2240      	movs	r2, #64	@ 0x40
 8012c0c:	2101      	movs	r1, #1
 8012c0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2241      	movs	r2, #65	@ 0x41
 8012c14:	2124      	movs	r1, #36	@ 0x24
 8012c16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	681a      	ldr	r2, [r3, #0]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2101      	movs	r1, #1
 8012c24:	438a      	bics	r2, r1
 8012c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	4911      	ldr	r1, [pc, #68]	@ (8012c78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012c34:	400a      	ands	r2, r1
 8012c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	6819      	ldr	r1, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	683a      	ldr	r2, [r7, #0]
 8012c44:	430a      	orrs	r2, r1
 8012c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2101      	movs	r1, #1
 8012c54:	430a      	orrs	r2, r1
 8012c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2241      	movs	r2, #65	@ 0x41
 8012c5c:	2120      	movs	r1, #32
 8012c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2240      	movs	r2, #64	@ 0x40
 8012c64:	2100      	movs	r1, #0
 8012c66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e000      	b.n	8012c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012c6c:	2302      	movs	r3, #2
  }
}
 8012c6e:	0018      	movs	r0, r3
 8012c70:	46bd      	mov	sp, r7
 8012c72:	b002      	add	sp, #8
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	46c0      	nop			@ (mov r8, r8)
 8012c78:	ffffefff 	.word	0xffffefff

08012c7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2241      	movs	r2, #65	@ 0x41
 8012c8a:	5c9b      	ldrb	r3, [r3, r2]
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	2b20      	cmp	r3, #32
 8012c90:	d139      	bne.n	8012d06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2240      	movs	r2, #64	@ 0x40
 8012c96:	5c9b      	ldrb	r3, [r3, r2]
 8012c98:	2b01      	cmp	r3, #1
 8012c9a:	d101      	bne.n	8012ca0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012c9c:	2302      	movs	r3, #2
 8012c9e:	e033      	b.n	8012d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2240      	movs	r2, #64	@ 0x40
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2241      	movs	r2, #65	@ 0x41
 8012cac:	2124      	movs	r1, #36	@ 0x24
 8012cae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2101      	movs	r1, #1
 8012cbc:	438a      	bics	r2, r1
 8012cbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	4a11      	ldr	r2, [pc, #68]	@ (8012d10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012ccc:	4013      	ands	r3, r2
 8012cce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	021b      	lsls	r3, r3, #8
 8012cd4:	68fa      	ldr	r2, [r7, #12]
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2101      	movs	r1, #1
 8012cee:	430a      	orrs	r2, r1
 8012cf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2241      	movs	r2, #65	@ 0x41
 8012cf6:	2120      	movs	r1, #32
 8012cf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2240      	movs	r2, #64	@ 0x40
 8012cfe:	2100      	movs	r1, #0
 8012d00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012d02:	2300      	movs	r3, #0
 8012d04:	e000      	b.n	8012d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012d06:	2302      	movs	r3, #2
  }
}
 8012d08:	0018      	movs	r0, r3
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	b004      	add	sp, #16
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	fffff0ff 	.word	0xfffff0ff

08012d14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b088      	sub	sp, #32
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d101      	bne.n	8012d26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012d22:	2301      	movs	r3, #1
 8012d24:	e0e1      	b.n	8012eea <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2235      	movs	r2, #53	@ 0x35
 8012d2a:	5c9b      	ldrb	r3, [r3, r2]
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d107      	bne.n	8012d42 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2234      	movs	r2, #52	@ 0x34
 8012d36:	2100      	movs	r1, #0
 8012d38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	0018      	movs	r0, r3
 8012d3e:	f7f4 febb 	bl	8007ab8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2235      	movs	r2, #53	@ 0x35
 8012d46:	2102      	movs	r1, #2
 8012d48:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	69da      	ldr	r2, [r3, #28]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4967      	ldr	r1, [pc, #412]	@ (8012ef4 <HAL_I2S_Init+0x1e0>)
 8012d56:	400a      	ands	r2, r1
 8012d58:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	2202      	movs	r2, #2
 8012d60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	695b      	ldr	r3, [r3, #20]
 8012d66:	2b02      	cmp	r3, #2
 8012d68:	d073      	beq.n	8012e52 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d102      	bne.n	8012d78 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012d72:	2310      	movs	r3, #16
 8012d74:	617b      	str	r3, [r7, #20]
 8012d76:	e001      	b.n	8012d7c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012d78:	2320      	movs	r3, #32
 8012d7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	2b20      	cmp	r3, #32
 8012d82:	d802      	bhi.n	8012d8a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012d8a:	f002 fed3 	bl	8015b34 <HAL_RCC_GetSysClockFreq>
 8012d8e:	0003      	movs	r3, r0
 8012d90:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	691a      	ldr	r2, [r3, #16]
 8012d96:	2380      	movs	r3, #128	@ 0x80
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d131      	bne.n	8012e02 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d016      	beq.n	8012dd4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	009b      	lsls	r3, r3, #2
 8012daa:	0019      	movs	r1, r3
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	f7ed f9f9 	bl	80001a4 <__udivsi3>
 8012db2:	0003      	movs	r3, r0
 8012db4:	001a      	movs	r2, r3
 8012db6:	0013      	movs	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	189b      	adds	r3, r3, r2
 8012dbc:	005b      	lsls	r3, r3, #1
 8012dbe:	001a      	movs	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	695b      	ldr	r3, [r3, #20]
 8012dc4:	0019      	movs	r1, r3
 8012dc6:	0010      	movs	r0, r2
 8012dc8:	f7ed f9ec 	bl	80001a4 <__udivsi3>
 8012dcc:	0003      	movs	r3, r0
 8012dce:	3305      	adds	r3, #5
 8012dd0:	613b      	str	r3, [r7, #16]
 8012dd2:	e02a      	b.n	8012e2a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	00db      	lsls	r3, r3, #3
 8012dd8:	0019      	movs	r1, r3
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f7ed f9e2 	bl	80001a4 <__udivsi3>
 8012de0:	0003      	movs	r3, r0
 8012de2:	001a      	movs	r2, r3
 8012de4:	0013      	movs	r3, r2
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	189b      	adds	r3, r3, r2
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	001a      	movs	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	695b      	ldr	r3, [r3, #20]
 8012df2:	0019      	movs	r1, r3
 8012df4:	0010      	movs	r0, r2
 8012df6:	f7ed f9d5 	bl	80001a4 <__udivsi3>
 8012dfa:	0003      	movs	r3, r0
 8012dfc:	3305      	adds	r3, #5
 8012dfe:	613b      	str	r3, [r7, #16]
 8012e00:	e013      	b.n	8012e2a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012e02:	6979      	ldr	r1, [r7, #20]
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	f7ed f9cd 	bl	80001a4 <__udivsi3>
 8012e0a:	0003      	movs	r3, r0
 8012e0c:	001a      	movs	r2, r3
 8012e0e:	0013      	movs	r3, r2
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	189b      	adds	r3, r3, r2
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	001a      	movs	r2, r3
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	695b      	ldr	r3, [r3, #20]
 8012e1c:	0019      	movs	r1, r3
 8012e1e:	0010      	movs	r0, r2
 8012e20:	f7ed f9c0 	bl	80001a4 <__udivsi3>
 8012e24:	0003      	movs	r3, r0
 8012e26:	3305      	adds	r3, #5
 8012e28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	210a      	movs	r1, #10
 8012e2e:	0018      	movs	r0, r3
 8012e30:	f7ed f9b8 	bl	80001a4 <__udivsi3>
 8012e34:	0003      	movs	r3, r0
 8012e36:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	2201      	movs	r2, #1
 8012e3c:	4013      	ands	r3, r2
 8012e3e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012e40:	693a      	ldr	r2, [r7, #16]
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	085b      	lsrs	r3, r3, #1
 8012e48:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	021b      	lsls	r3, r3, #8
 8012e4e:	61bb      	str	r3, [r7, #24]
 8012e50:	e003      	b.n	8012e5a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012e52:	2302      	movs	r3, #2
 8012e54:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012e56:	2300      	movs	r3, #0
 8012e58:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	2b01      	cmp	r3, #1
 8012e5e:	d902      	bls.n	8012e66 <HAL_I2S_Init+0x152>
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	2bff      	cmp	r3, #255	@ 0xff
 8012e64:	d907      	bls.n	8012e76 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e6a:	2210      	movs	r2, #16
 8012e6c:	431a      	orrs	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012e72:	2301      	movs	r3, #1
 8012e74:	e039      	b.n	8012eea <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	691a      	ldr	r2, [r3, #16]
 8012e7a:	69bb      	ldr	r3, [r7, #24]
 8012e7c:	431a      	orrs	r2, r3
 8012e7e:	0011      	movs	r1, r2
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	69fa      	ldr	r2, [r7, #28]
 8012e86:	430a      	orrs	r2, r1
 8012e88:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	69db      	ldr	r3, [r3, #28]
 8012e90:	4a18      	ldr	r2, [pc, #96]	@ (8012ef4 <HAL_I2S_Init+0x1e0>)
 8012e92:	401a      	ands	r2, r3
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6859      	ldr	r1, [r3, #4]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	4319      	orrs	r1, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	4319      	orrs	r1, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	699b      	ldr	r3, [r3, #24]
 8012ea8:	430b      	orrs	r3, r1
 8012eaa:	431a      	orrs	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2180      	movs	r1, #128	@ 0x80
 8012eb2:	0109      	lsls	r1, r1, #4
 8012eb4:	430a      	orrs	r2, r1
 8012eb6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	2b30      	cmp	r3, #48	@ 0x30
 8012ebe:	d003      	beq.n	8012ec8 <HAL_I2S_Init+0x1b4>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	2bb0      	cmp	r3, #176	@ 0xb0
 8012ec6:	d108      	bne.n	8012eda <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	69da      	ldr	r2, [r3, #28]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2180      	movs	r1, #128	@ 0x80
 8012ed4:	0149      	lsls	r1, r1, #5
 8012ed6:	430a      	orrs	r2, r1
 8012ed8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2235      	movs	r2, #53	@ 0x35
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012ee8:	2300      	movs	r3, #0
}
 8012eea:	0018      	movs	r0, r3
 8012eec:	46bd      	mov	sp, r7
 8012eee:	b008      	add	sp, #32
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	46c0      	nop			@ (mov r8, r8)
 8012ef4:	fffff040 	.word	0xfffff040

08012ef8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b086      	sub	sp, #24
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	1dbb      	adds	r3, r7, #6
 8012f04:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d003      	beq.n	8012f14 <HAL_I2S_Receive_DMA+0x1c>
 8012f0c:	1dbb      	adds	r3, r7, #6
 8012f0e:	881b      	ldrh	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d101      	bne.n	8012f18 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012f14:	2301      	movs	r3, #1
 8012f16:	e0a6      	b.n	8013066 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2234      	movs	r2, #52	@ 0x34
 8012f1c:	5c9b      	ldrb	r3, [r3, r2]
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d101      	bne.n	8012f28 <HAL_I2S_Receive_DMA+0x30>
 8012f24:	2302      	movs	r3, #2
 8012f26:	e09e      	b.n	8013066 <HAL_I2S_Receive_DMA+0x16e>
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2234      	movs	r2, #52	@ 0x34
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2235      	movs	r2, #53	@ 0x35
 8012f34:	5c9b      	ldrb	r3, [r3, r2]
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d005      	beq.n	8012f48 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2234      	movs	r2, #52	@ 0x34
 8012f40:	2100      	movs	r1, #0
 8012f42:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012f44:	2302      	movs	r3, #2
 8012f46:	e08e      	b.n	8013066 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2235      	movs	r2, #53	@ 0x35
 8012f4c:	2104      	movs	r1, #4
 8012f4e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2200      	movs	r2, #0
 8012f54:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	68ba      	ldr	r2, [r7, #8]
 8012f5a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	69db      	ldr	r3, [r3, #28]
 8012f62:	2207      	movs	r2, #7
 8012f64:	4013      	ands	r3, r2
 8012f66:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d002      	beq.n	8012f74 <HAL_I2S_Receive_DMA+0x7c>
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	2b05      	cmp	r3, #5
 8012f72:	d10c      	bne.n	8012f8e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012f74:	1dbb      	adds	r3, r7, #6
 8012f76:	881b      	ldrh	r3, [r3, #0]
 8012f78:	18db      	adds	r3, r3, r3
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012f80:	1dbb      	adds	r3, r7, #6
 8012f82:	881b      	ldrh	r3, [r3, #0]
 8012f84:	18db      	adds	r3, r3, r3
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012f8c:	e007      	b.n	8012f9e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	1dba      	adds	r2, r7, #6
 8012f92:	8812      	ldrh	r2, [r2, #0]
 8012f94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	1dba      	adds	r2, r7, #6
 8012f9a:	8812      	ldrh	r2, [r2, #0]
 8012f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fa2:	4a33      	ldr	r2, [pc, #204]	@ (8013070 <HAL_I2S_Receive_DMA+0x178>)
 8012fa4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012faa:	4a32      	ldr	r2, [pc, #200]	@ (8013074 <HAL_I2S_Receive_DMA+0x17c>)
 8012fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fb2:	4a31      	ldr	r2, [pc, #196]	@ (8013078 <HAL_I2S_Receive_DMA+0x180>)
 8012fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	69da      	ldr	r2, [r3, #28]
 8012fbc:	23c0      	movs	r3, #192	@ 0xc0
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	401a      	ands	r2, r3
 8012fc2:	23c0      	movs	r3, #192	@ 0xc0
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d10a      	bne.n	8012fe0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012fca:	2300      	movs	r3, #0
 8012fcc:	613b      	str	r3, [r7, #16]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	613b      	str	r3, [r7, #16]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	613b      	str	r3, [r7, #16]
 8012fde:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	330c      	adds	r3, #12
 8012fea:	0019      	movs	r1, r3
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ff6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012ff8:	f7fc fca2 	bl	800f940 <HAL_DMA_Start_IT>
 8012ffc:	1e03      	subs	r3, r0, #0
 8012ffe:	d00f      	beq.n	8013020 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013004:	2208      	movs	r2, #8
 8013006:	431a      	orrs	r2, r3
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2235      	movs	r2, #53	@ 0x35
 8013010:	2101      	movs	r1, #1
 8013012:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2234      	movs	r2, #52	@ 0x34
 8013018:	2100      	movs	r1, #0
 801301a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801301c:	2301      	movs	r3, #1
 801301e:	e022      	b.n	8013066 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	69da      	ldr	r2, [r3, #28]
 8013026:	2380      	movs	r3, #128	@ 0x80
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	4013      	ands	r3, r2
 801302c:	d108      	bne.n	8013040 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	69da      	ldr	r2, [r3, #28]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2180      	movs	r1, #128	@ 0x80
 801303a:	00c9      	lsls	r1, r1, #3
 801303c:	430a      	orrs	r2, r1
 801303e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	2201      	movs	r2, #1
 8013048:	4013      	ands	r3, r2
 801304a:	d107      	bne.n	801305c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	685a      	ldr	r2, [r3, #4]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2101      	movs	r1, #1
 8013058:	430a      	orrs	r2, r1
 801305a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2234      	movs	r2, #52	@ 0x34
 8013060:	2100      	movs	r1, #0
 8013062:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8013064:	2300      	movs	r3, #0
}
 8013066:	0018      	movs	r0, r3
 8013068:	46bd      	mov	sp, r7
 801306a:	b006      	add	sp, #24
 801306c:	bd80      	pop	{r7, pc}
 801306e:	46c0      	nop			@ (mov r8, r8)
 8013070:	08013259 	.word	0x08013259
 8013074:	08013215 	.word	0x08013215
 8013078:	08013277 	.word	0x08013277

0801307c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b086      	sub	sp, #24
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013084:	2317      	movs	r3, #23
 8013086:	18fb      	adds	r3, r7, r3
 8013088:	2200      	movs	r2, #0
 801308a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	685a      	ldr	r2, [r3, #4]
 8013090:	2380      	movs	r3, #128	@ 0x80
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	429a      	cmp	r2, r3
 8013096:	d003      	beq.n	80130a0 <HAL_I2S_DMAStop+0x24>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d158      	bne.n	8013152 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d010      	beq.n	80130ca <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ac:	0018      	movs	r0, r3
 80130ae:	f7fc fcad 	bl	800fa0c <HAL_DMA_Abort>
 80130b2:	1e03      	subs	r3, r0, #0
 80130b4:	d009      	beq.n	80130ca <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130ba:	2208      	movs	r2, #8
 80130bc:	431a      	orrs	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80130c2:	2317      	movs	r3, #23
 80130c4:	18fb      	adds	r3, r7, r3
 80130c6:	2201      	movs	r2, #1
 80130c8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	2364      	movs	r3, #100	@ 0x64
 80130ce:	2201      	movs	r2, #1
 80130d0:	2102      	movs	r1, #2
 80130d2:	f000 f8f7 	bl	80132c4 <I2S_WaitFlagStateUntilTimeout>
 80130d6:	1e03      	subs	r3, r0, #0
 80130d8:	d00d      	beq.n	80130f6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130de:	2201      	movs	r2, #1
 80130e0:	431a      	orrs	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2235      	movs	r2, #53	@ 0x35
 80130ea:	2101      	movs	r1, #1
 80130ec:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80130ee:	2317      	movs	r3, #23
 80130f0:	18fb      	adds	r3, r7, r3
 80130f2:	2201      	movs	r2, #1
 80130f4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	2364      	movs	r3, #100	@ 0x64
 80130fa:	2200      	movs	r2, #0
 80130fc:	2180      	movs	r1, #128	@ 0x80
 80130fe:	f000 f8e1 	bl	80132c4 <I2S_WaitFlagStateUntilTimeout>
 8013102:	1e03      	subs	r3, r0, #0
 8013104:	d00d      	beq.n	8013122 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801310a:	2201      	movs	r2, #1
 801310c:	431a      	orrs	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2235      	movs	r2, #53	@ 0x35
 8013116:	2101      	movs	r1, #1
 8013118:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801311a:	2317      	movs	r3, #23
 801311c:	18fb      	adds	r3, r7, r3
 801311e:	2201      	movs	r2, #1
 8013120:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	69da      	ldr	r2, [r3, #28]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	4938      	ldr	r1, [pc, #224]	@ (8013210 <HAL_I2S_DMAStop+0x194>)
 801312e:	400a      	ands	r2, r1
 8013130:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8013132:	2300      	movs	r3, #0
 8013134:	613b      	str	r3, [r7, #16]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	689b      	ldr	r3, [r3, #8]
 801313c:	613b      	str	r3, [r7, #16]
 801313e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	685a      	ldr	r2, [r3, #4]
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2102      	movs	r1, #2
 801314c:	438a      	bics	r2, r1
 801314e:	605a      	str	r2, [r3, #4]
 8013150:	e053      	b.n	80131fa <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	685a      	ldr	r2, [r3, #4]
 8013156:	23c0      	movs	r3, #192	@ 0xc0
 8013158:	009b      	lsls	r3, r3, #2
 801315a:	429a      	cmp	r2, r3
 801315c:	d005      	beq.n	801316a <HAL_I2S_DMAStop+0xee>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	685a      	ldr	r2, [r3, #4]
 8013162:	2380      	movs	r3, #128	@ 0x80
 8013164:	005b      	lsls	r3, r3, #1
 8013166:	429a      	cmp	r2, r3
 8013168:	d147      	bne.n	80131fa <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801316e:	2b00      	cmp	r3, #0
 8013170:	d010      	beq.n	8013194 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013176:	0018      	movs	r0, r3
 8013178:	f7fc fc48 	bl	800fa0c <HAL_DMA_Abort>
 801317c:	1e03      	subs	r3, r0, #0
 801317e:	d009      	beq.n	8013194 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013184:	2208      	movs	r2, #8
 8013186:	431a      	orrs	r2, r3
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801318c:	2317      	movs	r3, #23
 801318e:	18fb      	adds	r3, r7, r3
 8013190:	2201      	movs	r2, #1
 8013192:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	69da      	ldr	r2, [r3, #28]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	491c      	ldr	r1, [pc, #112]	@ (8013210 <HAL_I2S_DMAStop+0x194>)
 80131a0:	400a      	ands	r2, r1
 80131a2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80131a4:	2300      	movs	r3, #0
 80131a6:	60fb      	str	r3, [r7, #12]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	60fb      	str	r3, [r7, #12]
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	60fb      	str	r3, [r7, #12]
 80131b8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2101      	movs	r1, #1
 80131c6:	438a      	bics	r2, r1
 80131c8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	685a      	ldr	r2, [r3, #4]
 80131ce:	2380      	movs	r3, #128	@ 0x80
 80131d0:	005b      	lsls	r3, r3, #1
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d10e      	bne.n	80131f4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131da:	2240      	movs	r2, #64	@ 0x40
 80131dc:	431a      	orrs	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2235      	movs	r2, #53	@ 0x35
 80131e6:	2101      	movs	r1, #1
 80131e8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80131ea:	2317      	movs	r3, #23
 80131ec:	18fb      	adds	r3, r7, r3
 80131ee:	2201      	movs	r2, #1
 80131f0:	701a      	strb	r2, [r3, #0]
 80131f2:	e002      	b.n	80131fa <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2235      	movs	r2, #53	@ 0x35
 80131fe:	2101      	movs	r1, #1
 8013200:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8013202:	2317      	movs	r3, #23
 8013204:	18fb      	adds	r3, r7, r3
 8013206:	781b      	ldrb	r3, [r3, #0]
}
 8013208:	0018      	movs	r0, r3
 801320a:	46bd      	mov	sp, r7
 801320c:	b006      	add	sp, #24
 801320e:	bd80      	pop	{r7, pc}
 8013210:	fffffbff 	.word	0xfffffbff

08013214 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013220:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	69db      	ldr	r3, [r3, #28]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d10e      	bne.n	8013248 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	685a      	ldr	r2, [r3, #4]
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2101      	movs	r1, #1
 8013236:	438a      	bics	r2, r1
 8013238:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2200      	movs	r2, #0
 801323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2235      	movs	r2, #53	@ 0x35
 8013244:	2101      	movs	r1, #1
 8013246:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	0018      	movs	r0, r3
 801324c:	f7f9 f97e 	bl	800c54c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013250:	46c0      	nop			@ (mov r8, r8)
 8013252:	46bd      	mov	sp, r7
 8013254:	b004      	add	sp, #16
 8013256:	bd80      	pop	{r7, pc}

08013258 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013264:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	0018      	movs	r0, r3
 801326a:	f7f9 f95d 	bl	800c528 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801326e:	46c0      	nop			@ (mov r8, r8)
 8013270:	46bd      	mov	sp, r7
 8013272:	b004      	add	sp, #16
 8013274:	bd80      	pop	{r7, pc}

08013276 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b084      	sub	sp, #16
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013282:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	685a      	ldr	r2, [r3, #4]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	2103      	movs	r1, #3
 8013290:	438a      	bics	r2, r1
 8013292:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2200      	movs	r2, #0
 8013298:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	2200      	movs	r2, #0
 801329e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2235      	movs	r2, #53	@ 0x35
 80132a4:	2101      	movs	r1, #1
 80132a6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132ac:	2208      	movs	r2, #8
 80132ae:	431a      	orrs	r2, r3
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	0018      	movs	r0, r3
 80132b8:	f7f9 f996 	bl	800c5e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80132bc:	46c0      	nop			@ (mov r8, r8)
 80132be:	46bd      	mov	sp, r7
 80132c0:	b004      	add	sp, #16
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	603b      	str	r3, [r7, #0]
 80132d0:	1dfb      	adds	r3, r7, #7
 80132d2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80132d4:	f7fb fde2 	bl	800ee9c <HAL_GetTick>
 80132d8:	0003      	movs	r3, r0
 80132da:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80132dc:	e017      	b.n	801330e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	3301      	adds	r3, #1
 80132e2:	d014      	beq.n	801330e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80132e4:	f7fb fdda 	bl	800ee9c <HAL_GetTick>
 80132e8:	0002      	movs	r2, r0
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	1ad3      	subs	r3, r2, r3
 80132ee:	683a      	ldr	r2, [r7, #0]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d902      	bls.n	80132fa <I2S_WaitFlagStateUntilTimeout+0x36>
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d109      	bne.n	801330e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2235      	movs	r2, #53	@ 0x35
 80132fe:	2101      	movs	r1, #1
 8013300:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2234      	movs	r2, #52	@ 0x34
 8013306:	2100      	movs	r1, #0
 8013308:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801330a:	2303      	movs	r3, #3
 801330c:	e00f      	b.n	801332e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	689b      	ldr	r3, [r3, #8]
 8013314:	68ba      	ldr	r2, [r7, #8]
 8013316:	4013      	ands	r3, r2
 8013318:	68ba      	ldr	r2, [r7, #8]
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	425a      	negs	r2, r3
 801331e:	4153      	adcs	r3, r2
 8013320:	b2db      	uxtb	r3, r3
 8013322:	001a      	movs	r2, r3
 8013324:	1dfb      	adds	r3, r7, #7
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	429a      	cmp	r2, r3
 801332a:	d1d8      	bne.n	80132de <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801332c:	2300      	movs	r3, #0
}
 801332e:	0018      	movs	r0, r3
 8013330:	46bd      	mov	sp, r7
 8013332:	b006      	add	sp, #24
 8013334:	bd80      	pop	{r7, pc}
	...

08013338 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801333a:	b08b      	sub	sp, #44	@ 0x2c
 801333c:	af06      	add	r7, sp, #24
 801333e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013346:	2301      	movs	r3, #1
 8013348:	e0f0      	b.n	801352c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4a79      	ldr	r2, [pc, #484]	@ (8013534 <HAL_PCD_Init+0x1fc>)
 801334e:	5c9b      	ldrb	r3, [r3, r2]
 8013350:	b2db      	uxtb	r3, r3
 8013352:	2b00      	cmp	r3, #0
 8013354:	d108      	bne.n	8013368 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	23aa      	movs	r3, #170	@ 0xaa
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	2100      	movs	r1, #0
 801335e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	0018      	movs	r0, r3
 8013364:	f009 ff4a 	bl	801d1fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	4a72      	ldr	r2, [pc, #456]	@ (8013534 <HAL_PCD_Init+0x1fc>)
 801336c:	2103      	movs	r1, #3
 801336e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	0018      	movs	r0, r3
 8013376:	f005 fefd 	bl	8019174 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801337a:	230f      	movs	r3, #15
 801337c:	18fb      	adds	r3, r7, r3
 801337e:	2200      	movs	r2, #0
 8013380:	701a      	strb	r2, [r3, #0]
 8013382:	e049      	b.n	8013418 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013384:	200f      	movs	r0, #15
 8013386:	183b      	adds	r3, r7, r0
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	6879      	ldr	r1, [r7, #4]
 801338c:	1c5a      	adds	r2, r3, #1
 801338e:	0013      	movs	r3, r2
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	189b      	adds	r3, r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	18cb      	adds	r3, r1, r3
 8013398:	3301      	adds	r3, #1
 801339a:	2201      	movs	r2, #1
 801339c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801339e:	183b      	adds	r3, r7, r0
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	6879      	ldr	r1, [r7, #4]
 80133a4:	1c5a      	adds	r2, r3, #1
 80133a6:	0013      	movs	r3, r2
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	189b      	adds	r3, r3, r2
 80133ac:	00db      	lsls	r3, r3, #3
 80133ae:	183a      	adds	r2, r7, r0
 80133b0:	7812      	ldrb	r2, [r2, #0]
 80133b2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80133b4:	183b      	adds	r3, r7, r0
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	6879      	ldr	r1, [r7, #4]
 80133ba:	1c5a      	adds	r2, r3, #1
 80133bc:	0013      	movs	r3, r2
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	189b      	adds	r3, r3, r2
 80133c2:	00db      	lsls	r3, r3, #3
 80133c4:	18cb      	adds	r3, r1, r3
 80133c6:	3303      	adds	r3, #3
 80133c8:	2200      	movs	r2, #0
 80133ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80133cc:	183b      	adds	r3, r7, r0
 80133ce:	781a      	ldrb	r2, [r3, #0]
 80133d0:	6879      	ldr	r1, [r7, #4]
 80133d2:	0013      	movs	r3, r2
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	189b      	adds	r3, r3, r2
 80133d8:	00db      	lsls	r3, r3, #3
 80133da:	18cb      	adds	r3, r1, r3
 80133dc:	3338      	adds	r3, #56	@ 0x38
 80133de:	2200      	movs	r2, #0
 80133e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80133e2:	183b      	adds	r3, r7, r0
 80133e4:	781a      	ldrb	r2, [r3, #0]
 80133e6:	6879      	ldr	r1, [r7, #4]
 80133e8:	0013      	movs	r3, r2
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	189b      	adds	r3, r3, r2
 80133ee:	00db      	lsls	r3, r3, #3
 80133f0:	18cb      	adds	r3, r1, r3
 80133f2:	333c      	adds	r3, #60	@ 0x3c
 80133f4:	2200      	movs	r2, #0
 80133f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80133f8:	183b      	adds	r3, r7, r0
 80133fa:	781a      	ldrb	r2, [r3, #0]
 80133fc:	6879      	ldr	r1, [r7, #4]
 80133fe:	0013      	movs	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	189b      	adds	r3, r3, r2
 8013404:	00db      	lsls	r3, r3, #3
 8013406:	18cb      	adds	r3, r1, r3
 8013408:	3340      	adds	r3, #64	@ 0x40
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801340e:	183b      	adds	r3, r7, r0
 8013410:	781a      	ldrb	r2, [r3, #0]
 8013412:	183b      	adds	r3, r7, r0
 8013414:	3201      	adds	r2, #1
 8013416:	701a      	strb	r2, [r3, #0]
 8013418:	210f      	movs	r1, #15
 801341a:	187b      	adds	r3, r7, r1
 801341c:	781a      	ldrb	r2, [r3, #0]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	685b      	ldr	r3, [r3, #4]
 8013422:	429a      	cmp	r2, r3
 8013424:	d3ae      	bcc.n	8013384 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013426:	187b      	adds	r3, r7, r1
 8013428:	2200      	movs	r2, #0
 801342a:	701a      	strb	r2, [r3, #0]
 801342c:	e056      	b.n	80134dc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801342e:	240f      	movs	r4, #15
 8013430:	193b      	adds	r3, r7, r4
 8013432:	781a      	ldrb	r2, [r3, #0]
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	236a      	movs	r3, #106	@ 0x6a
 8013438:	33ff      	adds	r3, #255	@ 0xff
 801343a:	0019      	movs	r1, r3
 801343c:	0013      	movs	r3, r2
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	189b      	adds	r3, r3, r2
 8013442:	00db      	lsls	r3, r3, #3
 8013444:	18c3      	adds	r3, r0, r3
 8013446:	185b      	adds	r3, r3, r1
 8013448:	2200      	movs	r2, #0
 801344a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801344c:	193b      	adds	r3, r7, r4
 801344e:	781a      	ldrb	r2, [r3, #0]
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	23b4      	movs	r3, #180	@ 0xb4
 8013454:	0059      	lsls	r1, r3, #1
 8013456:	0013      	movs	r3, r2
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	189b      	adds	r3, r3, r2
 801345c:	00db      	lsls	r3, r3, #3
 801345e:	18c3      	adds	r3, r0, r3
 8013460:	185b      	adds	r3, r3, r1
 8013462:	193a      	adds	r2, r7, r4
 8013464:	7812      	ldrb	r2, [r2, #0]
 8013466:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013468:	193b      	adds	r3, r7, r4
 801346a:	781a      	ldrb	r2, [r3, #0]
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	236c      	movs	r3, #108	@ 0x6c
 8013470:	33ff      	adds	r3, #255	@ 0xff
 8013472:	0019      	movs	r1, r3
 8013474:	0013      	movs	r3, r2
 8013476:	009b      	lsls	r3, r3, #2
 8013478:	189b      	adds	r3, r3, r2
 801347a:	00db      	lsls	r3, r3, #3
 801347c:	18c3      	adds	r3, r0, r3
 801347e:	185b      	adds	r3, r3, r1
 8013480:	2200      	movs	r2, #0
 8013482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013484:	193b      	adds	r3, r7, r4
 8013486:	781a      	ldrb	r2, [r3, #0]
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	23bc      	movs	r3, #188	@ 0xbc
 801348c:	0059      	lsls	r1, r3, #1
 801348e:	0013      	movs	r3, r2
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	189b      	adds	r3, r3, r2
 8013494:	00db      	lsls	r3, r3, #3
 8013496:	18c3      	adds	r3, r0, r3
 8013498:	185b      	adds	r3, r3, r1
 801349a:	2200      	movs	r2, #0
 801349c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801349e:	193b      	adds	r3, r7, r4
 80134a0:	781a      	ldrb	r2, [r3, #0]
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	23be      	movs	r3, #190	@ 0xbe
 80134a6:	0059      	lsls	r1, r3, #1
 80134a8:	0013      	movs	r3, r2
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	189b      	adds	r3, r3, r2
 80134ae:	00db      	lsls	r3, r3, #3
 80134b0:	18c3      	adds	r3, r0, r3
 80134b2:	185b      	adds	r3, r3, r1
 80134b4:	2200      	movs	r2, #0
 80134b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80134b8:	193b      	adds	r3, r7, r4
 80134ba:	781a      	ldrb	r2, [r3, #0]
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	23c0      	movs	r3, #192	@ 0xc0
 80134c0:	0059      	lsls	r1, r3, #1
 80134c2:	0013      	movs	r3, r2
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	189b      	adds	r3, r3, r2
 80134c8:	00db      	lsls	r3, r3, #3
 80134ca:	18c3      	adds	r3, r0, r3
 80134cc:	185b      	adds	r3, r3, r1
 80134ce:	2200      	movs	r2, #0
 80134d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80134d2:	193b      	adds	r3, r7, r4
 80134d4:	781a      	ldrb	r2, [r3, #0]
 80134d6:	193b      	adds	r3, r7, r4
 80134d8:	3201      	adds	r2, #1
 80134da:	701a      	strb	r2, [r3, #0]
 80134dc:	230f      	movs	r3, #15
 80134de:	18fb      	adds	r3, r7, r3
 80134e0:	781a      	ldrb	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d3a1      	bcc.n	801342e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6818      	ldr	r0, [r3, #0]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	466a      	mov	r2, sp
 80134f2:	0011      	movs	r1, r2
 80134f4:	001a      	movs	r2, r3
 80134f6:	3210      	adds	r2, #16
 80134f8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80134fa:	c170      	stmia	r1!, {r4, r5, r6}
 80134fc:	ca30      	ldmia	r2!, {r4, r5}
 80134fe:	c130      	stmia	r1!, {r4, r5}
 8013500:	6859      	ldr	r1, [r3, #4]
 8013502:	689a      	ldr	r2, [r3, #8]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	f005 fe4f 	bl	80191a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2224      	movs	r2, #36	@ 0x24
 801350e:	2100      	movs	r1, #0
 8013510:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4a07      	ldr	r2, [pc, #28]	@ (8013534 <HAL_PCD_Init+0x1fc>)
 8013516:	2101      	movs	r1, #1
 8013518:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	69db      	ldr	r3, [r3, #28]
 801351e:	2b01      	cmp	r3, #1
 8013520:	d103      	bne.n	801352a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	0018      	movs	r0, r3
 8013526:	f001 fd23 	bl	8014f70 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801352a:	2300      	movs	r3, #0
}
 801352c:	0018      	movs	r0, r3
 801352e:	46bd      	mov	sp, r7
 8013530:	b005      	add	sp, #20
 8013532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013534:	000002a9 	.word	0x000002a9

08013538 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b082      	sub	sp, #8
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	23aa      	movs	r3, #170	@ 0xaa
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	5cd3      	ldrb	r3, [r2, r3]
 8013548:	2b01      	cmp	r3, #1
 801354a:	d101      	bne.n	8013550 <HAL_PCD_Start+0x18>
 801354c:	2302      	movs	r3, #2
 801354e:	e014      	b.n	801357a <HAL_PCD_Start+0x42>
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	23aa      	movs	r3, #170	@ 0xaa
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	2101      	movs	r1, #1
 8013558:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	0018      	movs	r0, r3
 8013560:	f005 fdf2 	bl	8019148 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	0018      	movs	r0, r3
 801356a:	f007 fdf5 	bl	801b158 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	23aa      	movs	r3, #170	@ 0xaa
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	2100      	movs	r1, #0
 8013576:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013578:	2300      	movs	r3, #0
}
 801357a:	0018      	movs	r0, r3
 801357c:	46bd      	mov	sp, r7
 801357e:	b002      	add	sp, #8
 8013580:	bd80      	pop	{r7, pc}
	...

08013584 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	0018      	movs	r0, r3
 8013592:	f007 fdf7 	bl	801b184 <USB_ReadInterrupts>
 8013596:	0003      	movs	r3, r0
 8013598:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801359a:	68fa      	ldr	r2, [r7, #12]
 801359c:	2380      	movs	r3, #128	@ 0x80
 801359e:	021b      	lsls	r3, r3, #8
 80135a0:	4013      	ands	r3, r2
 80135a2:	d004      	beq.n	80135ae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	0018      	movs	r0, r3
 80135a8:	f000 fb62 	bl	8013c70 <PCD_EP_ISR_Handler>

    return;
 80135ac:	e11d      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80135ae:	68fa      	ldr	r2, [r7, #12]
 80135b0:	2380      	movs	r3, #128	@ 0x80
 80135b2:	00db      	lsls	r3, r3, #3
 80135b4:	4013      	ands	r3, r2
 80135b6:	d015      	beq.n	80135e4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	2244      	movs	r2, #68	@ 0x44
 80135be:	5a9b      	ldrh	r3, [r3, r2]
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	498a      	ldr	r1, [pc, #552]	@ (80137f0 <HAL_PCD_IRQHandler+0x26c>)
 80135c8:	400a      	ands	r2, r1
 80135ca:	b291      	uxth	r1, r2
 80135cc:	2244      	movs	r2, #68	@ 0x44
 80135ce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	0018      	movs	r0, r3
 80135d4:	f009 fe95 	bl	801d302 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2100      	movs	r1, #0
 80135dc:	0018      	movs	r0, r3
 80135de:	f000 f915 	bl	801380c <HAL_PCD_SetAddress>

    return;
 80135e2:	e102      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80135e4:	68fa      	ldr	r2, [r7, #12]
 80135e6:	2380      	movs	r3, #128	@ 0x80
 80135e8:	01db      	lsls	r3, r3, #7
 80135ea:	4013      	ands	r3, r2
 80135ec:	d00c      	beq.n	8013608 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2244      	movs	r2, #68	@ 0x44
 80135f4:	5a9b      	ldrh	r3, [r3, r2]
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	497d      	ldr	r1, [pc, #500]	@ (80137f4 <HAL_PCD_IRQHandler+0x270>)
 80135fe:	400a      	ands	r2, r1
 8013600:	b291      	uxth	r1, r2
 8013602:	2244      	movs	r2, #68	@ 0x44
 8013604:	5299      	strh	r1, [r3, r2]

    return;
 8013606:	e0f0      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8013608:	68fa      	ldr	r2, [r7, #12]
 801360a:	2380      	movs	r3, #128	@ 0x80
 801360c:	019b      	lsls	r3, r3, #6
 801360e:	4013      	ands	r3, r2
 8013610:	d00c      	beq.n	801362c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2244      	movs	r2, #68	@ 0x44
 8013618:	5a9b      	ldrh	r3, [r3, r2]
 801361a:	b29a      	uxth	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4975      	ldr	r1, [pc, #468]	@ (80137f8 <HAL_PCD_IRQHandler+0x274>)
 8013622:	400a      	ands	r2, r1
 8013624:	b291      	uxth	r1, r2
 8013626:	2244      	movs	r2, #68	@ 0x44
 8013628:	5299      	strh	r1, [r3, r2]

    return;
 801362a:	e0de      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	2380      	movs	r3, #128	@ 0x80
 8013630:	015b      	lsls	r3, r3, #5
 8013632:	4013      	ands	r3, r2
 8013634:	d038      	beq.n	80136a8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2240      	movs	r2, #64	@ 0x40
 801363c:	5a9b      	ldrh	r3, [r3, r2]
 801363e:	b29a      	uxth	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2104      	movs	r1, #4
 8013646:	438a      	bics	r2, r1
 8013648:	b291      	uxth	r1, r2
 801364a:	2240      	movs	r2, #64	@ 0x40
 801364c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2240      	movs	r2, #64	@ 0x40
 8013654:	5a9b      	ldrh	r3, [r3, r2]
 8013656:	b29a      	uxth	r2, r3
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	2108      	movs	r1, #8
 801365e:	438a      	bics	r2, r1
 8013660:	b291      	uxth	r1, r2
 8013662:	2240      	movs	r2, #64	@ 0x40
 8013664:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	23b8      	movs	r3, #184	@ 0xb8
 801366a:	009b      	lsls	r3, r3, #2
 801366c:	5cd3      	ldrb	r3, [r2, r3]
 801366e:	2b01      	cmp	r3, #1
 8013670:	d109      	bne.n	8013686 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	23b8      	movs	r3, #184	@ 0xb8
 8013676:	009b      	lsls	r3, r3, #2
 8013678:	2100      	movs	r1, #0
 801367a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2100      	movs	r1, #0
 8013680:	0018      	movs	r0, r3
 8013682:	f001 fc9f 	bl	8014fc4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	0018      	movs	r0, r3
 801368a:	f009 fe7b 	bl	801d384 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2244      	movs	r2, #68	@ 0x44
 8013694:	5a9b      	ldrh	r3, [r3, r2]
 8013696:	b29a      	uxth	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	4957      	ldr	r1, [pc, #348]	@ (80137fc <HAL_PCD_IRQHandler+0x278>)
 801369e:	400a      	ands	r2, r1
 80136a0:	b291      	uxth	r1, r2
 80136a2:	2244      	movs	r2, #68	@ 0x44
 80136a4:	5299      	strh	r1, [r3, r2]

    return;
 80136a6:	e0a0      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80136a8:	68fa      	ldr	r2, [r7, #12]
 80136aa:	2380      	movs	r3, #128	@ 0x80
 80136ac:	011b      	lsls	r3, r3, #4
 80136ae:	4013      	ands	r3, r2
 80136b0:	d028      	beq.n	8013704 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2240      	movs	r2, #64	@ 0x40
 80136b8:	5a9b      	ldrh	r3, [r3, r2]
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2108      	movs	r1, #8
 80136c2:	430a      	orrs	r2, r1
 80136c4:	b291      	uxth	r1, r2
 80136c6:	2240      	movs	r2, #64	@ 0x40
 80136c8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	2244      	movs	r2, #68	@ 0x44
 80136d0:	5a9b      	ldrh	r3, [r3, r2]
 80136d2:	b29a      	uxth	r2, r3
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	4949      	ldr	r1, [pc, #292]	@ (8013800 <HAL_PCD_IRQHandler+0x27c>)
 80136da:	400a      	ands	r2, r1
 80136dc:	b291      	uxth	r1, r2
 80136de:	2244      	movs	r2, #68	@ 0x44
 80136e0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2240      	movs	r2, #64	@ 0x40
 80136e8:	5a9b      	ldrh	r3, [r3, r2]
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	2104      	movs	r1, #4
 80136f2:	430a      	orrs	r2, r1
 80136f4:	b291      	uxth	r1, r2
 80136f6:	2240      	movs	r2, #64	@ 0x40
 80136f8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	0018      	movs	r0, r3
 80136fe:	f009 fe25 	bl	801d34c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013702:	e072      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2280      	movs	r2, #128	@ 0x80
 8013708:	4013      	ands	r3, r2
 801370a:	d046      	beq.n	801379a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2244      	movs	r2, #68	@ 0x44
 8013712:	5a9b      	ldrh	r3, [r3, r2]
 8013714:	b29a      	uxth	r2, r3
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2180      	movs	r1, #128	@ 0x80
 801371c:	438a      	bics	r2, r1
 801371e:	b291      	uxth	r1, r2
 8013720:	2244      	movs	r2, #68	@ 0x44
 8013722:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	23b8      	movs	r3, #184	@ 0xb8
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	5cd3      	ldrb	r3, [r2, r3]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d12f      	bne.n	8013790 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2240      	movs	r2, #64	@ 0x40
 8013736:	5a9b      	ldrh	r3, [r3, r2]
 8013738:	b29a      	uxth	r2, r3
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	2104      	movs	r1, #4
 8013740:	430a      	orrs	r2, r1
 8013742:	b291      	uxth	r1, r2
 8013744:	2240      	movs	r2, #64	@ 0x40
 8013746:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	2240      	movs	r2, #64	@ 0x40
 801374e:	5a9b      	ldrh	r3, [r3, r2]
 8013750:	b29a      	uxth	r2, r3
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	2108      	movs	r1, #8
 8013758:	430a      	orrs	r2, r1
 801375a:	b291      	uxth	r1, r2
 801375c:	2240      	movs	r2, #64	@ 0x40
 801375e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	23b8      	movs	r3, #184	@ 0xb8
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	2101      	movs	r1, #1
 8013768:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2254      	movs	r2, #84	@ 0x54
 8013770:	5a9b      	ldrh	r3, [r3, r2]
 8013772:	b29b      	uxth	r3, r3
 8013774:	089b      	lsrs	r3, r3, #2
 8013776:	223c      	movs	r2, #60	@ 0x3c
 8013778:	4013      	ands	r3, r2
 801377a:	0019      	movs	r1, r3
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	23b9      	movs	r3, #185	@ 0xb9
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2101      	movs	r1, #1
 8013788:	0018      	movs	r0, r3
 801378a:	f001 fc1b 	bl	8014fc4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801378e:	e02c      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	0018      	movs	r0, r3
 8013794:	f009 fdda 	bl	801d34c <HAL_PCD_SuspendCallback>
    return;
 8013798:	e027      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801379a:	68fa      	ldr	r2, [r7, #12]
 801379c:	2380      	movs	r3, #128	@ 0x80
 801379e:	009b      	lsls	r3, r3, #2
 80137a0:	4013      	ands	r3, r2
 80137a2:	d010      	beq.n	80137c6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2244      	movs	r2, #68	@ 0x44
 80137aa:	5a9b      	ldrh	r3, [r3, r2]
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	4914      	ldr	r1, [pc, #80]	@ (8013804 <HAL_PCD_IRQHandler+0x280>)
 80137b4:	400a      	ands	r2, r1
 80137b6:	b291      	uxth	r1, r2
 80137b8:	2244      	movs	r2, #68	@ 0x44
 80137ba:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	0018      	movs	r0, r3
 80137c0:	f009 fd90 	bl	801d2e4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80137c4:	e011      	b.n	80137ea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80137c6:	68fa      	ldr	r2, [r7, #12]
 80137c8:	2380      	movs	r3, #128	@ 0x80
 80137ca:	005b      	lsls	r3, r3, #1
 80137cc:	4013      	ands	r3, r2
 80137ce:	d00c      	beq.n	80137ea <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	2244      	movs	r2, #68	@ 0x44
 80137d6:	5a9b      	ldrh	r3, [r3, r2]
 80137d8:	b29a      	uxth	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	490a      	ldr	r1, [pc, #40]	@ (8013808 <HAL_PCD_IRQHandler+0x284>)
 80137e0:	400a      	ands	r2, r1
 80137e2:	b291      	uxth	r1, r2
 80137e4:	2244      	movs	r2, #68	@ 0x44
 80137e6:	5299      	strh	r1, [r3, r2]

    return;
 80137e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80137ea:	46bd      	mov	sp, r7
 80137ec:	b004      	add	sp, #16
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	fffffbff 	.word	0xfffffbff
 80137f4:	ffffbfff 	.word	0xffffbfff
 80137f8:	ffffdfff 	.word	0xffffdfff
 80137fc:	ffffefff 	.word	0xffffefff
 8013800:	fffff7ff 	.word	0xfffff7ff
 8013804:	fffffdff 	.word	0xfffffdff
 8013808:	fffffeff 	.word	0xfffffeff

0801380c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	000a      	movs	r2, r1
 8013816:	1cfb      	adds	r3, r7, #3
 8013818:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	23aa      	movs	r3, #170	@ 0xaa
 801381e:	009b      	lsls	r3, r3, #2
 8013820:	5cd3      	ldrb	r3, [r2, r3]
 8013822:	2b01      	cmp	r3, #1
 8013824:	d101      	bne.n	801382a <HAL_PCD_SetAddress+0x1e>
 8013826:	2302      	movs	r3, #2
 8013828:	e017      	b.n	801385a <HAL_PCD_SetAddress+0x4e>
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	23aa      	movs	r3, #170	@ 0xaa
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	2101      	movs	r1, #1
 8013832:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	1cfa      	adds	r2, r7, #3
 8013838:	2124      	movs	r1, #36	@ 0x24
 801383a:	7812      	ldrb	r2, [r2, #0]
 801383c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	1cfb      	adds	r3, r7, #3
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	0019      	movs	r1, r3
 8013848:	0010      	movs	r0, r2
 801384a:	f007 fc71 	bl	801b130 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	23aa      	movs	r3, #170	@ 0xaa
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	2100      	movs	r1, #0
 8013856:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013858:	2300      	movs	r3, #0
}
 801385a:	0018      	movs	r0, r3
 801385c:	46bd      	mov	sp, r7
 801385e:	b002      	add	sp, #8
 8013860:	bd80      	pop	{r7, pc}

08013862 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013862:	b590      	push	{r4, r7, lr}
 8013864:	b085      	sub	sp, #20
 8013866:	af00      	add	r7, sp, #0
 8013868:	6078      	str	r0, [r7, #4]
 801386a:	000c      	movs	r4, r1
 801386c:	0010      	movs	r0, r2
 801386e:	0019      	movs	r1, r3
 8013870:	1cfb      	adds	r3, r7, #3
 8013872:	1c22      	adds	r2, r4, #0
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	003b      	movs	r3, r7
 8013878:	1c02      	adds	r2, r0, #0
 801387a:	801a      	strh	r2, [r3, #0]
 801387c:	1cbb      	adds	r3, r7, #2
 801387e:	1c0a      	adds	r2, r1, #0
 8013880:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013882:	230b      	movs	r3, #11
 8013884:	18fb      	adds	r3, r7, r3
 8013886:	2200      	movs	r2, #0
 8013888:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801388a:	1cfb      	adds	r3, r7, #3
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	b25b      	sxtb	r3, r3
 8013890:	2b00      	cmp	r3, #0
 8013892:	da0f      	bge.n	80138b4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013894:	1cfb      	adds	r3, r7, #3
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	2207      	movs	r2, #7
 801389a:	4013      	ands	r3, r2
 801389c:	1c5a      	adds	r2, r3, #1
 801389e:	0013      	movs	r3, r2
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	189b      	adds	r3, r3, r2
 80138a4:	00db      	lsls	r3, r3, #3
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	18d3      	adds	r3, r2, r3
 80138aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	2201      	movs	r2, #1
 80138b0:	705a      	strb	r2, [r3, #1]
 80138b2:	e00f      	b.n	80138d4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80138b4:	1cfb      	adds	r3, r7, #3
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	2207      	movs	r2, #7
 80138ba:	401a      	ands	r2, r3
 80138bc:	0013      	movs	r3, r2
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	189b      	adds	r3, r3, r2
 80138c2:	00db      	lsls	r3, r3, #3
 80138c4:	3369      	adds	r3, #105	@ 0x69
 80138c6:	33ff      	adds	r3, #255	@ 0xff
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	18d3      	adds	r3, r2, r3
 80138cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2200      	movs	r2, #0
 80138d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80138d4:	1cfb      	adds	r3, r7, #3
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	2207      	movs	r2, #7
 80138da:	4013      	ands	r3, r2
 80138dc:	b2da      	uxtb	r2, r3
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80138e2:	003b      	movs	r3, r7
 80138e4:	881a      	ldrh	r2, [r3, #0]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	1cba      	adds	r2, r7, #2
 80138ee:	7812      	ldrb	r2, [r2, #0]
 80138f0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80138f2:	1cbb      	adds	r3, r7, #2
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	2b02      	cmp	r3, #2
 80138f8:	d102      	bne.n	8013900 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	23aa      	movs	r3, #170	@ 0xaa
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	5cd3      	ldrb	r3, [r2, r3]
 8013908:	2b01      	cmp	r3, #1
 801390a:	d101      	bne.n	8013910 <HAL_PCD_EP_Open+0xae>
 801390c:	2302      	movs	r3, #2
 801390e:	e013      	b.n	8013938 <HAL_PCD_EP_Open+0xd6>
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	23aa      	movs	r3, #170	@ 0xaa
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	2101      	movs	r1, #1
 8013918:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	0011      	movs	r1, r2
 8013922:	0018      	movs	r0, r3
 8013924:	f005 fc68 	bl	80191f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	23aa      	movs	r3, #170	@ 0xaa
 801392c:	009b      	lsls	r3, r3, #2
 801392e:	2100      	movs	r1, #0
 8013930:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013932:	230b      	movs	r3, #11
 8013934:	18fb      	adds	r3, r7, r3
 8013936:	781b      	ldrb	r3, [r3, #0]
}
 8013938:	0018      	movs	r0, r3
 801393a:	46bd      	mov	sp, r7
 801393c:	b005      	add	sp, #20
 801393e:	bd90      	pop	{r4, r7, pc}

08013940 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	000a      	movs	r2, r1
 801394a:	1cfb      	adds	r3, r7, #3
 801394c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801394e:	1cfb      	adds	r3, r7, #3
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	b25b      	sxtb	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	da0f      	bge.n	8013978 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013958:	1cfb      	adds	r3, r7, #3
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	2207      	movs	r2, #7
 801395e:	4013      	ands	r3, r2
 8013960:	1c5a      	adds	r2, r3, #1
 8013962:	0013      	movs	r3, r2
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	189b      	adds	r3, r3, r2
 8013968:	00db      	lsls	r3, r3, #3
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	18d3      	adds	r3, r2, r3
 801396e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2201      	movs	r2, #1
 8013974:	705a      	strb	r2, [r3, #1]
 8013976:	e00f      	b.n	8013998 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013978:	1cfb      	adds	r3, r7, #3
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	2207      	movs	r2, #7
 801397e:	401a      	ands	r2, r3
 8013980:	0013      	movs	r3, r2
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	189b      	adds	r3, r3, r2
 8013986:	00db      	lsls	r3, r3, #3
 8013988:	3369      	adds	r3, #105	@ 0x69
 801398a:	33ff      	adds	r3, #255	@ 0xff
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	18d3      	adds	r3, r2, r3
 8013990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2200      	movs	r2, #0
 8013996:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013998:	1cfb      	adds	r3, r7, #3
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2207      	movs	r2, #7
 801399e:	4013      	ands	r3, r2
 80139a0:	b2da      	uxtb	r2, r3
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	23aa      	movs	r3, #170	@ 0xaa
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	5cd3      	ldrb	r3, [r2, r3]
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d101      	bne.n	80139b6 <HAL_PCD_EP_Close+0x76>
 80139b2:	2302      	movs	r3, #2
 80139b4:	e011      	b.n	80139da <HAL_PCD_EP_Close+0x9a>
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	23aa      	movs	r3, #170	@ 0xaa
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	2101      	movs	r1, #1
 80139be:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	68fa      	ldr	r2, [r7, #12]
 80139c6:	0011      	movs	r1, r2
 80139c8:	0018      	movs	r0, r3
 80139ca:	f005 ffb7 	bl	801993c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	23aa      	movs	r3, #170	@ 0xaa
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	2100      	movs	r1, #0
 80139d6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80139d8:	2300      	movs	r3, #0
}
 80139da:	0018      	movs	r0, r3
 80139dc:	46bd      	mov	sp, r7
 80139de:	b004      	add	sp, #16
 80139e0:	bd80      	pop	{r7, pc}

080139e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b086      	sub	sp, #24
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	60f8      	str	r0, [r7, #12]
 80139ea:	607a      	str	r2, [r7, #4]
 80139ec:	603b      	str	r3, [r7, #0]
 80139ee:	200b      	movs	r0, #11
 80139f0:	183b      	adds	r3, r7, r0
 80139f2:	1c0a      	adds	r2, r1, #0
 80139f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80139f6:	0001      	movs	r1, r0
 80139f8:	187b      	adds	r3, r7, r1
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2207      	movs	r2, #7
 80139fe:	401a      	ands	r2, r3
 8013a00:	0013      	movs	r3, r2
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	189b      	adds	r3, r3, r2
 8013a06:	00db      	lsls	r3, r3, #3
 8013a08:	3369      	adds	r3, #105	@ 0x69
 8013a0a:	33ff      	adds	r3, #255	@ 0xff
 8013a0c:	68fa      	ldr	r2, [r7, #12]
 8013a0e:	18d3      	adds	r3, r2, r3
 8013a10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	2200      	movs	r2, #0
 8013a22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	2200      	movs	r2, #0
 8013a28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a2a:	187b      	adds	r3, r7, r1
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	2207      	movs	r2, #7
 8013a30:	4013      	ands	r3, r2
 8013a32:	b2da      	uxtb	r2, r3
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	697a      	ldr	r2, [r7, #20]
 8013a3e:	0011      	movs	r1, r2
 8013a40:	0018      	movs	r0, r3
 8013a42:	f006 f93b 	bl	8019cbc <USB_EPStartXfer>

  return HAL_OK;
 8013a46:	2300      	movs	r3, #0
}
 8013a48:	0018      	movs	r0, r3
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	b006      	add	sp, #24
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	000a      	movs	r2, r1
 8013a5a:	1cfb      	adds	r3, r7, #3
 8013a5c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013a5e:	1cfb      	adds	r3, r7, #3
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	2207      	movs	r2, #7
 8013a64:	401a      	ands	r2, r3
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	23c2      	movs	r3, #194	@ 0xc2
 8013a6a:	0059      	lsls	r1, r3, #1
 8013a6c:	0013      	movs	r3, r2
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	189b      	adds	r3, r3, r2
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	18c3      	adds	r3, r0, r3
 8013a76:	185b      	adds	r3, r3, r1
 8013a78:	681b      	ldr	r3, [r3, #0]
}
 8013a7a:	0018      	movs	r0, r3
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	b002      	add	sp, #8
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b086      	sub	sp, #24
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	60f8      	str	r0, [r7, #12]
 8013a8a:	607a      	str	r2, [r7, #4]
 8013a8c:	603b      	str	r3, [r7, #0]
 8013a8e:	200b      	movs	r0, #11
 8013a90:	183b      	adds	r3, r7, r0
 8013a92:	1c0a      	adds	r2, r1, #0
 8013a94:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013a96:	183b      	adds	r3, r7, r0
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	2207      	movs	r2, #7
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	1c5a      	adds	r2, r3, #1
 8013aa0:	0013      	movs	r3, r2
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	189b      	adds	r3, r3, r2
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	18d3      	adds	r3, r2, r3
 8013aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	683a      	ldr	r2, [r7, #0]
 8013ab8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2224      	movs	r2, #36	@ 0x24
 8013abe:	2101      	movs	r1, #1
 8013ac0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	683a      	ldr	r2, [r7, #0]
 8013ac6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	2200      	movs	r2, #0
 8013acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013ad4:	183b      	adds	r3, r7, r0
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	2207      	movs	r2, #7
 8013ada:	4013      	ands	r3, r2
 8013adc:	b2da      	uxtb	r2, r3
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	0011      	movs	r1, r2
 8013aea:	0018      	movs	r0, r3
 8013aec:	f006 f8e6 	bl	8019cbc <USB_EPStartXfer>

  return HAL_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	0018      	movs	r0, r3
 8013af4:	46bd      	mov	sp, r7
 8013af6:	b006      	add	sp, #24
 8013af8:	bd80      	pop	{r7, pc}

08013afa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b084      	sub	sp, #16
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
 8013b02:	000a      	movs	r2, r1
 8013b04:	1cfb      	adds	r3, r7, #3
 8013b06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013b08:	1cfb      	adds	r3, r7, #3
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	2207      	movs	r2, #7
 8013b0e:	401a      	ands	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d901      	bls.n	8013b1c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e046      	b.n	8013baa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013b1c:	1cfb      	adds	r3, r7, #3
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	b25b      	sxtb	r3, r3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	da0f      	bge.n	8013b46 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013b26:	1cfb      	adds	r3, r7, #3
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	2207      	movs	r2, #7
 8013b2c:	4013      	ands	r3, r2
 8013b2e:	1c5a      	adds	r2, r3, #1
 8013b30:	0013      	movs	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	189b      	adds	r3, r3, r2
 8013b36:	00db      	lsls	r3, r3, #3
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	18d3      	adds	r3, r2, r3
 8013b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2201      	movs	r2, #1
 8013b42:	705a      	strb	r2, [r3, #1]
 8013b44:	e00d      	b.n	8013b62 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013b46:	1cfb      	adds	r3, r7, #3
 8013b48:	781a      	ldrb	r2, [r3, #0]
 8013b4a:	0013      	movs	r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	189b      	adds	r3, r3, r2
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	3369      	adds	r3, #105	@ 0x69
 8013b54:	33ff      	adds	r3, #255	@ 0xff
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	18d3      	adds	r3, r2, r3
 8013b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2201      	movs	r2, #1
 8013b66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013b68:	1cfb      	adds	r3, r7, #3
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	2207      	movs	r2, #7
 8013b6e:	4013      	ands	r3, r2
 8013b70:	b2da      	uxtb	r2, r3
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	23aa      	movs	r3, #170	@ 0xaa
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	5cd3      	ldrb	r3, [r2, r3]
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	d101      	bne.n	8013b86 <HAL_PCD_EP_SetStall+0x8c>
 8013b82:	2302      	movs	r3, #2
 8013b84:	e011      	b.n	8013baa <HAL_PCD_EP_SetStall+0xb0>
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	23aa      	movs	r3, #170	@ 0xaa
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	2101      	movs	r1, #1
 8013b8e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	0011      	movs	r1, r2
 8013b98:	0018      	movs	r0, r3
 8013b9a:	f007 f9c7 	bl	801af2c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	23aa      	movs	r3, #170	@ 0xaa
 8013ba2:	009b      	lsls	r3, r3, #2
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	0018      	movs	r0, r3
 8013bac:	46bd      	mov	sp, r7
 8013bae:	b004      	add	sp, #16
 8013bb0:	bd80      	pop	{r7, pc}

08013bb2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013bb2:	b580      	push	{r7, lr}
 8013bb4:	b084      	sub	sp, #16
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
 8013bba:	000a      	movs	r2, r1
 8013bbc:	1cfb      	adds	r3, r7, #3
 8013bbe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013bc0:	1cfb      	adds	r3, r7, #3
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	220f      	movs	r2, #15
 8013bc6:	401a      	ands	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d901      	bls.n	8013bd4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	e048      	b.n	8013c66 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013bd4:	1cfb      	adds	r3, r7, #3
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	b25b      	sxtb	r3, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	da0f      	bge.n	8013bfe <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013bde:	1cfb      	adds	r3, r7, #3
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	2207      	movs	r2, #7
 8013be4:	4013      	ands	r3, r2
 8013be6:	1c5a      	adds	r2, r3, #1
 8013be8:	0013      	movs	r3, r2
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	189b      	adds	r3, r3, r2
 8013bee:	00db      	lsls	r3, r3, #3
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	18d3      	adds	r3, r2, r3
 8013bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	705a      	strb	r2, [r3, #1]
 8013bfc:	e00f      	b.n	8013c1e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013bfe:	1cfb      	adds	r3, r7, #3
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	2207      	movs	r2, #7
 8013c04:	401a      	ands	r2, r3
 8013c06:	0013      	movs	r3, r2
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	189b      	adds	r3, r3, r2
 8013c0c:	00db      	lsls	r3, r3, #3
 8013c0e:	3369      	adds	r3, #105	@ 0x69
 8013c10:	33ff      	adds	r3, #255	@ 0xff
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	18d3      	adds	r3, r2, r3
 8013c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2200      	movs	r2, #0
 8013c22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013c24:	1cfb      	adds	r3, r7, #3
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2207      	movs	r2, #7
 8013c2a:	4013      	ands	r3, r2
 8013c2c:	b2da      	uxtb	r2, r3
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	23aa      	movs	r3, #170	@ 0xaa
 8013c36:	009b      	lsls	r3, r3, #2
 8013c38:	5cd3      	ldrb	r3, [r2, r3]
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d101      	bne.n	8013c42 <HAL_PCD_EP_ClrStall+0x90>
 8013c3e:	2302      	movs	r3, #2
 8013c40:	e011      	b.n	8013c66 <HAL_PCD_EP_ClrStall+0xb4>
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	23aa      	movs	r3, #170	@ 0xaa
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	2101      	movs	r1, #1
 8013c4a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	0011      	movs	r1, r2
 8013c54:	0018      	movs	r0, r3
 8013c56:	f007 f9b9 	bl	801afcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	23aa      	movs	r3, #170	@ 0xaa
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	2100      	movs	r1, #0
 8013c62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013c64:	2300      	movs	r3, #0
}
 8013c66:	0018      	movs	r0, r3
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	b004      	add	sp, #16
 8013c6c:	bd80      	pop	{r7, pc}
	...

08013c70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013c70:	b5b0      	push	{r4, r5, r7, lr}
 8013c72:	b096      	sub	sp, #88	@ 0x58
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013c78:	f000 fbec 	bl	8014454 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	204e      	movs	r0, #78	@ 0x4e
 8013c82:	183b      	adds	r3, r7, r0
 8013c84:	2144      	movs	r1, #68	@ 0x44
 8013c86:	5a52      	ldrh	r2, [r2, r1]
 8013c88:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013c8a:	183b      	adds	r3, r7, r0
 8013c8c:	881b      	ldrh	r3, [r3, #0]
 8013c8e:	b2da      	uxtb	r2, r3
 8013c90:	244d      	movs	r4, #77	@ 0x4d
 8013c92:	193b      	adds	r3, r7, r4
 8013c94:	210f      	movs	r1, #15
 8013c96:	400a      	ands	r2, r1
 8013c98:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013c9a:	193b      	adds	r3, r7, r4
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d000      	beq.n	8013ca4 <PCD_EP_ISR_Handler+0x34>
 8013ca2:	e18f      	b.n	8013fc4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013ca4:	183b      	adds	r3, r7, r0
 8013ca6:	881b      	ldrh	r3, [r3, #0]
 8013ca8:	2210      	movs	r2, #16
 8013caa:	4013      	ands	r3, r2
 8013cac:	d155      	bne.n	8013d5a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	881b      	ldrh	r3, [r3, #0]
 8013cb4:	b29a      	uxth	r2, r3
 8013cb6:	200e      	movs	r0, #14
 8013cb8:	183b      	adds	r3, r7, r0
 8013cba:	49bb      	ldr	r1, [pc, #748]	@ (8013fa8 <PCD_EP_ISR_Handler+0x338>)
 8013cbc:	400a      	ands	r2, r1
 8013cbe:	801a      	strh	r2, [r3, #0]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	183a      	adds	r2, r7, r0
 8013cc6:	8812      	ldrh	r2, [r2, #0]
 8013cc8:	49b8      	ldr	r1, [pc, #736]	@ (8013fac <PCD_EP_ISR_Handler+0x33c>)
 8013cca:	430a      	orrs	r2, r1
 8013ccc:	b292      	uxth	r2, r2
 8013cce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	3328      	adds	r3, #40	@ 0x28
 8013cd4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2250      	movs	r2, #80	@ 0x50
 8013cdc:	5a9b      	ldrh	r3, [r3, r2]
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	001a      	movs	r2, r3
 8013ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ce4:	781b      	ldrb	r3, [r3, #0]
 8013ce6:	00db      	lsls	r3, r3, #3
 8013ce8:	18d2      	adds	r2, r2, r3
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	18d3      	adds	r3, r2, r3
 8013cf0:	4aaf      	ldr	r2, [pc, #700]	@ (8013fb0 <PCD_EP_ISR_Handler+0x340>)
 8013cf2:	4694      	mov	ip, r2
 8013cf4:	4463      	add	r3, ip
 8013cf6:	881b      	ldrh	r3, [r3, #0]
 8013cf8:	059b      	lsls	r3, r3, #22
 8013cfa:	0d9a      	lsrs	r2, r3, #22
 8013cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d02:	695a      	ldr	r2, [r3, #20]
 8013d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d06:	69db      	ldr	r3, [r3, #28]
 8013d08:	18d2      	adds	r2, r2, r3
 8013d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2100      	movs	r1, #0
 8013d12:	0018      	movs	r0, r3
 8013d14:	f009 fac8 	bl	801d2a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2224      	movs	r2, #36	@ 0x24
 8013d1c:	5c9b      	ldrb	r3, [r3, r2]
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d101      	bne.n	8013d28 <PCD_EP_ISR_Handler+0xb8>
 8013d24:	f000 fb96 	bl	8014454 <PCD_EP_ISR_Handler+0x7e4>
 8013d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d2a:	699b      	ldr	r3, [r3, #24]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d001      	beq.n	8013d34 <PCD_EP_ISR_Handler+0xc4>
 8013d30:	f000 fb90 	bl	8014454 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2224      	movs	r2, #36	@ 0x24
 8013d38:	5c9b      	ldrb	r3, [r3, r2]
 8013d3a:	b2db      	uxtb	r3, r3
 8013d3c:	2280      	movs	r2, #128	@ 0x80
 8013d3e:	4252      	negs	r2, r2
 8013d40:	4313      	orrs	r3, r2
 8013d42:	b2da      	uxtb	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	0011      	movs	r1, r2
 8013d4a:	224c      	movs	r2, #76	@ 0x4c
 8013d4c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2224      	movs	r2, #36	@ 0x24
 8013d52:	2100      	movs	r1, #0
 8013d54:	5499      	strb	r1, [r3, r2]
 8013d56:	f000 fb7d 	bl	8014454 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	3369      	adds	r3, #105	@ 0x69
 8013d5e:	33ff      	adds	r3, #255	@ 0xff
 8013d60:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681a      	ldr	r2, [r3, #0]
 8013d66:	214a      	movs	r1, #74	@ 0x4a
 8013d68:	187b      	adds	r3, r7, r1
 8013d6a:	8812      	ldrh	r2, [r2, #0]
 8013d6c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013d6e:	187b      	adds	r3, r7, r1
 8013d70:	881a      	ldrh	r2, [r3, #0]
 8013d72:	2380      	movs	r3, #128	@ 0x80
 8013d74:	011b      	lsls	r3, r3, #4
 8013d76:	4013      	ands	r3, r2
 8013d78:	d037      	beq.n	8013dea <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2250      	movs	r2, #80	@ 0x50
 8013d80:	5a9b      	ldrh	r3, [r3, r2]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	001a      	movs	r2, r3
 8013d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	00db      	lsls	r3, r3, #3
 8013d8c:	18d2      	adds	r2, r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	18d3      	adds	r3, r2, r3
 8013d94:	4a87      	ldr	r2, [pc, #540]	@ (8013fb4 <PCD_EP_ISR_Handler+0x344>)
 8013d96:	4694      	mov	ip, r2
 8013d98:	4463      	add	r3, ip
 8013d9a:	881b      	ldrh	r3, [r3, #0]
 8013d9c:	059b      	lsls	r3, r3, #22
 8013d9e:	0d9a      	lsrs	r2, r3, #22
 8013da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013da2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6818      	ldr	r0, [r3, #0]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	22ac      	movs	r2, #172	@ 0xac
 8013dac:	0092      	lsls	r2, r2, #2
 8013dae:	1899      	adds	r1, r3, r2
 8013db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013db2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013db6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	f007 fa3a 	bl	801b232 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	881b      	ldrh	r3, [r3, #0]
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	2010      	movs	r0, #16
 8013dc8:	183b      	adds	r3, r7, r0
 8013dca:	497b      	ldr	r1, [pc, #492]	@ (8013fb8 <PCD_EP_ISR_Handler+0x348>)
 8013dcc:	400a      	ands	r2, r1
 8013dce:	801a      	strh	r2, [r3, #0]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	183a      	adds	r2, r7, r0
 8013dd6:	8812      	ldrh	r2, [r2, #0]
 8013dd8:	2180      	movs	r1, #128	@ 0x80
 8013dda:	430a      	orrs	r2, r1
 8013ddc:	b292      	uxth	r2, r2
 8013dde:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	0018      	movs	r0, r3
 8013de4:	f009 fa2a 	bl	801d23c <HAL_PCD_SetupStageCallback>
 8013de8:	e334      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013dea:	234a      	movs	r3, #74	@ 0x4a
 8013dec:	18fb      	adds	r3, r7, r3
 8013dee:	2200      	movs	r2, #0
 8013df0:	5e9b      	ldrsh	r3, [r3, r2]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	db00      	blt.n	8013df8 <PCD_EP_ISR_Handler+0x188>
 8013df6:	e32d      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	b29a      	uxth	r2, r3
 8013e00:	201e      	movs	r0, #30
 8013e02:	183b      	adds	r3, r7, r0
 8013e04:	496c      	ldr	r1, [pc, #432]	@ (8013fb8 <PCD_EP_ISR_Handler+0x348>)
 8013e06:	400a      	ands	r2, r1
 8013e08:	801a      	strh	r2, [r3, #0]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	183a      	adds	r2, r7, r0
 8013e10:	8812      	ldrh	r2, [r2, #0]
 8013e12:	2180      	movs	r1, #128	@ 0x80
 8013e14:	430a      	orrs	r2, r1
 8013e16:	b292      	uxth	r2, r2
 8013e18:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2250      	movs	r2, #80	@ 0x50
 8013e20:	5a9b      	ldrh	r3, [r3, r2]
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	001a      	movs	r2, r3
 8013e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	00db      	lsls	r3, r3, #3
 8013e2c:	18d2      	adds	r2, r2, r3
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	18d3      	adds	r3, r2, r3
 8013e34:	4a5f      	ldr	r2, [pc, #380]	@ (8013fb4 <PCD_EP_ISR_Handler+0x344>)
 8013e36:	4694      	mov	ip, r2
 8013e38:	4463      	add	r3, ip
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	059b      	lsls	r3, r3, #22
 8013e3e:	0d9a      	lsrs	r2, r3, #22
 8013e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e46:	69db      	ldr	r3, [r3, #28]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d01a      	beq.n	8013e82 <PCD_EP_ISR_Handler+0x212>
 8013e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e4e:	695b      	ldr	r3, [r3, #20]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d016      	beq.n	8013e82 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6818      	ldr	r0, [r3, #0]
 8013e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e5a:	6959      	ldr	r1, [r3, #20]
 8013e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	f007 f9e4 	bl	801b232 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e6c:	695a      	ldr	r2, [r3, #20]
 8013e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e70:	69db      	ldr	r3, [r3, #28]
 8013e72:	18d2      	adds	r2, r2, r3
 8013e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2100      	movs	r1, #0
 8013e7c:	0018      	movs	r0, r3
 8013e7e:	f009 f9f2 	bl	801d266 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	214a      	movs	r1, #74	@ 0x4a
 8013e88:	187b      	adds	r3, r7, r1
 8013e8a:	8812      	ldrh	r2, [r2, #0]
 8013e8c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013e8e:	187b      	adds	r3, r7, r1
 8013e90:	881a      	ldrh	r2, [r3, #0]
 8013e92:	2380      	movs	r3, #128	@ 0x80
 8013e94:	011b      	lsls	r3, r3, #4
 8013e96:	4013      	ands	r3, r2
 8013e98:	d000      	beq.n	8013e9c <PCD_EP_ISR_Handler+0x22c>
 8013e9a:	e2db      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
 8013e9c:	187b      	adds	r3, r7, r1
 8013e9e:	881a      	ldrh	r2, [r3, #0]
 8013ea0:	23c0      	movs	r3, #192	@ 0xc0
 8013ea2:	019b      	lsls	r3, r3, #6
 8013ea4:	401a      	ands	r2, r3
 8013ea6:	23c0      	movs	r3, #192	@ 0xc0
 8013ea8:	019b      	lsls	r3, r3, #6
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d100      	bne.n	8013eb0 <PCD_EP_ISR_Handler+0x240>
 8013eae:	e2d1      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	61bb      	str	r3, [r7, #24]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2250      	movs	r2, #80	@ 0x50
 8013ebc:	5a9b      	ldrh	r3, [r3, r2]
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	001a      	movs	r2, r3
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	189b      	adds	r3, r3, r2
 8013ec6:	61bb      	str	r3, [r7, #24]
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	4a3a      	ldr	r2, [pc, #232]	@ (8013fb4 <PCD_EP_ISR_Handler+0x344>)
 8013ecc:	4694      	mov	ip, r2
 8013ece:	4463      	add	r3, ip
 8013ed0:	617b      	str	r3, [r7, #20]
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	881b      	ldrh	r3, [r3, #0]
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	059b      	lsls	r3, r3, #22
 8013eda:	0d9b      	lsrs	r3, r3, #22
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	801a      	strh	r2, [r3, #0]
 8013ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ee4:	691b      	ldr	r3, [r3, #16]
 8013ee6:	2b3e      	cmp	r3, #62	@ 0x3e
 8013ee8:	d91a      	bls.n	8013f20 <PCD_EP_ISR_Handler+0x2b0>
 8013eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eec:	691b      	ldr	r3, [r3, #16]
 8013eee:	095b      	lsrs	r3, r3, #5
 8013ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef4:	691b      	ldr	r3, [r3, #16]
 8013ef6:	221f      	movs	r2, #31
 8013ef8:	4013      	ands	r3, r2
 8013efa:	d102      	bne.n	8013f02 <PCD_EP_ISR_Handler+0x292>
 8013efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013efe:	3b01      	subs	r3, #1
 8013f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	881b      	ldrh	r3, [r3, #0]
 8013f06:	b29a      	uxth	r2, r3
 8013f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	029b      	lsls	r3, r3, #10
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	4313      	orrs	r3, r2
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	4a25      	ldr	r2, [pc, #148]	@ (8013fac <PCD_EP_ISR_Handler+0x33c>)
 8013f16:	4313      	orrs	r3, r2
 8013f18:	b29a      	uxth	r2, r3
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	801a      	strh	r2, [r3, #0]
 8013f1e:	e023      	b.n	8013f68 <PCD_EP_ISR_Handler+0x2f8>
 8013f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f22:	691b      	ldr	r3, [r3, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d108      	bne.n	8013f3a <PCD_EP_ISR_Handler+0x2ca>
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	881b      	ldrh	r3, [r3, #0]
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8013fac <PCD_EP_ISR_Handler+0x33c>)
 8013f30:	4313      	orrs	r3, r2
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	801a      	strh	r2, [r3, #0]
 8013f38:	e016      	b.n	8013f68 <PCD_EP_ISR_Handler+0x2f8>
 8013f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f3c:	691b      	ldr	r3, [r3, #16]
 8013f3e:	085b      	lsrs	r3, r3, #1
 8013f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f44:	691b      	ldr	r3, [r3, #16]
 8013f46:	2201      	movs	r2, #1
 8013f48:	4013      	ands	r3, r2
 8013f4a:	d002      	beq.n	8013f52 <PCD_EP_ISR_Handler+0x2e2>
 8013f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f4e:	3301      	adds	r3, #1
 8013f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	881b      	ldrh	r3, [r3, #0]
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	029b      	lsls	r3, r3, #10
 8013f5e:	b29b      	uxth	r3, r3
 8013f60:	4313      	orrs	r3, r2
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	881b      	ldrh	r3, [r3, #0]
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	2012      	movs	r0, #18
 8013f72:	183b      	adds	r3, r7, r0
 8013f74:	4911      	ldr	r1, [pc, #68]	@ (8013fbc <PCD_EP_ISR_Handler+0x34c>)
 8013f76:	400a      	ands	r2, r1
 8013f78:	801a      	strh	r2, [r3, #0]
 8013f7a:	183b      	adds	r3, r7, r0
 8013f7c:	183a      	adds	r2, r7, r0
 8013f7e:	8812      	ldrh	r2, [r2, #0]
 8013f80:	2180      	movs	r1, #128	@ 0x80
 8013f82:	0149      	lsls	r1, r1, #5
 8013f84:	404a      	eors	r2, r1
 8013f86:	801a      	strh	r2, [r3, #0]
 8013f88:	183b      	adds	r3, r7, r0
 8013f8a:	183a      	adds	r2, r7, r0
 8013f8c:	8812      	ldrh	r2, [r2, #0]
 8013f8e:	2180      	movs	r1, #128	@ 0x80
 8013f90:	0189      	lsls	r1, r1, #6
 8013f92:	404a      	eors	r2, r1
 8013f94:	801a      	strh	r2, [r3, #0]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	183a      	adds	r2, r7, r0
 8013f9c:	8812      	ldrh	r2, [r2, #0]
 8013f9e:	4908      	ldr	r1, [pc, #32]	@ (8013fc0 <PCD_EP_ISR_Handler+0x350>)
 8013fa0:	430a      	orrs	r2, r1
 8013fa2:	b292      	uxth	r2, r2
 8013fa4:	801a      	strh	r2, [r3, #0]
 8013fa6:	e255      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
 8013fa8:	ffff8f0f 	.word	0xffff8f0f
 8013fac:	ffff8000 	.word	0xffff8000
 8013fb0:	00000402 	.word	0x00000402
 8013fb4:	00000406 	.word	0x00000406
 8013fb8:	00000f8f 	.word	0x00000f8f
 8013fbc:	ffffbf8f 	.word	0xffffbf8f
 8013fc0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	001a      	movs	r2, r3
 8013fca:	204d      	movs	r0, #77	@ 0x4d
 8013fcc:	183b      	adds	r3, r7, r0
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	18d2      	adds	r2, r2, r3
 8013fd4:	214a      	movs	r1, #74	@ 0x4a
 8013fd6:	187b      	adds	r3, r7, r1
 8013fd8:	8812      	ldrh	r2, [r2, #0]
 8013fda:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013fdc:	187b      	adds	r3, r7, r1
 8013fde:	2200      	movs	r2, #0
 8013fe0:	5e9b      	ldrsh	r3, [r3, r2]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	db00      	blt.n	8013fe8 <PCD_EP_ISR_Handler+0x378>
 8013fe6:	e0fa      	b.n	80141de <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	001a      	movs	r2, r3
 8013fee:	183b      	adds	r3, r7, r0
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	18d3      	adds	r3, r2, r3
 8013ff6:	881b      	ldrh	r3, [r3, #0]
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	2448      	movs	r4, #72	@ 0x48
 8013ffc:	193b      	adds	r3, r7, r4
 8013ffe:	49d1      	ldr	r1, [pc, #836]	@ (8014344 <PCD_EP_ISR_Handler+0x6d4>)
 8014000:	400a      	ands	r2, r1
 8014002:	801a      	strh	r2, [r3, #0]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	001a      	movs	r2, r3
 801400a:	183b      	adds	r3, r7, r0
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	18d3      	adds	r3, r2, r3
 8014012:	193a      	adds	r2, r7, r4
 8014014:	8812      	ldrh	r2, [r2, #0]
 8014016:	2180      	movs	r1, #128	@ 0x80
 8014018:	430a      	orrs	r2, r1
 801401a:	b292      	uxth	r2, r2
 801401c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801401e:	183b      	adds	r3, r7, r0
 8014020:	781a      	ldrb	r2, [r3, #0]
 8014022:	0013      	movs	r3, r2
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	189b      	adds	r3, r3, r2
 8014028:	00db      	lsls	r3, r3, #3
 801402a:	3369      	adds	r3, #105	@ 0x69
 801402c:	33ff      	adds	r3, #255	@ 0xff
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	18d3      	adds	r3, r2, r3
 8014032:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8014034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014036:	7b1b      	ldrb	r3, [r3, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d125      	bne.n	8014088 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2250      	movs	r2, #80	@ 0x50
 8014042:	5a9b      	ldrh	r3, [r3, r2]
 8014044:	b29b      	uxth	r3, r3
 8014046:	001a      	movs	r2, r3
 8014048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	00db      	lsls	r3, r3, #3
 801404e:	18d2      	adds	r2, r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	18d3      	adds	r3, r2, r3
 8014056:	4abc      	ldr	r2, [pc, #752]	@ (8014348 <PCD_EP_ISR_Handler+0x6d8>)
 8014058:	4694      	mov	ip, r2
 801405a:	4463      	add	r3, ip
 801405c:	881a      	ldrh	r2, [r3, #0]
 801405e:	2450      	movs	r4, #80	@ 0x50
 8014060:	193b      	adds	r3, r7, r4
 8014062:	0592      	lsls	r2, r2, #22
 8014064:	0d92      	lsrs	r2, r2, #22
 8014066:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8014068:	193b      	adds	r3, r7, r4
 801406a:	881b      	ldrh	r3, [r3, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d100      	bne.n	8014072 <PCD_EP_ISR_Handler+0x402>
 8014070:	e08d      	b.n	801418e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6818      	ldr	r0, [r3, #0]
 8014076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014078:	6959      	ldr	r1, [r3, #20]
 801407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801407c:	88da      	ldrh	r2, [r3, #6]
 801407e:	193b      	adds	r3, r7, r4
 8014080:	881b      	ldrh	r3, [r3, #0]
 8014082:	f007 f8d6 	bl	801b232 <USB_ReadPMA>
 8014086:	e082      	b.n	801418e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8014088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801408a:	78db      	ldrb	r3, [r3, #3]
 801408c:	2b02      	cmp	r3, #2
 801408e:	d10c      	bne.n	80140aa <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8014090:	2350      	movs	r3, #80	@ 0x50
 8014092:	18fc      	adds	r4, r7, r3
 8014094:	234a      	movs	r3, #74	@ 0x4a
 8014096:	18fb      	adds	r3, r7, r3
 8014098:	881a      	ldrh	r2, [r3, #0]
 801409a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	0018      	movs	r0, r3
 80140a0:	f000 f9ec 	bl	801447c <HAL_PCD_EP_DB_Receive>
 80140a4:	0003      	movs	r3, r0
 80140a6:	8023      	strh	r3, [r4, #0]
 80140a8:	e071      	b.n	801418e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	001a      	movs	r2, r3
 80140b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	009b      	lsls	r3, r3, #2
 80140b6:	18d3      	adds	r3, r2, r3
 80140b8:	881b      	ldrh	r3, [r3, #0]
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	2052      	movs	r0, #82	@ 0x52
 80140be:	183b      	adds	r3, r7, r0
 80140c0:	49a2      	ldr	r1, [pc, #648]	@ (801434c <PCD_EP_ISR_Handler+0x6dc>)
 80140c2:	400a      	ands	r2, r1
 80140c4:	801a      	strh	r2, [r3, #0]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	001a      	movs	r2, r3
 80140cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	18d3      	adds	r3, r2, r3
 80140d4:	183a      	adds	r2, r7, r0
 80140d6:	8812      	ldrh	r2, [r2, #0]
 80140d8:	499d      	ldr	r1, [pc, #628]	@ (8014350 <PCD_EP_ISR_Handler+0x6e0>)
 80140da:	430a      	orrs	r2, r1
 80140dc:	b292      	uxth	r2, r2
 80140de:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	001a      	movs	r2, r3
 80140e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	18d3      	adds	r3, r2, r3
 80140ee:	881b      	ldrh	r3, [r3, #0]
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	001a      	movs	r2, r3
 80140f4:	2380      	movs	r3, #128	@ 0x80
 80140f6:	01db      	lsls	r3, r3, #7
 80140f8:	4013      	ands	r3, r2
 80140fa:	d024      	beq.n	8014146 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2250      	movs	r2, #80	@ 0x50
 8014102:	5a9b      	ldrh	r3, [r3, r2]
 8014104:	b29b      	uxth	r3, r3
 8014106:	001a      	movs	r2, r3
 8014108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	00db      	lsls	r3, r3, #3
 801410e:	18d2      	adds	r2, r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	18d3      	adds	r3, r2, r3
 8014116:	4a8f      	ldr	r2, [pc, #572]	@ (8014354 <PCD_EP_ISR_Handler+0x6e4>)
 8014118:	4694      	mov	ip, r2
 801411a:	4463      	add	r3, ip
 801411c:	881a      	ldrh	r2, [r3, #0]
 801411e:	2450      	movs	r4, #80	@ 0x50
 8014120:	193b      	adds	r3, r7, r4
 8014122:	0592      	lsls	r2, r2, #22
 8014124:	0d92      	lsrs	r2, r2, #22
 8014126:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014128:	193b      	adds	r3, r7, r4
 801412a:	881b      	ldrh	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d02e      	beq.n	801418e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6818      	ldr	r0, [r3, #0]
 8014134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014136:	6959      	ldr	r1, [r3, #20]
 8014138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413a:	891a      	ldrh	r2, [r3, #8]
 801413c:	193b      	adds	r3, r7, r4
 801413e:	881b      	ldrh	r3, [r3, #0]
 8014140:	f007 f877 	bl	801b232 <USB_ReadPMA>
 8014144:	e023      	b.n	801418e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2250      	movs	r2, #80	@ 0x50
 801414c:	5a9b      	ldrh	r3, [r3, r2]
 801414e:	b29b      	uxth	r3, r3
 8014150:	001a      	movs	r2, r3
 8014152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	18d2      	adds	r2, r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	18d3      	adds	r3, r2, r3
 8014160:	4a79      	ldr	r2, [pc, #484]	@ (8014348 <PCD_EP_ISR_Handler+0x6d8>)
 8014162:	4694      	mov	ip, r2
 8014164:	4463      	add	r3, ip
 8014166:	881a      	ldrh	r2, [r3, #0]
 8014168:	2450      	movs	r4, #80	@ 0x50
 801416a:	193b      	adds	r3, r7, r4
 801416c:	0592      	lsls	r2, r2, #22
 801416e:	0d92      	lsrs	r2, r2, #22
 8014170:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014172:	193b      	adds	r3, r7, r4
 8014174:	881b      	ldrh	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d009      	beq.n	801418e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6818      	ldr	r0, [r3, #0]
 801417e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014180:	6959      	ldr	r1, [r3, #20]
 8014182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014184:	895a      	ldrh	r2, [r3, #10]
 8014186:	193b      	adds	r3, r7, r4
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	f007 f852 	bl	801b232 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014190:	69da      	ldr	r2, [r3, #28]
 8014192:	2150      	movs	r1, #80	@ 0x50
 8014194:	187b      	adds	r3, r7, r1
 8014196:	881b      	ldrh	r3, [r3, #0]
 8014198:	18d2      	adds	r2, r2, r3
 801419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801419c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141a0:	695a      	ldr	r2, [r3, #20]
 80141a2:	187b      	adds	r3, r7, r1
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	18d2      	adds	r2, r2, r3
 80141a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80141ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d005      	beq.n	80141c0 <PCD_EP_ISR_Handler+0x550>
 80141b4:	187b      	adds	r3, r7, r1
 80141b6:	881a      	ldrh	r2, [r3, #0]
 80141b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ba:	691b      	ldr	r3, [r3, #16]
 80141bc:	429a      	cmp	r2, r3
 80141be:	d207      	bcs.n	80141d0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80141c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c2:	781a      	ldrb	r2, [r3, #0]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	0011      	movs	r1, r2
 80141c8:	0018      	movs	r0, r3
 80141ca:	f009 f84c 	bl	801d266 <HAL_PCD_DataOutStageCallback>
 80141ce:	e006      	b.n	80141de <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80141d6:	0011      	movs	r1, r2
 80141d8:	0018      	movs	r0, r3
 80141da:	f005 fd6f 	bl	8019cbc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80141de:	244a      	movs	r4, #74	@ 0x4a
 80141e0:	193b      	adds	r3, r7, r4
 80141e2:	881b      	ldrh	r3, [r3, #0]
 80141e4:	2280      	movs	r2, #128	@ 0x80
 80141e6:	4013      	ands	r3, r2
 80141e8:	d100      	bne.n	80141ec <PCD_EP_ISR_Handler+0x57c>
 80141ea:	e133      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80141ec:	204d      	movs	r0, #77	@ 0x4d
 80141ee:	183b      	adds	r3, r7, r0
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	1c5a      	adds	r2, r3, #1
 80141f4:	0013      	movs	r3, r2
 80141f6:	009b      	lsls	r3, r3, #2
 80141f8:	189b      	adds	r3, r3, r2
 80141fa:	00db      	lsls	r3, r3, #3
 80141fc:	687a      	ldr	r2, [r7, #4]
 80141fe:	18d3      	adds	r3, r2, r3
 8014200:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	001a      	movs	r2, r3
 8014208:	183b      	adds	r3, r7, r0
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	18d3      	adds	r3, r2, r3
 8014210:	881b      	ldrh	r3, [r3, #0]
 8014212:	b29a      	uxth	r2, r3
 8014214:	2542      	movs	r5, #66	@ 0x42
 8014216:	197b      	adds	r3, r7, r5
 8014218:	494f      	ldr	r1, [pc, #316]	@ (8014358 <PCD_EP_ISR_Handler+0x6e8>)
 801421a:	400a      	ands	r2, r1
 801421c:	801a      	strh	r2, [r3, #0]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	001a      	movs	r2, r3
 8014224:	183b      	adds	r3, r7, r0
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	18d3      	adds	r3, r2, r3
 801422c:	197a      	adds	r2, r7, r5
 801422e:	8812      	ldrh	r2, [r2, #0]
 8014230:	494a      	ldr	r1, [pc, #296]	@ (801435c <PCD_EP_ISR_Handler+0x6ec>)
 8014232:	430a      	orrs	r2, r1
 8014234:	b292      	uxth	r2, r2
 8014236:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801423a:	78db      	ldrb	r3, [r3, #3]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d000      	beq.n	8014242 <PCD_EP_ISR_Handler+0x5d2>
 8014240:	e0af      	b.n	80143a2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014244:	2200      	movs	r2, #0
 8014246:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801424a:	7b1b      	ldrb	r3, [r3, #12]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d100      	bne.n	8014252 <PCD_EP_ISR_Handler+0x5e2>
 8014250:	e09f      	b.n	8014392 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014252:	193b      	adds	r3, r7, r4
 8014254:	881b      	ldrh	r3, [r3, #0]
 8014256:	2240      	movs	r2, #64	@ 0x40
 8014258:	4013      	ands	r3, r2
 801425a:	d046      	beq.n	80142ea <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801425e:	785b      	ldrb	r3, [r3, #1]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d125      	bne.n	80142b0 <PCD_EP_ISR_Handler+0x640>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	627b      	str	r3, [r7, #36]	@ 0x24
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2250      	movs	r2, #80	@ 0x50
 8014270:	5a9b      	ldrh	r3, [r3, r2]
 8014272:	b29b      	uxth	r3, r3
 8014274:	001a      	movs	r2, r3
 8014276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014278:	189b      	adds	r3, r3, r2
 801427a:	627b      	str	r3, [r7, #36]	@ 0x24
 801427c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	00da      	lsls	r2, r3, #3
 8014282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014284:	18d3      	adds	r3, r2, r3
 8014286:	4a33      	ldr	r2, [pc, #204]	@ (8014354 <PCD_EP_ISR_Handler+0x6e4>)
 8014288:	4694      	mov	ip, r2
 801428a:	4463      	add	r3, ip
 801428c:	623b      	str	r3, [r7, #32]
 801428e:	6a3b      	ldr	r3, [r7, #32]
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	b29b      	uxth	r3, r3
 8014294:	059b      	lsls	r3, r3, #22
 8014296:	0d9b      	lsrs	r3, r3, #22
 8014298:	b29a      	uxth	r2, r3
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	801a      	strh	r2, [r3, #0]
 801429e:	6a3b      	ldr	r3, [r7, #32]
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	4a2d      	ldr	r2, [pc, #180]	@ (801435c <PCD_EP_ISR_Handler+0x6ec>)
 80142a6:	4313      	orrs	r3, r2
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	6a3b      	ldr	r3, [r7, #32]
 80142ac:	801a      	strh	r2, [r3, #0]
 80142ae:	e070      	b.n	8014392 <PCD_EP_ISR_Handler+0x722>
 80142b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142b2:	785b      	ldrb	r3, [r3, #1]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d16c      	bne.n	8014392 <PCD_EP_ISR_Handler+0x722>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2250      	movs	r2, #80	@ 0x50
 80142c4:	5a9b      	ldrh	r3, [r3, r2]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	001a      	movs	r2, r3
 80142ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142cc:	189b      	adds	r3, r3, r2
 80142ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	00da      	lsls	r2, r3, #3
 80142d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d8:	18d3      	adds	r3, r2, r3
 80142da:	4a1e      	ldr	r2, [pc, #120]	@ (8014354 <PCD_EP_ISR_Handler+0x6e4>)
 80142dc:	4694      	mov	ip, r2
 80142de:	4463      	add	r3, ip
 80142e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80142e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142e4:	2200      	movs	r2, #0
 80142e6:	801a      	strh	r2, [r3, #0]
 80142e8:	e053      	b.n	8014392 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80142f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142f2:	785b      	ldrb	r3, [r3, #1]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d133      	bne.n	8014360 <PCD_EP_ISR_Handler+0x6f0>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	2250      	movs	r2, #80	@ 0x50
 8014304:	5a9b      	ldrh	r3, [r3, r2]
 8014306:	b29b      	uxth	r3, r3
 8014308:	001a      	movs	r2, r3
 801430a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801430c:	189b      	adds	r3, r3, r2
 801430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	00da      	lsls	r2, r3, #3
 8014316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014318:	18d3      	adds	r3, r2, r3
 801431a:	4a0b      	ldr	r2, [pc, #44]	@ (8014348 <PCD_EP_ISR_Handler+0x6d8>)
 801431c:	4694      	mov	ip, r2
 801431e:	4463      	add	r3, ip
 8014320:	633b      	str	r3, [r7, #48]	@ 0x30
 8014322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014324:	881b      	ldrh	r3, [r3, #0]
 8014326:	b29b      	uxth	r3, r3
 8014328:	059b      	lsls	r3, r3, #22
 801432a:	0d9b      	lsrs	r3, r3, #22
 801432c:	b29a      	uxth	r2, r3
 801432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014330:	801a      	strh	r2, [r3, #0]
 8014332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	b29b      	uxth	r3, r3
 8014338:	4a08      	ldr	r2, [pc, #32]	@ (801435c <PCD_EP_ISR_Handler+0x6ec>)
 801433a:	4313      	orrs	r3, r2
 801433c:	b29a      	uxth	r2, r3
 801433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014340:	801a      	strh	r2, [r3, #0]
 8014342:	e026      	b.n	8014392 <PCD_EP_ISR_Handler+0x722>
 8014344:	00000f8f 	.word	0x00000f8f
 8014348:	00000406 	.word	0x00000406
 801434c:	ffff8f8f 	.word	0xffff8f8f
 8014350:	ffff80c0 	.word	0xffff80c0
 8014354:	00000402 	.word	0x00000402
 8014358:	ffff8f0f 	.word	0xffff8f0f
 801435c:	ffff8000 	.word	0xffff8000
 8014360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014362:	785b      	ldrb	r3, [r3, #1]
 8014364:	2b01      	cmp	r3, #1
 8014366:	d114      	bne.n	8014392 <PCD_EP_ISR_Handler+0x722>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2250      	movs	r2, #80	@ 0x50
 801436e:	5a9b      	ldrh	r3, [r3, r2]
 8014370:	b29b      	uxth	r3, r3
 8014372:	001a      	movs	r2, r3
 8014374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014376:	189b      	adds	r3, r3, r2
 8014378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801437a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	00da      	lsls	r2, r3, #3
 8014380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014382:	18d3      	adds	r3, r2, r3
 8014384:	4a3b      	ldr	r2, [pc, #236]	@ (8014474 <PCD_EP_ISR_Handler+0x804>)
 8014386:	4694      	mov	ip, r2
 8014388:	4463      	add	r3, ip
 801438a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801438e:	2200      	movs	r2, #0
 8014390:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014394:	781a      	ldrb	r2, [r3, #0]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	0011      	movs	r1, r2
 801439a:	0018      	movs	r0, r3
 801439c:	f008 ff84 	bl	801d2a8 <HAL_PCD_DataInStageCallback>
 80143a0:	e058      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80143a2:	234a      	movs	r3, #74	@ 0x4a
 80143a4:	18fb      	adds	r3, r7, r3
 80143a6:	881a      	ldrh	r2, [r3, #0]
 80143a8:	2380      	movs	r3, #128	@ 0x80
 80143aa:	005b      	lsls	r3, r3, #1
 80143ac:	4013      	ands	r3, r2
 80143ae:	d149      	bne.n	8014444 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2250      	movs	r2, #80	@ 0x50
 80143b6:	5a9b      	ldrh	r3, [r3, r2]
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	001a      	movs	r2, r3
 80143bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	18d2      	adds	r2, r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	18d3      	adds	r3, r2, r3
 80143ca:	4a2b      	ldr	r2, [pc, #172]	@ (8014478 <PCD_EP_ISR_Handler+0x808>)
 80143cc:	4694      	mov	ip, r2
 80143ce:	4463      	add	r3, ip
 80143d0:	881a      	ldrh	r2, [r3, #0]
 80143d2:	2140      	movs	r1, #64	@ 0x40
 80143d4:	187b      	adds	r3, r7, r1
 80143d6:	0592      	lsls	r2, r2, #22
 80143d8:	0d92      	lsrs	r2, r2, #22
 80143da:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80143dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143de:	699a      	ldr	r2, [r3, #24]
 80143e0:	187b      	adds	r3, r7, r1
 80143e2:	881b      	ldrh	r3, [r3, #0]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d907      	bls.n	80143f8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80143e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143ea:	699a      	ldr	r2, [r3, #24]
 80143ec:	187b      	adds	r3, r7, r1
 80143ee:	881b      	ldrh	r3, [r3, #0]
 80143f0:	1ad2      	subs	r2, r2, r3
 80143f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143f4:	619a      	str	r2, [r3, #24]
 80143f6:	e002      	b.n	80143fe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80143f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143fa:	2200      	movs	r2, #0
 80143fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80143fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014400:	699b      	ldr	r3, [r3, #24]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d107      	bne.n	8014416 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014408:	781a      	ldrb	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	0011      	movs	r1, r2
 801440e:	0018      	movs	r0, r3
 8014410:	f008 ff4a 	bl	801d2a8 <HAL_PCD_DataInStageCallback>
 8014414:	e01e      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8014416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014418:	695a      	ldr	r2, [r3, #20]
 801441a:	2140      	movs	r1, #64	@ 0x40
 801441c:	187b      	adds	r3, r7, r1
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	18d2      	adds	r2, r2, r3
 8014422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014424:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8014426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014428:	69da      	ldr	r2, [r3, #28]
 801442a:	187b      	adds	r3, r7, r1
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	18d2      	adds	r2, r2, r3
 8014430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014432:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801443a:	0011      	movs	r1, r2
 801443c:	0018      	movs	r0, r3
 801443e:	f005 fc3d 	bl	8019cbc <USB_EPStartXfer>
 8014442:	e007      	b.n	8014454 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014444:	234a      	movs	r3, #74	@ 0x4a
 8014446:	18fb      	adds	r3, r7, r3
 8014448:	881a      	ldrh	r2, [r3, #0]
 801444a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	0018      	movs	r0, r3
 8014450:	f000 f930 	bl	80146b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2244      	movs	r2, #68	@ 0x44
 801445a:	5a9b      	ldrh	r3, [r3, r2]
 801445c:	b29b      	uxth	r3, r3
 801445e:	b21b      	sxth	r3, r3
 8014460:	2b00      	cmp	r3, #0
 8014462:	da01      	bge.n	8014468 <PCD_EP_ISR_Handler+0x7f8>
 8014464:	f7ff fc0a 	bl	8013c7c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014468:	2300      	movs	r3, #0
}
 801446a:	0018      	movs	r0, r3
 801446c:	46bd      	mov	sp, r7
 801446e:	b016      	add	sp, #88	@ 0x58
 8014470:	bdb0      	pop	{r4, r5, r7, pc}
 8014472:	46c0      	nop			@ (mov r8, r8)
 8014474:	00000406 	.word	0x00000406
 8014478:	00000402 	.word	0x00000402

0801447c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801447c:	b590      	push	{r4, r7, lr}
 801447e:	b089      	sub	sp, #36	@ 0x24
 8014480:	af00      	add	r7, sp, #0
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	1dbb      	adds	r3, r7, #6
 8014488:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801448a:	1dbb      	adds	r3, r7, #6
 801448c:	881a      	ldrh	r2, [r3, #0]
 801448e:	2380      	movs	r3, #128	@ 0x80
 8014490:	01db      	lsls	r3, r3, #7
 8014492:	4013      	ands	r3, r2
 8014494:	d100      	bne.n	8014498 <HAL_PCD_EP_DB_Receive+0x1c>
 8014496:	e07d      	b.n	8014594 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2250      	movs	r2, #80	@ 0x50
 801449e:	5a9b      	ldrh	r3, [r3, r2]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	001a      	movs	r2, r3
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	00db      	lsls	r3, r3, #3
 80144aa:	18d2      	adds	r2, r2, r3
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	18d3      	adds	r3, r2, r3
 80144b2:	4a7a      	ldr	r2, [pc, #488]	@ (801469c <HAL_PCD_EP_DB_Receive+0x220>)
 80144b4:	4694      	mov	ip, r2
 80144b6:	4463      	add	r3, ip
 80144b8:	881a      	ldrh	r2, [r3, #0]
 80144ba:	211a      	movs	r1, #26
 80144bc:	187b      	adds	r3, r7, r1
 80144be:	0592      	lsls	r2, r2, #22
 80144c0:	0d92      	lsrs	r2, r2, #22
 80144c2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	699a      	ldr	r2, [r3, #24]
 80144c8:	187b      	adds	r3, r7, r1
 80144ca:	881b      	ldrh	r3, [r3, #0]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d307      	bcc.n	80144e0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	699a      	ldr	r2, [r3, #24]
 80144d4:	187b      	adds	r3, r7, r1
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	1ad2      	subs	r2, r2, r3
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	619a      	str	r2, [r3, #24]
 80144de:	e002      	b.n	80144e6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	2200      	movs	r2, #0
 80144e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	699b      	ldr	r3, [r3, #24]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d121      	bne.n	8014532 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	001a      	movs	r2, r3
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	18d3      	adds	r3, r2, r3
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	b29a      	uxth	r2, r3
 8014500:	2018      	movs	r0, #24
 8014502:	183b      	adds	r3, r7, r0
 8014504:	4966      	ldr	r1, [pc, #408]	@ (80146a0 <HAL_PCD_EP_DB_Receive+0x224>)
 8014506:	400a      	ands	r2, r1
 8014508:	801a      	strh	r2, [r3, #0]
 801450a:	183b      	adds	r3, r7, r0
 801450c:	183a      	adds	r2, r7, r0
 801450e:	8812      	ldrh	r2, [r2, #0]
 8014510:	2180      	movs	r1, #128	@ 0x80
 8014512:	0189      	lsls	r1, r1, #6
 8014514:	404a      	eors	r2, r1
 8014516:	801a      	strh	r2, [r3, #0]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	001a      	movs	r2, r3
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	009b      	lsls	r3, r3, #2
 8014524:	18d3      	adds	r3, r2, r3
 8014526:	183a      	adds	r2, r7, r0
 8014528:	8812      	ldrh	r2, [r2, #0]
 801452a:	495e      	ldr	r1, [pc, #376]	@ (80146a4 <HAL_PCD_EP_DB_Receive+0x228>)
 801452c:	430a      	orrs	r2, r1
 801452e:	b292      	uxth	r2, r2
 8014530:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014532:	1dbb      	adds	r3, r7, #6
 8014534:	881b      	ldrh	r3, [r3, #0]
 8014536:	2240      	movs	r2, #64	@ 0x40
 8014538:	4013      	ands	r3, r2
 801453a:	d01a      	beq.n	8014572 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	001a      	movs	r2, r3
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	18d3      	adds	r3, r2, r3
 801454a:	881b      	ldrh	r3, [r3, #0]
 801454c:	b29a      	uxth	r2, r3
 801454e:	2016      	movs	r0, #22
 8014550:	183b      	adds	r3, r7, r0
 8014552:	4955      	ldr	r1, [pc, #340]	@ (80146a8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014554:	400a      	ands	r2, r1
 8014556:	801a      	strh	r2, [r3, #0]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	001a      	movs	r2, r3
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	18d3      	adds	r3, r2, r3
 8014566:	183a      	adds	r2, r7, r0
 8014568:	8812      	ldrh	r2, [r2, #0]
 801456a:	4950      	ldr	r1, [pc, #320]	@ (80146ac <HAL_PCD_EP_DB_Receive+0x230>)
 801456c:	430a      	orrs	r2, r1
 801456e:	b292      	uxth	r2, r2
 8014570:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014572:	241a      	movs	r4, #26
 8014574:	193b      	adds	r3, r7, r4
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d100      	bne.n	801457e <HAL_PCD_EP_DB_Receive+0x102>
 801457c:	e086      	b.n	801468c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	6818      	ldr	r0, [r3, #0]
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	6959      	ldr	r1, [r3, #20]
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	891a      	ldrh	r2, [r3, #8]
 801458a:	193b      	adds	r3, r7, r4
 801458c:	881b      	ldrh	r3, [r3, #0]
 801458e:	f006 fe50 	bl	801b232 <USB_ReadPMA>
 8014592:	e07b      	b.n	801468c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2250      	movs	r2, #80	@ 0x50
 801459a:	5a9b      	ldrh	r3, [r3, r2]
 801459c:	b29b      	uxth	r3, r3
 801459e:	001a      	movs	r2, r3
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	00db      	lsls	r3, r3, #3
 80145a6:	18d2      	adds	r2, r2, r3
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	18d3      	adds	r3, r2, r3
 80145ae:	4a40      	ldr	r2, [pc, #256]	@ (80146b0 <HAL_PCD_EP_DB_Receive+0x234>)
 80145b0:	4694      	mov	ip, r2
 80145b2:	4463      	add	r3, ip
 80145b4:	881a      	ldrh	r2, [r3, #0]
 80145b6:	211a      	movs	r1, #26
 80145b8:	187b      	adds	r3, r7, r1
 80145ba:	0592      	lsls	r2, r2, #22
 80145bc:	0d92      	lsrs	r2, r2, #22
 80145be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	699a      	ldr	r2, [r3, #24]
 80145c4:	187b      	adds	r3, r7, r1
 80145c6:	881b      	ldrh	r3, [r3, #0]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d307      	bcc.n	80145dc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	699a      	ldr	r2, [r3, #24]
 80145d0:	187b      	adds	r3, r7, r1
 80145d2:	881b      	ldrh	r3, [r3, #0]
 80145d4:	1ad2      	subs	r2, r2, r3
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	619a      	str	r2, [r3, #24]
 80145da:	e002      	b.n	80145e2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	2200      	movs	r2, #0
 80145e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	699b      	ldr	r3, [r3, #24]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d121      	bne.n	801462e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	001a      	movs	r2, r3
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	18d3      	adds	r3, r2, r3
 80145f8:	881b      	ldrh	r3, [r3, #0]
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	201e      	movs	r0, #30
 80145fe:	183b      	adds	r3, r7, r0
 8014600:	4927      	ldr	r1, [pc, #156]	@ (80146a0 <HAL_PCD_EP_DB_Receive+0x224>)
 8014602:	400a      	ands	r2, r1
 8014604:	801a      	strh	r2, [r3, #0]
 8014606:	183b      	adds	r3, r7, r0
 8014608:	183a      	adds	r2, r7, r0
 801460a:	8812      	ldrh	r2, [r2, #0]
 801460c:	2180      	movs	r1, #128	@ 0x80
 801460e:	0189      	lsls	r1, r1, #6
 8014610:	404a      	eors	r2, r1
 8014612:	801a      	strh	r2, [r3, #0]
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	001a      	movs	r2, r3
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	18d3      	adds	r3, r2, r3
 8014622:	183a      	adds	r2, r7, r0
 8014624:	8812      	ldrh	r2, [r2, #0]
 8014626:	491f      	ldr	r1, [pc, #124]	@ (80146a4 <HAL_PCD_EP_DB_Receive+0x228>)
 8014628:	430a      	orrs	r2, r1
 801462a:	b292      	uxth	r2, r2
 801462c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801462e:	1dbb      	adds	r3, r7, #6
 8014630:	881b      	ldrh	r3, [r3, #0]
 8014632:	2240      	movs	r2, #64	@ 0x40
 8014634:	4013      	ands	r3, r2
 8014636:	d11a      	bne.n	801466e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	001a      	movs	r2, r3
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	18d3      	adds	r3, r2, r3
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	b29a      	uxth	r2, r3
 801464a:	201c      	movs	r0, #28
 801464c:	183b      	adds	r3, r7, r0
 801464e:	4916      	ldr	r1, [pc, #88]	@ (80146a8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014650:	400a      	ands	r2, r1
 8014652:	801a      	strh	r2, [r3, #0]
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	001a      	movs	r2, r3
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	18d3      	adds	r3, r2, r3
 8014662:	183a      	adds	r2, r7, r0
 8014664:	8812      	ldrh	r2, [r2, #0]
 8014666:	4911      	ldr	r1, [pc, #68]	@ (80146ac <HAL_PCD_EP_DB_Receive+0x230>)
 8014668:	430a      	orrs	r2, r1
 801466a:	b292      	uxth	r2, r2
 801466c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801466e:	241a      	movs	r4, #26
 8014670:	193b      	adds	r3, r7, r4
 8014672:	881b      	ldrh	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d009      	beq.n	801468c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6818      	ldr	r0, [r3, #0]
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	6959      	ldr	r1, [r3, #20]
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	895a      	ldrh	r2, [r3, #10]
 8014684:	193b      	adds	r3, r7, r4
 8014686:	881b      	ldrh	r3, [r3, #0]
 8014688:	f006 fdd3 	bl	801b232 <USB_ReadPMA>
    }
  }

  return count;
 801468c:	231a      	movs	r3, #26
 801468e:	18fb      	adds	r3, r7, r3
 8014690:	881b      	ldrh	r3, [r3, #0]
}
 8014692:	0018      	movs	r0, r3
 8014694:	46bd      	mov	sp, r7
 8014696:	b009      	add	sp, #36	@ 0x24
 8014698:	bd90      	pop	{r4, r7, pc}
 801469a:	46c0      	nop			@ (mov r8, r8)
 801469c:	00000402 	.word	0x00000402
 80146a0:	ffffbf8f 	.word	0xffffbf8f
 80146a4:	ffff8080 	.word	0xffff8080
 80146a8:	ffff8f8f 	.word	0xffff8f8f
 80146ac:	ffff80c0 	.word	0xffff80c0
 80146b0:	00000406 	.word	0x00000406

080146b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b0a4      	sub	sp, #144	@ 0x90
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	60f8      	str	r0, [r7, #12]
 80146bc:	60b9      	str	r1, [r7, #8]
 80146be:	1dbb      	adds	r3, r7, #6
 80146c0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80146c2:	1dbb      	adds	r3, r7, #6
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	2240      	movs	r2, #64	@ 0x40
 80146c8:	4013      	ands	r3, r2
 80146ca:	d100      	bne.n	80146ce <HAL_PCD_EP_DB_Transmit+0x1a>
 80146cc:	e1e4      	b.n	8014a98 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2250      	movs	r2, #80	@ 0x50
 80146d4:	5a9b      	ldrh	r3, [r3, r2]
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	001a      	movs	r2, r3
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	18d2      	adds	r2, r2, r3
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	18d3      	adds	r3, r2, r3
 80146e8:	4ad0      	ldr	r2, [pc, #832]	@ (8014a2c <HAL_PCD_EP_DB_Transmit+0x378>)
 80146ea:	4694      	mov	ip, r2
 80146ec:	4463      	add	r3, ip
 80146ee:	881a      	ldrh	r2, [r3, #0]
 80146f0:	2186      	movs	r1, #134	@ 0x86
 80146f2:	187b      	adds	r3, r7, r1
 80146f4:	0592      	lsls	r2, r2, #22
 80146f6:	0d92      	lsrs	r2, r2, #22
 80146f8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	699a      	ldr	r2, [r3, #24]
 80146fe:	187b      	adds	r3, r7, r1
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	429a      	cmp	r2, r3
 8014704:	d907      	bls.n	8014716 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	699a      	ldr	r2, [r3, #24]
 801470a:	187b      	adds	r3, r7, r1
 801470c:	881b      	ldrh	r3, [r3, #0]
 801470e:	1ad2      	subs	r2, r2, r3
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	619a      	str	r2, [r3, #24]
 8014714:	e002      	b.n	801471c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	2200      	movs	r2, #0
 801471a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	699b      	ldr	r3, [r3, #24]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d000      	beq.n	8014726 <HAL_PCD_EP_DB_Transmit+0x72>
 8014724:	e0b5      	b.n	8014892 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	785b      	ldrb	r3, [r3, #1]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d125      	bne.n	801477a <HAL_PCD_EP_DB_Transmit+0xc6>
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2250      	movs	r2, #80	@ 0x50
 801473a:	5a9b      	ldrh	r3, [r3, r2]
 801473c:	b29b      	uxth	r3, r3
 801473e:	001a      	movs	r2, r3
 8014740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014742:	189b      	adds	r3, r3, r2
 8014744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	00da      	lsls	r2, r3, #3
 801474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801474e:	18d3      	adds	r3, r2, r3
 8014750:	4ab6      	ldr	r2, [pc, #728]	@ (8014a2c <HAL_PCD_EP_DB_Transmit+0x378>)
 8014752:	4694      	mov	ip, r2
 8014754:	4463      	add	r3, ip
 8014756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801475a:	881b      	ldrh	r3, [r3, #0]
 801475c:	b29b      	uxth	r3, r3
 801475e:	059b      	lsls	r3, r3, #22
 8014760:	0d9b      	lsrs	r3, r3, #22
 8014762:	b29a      	uxth	r2, r3
 8014764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014766:	801a      	strh	r2, [r3, #0]
 8014768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801476a:	881b      	ldrh	r3, [r3, #0]
 801476c:	b29b      	uxth	r3, r3
 801476e:	4ab0      	ldr	r2, [pc, #704]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014770:	4313      	orrs	r3, r2
 8014772:	b29a      	uxth	r2, r3
 8014774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014776:	801a      	strh	r2, [r3, #0]
 8014778:	e01b      	b.n	80147b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	785b      	ldrb	r3, [r3, #1]
 801477e:	2b01      	cmp	r3, #1
 8014780:	d117      	bne.n	80147b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	637b      	str	r3, [r7, #52]	@ 0x34
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	2250      	movs	r2, #80	@ 0x50
 801478e:	5a9b      	ldrh	r3, [r3, r2]
 8014790:	b29b      	uxth	r3, r3
 8014792:	001a      	movs	r2, r3
 8014794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014796:	189b      	adds	r3, r3, r2
 8014798:	637b      	str	r3, [r7, #52]	@ 0x34
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	00da      	lsls	r2, r3, #3
 80147a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a2:	18d3      	adds	r3, r2, r3
 80147a4:	4aa1      	ldr	r2, [pc, #644]	@ (8014a2c <HAL_PCD_EP_DB_Transmit+0x378>)
 80147a6:	4694      	mov	ip, r2
 80147a8:	4463      	add	r3, ip
 80147aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80147ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ae:	2200      	movs	r2, #0
 80147b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	785b      	ldrb	r3, [r3, #1]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d125      	bne.n	801480c <HAL_PCD_EP_DB_Transmit+0x158>
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	61fb      	str	r3, [r7, #28]
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2250      	movs	r2, #80	@ 0x50
 80147cc:	5a9b      	ldrh	r3, [r3, r2]
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	001a      	movs	r2, r3
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	189b      	adds	r3, r3, r2
 80147d6:	61fb      	str	r3, [r7, #28]
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	00da      	lsls	r2, r3, #3
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	18d3      	adds	r3, r2, r3
 80147e2:	4a94      	ldr	r2, [pc, #592]	@ (8014a34 <HAL_PCD_EP_DB_Transmit+0x380>)
 80147e4:	4694      	mov	ip, r2
 80147e6:	4463      	add	r3, ip
 80147e8:	61bb      	str	r3, [r7, #24]
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	059b      	lsls	r3, r3, #22
 80147f2:	0d9b      	lsrs	r3, r3, #22
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	69bb      	ldr	r3, [r7, #24]
 80147f8:	801a      	strh	r2, [r3, #0]
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	4a8b      	ldr	r2, [pc, #556]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014802:	4313      	orrs	r3, r2
 8014804:	b29a      	uxth	r2, r3
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	801a      	strh	r2, [r3, #0]
 801480a:	e018      	b.n	801483e <HAL_PCD_EP_DB_Transmit+0x18a>
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	785b      	ldrb	r3, [r3, #1]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d114      	bne.n	801483e <HAL_PCD_EP_DB_Transmit+0x18a>
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2250      	movs	r2, #80	@ 0x50
 801481a:	5a9b      	ldrh	r3, [r3, r2]
 801481c:	b29b      	uxth	r3, r3
 801481e:	001a      	movs	r2, r3
 8014820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014822:	189b      	adds	r3, r3, r2
 8014824:	627b      	str	r3, [r7, #36]	@ 0x24
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	00da      	lsls	r2, r3, #3
 801482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801482e:	18d3      	adds	r3, r2, r3
 8014830:	4a80      	ldr	r2, [pc, #512]	@ (8014a34 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014832:	4694      	mov	ip, r2
 8014834:	4463      	add	r3, ip
 8014836:	623b      	str	r3, [r7, #32]
 8014838:	6a3b      	ldr	r3, [r7, #32]
 801483a:	2200      	movs	r2, #0
 801483c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	781a      	ldrb	r2, [r3, #0]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	0011      	movs	r1, r2
 8014846:	0018      	movs	r0, r3
 8014848:	f008 fd2e 	bl	801d2a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801484c:	1dbb      	adds	r3, r7, #6
 801484e:	881a      	ldrh	r2, [r3, #0]
 8014850:	2380      	movs	r3, #128	@ 0x80
 8014852:	01db      	lsls	r3, r3, #7
 8014854:	4013      	ands	r3, r2
 8014856:	d100      	bne.n	801485a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014858:	e309      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	001a      	movs	r2, r3
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	18d3      	adds	r3, r2, r3
 8014868:	881b      	ldrh	r3, [r3, #0]
 801486a:	b29a      	uxth	r2, r3
 801486c:	2016      	movs	r0, #22
 801486e:	183b      	adds	r3, r7, r0
 8014870:	4971      	ldr	r1, [pc, #452]	@ (8014a38 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014872:	400a      	ands	r2, r1
 8014874:	801a      	strh	r2, [r3, #0]
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	001a      	movs	r2, r3
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	18d3      	adds	r3, r2, r3
 8014884:	183a      	adds	r2, r7, r0
 8014886:	8812      	ldrh	r2, [r2, #0]
 8014888:	496c      	ldr	r1, [pc, #432]	@ (8014a3c <HAL_PCD_EP_DB_Transmit+0x388>)
 801488a:	430a      	orrs	r2, r1
 801488c:	b292      	uxth	r2, r2
 801488e:	801a      	strh	r2, [r3, #0]
 8014890:	e2ed      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014892:	1dbb      	adds	r3, r7, #6
 8014894:	881a      	ldrh	r2, [r3, #0]
 8014896:	2380      	movs	r3, #128	@ 0x80
 8014898:	01db      	lsls	r3, r3, #7
 801489a:	4013      	ands	r3, r2
 801489c:	d01a      	beq.n	80148d4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	001a      	movs	r2, r3
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	18d3      	adds	r3, r2, r3
 80148ac:	881b      	ldrh	r3, [r3, #0]
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	208a      	movs	r0, #138	@ 0x8a
 80148b2:	183b      	adds	r3, r7, r0
 80148b4:	4960      	ldr	r1, [pc, #384]	@ (8014a38 <HAL_PCD_EP_DB_Transmit+0x384>)
 80148b6:	400a      	ands	r2, r1
 80148b8:	801a      	strh	r2, [r3, #0]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	001a      	movs	r2, r3
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	009b      	lsls	r3, r3, #2
 80148c6:	18d3      	adds	r3, r2, r3
 80148c8:	183a      	adds	r2, r7, r0
 80148ca:	8812      	ldrh	r2, [r2, #0]
 80148cc:	495b      	ldr	r1, [pc, #364]	@ (8014a3c <HAL_PCD_EP_DB_Transmit+0x388>)
 80148ce:	430a      	orrs	r2, r1
 80148d0:	b292      	uxth	r2, r2
 80148d2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	2224      	movs	r2, #36	@ 0x24
 80148d8:	5c9b      	ldrb	r3, [r3, r2]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d000      	beq.n	80148e0 <HAL_PCD_EP_DB_Transmit+0x22c>
 80148de:	e2c6      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	695a      	ldr	r2, [r3, #20]
 80148e4:	2186      	movs	r1, #134	@ 0x86
 80148e6:	187b      	adds	r3, r7, r1
 80148e8:	881b      	ldrh	r3, [r3, #0]
 80148ea:	18d2      	adds	r2, r2, r3
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	69da      	ldr	r2, [r3, #28]
 80148f4:	187b      	adds	r3, r7, r1
 80148f6:	881b      	ldrh	r3, [r3, #0]
 80148f8:	18d2      	adds	r2, r2, r3
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	6a1a      	ldr	r2, [r3, #32]
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	429a      	cmp	r2, r3
 8014908:	d30c      	bcc.n	8014924 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	691b      	ldr	r3, [r3, #16]
 801490e:	218c      	movs	r1, #140	@ 0x8c
 8014910:	187a      	adds	r2, r7, r1
 8014912:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	6a1a      	ldr	r2, [r3, #32]
 8014918:	187b      	adds	r3, r7, r1
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	1ad2      	subs	r2, r2, r3
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	621a      	str	r2, [r3, #32]
 8014922:	e01a      	b.n	801495a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	6a1b      	ldr	r3, [r3, #32]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10a      	bne.n	8014942 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801492c:	2386      	movs	r3, #134	@ 0x86
 801492e:	18fb      	adds	r3, r7, r3
 8014930:	881b      	ldrh	r3, [r3, #0]
 8014932:	228c      	movs	r2, #140	@ 0x8c
 8014934:	18ba      	adds	r2, r7, r2
 8014936:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	2224      	movs	r2, #36	@ 0x24
 801493c:	2100      	movs	r1, #0
 801493e:	5499      	strb	r1, [r3, r2]
 8014940:	e00b      	b.n	801495a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	2224      	movs	r2, #36	@ 0x24
 8014946:	2100      	movs	r1, #0
 8014948:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	6a1b      	ldr	r3, [r3, #32]
 801494e:	228c      	movs	r2, #140	@ 0x8c
 8014950:	18ba      	adds	r2, r7, r2
 8014952:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	2200      	movs	r2, #0
 8014958:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	785b      	ldrb	r3, [r3, #1]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d000      	beq.n	8014964 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014962:	e06d      	b.n	8014a40 <HAL_PCD_EP_DB_Transmit+0x38c>
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2250      	movs	r2, #80	@ 0x50
 8014970:	5a9b      	ldrh	r3, [r3, r2]
 8014972:	b29b      	uxth	r3, r3
 8014974:	001a      	movs	r2, r3
 8014976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014978:	189b      	adds	r3, r3, r2
 801497a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	00da      	lsls	r2, r3, #3
 8014982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014984:	18d3      	adds	r3, r2, r3
 8014986:	4a29      	ldr	r2, [pc, #164]	@ (8014a2c <HAL_PCD_EP_DB_Transmit+0x378>)
 8014988:	4694      	mov	ip, r2
 801498a:	4463      	add	r3, ip
 801498c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014990:	881b      	ldrh	r3, [r3, #0]
 8014992:	b29b      	uxth	r3, r3
 8014994:	059b      	lsls	r3, r3, #22
 8014996:	0d9b      	lsrs	r3, r3, #22
 8014998:	b29a      	uxth	r2, r3
 801499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801499c:	801a      	strh	r2, [r3, #0]
 801499e:	228c      	movs	r2, #140	@ 0x8c
 80149a0:	18bb      	adds	r3, r7, r2
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80149a6:	d91a      	bls.n	80149de <HAL_PCD_EP_DB_Transmit+0x32a>
 80149a8:	18bb      	adds	r3, r7, r2
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	095b      	lsrs	r3, r3, #5
 80149ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80149b0:	18bb      	adds	r3, r7, r2
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	221f      	movs	r2, #31
 80149b6:	4013      	ands	r3, r2
 80149b8:	d102      	bne.n	80149c0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80149ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149bc:	3b01      	subs	r3, #1
 80149be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80149c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c2:	881b      	ldrh	r3, [r3, #0]
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	029b      	lsls	r3, r3, #10
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	4313      	orrs	r3, r2
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	4a17      	ldr	r2, [pc, #92]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80149d4:	4313      	orrs	r3, r2
 80149d6:	b29a      	uxth	r2, r3
 80149d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149da:	801a      	strh	r2, [r3, #0]
 80149dc:	e04f      	b.n	8014a7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80149de:	238c      	movs	r3, #140	@ 0x8c
 80149e0:	18fb      	adds	r3, r7, r3
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d108      	bne.n	80149fa <HAL_PCD_EP_DB_Transmit+0x346>
 80149e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149ea:	881b      	ldrh	r3, [r3, #0]
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	4a10      	ldr	r2, [pc, #64]	@ (8014a30 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80149f0:	4313      	orrs	r3, r2
 80149f2:	b29a      	uxth	r2, r3
 80149f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149f6:	801a      	strh	r2, [r3, #0]
 80149f8:	e041      	b.n	8014a7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80149fa:	228c      	movs	r2, #140	@ 0x8c
 80149fc:	18bb      	adds	r3, r7, r2
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	085b      	lsrs	r3, r3, #1
 8014a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a04:	18bb      	adds	r3, r7, r2
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2201      	movs	r2, #1
 8014a0a:	4013      	ands	r3, r2
 8014a0c:	d002      	beq.n	8014a14 <HAL_PCD_EP_DB_Transmit+0x360>
 8014a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a10:	3301      	adds	r3, #1
 8014a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a16:	881b      	ldrh	r3, [r3, #0]
 8014a18:	b29a      	uxth	r2, r3
 8014a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	029b      	lsls	r3, r3, #10
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	4313      	orrs	r3, r2
 8014a24:	b29a      	uxth	r2, r3
 8014a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a28:	801a      	strh	r2, [r3, #0]
 8014a2a:	e028      	b.n	8014a7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a2c:	00000402 	.word	0x00000402
 8014a30:	ffff8000 	.word	0xffff8000
 8014a34:	00000406 	.word	0x00000406
 8014a38:	ffff8f8f 	.word	0xffff8f8f
 8014a3c:	ffffc080 	.word	0xffffc080
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	785b      	ldrb	r3, [r3, #1]
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d11a      	bne.n	8014a7e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2250      	movs	r2, #80	@ 0x50
 8014a54:	5a9b      	ldrh	r3, [r3, r2]
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	001a      	movs	r2, r3
 8014a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a5c:	189b      	adds	r3, r3, r2
 8014a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	00da      	lsls	r2, r3, #3
 8014a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a68:	18d3      	adds	r3, r2, r3
 8014a6a:	4adb      	ldr	r2, [pc, #876]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014a6c:	4694      	mov	ip, r2
 8014a6e:	4463      	add	r3, ip
 8014a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8014a72:	238c      	movs	r3, #140	@ 0x8c
 8014a74:	18fb      	adds	r3, r7, r3
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	b29a      	uxth	r2, r3
 8014a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a7c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	6818      	ldr	r0, [r3, #0]
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	6959      	ldr	r1, [r3, #20]
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	891a      	ldrh	r2, [r3, #8]
 8014a8a:	238c      	movs	r3, #140	@ 0x8c
 8014a8c:	18fb      	adds	r3, r7, r3
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	f006 fb85 	bl	801b1a0 <USB_WritePMA>
 8014a96:	e1ea      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	2250      	movs	r2, #80	@ 0x50
 8014a9e:	5a9b      	ldrh	r3, [r3, r2]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	001a      	movs	r2, r3
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	00db      	lsls	r3, r3, #3
 8014aaa:	18d2      	adds	r2, r2, r3
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	18d3      	adds	r3, r2, r3
 8014ab2:	4aca      	ldr	r2, [pc, #808]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ab4:	4694      	mov	ip, r2
 8014ab6:	4463      	add	r3, ip
 8014ab8:	881a      	ldrh	r2, [r3, #0]
 8014aba:	2186      	movs	r1, #134	@ 0x86
 8014abc:	187b      	adds	r3, r7, r1
 8014abe:	0592      	lsls	r2, r2, #22
 8014ac0:	0d92      	lsrs	r2, r2, #22
 8014ac2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	699a      	ldr	r2, [r3, #24]
 8014ac8:	187b      	adds	r3, r7, r1
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d307      	bcc.n	8014ae0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	699a      	ldr	r2, [r3, #24]
 8014ad4:	187b      	adds	r3, r7, r1
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	1ad2      	subs	r2, r2, r3
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	619a      	str	r2, [r3, #24]
 8014ade:	e002      	b.n	8014ae6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	699b      	ldr	r3, [r3, #24]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d000      	beq.n	8014af0 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014aee:	e0bb      	b.n	8014c68 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	785b      	ldrb	r3, [r3, #1]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d125      	bne.n	8014b44 <HAL_PCD_EP_DB_Transmit+0x490>
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2250      	movs	r2, #80	@ 0x50
 8014b04:	5a9b      	ldrh	r3, [r3, r2]
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	001a      	movs	r2, r3
 8014b0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b0c:	189b      	adds	r3, r3, r2
 8014b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	00da      	lsls	r2, r3, #3
 8014b16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b18:	18d3      	adds	r3, r2, r3
 8014b1a:	4aaf      	ldr	r2, [pc, #700]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014b1c:	4694      	mov	ip, r2
 8014b1e:	4463      	add	r3, ip
 8014b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	059b      	lsls	r3, r3, #22
 8014b2a:	0d9b      	lsrs	r3, r3, #22
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b30:	801a      	strh	r2, [r3, #0]
 8014b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b34:	881b      	ldrh	r3, [r3, #0]
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	4aa9      	ldr	r2, [pc, #676]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014b40:	801a      	strh	r2, [r3, #0]
 8014b42:	e01b      	b.n	8014b7c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	785b      	ldrb	r3, [r3, #1]
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d117      	bne.n	8014b7c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	2250      	movs	r2, #80	@ 0x50
 8014b58:	5a9b      	ldrh	r3, [r3, r2]
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	001a      	movs	r2, r3
 8014b5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014b60:	189b      	adds	r3, r3, r2
 8014b62:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	00da      	lsls	r2, r3, #3
 8014b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014b6c:	18d3      	adds	r3, r2, r3
 8014b6e:	4a9a      	ldr	r2, [pc, #616]	@ (8014dd8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014b70:	4694      	mov	ip, r2
 8014b72:	4463      	add	r3, ip
 8014b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8014b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b78:	2200      	movs	r2, #0
 8014b7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	677b      	str	r3, [r7, #116]	@ 0x74
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	785b      	ldrb	r3, [r3, #1]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d12b      	bne.n	8014be2 <HAL_PCD_EP_DB_Transmit+0x52e>
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2250      	movs	r2, #80	@ 0x50
 8014b96:	5a9b      	ldrh	r3, [r3, r2]
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	001a      	movs	r2, r3
 8014b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014b9e:	189b      	adds	r3, r3, r2
 8014ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	00da      	lsls	r2, r3, #3
 8014ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014baa:	18d3      	adds	r3, r2, r3
 8014bac:	4a8b      	ldr	r2, [pc, #556]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014bae:	4694      	mov	ip, r2
 8014bb0:	4463      	add	r3, ip
 8014bb2:	2180      	movs	r1, #128	@ 0x80
 8014bb4:	187a      	adds	r2, r7, r1
 8014bb6:	6013      	str	r3, [r2, #0]
 8014bb8:	187b      	adds	r3, r7, r1
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	881b      	ldrh	r3, [r3, #0]
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	059b      	lsls	r3, r3, #22
 8014bc2:	0d9b      	lsrs	r3, r3, #22
 8014bc4:	b29a      	uxth	r2, r3
 8014bc6:	187b      	adds	r3, r7, r1
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	801a      	strh	r2, [r3, #0]
 8014bcc:	187b      	adds	r3, r7, r1
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	881b      	ldrh	r3, [r3, #0]
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	4a82      	ldr	r2, [pc, #520]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014bd6:	4313      	orrs	r3, r2
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	187b      	adds	r3, r7, r1
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	801a      	strh	r2, [r3, #0]
 8014be0:	e018      	b.n	8014c14 <HAL_PCD_EP_DB_Transmit+0x560>
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	785b      	ldrb	r3, [r3, #1]
 8014be6:	2b01      	cmp	r3, #1
 8014be8:	d114      	bne.n	8014c14 <HAL_PCD_EP_DB_Transmit+0x560>
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2250      	movs	r2, #80	@ 0x50
 8014bf0:	5a9b      	ldrh	r3, [r3, r2]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	001a      	movs	r2, r3
 8014bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014bf8:	189b      	adds	r3, r3, r2
 8014bfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	00da      	lsls	r2, r3, #3
 8014c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014c04:	18d3      	adds	r3, r2, r3
 8014c06:	4a75      	ldr	r2, [pc, #468]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014c08:	4694      	mov	ip, r2
 8014c0a:	4463      	add	r3, ip
 8014c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8014c0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014c10:	2200      	movs	r2, #0
 8014c12:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	781a      	ldrb	r2, [r3, #0]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	0011      	movs	r1, r2
 8014c1c:	0018      	movs	r0, r3
 8014c1e:	f008 fb43 	bl	801d2a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014c22:	1dbb      	adds	r3, r7, #6
 8014c24:	881a      	ldrh	r2, [r3, #0]
 8014c26:	2380      	movs	r3, #128	@ 0x80
 8014c28:	01db      	lsls	r3, r3, #7
 8014c2a:	4013      	ands	r3, r2
 8014c2c:	d000      	beq.n	8014c30 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014c2e:	e11e      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	001a      	movs	r2, r3
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	009b      	lsls	r3, r3, #2
 8014c3c:	18d3      	adds	r3, r2, r3
 8014c3e:	881b      	ldrh	r3, [r3, #0]
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	2088      	movs	r0, #136	@ 0x88
 8014c44:	183b      	adds	r3, r7, r0
 8014c46:	4967      	ldr	r1, [pc, #412]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014c48:	400a      	ands	r2, r1
 8014c4a:	801a      	strh	r2, [r3, #0]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	001a      	movs	r2, r3
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	009b      	lsls	r3, r3, #2
 8014c58:	18d3      	adds	r3, r2, r3
 8014c5a:	183a      	adds	r2, r7, r0
 8014c5c:	8812      	ldrh	r2, [r2, #0]
 8014c5e:	4962      	ldr	r1, [pc, #392]	@ (8014de8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014c60:	430a      	orrs	r2, r1
 8014c62:	b292      	uxth	r2, r2
 8014c64:	801a      	strh	r2, [r3, #0]
 8014c66:	e102      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014c68:	1dbb      	adds	r3, r7, #6
 8014c6a:	881a      	ldrh	r2, [r3, #0]
 8014c6c:	2380      	movs	r3, #128	@ 0x80
 8014c6e:	01db      	lsls	r3, r3, #7
 8014c70:	4013      	ands	r3, r2
 8014c72:	d11a      	bne.n	8014caa <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	001a      	movs	r2, r3
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	18d3      	adds	r3, r2, r3
 8014c82:	881b      	ldrh	r3, [r3, #0]
 8014c84:	b29a      	uxth	r2, r3
 8014c86:	204e      	movs	r0, #78	@ 0x4e
 8014c88:	183b      	adds	r3, r7, r0
 8014c8a:	4956      	ldr	r1, [pc, #344]	@ (8014de4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014c8c:	400a      	ands	r2, r1
 8014c8e:	801a      	strh	r2, [r3, #0]
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	001a      	movs	r2, r3
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	18d3      	adds	r3, r2, r3
 8014c9e:	183a      	adds	r2, r7, r0
 8014ca0:	8812      	ldrh	r2, [r2, #0]
 8014ca2:	4951      	ldr	r1, [pc, #324]	@ (8014de8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014ca4:	430a      	orrs	r2, r1
 8014ca6:	b292      	uxth	r2, r2
 8014ca8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	2224      	movs	r2, #36	@ 0x24
 8014cae:	5c9b      	ldrb	r3, [r3, r2]
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	d000      	beq.n	8014cb6 <HAL_PCD_EP_DB_Transmit+0x602>
 8014cb4:	e0db      	b.n	8014e6e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	695a      	ldr	r2, [r3, #20]
 8014cba:	2186      	movs	r1, #134	@ 0x86
 8014cbc:	187b      	adds	r3, r7, r1
 8014cbe:	881b      	ldrh	r3, [r3, #0]
 8014cc0:	18d2      	adds	r2, r2, r3
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	69da      	ldr	r2, [r3, #28]
 8014cca:	187b      	adds	r3, r7, r1
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	18d2      	adds	r2, r2, r3
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	6a1a      	ldr	r2, [r3, #32]
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	691b      	ldr	r3, [r3, #16]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d30c      	bcc.n	8014cfa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	691b      	ldr	r3, [r3, #16]
 8014ce4:	218c      	movs	r1, #140	@ 0x8c
 8014ce6:	187a      	adds	r2, r7, r1
 8014ce8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	6a1a      	ldr	r2, [r3, #32]
 8014cee:	187b      	adds	r3, r7, r1
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	1ad2      	subs	r2, r2, r3
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	621a      	str	r2, [r3, #32]
 8014cf8:	e01a      	b.n	8014d30 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	6a1b      	ldr	r3, [r3, #32]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d10a      	bne.n	8014d18 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014d02:	2386      	movs	r3, #134	@ 0x86
 8014d04:	18fb      	adds	r3, r7, r3
 8014d06:	881b      	ldrh	r3, [r3, #0]
 8014d08:	228c      	movs	r2, #140	@ 0x8c
 8014d0a:	18ba      	adds	r2, r7, r2
 8014d0c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	2224      	movs	r2, #36	@ 0x24
 8014d12:	2100      	movs	r1, #0
 8014d14:	5499      	strb	r1, [r3, r2]
 8014d16:	e00b      	b.n	8014d30 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	6a1b      	ldr	r3, [r3, #32]
 8014d1c:	228c      	movs	r2, #140	@ 0x8c
 8014d1e:	18ba      	adds	r2, r7, r2
 8014d20:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	2200      	movs	r2, #0
 8014d26:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	2224      	movs	r2, #36	@ 0x24
 8014d2c:	2100      	movs	r1, #0
 8014d2e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	785b      	ldrb	r3, [r3, #1]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d000      	beq.n	8014d40 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014d3e:	e06e      	b.n	8014e1e <HAL_PCD_EP_DB_Transmit+0x76a>
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	2250      	movs	r2, #80	@ 0x50
 8014d4c:	5a9b      	ldrh	r3, [r3, r2]
 8014d4e:	b29b      	uxth	r3, r3
 8014d50:	001a      	movs	r2, r3
 8014d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d54:	189b      	adds	r3, r3, r2
 8014d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	00da      	lsls	r2, r3, #3
 8014d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d60:	18d3      	adds	r3, r2, r3
 8014d62:	4a1e      	ldr	r2, [pc, #120]	@ (8014ddc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014d64:	4694      	mov	ip, r2
 8014d66:	4463      	add	r3, ip
 8014d68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d6c:	881b      	ldrh	r3, [r3, #0]
 8014d6e:	b29b      	uxth	r3, r3
 8014d70:	059b      	lsls	r3, r3, #22
 8014d72:	0d9b      	lsrs	r3, r3, #22
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d78:	801a      	strh	r2, [r3, #0]
 8014d7a:	228c      	movs	r2, #140	@ 0x8c
 8014d7c:	18bb      	adds	r3, r7, r2
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	2b3e      	cmp	r3, #62	@ 0x3e
 8014d82:	d91a      	bls.n	8014dba <HAL_PCD_EP_DB_Transmit+0x706>
 8014d84:	18bb      	adds	r3, r7, r2
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	095b      	lsrs	r3, r3, #5
 8014d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d8c:	18bb      	adds	r3, r7, r2
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	221f      	movs	r2, #31
 8014d92:	4013      	ands	r3, r2
 8014d94:	d102      	bne.n	8014d9c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014d96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014d98:	3b01      	subs	r3, #1
 8014d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	b29a      	uxth	r2, r3
 8014da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	029b      	lsls	r3, r3, #10
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	4313      	orrs	r3, r2
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	4a0c      	ldr	r2, [pc, #48]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014db0:	4313      	orrs	r3, r2
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014db6:	801a      	strh	r2, [r3, #0]
 8014db8:	e04d      	b.n	8014e56 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014dba:	238c      	movs	r3, #140	@ 0x8c
 8014dbc:	18fb      	adds	r3, r7, r3
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d113      	bne.n	8014dec <HAL_PCD_EP_DB_Transmit+0x738>
 8014dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dc6:	881b      	ldrh	r3, [r3, #0]
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	4a05      	ldr	r2, [pc, #20]	@ (8014de0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014dcc:	4313      	orrs	r3, r2
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dd2:	801a      	strh	r2, [r3, #0]
 8014dd4:	e03f      	b.n	8014e56 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014dd6:	46c0      	nop			@ (mov r8, r8)
 8014dd8:	00000402 	.word	0x00000402
 8014ddc:	00000406 	.word	0x00000406
 8014de0:	ffff8000 	.word	0xffff8000
 8014de4:	ffff8f8f 	.word	0xffff8f8f
 8014de8:	ffffc080 	.word	0xffffc080
 8014dec:	228c      	movs	r2, #140	@ 0x8c
 8014dee:	18bb      	adds	r3, r7, r2
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	085b      	lsrs	r3, r3, #1
 8014df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014df6:	18bb      	adds	r3, r7, r2
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	4013      	ands	r3, r2
 8014dfe:	d002      	beq.n	8014e06 <HAL_PCD_EP_DB_Transmit+0x752>
 8014e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014e02:	3301      	adds	r3, #1
 8014e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e08:	881b      	ldrh	r3, [r3, #0]
 8014e0a:	b29a      	uxth	r2, r3
 8014e0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	029b      	lsls	r3, r3, #10
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	4313      	orrs	r3, r2
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e1a:	801a      	strh	r2, [r3, #0]
 8014e1c:	e01b      	b.n	8014e56 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	785b      	ldrb	r3, [r3, #1]
 8014e22:	2b01      	cmp	r3, #1
 8014e24:	d117      	bne.n	8014e56 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	2250      	movs	r2, #80	@ 0x50
 8014e2c:	5a9b      	ldrh	r3, [r3, r2]
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	001a      	movs	r2, r3
 8014e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e34:	189b      	adds	r3, r3, r2
 8014e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	781b      	ldrb	r3, [r3, #0]
 8014e3c:	00da      	lsls	r2, r3, #3
 8014e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e40:	18d3      	adds	r3, r2, r3
 8014e42:	4a21      	ldr	r2, [pc, #132]	@ (8014ec8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014e44:	4694      	mov	ip, r2
 8014e46:	4463      	add	r3, ip
 8014e48:	653b      	str	r3, [r7, #80]	@ 0x50
 8014e4a:	238c      	movs	r3, #140	@ 0x8c
 8014e4c:	18fb      	adds	r3, r7, r3
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e54:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	6818      	ldr	r0, [r3, #0]
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	6959      	ldr	r1, [r3, #20]
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	895a      	ldrh	r2, [r3, #10]
 8014e62:	238c      	movs	r3, #140	@ 0x8c
 8014e64:	18fb      	adds	r3, r7, r3
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	f006 f999 	bl	801b1a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	001a      	movs	r2, r3
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	18d3      	adds	r3, r2, r3
 8014e7c:	881b      	ldrh	r3, [r3, #0]
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	2014      	movs	r0, #20
 8014e82:	183b      	adds	r3, r7, r0
 8014e84:	4911      	ldr	r1, [pc, #68]	@ (8014ecc <HAL_PCD_EP_DB_Transmit+0x818>)
 8014e86:	400a      	ands	r2, r1
 8014e88:	801a      	strh	r2, [r3, #0]
 8014e8a:	183b      	adds	r3, r7, r0
 8014e8c:	183a      	adds	r2, r7, r0
 8014e8e:	8812      	ldrh	r2, [r2, #0]
 8014e90:	2110      	movs	r1, #16
 8014e92:	404a      	eors	r2, r1
 8014e94:	801a      	strh	r2, [r3, #0]
 8014e96:	183b      	adds	r3, r7, r0
 8014e98:	183a      	adds	r2, r7, r0
 8014e9a:	8812      	ldrh	r2, [r2, #0]
 8014e9c:	2120      	movs	r1, #32
 8014e9e:	404a      	eors	r2, r1
 8014ea0:	801a      	strh	r2, [r3, #0]
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	001a      	movs	r2, r3
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	009b      	lsls	r3, r3, #2
 8014eae:	18d3      	adds	r3, r2, r3
 8014eb0:	183a      	adds	r2, r7, r0
 8014eb2:	8812      	ldrh	r2, [r2, #0]
 8014eb4:	4906      	ldr	r1, [pc, #24]	@ (8014ed0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014eb6:	430a      	orrs	r2, r1
 8014eb8:	b292      	uxth	r2, r2
 8014eba:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014ebc:	2300      	movs	r3, #0
}
 8014ebe:	0018      	movs	r0, r3
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	b024      	add	sp, #144	@ 0x90
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	46c0      	nop			@ (mov r8, r8)
 8014ec8:	00000406 	.word	0x00000406
 8014ecc:	ffff8fbf 	.word	0xffff8fbf
 8014ed0:	ffff8080 	.word	0xffff8080

08014ed4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014ed4:	b590      	push	{r4, r7, lr}
 8014ed6:	b087      	sub	sp, #28
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	0008      	movs	r0, r1
 8014ede:	0011      	movs	r1, r2
 8014ee0:	607b      	str	r3, [r7, #4]
 8014ee2:	240a      	movs	r4, #10
 8014ee4:	193b      	adds	r3, r7, r4
 8014ee6:	1c02      	adds	r2, r0, #0
 8014ee8:	801a      	strh	r2, [r3, #0]
 8014eea:	2308      	movs	r3, #8
 8014eec:	18fb      	adds	r3, r7, r3
 8014eee:	1c0a      	adds	r2, r1, #0
 8014ef0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014ef2:	0021      	movs	r1, r4
 8014ef4:	187b      	adds	r3, r7, r1
 8014ef6:	881b      	ldrh	r3, [r3, #0]
 8014ef8:	2280      	movs	r2, #128	@ 0x80
 8014efa:	4013      	ands	r3, r2
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d00c      	beq.n	8014f1c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014f02:	187b      	adds	r3, r7, r1
 8014f04:	881b      	ldrh	r3, [r3, #0]
 8014f06:	2207      	movs	r2, #7
 8014f08:	4013      	ands	r3, r2
 8014f0a:	1c5a      	adds	r2, r3, #1
 8014f0c:	0013      	movs	r3, r2
 8014f0e:	009b      	lsls	r3, r3, #2
 8014f10:	189b      	adds	r3, r3, r2
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	68fa      	ldr	r2, [r7, #12]
 8014f16:	18d3      	adds	r3, r2, r3
 8014f18:	617b      	str	r3, [r7, #20]
 8014f1a:	e00b      	b.n	8014f34 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014f1c:	230a      	movs	r3, #10
 8014f1e:	18fb      	adds	r3, r7, r3
 8014f20:	881a      	ldrh	r2, [r3, #0]
 8014f22:	0013      	movs	r3, r2
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	189b      	adds	r3, r3, r2
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	3369      	adds	r3, #105	@ 0x69
 8014f2c:	33ff      	adds	r3, #255	@ 0xff
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	18d3      	adds	r3, r2, r3
 8014f32:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014f34:	2308      	movs	r3, #8
 8014f36:	18fb      	adds	r3, r7, r3
 8014f38:	881b      	ldrh	r3, [r3, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d107      	bne.n	8014f4e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	2200      	movs	r2, #0
 8014f42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	b29a      	uxth	r2, r3
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	80da      	strh	r2, [r3, #6]
 8014f4c:	e00b      	b.n	8014f66 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	2201      	movs	r2, #1
 8014f52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	0c1b      	lsrs	r3, r3, #16
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014f66:	2300      	movs	r3, #0
}
 8014f68:	0018      	movs	r0, r3
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	b007      	add	sp, #28
 8014f6e:	bd90      	pop	{r4, r7, pc}

08014f70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	23ba      	movs	r3, #186	@ 0xba
 8014f82:	009b      	lsls	r3, r3, #2
 8014f84:	2101      	movs	r1, #1
 8014f86:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	23b8      	movs	r3, #184	@ 0xb8
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	2100      	movs	r1, #0
 8014f90:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	2254      	movs	r2, #84	@ 0x54
 8014f96:	5a9b      	ldrh	r3, [r3, r2]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	4313      	orrs	r3, r2
 8014f9e:	b299      	uxth	r1, r3
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2254      	movs	r2, #84	@ 0x54
 8014fa4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2254      	movs	r2, #84	@ 0x54
 8014faa:	5a9b      	ldrh	r3, [r3, r2]
 8014fac:	b29b      	uxth	r3, r3
 8014fae:	2202      	movs	r2, #2
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	b299      	uxth	r1, r3
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2254      	movs	r2, #84	@ 0x54
 8014fb8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014fba:	2300      	movs	r3, #0
}
 8014fbc:	0018      	movs	r0, r3
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	b004      	add	sp, #16
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	000a      	movs	r2, r1
 8014fce:	1cfb      	adds	r3, r7, #3
 8014fd0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014fd2:	46c0      	nop			@ (mov r8, r8)
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	b002      	add	sp, #8
 8014fd8:	bd80      	pop	{r7, pc}
	...

08014fdc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014fe0:	4b04      	ldr	r3, [pc, #16]	@ (8014ff4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	4b03      	ldr	r3, [pc, #12]	@ (8014ff4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014fe6:	2180      	movs	r1, #128	@ 0x80
 8014fe8:	0049      	lsls	r1, r1, #1
 8014fea:	430a      	orrs	r2, r1
 8014fec:	601a      	str	r2, [r3, #0]
}
 8014fee:	46c0      	nop			@ (mov r8, r8)
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	40007000 	.word	0x40007000

08014ff8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014ffc:	4b04      	ldr	r3, [pc, #16]	@ (8015010 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	4b03      	ldr	r3, [pc, #12]	@ (8015010 <HAL_PWR_DisableBkUpAccess+0x18>)
 8015002:	4904      	ldr	r1, [pc, #16]	@ (8015014 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8015004:	400a      	ands	r2, r1
 8015006:	601a      	str	r2, [r3, #0]
}
 8015008:	46c0      	nop			@ (mov r8, r8)
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	46c0      	nop			@ (mov r8, r8)
 8015010:	40007000 	.word	0x40007000
 8015014:	fffffeff 	.word	0xfffffeff

08015018 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b086      	sub	sp, #24
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	000a      	movs	r2, r1
 8015022:	1cfb      	adds	r3, r7, #3
 8015024:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8015026:	2300      	movs	r3, #0
 8015028:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801502a:	4b25      	ldr	r3, [pc, #148]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	2380      	movs	r3, #128	@ 0x80
 8015030:	009b      	lsls	r3, r3, #2
 8015032:	4013      	ands	r3, r2
 8015034:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8015036:	4b23      	ldr	r3, [pc, #140]	@ (80150c4 <HAL_PWR_EnterSTOPMode+0xac>)
 8015038:	6a1b      	ldr	r3, [r3, #32]
 801503a:	2201      	movs	r2, #1
 801503c:	4013      	ands	r3, r2
 801503e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d008      	beq.n	8015058 <HAL_PWR_EnterSTOPMode+0x40>
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d005      	beq.n	8015058 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801504c:	4b1c      	ldr	r3, [pc, #112]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801504e:	681a      	ldr	r2, [r3, #0]
 8015050:	4b1b      	ldr	r3, [pc, #108]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015052:	491d      	ldr	r1, [pc, #116]	@ (80150c8 <HAL_PWR_EnterSTOPMode+0xb0>)
 8015054:	400a      	ands	r2, r1
 8015056:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8015058:	4b19      	ldr	r3, [pc, #100]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	2203      	movs	r2, #3
 8015062:	4393      	bics	r3, r2
 8015064:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8015066:	697a      	ldr	r2, [r7, #20]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	4313      	orrs	r3, r2
 801506c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801506e:	4b14      	ldr	r3, [pc, #80]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015070:	697a      	ldr	r2, [r7, #20]
 8015072:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015074:	4b15      	ldr	r3, [pc, #84]	@ (80150cc <HAL_PWR_EnterSTOPMode+0xb4>)
 8015076:	691a      	ldr	r2, [r3, #16]
 8015078:	4b14      	ldr	r3, [pc, #80]	@ (80150cc <HAL_PWR_EnterSTOPMode+0xb4>)
 801507a:	2104      	movs	r1, #4
 801507c:	430a      	orrs	r2, r1
 801507e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8015080:	1cfb      	adds	r3, r7, #3
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d101      	bne.n	801508c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8015088:	bf30      	wfi
 801508a:	e002      	b.n	8015092 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801508c:	bf40      	sev
    __WFE();
 801508e:	bf20      	wfe
    __WFE();
 8015090:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015092:	4b0e      	ldr	r3, [pc, #56]	@ (80150cc <HAL_PWR_EnterSTOPMode+0xb4>)
 8015094:	691a      	ldr	r2, [r3, #16]
 8015096:	4b0d      	ldr	r3, [pc, #52]	@ (80150cc <HAL_PWR_EnterSTOPMode+0xb4>)
 8015098:	2104      	movs	r1, #4
 801509a:	438a      	bics	r2, r1
 801509c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d009      	beq.n	80150b8 <HAL_PWR_EnterSTOPMode+0xa0>
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d006      	beq.n	80150b8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80150aa:	4b05      	ldr	r3, [pc, #20]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	4b04      	ldr	r3, [pc, #16]	@ (80150c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 80150b0:	2180      	movs	r1, #128	@ 0x80
 80150b2:	0089      	lsls	r1, r1, #2
 80150b4:	430a      	orrs	r2, r1
 80150b6:	601a      	str	r2, [r3, #0]
  }
}
 80150b8:	46c0      	nop			@ (mov r8, r8)
 80150ba:	46bd      	mov	sp, r7
 80150bc:	b006      	add	sp, #24
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	40007000 	.word	0x40007000
 80150c4:	40010000 	.word	0x40010000
 80150c8:	fffffdff 	.word	0xfffffdff
 80150cc:	e000ed00 	.word	0xe000ed00

080150d0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80150d4:	4b07      	ldr	r3, [pc, #28]	@ (80150f4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80150d6:	681a      	ldr	r2, [r3, #0]
 80150d8:	4b06      	ldr	r3, [pc, #24]	@ (80150f4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80150da:	2102      	movs	r1, #2
 80150dc:	430a      	orrs	r2, r1
 80150de:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80150e0:	4b05      	ldr	r3, [pc, #20]	@ (80150f8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80150e2:	691a      	ldr	r2, [r3, #16]
 80150e4:	4b04      	ldr	r3, [pc, #16]	@ (80150f8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80150e6:	2104      	movs	r1, #4
 80150e8:	430a      	orrs	r2, r1
 80150ea:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80150ec:	bf30      	wfi
}
 80150ee:	46c0      	nop			@ (mov r8, r8)
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	40007000 	.word	0x40007000
 80150f8:	e000ed00 	.word	0xe000ed00

080150fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80150fc:	b5b0      	push	{r4, r5, r7, lr}
 80150fe:	b08a      	sub	sp, #40	@ 0x28
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d102      	bne.n	8015110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801510a:	2301      	movs	r3, #1
 801510c:	f000 fbbf 	bl	801588e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015110:	4bc9      	ldr	r3, [pc, #804]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015112:	68db      	ldr	r3, [r3, #12]
 8015114:	220c      	movs	r2, #12
 8015116:	4013      	ands	r3, r2
 8015118:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801511a:	4bc7      	ldr	r3, [pc, #796]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801511c:	68da      	ldr	r2, [r3, #12]
 801511e:	2380      	movs	r3, #128	@ 0x80
 8015120:	025b      	lsls	r3, r3, #9
 8015122:	4013      	ands	r3, r2
 8015124:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2201      	movs	r2, #1
 801512c:	4013      	ands	r3, r2
 801512e:	d100      	bne.n	8015132 <HAL_RCC_OscConfig+0x36>
 8015130:	e07e      	b.n	8015230 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	2b08      	cmp	r3, #8
 8015136:	d007      	beq.n	8015148 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	2b0c      	cmp	r3, #12
 801513c:	d112      	bne.n	8015164 <HAL_RCC_OscConfig+0x68>
 801513e:	69ba      	ldr	r2, [r7, #24]
 8015140:	2380      	movs	r3, #128	@ 0x80
 8015142:	025b      	lsls	r3, r3, #9
 8015144:	429a      	cmp	r2, r3
 8015146:	d10d      	bne.n	8015164 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015148:	4bbb      	ldr	r3, [pc, #748]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	2380      	movs	r3, #128	@ 0x80
 801514e:	029b      	lsls	r3, r3, #10
 8015150:	4013      	ands	r3, r2
 8015152:	d100      	bne.n	8015156 <HAL_RCC_OscConfig+0x5a>
 8015154:	e06b      	b.n	801522e <HAL_RCC_OscConfig+0x132>
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d167      	bne.n	801522e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801515e:	2301      	movs	r3, #1
 8015160:	f000 fb95 	bl	801588e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	685a      	ldr	r2, [r3, #4]
 8015168:	2380      	movs	r3, #128	@ 0x80
 801516a:	025b      	lsls	r3, r3, #9
 801516c:	429a      	cmp	r2, r3
 801516e:	d107      	bne.n	8015180 <HAL_RCC_OscConfig+0x84>
 8015170:	4bb1      	ldr	r3, [pc, #708]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	4bb0      	ldr	r3, [pc, #704]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015176:	2180      	movs	r1, #128	@ 0x80
 8015178:	0249      	lsls	r1, r1, #9
 801517a:	430a      	orrs	r2, r1
 801517c:	601a      	str	r2, [r3, #0]
 801517e:	e027      	b.n	80151d0 <HAL_RCC_OscConfig+0xd4>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	685a      	ldr	r2, [r3, #4]
 8015184:	23a0      	movs	r3, #160	@ 0xa0
 8015186:	02db      	lsls	r3, r3, #11
 8015188:	429a      	cmp	r2, r3
 801518a:	d10e      	bne.n	80151aa <HAL_RCC_OscConfig+0xae>
 801518c:	4baa      	ldr	r3, [pc, #680]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	4ba9      	ldr	r3, [pc, #676]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015192:	2180      	movs	r1, #128	@ 0x80
 8015194:	02c9      	lsls	r1, r1, #11
 8015196:	430a      	orrs	r2, r1
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	4ba7      	ldr	r3, [pc, #668]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801519c:	681a      	ldr	r2, [r3, #0]
 801519e:	4ba6      	ldr	r3, [pc, #664]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151a0:	2180      	movs	r1, #128	@ 0x80
 80151a2:	0249      	lsls	r1, r1, #9
 80151a4:	430a      	orrs	r2, r1
 80151a6:	601a      	str	r2, [r3, #0]
 80151a8:	e012      	b.n	80151d0 <HAL_RCC_OscConfig+0xd4>
 80151aa:	4ba3      	ldr	r3, [pc, #652]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	4ba2      	ldr	r3, [pc, #648]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151b0:	49a2      	ldr	r1, [pc, #648]	@ (801543c <HAL_RCC_OscConfig+0x340>)
 80151b2:	400a      	ands	r2, r1
 80151b4:	601a      	str	r2, [r3, #0]
 80151b6:	4ba0      	ldr	r3, [pc, #640]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151b8:	681a      	ldr	r2, [r3, #0]
 80151ba:	2380      	movs	r3, #128	@ 0x80
 80151bc:	025b      	lsls	r3, r3, #9
 80151be:	4013      	ands	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	4b9c      	ldr	r3, [pc, #624]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	4b9b      	ldr	r3, [pc, #620]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151ca:	499d      	ldr	r1, [pc, #628]	@ (8015440 <HAL_RCC_OscConfig+0x344>)
 80151cc:	400a      	ands	r2, r1
 80151ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d015      	beq.n	8015204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151d8:	f7f9 fe60 	bl	800ee9c <HAL_GetTick>
 80151dc:	0003      	movs	r3, r0
 80151de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80151e0:	e009      	b.n	80151f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80151e2:	f7f9 fe5b 	bl	800ee9c <HAL_GetTick>
 80151e6:	0002      	movs	r2, r0
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	1ad3      	subs	r3, r2, r3
 80151ec:	2b64      	cmp	r3, #100	@ 0x64
 80151ee:	d902      	bls.n	80151f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80151f0:	2303      	movs	r3, #3
 80151f2:	f000 fb4c 	bl	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80151f6:	4b90      	ldr	r3, [pc, #576]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	2380      	movs	r3, #128	@ 0x80
 80151fc:	029b      	lsls	r3, r3, #10
 80151fe:	4013      	ands	r3, r2
 8015200:	d0ef      	beq.n	80151e2 <HAL_RCC_OscConfig+0xe6>
 8015202:	e015      	b.n	8015230 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015204:	f7f9 fe4a 	bl	800ee9c <HAL_GetTick>
 8015208:	0003      	movs	r3, r0
 801520a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801520c:	e008      	b.n	8015220 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801520e:	f7f9 fe45 	bl	800ee9c <HAL_GetTick>
 8015212:	0002      	movs	r2, r0
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	2b64      	cmp	r3, #100	@ 0x64
 801521a:	d901      	bls.n	8015220 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801521c:	2303      	movs	r3, #3
 801521e:	e336      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015220:	4b85      	ldr	r3, [pc, #532]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	2380      	movs	r3, #128	@ 0x80
 8015226:	029b      	lsls	r3, r3, #10
 8015228:	4013      	ands	r3, r2
 801522a:	d1f0      	bne.n	801520e <HAL_RCC_OscConfig+0x112>
 801522c:	e000      	b.n	8015230 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801522e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	2202      	movs	r2, #2
 8015236:	4013      	ands	r3, r2
 8015238:	d100      	bne.n	801523c <HAL_RCC_OscConfig+0x140>
 801523a:	e099      	b.n	8015370 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	68db      	ldr	r3, [r3, #12]
 8015240:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015244:	2220      	movs	r2, #32
 8015246:	4013      	ands	r3, r2
 8015248:	d009      	beq.n	801525e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801524a:	4b7b      	ldr	r3, [pc, #492]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	4b7a      	ldr	r3, [pc, #488]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015250:	2120      	movs	r1, #32
 8015252:	430a      	orrs	r2, r1
 8015254:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8015256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015258:	2220      	movs	r2, #32
 801525a:	4393      	bics	r3, r2
 801525c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	2b04      	cmp	r3, #4
 8015262:	d005      	beq.n	8015270 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015264:	69fb      	ldr	r3, [r7, #28]
 8015266:	2b0c      	cmp	r3, #12
 8015268:	d13e      	bne.n	80152e8 <HAL_RCC_OscConfig+0x1ec>
 801526a:	69bb      	ldr	r3, [r7, #24]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d13b      	bne.n	80152e8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015270:	4b71      	ldr	r3, [pc, #452]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2204      	movs	r2, #4
 8015276:	4013      	ands	r3, r2
 8015278:	d004      	beq.n	8015284 <HAL_RCC_OscConfig+0x188>
 801527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801527c:	2b00      	cmp	r3, #0
 801527e:	d101      	bne.n	8015284 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015280:	2301      	movs	r3, #1
 8015282:	e304      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015284:	4b6c      	ldr	r3, [pc, #432]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	4a6e      	ldr	r2, [pc, #440]	@ (8015444 <HAL_RCC_OscConfig+0x348>)
 801528a:	4013      	ands	r3, r2
 801528c:	0019      	movs	r1, r3
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	691b      	ldr	r3, [r3, #16]
 8015292:	021a      	lsls	r2, r3, #8
 8015294:	4b68      	ldr	r3, [pc, #416]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015296:	430a      	orrs	r2, r1
 8015298:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801529a:	4b67      	ldr	r3, [pc, #412]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2209      	movs	r2, #9
 80152a0:	4393      	bics	r3, r2
 80152a2:	0019      	movs	r1, r3
 80152a4:	4b64      	ldr	r3, [pc, #400]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80152a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152a8:	430a      	orrs	r2, r1
 80152aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80152ac:	f000 fc42 	bl	8015b34 <HAL_RCC_GetSysClockFreq>
 80152b0:	0001      	movs	r1, r0
 80152b2:	4b61      	ldr	r3, [pc, #388]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	091b      	lsrs	r3, r3, #4
 80152b8:	220f      	movs	r2, #15
 80152ba:	4013      	ands	r3, r2
 80152bc:	4a62      	ldr	r2, [pc, #392]	@ (8015448 <HAL_RCC_OscConfig+0x34c>)
 80152be:	5cd3      	ldrb	r3, [r2, r3]
 80152c0:	000a      	movs	r2, r1
 80152c2:	40da      	lsrs	r2, r3
 80152c4:	4b61      	ldr	r3, [pc, #388]	@ (801544c <HAL_RCC_OscConfig+0x350>)
 80152c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80152c8:	4b61      	ldr	r3, [pc, #388]	@ (8015450 <HAL_RCC_OscConfig+0x354>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2513      	movs	r5, #19
 80152ce:	197c      	adds	r4, r7, r5
 80152d0:	0018      	movs	r0, r3
 80152d2:	f7f9 fd9d 	bl	800ee10 <HAL_InitTick>
 80152d6:	0003      	movs	r3, r0
 80152d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80152da:	197b      	adds	r3, r7, r5
 80152dc:	781b      	ldrb	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d046      	beq.n	8015370 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80152e2:	197b      	adds	r3, r7, r5
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	e2d2      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80152e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d027      	beq.n	801533e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80152ee:	4b52      	ldr	r3, [pc, #328]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2209      	movs	r2, #9
 80152f4:	4393      	bics	r3, r2
 80152f6:	0019      	movs	r1, r3
 80152f8:	4b4f      	ldr	r3, [pc, #316]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80152fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152fc:	430a      	orrs	r2, r1
 80152fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015300:	f7f9 fdcc 	bl	800ee9c <HAL_GetTick>
 8015304:	0003      	movs	r3, r0
 8015306:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015308:	e008      	b.n	801531c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801530a:	f7f9 fdc7 	bl	800ee9c <HAL_GetTick>
 801530e:	0002      	movs	r2, r0
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	1ad3      	subs	r3, r2, r3
 8015314:	2b02      	cmp	r3, #2
 8015316:	d901      	bls.n	801531c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8015318:	2303      	movs	r3, #3
 801531a:	e2b8      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801531c:	4b46      	ldr	r3, [pc, #280]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2204      	movs	r2, #4
 8015322:	4013      	ands	r3, r2
 8015324:	d0f1      	beq.n	801530a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015326:	4b44      	ldr	r3, [pc, #272]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015328:	685b      	ldr	r3, [r3, #4]
 801532a:	4a46      	ldr	r2, [pc, #280]	@ (8015444 <HAL_RCC_OscConfig+0x348>)
 801532c:	4013      	ands	r3, r2
 801532e:	0019      	movs	r1, r3
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	691b      	ldr	r3, [r3, #16]
 8015334:	021a      	lsls	r2, r3, #8
 8015336:	4b40      	ldr	r3, [pc, #256]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015338:	430a      	orrs	r2, r1
 801533a:	605a      	str	r2, [r3, #4]
 801533c:	e018      	b.n	8015370 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801533e:	4b3e      	ldr	r3, [pc, #248]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015340:	681a      	ldr	r2, [r3, #0]
 8015342:	4b3d      	ldr	r3, [pc, #244]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015344:	2101      	movs	r1, #1
 8015346:	438a      	bics	r2, r1
 8015348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801534a:	f7f9 fda7 	bl	800ee9c <HAL_GetTick>
 801534e:	0003      	movs	r3, r0
 8015350:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015352:	e008      	b.n	8015366 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015354:	f7f9 fda2 	bl	800ee9c <HAL_GetTick>
 8015358:	0002      	movs	r2, r0
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	1ad3      	subs	r3, r2, r3
 801535e:	2b02      	cmp	r3, #2
 8015360:	d901      	bls.n	8015366 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8015362:	2303      	movs	r3, #3
 8015364:	e293      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015366:	4b34      	ldr	r3, [pc, #208]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	2204      	movs	r2, #4
 801536c:	4013      	ands	r3, r2
 801536e:	d1f1      	bne.n	8015354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2210      	movs	r2, #16
 8015376:	4013      	ands	r3, r2
 8015378:	d100      	bne.n	801537c <HAL_RCC_OscConfig+0x280>
 801537a:	e0a2      	b.n	80154c2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d140      	bne.n	8015404 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015382:	4b2d      	ldr	r3, [pc, #180]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	2380      	movs	r3, #128	@ 0x80
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	4013      	ands	r3, r2
 801538c:	d005      	beq.n	801539a <HAL_RCC_OscConfig+0x29e>
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	69db      	ldr	r3, [r3, #28]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d101      	bne.n	801539a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8015396:	2301      	movs	r3, #1
 8015398:	e279      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801539a:	4b27      	ldr	r3, [pc, #156]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	4a2d      	ldr	r2, [pc, #180]	@ (8015454 <HAL_RCC_OscConfig+0x358>)
 80153a0:	4013      	ands	r3, r2
 80153a2:	0019      	movs	r1, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153a8:	4b23      	ldr	r3, [pc, #140]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80153aa:	430a      	orrs	r2, r1
 80153ac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80153ae:	4b22      	ldr	r3, [pc, #136]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	021b      	lsls	r3, r3, #8
 80153b4:	0a19      	lsrs	r1, r3, #8
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6a1b      	ldr	r3, [r3, #32]
 80153ba:	061a      	lsls	r2, r3, #24
 80153bc:	4b1e      	ldr	r3, [pc, #120]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80153be:	430a      	orrs	r2, r1
 80153c0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153c6:	0b5b      	lsrs	r3, r3, #13
 80153c8:	3301      	adds	r3, #1
 80153ca:	2280      	movs	r2, #128	@ 0x80
 80153cc:	0212      	lsls	r2, r2, #8
 80153ce:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80153d0:	4b19      	ldr	r3, [pc, #100]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 80153d2:	68db      	ldr	r3, [r3, #12]
 80153d4:	091b      	lsrs	r3, r3, #4
 80153d6:	210f      	movs	r1, #15
 80153d8:	400b      	ands	r3, r1
 80153da:	491b      	ldr	r1, [pc, #108]	@ (8015448 <HAL_RCC_OscConfig+0x34c>)
 80153dc:	5ccb      	ldrb	r3, [r1, r3]
 80153de:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80153e0:	4b1a      	ldr	r3, [pc, #104]	@ (801544c <HAL_RCC_OscConfig+0x350>)
 80153e2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80153e4:	4b1a      	ldr	r3, [pc, #104]	@ (8015450 <HAL_RCC_OscConfig+0x354>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	2513      	movs	r5, #19
 80153ea:	197c      	adds	r4, r7, r5
 80153ec:	0018      	movs	r0, r3
 80153ee:	f7f9 fd0f 	bl	800ee10 <HAL_InitTick>
 80153f2:	0003      	movs	r3, r0
 80153f4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80153f6:	197b      	adds	r3, r7, r5
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d061      	beq.n	80154c2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80153fe:	197b      	adds	r3, r7, r5
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	e244      	b.n	801588e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	69db      	ldr	r3, [r3, #28]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d040      	beq.n	801548e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801540c:	4b0a      	ldr	r3, [pc, #40]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	4b09      	ldr	r3, [pc, #36]	@ (8015438 <HAL_RCC_OscConfig+0x33c>)
 8015412:	2180      	movs	r1, #128	@ 0x80
 8015414:	0049      	lsls	r1, r1, #1
 8015416:	430a      	orrs	r2, r1
 8015418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801541a:	f7f9 fd3f 	bl	800ee9c <HAL_GetTick>
 801541e:	0003      	movs	r3, r0
 8015420:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015422:	e019      	b.n	8015458 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015424:	f7f9 fd3a 	bl	800ee9c <HAL_GetTick>
 8015428:	0002      	movs	r2, r0
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	1ad3      	subs	r3, r2, r3
 801542e:	2b02      	cmp	r3, #2
 8015430:	d912      	bls.n	8015458 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015432:	2303      	movs	r3, #3
 8015434:	e22b      	b.n	801588e <HAL_RCC_OscConfig+0x792>
 8015436:	46c0      	nop			@ (mov r8, r8)
 8015438:	40021000 	.word	0x40021000
 801543c:	fffeffff 	.word	0xfffeffff
 8015440:	fffbffff 	.word	0xfffbffff
 8015444:	ffffe0ff 	.word	0xffffe0ff
 8015448:	080257d4 	.word	0x080257d4
 801544c:	200000d0 	.word	0x200000d0
 8015450:	200000e0 	.word	0x200000e0
 8015454:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015458:	4bca      	ldr	r3, [pc, #808]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	2380      	movs	r3, #128	@ 0x80
 801545e:	009b      	lsls	r3, r3, #2
 8015460:	4013      	ands	r3, r2
 8015462:	d0df      	beq.n	8015424 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015464:	4bc7      	ldr	r3, [pc, #796]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	4ac7      	ldr	r2, [pc, #796]	@ (8015788 <HAL_RCC_OscConfig+0x68c>)
 801546a:	4013      	ands	r3, r2
 801546c:	0019      	movs	r1, r3
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015472:	4bc4      	ldr	r3, [pc, #784]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015474:	430a      	orrs	r2, r1
 8015476:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015478:	4bc2      	ldr	r3, [pc, #776]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801547a:	685b      	ldr	r3, [r3, #4]
 801547c:	021b      	lsls	r3, r3, #8
 801547e:	0a19      	lsrs	r1, r3, #8
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6a1b      	ldr	r3, [r3, #32]
 8015484:	061a      	lsls	r2, r3, #24
 8015486:	4bbf      	ldr	r3, [pc, #764]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015488:	430a      	orrs	r2, r1
 801548a:	605a      	str	r2, [r3, #4]
 801548c:	e019      	b.n	80154c2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801548e:	4bbd      	ldr	r3, [pc, #756]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015490:	681a      	ldr	r2, [r3, #0]
 8015492:	4bbc      	ldr	r3, [pc, #752]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015494:	49bd      	ldr	r1, [pc, #756]	@ (801578c <HAL_RCC_OscConfig+0x690>)
 8015496:	400a      	ands	r2, r1
 8015498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801549a:	f7f9 fcff 	bl	800ee9c <HAL_GetTick>
 801549e:	0003      	movs	r3, r0
 80154a0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80154a2:	e008      	b.n	80154b6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80154a4:	f7f9 fcfa 	bl	800ee9c <HAL_GetTick>
 80154a8:	0002      	movs	r2, r0
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	1ad3      	subs	r3, r2, r3
 80154ae:	2b02      	cmp	r3, #2
 80154b0:	d901      	bls.n	80154b6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80154b2:	2303      	movs	r3, #3
 80154b4:	e1eb      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80154b6:	4bb3      	ldr	r3, [pc, #716]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80154b8:	681a      	ldr	r2, [r3, #0]
 80154ba:	2380      	movs	r3, #128	@ 0x80
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	4013      	ands	r3, r2
 80154c0:	d1f0      	bne.n	80154a4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	2208      	movs	r2, #8
 80154c8:	4013      	ands	r3, r2
 80154ca:	d036      	beq.n	801553a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	695b      	ldr	r3, [r3, #20]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d019      	beq.n	8015508 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80154d4:	4bab      	ldr	r3, [pc, #684]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80154d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154d8:	4baa      	ldr	r3, [pc, #680]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80154da:	2101      	movs	r1, #1
 80154dc:	430a      	orrs	r2, r1
 80154de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80154e0:	f7f9 fcdc 	bl	800ee9c <HAL_GetTick>
 80154e4:	0003      	movs	r3, r0
 80154e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80154e8:	e008      	b.n	80154fc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80154ea:	f7f9 fcd7 	bl	800ee9c <HAL_GetTick>
 80154ee:	0002      	movs	r2, r0
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	1ad3      	subs	r3, r2, r3
 80154f4:	2b02      	cmp	r3, #2
 80154f6:	d901      	bls.n	80154fc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80154f8:	2303      	movs	r3, #3
 80154fa:	e1c8      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80154fc:	4ba1      	ldr	r3, [pc, #644]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80154fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015500:	2202      	movs	r2, #2
 8015502:	4013      	ands	r3, r2
 8015504:	d0f1      	beq.n	80154ea <HAL_RCC_OscConfig+0x3ee>
 8015506:	e018      	b.n	801553a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015508:	4b9e      	ldr	r3, [pc, #632]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801550a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801550c:	4b9d      	ldr	r3, [pc, #628]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801550e:	2101      	movs	r1, #1
 8015510:	438a      	bics	r2, r1
 8015512:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015514:	f7f9 fcc2 	bl	800ee9c <HAL_GetTick>
 8015518:	0003      	movs	r3, r0
 801551a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801551c:	e008      	b.n	8015530 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801551e:	f7f9 fcbd 	bl	800ee9c <HAL_GetTick>
 8015522:	0002      	movs	r2, r0
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	2b02      	cmp	r3, #2
 801552a:	d901      	bls.n	8015530 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801552c:	2303      	movs	r3, #3
 801552e:	e1ae      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015530:	4b94      	ldr	r3, [pc, #592]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015534:	2202      	movs	r2, #2
 8015536:	4013      	ands	r3, r2
 8015538:	d1f1      	bne.n	801551e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	2204      	movs	r2, #4
 8015540:	4013      	ands	r3, r2
 8015542:	d100      	bne.n	8015546 <HAL_RCC_OscConfig+0x44a>
 8015544:	e0ae      	b.n	80156a4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015546:	2023      	movs	r0, #35	@ 0x23
 8015548:	183b      	adds	r3, r7, r0
 801554a:	2200      	movs	r2, #0
 801554c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801554e:	4b8d      	ldr	r3, [pc, #564]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015552:	2380      	movs	r3, #128	@ 0x80
 8015554:	055b      	lsls	r3, r3, #21
 8015556:	4013      	ands	r3, r2
 8015558:	d109      	bne.n	801556e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801555a:	4b8a      	ldr	r3, [pc, #552]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801555c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801555e:	4b89      	ldr	r3, [pc, #548]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015560:	2180      	movs	r1, #128	@ 0x80
 8015562:	0549      	lsls	r1, r1, #21
 8015564:	430a      	orrs	r2, r1
 8015566:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015568:	183b      	adds	r3, r7, r0
 801556a:	2201      	movs	r2, #1
 801556c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801556e:	4b88      	ldr	r3, [pc, #544]	@ (8015790 <HAL_RCC_OscConfig+0x694>)
 8015570:	681a      	ldr	r2, [r3, #0]
 8015572:	2380      	movs	r3, #128	@ 0x80
 8015574:	005b      	lsls	r3, r3, #1
 8015576:	4013      	ands	r3, r2
 8015578:	d11a      	bne.n	80155b0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801557a:	4b85      	ldr	r3, [pc, #532]	@ (8015790 <HAL_RCC_OscConfig+0x694>)
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	4b84      	ldr	r3, [pc, #528]	@ (8015790 <HAL_RCC_OscConfig+0x694>)
 8015580:	2180      	movs	r1, #128	@ 0x80
 8015582:	0049      	lsls	r1, r1, #1
 8015584:	430a      	orrs	r2, r1
 8015586:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015588:	f7f9 fc88 	bl	800ee9c <HAL_GetTick>
 801558c:	0003      	movs	r3, r0
 801558e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015590:	e008      	b.n	80155a4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015592:	f7f9 fc83 	bl	800ee9c <HAL_GetTick>
 8015596:	0002      	movs	r2, r0
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	1ad3      	subs	r3, r2, r3
 801559c:	2b64      	cmp	r3, #100	@ 0x64
 801559e:	d901      	bls.n	80155a4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80155a0:	2303      	movs	r3, #3
 80155a2:	e174      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80155a4:	4b7a      	ldr	r3, [pc, #488]	@ (8015790 <HAL_RCC_OscConfig+0x694>)
 80155a6:	681a      	ldr	r2, [r3, #0]
 80155a8:	2380      	movs	r3, #128	@ 0x80
 80155aa:	005b      	lsls	r3, r3, #1
 80155ac:	4013      	ands	r3, r2
 80155ae:	d0f0      	beq.n	8015592 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	689a      	ldr	r2, [r3, #8]
 80155b4:	2380      	movs	r3, #128	@ 0x80
 80155b6:	005b      	lsls	r3, r3, #1
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d107      	bne.n	80155cc <HAL_RCC_OscConfig+0x4d0>
 80155bc:	4b71      	ldr	r3, [pc, #452]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155c0:	4b70      	ldr	r3, [pc, #448]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155c2:	2180      	movs	r1, #128	@ 0x80
 80155c4:	0049      	lsls	r1, r1, #1
 80155c6:	430a      	orrs	r2, r1
 80155c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80155ca:	e031      	b.n	8015630 <HAL_RCC_OscConfig+0x534>
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	689b      	ldr	r3, [r3, #8]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d10c      	bne.n	80155ee <HAL_RCC_OscConfig+0x4f2>
 80155d4:	4b6b      	ldr	r3, [pc, #428]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155d8:	4b6a      	ldr	r3, [pc, #424]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155da:	496c      	ldr	r1, [pc, #432]	@ (801578c <HAL_RCC_OscConfig+0x690>)
 80155dc:	400a      	ands	r2, r1
 80155de:	651a      	str	r2, [r3, #80]	@ 0x50
 80155e0:	4b68      	ldr	r3, [pc, #416]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155e4:	4b67      	ldr	r3, [pc, #412]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155e6:	496b      	ldr	r1, [pc, #428]	@ (8015794 <HAL_RCC_OscConfig+0x698>)
 80155e8:	400a      	ands	r2, r1
 80155ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80155ec:	e020      	b.n	8015630 <HAL_RCC_OscConfig+0x534>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	689a      	ldr	r2, [r3, #8]
 80155f2:	23a0      	movs	r3, #160	@ 0xa0
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d10e      	bne.n	8015618 <HAL_RCC_OscConfig+0x51c>
 80155fa:	4b62      	ldr	r3, [pc, #392]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80155fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80155fe:	4b61      	ldr	r3, [pc, #388]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015600:	2180      	movs	r1, #128	@ 0x80
 8015602:	00c9      	lsls	r1, r1, #3
 8015604:	430a      	orrs	r2, r1
 8015606:	651a      	str	r2, [r3, #80]	@ 0x50
 8015608:	4b5e      	ldr	r3, [pc, #376]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801560a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801560c:	4b5d      	ldr	r3, [pc, #372]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801560e:	2180      	movs	r1, #128	@ 0x80
 8015610:	0049      	lsls	r1, r1, #1
 8015612:	430a      	orrs	r2, r1
 8015614:	651a      	str	r2, [r3, #80]	@ 0x50
 8015616:	e00b      	b.n	8015630 <HAL_RCC_OscConfig+0x534>
 8015618:	4b5a      	ldr	r3, [pc, #360]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801561a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801561c:	4b59      	ldr	r3, [pc, #356]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801561e:	495b      	ldr	r1, [pc, #364]	@ (801578c <HAL_RCC_OscConfig+0x690>)
 8015620:	400a      	ands	r2, r1
 8015622:	651a      	str	r2, [r3, #80]	@ 0x50
 8015624:	4b57      	ldr	r3, [pc, #348]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015626:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015628:	4b56      	ldr	r3, [pc, #344]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801562a:	495a      	ldr	r1, [pc, #360]	@ (8015794 <HAL_RCC_OscConfig+0x698>)
 801562c:	400a      	ands	r2, r1
 801562e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	689b      	ldr	r3, [r3, #8]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d015      	beq.n	8015664 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015638:	f7f9 fc30 	bl	800ee9c <HAL_GetTick>
 801563c:	0003      	movs	r3, r0
 801563e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015640:	e009      	b.n	8015656 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015642:	f7f9 fc2b 	bl	800ee9c <HAL_GetTick>
 8015646:	0002      	movs	r2, r0
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	1ad3      	subs	r3, r2, r3
 801564c:	4a52      	ldr	r2, [pc, #328]	@ (8015798 <HAL_RCC_OscConfig+0x69c>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d901      	bls.n	8015656 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015652:	2303      	movs	r3, #3
 8015654:	e11b      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015656:	4b4b      	ldr	r3, [pc, #300]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801565a:	2380      	movs	r3, #128	@ 0x80
 801565c:	009b      	lsls	r3, r3, #2
 801565e:	4013      	ands	r3, r2
 8015660:	d0ef      	beq.n	8015642 <HAL_RCC_OscConfig+0x546>
 8015662:	e014      	b.n	801568e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015664:	f7f9 fc1a 	bl	800ee9c <HAL_GetTick>
 8015668:	0003      	movs	r3, r0
 801566a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801566c:	e009      	b.n	8015682 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801566e:	f7f9 fc15 	bl	800ee9c <HAL_GetTick>
 8015672:	0002      	movs	r2, r0
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	1ad3      	subs	r3, r2, r3
 8015678:	4a47      	ldr	r2, [pc, #284]	@ (8015798 <HAL_RCC_OscConfig+0x69c>)
 801567a:	4293      	cmp	r3, r2
 801567c:	d901      	bls.n	8015682 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801567e:	2303      	movs	r3, #3
 8015680:	e105      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015682:	4b40      	ldr	r3, [pc, #256]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015684:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015686:	2380      	movs	r3, #128	@ 0x80
 8015688:	009b      	lsls	r3, r3, #2
 801568a:	4013      	ands	r3, r2
 801568c:	d1ef      	bne.n	801566e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801568e:	2323      	movs	r3, #35	@ 0x23
 8015690:	18fb      	adds	r3, r7, r3
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	2b01      	cmp	r3, #1
 8015696:	d105      	bne.n	80156a4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015698:	4b3a      	ldr	r3, [pc, #232]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801569a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801569c:	4b39      	ldr	r3, [pc, #228]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801569e:	493f      	ldr	r1, [pc, #252]	@ (801579c <HAL_RCC_OscConfig+0x6a0>)
 80156a0:	400a      	ands	r2, r1
 80156a2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2220      	movs	r2, #32
 80156aa:	4013      	ands	r3, r2
 80156ac:	d049      	beq.n	8015742 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	699b      	ldr	r3, [r3, #24]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d026      	beq.n	8015704 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80156b6:	4b33      	ldr	r3, [pc, #204]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80156b8:	689a      	ldr	r2, [r3, #8]
 80156ba:	4b32      	ldr	r3, [pc, #200]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80156bc:	2101      	movs	r1, #1
 80156be:	430a      	orrs	r2, r1
 80156c0:	609a      	str	r2, [r3, #8]
 80156c2:	4b30      	ldr	r3, [pc, #192]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80156c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80156c6:	4b2f      	ldr	r3, [pc, #188]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80156c8:	2101      	movs	r1, #1
 80156ca:	430a      	orrs	r2, r1
 80156cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80156ce:	4b34      	ldr	r3, [pc, #208]	@ (80157a0 <HAL_RCC_OscConfig+0x6a4>)
 80156d0:	6a1a      	ldr	r2, [r3, #32]
 80156d2:	4b33      	ldr	r3, [pc, #204]	@ (80157a0 <HAL_RCC_OscConfig+0x6a4>)
 80156d4:	2180      	movs	r1, #128	@ 0x80
 80156d6:	0189      	lsls	r1, r1, #6
 80156d8:	430a      	orrs	r2, r1
 80156da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156dc:	f7f9 fbde 	bl	800ee9c <HAL_GetTick>
 80156e0:	0003      	movs	r3, r0
 80156e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80156e4:	e008      	b.n	80156f8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80156e6:	f7f9 fbd9 	bl	800ee9c <HAL_GetTick>
 80156ea:	0002      	movs	r2, r0
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	1ad3      	subs	r3, r2, r3
 80156f0:	2b02      	cmp	r3, #2
 80156f2:	d901      	bls.n	80156f8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80156f4:	2303      	movs	r3, #3
 80156f6:	e0ca      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80156f8:	4b22      	ldr	r3, [pc, #136]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	2202      	movs	r2, #2
 80156fe:	4013      	ands	r3, r2
 8015700:	d0f1      	beq.n	80156e6 <HAL_RCC_OscConfig+0x5ea>
 8015702:	e01e      	b.n	8015742 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8015704:	4b1f      	ldr	r3, [pc, #124]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015706:	689a      	ldr	r2, [r3, #8]
 8015708:	4b1e      	ldr	r3, [pc, #120]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801570a:	2101      	movs	r1, #1
 801570c:	438a      	bics	r2, r1
 801570e:	609a      	str	r2, [r3, #8]
 8015710:	4b23      	ldr	r3, [pc, #140]	@ (80157a0 <HAL_RCC_OscConfig+0x6a4>)
 8015712:	6a1a      	ldr	r2, [r3, #32]
 8015714:	4b22      	ldr	r3, [pc, #136]	@ (80157a0 <HAL_RCC_OscConfig+0x6a4>)
 8015716:	4923      	ldr	r1, [pc, #140]	@ (80157a4 <HAL_RCC_OscConfig+0x6a8>)
 8015718:	400a      	ands	r2, r1
 801571a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801571c:	f7f9 fbbe 	bl	800ee9c <HAL_GetTick>
 8015720:	0003      	movs	r3, r0
 8015722:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015724:	e008      	b.n	8015738 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015726:	f7f9 fbb9 	bl	800ee9c <HAL_GetTick>
 801572a:	0002      	movs	r2, r0
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	1ad3      	subs	r3, r2, r3
 8015730:	2b02      	cmp	r3, #2
 8015732:	d901      	bls.n	8015738 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015734:	2303      	movs	r3, #3
 8015736:	e0aa      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015738:	4b12      	ldr	r3, [pc, #72]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	2202      	movs	r2, #2
 801573e:	4013      	ands	r3, r2
 8015740:	d1f1      	bne.n	8015726 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015746:	2b00      	cmp	r3, #0
 8015748:	d100      	bne.n	801574c <HAL_RCC_OscConfig+0x650>
 801574a:	e09f      	b.n	801588c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801574c:	69fb      	ldr	r3, [r7, #28]
 801574e:	2b0c      	cmp	r3, #12
 8015750:	d100      	bne.n	8015754 <HAL_RCC_OscConfig+0x658>
 8015752:	e078      	b.n	8015846 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015758:	2b02      	cmp	r3, #2
 801575a:	d159      	bne.n	8015810 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801575c:	4b09      	ldr	r3, [pc, #36]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	4b08      	ldr	r3, [pc, #32]	@ (8015784 <HAL_RCC_OscConfig+0x688>)
 8015762:	4911      	ldr	r1, [pc, #68]	@ (80157a8 <HAL_RCC_OscConfig+0x6ac>)
 8015764:	400a      	ands	r2, r1
 8015766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015768:	f7f9 fb98 	bl	800ee9c <HAL_GetTick>
 801576c:	0003      	movs	r3, r0
 801576e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015770:	e01c      	b.n	80157ac <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015772:	f7f9 fb93 	bl	800ee9c <HAL_GetTick>
 8015776:	0002      	movs	r2, r0
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	1ad3      	subs	r3, r2, r3
 801577c:	2b02      	cmp	r3, #2
 801577e:	d915      	bls.n	80157ac <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015780:	2303      	movs	r3, #3
 8015782:	e084      	b.n	801588e <HAL_RCC_OscConfig+0x792>
 8015784:	40021000 	.word	0x40021000
 8015788:	ffff1fff 	.word	0xffff1fff
 801578c:	fffffeff 	.word	0xfffffeff
 8015790:	40007000 	.word	0x40007000
 8015794:	fffffbff 	.word	0xfffffbff
 8015798:	00001388 	.word	0x00001388
 801579c:	efffffff 	.word	0xefffffff
 80157a0:	40010000 	.word	0x40010000
 80157a4:	ffffdfff 	.word	0xffffdfff
 80157a8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80157ac:	4b3a      	ldr	r3, [pc, #232]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 80157ae:	681a      	ldr	r2, [r3, #0]
 80157b0:	2380      	movs	r3, #128	@ 0x80
 80157b2:	049b      	lsls	r3, r3, #18
 80157b4:	4013      	ands	r3, r2
 80157b6:	d1dc      	bne.n	8015772 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80157b8:	4b37      	ldr	r3, [pc, #220]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	4a37      	ldr	r2, [pc, #220]	@ (801589c <HAL_RCC_OscConfig+0x7a0>)
 80157be:	4013      	ands	r3, r2
 80157c0:	0019      	movs	r1, r3
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157ca:	431a      	orrs	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80157d0:	431a      	orrs	r2, r3
 80157d2:	4b31      	ldr	r3, [pc, #196]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 80157d4:	430a      	orrs	r2, r1
 80157d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80157d8:	4b2f      	ldr	r3, [pc, #188]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 80157da:	681a      	ldr	r2, [r3, #0]
 80157dc:	4b2e      	ldr	r3, [pc, #184]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 80157de:	2180      	movs	r1, #128	@ 0x80
 80157e0:	0449      	lsls	r1, r1, #17
 80157e2:	430a      	orrs	r2, r1
 80157e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80157e6:	f7f9 fb59 	bl	800ee9c <HAL_GetTick>
 80157ea:	0003      	movs	r3, r0
 80157ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80157ee:	e008      	b.n	8015802 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80157f0:	f7f9 fb54 	bl	800ee9c <HAL_GetTick>
 80157f4:	0002      	movs	r2, r0
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	1ad3      	subs	r3, r2, r3
 80157fa:	2b02      	cmp	r3, #2
 80157fc:	d901      	bls.n	8015802 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80157fe:	2303      	movs	r3, #3
 8015800:	e045      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015802:	4b25      	ldr	r3, [pc, #148]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 8015804:	681a      	ldr	r2, [r3, #0]
 8015806:	2380      	movs	r3, #128	@ 0x80
 8015808:	049b      	lsls	r3, r3, #18
 801580a:	4013      	ands	r3, r2
 801580c:	d0f0      	beq.n	80157f0 <HAL_RCC_OscConfig+0x6f4>
 801580e:	e03d      	b.n	801588c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015810:	4b21      	ldr	r3, [pc, #132]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 8015812:	681a      	ldr	r2, [r3, #0]
 8015814:	4b20      	ldr	r3, [pc, #128]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 8015816:	4922      	ldr	r1, [pc, #136]	@ (80158a0 <HAL_RCC_OscConfig+0x7a4>)
 8015818:	400a      	ands	r2, r1
 801581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801581c:	f7f9 fb3e 	bl	800ee9c <HAL_GetTick>
 8015820:	0003      	movs	r3, r0
 8015822:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015824:	e008      	b.n	8015838 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015826:	f7f9 fb39 	bl	800ee9c <HAL_GetTick>
 801582a:	0002      	movs	r2, r0
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	2b02      	cmp	r3, #2
 8015832:	d901      	bls.n	8015838 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015834:	2303      	movs	r3, #3
 8015836:	e02a      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015838:	4b17      	ldr	r3, [pc, #92]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 801583a:	681a      	ldr	r2, [r3, #0]
 801583c:	2380      	movs	r3, #128	@ 0x80
 801583e:	049b      	lsls	r3, r3, #18
 8015840:	4013      	ands	r3, r2
 8015842:	d1f0      	bne.n	8015826 <HAL_RCC_OscConfig+0x72a>
 8015844:	e022      	b.n	801588c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801584a:	2b01      	cmp	r3, #1
 801584c:	d101      	bne.n	8015852 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801584e:	2301      	movs	r3, #1
 8015850:	e01d      	b.n	801588e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015852:	4b11      	ldr	r3, [pc, #68]	@ (8015898 <HAL_RCC_OscConfig+0x79c>)
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015858:	69ba      	ldr	r2, [r7, #24]
 801585a:	2380      	movs	r3, #128	@ 0x80
 801585c:	025b      	lsls	r3, r3, #9
 801585e:	401a      	ands	r2, r3
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015864:	429a      	cmp	r2, r3
 8015866:	d10f      	bne.n	8015888 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015868:	69ba      	ldr	r2, [r7, #24]
 801586a:	23f0      	movs	r3, #240	@ 0xf0
 801586c:	039b      	lsls	r3, r3, #14
 801586e:	401a      	ands	r2, r3
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015874:	429a      	cmp	r2, r3
 8015876:	d107      	bne.n	8015888 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015878:	69ba      	ldr	r2, [r7, #24]
 801587a:	23c0      	movs	r3, #192	@ 0xc0
 801587c:	041b      	lsls	r3, r3, #16
 801587e:	401a      	ands	r2, r3
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015884:	429a      	cmp	r2, r3
 8015886:	d001      	beq.n	801588c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015888:	2301      	movs	r3, #1
 801588a:	e000      	b.n	801588e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801588c:	2300      	movs	r3, #0
}
 801588e:	0018      	movs	r0, r3
 8015890:	46bd      	mov	sp, r7
 8015892:	b00a      	add	sp, #40	@ 0x28
 8015894:	bdb0      	pop	{r4, r5, r7, pc}
 8015896:	46c0      	nop			@ (mov r8, r8)
 8015898:	40021000 	.word	0x40021000
 801589c:	ff02ffff 	.word	0xff02ffff
 80158a0:	feffffff 	.word	0xfeffffff

080158a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80158a4:	b5b0      	push	{r4, r5, r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d101      	bne.n	80158b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80158b4:	2301      	movs	r3, #1
 80158b6:	e128      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80158b8:	4b96      	ldr	r3, [pc, #600]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	2201      	movs	r2, #1
 80158be:	4013      	ands	r3, r2
 80158c0:	683a      	ldr	r2, [r7, #0]
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d91e      	bls.n	8015904 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80158c6:	4b93      	ldr	r3, [pc, #588]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2201      	movs	r2, #1
 80158cc:	4393      	bics	r3, r2
 80158ce:	0019      	movs	r1, r3
 80158d0:	4b90      	ldr	r3, [pc, #576]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 80158d2:	683a      	ldr	r2, [r7, #0]
 80158d4:	430a      	orrs	r2, r1
 80158d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80158d8:	f7f9 fae0 	bl	800ee9c <HAL_GetTick>
 80158dc:	0003      	movs	r3, r0
 80158de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80158e0:	e009      	b.n	80158f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158e2:	f7f9 fadb 	bl	800ee9c <HAL_GetTick>
 80158e6:	0002      	movs	r2, r0
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	1ad3      	subs	r3, r2, r3
 80158ec:	4a8a      	ldr	r2, [pc, #552]	@ (8015b18 <HAL_RCC_ClockConfig+0x274>)
 80158ee:	4293      	cmp	r3, r2
 80158f0:	d901      	bls.n	80158f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80158f2:	2303      	movs	r3, #3
 80158f4:	e109      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80158f6:	4b87      	ldr	r3, [pc, #540]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	2201      	movs	r2, #1
 80158fc:	4013      	ands	r3, r2
 80158fe:	683a      	ldr	r2, [r7, #0]
 8015900:	429a      	cmp	r2, r3
 8015902:	d1ee      	bne.n	80158e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2202      	movs	r2, #2
 801590a:	4013      	ands	r3, r2
 801590c:	d009      	beq.n	8015922 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801590e:	4b83      	ldr	r3, [pc, #524]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015910:	68db      	ldr	r3, [r3, #12]
 8015912:	22f0      	movs	r2, #240	@ 0xf0
 8015914:	4393      	bics	r3, r2
 8015916:	0019      	movs	r1, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	689a      	ldr	r2, [r3, #8]
 801591c:	4b7f      	ldr	r3, [pc, #508]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 801591e:	430a      	orrs	r2, r1
 8015920:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2201      	movs	r2, #1
 8015928:	4013      	ands	r3, r2
 801592a:	d100      	bne.n	801592e <HAL_RCC_ClockConfig+0x8a>
 801592c:	e089      	b.n	8015a42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	2b02      	cmp	r3, #2
 8015934:	d107      	bne.n	8015946 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015936:	4b79      	ldr	r3, [pc, #484]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	2380      	movs	r3, #128	@ 0x80
 801593c:	029b      	lsls	r3, r3, #10
 801593e:	4013      	ands	r3, r2
 8015940:	d120      	bne.n	8015984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015942:	2301      	movs	r3, #1
 8015944:	e0e1      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	2b03      	cmp	r3, #3
 801594c:	d107      	bne.n	801595e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801594e:	4b73      	ldr	r3, [pc, #460]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	2380      	movs	r3, #128	@ 0x80
 8015954:	049b      	lsls	r3, r3, #18
 8015956:	4013      	ands	r3, r2
 8015958:	d114      	bne.n	8015984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801595a:	2301      	movs	r3, #1
 801595c:	e0d5      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	2b01      	cmp	r3, #1
 8015964:	d106      	bne.n	8015974 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015966:	4b6d      	ldr	r3, [pc, #436]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2204      	movs	r2, #4
 801596c:	4013      	ands	r3, r2
 801596e:	d109      	bne.n	8015984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015970:	2301      	movs	r3, #1
 8015972:	e0ca      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015974:	4b69      	ldr	r3, [pc, #420]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015976:	681a      	ldr	r2, [r3, #0]
 8015978:	2380      	movs	r3, #128	@ 0x80
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	4013      	ands	r3, r2
 801597e:	d101      	bne.n	8015984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015980:	2301      	movs	r3, #1
 8015982:	e0c2      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015984:	4b65      	ldr	r3, [pc, #404]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	2203      	movs	r2, #3
 801598a:	4393      	bics	r3, r2
 801598c:	0019      	movs	r1, r3
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	685a      	ldr	r2, [r3, #4]
 8015992:	4b62      	ldr	r3, [pc, #392]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015994:	430a      	orrs	r2, r1
 8015996:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015998:	f7f9 fa80 	bl	800ee9c <HAL_GetTick>
 801599c:	0003      	movs	r3, r0
 801599e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	2b02      	cmp	r3, #2
 80159a6:	d111      	bne.n	80159cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159a8:	e009      	b.n	80159be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159aa:	f7f9 fa77 	bl	800ee9c <HAL_GetTick>
 80159ae:	0002      	movs	r2, r0
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	1ad3      	subs	r3, r2, r3
 80159b4:	4a58      	ldr	r2, [pc, #352]	@ (8015b18 <HAL_RCC_ClockConfig+0x274>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d901      	bls.n	80159be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80159ba:	2303      	movs	r3, #3
 80159bc:	e0a5      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80159be:	4b57      	ldr	r3, [pc, #348]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	220c      	movs	r2, #12
 80159c4:	4013      	ands	r3, r2
 80159c6:	2b08      	cmp	r3, #8
 80159c8:	d1ef      	bne.n	80159aa <HAL_RCC_ClockConfig+0x106>
 80159ca:	e03a      	b.n	8015a42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	2b03      	cmp	r3, #3
 80159d2:	d111      	bne.n	80159f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159d4:	e009      	b.n	80159ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80159d6:	f7f9 fa61 	bl	800ee9c <HAL_GetTick>
 80159da:	0002      	movs	r2, r0
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	1ad3      	subs	r3, r2, r3
 80159e0:	4a4d      	ldr	r2, [pc, #308]	@ (8015b18 <HAL_RCC_ClockConfig+0x274>)
 80159e2:	4293      	cmp	r3, r2
 80159e4:	d901      	bls.n	80159ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80159e6:	2303      	movs	r3, #3
 80159e8:	e08f      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80159ea:	4b4c      	ldr	r3, [pc, #304]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	220c      	movs	r2, #12
 80159f0:	4013      	ands	r3, r2
 80159f2:	2b0c      	cmp	r3, #12
 80159f4:	d1ef      	bne.n	80159d6 <HAL_RCC_ClockConfig+0x132>
 80159f6:	e024      	b.n	8015a42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	2b01      	cmp	r3, #1
 80159fe:	d11b      	bne.n	8015a38 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a00:	e009      	b.n	8015a16 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a02:	f7f9 fa4b 	bl	800ee9c <HAL_GetTick>
 8015a06:	0002      	movs	r2, r0
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	1ad3      	subs	r3, r2, r3
 8015a0c:	4a42      	ldr	r2, [pc, #264]	@ (8015b18 <HAL_RCC_ClockConfig+0x274>)
 8015a0e:	4293      	cmp	r3, r2
 8015a10:	d901      	bls.n	8015a16 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015a12:	2303      	movs	r3, #3
 8015a14:	e079      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015a16:	4b41      	ldr	r3, [pc, #260]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015a18:	68db      	ldr	r3, [r3, #12]
 8015a1a:	220c      	movs	r2, #12
 8015a1c:	4013      	ands	r3, r2
 8015a1e:	2b04      	cmp	r3, #4
 8015a20:	d1ef      	bne.n	8015a02 <HAL_RCC_ClockConfig+0x15e>
 8015a22:	e00e      	b.n	8015a42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a24:	f7f9 fa3a 	bl	800ee9c <HAL_GetTick>
 8015a28:	0002      	movs	r2, r0
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8015b18 <HAL_RCC_ClockConfig+0x274>)
 8015a30:	4293      	cmp	r3, r2
 8015a32:	d901      	bls.n	8015a38 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015a34:	2303      	movs	r3, #3
 8015a36:	e068      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015a38:	4b38      	ldr	r3, [pc, #224]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015a3a:	68db      	ldr	r3, [r3, #12]
 8015a3c:	220c      	movs	r2, #12
 8015a3e:	4013      	ands	r3, r2
 8015a40:	d1f0      	bne.n	8015a24 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015a42:	4b34      	ldr	r3, [pc, #208]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2201      	movs	r2, #1
 8015a48:	4013      	ands	r3, r2
 8015a4a:	683a      	ldr	r2, [r7, #0]
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d21e      	bcs.n	8015a8e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015a50:	4b30      	ldr	r3, [pc, #192]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2201      	movs	r2, #1
 8015a56:	4393      	bics	r3, r2
 8015a58:	0019      	movs	r1, r3
 8015a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 8015a5c:	683a      	ldr	r2, [r7, #0]
 8015a5e:	430a      	orrs	r2, r1
 8015a60:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015a62:	f7f9 fa1b 	bl	800ee9c <HAL_GetTick>
 8015a66:	0003      	movs	r3, r0
 8015a68:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015a6a:	e009      	b.n	8015a80 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a6c:	f7f9 fa16 	bl	800ee9c <HAL_GetTick>
 8015a70:	0002      	movs	r2, r0
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	1ad3      	subs	r3, r2, r3
 8015a76:	4a28      	ldr	r2, [pc, #160]	@ (8015b18 <HAL_RCC_ClockConfig+0x274>)
 8015a78:	4293      	cmp	r3, r2
 8015a7a:	d901      	bls.n	8015a80 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015a7c:	2303      	movs	r3, #3
 8015a7e:	e044      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015a80:	4b24      	ldr	r3, [pc, #144]	@ (8015b14 <HAL_RCC_ClockConfig+0x270>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	2201      	movs	r2, #1
 8015a86:	4013      	ands	r3, r2
 8015a88:	683a      	ldr	r2, [r7, #0]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d1ee      	bne.n	8015a6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2204      	movs	r2, #4
 8015a94:	4013      	ands	r3, r2
 8015a96:	d009      	beq.n	8015aac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015a98:	4b20      	ldr	r3, [pc, #128]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015a9a:	68db      	ldr	r3, [r3, #12]
 8015a9c:	4a20      	ldr	r2, [pc, #128]	@ (8015b20 <HAL_RCC_ClockConfig+0x27c>)
 8015a9e:	4013      	ands	r3, r2
 8015aa0:	0019      	movs	r1, r3
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	68da      	ldr	r2, [r3, #12]
 8015aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015aa8:	430a      	orrs	r2, r1
 8015aaa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2208      	movs	r2, #8
 8015ab2:	4013      	ands	r3, r2
 8015ab4:	d00a      	beq.n	8015acc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015ab6:	4b19      	ldr	r3, [pc, #100]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	4a1a      	ldr	r2, [pc, #104]	@ (8015b24 <HAL_RCC_ClockConfig+0x280>)
 8015abc:	4013      	ands	r3, r2
 8015abe:	0019      	movs	r1, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	691b      	ldr	r3, [r3, #16]
 8015ac4:	00da      	lsls	r2, r3, #3
 8015ac6:	4b15      	ldr	r3, [pc, #84]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015ac8:	430a      	orrs	r2, r1
 8015aca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015acc:	f000 f832 	bl	8015b34 <HAL_RCC_GetSysClockFreq>
 8015ad0:	0001      	movs	r1, r0
 8015ad2:	4b12      	ldr	r3, [pc, #72]	@ (8015b1c <HAL_RCC_ClockConfig+0x278>)
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	091b      	lsrs	r3, r3, #4
 8015ad8:	220f      	movs	r2, #15
 8015ada:	4013      	ands	r3, r2
 8015adc:	4a12      	ldr	r2, [pc, #72]	@ (8015b28 <HAL_RCC_ClockConfig+0x284>)
 8015ade:	5cd3      	ldrb	r3, [r2, r3]
 8015ae0:	000a      	movs	r2, r1
 8015ae2:	40da      	lsrs	r2, r3
 8015ae4:	4b11      	ldr	r3, [pc, #68]	@ (8015b2c <HAL_RCC_ClockConfig+0x288>)
 8015ae6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015ae8:	4b11      	ldr	r3, [pc, #68]	@ (8015b30 <HAL_RCC_ClockConfig+0x28c>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	250b      	movs	r5, #11
 8015aee:	197c      	adds	r4, r7, r5
 8015af0:	0018      	movs	r0, r3
 8015af2:	f7f9 f98d 	bl	800ee10 <HAL_InitTick>
 8015af6:	0003      	movs	r3, r0
 8015af8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015afa:	197b      	adds	r3, r7, r5
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d002      	beq.n	8015b08 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015b02:	197b      	adds	r3, r7, r5
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	e000      	b.n	8015b0a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015b08:	2300      	movs	r3, #0
}
 8015b0a:	0018      	movs	r0, r3
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	b004      	add	sp, #16
 8015b10:	bdb0      	pop	{r4, r5, r7, pc}
 8015b12:	46c0      	nop			@ (mov r8, r8)
 8015b14:	40022000 	.word	0x40022000
 8015b18:	00001388 	.word	0x00001388
 8015b1c:	40021000 	.word	0x40021000
 8015b20:	fffff8ff 	.word	0xfffff8ff
 8015b24:	ffffc7ff 	.word	0xffffc7ff
 8015b28:	080257d4 	.word	0x080257d4
 8015b2c:	200000d0 	.word	0x200000d0
 8015b30:	200000e0 	.word	0x200000e0

08015b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015b34:	b5b0      	push	{r4, r5, r7, lr}
 8015b36:	b08e      	sub	sp, #56	@ 0x38
 8015b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8015c6c <HAL_RCC_GetSysClockFreq+0x138>)
 8015b3c:	68db      	ldr	r3, [r3, #12]
 8015b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b42:	230c      	movs	r3, #12
 8015b44:	4013      	ands	r3, r2
 8015b46:	2b0c      	cmp	r3, #12
 8015b48:	d014      	beq.n	8015b74 <HAL_RCC_GetSysClockFreq+0x40>
 8015b4a:	d900      	bls.n	8015b4e <HAL_RCC_GetSysClockFreq+0x1a>
 8015b4c:	e07b      	b.n	8015c46 <HAL_RCC_GetSysClockFreq+0x112>
 8015b4e:	2b04      	cmp	r3, #4
 8015b50:	d002      	beq.n	8015b58 <HAL_RCC_GetSysClockFreq+0x24>
 8015b52:	2b08      	cmp	r3, #8
 8015b54:	d00b      	beq.n	8015b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8015b56:	e076      	b.n	8015c46 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015b58:	4b44      	ldr	r3, [pc, #272]	@ (8015c6c <HAL_RCC_GetSysClockFreq+0x138>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	2210      	movs	r2, #16
 8015b5e:	4013      	ands	r3, r2
 8015b60:	d002      	beq.n	8015b68 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015b62:	4b43      	ldr	r3, [pc, #268]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015b64:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015b66:	e07c      	b.n	8015c62 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015b68:	4b42      	ldr	r3, [pc, #264]	@ (8015c74 <HAL_RCC_GetSysClockFreq+0x140>)
 8015b6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015b6c:	e079      	b.n	8015c62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015b6e:	4b42      	ldr	r3, [pc, #264]	@ (8015c78 <HAL_RCC_GetSysClockFreq+0x144>)
 8015b70:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015b72:	e076      	b.n	8015c62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b76:	0c9a      	lsrs	r2, r3, #18
 8015b78:	230f      	movs	r3, #15
 8015b7a:	401a      	ands	r2, r3
 8015b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8015c7c <HAL_RCC_GetSysClockFreq+0x148>)
 8015b7e:	5c9b      	ldrb	r3, [r3, r2]
 8015b80:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b84:	0d9a      	lsrs	r2, r3, #22
 8015b86:	2303      	movs	r3, #3
 8015b88:	4013      	ands	r3, r2
 8015b8a:	3301      	adds	r3, #1
 8015b8c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015b8e:	4b37      	ldr	r3, [pc, #220]	@ (8015c6c <HAL_RCC_GetSysClockFreq+0x138>)
 8015b90:	68da      	ldr	r2, [r3, #12]
 8015b92:	2380      	movs	r3, #128	@ 0x80
 8015b94:	025b      	lsls	r3, r3, #9
 8015b96:	4013      	ands	r3, r2
 8015b98:	d01a      	beq.n	8015bd0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b9c:	61bb      	str	r3, [r7, #24]
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	61fb      	str	r3, [r7, #28]
 8015ba2:	4a35      	ldr	r2, [pc, #212]	@ (8015c78 <HAL_RCC_GetSysClockFreq+0x144>)
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	69b8      	ldr	r0, [r7, #24]
 8015ba8:	69f9      	ldr	r1, [r7, #28]
 8015baa:	f7ea fd09 	bl	80005c0 <__aeabi_lmul>
 8015bae:	0002      	movs	r2, r0
 8015bb0:	000b      	movs	r3, r1
 8015bb2:	0010      	movs	r0, r2
 8015bb4:	0019      	movs	r1, r3
 8015bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bb8:	613b      	str	r3, [r7, #16]
 8015bba:	2300      	movs	r3, #0
 8015bbc:	617b      	str	r3, [r7, #20]
 8015bbe:	693a      	ldr	r2, [r7, #16]
 8015bc0:	697b      	ldr	r3, [r7, #20]
 8015bc2:	f7ea fcdd 	bl	8000580 <__aeabi_uldivmod>
 8015bc6:	0002      	movs	r2, r0
 8015bc8:	000b      	movs	r3, r1
 8015bca:	0013      	movs	r3, r2
 8015bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8015bce:	e037      	b.n	8015c40 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015bd0:	4b26      	ldr	r3, [pc, #152]	@ (8015c6c <HAL_RCC_GetSysClockFreq+0x138>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2210      	movs	r2, #16
 8015bd6:	4013      	ands	r3, r2
 8015bd8:	d01a      	beq.n	8015c10 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bdc:	60bb      	str	r3, [r7, #8]
 8015bde:	2300      	movs	r3, #0
 8015be0:	60fb      	str	r3, [r7, #12]
 8015be2:	4a23      	ldr	r2, [pc, #140]	@ (8015c70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015be4:	2300      	movs	r3, #0
 8015be6:	68b8      	ldr	r0, [r7, #8]
 8015be8:	68f9      	ldr	r1, [r7, #12]
 8015bea:	f7ea fce9 	bl	80005c0 <__aeabi_lmul>
 8015bee:	0002      	movs	r2, r0
 8015bf0:	000b      	movs	r3, r1
 8015bf2:	0010      	movs	r0, r2
 8015bf4:	0019      	movs	r1, r3
 8015bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf8:	603b      	str	r3, [r7, #0]
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	607b      	str	r3, [r7, #4]
 8015bfe:	683a      	ldr	r2, [r7, #0]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f7ea fcbd 	bl	8000580 <__aeabi_uldivmod>
 8015c06:	0002      	movs	r2, r0
 8015c08:	000b      	movs	r3, r1
 8015c0a:	0013      	movs	r3, r2
 8015c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c0e:	e017      	b.n	8015c40 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c12:	0018      	movs	r0, r3
 8015c14:	2300      	movs	r3, #0
 8015c16:	0019      	movs	r1, r3
 8015c18:	4a16      	ldr	r2, [pc, #88]	@ (8015c74 <HAL_RCC_GetSysClockFreq+0x140>)
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	f7ea fcd0 	bl	80005c0 <__aeabi_lmul>
 8015c20:	0002      	movs	r2, r0
 8015c22:	000b      	movs	r3, r1
 8015c24:	0010      	movs	r0, r2
 8015c26:	0019      	movs	r1, r3
 8015c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c2a:	001c      	movs	r4, r3
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	001d      	movs	r5, r3
 8015c30:	0022      	movs	r2, r4
 8015c32:	002b      	movs	r3, r5
 8015c34:	f7ea fca4 	bl	8000580 <__aeabi_uldivmod>
 8015c38:	0002      	movs	r2, r0
 8015c3a:	000b      	movs	r3, r1
 8015c3c:	0013      	movs	r3, r2
 8015c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c42:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015c44:	e00d      	b.n	8015c62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015c46:	4b09      	ldr	r3, [pc, #36]	@ (8015c6c <HAL_RCC_GetSysClockFreq+0x138>)
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	0b5b      	lsrs	r3, r3, #13
 8015c4c:	2207      	movs	r2, #7
 8015c4e:	4013      	ands	r3, r2
 8015c50:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015c52:	6a3b      	ldr	r3, [r7, #32]
 8015c54:	3301      	adds	r3, #1
 8015c56:	2280      	movs	r2, #128	@ 0x80
 8015c58:	0212      	lsls	r2, r2, #8
 8015c5a:	409a      	lsls	r2, r3
 8015c5c:	0013      	movs	r3, r2
 8015c5e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015c60:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015c64:	0018      	movs	r0, r3
 8015c66:	46bd      	mov	sp, r7
 8015c68:	b00e      	add	sp, #56	@ 0x38
 8015c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8015c6c:	40021000 	.word	0x40021000
 8015c70:	003d0900 	.word	0x003d0900
 8015c74:	00f42400 	.word	0x00f42400
 8015c78:	007a1200 	.word	0x007a1200
 8015c7c:	080257ec 	.word	0x080257ec

08015c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015c84:	4b02      	ldr	r3, [pc, #8]	@ (8015c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8015c86:	681b      	ldr	r3, [r3, #0]
}
 8015c88:	0018      	movs	r0, r3
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	46c0      	nop			@ (mov r8, r8)
 8015c90:	200000d0 	.word	0x200000d0

08015c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015c98:	f7ff fff2 	bl	8015c80 <HAL_RCC_GetHCLKFreq>
 8015c9c:	0001      	movs	r1, r0
 8015c9e:	4b06      	ldr	r3, [pc, #24]	@ (8015cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015ca0:	68db      	ldr	r3, [r3, #12]
 8015ca2:	0a1b      	lsrs	r3, r3, #8
 8015ca4:	2207      	movs	r2, #7
 8015ca6:	4013      	ands	r3, r2
 8015ca8:	4a04      	ldr	r2, [pc, #16]	@ (8015cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8015caa:	5cd3      	ldrb	r3, [r2, r3]
 8015cac:	40d9      	lsrs	r1, r3
 8015cae:	000b      	movs	r3, r1
}
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	46c0      	nop			@ (mov r8, r8)
 8015cb8:	40021000 	.word	0x40021000
 8015cbc:	080257e4 	.word	0x080257e4

08015cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015cc4:	f7ff ffdc 	bl	8015c80 <HAL_RCC_GetHCLKFreq>
 8015cc8:	0001      	movs	r1, r0
 8015cca:	4b06      	ldr	r3, [pc, #24]	@ (8015ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	0adb      	lsrs	r3, r3, #11
 8015cd0:	2207      	movs	r2, #7
 8015cd2:	4013      	ands	r3, r2
 8015cd4:	4a04      	ldr	r2, [pc, #16]	@ (8015ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015cd6:	5cd3      	ldrb	r3, [r2, r3]
 8015cd8:	40d9      	lsrs	r1, r3
 8015cda:	000b      	movs	r3, r1
}
 8015cdc:	0018      	movs	r0, r3
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	46c0      	nop			@ (mov r8, r8)
 8015ce4:	40021000 	.word	0x40021000
 8015ce8:	080257e4 	.word	0x080257e4

08015cec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b086      	sub	sp, #24
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015cf4:	2017      	movs	r0, #23
 8015cf6:	183b      	adds	r3, r7, r0
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2220      	movs	r2, #32
 8015d02:	4013      	ands	r3, r2
 8015d04:	d100      	bne.n	8015d08 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015d06:	e0c7      	b.n	8015e98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015d08:	4b9b      	ldr	r3, [pc, #620]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d0c:	2380      	movs	r3, #128	@ 0x80
 8015d0e:	055b      	lsls	r3, r3, #21
 8015d10:	4013      	ands	r3, r2
 8015d12:	d109      	bne.n	8015d28 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015d14:	4b98      	ldr	r3, [pc, #608]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d18:	4b97      	ldr	r3, [pc, #604]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d1a:	2180      	movs	r1, #128	@ 0x80
 8015d1c:	0549      	lsls	r1, r1, #21
 8015d1e:	430a      	orrs	r2, r1
 8015d20:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015d22:	183b      	adds	r3, r7, r0
 8015d24:	2201      	movs	r2, #1
 8015d26:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d28:	4b94      	ldr	r3, [pc, #592]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	2380      	movs	r3, #128	@ 0x80
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	4013      	ands	r3, r2
 8015d32:	d11a      	bne.n	8015d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015d34:	4b91      	ldr	r3, [pc, #580]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	4b90      	ldr	r3, [pc, #576]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d3a:	2180      	movs	r1, #128	@ 0x80
 8015d3c:	0049      	lsls	r1, r1, #1
 8015d3e:	430a      	orrs	r2, r1
 8015d40:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015d42:	f7f9 f8ab 	bl	800ee9c <HAL_GetTick>
 8015d46:	0003      	movs	r3, r0
 8015d48:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d4a:	e008      	b.n	8015d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015d4c:	f7f9 f8a6 	bl	800ee9c <HAL_GetTick>
 8015d50:	0002      	movs	r2, r0
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	2b64      	cmp	r3, #100	@ 0x64
 8015d58:	d901      	bls.n	8015d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015d5a:	2303      	movs	r3, #3
 8015d5c:	e107      	b.n	8015f6e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015d5e:	4b87      	ldr	r3, [pc, #540]	@ (8015f7c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	2380      	movs	r3, #128	@ 0x80
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4013      	ands	r3, r2
 8015d68:	d0f0      	beq.n	8015d4c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015d6a:	4b83      	ldr	r3, [pc, #524]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d6c:	681a      	ldr	r2, [r3, #0]
 8015d6e:	23c0      	movs	r3, #192	@ 0xc0
 8015d70:	039b      	lsls	r3, r3, #14
 8015d72:	4013      	ands	r3, r2
 8015d74:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	685a      	ldr	r2, [r3, #4]
 8015d7a:	23c0      	movs	r3, #192	@ 0xc0
 8015d7c:	039b      	lsls	r3, r3, #14
 8015d7e:	4013      	ands	r3, r2
 8015d80:	68fa      	ldr	r2, [r7, #12]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d013      	beq.n	8015dae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	685a      	ldr	r2, [r3, #4]
 8015d8a:	23c0      	movs	r3, #192	@ 0xc0
 8015d8c:	029b      	lsls	r3, r3, #10
 8015d8e:	401a      	ands	r2, r3
 8015d90:	23c0      	movs	r3, #192	@ 0xc0
 8015d92:	029b      	lsls	r3, r3, #10
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d10a      	bne.n	8015dae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015d98:	4b77      	ldr	r3, [pc, #476]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	2380      	movs	r3, #128	@ 0x80
 8015d9e:	029b      	lsls	r3, r3, #10
 8015da0:	401a      	ands	r2, r3
 8015da2:	2380      	movs	r3, #128	@ 0x80
 8015da4:	029b      	lsls	r3, r3, #10
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d101      	bne.n	8015dae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015daa:	2301      	movs	r3, #1
 8015dac:	e0df      	b.n	8015f6e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015dae:	4b72      	ldr	r3, [pc, #456]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015db0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015db2:	23c0      	movs	r3, #192	@ 0xc0
 8015db4:	029b      	lsls	r3, r3, #10
 8015db6:	4013      	ands	r3, r2
 8015db8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d03b      	beq.n	8015e38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	685a      	ldr	r2, [r3, #4]
 8015dc4:	23c0      	movs	r3, #192	@ 0xc0
 8015dc6:	029b      	lsls	r3, r3, #10
 8015dc8:	4013      	ands	r3, r2
 8015dca:	68fa      	ldr	r2, [r7, #12]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d033      	beq.n	8015e38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	2220      	movs	r2, #32
 8015dd6:	4013      	ands	r3, r2
 8015dd8:	d02e      	beq.n	8015e38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015dda:	4b67      	ldr	r3, [pc, #412]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dde:	4a68      	ldr	r2, [pc, #416]	@ (8015f80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015de0:	4013      	ands	r3, r2
 8015de2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015de4:	4b64      	ldr	r3, [pc, #400]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015de8:	4b63      	ldr	r3, [pc, #396]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dea:	2180      	movs	r1, #128	@ 0x80
 8015dec:	0309      	lsls	r1, r1, #12
 8015dee:	430a      	orrs	r2, r1
 8015df0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015df2:	4b61      	ldr	r3, [pc, #388]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015df4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015df6:	4b60      	ldr	r3, [pc, #384]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015df8:	4962      	ldr	r1, [pc, #392]	@ (8015f84 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015dfa:	400a      	ands	r2, r1
 8015dfc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e00:	68fa      	ldr	r2, [r7, #12]
 8015e02:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015e04:	68fa      	ldr	r2, [r7, #12]
 8015e06:	2380      	movs	r3, #128	@ 0x80
 8015e08:	005b      	lsls	r3, r3, #1
 8015e0a:	4013      	ands	r3, r2
 8015e0c:	d014      	beq.n	8015e38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015e0e:	f7f9 f845 	bl	800ee9c <HAL_GetTick>
 8015e12:	0003      	movs	r3, r0
 8015e14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e16:	e009      	b.n	8015e2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015e18:	f7f9 f840 	bl	800ee9c <HAL_GetTick>
 8015e1c:	0002      	movs	r2, r0
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	4a59      	ldr	r2, [pc, #356]	@ (8015f88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015e24:	4293      	cmp	r3, r2
 8015e26:	d901      	bls.n	8015e2c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	e0a0      	b.n	8015f6e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e2c:	4b52      	ldr	r3, [pc, #328]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e30:	2380      	movs	r3, #128	@ 0x80
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	4013      	ands	r3, r2
 8015e36:	d0ef      	beq.n	8015e18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2220      	movs	r2, #32
 8015e3e:	4013      	ands	r3, r2
 8015e40:	d01f      	beq.n	8015e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	685a      	ldr	r2, [r3, #4]
 8015e46:	23c0      	movs	r3, #192	@ 0xc0
 8015e48:	029b      	lsls	r3, r3, #10
 8015e4a:	401a      	ands	r2, r3
 8015e4c:	23c0      	movs	r3, #192	@ 0xc0
 8015e4e:	029b      	lsls	r3, r3, #10
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d10c      	bne.n	8015e6e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015e54:	4b48      	ldr	r3, [pc, #288]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	4a4c      	ldr	r2, [pc, #304]	@ (8015f8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015e5a:	4013      	ands	r3, r2
 8015e5c:	0019      	movs	r1, r3
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	685a      	ldr	r2, [r3, #4]
 8015e62:	23c0      	movs	r3, #192	@ 0xc0
 8015e64:	039b      	lsls	r3, r3, #14
 8015e66:	401a      	ands	r2, r3
 8015e68:	4b43      	ldr	r3, [pc, #268]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e6a:	430a      	orrs	r2, r1
 8015e6c:	601a      	str	r2, [r3, #0]
 8015e6e:	4b42      	ldr	r3, [pc, #264]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	685a      	ldr	r2, [r3, #4]
 8015e76:	23c0      	movs	r3, #192	@ 0xc0
 8015e78:	029b      	lsls	r3, r3, #10
 8015e7a:	401a      	ands	r2, r3
 8015e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e7e:	430a      	orrs	r2, r1
 8015e80:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015e82:	2317      	movs	r3, #23
 8015e84:	18fb      	adds	r3, r7, r3
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	2b01      	cmp	r3, #1
 8015e8a:	d105      	bne.n	8015e98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015e90:	4b39      	ldr	r3, [pc, #228]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e92:	493f      	ldr	r1, [pc, #252]	@ (8015f90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015e94:	400a      	ands	r2, r1
 8015e96:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2201      	movs	r2, #1
 8015e9e:	4013      	ands	r3, r2
 8015ea0:	d009      	beq.n	8015eb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015ea2:	4b35      	ldr	r3, [pc, #212]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ea6:	2203      	movs	r2, #3
 8015ea8:	4393      	bics	r3, r2
 8015eaa:	0019      	movs	r1, r3
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	689a      	ldr	r2, [r3, #8]
 8015eb0:	4b31      	ldr	r3, [pc, #196]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eb2:	430a      	orrs	r2, r1
 8015eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2202      	movs	r2, #2
 8015ebc:	4013      	ands	r3, r2
 8015ebe:	d009      	beq.n	8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ec4:	220c      	movs	r2, #12
 8015ec6:	4393      	bics	r3, r2
 8015ec8:	0019      	movs	r1, r3
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	68da      	ldr	r2, [r3, #12]
 8015ece:	4b2a      	ldr	r3, [pc, #168]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ed0:	430a      	orrs	r2, r1
 8015ed2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	2204      	movs	r2, #4
 8015eda:	4013      	ands	r3, r2
 8015edc:	d009      	beq.n	8015ef2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015ede:	4b26      	ldr	r3, [pc, #152]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8015f94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015ee4:	4013      	ands	r3, r2
 8015ee6:	0019      	movs	r1, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	691a      	ldr	r2, [r3, #16]
 8015eec:	4b22      	ldr	r3, [pc, #136]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015eee:	430a      	orrs	r2, r1
 8015ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	2208      	movs	r2, #8
 8015ef8:	4013      	ands	r3, r2
 8015efa:	d009      	beq.n	8015f10 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015efc:	4b1e      	ldr	r3, [pc, #120]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f00:	4a25      	ldr	r2, [pc, #148]	@ (8015f98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015f02:	4013      	ands	r3, r2
 8015f04:	0019      	movs	r1, r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	695a      	ldr	r2, [r3, #20]
 8015f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f0c:	430a      	orrs	r2, r1
 8015f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	2380      	movs	r3, #128	@ 0x80
 8015f16:	005b      	lsls	r3, r3, #1
 8015f18:	4013      	ands	r3, r2
 8015f1a:	d009      	beq.n	8015f30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015f1c:	4b16      	ldr	r3, [pc, #88]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f20:	4a17      	ldr	r2, [pc, #92]	@ (8015f80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015f22:	4013      	ands	r3, r2
 8015f24:	0019      	movs	r1, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	699a      	ldr	r2, [r3, #24]
 8015f2a:	4b13      	ldr	r3, [pc, #76]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f2c:	430a      	orrs	r2, r1
 8015f2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2240      	movs	r2, #64	@ 0x40
 8015f36:	4013      	ands	r3, r2
 8015f38:	d009      	beq.n	8015f4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f3e:	4a17      	ldr	r2, [pc, #92]	@ (8015f9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015f40:	4013      	ands	r3, r2
 8015f42:	0019      	movs	r1, r3
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6a1a      	ldr	r2, [r3, #32]
 8015f48:	4b0b      	ldr	r3, [pc, #44]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f4a:	430a      	orrs	r2, r1
 8015f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2280      	movs	r2, #128	@ 0x80
 8015f54:	4013      	ands	r3, r2
 8015f56:	d009      	beq.n	8015f6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015f58:	4b07      	ldr	r3, [pc, #28]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015f5c:	4a10      	ldr	r2, [pc, #64]	@ (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015f5e:	4013      	ands	r3, r2
 8015f60:	0019      	movs	r1, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	69da      	ldr	r2, [r3, #28]
 8015f66:	4b04      	ldr	r3, [pc, #16]	@ (8015f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015f68:	430a      	orrs	r2, r1
 8015f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015f6c:	2300      	movs	r3, #0
}
 8015f6e:	0018      	movs	r0, r3
 8015f70:	46bd      	mov	sp, r7
 8015f72:	b006      	add	sp, #24
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	46c0      	nop			@ (mov r8, r8)
 8015f78:	40021000 	.word	0x40021000
 8015f7c:	40007000 	.word	0x40007000
 8015f80:	fffcffff 	.word	0xfffcffff
 8015f84:	fff7ffff 	.word	0xfff7ffff
 8015f88:	00001388 	.word	0x00001388
 8015f8c:	ffcfffff 	.word	0xffcfffff
 8015f90:	efffffff 	.word	0xefffffff
 8015f94:	fffff3ff 	.word	0xfffff3ff
 8015f98:	ffffcfff 	.word	0xffffcfff
 8015f9c:	fbffffff 	.word	0xfbffffff
 8015fa0:	fff3ffff 	.word	0xfff3ffff

08015fa4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015fa4:	b5b0      	push	{r4, r5, r7, lr}
 8015fa6:	b084      	sub	sp, #16
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015fac:	230f      	movs	r3, #15
 8015fae:	18fb      	adds	r3, r7, r3
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d101      	bne.n	8015fbe <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015fba:	2301      	movs	r3, #1
 8015fbc:	e088      	b.n	80160d0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	2221      	movs	r2, #33	@ 0x21
 8015fc2:	5c9b      	ldrb	r3, [r3, r2]
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d107      	bne.n	8015fda <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	2220      	movs	r2, #32
 8015fce:	2100      	movs	r1, #0
 8015fd0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	0018      	movs	r0, r3
 8015fd6:	f7f3 f82b 	bl	8009030 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2221      	movs	r2, #33	@ 0x21
 8015fde:	2102      	movs	r1, #2
 8015fe0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	68db      	ldr	r3, [r3, #12]
 8015fe8:	2210      	movs	r2, #16
 8015fea:	4013      	ands	r3, r2
 8015fec:	2b10      	cmp	r3, #16
 8015fee:	d05f      	beq.n	80160b0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	22ca      	movs	r2, #202	@ 0xca
 8015ff6:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	2253      	movs	r2, #83	@ 0x53
 8015ffe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8016000:	250f      	movs	r5, #15
 8016002:	197c      	adds	r4, r7, r5
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	0018      	movs	r0, r3
 8016008:	f000 fa7c 	bl	8016504 <RTC_EnterInitMode>
 801600c:	0003      	movs	r3, r0
 801600e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8016010:	0028      	movs	r0, r5
 8016012:	183b      	adds	r3, r7, r0
 8016014:	781b      	ldrb	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d12c      	bne.n	8016074 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	689a      	ldr	r2, [r3, #8]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	492c      	ldr	r1, [pc, #176]	@ (80160d8 <HAL_RTC_Init+0x134>)
 8016026:	400a      	ands	r2, r1
 8016028:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	6899      	ldr	r1, [r3, #8]
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	685a      	ldr	r2, [r3, #4]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	691b      	ldr	r3, [r3, #16]
 8016038:	431a      	orrs	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	699b      	ldr	r3, [r3, #24]
 801603e:	431a      	orrs	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	430a      	orrs	r2, r1
 8016046:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	68d2      	ldr	r2, [r2, #12]
 8016050:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	6919      	ldr	r1, [r3, #16]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	689b      	ldr	r3, [r3, #8]
 801605c:	041a      	lsls	r2, r3, #16
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	430a      	orrs	r2, r1
 8016064:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8016066:	183c      	adds	r4, r7, r0
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	0018      	movs	r0, r3
 801606c:	f000 fa8e 	bl	801658c <RTC_ExitInitMode>
 8016070:	0003      	movs	r3, r0
 8016072:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8016074:	230f      	movs	r3, #15
 8016076:	18fb      	adds	r3, r7, r3
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d113      	bne.n	80160a6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2103      	movs	r1, #3
 801608a:	438a      	bics	r2, r1
 801608c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	69da      	ldr	r2, [r3, #28]
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	431a      	orrs	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	430a      	orrs	r2, r1
 80160a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	22ff      	movs	r2, #255	@ 0xff
 80160ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80160ae:	e003      	b.n	80160b8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80160b0:	230f      	movs	r3, #15
 80160b2:	18fb      	adds	r3, r7, r3
 80160b4:	2200      	movs	r2, #0
 80160b6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80160b8:	230f      	movs	r3, #15
 80160ba:	18fb      	adds	r3, r7, r3
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d103      	bne.n	80160ca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2221      	movs	r2, #33	@ 0x21
 80160c6:	2101      	movs	r1, #1
 80160c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80160ca:	230f      	movs	r3, #15
 80160cc:	18fb      	adds	r3, r7, r3
 80160ce:	781b      	ldrb	r3, [r3, #0]
}
 80160d0:	0018      	movs	r0, r3
 80160d2:	46bd      	mov	sp, r7
 80160d4:	b004      	add	sp, #16
 80160d6:	bdb0      	pop	{r4, r5, r7, pc}
 80160d8:	ff8fffbf 	.word	0xff8fffbf

080160dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80160dc:	b5b0      	push	{r4, r5, r7, lr}
 80160de:	b086      	sub	sp, #24
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	60f8      	str	r0, [r7, #12]
 80160e4:	60b9      	str	r1, [r7, #8]
 80160e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80160e8:	2300      	movs	r3, #0
 80160ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2220      	movs	r2, #32
 80160f0:	5c9b      	ldrb	r3, [r3, r2]
 80160f2:	2b01      	cmp	r3, #1
 80160f4:	d101      	bne.n	80160fa <HAL_RTC_SetTime+0x1e>
 80160f6:	2302      	movs	r3, #2
 80160f8:	e092      	b.n	8016220 <HAL_RTC_SetTime+0x144>
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2220      	movs	r2, #32
 80160fe:	2101      	movs	r1, #1
 8016100:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	2221      	movs	r2, #33	@ 0x21
 8016106:	2102      	movs	r1, #2
 8016108:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d125      	bne.n	801615c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	689b      	ldr	r3, [r3, #8]
 8016116:	2240      	movs	r2, #64	@ 0x40
 8016118:	4013      	ands	r3, r2
 801611a:	d102      	bne.n	8016122 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	2200      	movs	r2, #0
 8016120:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	0018      	movs	r0, r3
 8016128:	f000 fa5a 	bl	80165e0 <RTC_ByteToBcd2>
 801612c:	0003      	movs	r3, r0
 801612e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	785b      	ldrb	r3, [r3, #1]
 8016134:	0018      	movs	r0, r3
 8016136:	f000 fa53 	bl	80165e0 <RTC_ByteToBcd2>
 801613a:	0003      	movs	r3, r0
 801613c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801613e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	789b      	ldrb	r3, [r3, #2]
 8016144:	0018      	movs	r0, r3
 8016146:	f000 fa4b 	bl	80165e0 <RTC_ByteToBcd2>
 801614a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801614c:	0022      	movs	r2, r4
 801614e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016150:	68bb      	ldr	r3, [r7, #8]
 8016152:	78db      	ldrb	r3, [r3, #3]
 8016154:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016156:	4313      	orrs	r3, r2
 8016158:	617b      	str	r3, [r7, #20]
 801615a:	e017      	b.n	801618c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	2240      	movs	r2, #64	@ 0x40
 8016164:	4013      	ands	r3, r2
 8016166:	d102      	bne.n	801616e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	2200      	movs	r2, #0
 801616c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	785b      	ldrb	r3, [r3, #1]
 8016178:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801617a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801617c:	68ba      	ldr	r2, [r7, #8]
 801617e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016180:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	78db      	ldrb	r3, [r3, #3]
 8016186:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016188:	4313      	orrs	r3, r2
 801618a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	22ca      	movs	r2, #202	@ 0xca
 8016192:	625a      	str	r2, [r3, #36]	@ 0x24
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	2253      	movs	r2, #83	@ 0x53
 801619a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801619c:	2513      	movs	r5, #19
 801619e:	197c      	adds	r4, r7, r5
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	0018      	movs	r0, r3
 80161a4:	f000 f9ae 	bl	8016504 <RTC_EnterInitMode>
 80161a8:	0003      	movs	r3, r0
 80161aa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80161ac:	0028      	movs	r0, r5
 80161ae:	183b      	adds	r3, r7, r0
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d120      	bne.n	80161f8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	697a      	ldr	r2, [r7, #20]
 80161bc:	491a      	ldr	r1, [pc, #104]	@ (8016228 <HAL_RTC_SetTime+0x14c>)
 80161be:	400a      	ands	r2, r1
 80161c0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	689a      	ldr	r2, [r3, #8]
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	4917      	ldr	r1, [pc, #92]	@ (801622c <HAL_RTC_SetTime+0x150>)
 80161ce:	400a      	ands	r2, r1
 80161d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	6899      	ldr	r1, [r3, #8]
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	68da      	ldr	r2, [r3, #12]
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	691b      	ldr	r3, [r3, #16]
 80161e0:	431a      	orrs	r2, r3
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	430a      	orrs	r2, r1
 80161e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80161ea:	183c      	adds	r4, r7, r0
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	0018      	movs	r0, r3
 80161f0:	f000 f9cc 	bl	801658c <RTC_ExitInitMode>
 80161f4:	0003      	movs	r3, r0
 80161f6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80161f8:	2313      	movs	r3, #19
 80161fa:	18fb      	adds	r3, r7, r3
 80161fc:	781b      	ldrb	r3, [r3, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d103      	bne.n	801620a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2221      	movs	r2, #33	@ 0x21
 8016206:	2101      	movs	r1, #1
 8016208:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	22ff      	movs	r2, #255	@ 0xff
 8016210:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	2220      	movs	r2, #32
 8016216:	2100      	movs	r1, #0
 8016218:	5499      	strb	r1, [r3, r2]

  return status;
 801621a:	2313      	movs	r3, #19
 801621c:	18fb      	adds	r3, r7, r3
 801621e:	781b      	ldrb	r3, [r3, #0]
}
 8016220:	0018      	movs	r0, r3
 8016222:	46bd      	mov	sp, r7
 8016224:	b006      	add	sp, #24
 8016226:	bdb0      	pop	{r4, r5, r7, pc}
 8016228:	007f7f7f 	.word	0x007f7f7f
 801622c:	fffbffff 	.word	0xfffbffff

08016230 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b086      	sub	sp, #24
 8016234:	af00      	add	r7, sp, #0
 8016236:	60f8      	str	r0, [r7, #12]
 8016238:	60b9      	str	r1, [r7, #8]
 801623a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801623c:	2300      	movs	r3, #0
 801623e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	691b      	ldr	r3, [r3, #16]
 8016250:	045b      	lsls	r3, r3, #17
 8016252:	0c5a      	lsrs	r2, r3, #17
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	4a22      	ldr	r2, [pc, #136]	@ (80162e8 <HAL_RTC_GetTime+0xb8>)
 8016260:	4013      	ands	r3, r2
 8016262:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016264:	697b      	ldr	r3, [r7, #20]
 8016266:	0c1b      	lsrs	r3, r3, #16
 8016268:	b2db      	uxtb	r3, r3
 801626a:	223f      	movs	r2, #63	@ 0x3f
 801626c:	4013      	ands	r3, r2
 801626e:	b2da      	uxtb	r2, r3
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	0a1b      	lsrs	r3, r3, #8
 8016278:	b2db      	uxtb	r3, r3
 801627a:	227f      	movs	r2, #127	@ 0x7f
 801627c:	4013      	ands	r3, r2
 801627e:	b2da      	uxtb	r2, r3
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	b2db      	uxtb	r3, r3
 8016288:	227f      	movs	r2, #127	@ 0x7f
 801628a:	4013      	ands	r3, r2
 801628c:	b2da      	uxtb	r2, r3
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	0d9b      	lsrs	r3, r3, #22
 8016296:	b2db      	uxtb	r3, r3
 8016298:	2201      	movs	r2, #1
 801629a:	4013      	ands	r3, r2
 801629c:	b2da      	uxtb	r2, r3
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d11a      	bne.n	80162de <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	0018      	movs	r0, r3
 80162ae:	f000 f9b8 	bl	8016622 <RTC_Bcd2ToByte>
 80162b2:	0003      	movs	r3, r0
 80162b4:	001a      	movs	r2, r3
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80162ba:	68bb      	ldr	r3, [r7, #8]
 80162bc:	785b      	ldrb	r3, [r3, #1]
 80162be:	0018      	movs	r0, r3
 80162c0:	f000 f9af 	bl	8016622 <RTC_Bcd2ToByte>
 80162c4:	0003      	movs	r3, r0
 80162c6:	001a      	movs	r2, r3
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	789b      	ldrb	r3, [r3, #2]
 80162d0:	0018      	movs	r0, r3
 80162d2:	f000 f9a6 	bl	8016622 <RTC_Bcd2ToByte>
 80162d6:	0003      	movs	r3, r0
 80162d8:	001a      	movs	r2, r3
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80162de:	2300      	movs	r3, #0
}
 80162e0:	0018      	movs	r0, r3
 80162e2:	46bd      	mov	sp, r7
 80162e4:	b006      	add	sp, #24
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	007f7f7f 	.word	0x007f7f7f

080162ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80162ec:	b5b0      	push	{r4, r5, r7, lr}
 80162ee:	b086      	sub	sp, #24
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80162f8:	2300      	movs	r3, #0
 80162fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	2220      	movs	r2, #32
 8016300:	5c9b      	ldrb	r3, [r3, r2]
 8016302:	2b01      	cmp	r3, #1
 8016304:	d101      	bne.n	801630a <HAL_RTC_SetDate+0x1e>
 8016306:	2302      	movs	r3, #2
 8016308:	e07e      	b.n	8016408 <HAL_RTC_SetDate+0x11c>
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2220      	movs	r2, #32
 801630e:	2101      	movs	r1, #1
 8016310:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	2221      	movs	r2, #33	@ 0x21
 8016316:	2102      	movs	r1, #2
 8016318:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d10e      	bne.n	801633e <HAL_RTC_SetDate+0x52>
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	785b      	ldrb	r3, [r3, #1]
 8016324:	001a      	movs	r2, r3
 8016326:	2310      	movs	r3, #16
 8016328:	4013      	ands	r3, r2
 801632a:	d008      	beq.n	801633e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	785b      	ldrb	r3, [r3, #1]
 8016330:	2210      	movs	r2, #16
 8016332:	4393      	bics	r3, r2
 8016334:	b2db      	uxtb	r3, r3
 8016336:	330a      	adds	r3, #10
 8016338:	b2da      	uxtb	r2, r3
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d11c      	bne.n	801637e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	78db      	ldrb	r3, [r3, #3]
 8016348:	0018      	movs	r0, r3
 801634a:	f000 f949 	bl	80165e0 <RTC_ByteToBcd2>
 801634e:	0003      	movs	r3, r0
 8016350:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	785b      	ldrb	r3, [r3, #1]
 8016356:	0018      	movs	r0, r3
 8016358:	f000 f942 	bl	80165e0 <RTC_ByteToBcd2>
 801635c:	0003      	movs	r3, r0
 801635e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016360:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	789b      	ldrb	r3, [r3, #2]
 8016366:	0018      	movs	r0, r3
 8016368:	f000 f93a 	bl	80165e0 <RTC_ByteToBcd2>
 801636c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801636e:	0022      	movs	r2, r4
 8016370:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016378:	4313      	orrs	r3, r2
 801637a:	617b      	str	r3, [r7, #20]
 801637c:	e00e      	b.n	801639c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	78db      	ldrb	r3, [r3, #3]
 8016382:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	785b      	ldrb	r3, [r3, #1]
 8016388:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801638a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801638c:	68ba      	ldr	r2, [r7, #8]
 801638e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016390:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016398:	4313      	orrs	r3, r2
 801639a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	22ca      	movs	r2, #202	@ 0xca
 80163a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2253      	movs	r2, #83	@ 0x53
 80163aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80163ac:	2513      	movs	r5, #19
 80163ae:	197c      	adds	r4, r7, r5
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	0018      	movs	r0, r3
 80163b4:	f000 f8a6 	bl	8016504 <RTC_EnterInitMode>
 80163b8:	0003      	movs	r3, r0
 80163ba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80163bc:	0028      	movs	r0, r5
 80163be:	183b      	adds	r3, r7, r0
 80163c0:	781b      	ldrb	r3, [r3, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d10c      	bne.n	80163e0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	697a      	ldr	r2, [r7, #20]
 80163cc:	4910      	ldr	r1, [pc, #64]	@ (8016410 <HAL_RTC_SetDate+0x124>)
 80163ce:	400a      	ands	r2, r1
 80163d0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80163d2:	183c      	adds	r4, r7, r0
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	0018      	movs	r0, r3
 80163d8:	f000 f8d8 	bl	801658c <RTC_ExitInitMode>
 80163dc:	0003      	movs	r3, r0
 80163de:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80163e0:	2313      	movs	r3, #19
 80163e2:	18fb      	adds	r3, r7, r3
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d103      	bne.n	80163f2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2221      	movs	r2, #33	@ 0x21
 80163ee:	2101      	movs	r1, #1
 80163f0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	22ff      	movs	r2, #255	@ 0xff
 80163f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	2220      	movs	r2, #32
 80163fe:	2100      	movs	r1, #0
 8016400:	5499      	strb	r1, [r3, r2]

  return status;
 8016402:	2313      	movs	r3, #19
 8016404:	18fb      	adds	r3, r7, r3
 8016406:	781b      	ldrb	r3, [r3, #0]
}
 8016408:	0018      	movs	r0, r3
 801640a:	46bd      	mov	sp, r7
 801640c:	b006      	add	sp, #24
 801640e:	bdb0      	pop	{r4, r5, r7, pc}
 8016410:	00ffff3f 	.word	0x00ffff3f

08016414 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b086      	sub	sp, #24
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016420:	2300      	movs	r3, #0
 8016422:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	4a21      	ldr	r2, [pc, #132]	@ (80164b0 <HAL_RTC_GetDate+0x9c>)
 801642c:	4013      	ands	r3, r2
 801642e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	0c1b      	lsrs	r3, r3, #16
 8016434:	b2da      	uxtb	r2, r3
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	0a1b      	lsrs	r3, r3, #8
 801643e:	b2db      	uxtb	r3, r3
 8016440:	221f      	movs	r2, #31
 8016442:	4013      	ands	r3, r2
 8016444:	b2da      	uxtb	r2, r3
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801644a:	697b      	ldr	r3, [r7, #20]
 801644c:	b2db      	uxtb	r3, r3
 801644e:	223f      	movs	r2, #63	@ 0x3f
 8016450:	4013      	ands	r3, r2
 8016452:	b2da      	uxtb	r2, r3
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	0b5b      	lsrs	r3, r3, #13
 801645c:	b2db      	uxtb	r3, r3
 801645e:	2207      	movs	r2, #7
 8016460:	4013      	ands	r3, r2
 8016462:	b2da      	uxtb	r2, r3
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d11a      	bne.n	80164a4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	78db      	ldrb	r3, [r3, #3]
 8016472:	0018      	movs	r0, r3
 8016474:	f000 f8d5 	bl	8016622 <RTC_Bcd2ToByte>
 8016478:	0003      	movs	r3, r0
 801647a:	001a      	movs	r2, r3
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	785b      	ldrb	r3, [r3, #1]
 8016484:	0018      	movs	r0, r3
 8016486:	f000 f8cc 	bl	8016622 <RTC_Bcd2ToByte>
 801648a:	0003      	movs	r3, r0
 801648c:	001a      	movs	r2, r3
 801648e:	68bb      	ldr	r3, [r7, #8]
 8016490:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	789b      	ldrb	r3, [r3, #2]
 8016496:	0018      	movs	r0, r3
 8016498:	f000 f8c3 	bl	8016622 <RTC_Bcd2ToByte>
 801649c:	0003      	movs	r3, r0
 801649e:	001a      	movs	r2, r3
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80164a4:	2300      	movs	r3, #0
}
 80164a6:	0018      	movs	r0, r3
 80164a8:	46bd      	mov	sp, r7
 80164aa:	b006      	add	sp, #24
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	46c0      	nop			@ (mov r8, r8)
 80164b0:	00ffff3f 	.word	0x00ffff3f

080164b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80164bc:	2300      	movs	r3, #0
 80164be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	4a0e      	ldr	r2, [pc, #56]	@ (8016500 <HAL_RTC_WaitForSynchro+0x4c>)
 80164c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80164c8:	f7f8 fce8 	bl	800ee9c <HAL_GetTick>
 80164cc:	0003      	movs	r3, r0
 80164ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80164d0:	e00a      	b.n	80164e8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80164d2:	f7f8 fce3 	bl	800ee9c <HAL_GetTick>
 80164d6:	0002      	movs	r2, r0
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	1ad2      	subs	r2, r2, r3
 80164dc:	23fa      	movs	r3, #250	@ 0xfa
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d901      	bls.n	80164e8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80164e4:	2303      	movs	r3, #3
 80164e6:	e006      	b.n	80164f6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	2220      	movs	r2, #32
 80164f0:	4013      	ands	r3, r2
 80164f2:	d0ee      	beq.n	80164d2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	0018      	movs	r0, r3
 80164f8:	46bd      	mov	sp, r7
 80164fa:	b004      	add	sp, #16
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	46c0      	nop			@ (mov r8, r8)
 8016500:	0001ff5f 	.word	0x0001ff5f

08016504 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801650c:	2300      	movs	r3, #0
 801650e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016510:	230f      	movs	r3, #15
 8016512:	18fb      	adds	r3, r7, r3
 8016514:	2200      	movs	r2, #0
 8016516:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	2240      	movs	r2, #64	@ 0x40
 8016520:	4013      	ands	r3, r2
 8016522:	d12c      	bne.n	801657e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	68da      	ldr	r2, [r3, #12]
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	2180      	movs	r1, #128	@ 0x80
 8016530:	430a      	orrs	r2, r1
 8016532:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016534:	f7f8 fcb2 	bl	800ee9c <HAL_GetTick>
 8016538:	0003      	movs	r3, r0
 801653a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801653c:	e014      	b.n	8016568 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801653e:	f7f8 fcad 	bl	800ee9c <HAL_GetTick>
 8016542:	0002      	movs	r2, r0
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	1ad2      	subs	r2, r2, r3
 8016548:	200f      	movs	r0, #15
 801654a:	183b      	adds	r3, r7, r0
 801654c:	1839      	adds	r1, r7, r0
 801654e:	7809      	ldrb	r1, [r1, #0]
 8016550:	7019      	strb	r1, [r3, #0]
 8016552:	23fa      	movs	r3, #250	@ 0xfa
 8016554:	009b      	lsls	r3, r3, #2
 8016556:	429a      	cmp	r2, r3
 8016558:	d906      	bls.n	8016568 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2221      	movs	r2, #33	@ 0x21
 801655e:	2104      	movs	r1, #4
 8016560:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8016562:	183b      	adds	r3, r7, r0
 8016564:	2201      	movs	r2, #1
 8016566:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	2240      	movs	r2, #64	@ 0x40
 8016570:	4013      	ands	r3, r2
 8016572:	d104      	bne.n	801657e <RTC_EnterInitMode+0x7a>
 8016574:	230f      	movs	r3, #15
 8016576:	18fb      	adds	r3, r7, r3
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	2b01      	cmp	r3, #1
 801657c:	d1df      	bne.n	801653e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801657e:	230f      	movs	r3, #15
 8016580:	18fb      	adds	r3, r7, r3
 8016582:	781b      	ldrb	r3, [r3, #0]
}
 8016584:	0018      	movs	r0, r3
 8016586:	46bd      	mov	sp, r7
 8016588:	b004      	add	sp, #16
 801658a:	bd80      	pop	{r7, pc}

0801658c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801658c:	b590      	push	{r4, r7, lr}
 801658e:	b085      	sub	sp, #20
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016594:	240f      	movs	r4, #15
 8016596:	193b      	adds	r3, r7, r4
 8016598:	2200      	movs	r2, #0
 801659a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	68da      	ldr	r2, [r3, #12]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	2180      	movs	r1, #128	@ 0x80
 80165a8:	438a      	bics	r2, r1
 80165aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	689b      	ldr	r3, [r3, #8]
 80165b2:	2220      	movs	r2, #32
 80165b4:	4013      	ands	r3, r2
 80165b6:	d10c      	bne.n	80165d2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	0018      	movs	r0, r3
 80165bc:	f7ff ff7a 	bl	80164b4 <HAL_RTC_WaitForSynchro>
 80165c0:	1e03      	subs	r3, r0, #0
 80165c2:	d006      	beq.n	80165d2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2221      	movs	r2, #33	@ 0x21
 80165c8:	2104      	movs	r1, #4
 80165ca:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80165cc:	193b      	adds	r3, r7, r4
 80165ce:	2201      	movs	r2, #1
 80165d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80165d2:	230f      	movs	r3, #15
 80165d4:	18fb      	adds	r3, r7, r3
 80165d6:	781b      	ldrb	r3, [r3, #0]
}
 80165d8:	0018      	movs	r0, r3
 80165da:	46bd      	mov	sp, r7
 80165dc:	b005      	add	sp, #20
 80165de:	bd90      	pop	{r4, r7, pc}

080165e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	0002      	movs	r2, r0
 80165e8:	1dfb      	adds	r3, r7, #7
 80165ea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80165ec:	2300      	movs	r3, #0
 80165ee:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80165f0:	e007      	b.n	8016602 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	3301      	adds	r3, #1
 80165f6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80165f8:	1dfb      	adds	r3, r7, #7
 80165fa:	1dfa      	adds	r2, r7, #7
 80165fc:	7812      	ldrb	r2, [r2, #0]
 80165fe:	3a0a      	subs	r2, #10
 8016600:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8016602:	1dfb      	adds	r3, r7, #7
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	2b09      	cmp	r3, #9
 8016608:	d8f3      	bhi.n	80165f2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	b2db      	uxtb	r3, r3
 801660e:	011b      	lsls	r3, r3, #4
 8016610:	b2da      	uxtb	r2, r3
 8016612:	1dfb      	adds	r3, r7, #7
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	4313      	orrs	r3, r2
 8016618:	b2db      	uxtb	r3, r3
}
 801661a:	0018      	movs	r0, r3
 801661c:	46bd      	mov	sp, r7
 801661e:	b004      	add	sp, #16
 8016620:	bd80      	pop	{r7, pc}

08016622 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016622:	b580      	push	{r7, lr}
 8016624:	b084      	sub	sp, #16
 8016626:	af00      	add	r7, sp, #0
 8016628:	0002      	movs	r2, r0
 801662a:	1dfb      	adds	r3, r7, #7
 801662c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801662e:	2300      	movs	r3, #0
 8016630:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016632:	1dfb      	adds	r3, r7, #7
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	091b      	lsrs	r3, r3, #4
 8016638:	b2db      	uxtb	r3, r3
 801663a:	001a      	movs	r2, r3
 801663c:	0013      	movs	r3, r2
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	189b      	adds	r3, r3, r2
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	b2da      	uxtb	r2, r3
 801664a:	1dfb      	adds	r3, r7, #7
 801664c:	781b      	ldrb	r3, [r3, #0]
 801664e:	210f      	movs	r1, #15
 8016650:	400b      	ands	r3, r1
 8016652:	b2db      	uxtb	r3, r3
 8016654:	18d3      	adds	r3, r2, r3
 8016656:	b2db      	uxtb	r3, r3
}
 8016658:	0018      	movs	r0, r3
 801665a:	46bd      	mov	sp, r7
 801665c:	b004      	add	sp, #16
 801665e:	bd80      	pop	{r7, pc}

08016660 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b086      	sub	sp, #24
 8016664:	af00      	add	r7, sp, #0
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801666c:	4b64      	ldr	r3, [pc, #400]	@ (8016800 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	22fa      	movs	r2, #250	@ 0xfa
 8016672:	01d1      	lsls	r1, r2, #7
 8016674:	0018      	movs	r0, r3
 8016676:	f7e9 fd95 	bl	80001a4 <__udivsi3>
 801667a:	0003      	movs	r3, r0
 801667c:	001a      	movs	r2, r3
 801667e:	0013      	movs	r3, r2
 8016680:	015b      	lsls	r3, r3, #5
 8016682:	1a9b      	subs	r3, r3, r2
 8016684:	009b      	lsls	r3, r3, #2
 8016686:	189b      	adds	r3, r3, r2
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	2220      	movs	r2, #32
 8016690:	5c9b      	ldrb	r3, [r3, r2]
 8016692:	2b01      	cmp	r3, #1
 8016694:	d101      	bne.n	801669a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8016696:	2302      	movs	r3, #2
 8016698:	e0ad      	b.n	80167f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	2220      	movs	r2, #32
 801669e:	2101      	movs	r1, #1
 80166a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	2221      	movs	r2, #33	@ 0x21
 80166a6:	2102      	movs	r1, #2
 80166a8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	22ca      	movs	r2, #202	@ 0xca
 80166b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	2253      	movs	r2, #83	@ 0x53
 80166b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	689a      	ldr	r2, [r3, #8]
 80166c0:	2380      	movs	r3, #128	@ 0x80
 80166c2:	00db      	lsls	r3, r3, #3
 80166c4:	4013      	ands	r3, r2
 80166c6:	d019      	beq.n	80166fc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	3b01      	subs	r3, #1
 80166cc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d10d      	bne.n	80166f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	22ff      	movs	r2, #255	@ 0xff
 80166da:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	2221      	movs	r2, #33	@ 0x21
 80166e0:	2103      	movs	r1, #3
 80166e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2220      	movs	r2, #32
 80166e8:	2100      	movs	r1, #0
 80166ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80166ec:	2303      	movs	r3, #3
 80166ee:	e082      	b.n	80167f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	68db      	ldr	r3, [r3, #12]
 80166f6:	2204      	movs	r2, #4
 80166f8:	4013      	ands	r3, r2
 80166fa:	d1e5      	bne.n	80166c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	689a      	ldr	r2, [r3, #8]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	493f      	ldr	r1, [pc, #252]	@ (8016804 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8016708:	400a      	ands	r2, r1
 801670a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	68db      	ldr	r3, [r3, #12]
 8016712:	22ff      	movs	r2, #255	@ 0xff
 8016714:	401a      	ands	r2, r3
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	493b      	ldr	r1, [pc, #236]	@ (8016808 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801671c:	430a      	orrs	r2, r1
 801671e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016720:	4b37      	ldr	r3, [pc, #220]	@ (8016800 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	22fa      	movs	r2, #250	@ 0xfa
 8016726:	01d1      	lsls	r1, r2, #7
 8016728:	0018      	movs	r0, r3
 801672a:	f7e9 fd3b 	bl	80001a4 <__udivsi3>
 801672e:	0003      	movs	r3, r0
 8016730:	001a      	movs	r2, r3
 8016732:	0013      	movs	r3, r2
 8016734:	015b      	lsls	r3, r3, #5
 8016736:	1a9b      	subs	r3, r3, r2
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	189b      	adds	r3, r3, r2
 801673c:	00db      	lsls	r3, r3, #3
 801673e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	3b01      	subs	r3, #1
 8016744:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d10d      	bne.n	8016768 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	22ff      	movs	r2, #255	@ 0xff
 8016752:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2221      	movs	r2, #33	@ 0x21
 8016758:	2103      	movs	r1, #3
 801675a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	2220      	movs	r2, #32
 8016760:	2100      	movs	r1, #0
 8016762:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016764:	2303      	movs	r3, #3
 8016766:	e046      	b.n	80167f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	68db      	ldr	r3, [r3, #12]
 801676e:	2204      	movs	r2, #4
 8016770:	4013      	ands	r3, r2
 8016772:	d0e5      	beq.n	8016740 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	689a      	ldr	r2, [r3, #8]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2107      	movs	r1, #7
 8016780:	438a      	bics	r2, r1
 8016782:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	6899      	ldr	r1, [r3, #8]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	430a      	orrs	r2, r1
 8016792:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	68ba      	ldr	r2, [r7, #8]
 801679a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801679c:	4b1b      	ldr	r3, [pc, #108]	@ (801680c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	4b1a      	ldr	r3, [pc, #104]	@ (801680c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167a2:	2180      	movs	r1, #128	@ 0x80
 80167a4:	0349      	lsls	r1, r1, #13
 80167a6:	430a      	orrs	r2, r1
 80167a8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80167aa:	4b18      	ldr	r3, [pc, #96]	@ (801680c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167ac:	689a      	ldr	r2, [r3, #8]
 80167ae:	4b17      	ldr	r3, [pc, #92]	@ (801680c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80167b0:	2180      	movs	r1, #128	@ 0x80
 80167b2:	0349      	lsls	r1, r1, #13
 80167b4:	430a      	orrs	r2, r1
 80167b6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	689a      	ldr	r2, [r3, #8]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	2180      	movs	r1, #128	@ 0x80
 80167c4:	01c9      	lsls	r1, r1, #7
 80167c6:	430a      	orrs	r2, r1
 80167c8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	689a      	ldr	r2, [r3, #8]
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2180      	movs	r1, #128	@ 0x80
 80167d6:	00c9      	lsls	r1, r1, #3
 80167d8:	430a      	orrs	r2, r1
 80167da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	22ff      	movs	r2, #255	@ 0xff
 80167e2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2221      	movs	r2, #33	@ 0x21
 80167e8:	2101      	movs	r1, #1
 80167ea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2220      	movs	r2, #32
 80167f0:	2100      	movs	r1, #0
 80167f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	0018      	movs	r0, r3
 80167f8:	46bd      	mov	sp, r7
 80167fa:	b006      	add	sp, #24
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	46c0      	nop			@ (mov r8, r8)
 8016800:	200000d0 	.word	0x200000d0
 8016804:	fffffbff 	.word	0xfffffbff
 8016808:	fffffb7f 	.word	0xfffffb7f
 801680c:	40010400 	.word	0x40010400

08016810 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016818:	2300      	movs	r3, #0
 801681a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2220      	movs	r2, #32
 8016820:	5c9b      	ldrb	r3, [r3, r2]
 8016822:	2b01      	cmp	r3, #1
 8016824:	d101      	bne.n	801682a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8016826:	2302      	movs	r3, #2
 8016828:	e04e      	b.n	80168c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2220      	movs	r2, #32
 801682e:	2101      	movs	r1, #1
 8016830:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	2221      	movs	r2, #33	@ 0x21
 8016836:	2102      	movs	r1, #2
 8016838:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	22ca      	movs	r2, #202	@ 0xca
 8016840:	625a      	str	r2, [r3, #36]	@ 0x24
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	2253      	movs	r2, #83	@ 0x53
 8016848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	689a      	ldr	r2, [r3, #8]
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	491e      	ldr	r1, [pc, #120]	@ (80168d0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8016856:	400a      	ands	r2, r1
 8016858:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	689a      	ldr	r2, [r3, #8]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	491b      	ldr	r1, [pc, #108]	@ (80168d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8016866:	400a      	ands	r2, r1
 8016868:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801686a:	f7f8 fb17 	bl	800ee9c <HAL_GetTick>
 801686e:	0003      	movs	r3, r0
 8016870:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016872:	e016      	b.n	80168a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016874:	f7f8 fb12 	bl	800ee9c <HAL_GetTick>
 8016878:	0002      	movs	r2, r0
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	1ad2      	subs	r2, r2, r3
 801687e:	23fa      	movs	r3, #250	@ 0xfa
 8016880:	009b      	lsls	r3, r3, #2
 8016882:	429a      	cmp	r2, r3
 8016884:	d90d      	bls.n	80168a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	22ff      	movs	r2, #255	@ 0xff
 801688c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2221      	movs	r2, #33	@ 0x21
 8016892:	2103      	movs	r1, #3
 8016894:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2220      	movs	r2, #32
 801689a:	2100      	movs	r1, #0
 801689c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801689e:	2303      	movs	r3, #3
 80168a0:	e012      	b.n	80168c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	68db      	ldr	r3, [r3, #12]
 80168a8:	2204      	movs	r2, #4
 80168aa:	4013      	ands	r3, r2
 80168ac:	d0e2      	beq.n	8016874 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	22ff      	movs	r2, #255	@ 0xff
 80168b4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2221      	movs	r2, #33	@ 0x21
 80168ba:	2101      	movs	r1, #1
 80168bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2220      	movs	r2, #32
 80168c2:	2100      	movs	r1, #0
 80168c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80168c6:	2300      	movs	r3, #0
}
 80168c8:	0018      	movs	r0, r3
 80168ca:	46bd      	mov	sp, r7
 80168cc:	b004      	add	sp, #16
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	fffffbff 	.word	0xfffffbff
 80168d4:	ffffbfff 	.word	0xffffbfff

080168d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80168e0:	4b13      	ldr	r3, [pc, #76]	@ (8016930 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80168e2:	2280      	movs	r2, #128	@ 0x80
 80168e4:	0352      	lsls	r2, r2, #13
 80168e6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	689a      	ldr	r2, [r3, #8]
 80168ee:	2380      	movs	r3, #128	@ 0x80
 80168f0:	01db      	lsls	r3, r3, #7
 80168f2:	4013      	ands	r3, r2
 80168f4:	d014      	beq.n	8016920 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	68da      	ldr	r2, [r3, #12]
 80168fc:	2380      	movs	r3, #128	@ 0x80
 80168fe:	00db      	lsls	r3, r3, #3
 8016900:	4013      	ands	r3, r2
 8016902:	d00d      	beq.n	8016920 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	22ff      	movs	r2, #255	@ 0xff
 801690c:	401a      	ands	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	4908      	ldr	r1, [pc, #32]	@ (8016934 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016914:	430a      	orrs	r2, r1
 8016916:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	0018      	movs	r0, r3
 801691c:	f000 f80c 	bl	8016938 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2221      	movs	r2, #33	@ 0x21
 8016924:	2101      	movs	r1, #1
 8016926:	5499      	strb	r1, [r3, r2]
}
 8016928:	46c0      	nop			@ (mov r8, r8)
 801692a:	46bd      	mov	sp, r7
 801692c:	b002      	add	sp, #8
 801692e:	bd80      	pop	{r7, pc}
 8016930:	40010400 	.word	0x40010400
 8016934:	fffffb7f 	.word	0xfffffb7f

08016938 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016940:	46c0      	nop			@ (mov r8, r8)
 8016942:	46bd      	mov	sp, r7
 8016944:	b002      	add	sp, #8
 8016946:	bd80      	pop	{r7, pc}

08016948 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	af00      	add	r7, sp, #0
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016954:	2300      	movs	r3, #0
 8016956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	3350      	adds	r3, #80	@ 0x50
 801695e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	697a      	ldr	r2, [r7, #20]
 8016966:	18d3      	adds	r3, r2, r3
 8016968:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	601a      	str	r2, [r3, #0]
}
 8016970:	46c0      	nop			@ (mov r8, r8)
 8016972:	46bd      	mov	sp, r7
 8016974:	b006      	add	sp, #24
 8016976:	bd80      	pop	{r7, pc}

08016978 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b084      	sub	sp, #16
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016982:	2300      	movs	r3, #0
 8016984:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	3350      	adds	r3, #80	@ 0x50
 801698c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	68fa      	ldr	r2, [r7, #12]
 8016994:	18d3      	adds	r3, r2, r3
 8016996:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
}
 801699c:	0018      	movs	r0, r3
 801699e:	46bd      	mov	sp, r7
 80169a0:	b004      	add	sp, #16
 80169a2:	bd80      	pop	{r7, pc}

080169a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d101      	bne.n	80169b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80169b2:	2301      	movs	r3, #1
 80169b4:	e032      	b.n	8016a1c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2239      	movs	r2, #57	@ 0x39
 80169ba:	5c9b      	ldrb	r3, [r3, r2]
 80169bc:	b2db      	uxtb	r3, r3
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d107      	bne.n	80169d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2238      	movs	r2, #56	@ 0x38
 80169c6:	2100      	movs	r1, #0
 80169c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	0018      	movs	r0, r3
 80169ce:	f7f7 fb7d 	bl	800e0cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2239      	movs	r2, #57	@ 0x39
 80169d6:	2102      	movs	r1, #2
 80169d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	3304      	adds	r3, #4
 80169e2:	0019      	movs	r1, r3
 80169e4:	0010      	movs	r0, r2
 80169e6:	f000 fa1d 	bl	8016e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	223e      	movs	r2, #62	@ 0x3e
 80169ee:	2101      	movs	r1, #1
 80169f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	223a      	movs	r2, #58	@ 0x3a
 80169f6:	2101      	movs	r1, #1
 80169f8:	5499      	strb	r1, [r3, r2]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	223b      	movs	r2, #59	@ 0x3b
 80169fe:	2101      	movs	r1, #1
 8016a00:	5499      	strb	r1, [r3, r2]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	223c      	movs	r2, #60	@ 0x3c
 8016a06:	2101      	movs	r1, #1
 8016a08:	5499      	strb	r1, [r3, r2]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	223d      	movs	r2, #61	@ 0x3d
 8016a0e:	2101      	movs	r1, #1
 8016a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2239      	movs	r2, #57	@ 0x39
 8016a16:	2101      	movs	r1, #1
 8016a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a1a:	2300      	movs	r3, #0
}
 8016a1c:	0018      	movs	r0, r3
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	b002      	add	sp, #8
 8016a22:	bd80      	pop	{r7, pc}

08016a24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2239      	movs	r2, #57	@ 0x39
 8016a30:	5c9b      	ldrb	r3, [r3, r2]
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	d001      	beq.n	8016a3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016a38:	2301      	movs	r3, #1
 8016a3a:	e033      	b.n	8016aa4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2239      	movs	r2, #57	@ 0x39
 8016a40:	2102      	movs	r1, #2
 8016a42:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681a      	ldr	r2, [r3, #0]
 8016a48:	2380      	movs	r3, #128	@ 0x80
 8016a4a:	05db      	lsls	r3, r3, #23
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d00e      	beq.n	8016a6e <HAL_TIM_Base_Start+0x4a>
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	4a15      	ldr	r2, [pc, #84]	@ (8016aac <HAL_TIM_Base_Start+0x88>)
 8016a56:	4293      	cmp	r3, r2
 8016a58:	d009      	beq.n	8016a6e <HAL_TIM_Base_Start+0x4a>
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4a14      	ldr	r2, [pc, #80]	@ (8016ab0 <HAL_TIM_Base_Start+0x8c>)
 8016a60:	4293      	cmp	r3, r2
 8016a62:	d004      	beq.n	8016a6e <HAL_TIM_Base_Start+0x4a>
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	4a12      	ldr	r2, [pc, #72]	@ (8016ab4 <HAL_TIM_Base_Start+0x90>)
 8016a6a:	4293      	cmp	r3, r2
 8016a6c:	d111      	bne.n	8016a92 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	689b      	ldr	r3, [r3, #8]
 8016a74:	2207      	movs	r2, #7
 8016a76:	4013      	ands	r3, r2
 8016a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	2b06      	cmp	r3, #6
 8016a7e:	d010      	beq.n	8016aa2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2101      	movs	r1, #1
 8016a8c:	430a      	orrs	r2, r1
 8016a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a90:	e007      	b.n	8016aa2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2101      	movs	r1, #1
 8016a9e:	430a      	orrs	r2, r1
 8016aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016aa2:	2300      	movs	r3, #0
}
 8016aa4:	0018      	movs	r0, r3
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	b004      	add	sp, #16
 8016aaa:	bd80      	pop	{r7, pc}
 8016aac:	40000400 	.word	0x40000400
 8016ab0:	40010800 	.word	0x40010800
 8016ab4:	40011400 	.word	0x40011400

08016ab8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	6a1b      	ldr	r3, [r3, #32]
 8016ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8016af0 <HAL_TIM_Base_Stop+0x38>)
 8016ac8:	4013      	ands	r3, r2
 8016aca:	d107      	bne.n	8016adc <HAL_TIM_Base_Stop+0x24>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	681a      	ldr	r2, [r3, #0]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	438a      	bics	r2, r1
 8016ada:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2239      	movs	r2, #57	@ 0x39
 8016ae0:	2101      	movs	r1, #1
 8016ae2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	0018      	movs	r0, r3
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	b002      	add	sp, #8
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	46c0      	nop			@ (mov r8, r8)
 8016af0:	00001111 	.word	0x00001111

08016af4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d101      	bne.n	8016b06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016b02:	2301      	movs	r3, #1
 8016b04:	e032      	b.n	8016b6c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	2239      	movs	r2, #57	@ 0x39
 8016b0a:	5c9b      	ldrb	r3, [r3, r2]
 8016b0c:	b2db      	uxtb	r3, r3
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d107      	bne.n	8016b22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2238      	movs	r2, #56	@ 0x38
 8016b16:	2100      	movs	r1, #0
 8016b18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	0018      	movs	r0, r3
 8016b1e:	f7f7 fab1 	bl	800e084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2239      	movs	r2, #57	@ 0x39
 8016b26:	2102      	movs	r1, #2
 8016b28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681a      	ldr	r2, [r3, #0]
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	3304      	adds	r3, #4
 8016b32:	0019      	movs	r1, r3
 8016b34:	0010      	movs	r0, r2
 8016b36:	f000 f975 	bl	8016e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	223e      	movs	r2, #62	@ 0x3e
 8016b3e:	2101      	movs	r1, #1
 8016b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	223a      	movs	r2, #58	@ 0x3a
 8016b46:	2101      	movs	r1, #1
 8016b48:	5499      	strb	r1, [r3, r2]
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	223b      	movs	r2, #59	@ 0x3b
 8016b4e:	2101      	movs	r1, #1
 8016b50:	5499      	strb	r1, [r3, r2]
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	223c      	movs	r2, #60	@ 0x3c
 8016b56:	2101      	movs	r1, #1
 8016b58:	5499      	strb	r1, [r3, r2]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	223d      	movs	r2, #61	@ 0x3d
 8016b5e:	2101      	movs	r1, #1
 8016b60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	2239      	movs	r2, #57	@ 0x39
 8016b66:	2101      	movs	r1, #1
 8016b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016b6a:	2300      	movs	r3, #0
}
 8016b6c:	0018      	movs	r0, r3
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	b002      	add	sp, #8
 8016b72:	bd80      	pop	{r7, pc}

08016b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b084      	sub	sp, #16
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d108      	bne.n	8016b96 <HAL_TIM_PWM_Start+0x22>
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	223a      	movs	r2, #58	@ 0x3a
 8016b88:	5c9b      	ldrb	r3, [r3, r2]
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	3b01      	subs	r3, #1
 8016b8e:	1e5a      	subs	r2, r3, #1
 8016b90:	4193      	sbcs	r3, r2
 8016b92:	b2db      	uxtb	r3, r3
 8016b94:	e01f      	b.n	8016bd6 <HAL_TIM_PWM_Start+0x62>
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	2b04      	cmp	r3, #4
 8016b9a:	d108      	bne.n	8016bae <HAL_TIM_PWM_Start+0x3a>
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	223b      	movs	r2, #59	@ 0x3b
 8016ba0:	5c9b      	ldrb	r3, [r3, r2]
 8016ba2:	b2db      	uxtb	r3, r3
 8016ba4:	3b01      	subs	r3, #1
 8016ba6:	1e5a      	subs	r2, r3, #1
 8016ba8:	4193      	sbcs	r3, r2
 8016baa:	b2db      	uxtb	r3, r3
 8016bac:	e013      	b.n	8016bd6 <HAL_TIM_PWM_Start+0x62>
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	2b08      	cmp	r3, #8
 8016bb2:	d108      	bne.n	8016bc6 <HAL_TIM_PWM_Start+0x52>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	223c      	movs	r2, #60	@ 0x3c
 8016bb8:	5c9b      	ldrb	r3, [r3, r2]
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	3b01      	subs	r3, #1
 8016bbe:	1e5a      	subs	r2, r3, #1
 8016bc0:	4193      	sbcs	r3, r2
 8016bc2:	b2db      	uxtb	r3, r3
 8016bc4:	e007      	b.n	8016bd6 <HAL_TIM_PWM_Start+0x62>
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	223d      	movs	r2, #61	@ 0x3d
 8016bca:	5c9b      	ldrb	r3, [r3, r2]
 8016bcc:	b2db      	uxtb	r3, r3
 8016bce:	3b01      	subs	r3, #1
 8016bd0:	1e5a      	subs	r2, r3, #1
 8016bd2:	4193      	sbcs	r3, r2
 8016bd4:	b2db      	uxtb	r3, r3
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d001      	beq.n	8016bde <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016bda:	2301      	movs	r3, #1
 8016bdc:	e052      	b.n	8016c84 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d104      	bne.n	8016bee <HAL_TIM_PWM_Start+0x7a>
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	223a      	movs	r2, #58	@ 0x3a
 8016be8:	2102      	movs	r1, #2
 8016bea:	5499      	strb	r1, [r3, r2]
 8016bec:	e013      	b.n	8016c16 <HAL_TIM_PWM_Start+0xa2>
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	2b04      	cmp	r3, #4
 8016bf2:	d104      	bne.n	8016bfe <HAL_TIM_PWM_Start+0x8a>
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	223b      	movs	r2, #59	@ 0x3b
 8016bf8:	2102      	movs	r1, #2
 8016bfa:	5499      	strb	r1, [r3, r2]
 8016bfc:	e00b      	b.n	8016c16 <HAL_TIM_PWM_Start+0xa2>
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	2b08      	cmp	r3, #8
 8016c02:	d104      	bne.n	8016c0e <HAL_TIM_PWM_Start+0x9a>
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	223c      	movs	r2, #60	@ 0x3c
 8016c08:	2102      	movs	r1, #2
 8016c0a:	5499      	strb	r1, [r3, r2]
 8016c0c:	e003      	b.n	8016c16 <HAL_TIM_PWM_Start+0xa2>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	223d      	movs	r2, #61	@ 0x3d
 8016c12:	2102      	movs	r1, #2
 8016c14:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	6839      	ldr	r1, [r7, #0]
 8016c1c:	2201      	movs	r2, #1
 8016c1e:	0018      	movs	r0, r3
 8016c20:	f000 fa62 	bl	80170e8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	2380      	movs	r3, #128	@ 0x80
 8016c2a:	05db      	lsls	r3, r3, #23
 8016c2c:	429a      	cmp	r2, r3
 8016c2e:	d00e      	beq.n	8016c4e <HAL_TIM_PWM_Start+0xda>
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	4a15      	ldr	r2, [pc, #84]	@ (8016c8c <HAL_TIM_PWM_Start+0x118>)
 8016c36:	4293      	cmp	r3, r2
 8016c38:	d009      	beq.n	8016c4e <HAL_TIM_PWM_Start+0xda>
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4a14      	ldr	r2, [pc, #80]	@ (8016c90 <HAL_TIM_PWM_Start+0x11c>)
 8016c40:	4293      	cmp	r3, r2
 8016c42:	d004      	beq.n	8016c4e <HAL_TIM_PWM_Start+0xda>
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	4a12      	ldr	r2, [pc, #72]	@ (8016c94 <HAL_TIM_PWM_Start+0x120>)
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d111      	bne.n	8016c72 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	2207      	movs	r2, #7
 8016c56:	4013      	ands	r3, r2
 8016c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	2b06      	cmp	r3, #6
 8016c5e:	d010      	beq.n	8016c82 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	2101      	movs	r1, #1
 8016c6c:	430a      	orrs	r2, r1
 8016c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c70:	e007      	b.n	8016c82 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	2101      	movs	r1, #1
 8016c7e:	430a      	orrs	r2, r1
 8016c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016c82:	2300      	movs	r3, #0
}
 8016c84:	0018      	movs	r0, r3
 8016c86:	46bd      	mov	sp, r7
 8016c88:	b004      	add	sp, #16
 8016c8a:	bd80      	pop	{r7, pc}
 8016c8c:	40000400 	.word	0x40000400
 8016c90:	40010800 	.word	0x40010800
 8016c94:	40011400 	.word	0x40011400

08016c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b086      	sub	sp, #24
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016ca4:	2317      	movs	r3, #23
 8016ca6:	18fb      	adds	r3, r7, r3
 8016ca8:	2200      	movs	r2, #0
 8016caa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2238      	movs	r2, #56	@ 0x38
 8016cb0:	5c9b      	ldrb	r3, [r3, r2]
 8016cb2:	2b01      	cmp	r3, #1
 8016cb4:	d101      	bne.n	8016cba <HAL_TIM_PWM_ConfigChannel+0x22>
 8016cb6:	2302      	movs	r3, #2
 8016cb8:	e0ad      	b.n	8016e16 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	2238      	movs	r2, #56	@ 0x38
 8016cbe:	2101      	movs	r1, #1
 8016cc0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2b0c      	cmp	r3, #12
 8016cc6:	d100      	bne.n	8016cca <HAL_TIM_PWM_ConfigChannel+0x32>
 8016cc8:	e076      	b.n	8016db8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2b0c      	cmp	r3, #12
 8016cce:	d900      	bls.n	8016cd2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016cd0:	e095      	b.n	8016dfe <HAL_TIM_PWM_ConfigChannel+0x166>
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2b08      	cmp	r3, #8
 8016cd6:	d04e      	beq.n	8016d76 <HAL_TIM_PWM_ConfigChannel+0xde>
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b08      	cmp	r3, #8
 8016cdc:	d900      	bls.n	8016ce0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016cde:	e08e      	b.n	8016dfe <HAL_TIM_PWM_ConfigChannel+0x166>
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d003      	beq.n	8016cee <HAL_TIM_PWM_ConfigChannel+0x56>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2b04      	cmp	r3, #4
 8016cea:	d021      	beq.n	8016d30 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016cec:	e087      	b.n	8016dfe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	68ba      	ldr	r2, [r7, #8]
 8016cf4:	0011      	movs	r1, r2
 8016cf6:	0018      	movs	r0, r3
 8016cf8:	f000 f8f2 	bl	8016ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	699a      	ldr	r2, [r3, #24]
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	2108      	movs	r1, #8
 8016d08:	430a      	orrs	r2, r1
 8016d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	699a      	ldr	r2, [r3, #24]
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	2104      	movs	r1, #4
 8016d18:	438a      	bics	r2, r1
 8016d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	6999      	ldr	r1, [r3, #24]
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	68da      	ldr	r2, [r3, #12]
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	430a      	orrs	r2, r1
 8016d2c:	619a      	str	r2, [r3, #24]
      break;
 8016d2e:	e06b      	b.n	8016e08 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	68ba      	ldr	r2, [r7, #8]
 8016d36:	0011      	movs	r1, r2
 8016d38:	0018      	movs	r0, r3
 8016d3a:	f000 f90d 	bl	8016f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	699a      	ldr	r2, [r3, #24]
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2180      	movs	r1, #128	@ 0x80
 8016d4a:	0109      	lsls	r1, r1, #4
 8016d4c:	430a      	orrs	r2, r1
 8016d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	699a      	ldr	r2, [r3, #24]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	4931      	ldr	r1, [pc, #196]	@ (8016e20 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016d5c:	400a      	ands	r2, r1
 8016d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	6999      	ldr	r1, [r3, #24]
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	68db      	ldr	r3, [r3, #12]
 8016d6a:	021a      	lsls	r2, r3, #8
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	430a      	orrs	r2, r1
 8016d72:	619a      	str	r2, [r3, #24]
      break;
 8016d74:	e048      	b.n	8016e08 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	68ba      	ldr	r2, [r7, #8]
 8016d7c:	0011      	movs	r1, r2
 8016d7e:	0018      	movs	r0, r3
 8016d80:	f000 f92c 	bl	8016fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	69da      	ldr	r2, [r3, #28]
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	2108      	movs	r1, #8
 8016d90:	430a      	orrs	r2, r1
 8016d92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	69da      	ldr	r2, [r3, #28]
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2104      	movs	r1, #4
 8016da0:	438a      	bics	r2, r1
 8016da2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	69d9      	ldr	r1, [r3, #28]
 8016daa:	68bb      	ldr	r3, [r7, #8]
 8016dac:	68da      	ldr	r2, [r3, #12]
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	430a      	orrs	r2, r1
 8016db4:	61da      	str	r2, [r3, #28]
      break;
 8016db6:	e027      	b.n	8016e08 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	68ba      	ldr	r2, [r7, #8]
 8016dbe:	0011      	movs	r1, r2
 8016dc0:	0018      	movs	r0, r3
 8016dc2:	f000 f94b 	bl	801705c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	69da      	ldr	r2, [r3, #28]
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	2180      	movs	r1, #128	@ 0x80
 8016dd2:	0109      	lsls	r1, r1, #4
 8016dd4:	430a      	orrs	r2, r1
 8016dd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	69da      	ldr	r2, [r3, #28]
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	490f      	ldr	r1, [pc, #60]	@ (8016e20 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016de4:	400a      	ands	r2, r1
 8016de6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	69d9      	ldr	r1, [r3, #28]
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	021a      	lsls	r2, r3, #8
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	430a      	orrs	r2, r1
 8016dfa:	61da      	str	r2, [r3, #28]
      break;
 8016dfc:	e004      	b.n	8016e08 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016dfe:	2317      	movs	r3, #23
 8016e00:	18fb      	adds	r3, r7, r3
 8016e02:	2201      	movs	r2, #1
 8016e04:	701a      	strb	r2, [r3, #0]
      break;
 8016e06:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2238      	movs	r2, #56	@ 0x38
 8016e0c:	2100      	movs	r1, #0
 8016e0e:	5499      	strb	r1, [r3, r2]

  return status;
 8016e10:	2317      	movs	r3, #23
 8016e12:	18fb      	adds	r3, r7, r3
 8016e14:	781b      	ldrb	r3, [r3, #0]
}
 8016e16:	0018      	movs	r0, r3
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	b006      	add	sp, #24
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	46c0      	nop			@ (mov r8, r8)
 8016e20:	fffffbff 	.word	0xfffffbff

08016e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b084      	sub	sp, #16
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	2380      	movs	r3, #128	@ 0x80
 8016e38:	05db      	lsls	r3, r3, #23
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d00b      	beq.n	8016e56 <TIM_Base_SetConfig+0x32>
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	4a23      	ldr	r2, [pc, #140]	@ (8016ed0 <TIM_Base_SetConfig+0xac>)
 8016e42:	4293      	cmp	r3, r2
 8016e44:	d007      	beq.n	8016e56 <TIM_Base_SetConfig+0x32>
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	4a22      	ldr	r2, [pc, #136]	@ (8016ed4 <TIM_Base_SetConfig+0xb0>)
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d003      	beq.n	8016e56 <TIM_Base_SetConfig+0x32>
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	4a21      	ldr	r2, [pc, #132]	@ (8016ed8 <TIM_Base_SetConfig+0xb4>)
 8016e52:	4293      	cmp	r3, r2
 8016e54:	d108      	bne.n	8016e68 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2270      	movs	r2, #112	@ 0x70
 8016e5a:	4393      	bics	r3, r2
 8016e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	685b      	ldr	r3, [r3, #4]
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	4313      	orrs	r3, r2
 8016e66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016e68:	687a      	ldr	r2, [r7, #4]
 8016e6a:	2380      	movs	r3, #128	@ 0x80
 8016e6c:	05db      	lsls	r3, r3, #23
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d00b      	beq.n	8016e8a <TIM_Base_SetConfig+0x66>
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	4a16      	ldr	r2, [pc, #88]	@ (8016ed0 <TIM_Base_SetConfig+0xac>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d007      	beq.n	8016e8a <TIM_Base_SetConfig+0x66>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	4a15      	ldr	r2, [pc, #84]	@ (8016ed4 <TIM_Base_SetConfig+0xb0>)
 8016e7e:	4293      	cmp	r3, r2
 8016e80:	d003      	beq.n	8016e8a <TIM_Base_SetConfig+0x66>
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	4a14      	ldr	r2, [pc, #80]	@ (8016ed8 <TIM_Base_SetConfig+0xb4>)
 8016e86:	4293      	cmp	r3, r2
 8016e88:	d108      	bne.n	8016e9c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	4a13      	ldr	r2, [pc, #76]	@ (8016edc <TIM_Base_SetConfig+0xb8>)
 8016e8e:	4013      	ands	r3, r2
 8016e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016e92:	683b      	ldr	r3, [r7, #0]
 8016e94:	68db      	ldr	r3, [r3, #12]
 8016e96:	68fa      	ldr	r2, [r7, #12]
 8016e98:	4313      	orrs	r3, r2
 8016e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	2280      	movs	r2, #128	@ 0x80
 8016ea0:	4393      	bics	r3, r2
 8016ea2:	001a      	movs	r2, r3
 8016ea4:	683b      	ldr	r3, [r7, #0]
 8016ea6:	691b      	ldr	r3, [r3, #16]
 8016ea8:	4313      	orrs	r3, r2
 8016eaa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	68fa      	ldr	r2, [r7, #12]
 8016eb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	689a      	ldr	r2, [r3, #8]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	681a      	ldr	r2, [r3, #0]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	615a      	str	r2, [r3, #20]
}
 8016ec8:	46c0      	nop			@ (mov r8, r8)
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	b004      	add	sp, #16
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	40000400 	.word	0x40000400
 8016ed4:	40010800 	.word	0x40010800
 8016ed8:	40011400 	.word	0x40011400
 8016edc:	fffffcff 	.word	0xfffffcff

08016ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b086      	sub	sp, #24
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	6a1b      	ldr	r3, [r3, #32]
 8016eee:	2201      	movs	r2, #1
 8016ef0:	4393      	bics	r3, r2
 8016ef2:	001a      	movs	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6a1b      	ldr	r3, [r3, #32]
 8016efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	699b      	ldr	r3, [r3, #24]
 8016f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2270      	movs	r2, #112	@ 0x70
 8016f0e:	4393      	bics	r3, r2
 8016f10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	2203      	movs	r2, #3
 8016f16:	4393      	bics	r3, r2
 8016f18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	68fa      	ldr	r2, [r7, #12]
 8016f20:	4313      	orrs	r3, r2
 8016f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	2202      	movs	r2, #2
 8016f28:	4393      	bics	r3, r2
 8016f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	689b      	ldr	r3, [r3, #8]
 8016f30:	697a      	ldr	r2, [r7, #20]
 8016f32:	4313      	orrs	r3, r2
 8016f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	693a      	ldr	r2, [r7, #16]
 8016f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	68fa      	ldr	r2, [r7, #12]
 8016f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	685a      	ldr	r2, [r3, #4]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	697a      	ldr	r2, [r7, #20]
 8016f4e:	621a      	str	r2, [r3, #32]
}
 8016f50:	46c0      	nop			@ (mov r8, r8)
 8016f52:	46bd      	mov	sp, r7
 8016f54:	b006      	add	sp, #24
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b086      	sub	sp, #24
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6a1b      	ldr	r3, [r3, #32]
 8016f66:	2210      	movs	r2, #16
 8016f68:	4393      	bics	r3, r2
 8016f6a:	001a      	movs	r2, r3
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6a1b      	ldr	r3, [r3, #32]
 8016f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	699b      	ldr	r3, [r3, #24]
 8016f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	4a13      	ldr	r2, [pc, #76]	@ (8016fd4 <TIM_OC2_SetConfig+0x7c>)
 8016f86:	4013      	ands	r3, r2
 8016f88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	4a12      	ldr	r2, [pc, #72]	@ (8016fd8 <TIM_OC2_SetConfig+0x80>)
 8016f8e:	4013      	ands	r3, r2
 8016f90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	021b      	lsls	r3, r3, #8
 8016f98:	68fa      	ldr	r2, [r7, #12]
 8016f9a:	4313      	orrs	r3, r2
 8016f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	2220      	movs	r2, #32
 8016fa2:	4393      	bics	r3, r2
 8016fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	689b      	ldr	r3, [r3, #8]
 8016faa:	011b      	lsls	r3, r3, #4
 8016fac:	697a      	ldr	r2, [r7, #20]
 8016fae:	4313      	orrs	r3, r2
 8016fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	693a      	ldr	r2, [r7, #16]
 8016fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	68fa      	ldr	r2, [r7, #12]
 8016fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	685a      	ldr	r2, [r3, #4]
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	697a      	ldr	r2, [r7, #20]
 8016fca:	621a      	str	r2, [r3, #32]
}
 8016fcc:	46c0      	nop			@ (mov r8, r8)
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	b006      	add	sp, #24
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	ffff8fff 	.word	0xffff8fff
 8016fd8:	fffffcff 	.word	0xfffffcff

08016fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b086      	sub	sp, #24
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6a1b      	ldr	r3, [r3, #32]
 8016fea:	4a1a      	ldr	r2, [pc, #104]	@ (8017054 <TIM_OC3_SetConfig+0x78>)
 8016fec:	401a      	ands	r2, r3
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6a1b      	ldr	r3, [r3, #32]
 8016ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	69db      	ldr	r3, [r3, #28]
 8017002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	2270      	movs	r2, #112	@ 0x70
 8017008:	4393      	bics	r3, r2
 801700a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	2203      	movs	r2, #3
 8017010:	4393      	bics	r3, r2
 8017012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	68fa      	ldr	r2, [r7, #12]
 801701a:	4313      	orrs	r3, r2
 801701c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	4a0d      	ldr	r2, [pc, #52]	@ (8017058 <TIM_OC3_SetConfig+0x7c>)
 8017022:	4013      	ands	r3, r2
 8017024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	689b      	ldr	r3, [r3, #8]
 801702a:	021b      	lsls	r3, r3, #8
 801702c:	697a      	ldr	r2, [r7, #20]
 801702e:	4313      	orrs	r3, r2
 8017030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	693a      	ldr	r2, [r7, #16]
 8017036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	68fa      	ldr	r2, [r7, #12]
 801703c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	685a      	ldr	r2, [r3, #4]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	697a      	ldr	r2, [r7, #20]
 801704a:	621a      	str	r2, [r3, #32]
}
 801704c:	46c0      	nop			@ (mov r8, r8)
 801704e:	46bd      	mov	sp, r7
 8017050:	b006      	add	sp, #24
 8017052:	bd80      	pop	{r7, pc}
 8017054:	fffffeff 	.word	0xfffffeff
 8017058:	fffffdff 	.word	0xfffffdff

0801705c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b086      	sub	sp, #24
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	6a1b      	ldr	r3, [r3, #32]
 801706a:	4a1b      	ldr	r2, [pc, #108]	@ (80170d8 <TIM_OC4_SetConfig+0x7c>)
 801706c:	401a      	ands	r2, r3
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	6a1b      	ldr	r3, [r3, #32]
 8017076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	69db      	ldr	r3, [r3, #28]
 8017082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	4a15      	ldr	r2, [pc, #84]	@ (80170dc <TIM_OC4_SetConfig+0x80>)
 8017088:	4013      	ands	r3, r2
 801708a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	4a14      	ldr	r2, [pc, #80]	@ (80170e0 <TIM_OC4_SetConfig+0x84>)
 8017090:	4013      	ands	r3, r2
 8017092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	021b      	lsls	r3, r3, #8
 801709a:	68fa      	ldr	r2, [r7, #12]
 801709c:	4313      	orrs	r3, r2
 801709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	4a10      	ldr	r2, [pc, #64]	@ (80170e4 <TIM_OC4_SetConfig+0x88>)
 80170a4:	4013      	ands	r3, r2
 80170a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	689b      	ldr	r3, [r3, #8]
 80170ac:	031b      	lsls	r3, r3, #12
 80170ae:	697a      	ldr	r2, [r7, #20]
 80170b0:	4313      	orrs	r3, r2
 80170b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	693a      	ldr	r2, [r7, #16]
 80170b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	685a      	ldr	r2, [r3, #4]
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	697a      	ldr	r2, [r7, #20]
 80170cc:	621a      	str	r2, [r3, #32]
}
 80170ce:	46c0      	nop			@ (mov r8, r8)
 80170d0:	46bd      	mov	sp, r7
 80170d2:	b006      	add	sp, #24
 80170d4:	bd80      	pop	{r7, pc}
 80170d6:	46c0      	nop			@ (mov r8, r8)
 80170d8:	ffffefff 	.word	0xffffefff
 80170dc:	ffff8fff 	.word	0xffff8fff
 80170e0:	fffffcff 	.word	0xfffffcff
 80170e4:	ffffdfff 	.word	0xffffdfff

080170e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b086      	sub	sp, #24
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	60f8      	str	r0, [r7, #12]
 80170f0:	60b9      	str	r1, [r7, #8]
 80170f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	221f      	movs	r2, #31
 80170f8:	4013      	ands	r3, r2
 80170fa:	2201      	movs	r2, #1
 80170fc:	409a      	lsls	r2, r3
 80170fe:	0013      	movs	r3, r2
 8017100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	6a1b      	ldr	r3, [r3, #32]
 8017106:	697a      	ldr	r2, [r7, #20]
 8017108:	43d2      	mvns	r2, r2
 801710a:	401a      	ands	r2, r3
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	6a1a      	ldr	r2, [r3, #32]
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	211f      	movs	r1, #31
 8017118:	400b      	ands	r3, r1
 801711a:	6879      	ldr	r1, [r7, #4]
 801711c:	4099      	lsls	r1, r3
 801711e:	000b      	movs	r3, r1
 8017120:	431a      	orrs	r2, r3
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	621a      	str	r2, [r3, #32]
}
 8017126:	46c0      	nop			@ (mov r8, r8)
 8017128:	46bd      	mov	sp, r7
 801712a:	b006      	add	sp, #24
 801712c:	bd80      	pop	{r7, pc}
	...

08017130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	2238      	movs	r2, #56	@ 0x38
 801713e:	5c9b      	ldrb	r3, [r3, r2]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d101      	bne.n	8017148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017144:	2302      	movs	r3, #2
 8017146:	e047      	b.n	80171d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2238      	movs	r2, #56	@ 0x38
 801714c:	2101      	movs	r1, #1
 801714e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2239      	movs	r2, #57	@ 0x39
 8017154:	2102      	movs	r1, #2
 8017156:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	689b      	ldr	r3, [r3, #8]
 8017166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	2270      	movs	r2, #112	@ 0x70
 801716c:	4393      	bics	r3, r2
 801716e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	4313      	orrs	r3, r2
 8017178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	68fa      	ldr	r2, [r7, #12]
 8017180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681a      	ldr	r2, [r3, #0]
 8017186:	2380      	movs	r3, #128	@ 0x80
 8017188:	05db      	lsls	r3, r3, #23
 801718a:	429a      	cmp	r2, r3
 801718c:	d00e      	beq.n	80171ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	4a13      	ldr	r2, [pc, #76]	@ (80171e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8017194:	4293      	cmp	r3, r2
 8017196:	d009      	beq.n	80171ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	4a11      	ldr	r2, [pc, #68]	@ (80171e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d004      	beq.n	80171ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	4a10      	ldr	r2, [pc, #64]	@ (80171e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80171a8:	4293      	cmp	r3, r2
 80171aa:	d10c      	bne.n	80171c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	2280      	movs	r2, #128	@ 0x80
 80171b0:	4393      	bics	r3, r2
 80171b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	68ba      	ldr	r2, [r7, #8]
 80171ba:	4313      	orrs	r3, r2
 80171bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	68ba      	ldr	r2, [r7, #8]
 80171c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2239      	movs	r2, #57	@ 0x39
 80171ca:	2101      	movs	r1, #1
 80171cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2238      	movs	r2, #56	@ 0x38
 80171d2:	2100      	movs	r1, #0
 80171d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80171d6:	2300      	movs	r3, #0
}
 80171d8:	0018      	movs	r0, r3
 80171da:	46bd      	mov	sp, r7
 80171dc:	b004      	add	sp, #16
 80171de:	bd80      	pop	{r7, pc}
 80171e0:	40000400 	.word	0x40000400
 80171e4:	40010800 	.word	0x40010800
 80171e8:	40011400 	.word	0x40011400

080171ec <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2238      	movs	r2, #56	@ 0x38
 80171fa:	5c9b      	ldrb	r3, [r3, r2]
 80171fc:	2b01      	cmp	r3, #1
 80171fe:	d101      	bne.n	8017204 <HAL_TIMEx_RemapConfig+0x18>
 8017200:	2302      	movs	r3, #2
 8017202:	e00c      	b.n	801721e <HAL_TIMEx_RemapConfig+0x32>
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2238      	movs	r2, #56	@ 0x38
 8017208:	2101      	movs	r1, #1
 801720a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	683a      	ldr	r2, [r7, #0]
 8017212:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2238      	movs	r2, #56	@ 0x38
 8017218:	2100      	movs	r1, #0
 801721a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801721c:	2300      	movs	r3, #0
}
 801721e:	0018      	movs	r0, r3
 8017220:	46bd      	mov	sp, r7
 8017222:	b002      	add	sp, #8
 8017224:	bd80      	pop	{r7, pc}
	...

08017228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b082      	sub	sp, #8
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d101      	bne.n	801723a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017236:	2301      	movs	r3, #1
 8017238:	e053      	b.n	80172e2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801723e:	2b00      	cmp	r3, #0
 8017240:	d116      	bne.n	8017270 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	2278      	movs	r2, #120	@ 0x78
 8017246:	2100      	movs	r1, #0
 8017248:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	0018      	movs	r0, r3
 801724e:	f000 fd65 	bl	8017d1c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	22b0      	movs	r2, #176	@ 0xb0
 8017256:	589b      	ldr	r3, [r3, r2]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d103      	bne.n	8017264 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	21b0      	movs	r1, #176	@ 0xb0
 8017260:	4a22      	ldr	r2, [pc, #136]	@ (80172ec <HAL_UART_Init+0xc4>)
 8017262:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	22b0      	movs	r2, #176	@ 0xb0
 8017268:	589b      	ldr	r3, [r3, r2]
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	0010      	movs	r0, r2
 801726e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2224      	movs	r2, #36	@ 0x24
 8017274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2101      	movs	r1, #1
 8017282:	438a      	bics	r2, r1
 8017284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	0018      	movs	r0, r3
 801728a:	f000 fd8b 	bl	8017da4 <UART_SetConfig>
 801728e:	0003      	movs	r3, r0
 8017290:	2b01      	cmp	r3, #1
 8017292:	d101      	bne.n	8017298 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017294:	2301      	movs	r3, #1
 8017296:	e024      	b.n	80172e2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801729c:	2b00      	cmp	r3, #0
 801729e:	d003      	beq.n	80172a8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	0018      	movs	r0, r3
 80172a4:	f001 f81c 	bl	80182e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	685a      	ldr	r2, [r3, #4]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	490f      	ldr	r1, [pc, #60]	@ (80172f0 <HAL_UART_Init+0xc8>)
 80172b4:	400a      	ands	r2, r1
 80172b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	689a      	ldr	r2, [r3, #8]
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	212a      	movs	r1, #42	@ 0x2a
 80172c4:	438a      	bics	r2, r1
 80172c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	681a      	ldr	r2, [r3, #0]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	2101      	movs	r1, #1
 80172d4:	430a      	orrs	r2, r1
 80172d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	0018      	movs	r0, r3
 80172dc:	f001 f8b4 	bl	8018448 <UART_CheckIdleState>
 80172e0:	0003      	movs	r3, r0
}
 80172e2:	0018      	movs	r0, r3
 80172e4:	46bd      	mov	sp, r7
 80172e6:	b002      	add	sp, #8
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	46c0      	nop			@ (mov r8, r8)
 80172ec:	0800e301 	.word	0x0800e301
 80172f0:	ffffb7ff 	.word	0xffffb7ff

080172f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b08a      	sub	sp, #40	@ 0x28
 80172f8:	af02      	add	r7, sp, #8
 80172fa:	60f8      	str	r0, [r7, #12]
 80172fc:	60b9      	str	r1, [r7, #8]
 80172fe:	603b      	str	r3, [r7, #0]
 8017300:	1dbb      	adds	r3, r7, #6
 8017302:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017308:	2b20      	cmp	r3, #32
 801730a:	d000      	beq.n	801730e <HAL_UART_Transmit+0x1a>
 801730c:	e08c      	b.n	8017428 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d003      	beq.n	801731c <HAL_UART_Transmit+0x28>
 8017314:	1dbb      	adds	r3, r7, #6
 8017316:	881b      	ldrh	r3, [r3, #0]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d101      	bne.n	8017320 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801731c:	2301      	movs	r3, #1
 801731e:	e084      	b.n	801742a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	689a      	ldr	r2, [r3, #8]
 8017324:	2380      	movs	r3, #128	@ 0x80
 8017326:	015b      	lsls	r3, r3, #5
 8017328:	429a      	cmp	r2, r3
 801732a:	d109      	bne.n	8017340 <HAL_UART_Transmit+0x4c>
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d105      	bne.n	8017340 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	2201      	movs	r2, #1
 8017338:	4013      	ands	r3, r2
 801733a:	d001      	beq.n	8017340 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801733c:	2301      	movs	r3, #1
 801733e:	e074      	b.n	801742a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	2284      	movs	r2, #132	@ 0x84
 8017344:	2100      	movs	r1, #0
 8017346:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2221      	movs	r2, #33	@ 0x21
 801734c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801734e:	f7f7 fda5 	bl	800ee9c <HAL_GetTick>
 8017352:	0003      	movs	r3, r0
 8017354:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	1dba      	adds	r2, r7, #6
 801735a:	2150      	movs	r1, #80	@ 0x50
 801735c:	8812      	ldrh	r2, [r2, #0]
 801735e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	1dba      	adds	r2, r7, #6
 8017364:	2152      	movs	r1, #82	@ 0x52
 8017366:	8812      	ldrh	r2, [r2, #0]
 8017368:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	689a      	ldr	r2, [r3, #8]
 801736e:	2380      	movs	r3, #128	@ 0x80
 8017370:	015b      	lsls	r3, r3, #5
 8017372:	429a      	cmp	r2, r3
 8017374:	d108      	bne.n	8017388 <HAL_UART_Transmit+0x94>
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	691b      	ldr	r3, [r3, #16]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d104      	bne.n	8017388 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801737e:	2300      	movs	r3, #0
 8017380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	61bb      	str	r3, [r7, #24]
 8017386:	e003      	b.n	8017390 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801738c:	2300      	movs	r3, #0
 801738e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017390:	e02f      	b.n	80173f2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017392:	697a      	ldr	r2, [r7, #20]
 8017394:	68f8      	ldr	r0, [r7, #12]
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	9300      	str	r3, [sp, #0]
 801739a:	0013      	movs	r3, r2
 801739c:	2200      	movs	r2, #0
 801739e:	2180      	movs	r1, #128	@ 0x80
 80173a0:	f001 f8fa 	bl	8018598 <UART_WaitOnFlagUntilTimeout>
 80173a4:	1e03      	subs	r3, r0, #0
 80173a6:	d004      	beq.n	80173b2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2220      	movs	r2, #32
 80173ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80173ae:	2303      	movs	r3, #3
 80173b0:	e03b      	b.n	801742a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80173b2:	69fb      	ldr	r3, [r7, #28]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d10b      	bne.n	80173d0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80173b8:	69bb      	ldr	r3, [r7, #24]
 80173ba:	881b      	ldrh	r3, [r3, #0]
 80173bc:	001a      	movs	r2, r3
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	05d2      	lsls	r2, r2, #23
 80173c4:	0dd2      	lsrs	r2, r2, #23
 80173c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80173c8:	69bb      	ldr	r3, [r7, #24]
 80173ca:	3302      	adds	r3, #2
 80173cc:	61bb      	str	r3, [r7, #24]
 80173ce:	e007      	b.n	80173e0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80173d0:	69fb      	ldr	r3, [r7, #28]
 80173d2:	781a      	ldrb	r2, [r3, #0]
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80173da:	69fb      	ldr	r3, [r7, #28]
 80173dc:	3301      	adds	r3, #1
 80173de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	2252      	movs	r2, #82	@ 0x52
 80173e4:	5a9b      	ldrh	r3, [r3, r2]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	3b01      	subs	r3, #1
 80173ea:	b299      	uxth	r1, r3
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2252      	movs	r2, #82	@ 0x52
 80173f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	2252      	movs	r2, #82	@ 0x52
 80173f6:	5a9b      	ldrh	r3, [r3, r2]
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d1c9      	bne.n	8017392 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80173fe:	697a      	ldr	r2, [r7, #20]
 8017400:	68f8      	ldr	r0, [r7, #12]
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	9300      	str	r3, [sp, #0]
 8017406:	0013      	movs	r3, r2
 8017408:	2200      	movs	r2, #0
 801740a:	2140      	movs	r1, #64	@ 0x40
 801740c:	f001 f8c4 	bl	8018598 <UART_WaitOnFlagUntilTimeout>
 8017410:	1e03      	subs	r3, r0, #0
 8017412:	d004      	beq.n	801741e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	2220      	movs	r2, #32
 8017418:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801741a:	2303      	movs	r3, #3
 801741c:	e005      	b.n	801742a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	2220      	movs	r2, #32
 8017422:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017424:	2300      	movs	r3, #0
 8017426:	e000      	b.n	801742a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017428:	2302      	movs	r3, #2
  }
}
 801742a:	0018      	movs	r0, r3
 801742c:	46bd      	mov	sp, r7
 801742e:	b008      	add	sp, #32
 8017430:	bd80      	pop	{r7, pc}
	...

08017434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b088      	sub	sp, #32
 8017438:	af00      	add	r7, sp, #0
 801743a:	60f8      	str	r0, [r7, #12]
 801743c:	60b9      	str	r1, [r7, #8]
 801743e:	1dbb      	adds	r3, r7, #6
 8017440:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	2280      	movs	r2, #128	@ 0x80
 8017446:	589b      	ldr	r3, [r3, r2]
 8017448:	2b20      	cmp	r3, #32
 801744a:	d14a      	bne.n	80174e2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d003      	beq.n	801745a <HAL_UART_Receive_IT+0x26>
 8017452:	1dbb      	adds	r3, r7, #6
 8017454:	881b      	ldrh	r3, [r3, #0]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d101      	bne.n	801745e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801745a:	2301      	movs	r3, #1
 801745c:	e042      	b.n	80174e4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	689a      	ldr	r2, [r3, #8]
 8017462:	2380      	movs	r3, #128	@ 0x80
 8017464:	015b      	lsls	r3, r3, #5
 8017466:	429a      	cmp	r2, r3
 8017468:	d109      	bne.n	801747e <HAL_UART_Receive_IT+0x4a>
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	691b      	ldr	r3, [r3, #16]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d105      	bne.n	801747e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017472:	68bb      	ldr	r3, [r7, #8]
 8017474:	2201      	movs	r2, #1
 8017476:	4013      	ands	r3, r2
 8017478:	d001      	beq.n	801747e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801747a:	2301      	movs	r3, #1
 801747c:	e032      	b.n	80174e4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2200      	movs	r2, #0
 8017482:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4a18      	ldr	r2, [pc, #96]	@ (80174ec <HAL_UART_Receive_IT+0xb8>)
 801748a:	4293      	cmp	r3, r2
 801748c:	d020      	beq.n	80174d0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	685a      	ldr	r2, [r3, #4]
 8017494:	2380      	movs	r3, #128	@ 0x80
 8017496:	041b      	lsls	r3, r3, #16
 8017498:	4013      	ands	r3, r2
 801749a:	d019      	beq.n	80174d0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801749c:	f3ef 8310 	mrs	r3, PRIMASK
 80174a0:	613b      	str	r3, [r7, #16]
  return(result);
 80174a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174a4:	61fb      	str	r3, [r7, #28]
 80174a6:	2301      	movs	r3, #1
 80174a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	f383 8810 	msr	PRIMASK, r3
}
 80174b0:	46c0      	nop			@ (mov r8, r8)
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	681a      	ldr	r2, [r3, #0]
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	2180      	movs	r1, #128	@ 0x80
 80174be:	04c9      	lsls	r1, r1, #19
 80174c0:	430a      	orrs	r2, r1
 80174c2:	601a      	str	r2, [r3, #0]
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174c8:	69bb      	ldr	r3, [r7, #24]
 80174ca:	f383 8810 	msr	PRIMASK, r3
}
 80174ce:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80174d0:	1dbb      	adds	r3, r7, #6
 80174d2:	881a      	ldrh	r2, [r3, #0]
 80174d4:	68b9      	ldr	r1, [r7, #8]
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	0018      	movs	r0, r3
 80174da:	f001 f8c7 	bl	801866c <UART_Start_Receive_IT>
 80174de:	0003      	movs	r3, r0
 80174e0:	e000      	b.n	80174e4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80174e2:	2302      	movs	r3, #2
  }
}
 80174e4:	0018      	movs	r0, r3
 80174e6:	46bd      	mov	sp, r7
 80174e8:	b008      	add	sp, #32
 80174ea:	bd80      	pop	{r7, pc}
 80174ec:	40004800 	.word	0x40004800

080174f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b088      	sub	sp, #32
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	60f8      	str	r0, [r7, #12]
 80174f8:	60b9      	str	r1, [r7, #8]
 80174fa:	1dbb      	adds	r3, r7, #6
 80174fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017502:	2b20      	cmp	r3, #32
 8017504:	d000      	beq.n	8017508 <HAL_UART_Transmit_DMA+0x18>
 8017506:	e077      	b.n	80175f8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d003      	beq.n	8017516 <HAL_UART_Transmit_DMA+0x26>
 801750e:	1dbb      	adds	r3, r7, #6
 8017510:	881b      	ldrh	r3, [r3, #0]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d101      	bne.n	801751a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8017516:	2301      	movs	r3, #1
 8017518:	e06f      	b.n	80175fa <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	689a      	ldr	r2, [r3, #8]
 801751e:	2380      	movs	r3, #128	@ 0x80
 8017520:	015b      	lsls	r3, r3, #5
 8017522:	429a      	cmp	r2, r3
 8017524:	d109      	bne.n	801753a <HAL_UART_Transmit_DMA+0x4a>
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	691b      	ldr	r3, [r3, #16]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d105      	bne.n	801753a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	2201      	movs	r2, #1
 8017532:	4013      	ands	r3, r2
 8017534:	d001      	beq.n	801753a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017536:	2301      	movs	r3, #1
 8017538:	e05f      	b.n	80175fa <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	68ba      	ldr	r2, [r7, #8]
 801753e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	1dba      	adds	r2, r7, #6
 8017544:	2150      	movs	r1, #80	@ 0x50
 8017546:	8812      	ldrh	r2, [r2, #0]
 8017548:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	1dba      	adds	r2, r7, #6
 801754e:	2152      	movs	r1, #82	@ 0x52
 8017550:	8812      	ldrh	r2, [r2, #0]
 8017552:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	2284      	movs	r2, #132	@ 0x84
 8017558:	2100      	movs	r1, #0
 801755a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	2221      	movs	r2, #33	@ 0x21
 8017560:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017566:	2b00      	cmp	r3, #0
 8017568:	d027      	beq.n	80175ba <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801756e:	4a25      	ldr	r2, [pc, #148]	@ (8017604 <HAL_UART_Transmit_DMA+0x114>)
 8017570:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017576:	4a24      	ldr	r2, [pc, #144]	@ (8017608 <HAL_UART_Transmit_DMA+0x118>)
 8017578:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801757e:	4a23      	ldr	r2, [pc, #140]	@ (801760c <HAL_UART_Transmit_DMA+0x11c>)
 8017580:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017586:	2200      	movs	r2, #0
 8017588:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017592:	0019      	movs	r1, r3
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	3328      	adds	r3, #40	@ 0x28
 801759a:	001a      	movs	r2, r3
 801759c:	1dbb      	adds	r3, r7, #6
 801759e:	881b      	ldrh	r3, [r3, #0]
 80175a0:	f7f8 f9ce 	bl	800f940 <HAL_DMA_Start_IT>
 80175a4:	1e03      	subs	r3, r0, #0
 80175a6:	d008      	beq.n	80175ba <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	2284      	movs	r2, #132	@ 0x84
 80175ac:	2110      	movs	r1, #16
 80175ae:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	2220      	movs	r2, #32
 80175b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80175b6:	2301      	movs	r3, #1
 80175b8:	e01f      	b.n	80175fa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	2240      	movs	r2, #64	@ 0x40
 80175c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175c2:	f3ef 8310 	mrs	r3, PRIMASK
 80175c6:	613b      	str	r3, [r7, #16]
  return(result);
 80175c8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80175ca:	61fb      	str	r3, [r7, #28]
 80175cc:	2301      	movs	r3, #1
 80175ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	f383 8810 	msr	PRIMASK, r3
}
 80175d6:	46c0      	nop			@ (mov r8, r8)
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	689a      	ldr	r2, [r3, #8]
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2180      	movs	r1, #128	@ 0x80
 80175e4:	430a      	orrs	r2, r1
 80175e6:	609a      	str	r2, [r3, #8]
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	f383 8810 	msr	PRIMASK, r3
}
 80175f2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80175f4:	2300      	movs	r3, #0
 80175f6:	e000      	b.n	80175fa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80175f8:	2302      	movs	r3, #2
  }
}
 80175fa:	0018      	movs	r0, r3
 80175fc:	46bd      	mov	sp, r7
 80175fe:	b008      	add	sp, #32
 8017600:	bd80      	pop	{r7, pc}
 8017602:	46c0      	nop			@ (mov r8, r8)
 8017604:	08018a51 	.word	0x08018a51
 8017608:	08018aed 	.word	0x08018aed
 801760c:	08018c8d 	.word	0x08018c8d

08017610 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b088      	sub	sp, #32
 8017614:	af00      	add	r7, sp, #0
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	1dbb      	adds	r3, r7, #6
 801761c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	2280      	movs	r2, #128	@ 0x80
 8017622:	589b      	ldr	r3, [r3, r2]
 8017624:	2b20      	cmp	r3, #32
 8017626:	d14a      	bne.n	80176be <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d003      	beq.n	8017636 <HAL_UART_Receive_DMA+0x26>
 801762e:	1dbb      	adds	r3, r7, #6
 8017630:	881b      	ldrh	r3, [r3, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d101      	bne.n	801763a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8017636:	2301      	movs	r3, #1
 8017638:	e042      	b.n	80176c0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	689a      	ldr	r2, [r3, #8]
 801763e:	2380      	movs	r3, #128	@ 0x80
 8017640:	015b      	lsls	r3, r3, #5
 8017642:	429a      	cmp	r2, r3
 8017644:	d109      	bne.n	801765a <HAL_UART_Receive_DMA+0x4a>
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	691b      	ldr	r3, [r3, #16]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d105      	bne.n	801765a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	2201      	movs	r2, #1
 8017652:	4013      	ands	r3, r2
 8017654:	d001      	beq.n	801765a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017656:	2301      	movs	r3, #1
 8017658:	e032      	b.n	80176c0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	2200      	movs	r2, #0
 801765e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	4a18      	ldr	r2, [pc, #96]	@ (80176c8 <HAL_UART_Receive_DMA+0xb8>)
 8017666:	4293      	cmp	r3, r2
 8017668:	d020      	beq.n	80176ac <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	685a      	ldr	r2, [r3, #4]
 8017670:	2380      	movs	r3, #128	@ 0x80
 8017672:	041b      	lsls	r3, r3, #16
 8017674:	4013      	ands	r3, r2
 8017676:	d019      	beq.n	80176ac <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017678:	f3ef 8310 	mrs	r3, PRIMASK
 801767c:	613b      	str	r3, [r7, #16]
  return(result);
 801767e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017680:	61fb      	str	r3, [r7, #28]
 8017682:	2301      	movs	r3, #1
 8017684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	f383 8810 	msr	PRIMASK, r3
}
 801768c:	46c0      	nop			@ (mov r8, r8)
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	681a      	ldr	r2, [r3, #0]
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2180      	movs	r1, #128	@ 0x80
 801769a:	04c9      	lsls	r1, r1, #19
 801769c:	430a      	orrs	r2, r1
 801769e:	601a      	str	r2, [r3, #0]
 80176a0:	69fb      	ldr	r3, [r7, #28]
 80176a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176a4:	69bb      	ldr	r3, [r7, #24]
 80176a6:	f383 8810 	msr	PRIMASK, r3
}
 80176aa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80176ac:	1dbb      	adds	r3, r7, #6
 80176ae:	881a      	ldrh	r2, [r3, #0]
 80176b0:	68b9      	ldr	r1, [r7, #8]
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	0018      	movs	r0, r3
 80176b6:	f001 f8a3 	bl	8018800 <UART_Start_Receive_DMA>
 80176ba:	0003      	movs	r3, r0
 80176bc:	e000      	b.n	80176c0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80176be:	2302      	movs	r3, #2
  }
}
 80176c0:	0018      	movs	r0, r3
 80176c2:	46bd      	mov	sp, r7
 80176c4:	b008      	add	sp, #32
 80176c6:	bd80      	pop	{r7, pc}
 80176c8:	40004800 	.word	0x40004800

080176cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80176cc:	b590      	push	{r4, r7, lr}
 80176ce:	b0ab      	sub	sp, #172	@ 0xac
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	69db      	ldr	r3, [r3, #28]
 80176da:	22a4      	movs	r2, #164	@ 0xa4
 80176dc:	18b9      	adds	r1, r7, r2
 80176de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	20a0      	movs	r0, #160	@ 0xa0
 80176e8:	1839      	adds	r1, r7, r0
 80176ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	219c      	movs	r1, #156	@ 0x9c
 80176f4:	1879      	adds	r1, r7, r1
 80176f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80176f8:	0011      	movs	r1, r2
 80176fa:	18bb      	adds	r3, r7, r2
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	4a9c      	ldr	r2, [pc, #624]	@ (8017970 <HAL_UART_IRQHandler+0x2a4>)
 8017700:	4013      	ands	r3, r2
 8017702:	2298      	movs	r2, #152	@ 0x98
 8017704:	18bc      	adds	r4, r7, r2
 8017706:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8017708:	18bb      	adds	r3, r7, r2
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d114      	bne.n	801773a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017710:	187b      	adds	r3, r7, r1
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	2220      	movs	r2, #32
 8017716:	4013      	ands	r3, r2
 8017718:	d00f      	beq.n	801773a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801771a:	183b      	adds	r3, r7, r0
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	2220      	movs	r2, #32
 8017720:	4013      	ands	r3, r2
 8017722:	d00a      	beq.n	801773a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017728:	2b00      	cmp	r3, #0
 801772a:	d100      	bne.n	801772e <HAL_UART_IRQHandler+0x62>
 801772c:	e2aa      	b.n	8017c84 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	0010      	movs	r0, r2
 8017736:	4798      	blx	r3
      }
      return;
 8017738:	e2a4      	b.n	8017c84 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801773a:	2398      	movs	r3, #152	@ 0x98
 801773c:	18fb      	adds	r3, r7, r3
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d100      	bne.n	8017746 <HAL_UART_IRQHandler+0x7a>
 8017744:	e11a      	b.n	801797c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8017746:	239c      	movs	r3, #156	@ 0x9c
 8017748:	18fb      	adds	r3, r7, r3
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	2201      	movs	r2, #1
 801774e:	4013      	ands	r3, r2
 8017750:	d106      	bne.n	8017760 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017752:	23a0      	movs	r3, #160	@ 0xa0
 8017754:	18fb      	adds	r3, r7, r3
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4a86      	ldr	r2, [pc, #536]	@ (8017974 <HAL_UART_IRQHandler+0x2a8>)
 801775a:	4013      	ands	r3, r2
 801775c:	d100      	bne.n	8017760 <HAL_UART_IRQHandler+0x94>
 801775e:	e10d      	b.n	801797c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017760:	23a4      	movs	r3, #164	@ 0xa4
 8017762:	18fb      	adds	r3, r7, r3
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2201      	movs	r2, #1
 8017768:	4013      	ands	r3, r2
 801776a:	d012      	beq.n	8017792 <HAL_UART_IRQHandler+0xc6>
 801776c:	23a0      	movs	r3, #160	@ 0xa0
 801776e:	18fb      	adds	r3, r7, r3
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	2380      	movs	r3, #128	@ 0x80
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	4013      	ands	r3, r2
 8017778:	d00b      	beq.n	8017792 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2201      	movs	r2, #1
 8017780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	2284      	movs	r2, #132	@ 0x84
 8017786:	589b      	ldr	r3, [r3, r2]
 8017788:	2201      	movs	r2, #1
 801778a:	431a      	orrs	r2, r3
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2184      	movs	r1, #132	@ 0x84
 8017790:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017792:	23a4      	movs	r3, #164	@ 0xa4
 8017794:	18fb      	adds	r3, r7, r3
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	2202      	movs	r2, #2
 801779a:	4013      	ands	r3, r2
 801779c:	d011      	beq.n	80177c2 <HAL_UART_IRQHandler+0xf6>
 801779e:	239c      	movs	r3, #156	@ 0x9c
 80177a0:	18fb      	adds	r3, r7, r3
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	2201      	movs	r2, #1
 80177a6:	4013      	ands	r3, r2
 80177a8:	d00b      	beq.n	80177c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	2202      	movs	r2, #2
 80177b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	2284      	movs	r2, #132	@ 0x84
 80177b6:	589b      	ldr	r3, [r3, r2]
 80177b8:	2204      	movs	r2, #4
 80177ba:	431a      	orrs	r2, r3
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2184      	movs	r1, #132	@ 0x84
 80177c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80177c2:	23a4      	movs	r3, #164	@ 0xa4
 80177c4:	18fb      	adds	r3, r7, r3
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2204      	movs	r2, #4
 80177ca:	4013      	ands	r3, r2
 80177cc:	d011      	beq.n	80177f2 <HAL_UART_IRQHandler+0x126>
 80177ce:	239c      	movs	r3, #156	@ 0x9c
 80177d0:	18fb      	adds	r3, r7, r3
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2201      	movs	r2, #1
 80177d6:	4013      	ands	r3, r2
 80177d8:	d00b      	beq.n	80177f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	2204      	movs	r2, #4
 80177e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	2284      	movs	r2, #132	@ 0x84
 80177e6:	589b      	ldr	r3, [r3, r2]
 80177e8:	2202      	movs	r2, #2
 80177ea:	431a      	orrs	r2, r3
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2184      	movs	r1, #132	@ 0x84
 80177f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80177f2:	23a4      	movs	r3, #164	@ 0xa4
 80177f4:	18fb      	adds	r3, r7, r3
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	2208      	movs	r2, #8
 80177fa:	4013      	ands	r3, r2
 80177fc:	d017      	beq.n	801782e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80177fe:	23a0      	movs	r3, #160	@ 0xa0
 8017800:	18fb      	adds	r3, r7, r3
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	2220      	movs	r2, #32
 8017806:	4013      	ands	r3, r2
 8017808:	d105      	bne.n	8017816 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801780a:	239c      	movs	r3, #156	@ 0x9c
 801780c:	18fb      	adds	r3, r7, r3
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2201      	movs	r2, #1
 8017812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017814:	d00b      	beq.n	801782e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	2208      	movs	r2, #8
 801781c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2284      	movs	r2, #132	@ 0x84
 8017822:	589b      	ldr	r3, [r3, r2]
 8017824:	2208      	movs	r2, #8
 8017826:	431a      	orrs	r2, r3
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	2184      	movs	r1, #132	@ 0x84
 801782c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801782e:	23a4      	movs	r3, #164	@ 0xa4
 8017830:	18fb      	adds	r3, r7, r3
 8017832:	681a      	ldr	r2, [r3, #0]
 8017834:	2380      	movs	r3, #128	@ 0x80
 8017836:	011b      	lsls	r3, r3, #4
 8017838:	4013      	ands	r3, r2
 801783a:	d013      	beq.n	8017864 <HAL_UART_IRQHandler+0x198>
 801783c:	23a0      	movs	r3, #160	@ 0xa0
 801783e:	18fb      	adds	r3, r7, r3
 8017840:	681a      	ldr	r2, [r3, #0]
 8017842:	2380      	movs	r3, #128	@ 0x80
 8017844:	04db      	lsls	r3, r3, #19
 8017846:	4013      	ands	r3, r2
 8017848:	d00c      	beq.n	8017864 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	2280      	movs	r2, #128	@ 0x80
 8017850:	0112      	lsls	r2, r2, #4
 8017852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2284      	movs	r2, #132	@ 0x84
 8017858:	589b      	ldr	r3, [r3, r2]
 801785a:	2220      	movs	r2, #32
 801785c:	431a      	orrs	r2, r3
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2184      	movs	r1, #132	@ 0x84
 8017862:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2284      	movs	r2, #132	@ 0x84
 8017868:	589b      	ldr	r3, [r3, r2]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d100      	bne.n	8017870 <HAL_UART_IRQHandler+0x1a4>
 801786e:	e20b      	b.n	8017c88 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017870:	23a4      	movs	r3, #164	@ 0xa4
 8017872:	18fb      	adds	r3, r7, r3
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2220      	movs	r2, #32
 8017878:	4013      	ands	r3, r2
 801787a:	d00e      	beq.n	801789a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801787c:	23a0      	movs	r3, #160	@ 0xa0
 801787e:	18fb      	adds	r3, r7, r3
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	2220      	movs	r2, #32
 8017884:	4013      	ands	r3, r2
 8017886:	d008      	beq.n	801789a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801788c:	2b00      	cmp	r3, #0
 801788e:	d004      	beq.n	801789a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017894:	687a      	ldr	r2, [r7, #4]
 8017896:	0010      	movs	r0, r2
 8017898:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	2284      	movs	r2, #132	@ 0x84
 801789e:	589b      	ldr	r3, [r3, r2]
 80178a0:	2194      	movs	r1, #148	@ 0x94
 80178a2:	187a      	adds	r2, r7, r1
 80178a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	689b      	ldr	r3, [r3, #8]
 80178ac:	2240      	movs	r2, #64	@ 0x40
 80178ae:	4013      	ands	r3, r2
 80178b0:	2b40      	cmp	r3, #64	@ 0x40
 80178b2:	d004      	beq.n	80178be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80178b4:	187b      	adds	r3, r7, r1
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2228      	movs	r2, #40	@ 0x28
 80178ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80178bc:	d04b      	beq.n	8017956 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	0018      	movs	r0, r3
 80178c2:	f001 f861 	bl	8018988 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	689b      	ldr	r3, [r3, #8]
 80178cc:	2240      	movs	r2, #64	@ 0x40
 80178ce:	4013      	ands	r3, r2
 80178d0:	2b40      	cmp	r3, #64	@ 0x40
 80178d2:	d139      	bne.n	8017948 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178d4:	f3ef 8310 	mrs	r3, PRIMASK
 80178d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80178da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178dc:	2090      	movs	r0, #144	@ 0x90
 80178de:	183a      	adds	r2, r7, r0
 80178e0:	6013      	str	r3, [r2, #0]
 80178e2:	2301      	movs	r3, #1
 80178e4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80178e8:	f383 8810 	msr	PRIMASK, r3
}
 80178ec:	46c0      	nop			@ (mov r8, r8)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	689a      	ldr	r2, [r3, #8]
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	2140      	movs	r1, #64	@ 0x40
 80178fa:	438a      	bics	r2, r1
 80178fc:	609a      	str	r2, [r3, #8]
 80178fe:	183b      	adds	r3, r7, r0
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017906:	f383 8810 	msr	PRIMASK, r3
}
 801790a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017910:	2b00      	cmp	r3, #0
 8017912:	d012      	beq.n	801793a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017918:	4a17      	ldr	r2, [pc, #92]	@ (8017978 <HAL_UART_IRQHandler+0x2ac>)
 801791a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017920:	0018      	movs	r0, r3
 8017922:	f7f8 f8b3 	bl	800fa8c <HAL_DMA_Abort_IT>
 8017926:	1e03      	subs	r3, r0, #0
 8017928:	d020      	beq.n	801796c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801792e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017934:	0018      	movs	r0, r3
 8017936:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017938:	e018      	b.n	801796c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	2298      	movs	r2, #152	@ 0x98
 801793e:	589b      	ldr	r3, [r3, r2]
 8017940:	687a      	ldr	r2, [r7, #4]
 8017942:	0010      	movs	r0, r2
 8017944:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017946:	e011      	b.n	801796c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2298      	movs	r2, #152	@ 0x98
 801794c:	589b      	ldr	r3, [r3, r2]
 801794e:	687a      	ldr	r2, [r7, #4]
 8017950:	0010      	movs	r0, r2
 8017952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017954:	e00a      	b.n	801796c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2298      	movs	r2, #152	@ 0x98
 801795a:	589b      	ldr	r3, [r3, r2]
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	0010      	movs	r0, r2
 8017960:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2284      	movs	r2, #132	@ 0x84
 8017966:	2100      	movs	r1, #0
 8017968:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801796a:	e18d      	b.n	8017c88 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801796c:	46c0      	nop			@ (mov r8, r8)
    return;
 801796e:	e18b      	b.n	8017c88 <HAL_UART_IRQHandler+0x5bc>
 8017970:	0000080f 	.word	0x0000080f
 8017974:	04000120 	.word	0x04000120
 8017978:	08018d15 	.word	0x08018d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017980:	2b01      	cmp	r3, #1
 8017982:	d000      	beq.n	8017986 <HAL_UART_IRQHandler+0x2ba>
 8017984:	e13d      	b.n	8017c02 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017986:	23a4      	movs	r3, #164	@ 0xa4
 8017988:	18fb      	adds	r3, r7, r3
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2210      	movs	r2, #16
 801798e:	4013      	ands	r3, r2
 8017990:	d100      	bne.n	8017994 <HAL_UART_IRQHandler+0x2c8>
 8017992:	e136      	b.n	8017c02 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017994:	23a0      	movs	r3, #160	@ 0xa0
 8017996:	18fb      	adds	r3, r7, r3
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2210      	movs	r2, #16
 801799c:	4013      	ands	r3, r2
 801799e:	d100      	bne.n	80179a2 <HAL_UART_IRQHandler+0x2d6>
 80179a0:	e12f      	b.n	8017c02 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	2210      	movs	r2, #16
 80179a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	689b      	ldr	r3, [r3, #8]
 80179b0:	2240      	movs	r2, #64	@ 0x40
 80179b2:	4013      	ands	r3, r2
 80179b4:	2b40      	cmp	r3, #64	@ 0x40
 80179b6:	d000      	beq.n	80179ba <HAL_UART_IRQHandler+0x2ee>
 80179b8:	e0a2      	b.n	8017b00 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	685a      	ldr	r2, [r3, #4]
 80179c2:	217e      	movs	r1, #126	@ 0x7e
 80179c4:	187b      	adds	r3, r7, r1
 80179c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80179c8:	187b      	adds	r3, r7, r1
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d100      	bne.n	80179d2 <HAL_UART_IRQHandler+0x306>
 80179d0:	e15c      	b.n	8017c8c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2258      	movs	r2, #88	@ 0x58
 80179d6:	5a9b      	ldrh	r3, [r3, r2]
 80179d8:	187a      	adds	r2, r7, r1
 80179da:	8812      	ldrh	r2, [r2, #0]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d300      	bcc.n	80179e2 <HAL_UART_IRQHandler+0x316>
 80179e0:	e154      	b.n	8017c8c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	187a      	adds	r2, r7, r1
 80179e6:	215a      	movs	r1, #90	@ 0x5a
 80179e8:	8812      	ldrh	r2, [r2, #0]
 80179ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2220      	movs	r2, #32
 80179f6:	4013      	ands	r3, r2
 80179f8:	d16f      	bne.n	8017ada <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179fa:	f3ef 8310 	mrs	r3, PRIMASK
 80179fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017a02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017a04:	2301      	movs	r3, #1
 8017a06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a0a:	f383 8810 	msr	PRIMASK, r3
}
 8017a0e:	46c0      	nop			@ (mov r8, r8)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	49a0      	ldr	r1, [pc, #640]	@ (8017c9c <HAL_UART_IRQHandler+0x5d0>)
 8017a1c:	400a      	ands	r2, r1
 8017a1e:	601a      	str	r2, [r3, #0]
 8017a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a26:	f383 8810 	msr	PRIMASK, r3
}
 8017a2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8017a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a34:	677b      	str	r3, [r7, #116]	@ 0x74
 8017a36:	2301      	movs	r3, #1
 8017a38:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a3c:	f383 8810 	msr	PRIMASK, r3
}
 8017a40:	46c0      	nop			@ (mov r8, r8)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	689a      	ldr	r2, [r3, #8]
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	2101      	movs	r1, #1
 8017a4e:	438a      	bics	r2, r1
 8017a50:	609a      	str	r2, [r3, #8]
 8017a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017a54:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a58:	f383 8810 	msr	PRIMASK, r3
}
 8017a5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8017a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017a66:	673b      	str	r3, [r7, #112]	@ 0x70
 8017a68:	2301      	movs	r3, #1
 8017a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a6e:	f383 8810 	msr	PRIMASK, r3
}
 8017a72:	46c0      	nop			@ (mov r8, r8)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	689a      	ldr	r2, [r3, #8]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2140      	movs	r1, #64	@ 0x40
 8017a80:	438a      	bics	r2, r1
 8017a82:	609a      	str	r2, [r3, #8]
 8017a84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017a86:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a8a:	f383 8810 	msr	PRIMASK, r3
}
 8017a8e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2280      	movs	r2, #128	@ 0x80
 8017a94:	2120      	movs	r1, #32
 8017a96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8017aa2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017aae:	f383 8810 	msr	PRIMASK, r3
}
 8017ab2:	46c0      	nop			@ (mov r8, r8)
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	681a      	ldr	r2, [r3, #0]
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	2110      	movs	r1, #16
 8017ac0:	438a      	bics	r2, r1
 8017ac2:	601a      	str	r2, [r3, #0]
 8017ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017aca:	f383 8810 	msr	PRIMASK, r3
}
 8017ace:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ad4:	0018      	movs	r0, r3
 8017ad6:	f7f7 ff99 	bl	800fa0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	2202      	movs	r2, #2
 8017ade:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	22ac      	movs	r2, #172	@ 0xac
 8017ae4:	589b      	ldr	r3, [r3, r2]
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	2158      	movs	r1, #88	@ 0x58
 8017aea:	5a51      	ldrh	r1, [r2, r1]
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	205a      	movs	r0, #90	@ 0x5a
 8017af0:	5a12      	ldrh	r2, [r2, r0]
 8017af2:	b292      	uxth	r2, r2
 8017af4:	1a8a      	subs	r2, r1, r2
 8017af6:	b291      	uxth	r1, r2
 8017af8:	687a      	ldr	r2, [r7, #4]
 8017afa:	0010      	movs	r0, r2
 8017afc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017afe:	e0c5      	b.n	8017c8c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	2258      	movs	r2, #88	@ 0x58
 8017b04:	5a99      	ldrh	r1, [r3, r2]
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	225a      	movs	r2, #90	@ 0x5a
 8017b0a:	5a9b      	ldrh	r3, [r3, r2]
 8017b0c:	b29a      	uxth	r2, r3
 8017b0e:	208e      	movs	r0, #142	@ 0x8e
 8017b10:	183b      	adds	r3, r7, r0
 8017b12:	1a8a      	subs	r2, r1, r2
 8017b14:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	225a      	movs	r2, #90	@ 0x5a
 8017b1a:	5a9b      	ldrh	r3, [r3, r2]
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d100      	bne.n	8017b24 <HAL_UART_IRQHandler+0x458>
 8017b22:	e0b5      	b.n	8017c90 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017b24:	183b      	adds	r3, r7, r0
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d100      	bne.n	8017b2e <HAL_UART_IRQHandler+0x462>
 8017b2c:	e0b0      	b.n	8017c90 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8017b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b34:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b36:	2488      	movs	r4, #136	@ 0x88
 8017b38:	193a      	adds	r2, r7, r4
 8017b3a:	6013      	str	r3, [r2, #0]
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b40:	693b      	ldr	r3, [r7, #16]
 8017b42:	f383 8810 	msr	PRIMASK, r3
}
 8017b46:	46c0      	nop			@ (mov r8, r8)
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	4953      	ldr	r1, [pc, #332]	@ (8017ca0 <HAL_UART_IRQHandler+0x5d4>)
 8017b54:	400a      	ands	r2, r1
 8017b56:	601a      	str	r2, [r3, #0]
 8017b58:	193b      	adds	r3, r7, r4
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	f383 8810 	msr	PRIMASK, r3
}
 8017b64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b66:	f3ef 8310 	mrs	r3, PRIMASK
 8017b6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8017b6c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b6e:	2484      	movs	r4, #132	@ 0x84
 8017b70:	193a      	adds	r2, r7, r4
 8017b72:	6013      	str	r3, [r2, #0]
 8017b74:	2301      	movs	r3, #1
 8017b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	f383 8810 	msr	PRIMASK, r3
}
 8017b7e:	46c0      	nop			@ (mov r8, r8)
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	689a      	ldr	r2, [r3, #8]
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	2101      	movs	r1, #1
 8017b8c:	438a      	bics	r2, r1
 8017b8e:	609a      	str	r2, [r3, #8]
 8017b90:	193b      	adds	r3, r7, r4
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b96:	6a3b      	ldr	r3, [r7, #32]
 8017b98:	f383 8810 	msr	PRIMASK, r3
}
 8017b9c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2280      	movs	r2, #128	@ 0x80
 8017ba2:	2120      	movs	r1, #32
 8017ba4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8017bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017bba:	2480      	movs	r4, #128	@ 0x80
 8017bbc:	193a      	adds	r2, r7, r4
 8017bbe:	6013      	str	r3, [r2, #0]
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bc6:	f383 8810 	msr	PRIMASK, r3
}
 8017bca:	46c0      	nop			@ (mov r8, r8)
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	681a      	ldr	r2, [r3, #0]
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	2110      	movs	r1, #16
 8017bd8:	438a      	bics	r2, r1
 8017bda:	601a      	str	r2, [r3, #0]
 8017bdc:	193b      	adds	r3, r7, r4
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017be4:	f383 8810 	msr	PRIMASK, r3
}
 8017be8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2202      	movs	r2, #2
 8017bee:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	22ac      	movs	r2, #172	@ 0xac
 8017bf4:	589b      	ldr	r3, [r3, r2]
 8017bf6:	183a      	adds	r2, r7, r0
 8017bf8:	8811      	ldrh	r1, [r2, #0]
 8017bfa:	687a      	ldr	r2, [r7, #4]
 8017bfc:	0010      	movs	r0, r2
 8017bfe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017c00:	e046      	b.n	8017c90 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017c02:	23a4      	movs	r3, #164	@ 0xa4
 8017c04:	18fb      	adds	r3, r7, r3
 8017c06:	681a      	ldr	r2, [r3, #0]
 8017c08:	2380      	movs	r3, #128	@ 0x80
 8017c0a:	035b      	lsls	r3, r3, #13
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	d012      	beq.n	8017c36 <HAL_UART_IRQHandler+0x56a>
 8017c10:	239c      	movs	r3, #156	@ 0x9c
 8017c12:	18fb      	adds	r3, r7, r3
 8017c14:	681a      	ldr	r2, [r3, #0]
 8017c16:	2380      	movs	r3, #128	@ 0x80
 8017c18:	03db      	lsls	r3, r3, #15
 8017c1a:	4013      	ands	r3, r2
 8017c1c:	d00b      	beq.n	8017c36 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	2280      	movs	r2, #128	@ 0x80
 8017c24:	0352      	lsls	r2, r2, #13
 8017c26:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	22a8      	movs	r2, #168	@ 0xa8
 8017c2c:	589b      	ldr	r3, [r3, r2]
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	0010      	movs	r0, r2
 8017c32:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017c34:	e02f      	b.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017c36:	23a4      	movs	r3, #164	@ 0xa4
 8017c38:	18fb      	adds	r3, r7, r3
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2280      	movs	r2, #128	@ 0x80
 8017c3e:	4013      	ands	r3, r2
 8017c40:	d00f      	beq.n	8017c62 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017c42:	23a0      	movs	r3, #160	@ 0xa0
 8017c44:	18fb      	adds	r3, r7, r3
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2280      	movs	r2, #128	@ 0x80
 8017c4a:	4013      	ands	r3, r2
 8017c4c:	d009      	beq.n	8017c62 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d01e      	beq.n	8017c94 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c5a:	687a      	ldr	r2, [r7, #4]
 8017c5c:	0010      	movs	r0, r2
 8017c5e:	4798      	blx	r3
    }
    return;
 8017c60:	e018      	b.n	8017c94 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017c62:	23a4      	movs	r3, #164	@ 0xa4
 8017c64:	18fb      	adds	r3, r7, r3
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	2240      	movs	r2, #64	@ 0x40
 8017c6a:	4013      	ands	r3, r2
 8017c6c:	d013      	beq.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
 8017c6e:	23a0      	movs	r3, #160	@ 0xa0
 8017c70:	18fb      	adds	r3, r7, r3
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2240      	movs	r2, #64	@ 0x40
 8017c76:	4013      	ands	r3, r2
 8017c78:	d00d      	beq.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	0018      	movs	r0, r3
 8017c7e:	f001 f862 	bl	8018d46 <UART_EndTransmit_IT>
    return;
 8017c82:	e008      	b.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017c84:	46c0      	nop			@ (mov r8, r8)
 8017c86:	e006      	b.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
    return;
 8017c88:	46c0      	nop			@ (mov r8, r8)
 8017c8a:	e004      	b.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017c8c:	46c0      	nop			@ (mov r8, r8)
 8017c8e:	e002      	b.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017c90:	46c0      	nop			@ (mov r8, r8)
 8017c92:	e000      	b.n	8017c96 <HAL_UART_IRQHandler+0x5ca>
    return;
 8017c94:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017c96:	46bd      	mov	sp, r7
 8017c98:	b02b      	add	sp, #172	@ 0xac
 8017c9a:	bd90      	pop	{r4, r7, pc}
 8017c9c:	fffffeff 	.word	0xfffffeff
 8017ca0:	fffffedf 	.word	0xfffffedf

08017ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017cac:	46c0      	nop			@ (mov r8, r8)
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	b002      	add	sp, #8
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017cbc:	46c0      	nop			@ (mov r8, r8)
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	b002      	add	sp, #8
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b082      	sub	sp, #8
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017ccc:	46c0      	nop			@ (mov r8, r8)
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	b002      	add	sp, #8
 8017cd2:	bd80      	pop	{r7, pc}

08017cd4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017cdc:	46c0      	nop			@ (mov r8, r8)
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	b002      	add	sp, #8
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017cec:	46c0      	nop			@ (mov r8, r8)
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	b002      	add	sp, #8
 8017cf2:	bd80      	pop	{r7, pc}

08017cf4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017cfc:	46c0      	nop			@ (mov r8, r8)
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	b002      	add	sp, #8
 8017d02:	bd80      	pop	{r7, pc}

08017d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b082      	sub	sp, #8
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	000a      	movs	r2, r1
 8017d0e:	1cbb      	adds	r3, r7, #2
 8017d10:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017d12:	46c0      	nop			@ (mov r8, r8)
 8017d14:	46bd      	mov	sp, r7
 8017d16:	b002      	add	sp, #8
 8017d18:	bd80      	pop	{r7, pc}
	...

08017d1c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2188      	movs	r1, #136	@ 0x88
 8017d28:	4a14      	ldr	r2, [pc, #80]	@ (8017d7c <UART_InitCallbacksToDefault+0x60>)
 8017d2a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	218c      	movs	r1, #140	@ 0x8c
 8017d30:	4a13      	ldr	r2, [pc, #76]	@ (8017d80 <UART_InitCallbacksToDefault+0x64>)
 8017d32:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	2190      	movs	r1, #144	@ 0x90
 8017d38:	4a12      	ldr	r2, [pc, #72]	@ (8017d84 <UART_InitCallbacksToDefault+0x68>)
 8017d3a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	2194      	movs	r1, #148	@ 0x94
 8017d40:	4a11      	ldr	r2, [pc, #68]	@ (8017d88 <UART_InitCallbacksToDefault+0x6c>)
 8017d42:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	2198      	movs	r1, #152	@ 0x98
 8017d48:	4a10      	ldr	r2, [pc, #64]	@ (8017d8c <UART_InitCallbacksToDefault+0x70>)
 8017d4a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	219c      	movs	r1, #156	@ 0x9c
 8017d50:	4a0f      	ldr	r2, [pc, #60]	@ (8017d90 <UART_InitCallbacksToDefault+0x74>)
 8017d52:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	21a0      	movs	r1, #160	@ 0xa0
 8017d58:	4a0e      	ldr	r2, [pc, #56]	@ (8017d94 <UART_InitCallbacksToDefault+0x78>)
 8017d5a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	21a4      	movs	r1, #164	@ 0xa4
 8017d60:	4a0d      	ldr	r2, [pc, #52]	@ (8017d98 <UART_InitCallbacksToDefault+0x7c>)
 8017d62:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	21a8      	movs	r1, #168	@ 0xa8
 8017d68:	4a0c      	ldr	r2, [pc, #48]	@ (8017d9c <UART_InitCallbacksToDefault+0x80>)
 8017d6a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	21ac      	movs	r1, #172	@ 0xac
 8017d70:	4a0b      	ldr	r2, [pc, #44]	@ (8017da0 <UART_InitCallbacksToDefault+0x84>)
 8017d72:	505a      	str	r2, [r3, r1]

}
 8017d74:	46c0      	nop			@ (mov r8, r8)
 8017d76:	46bd      	mov	sp, r7
 8017d78:	b002      	add	sp, #8
 8017d7a:	bd80      	pop	{r7, pc}
 8017d7c:	08017cb5 	.word	0x08017cb5
 8017d80:	08017ca5 	.word	0x08017ca5
 8017d84:	08017cc5 	.word	0x08017cc5
 8017d88:	080082c5 	.word	0x080082c5
 8017d8c:	08003d05 	.word	0x08003d05
 8017d90:	08017cd5 	.word	0x08017cd5
 8017d94:	08017ce5 	.word	0x08017ce5
 8017d98:	08017cf5 	.word	0x08017cf5
 8017d9c:	08019139 	.word	0x08019139
 8017da0:	08017d05 	.word	0x08017d05

08017da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017da4:	b5b0      	push	{r4, r5, r7, lr}
 8017da6:	b08e      	sub	sp, #56	@ 0x38
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017dac:	231a      	movs	r3, #26
 8017dae:	2218      	movs	r2, #24
 8017db0:	189b      	adds	r3, r3, r2
 8017db2:	19db      	adds	r3, r3, r7
 8017db4:	2200      	movs	r2, #0
 8017db6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	689a      	ldr	r2, [r3, #8]
 8017dbc:	69fb      	ldr	r3, [r7, #28]
 8017dbe:	691b      	ldr	r3, [r3, #16]
 8017dc0:	431a      	orrs	r2, r3
 8017dc2:	69fb      	ldr	r3, [r7, #28]
 8017dc4:	695b      	ldr	r3, [r3, #20]
 8017dc6:	431a      	orrs	r2, r3
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	69db      	ldr	r3, [r3, #28]
 8017dcc:	4313      	orrs	r3, r2
 8017dce:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017dd0:	69fb      	ldr	r3, [r7, #28]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	4ac3      	ldr	r2, [pc, #780]	@ (80180e4 <UART_SetConfig+0x340>)
 8017dd8:	4013      	ands	r3, r2
 8017dda:	0019      	movs	r1, r3
 8017ddc:	69fb      	ldr	r3, [r7, #28]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017de2:	430a      	orrs	r2, r1
 8017de4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017de6:	69fb      	ldr	r3, [r7, #28]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	685b      	ldr	r3, [r3, #4]
 8017dec:	4abe      	ldr	r2, [pc, #760]	@ (80180e8 <UART_SetConfig+0x344>)
 8017dee:	4013      	ands	r3, r2
 8017df0:	0019      	movs	r1, r3
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	68da      	ldr	r2, [r3, #12]
 8017df6:	69fb      	ldr	r3, [r7, #28]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	430a      	orrs	r2, r1
 8017dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017dfe:	69fb      	ldr	r3, [r7, #28]
 8017e00:	699b      	ldr	r3, [r3, #24]
 8017e02:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017e04:	69fb      	ldr	r3, [r7, #28]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	4ab8      	ldr	r2, [pc, #736]	@ (80180ec <UART_SetConfig+0x348>)
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d004      	beq.n	8017e18 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	6a1b      	ldr	r3, [r3, #32]
 8017e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e14:	4313      	orrs	r3, r2
 8017e16:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017e18:	69fb      	ldr	r3, [r7, #28]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	689b      	ldr	r3, [r3, #8]
 8017e1e:	4ab4      	ldr	r2, [pc, #720]	@ (80180f0 <UART_SetConfig+0x34c>)
 8017e20:	4013      	ands	r3, r2
 8017e22:	0019      	movs	r1, r3
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e2a:	430a      	orrs	r2, r1
 8017e2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017e2e:	69fb      	ldr	r3, [r7, #28]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4ab0      	ldr	r2, [pc, #704]	@ (80180f4 <UART_SetConfig+0x350>)
 8017e34:	4293      	cmp	r3, r2
 8017e36:	d131      	bne.n	8017e9c <UART_SetConfig+0xf8>
 8017e38:	4baf      	ldr	r3, [pc, #700]	@ (80180f8 <UART_SetConfig+0x354>)
 8017e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e3c:	2203      	movs	r2, #3
 8017e3e:	4013      	ands	r3, r2
 8017e40:	2b03      	cmp	r3, #3
 8017e42:	d01d      	beq.n	8017e80 <UART_SetConfig+0xdc>
 8017e44:	d823      	bhi.n	8017e8e <UART_SetConfig+0xea>
 8017e46:	2b02      	cmp	r3, #2
 8017e48:	d00c      	beq.n	8017e64 <UART_SetConfig+0xc0>
 8017e4a:	d820      	bhi.n	8017e8e <UART_SetConfig+0xea>
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d002      	beq.n	8017e56 <UART_SetConfig+0xb2>
 8017e50:	2b01      	cmp	r3, #1
 8017e52:	d00e      	beq.n	8017e72 <UART_SetConfig+0xce>
 8017e54:	e01b      	b.n	8017e8e <UART_SetConfig+0xea>
 8017e56:	231b      	movs	r3, #27
 8017e58:	2218      	movs	r2, #24
 8017e5a:	189b      	adds	r3, r3, r2
 8017e5c:	19db      	adds	r3, r3, r7
 8017e5e:	2201      	movs	r2, #1
 8017e60:	701a      	strb	r2, [r3, #0]
 8017e62:	e0b4      	b.n	8017fce <UART_SetConfig+0x22a>
 8017e64:	231b      	movs	r3, #27
 8017e66:	2218      	movs	r2, #24
 8017e68:	189b      	adds	r3, r3, r2
 8017e6a:	19db      	adds	r3, r3, r7
 8017e6c:	2202      	movs	r2, #2
 8017e6e:	701a      	strb	r2, [r3, #0]
 8017e70:	e0ad      	b.n	8017fce <UART_SetConfig+0x22a>
 8017e72:	231b      	movs	r3, #27
 8017e74:	2218      	movs	r2, #24
 8017e76:	189b      	adds	r3, r3, r2
 8017e78:	19db      	adds	r3, r3, r7
 8017e7a:	2204      	movs	r2, #4
 8017e7c:	701a      	strb	r2, [r3, #0]
 8017e7e:	e0a6      	b.n	8017fce <UART_SetConfig+0x22a>
 8017e80:	231b      	movs	r3, #27
 8017e82:	2218      	movs	r2, #24
 8017e84:	189b      	adds	r3, r3, r2
 8017e86:	19db      	adds	r3, r3, r7
 8017e88:	2208      	movs	r2, #8
 8017e8a:	701a      	strb	r2, [r3, #0]
 8017e8c:	e09f      	b.n	8017fce <UART_SetConfig+0x22a>
 8017e8e:	231b      	movs	r3, #27
 8017e90:	2218      	movs	r2, #24
 8017e92:	189b      	adds	r3, r3, r2
 8017e94:	19db      	adds	r3, r3, r7
 8017e96:	2210      	movs	r2, #16
 8017e98:	701a      	strb	r2, [r3, #0]
 8017e9a:	e098      	b.n	8017fce <UART_SetConfig+0x22a>
 8017e9c:	69fb      	ldr	r3, [r7, #28]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	4a96      	ldr	r2, [pc, #600]	@ (80180fc <UART_SetConfig+0x358>)
 8017ea2:	4293      	cmp	r3, r2
 8017ea4:	d131      	bne.n	8017f0a <UART_SetConfig+0x166>
 8017ea6:	4b94      	ldr	r3, [pc, #592]	@ (80180f8 <UART_SetConfig+0x354>)
 8017ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017eaa:	220c      	movs	r2, #12
 8017eac:	4013      	ands	r3, r2
 8017eae:	2b0c      	cmp	r3, #12
 8017eb0:	d01d      	beq.n	8017eee <UART_SetConfig+0x14a>
 8017eb2:	d823      	bhi.n	8017efc <UART_SetConfig+0x158>
 8017eb4:	2b08      	cmp	r3, #8
 8017eb6:	d00c      	beq.n	8017ed2 <UART_SetConfig+0x12e>
 8017eb8:	d820      	bhi.n	8017efc <UART_SetConfig+0x158>
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d002      	beq.n	8017ec4 <UART_SetConfig+0x120>
 8017ebe:	2b04      	cmp	r3, #4
 8017ec0:	d00e      	beq.n	8017ee0 <UART_SetConfig+0x13c>
 8017ec2:	e01b      	b.n	8017efc <UART_SetConfig+0x158>
 8017ec4:	231b      	movs	r3, #27
 8017ec6:	2218      	movs	r2, #24
 8017ec8:	189b      	adds	r3, r3, r2
 8017eca:	19db      	adds	r3, r3, r7
 8017ecc:	2200      	movs	r2, #0
 8017ece:	701a      	strb	r2, [r3, #0]
 8017ed0:	e07d      	b.n	8017fce <UART_SetConfig+0x22a>
 8017ed2:	231b      	movs	r3, #27
 8017ed4:	2218      	movs	r2, #24
 8017ed6:	189b      	adds	r3, r3, r2
 8017ed8:	19db      	adds	r3, r3, r7
 8017eda:	2202      	movs	r2, #2
 8017edc:	701a      	strb	r2, [r3, #0]
 8017ede:	e076      	b.n	8017fce <UART_SetConfig+0x22a>
 8017ee0:	231b      	movs	r3, #27
 8017ee2:	2218      	movs	r2, #24
 8017ee4:	189b      	adds	r3, r3, r2
 8017ee6:	19db      	adds	r3, r3, r7
 8017ee8:	2204      	movs	r2, #4
 8017eea:	701a      	strb	r2, [r3, #0]
 8017eec:	e06f      	b.n	8017fce <UART_SetConfig+0x22a>
 8017eee:	231b      	movs	r3, #27
 8017ef0:	2218      	movs	r2, #24
 8017ef2:	189b      	adds	r3, r3, r2
 8017ef4:	19db      	adds	r3, r3, r7
 8017ef6:	2208      	movs	r2, #8
 8017ef8:	701a      	strb	r2, [r3, #0]
 8017efa:	e068      	b.n	8017fce <UART_SetConfig+0x22a>
 8017efc:	231b      	movs	r3, #27
 8017efe:	2218      	movs	r2, #24
 8017f00:	189b      	adds	r3, r3, r2
 8017f02:	19db      	adds	r3, r3, r7
 8017f04:	2210      	movs	r2, #16
 8017f06:	701a      	strb	r2, [r3, #0]
 8017f08:	e061      	b.n	8017fce <UART_SetConfig+0x22a>
 8017f0a:	69fb      	ldr	r3, [r7, #28]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	4a7c      	ldr	r2, [pc, #496]	@ (8018100 <UART_SetConfig+0x35c>)
 8017f10:	4293      	cmp	r3, r2
 8017f12:	d106      	bne.n	8017f22 <UART_SetConfig+0x17e>
 8017f14:	231b      	movs	r3, #27
 8017f16:	2218      	movs	r2, #24
 8017f18:	189b      	adds	r3, r3, r2
 8017f1a:	19db      	adds	r3, r3, r7
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	701a      	strb	r2, [r3, #0]
 8017f20:	e055      	b.n	8017fce <UART_SetConfig+0x22a>
 8017f22:	69fb      	ldr	r3, [r7, #28]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	4a77      	ldr	r2, [pc, #476]	@ (8018104 <UART_SetConfig+0x360>)
 8017f28:	4293      	cmp	r3, r2
 8017f2a:	d106      	bne.n	8017f3a <UART_SetConfig+0x196>
 8017f2c:	231b      	movs	r3, #27
 8017f2e:	2218      	movs	r2, #24
 8017f30:	189b      	adds	r3, r3, r2
 8017f32:	19db      	adds	r3, r3, r7
 8017f34:	2200      	movs	r2, #0
 8017f36:	701a      	strb	r2, [r3, #0]
 8017f38:	e049      	b.n	8017fce <UART_SetConfig+0x22a>
 8017f3a:	69fb      	ldr	r3, [r7, #28]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	4a6b      	ldr	r2, [pc, #428]	@ (80180ec <UART_SetConfig+0x348>)
 8017f40:	4293      	cmp	r3, r2
 8017f42:	d13e      	bne.n	8017fc2 <UART_SetConfig+0x21e>
 8017f44:	4b6c      	ldr	r3, [pc, #432]	@ (80180f8 <UART_SetConfig+0x354>)
 8017f46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f48:	23c0      	movs	r3, #192	@ 0xc0
 8017f4a:	011b      	lsls	r3, r3, #4
 8017f4c:	4013      	ands	r3, r2
 8017f4e:	22c0      	movs	r2, #192	@ 0xc0
 8017f50:	0112      	lsls	r2, r2, #4
 8017f52:	4293      	cmp	r3, r2
 8017f54:	d027      	beq.n	8017fa6 <UART_SetConfig+0x202>
 8017f56:	22c0      	movs	r2, #192	@ 0xc0
 8017f58:	0112      	lsls	r2, r2, #4
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	d82a      	bhi.n	8017fb4 <UART_SetConfig+0x210>
 8017f5e:	2280      	movs	r2, #128	@ 0x80
 8017f60:	0112      	lsls	r2, r2, #4
 8017f62:	4293      	cmp	r3, r2
 8017f64:	d011      	beq.n	8017f8a <UART_SetConfig+0x1e6>
 8017f66:	2280      	movs	r2, #128	@ 0x80
 8017f68:	0112      	lsls	r2, r2, #4
 8017f6a:	4293      	cmp	r3, r2
 8017f6c:	d822      	bhi.n	8017fb4 <UART_SetConfig+0x210>
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d004      	beq.n	8017f7c <UART_SetConfig+0x1d8>
 8017f72:	2280      	movs	r2, #128	@ 0x80
 8017f74:	00d2      	lsls	r2, r2, #3
 8017f76:	4293      	cmp	r3, r2
 8017f78:	d00e      	beq.n	8017f98 <UART_SetConfig+0x1f4>
 8017f7a:	e01b      	b.n	8017fb4 <UART_SetConfig+0x210>
 8017f7c:	231b      	movs	r3, #27
 8017f7e:	2218      	movs	r2, #24
 8017f80:	189b      	adds	r3, r3, r2
 8017f82:	19db      	adds	r3, r3, r7
 8017f84:	2200      	movs	r2, #0
 8017f86:	701a      	strb	r2, [r3, #0]
 8017f88:	e021      	b.n	8017fce <UART_SetConfig+0x22a>
 8017f8a:	231b      	movs	r3, #27
 8017f8c:	2218      	movs	r2, #24
 8017f8e:	189b      	adds	r3, r3, r2
 8017f90:	19db      	adds	r3, r3, r7
 8017f92:	2202      	movs	r2, #2
 8017f94:	701a      	strb	r2, [r3, #0]
 8017f96:	e01a      	b.n	8017fce <UART_SetConfig+0x22a>
 8017f98:	231b      	movs	r3, #27
 8017f9a:	2218      	movs	r2, #24
 8017f9c:	189b      	adds	r3, r3, r2
 8017f9e:	19db      	adds	r3, r3, r7
 8017fa0:	2204      	movs	r2, #4
 8017fa2:	701a      	strb	r2, [r3, #0]
 8017fa4:	e013      	b.n	8017fce <UART_SetConfig+0x22a>
 8017fa6:	231b      	movs	r3, #27
 8017fa8:	2218      	movs	r2, #24
 8017faa:	189b      	adds	r3, r3, r2
 8017fac:	19db      	adds	r3, r3, r7
 8017fae:	2208      	movs	r2, #8
 8017fb0:	701a      	strb	r2, [r3, #0]
 8017fb2:	e00c      	b.n	8017fce <UART_SetConfig+0x22a>
 8017fb4:	231b      	movs	r3, #27
 8017fb6:	2218      	movs	r2, #24
 8017fb8:	189b      	adds	r3, r3, r2
 8017fba:	19db      	adds	r3, r3, r7
 8017fbc:	2210      	movs	r2, #16
 8017fbe:	701a      	strb	r2, [r3, #0]
 8017fc0:	e005      	b.n	8017fce <UART_SetConfig+0x22a>
 8017fc2:	231b      	movs	r3, #27
 8017fc4:	2218      	movs	r2, #24
 8017fc6:	189b      	adds	r3, r3, r2
 8017fc8:	19db      	adds	r3, r3, r7
 8017fca:	2210      	movs	r2, #16
 8017fcc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017fce:	69fb      	ldr	r3, [r7, #28]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	4a46      	ldr	r2, [pc, #280]	@ (80180ec <UART_SetConfig+0x348>)
 8017fd4:	4293      	cmp	r3, r2
 8017fd6:	d000      	beq.n	8017fda <UART_SetConfig+0x236>
 8017fd8:	e09a      	b.n	8018110 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017fda:	231b      	movs	r3, #27
 8017fdc:	2218      	movs	r2, #24
 8017fde:	189b      	adds	r3, r3, r2
 8017fe0:	19db      	adds	r3, r3, r7
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	2b08      	cmp	r3, #8
 8017fe6:	d01d      	beq.n	8018024 <UART_SetConfig+0x280>
 8017fe8:	dc20      	bgt.n	801802c <UART_SetConfig+0x288>
 8017fea:	2b04      	cmp	r3, #4
 8017fec:	d015      	beq.n	801801a <UART_SetConfig+0x276>
 8017fee:	dc1d      	bgt.n	801802c <UART_SetConfig+0x288>
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d002      	beq.n	8017ffa <UART_SetConfig+0x256>
 8017ff4:	2b02      	cmp	r3, #2
 8017ff6:	d005      	beq.n	8018004 <UART_SetConfig+0x260>
 8017ff8:	e018      	b.n	801802c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017ffa:	f7fd fe4b 	bl	8015c94 <HAL_RCC_GetPCLK1Freq>
 8017ffe:	0003      	movs	r3, r0
 8018000:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018002:	e01c      	b.n	801803e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018004:	4b3c      	ldr	r3, [pc, #240]	@ (80180f8 <UART_SetConfig+0x354>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2210      	movs	r2, #16
 801800a:	4013      	ands	r3, r2
 801800c:	d002      	beq.n	8018014 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801800e:	4b3e      	ldr	r3, [pc, #248]	@ (8018108 <UART_SetConfig+0x364>)
 8018010:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018012:	e014      	b.n	801803e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8018014:	4b3d      	ldr	r3, [pc, #244]	@ (801810c <UART_SetConfig+0x368>)
 8018016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018018:	e011      	b.n	801803e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801801a:	f7fd fd8b 	bl	8015b34 <HAL_RCC_GetSysClockFreq>
 801801e:	0003      	movs	r3, r0
 8018020:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018022:	e00c      	b.n	801803e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018024:	2380      	movs	r3, #128	@ 0x80
 8018026:	021b      	lsls	r3, r3, #8
 8018028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801802a:	e008      	b.n	801803e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801802c:	2300      	movs	r3, #0
 801802e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018030:	231a      	movs	r3, #26
 8018032:	2218      	movs	r2, #24
 8018034:	189b      	adds	r3, r3, r2
 8018036:	19db      	adds	r3, r3, r7
 8018038:	2201      	movs	r2, #1
 801803a:	701a      	strb	r2, [r3, #0]
        break;
 801803c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801803e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018040:	2b00      	cmp	r3, #0
 8018042:	d100      	bne.n	8018046 <UART_SetConfig+0x2a2>
 8018044:	e133      	b.n	80182ae <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018046:	69fb      	ldr	r3, [r7, #28]
 8018048:	685a      	ldr	r2, [r3, #4]
 801804a:	0013      	movs	r3, r2
 801804c:	005b      	lsls	r3, r3, #1
 801804e:	189b      	adds	r3, r3, r2
 8018050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018052:	429a      	cmp	r2, r3
 8018054:	d305      	bcc.n	8018062 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801805c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801805e:	429a      	cmp	r2, r3
 8018060:	d906      	bls.n	8018070 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8018062:	231a      	movs	r3, #26
 8018064:	2218      	movs	r2, #24
 8018066:	189b      	adds	r3, r3, r2
 8018068:	19db      	adds	r3, r3, r7
 801806a:	2201      	movs	r2, #1
 801806c:	701a      	strb	r2, [r3, #0]
 801806e:	e11e      	b.n	80182ae <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8018070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018072:	613b      	str	r3, [r7, #16]
 8018074:	2300      	movs	r3, #0
 8018076:	617b      	str	r3, [r7, #20]
 8018078:	6939      	ldr	r1, [r7, #16]
 801807a:	697a      	ldr	r2, [r7, #20]
 801807c:	000b      	movs	r3, r1
 801807e:	0e1b      	lsrs	r3, r3, #24
 8018080:	0010      	movs	r0, r2
 8018082:	0205      	lsls	r5, r0, #8
 8018084:	431d      	orrs	r5, r3
 8018086:	000b      	movs	r3, r1
 8018088:	021c      	lsls	r4, r3, #8
 801808a:	69fb      	ldr	r3, [r7, #28]
 801808c:	685b      	ldr	r3, [r3, #4]
 801808e:	085b      	lsrs	r3, r3, #1
 8018090:	60bb      	str	r3, [r7, #8]
 8018092:	2300      	movs	r3, #0
 8018094:	60fb      	str	r3, [r7, #12]
 8018096:	68b8      	ldr	r0, [r7, #8]
 8018098:	68f9      	ldr	r1, [r7, #12]
 801809a:	1900      	adds	r0, r0, r4
 801809c:	4169      	adcs	r1, r5
 801809e:	69fb      	ldr	r3, [r7, #28]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	603b      	str	r3, [r7, #0]
 80180a4:	2300      	movs	r3, #0
 80180a6:	607b      	str	r3, [r7, #4]
 80180a8:	683a      	ldr	r2, [r7, #0]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	f7e8 fa68 	bl	8000580 <__aeabi_uldivmod>
 80180b0:	0002      	movs	r2, r0
 80180b2:	000b      	movs	r3, r1
 80180b4:	0013      	movs	r3, r2
 80180b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80180b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180ba:	23c0      	movs	r3, #192	@ 0xc0
 80180bc:	009b      	lsls	r3, r3, #2
 80180be:	429a      	cmp	r2, r3
 80180c0:	d309      	bcc.n	80180d6 <UART_SetConfig+0x332>
 80180c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180c4:	2380      	movs	r3, #128	@ 0x80
 80180c6:	035b      	lsls	r3, r3, #13
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d204      	bcs.n	80180d6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80180cc:	69fb      	ldr	r3, [r7, #28]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180d2:	60da      	str	r2, [r3, #12]
 80180d4:	e0eb      	b.n	80182ae <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80180d6:	231a      	movs	r3, #26
 80180d8:	2218      	movs	r2, #24
 80180da:	189b      	adds	r3, r3, r2
 80180dc:	19db      	adds	r3, r3, r7
 80180de:	2201      	movs	r2, #1
 80180e0:	701a      	strb	r2, [r3, #0]
 80180e2:	e0e4      	b.n	80182ae <UART_SetConfig+0x50a>
 80180e4:	efff69f3 	.word	0xefff69f3
 80180e8:	ffffcfff 	.word	0xffffcfff
 80180ec:	40004800 	.word	0x40004800
 80180f0:	fffff4ff 	.word	0xfffff4ff
 80180f4:	40013800 	.word	0x40013800
 80180f8:	40021000 	.word	0x40021000
 80180fc:	40004400 	.word	0x40004400
 8018100:	40004c00 	.word	0x40004c00
 8018104:	40005000 	.word	0x40005000
 8018108:	003d0900 	.word	0x003d0900
 801810c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018110:	69fb      	ldr	r3, [r7, #28]
 8018112:	69da      	ldr	r2, [r3, #28]
 8018114:	2380      	movs	r3, #128	@ 0x80
 8018116:	021b      	lsls	r3, r3, #8
 8018118:	429a      	cmp	r2, r3
 801811a:	d000      	beq.n	801811e <UART_SetConfig+0x37a>
 801811c:	e070      	b.n	8018200 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801811e:	231b      	movs	r3, #27
 8018120:	2218      	movs	r2, #24
 8018122:	189b      	adds	r3, r3, r2
 8018124:	19db      	adds	r3, r3, r7
 8018126:	781b      	ldrb	r3, [r3, #0]
 8018128:	2b08      	cmp	r3, #8
 801812a:	d822      	bhi.n	8018172 <UART_SetConfig+0x3ce>
 801812c:	009a      	lsls	r2, r3, #2
 801812e:	4b67      	ldr	r3, [pc, #412]	@ (80182cc <UART_SetConfig+0x528>)
 8018130:	18d3      	adds	r3, r2, r3
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018136:	f7fd fdad 	bl	8015c94 <HAL_RCC_GetPCLK1Freq>
 801813a:	0003      	movs	r3, r0
 801813c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801813e:	e021      	b.n	8018184 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018140:	f7fd fdbe 	bl	8015cc0 <HAL_RCC_GetPCLK2Freq>
 8018144:	0003      	movs	r3, r0
 8018146:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018148:	e01c      	b.n	8018184 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801814a:	4b61      	ldr	r3, [pc, #388]	@ (80182d0 <UART_SetConfig+0x52c>)
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	2210      	movs	r2, #16
 8018150:	4013      	ands	r3, r2
 8018152:	d002      	beq.n	801815a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018154:	4b5f      	ldr	r3, [pc, #380]	@ (80182d4 <UART_SetConfig+0x530>)
 8018156:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018158:	e014      	b.n	8018184 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801815a:	4b5f      	ldr	r3, [pc, #380]	@ (80182d8 <UART_SetConfig+0x534>)
 801815c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801815e:	e011      	b.n	8018184 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018160:	f7fd fce8 	bl	8015b34 <HAL_RCC_GetSysClockFreq>
 8018164:	0003      	movs	r3, r0
 8018166:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018168:	e00c      	b.n	8018184 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801816a:	2380      	movs	r3, #128	@ 0x80
 801816c:	021b      	lsls	r3, r3, #8
 801816e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018170:	e008      	b.n	8018184 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8018172:	2300      	movs	r3, #0
 8018174:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018176:	231a      	movs	r3, #26
 8018178:	2218      	movs	r2, #24
 801817a:	189b      	adds	r3, r3, r2
 801817c:	19db      	adds	r3, r3, r7
 801817e:	2201      	movs	r2, #1
 8018180:	701a      	strb	r2, [r3, #0]
        break;
 8018182:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018186:	2b00      	cmp	r3, #0
 8018188:	d100      	bne.n	801818c <UART_SetConfig+0x3e8>
 801818a:	e090      	b.n	80182ae <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801818e:	005a      	lsls	r2, r3, #1
 8018190:	69fb      	ldr	r3, [r7, #28]
 8018192:	685b      	ldr	r3, [r3, #4]
 8018194:	085b      	lsrs	r3, r3, #1
 8018196:	18d2      	adds	r2, r2, r3
 8018198:	69fb      	ldr	r3, [r7, #28]
 801819a:	685b      	ldr	r3, [r3, #4]
 801819c:	0019      	movs	r1, r3
 801819e:	0010      	movs	r0, r2
 80181a0:	f7e8 f800 	bl	80001a4 <__udivsi3>
 80181a4:	0003      	movs	r3, r0
 80181a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80181a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181aa:	2b0f      	cmp	r3, #15
 80181ac:	d921      	bls.n	80181f2 <UART_SetConfig+0x44e>
 80181ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80181b0:	2380      	movs	r3, #128	@ 0x80
 80181b2:	025b      	lsls	r3, r3, #9
 80181b4:	429a      	cmp	r2, r3
 80181b6:	d21c      	bcs.n	80181f2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80181b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181ba:	b29a      	uxth	r2, r3
 80181bc:	200e      	movs	r0, #14
 80181be:	2418      	movs	r4, #24
 80181c0:	1903      	adds	r3, r0, r4
 80181c2:	19db      	adds	r3, r3, r7
 80181c4:	210f      	movs	r1, #15
 80181c6:	438a      	bics	r2, r1
 80181c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80181ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181cc:	085b      	lsrs	r3, r3, #1
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	2207      	movs	r2, #7
 80181d2:	4013      	ands	r3, r2
 80181d4:	b299      	uxth	r1, r3
 80181d6:	1903      	adds	r3, r0, r4
 80181d8:	19db      	adds	r3, r3, r7
 80181da:	1902      	adds	r2, r0, r4
 80181dc:	19d2      	adds	r2, r2, r7
 80181de:	8812      	ldrh	r2, [r2, #0]
 80181e0:	430a      	orrs	r2, r1
 80181e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80181e4:	69fb      	ldr	r3, [r7, #28]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	1902      	adds	r2, r0, r4
 80181ea:	19d2      	adds	r2, r2, r7
 80181ec:	8812      	ldrh	r2, [r2, #0]
 80181ee:	60da      	str	r2, [r3, #12]
 80181f0:	e05d      	b.n	80182ae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80181f2:	231a      	movs	r3, #26
 80181f4:	2218      	movs	r2, #24
 80181f6:	189b      	adds	r3, r3, r2
 80181f8:	19db      	adds	r3, r3, r7
 80181fa:	2201      	movs	r2, #1
 80181fc:	701a      	strb	r2, [r3, #0]
 80181fe:	e056      	b.n	80182ae <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018200:	231b      	movs	r3, #27
 8018202:	2218      	movs	r2, #24
 8018204:	189b      	adds	r3, r3, r2
 8018206:	19db      	adds	r3, r3, r7
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	2b08      	cmp	r3, #8
 801820c:	d822      	bhi.n	8018254 <UART_SetConfig+0x4b0>
 801820e:	009a      	lsls	r2, r3, #2
 8018210:	4b32      	ldr	r3, [pc, #200]	@ (80182dc <UART_SetConfig+0x538>)
 8018212:	18d3      	adds	r3, r2, r3
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018218:	f7fd fd3c 	bl	8015c94 <HAL_RCC_GetPCLK1Freq>
 801821c:	0003      	movs	r3, r0
 801821e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018220:	e021      	b.n	8018266 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018222:	f7fd fd4d 	bl	8015cc0 <HAL_RCC_GetPCLK2Freq>
 8018226:	0003      	movs	r3, r0
 8018228:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801822a:	e01c      	b.n	8018266 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801822c:	4b28      	ldr	r3, [pc, #160]	@ (80182d0 <UART_SetConfig+0x52c>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	2210      	movs	r2, #16
 8018232:	4013      	ands	r3, r2
 8018234:	d002      	beq.n	801823c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018236:	4b27      	ldr	r3, [pc, #156]	@ (80182d4 <UART_SetConfig+0x530>)
 8018238:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801823a:	e014      	b.n	8018266 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801823c:	4b26      	ldr	r3, [pc, #152]	@ (80182d8 <UART_SetConfig+0x534>)
 801823e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018240:	e011      	b.n	8018266 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018242:	f7fd fc77 	bl	8015b34 <HAL_RCC_GetSysClockFreq>
 8018246:	0003      	movs	r3, r0
 8018248:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801824a:	e00c      	b.n	8018266 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801824c:	2380      	movs	r3, #128	@ 0x80
 801824e:	021b      	lsls	r3, r3, #8
 8018250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018252:	e008      	b.n	8018266 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018254:	2300      	movs	r3, #0
 8018256:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018258:	231a      	movs	r3, #26
 801825a:	2218      	movs	r2, #24
 801825c:	189b      	adds	r3, r3, r2
 801825e:	19db      	adds	r3, r3, r7
 8018260:	2201      	movs	r2, #1
 8018262:	701a      	strb	r2, [r3, #0]
        break;
 8018264:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8018266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018268:	2b00      	cmp	r3, #0
 801826a:	d020      	beq.n	80182ae <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801826c:	69fb      	ldr	r3, [r7, #28]
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	085a      	lsrs	r2, r3, #1
 8018272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018274:	18d2      	adds	r2, r2, r3
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	0019      	movs	r1, r3
 801827c:	0010      	movs	r0, r2
 801827e:	f7e7 ff91 	bl	80001a4 <__udivsi3>
 8018282:	0003      	movs	r3, r0
 8018284:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018288:	2b0f      	cmp	r3, #15
 801828a:	d90a      	bls.n	80182a2 <UART_SetConfig+0x4fe>
 801828c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801828e:	2380      	movs	r3, #128	@ 0x80
 8018290:	025b      	lsls	r3, r3, #9
 8018292:	429a      	cmp	r2, r3
 8018294:	d205      	bcs.n	80182a2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018298:	b29a      	uxth	r2, r3
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	60da      	str	r2, [r3, #12]
 80182a0:	e005      	b.n	80182ae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80182a2:	231a      	movs	r3, #26
 80182a4:	2218      	movs	r2, #24
 80182a6:	189b      	adds	r3, r3, r2
 80182a8:	19db      	adds	r3, r3, r7
 80182aa:	2201      	movs	r2, #1
 80182ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80182ae:	69fb      	ldr	r3, [r7, #28]
 80182b0:	2200      	movs	r2, #0
 80182b2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	2200      	movs	r2, #0
 80182b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80182ba:	231a      	movs	r3, #26
 80182bc:	2218      	movs	r2, #24
 80182be:	189b      	adds	r3, r3, r2
 80182c0:	19db      	adds	r3, r3, r7
 80182c2:	781b      	ldrb	r3, [r3, #0]
}
 80182c4:	0018      	movs	r0, r3
 80182c6:	46bd      	mov	sp, r7
 80182c8:	b00e      	add	sp, #56	@ 0x38
 80182ca:	bdb0      	pop	{r4, r5, r7, pc}
 80182cc:	08025820 	.word	0x08025820
 80182d0:	40021000 	.word	0x40021000
 80182d4:	003d0900 	.word	0x003d0900
 80182d8:	00f42400 	.word	0x00f42400
 80182dc:	08025844 	.word	0x08025844

080182e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b082      	sub	sp, #8
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182ec:	2201      	movs	r2, #1
 80182ee:	4013      	ands	r3, r2
 80182f0:	d00b      	beq.n	801830a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	685b      	ldr	r3, [r3, #4]
 80182f8:	4a4a      	ldr	r2, [pc, #296]	@ (8018424 <UART_AdvFeatureConfig+0x144>)
 80182fa:	4013      	ands	r3, r2
 80182fc:	0019      	movs	r1, r3
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	430a      	orrs	r2, r1
 8018308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801830e:	2202      	movs	r2, #2
 8018310:	4013      	ands	r3, r2
 8018312:	d00b      	beq.n	801832c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	685b      	ldr	r3, [r3, #4]
 801831a:	4a43      	ldr	r2, [pc, #268]	@ (8018428 <UART_AdvFeatureConfig+0x148>)
 801831c:	4013      	ands	r3, r2
 801831e:	0019      	movs	r1, r3
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	430a      	orrs	r2, r1
 801832a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018330:	2204      	movs	r2, #4
 8018332:	4013      	ands	r3, r2
 8018334:	d00b      	beq.n	801834e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	685b      	ldr	r3, [r3, #4]
 801833c:	4a3b      	ldr	r2, [pc, #236]	@ (801842c <UART_AdvFeatureConfig+0x14c>)
 801833e:	4013      	ands	r3, r2
 8018340:	0019      	movs	r1, r3
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	430a      	orrs	r2, r1
 801834c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018352:	2208      	movs	r2, #8
 8018354:	4013      	ands	r3, r2
 8018356:	d00b      	beq.n	8018370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	685b      	ldr	r3, [r3, #4]
 801835e:	4a34      	ldr	r2, [pc, #208]	@ (8018430 <UART_AdvFeatureConfig+0x150>)
 8018360:	4013      	ands	r3, r2
 8018362:	0019      	movs	r1, r3
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	430a      	orrs	r2, r1
 801836e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018374:	2210      	movs	r2, #16
 8018376:	4013      	ands	r3, r2
 8018378:	d00b      	beq.n	8018392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	689b      	ldr	r3, [r3, #8]
 8018380:	4a2c      	ldr	r2, [pc, #176]	@ (8018434 <UART_AdvFeatureConfig+0x154>)
 8018382:	4013      	ands	r3, r2
 8018384:	0019      	movs	r1, r3
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	430a      	orrs	r2, r1
 8018390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018396:	2220      	movs	r2, #32
 8018398:	4013      	ands	r3, r2
 801839a:	d00b      	beq.n	80183b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	689b      	ldr	r3, [r3, #8]
 80183a2:	4a25      	ldr	r2, [pc, #148]	@ (8018438 <UART_AdvFeatureConfig+0x158>)
 80183a4:	4013      	ands	r3, r2
 80183a6:	0019      	movs	r1, r3
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	430a      	orrs	r2, r1
 80183b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183b8:	2240      	movs	r2, #64	@ 0x40
 80183ba:	4013      	ands	r3, r2
 80183bc:	d01d      	beq.n	80183fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	685b      	ldr	r3, [r3, #4]
 80183c4:	4a1d      	ldr	r2, [pc, #116]	@ (801843c <UART_AdvFeatureConfig+0x15c>)
 80183c6:	4013      	ands	r3, r2
 80183c8:	0019      	movs	r1, r3
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	430a      	orrs	r2, r1
 80183d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80183da:	2380      	movs	r3, #128	@ 0x80
 80183dc:	035b      	lsls	r3, r3, #13
 80183de:	429a      	cmp	r2, r3
 80183e0:	d10b      	bne.n	80183fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	685b      	ldr	r3, [r3, #4]
 80183e8:	4a15      	ldr	r2, [pc, #84]	@ (8018440 <UART_AdvFeatureConfig+0x160>)
 80183ea:	4013      	ands	r3, r2
 80183ec:	0019      	movs	r1, r3
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	430a      	orrs	r2, r1
 80183f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183fe:	2280      	movs	r2, #128	@ 0x80
 8018400:	4013      	ands	r3, r2
 8018402:	d00b      	beq.n	801841c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	4a0e      	ldr	r2, [pc, #56]	@ (8018444 <UART_AdvFeatureConfig+0x164>)
 801840c:	4013      	ands	r3, r2
 801840e:	0019      	movs	r1, r3
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	430a      	orrs	r2, r1
 801841a:	605a      	str	r2, [r3, #4]
  }
}
 801841c:	46c0      	nop			@ (mov r8, r8)
 801841e:	46bd      	mov	sp, r7
 8018420:	b002      	add	sp, #8
 8018422:	bd80      	pop	{r7, pc}
 8018424:	fffdffff 	.word	0xfffdffff
 8018428:	fffeffff 	.word	0xfffeffff
 801842c:	fffbffff 	.word	0xfffbffff
 8018430:	ffff7fff 	.word	0xffff7fff
 8018434:	ffffefff 	.word	0xffffefff
 8018438:	ffffdfff 	.word	0xffffdfff
 801843c:	ffefffff 	.word	0xffefffff
 8018440:	ff9fffff 	.word	0xff9fffff
 8018444:	fff7ffff 	.word	0xfff7ffff

08018448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b092      	sub	sp, #72	@ 0x48
 801844c:	af02      	add	r7, sp, #8
 801844e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2284      	movs	r2, #132	@ 0x84
 8018454:	2100      	movs	r1, #0
 8018456:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018458:	f7f6 fd20 	bl	800ee9c <HAL_GetTick>
 801845c:	0003      	movs	r3, r0
 801845e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2208      	movs	r2, #8
 8018468:	4013      	ands	r3, r2
 801846a:	2b08      	cmp	r3, #8
 801846c:	d12c      	bne.n	80184c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801846e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018470:	2280      	movs	r2, #128	@ 0x80
 8018472:	0391      	lsls	r1, r2, #14
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	4a46      	ldr	r2, [pc, #280]	@ (8018590 <UART_CheckIdleState+0x148>)
 8018478:	9200      	str	r2, [sp, #0]
 801847a:	2200      	movs	r2, #0
 801847c:	f000 f88c 	bl	8018598 <UART_WaitOnFlagUntilTimeout>
 8018480:	1e03      	subs	r3, r0, #0
 8018482:	d021      	beq.n	80184c8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018484:	f3ef 8310 	mrs	r3, PRIMASK
 8018488:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801848c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801848e:	2301      	movs	r3, #1
 8018490:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018494:	f383 8810 	msr	PRIMASK, r3
}
 8018498:	46c0      	nop			@ (mov r8, r8)
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	681a      	ldr	r2, [r3, #0]
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	2180      	movs	r1, #128	@ 0x80
 80184a6:	438a      	bics	r2, r1
 80184a8:	601a      	str	r2, [r3, #0]
 80184aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184b0:	f383 8810 	msr	PRIMASK, r3
}
 80184b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2220      	movs	r2, #32
 80184ba:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2278      	movs	r2, #120	@ 0x78
 80184c0:	2100      	movs	r1, #0
 80184c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80184c4:	2303      	movs	r3, #3
 80184c6:	e05f      	b.n	8018588 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2204      	movs	r2, #4
 80184d0:	4013      	ands	r3, r2
 80184d2:	2b04      	cmp	r3, #4
 80184d4:	d146      	bne.n	8018564 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80184d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184d8:	2280      	movs	r2, #128	@ 0x80
 80184da:	03d1      	lsls	r1, r2, #15
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	4a2c      	ldr	r2, [pc, #176]	@ (8018590 <UART_CheckIdleState+0x148>)
 80184e0:	9200      	str	r2, [sp, #0]
 80184e2:	2200      	movs	r2, #0
 80184e4:	f000 f858 	bl	8018598 <UART_WaitOnFlagUntilTimeout>
 80184e8:	1e03      	subs	r3, r0, #0
 80184ea:	d03b      	beq.n	8018564 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184ec:	f3ef 8310 	mrs	r3, PRIMASK
 80184f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80184f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80184f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80184f6:	2301      	movs	r3, #1
 80184f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184fa:	693b      	ldr	r3, [r7, #16]
 80184fc:	f383 8810 	msr	PRIMASK, r3
}
 8018500:	46c0      	nop			@ (mov r8, r8)
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	681a      	ldr	r2, [r3, #0]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	4921      	ldr	r1, [pc, #132]	@ (8018594 <UART_CheckIdleState+0x14c>)
 801850e:	400a      	ands	r2, r1
 8018510:	601a      	str	r2, [r3, #0]
 8018512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018514:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018516:	697b      	ldr	r3, [r7, #20]
 8018518:	f383 8810 	msr	PRIMASK, r3
}
 801851c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801851e:	f3ef 8310 	mrs	r3, PRIMASK
 8018522:	61bb      	str	r3, [r7, #24]
  return(result);
 8018524:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018526:	633b      	str	r3, [r7, #48]	@ 0x30
 8018528:	2301      	movs	r3, #1
 801852a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	f383 8810 	msr	PRIMASK, r3
}
 8018532:	46c0      	nop			@ (mov r8, r8)
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	689a      	ldr	r2, [r3, #8]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2101      	movs	r1, #1
 8018540:	438a      	bics	r2, r1
 8018542:	609a      	str	r2, [r3, #8]
 8018544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018546:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018548:	6a3b      	ldr	r3, [r7, #32]
 801854a:	f383 8810 	msr	PRIMASK, r3
}
 801854e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	2280      	movs	r2, #128	@ 0x80
 8018554:	2120      	movs	r1, #32
 8018556:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2278      	movs	r2, #120	@ 0x78
 801855c:	2100      	movs	r1, #0
 801855e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018560:	2303      	movs	r3, #3
 8018562:	e011      	b.n	8018588 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	2220      	movs	r2, #32
 8018568:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2280      	movs	r2, #128	@ 0x80
 801856e:	2120      	movs	r1, #32
 8018570:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2200      	movs	r2, #0
 8018576:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2200      	movs	r2, #0
 801857c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	2278      	movs	r2, #120	@ 0x78
 8018582:	2100      	movs	r1, #0
 8018584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018586:	2300      	movs	r3, #0
}
 8018588:	0018      	movs	r0, r3
 801858a:	46bd      	mov	sp, r7
 801858c:	b010      	add	sp, #64	@ 0x40
 801858e:	bd80      	pop	{r7, pc}
 8018590:	01ffffff 	.word	0x01ffffff
 8018594:	fffffedf 	.word	0xfffffedf

08018598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	60f8      	str	r0, [r7, #12]
 80185a0:	60b9      	str	r1, [r7, #8]
 80185a2:	603b      	str	r3, [r7, #0]
 80185a4:	1dfb      	adds	r3, r7, #7
 80185a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80185a8:	e04b      	b.n	8018642 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80185aa:	69bb      	ldr	r3, [r7, #24]
 80185ac:	3301      	adds	r3, #1
 80185ae:	d048      	beq.n	8018642 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80185b0:	f7f6 fc74 	bl	800ee9c <HAL_GetTick>
 80185b4:	0002      	movs	r2, r0
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	1ad3      	subs	r3, r2, r3
 80185ba:	69ba      	ldr	r2, [r7, #24]
 80185bc:	429a      	cmp	r2, r3
 80185be:	d302      	bcc.n	80185c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80185c0:	69bb      	ldr	r3, [r7, #24]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d101      	bne.n	80185ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80185c6:	2303      	movs	r3, #3
 80185c8:	e04b      	b.n	8018662 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2204      	movs	r2, #4
 80185d2:	4013      	ands	r3, r2
 80185d4:	d035      	beq.n	8018642 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	69db      	ldr	r3, [r3, #28]
 80185dc:	2208      	movs	r2, #8
 80185de:	4013      	ands	r3, r2
 80185e0:	2b08      	cmp	r3, #8
 80185e2:	d111      	bne.n	8018608 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2208      	movs	r2, #8
 80185ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	0018      	movs	r0, r3
 80185f0:	f000 f9ca 	bl	8018988 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2284      	movs	r2, #132	@ 0x84
 80185f8:	2108      	movs	r1, #8
 80185fa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	2278      	movs	r2, #120	@ 0x78
 8018600:	2100      	movs	r1, #0
 8018602:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8018604:	2301      	movs	r3, #1
 8018606:	e02c      	b.n	8018662 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	69da      	ldr	r2, [r3, #28]
 801860e:	2380      	movs	r3, #128	@ 0x80
 8018610:	011b      	lsls	r3, r3, #4
 8018612:	401a      	ands	r2, r3
 8018614:	2380      	movs	r3, #128	@ 0x80
 8018616:	011b      	lsls	r3, r3, #4
 8018618:	429a      	cmp	r2, r3
 801861a:	d112      	bne.n	8018642 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	2280      	movs	r2, #128	@ 0x80
 8018622:	0112      	lsls	r2, r2, #4
 8018624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	0018      	movs	r0, r3
 801862a:	f000 f9ad 	bl	8018988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2284      	movs	r2, #132	@ 0x84
 8018632:	2120      	movs	r1, #32
 8018634:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	2278      	movs	r2, #120	@ 0x78
 801863a:	2100      	movs	r1, #0
 801863c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801863e:	2303      	movs	r3, #3
 8018640:	e00f      	b.n	8018662 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	69db      	ldr	r3, [r3, #28]
 8018648:	68ba      	ldr	r2, [r7, #8]
 801864a:	4013      	ands	r3, r2
 801864c:	68ba      	ldr	r2, [r7, #8]
 801864e:	1ad3      	subs	r3, r2, r3
 8018650:	425a      	negs	r2, r3
 8018652:	4153      	adcs	r3, r2
 8018654:	b2db      	uxtb	r3, r3
 8018656:	001a      	movs	r2, r3
 8018658:	1dfb      	adds	r3, r7, #7
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	429a      	cmp	r2, r3
 801865e:	d0a4      	beq.n	80185aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018660:	2300      	movs	r3, #0
}
 8018662:	0018      	movs	r0, r3
 8018664:	46bd      	mov	sp, r7
 8018666:	b004      	add	sp, #16
 8018668:	bd80      	pop	{r7, pc}
	...

0801866c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b090      	sub	sp, #64	@ 0x40
 8018670:	af00      	add	r7, sp, #0
 8018672:	60f8      	str	r0, [r7, #12]
 8018674:	60b9      	str	r1, [r7, #8]
 8018676:	1dbb      	adds	r3, r7, #6
 8018678:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	68ba      	ldr	r2, [r7, #8]
 801867e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	1dba      	adds	r2, r7, #6
 8018684:	2158      	movs	r1, #88	@ 0x58
 8018686:	8812      	ldrh	r2, [r2, #0]
 8018688:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	1dba      	adds	r2, r7, #6
 801868e:	215a      	movs	r1, #90	@ 0x5a
 8018690:	8812      	ldrh	r2, [r2, #0]
 8018692:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2200      	movs	r2, #0
 8018698:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	689a      	ldr	r2, [r3, #8]
 801869e:	2380      	movs	r3, #128	@ 0x80
 80186a0:	015b      	lsls	r3, r3, #5
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d10d      	bne.n	80186c2 <UART_Start_Receive_IT+0x56>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	691b      	ldr	r3, [r3, #16]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d104      	bne.n	80186b8 <UART_Start_Receive_IT+0x4c>
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	225c      	movs	r2, #92	@ 0x5c
 80186b2:	4950      	ldr	r1, [pc, #320]	@ (80187f4 <UART_Start_Receive_IT+0x188>)
 80186b4:	5299      	strh	r1, [r3, r2]
 80186b6:	e02e      	b.n	8018716 <UART_Start_Receive_IT+0xaa>
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	225c      	movs	r2, #92	@ 0x5c
 80186bc:	21ff      	movs	r1, #255	@ 0xff
 80186be:	5299      	strh	r1, [r3, r2]
 80186c0:	e029      	b.n	8018716 <UART_Start_Receive_IT+0xaa>
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	689b      	ldr	r3, [r3, #8]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d10d      	bne.n	80186e6 <UART_Start_Receive_IT+0x7a>
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	691b      	ldr	r3, [r3, #16]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d104      	bne.n	80186dc <UART_Start_Receive_IT+0x70>
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	225c      	movs	r2, #92	@ 0x5c
 80186d6:	21ff      	movs	r1, #255	@ 0xff
 80186d8:	5299      	strh	r1, [r3, r2]
 80186da:	e01c      	b.n	8018716 <UART_Start_Receive_IT+0xaa>
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	225c      	movs	r2, #92	@ 0x5c
 80186e0:	217f      	movs	r1, #127	@ 0x7f
 80186e2:	5299      	strh	r1, [r3, r2]
 80186e4:	e017      	b.n	8018716 <UART_Start_Receive_IT+0xaa>
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	689a      	ldr	r2, [r3, #8]
 80186ea:	2380      	movs	r3, #128	@ 0x80
 80186ec:	055b      	lsls	r3, r3, #21
 80186ee:	429a      	cmp	r2, r3
 80186f0:	d10d      	bne.n	801870e <UART_Start_Receive_IT+0xa2>
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	691b      	ldr	r3, [r3, #16]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d104      	bne.n	8018704 <UART_Start_Receive_IT+0x98>
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	225c      	movs	r2, #92	@ 0x5c
 80186fe:	217f      	movs	r1, #127	@ 0x7f
 8018700:	5299      	strh	r1, [r3, r2]
 8018702:	e008      	b.n	8018716 <UART_Start_Receive_IT+0xaa>
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	225c      	movs	r2, #92	@ 0x5c
 8018708:	213f      	movs	r1, #63	@ 0x3f
 801870a:	5299      	strh	r1, [r3, r2]
 801870c:	e003      	b.n	8018716 <UART_Start_Receive_IT+0xaa>
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	225c      	movs	r2, #92	@ 0x5c
 8018712:	2100      	movs	r1, #0
 8018714:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	2284      	movs	r2, #132	@ 0x84
 801871a:	2100      	movs	r1, #0
 801871c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	2280      	movs	r2, #128	@ 0x80
 8018722:	2122      	movs	r1, #34	@ 0x22
 8018724:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018726:	f3ef 8310 	mrs	r3, PRIMASK
 801872a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018730:	2301      	movs	r3, #1
 8018732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018736:	f383 8810 	msr	PRIMASK, r3
}
 801873a:	46c0      	nop			@ (mov r8, r8)
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	689a      	ldr	r2, [r3, #8]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	2101      	movs	r1, #1
 8018748:	430a      	orrs	r2, r1
 801874a:	609a      	str	r2, [r3, #8]
 801874c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801874e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018752:	f383 8810 	msr	PRIMASK, r3
}
 8018756:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	689a      	ldr	r2, [r3, #8]
 801875c:	2380      	movs	r3, #128	@ 0x80
 801875e:	015b      	lsls	r3, r3, #5
 8018760:	429a      	cmp	r2, r3
 8018762:	d107      	bne.n	8018774 <UART_Start_Receive_IT+0x108>
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	691b      	ldr	r3, [r3, #16]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d103      	bne.n	8018774 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	4a22      	ldr	r2, [pc, #136]	@ (80187f8 <UART_Start_Receive_IT+0x18c>)
 8018770:	669a      	str	r2, [r3, #104]	@ 0x68
 8018772:	e002      	b.n	801877a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	4a21      	ldr	r2, [pc, #132]	@ (80187fc <UART_Start_Receive_IT+0x190>)
 8018778:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	691b      	ldr	r3, [r3, #16]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d019      	beq.n	80187b6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018782:	f3ef 8310 	mrs	r3, PRIMASK
 8018786:	61fb      	str	r3, [r7, #28]
  return(result);
 8018788:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801878a:	637b      	str	r3, [r7, #52]	@ 0x34
 801878c:	2301      	movs	r3, #1
 801878e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018790:	6a3b      	ldr	r3, [r7, #32]
 8018792:	f383 8810 	msr	PRIMASK, r3
}
 8018796:	46c0      	nop			@ (mov r8, r8)
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	681a      	ldr	r2, [r3, #0]
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	2190      	movs	r1, #144	@ 0x90
 80187a4:	0049      	lsls	r1, r1, #1
 80187a6:	430a      	orrs	r2, r1
 80187a8:	601a      	str	r2, [r3, #0]
 80187aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187ac:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b0:	f383 8810 	msr	PRIMASK, r3
}
 80187b4:	e018      	b.n	80187e8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187b6:	f3ef 8310 	mrs	r3, PRIMASK
 80187ba:	613b      	str	r3, [r7, #16]
  return(result);
 80187bc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80187be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80187c0:	2301      	movs	r3, #1
 80187c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c4:	697b      	ldr	r3, [r7, #20]
 80187c6:	f383 8810 	msr	PRIMASK, r3
}
 80187ca:	46c0      	nop			@ (mov r8, r8)
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	681a      	ldr	r2, [r3, #0]
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	2120      	movs	r1, #32
 80187d8:	430a      	orrs	r2, r1
 80187da:	601a      	str	r2, [r3, #0]
 80187dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187e0:	69bb      	ldr	r3, [r7, #24]
 80187e2:	f383 8810 	msr	PRIMASK, r3
}
 80187e6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80187e8:	2300      	movs	r3, #0
}
 80187ea:	0018      	movs	r0, r3
 80187ec:	46bd      	mov	sp, r7
 80187ee:	b010      	add	sp, #64	@ 0x40
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	46c0      	nop			@ (mov r8, r8)
 80187f4:	000001ff 	.word	0x000001ff
 80187f8:	08018f6d 	.word	0x08018f6d
 80187fc:	08018da1 	.word	0x08018da1

08018800 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b090      	sub	sp, #64	@ 0x40
 8018804:	af00      	add	r7, sp, #0
 8018806:	60f8      	str	r0, [r7, #12]
 8018808:	60b9      	str	r1, [r7, #8]
 801880a:	1dbb      	adds	r3, r7, #6
 801880c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	68ba      	ldr	r2, [r7, #8]
 8018812:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	1dba      	adds	r2, r7, #6
 8018818:	2158      	movs	r1, #88	@ 0x58
 801881a:	8812      	ldrh	r2, [r2, #0]
 801881c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	2284      	movs	r2, #132	@ 0x84
 8018822:	2100      	movs	r1, #0
 8018824:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	2280      	movs	r2, #128	@ 0x80
 801882a:	2122      	movs	r1, #34	@ 0x22
 801882c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018832:	2b00      	cmp	r3, #0
 8018834:	d028      	beq.n	8018888 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801883a:	4a3e      	ldr	r2, [pc, #248]	@ (8018934 <UART_Start_Receive_DMA+0x134>)
 801883c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018842:	4a3d      	ldr	r2, [pc, #244]	@ (8018938 <UART_Start_Receive_DMA+0x138>)
 8018844:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801884a:	4a3c      	ldr	r2, [pc, #240]	@ (801893c <UART_Start_Receive_DMA+0x13c>)
 801884c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018852:	2200      	movs	r2, #0
 8018854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	3324      	adds	r3, #36	@ 0x24
 8018860:	0019      	movs	r1, r3
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018866:	001a      	movs	r2, r3
 8018868:	1dbb      	adds	r3, r7, #6
 801886a:	881b      	ldrh	r3, [r3, #0]
 801886c:	f7f7 f868 	bl	800f940 <HAL_DMA_Start_IT>
 8018870:	1e03      	subs	r3, r0, #0
 8018872:	d009      	beq.n	8018888 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	2284      	movs	r2, #132	@ 0x84
 8018878:	2110      	movs	r1, #16
 801887a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	2280      	movs	r2, #128	@ 0x80
 8018880:	2120      	movs	r1, #32
 8018882:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018884:	2301      	movs	r3, #1
 8018886:	e050      	b.n	801892a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	691b      	ldr	r3, [r3, #16]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d019      	beq.n	80188c4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018890:	f3ef 8310 	mrs	r3, PRIMASK
 8018894:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801889a:	2301      	movs	r3, #1
 801889c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188a0:	f383 8810 	msr	PRIMASK, r3
}
 80188a4:	46c0      	nop			@ (mov r8, r8)
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2180      	movs	r1, #128	@ 0x80
 80188b2:	0049      	lsls	r1, r1, #1
 80188b4:	430a      	orrs	r2, r1
 80188b6:	601a      	str	r2, [r3, #0]
 80188b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188be:	f383 8810 	msr	PRIMASK, r3
}
 80188c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188c4:	f3ef 8310 	mrs	r3, PRIMASK
 80188c8:	613b      	str	r3, [r7, #16]
  return(result);
 80188ca:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80188cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80188ce:	2301      	movs	r3, #1
 80188d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188d2:	697b      	ldr	r3, [r7, #20]
 80188d4:	f383 8810 	msr	PRIMASK, r3
}
 80188d8:	46c0      	nop			@ (mov r8, r8)
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	689a      	ldr	r2, [r3, #8]
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2101      	movs	r1, #1
 80188e6:	430a      	orrs	r2, r1
 80188e8:	609a      	str	r2, [r3, #8]
 80188ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188ee:	69bb      	ldr	r3, [r7, #24]
 80188f0:	f383 8810 	msr	PRIMASK, r3
}
 80188f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188f6:	f3ef 8310 	mrs	r3, PRIMASK
 80188fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80188fc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80188fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8018900:	2301      	movs	r3, #1
 8018902:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018904:	6a3b      	ldr	r3, [r7, #32]
 8018906:	f383 8810 	msr	PRIMASK, r3
}
 801890a:	46c0      	nop			@ (mov r8, r8)
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	689a      	ldr	r2, [r3, #8]
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	2140      	movs	r1, #64	@ 0x40
 8018918:	430a      	orrs	r2, r1
 801891a:	609a      	str	r2, [r3, #8]
 801891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801891e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018922:	f383 8810 	msr	PRIMASK, r3
}
 8018926:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8018928:	2300      	movs	r3, #0
}
 801892a:	0018      	movs	r0, r3
 801892c:	46bd      	mov	sp, r7
 801892e:	b010      	add	sp, #64	@ 0x40
 8018930:	bd80      	pop	{r7, pc}
 8018932:	46c0      	nop			@ (mov r8, r8)
 8018934:	08018b11 	.word	0x08018b11
 8018938:	08018c45 	.word	0x08018c45
 801893c:	08018c8d 	.word	0x08018c8d

08018940 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b086      	sub	sp, #24
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018948:	f3ef 8310 	mrs	r3, PRIMASK
 801894c:	60bb      	str	r3, [r7, #8]
  return(result);
 801894e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018950:	617b      	str	r3, [r7, #20]
 8018952:	2301      	movs	r3, #1
 8018954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	f383 8810 	msr	PRIMASK, r3
}
 801895c:	46c0      	nop			@ (mov r8, r8)
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	681a      	ldr	r2, [r3, #0]
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	21c0      	movs	r1, #192	@ 0xc0
 801896a:	438a      	bics	r2, r1
 801896c:	601a      	str	r2, [r3, #0]
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018972:	693b      	ldr	r3, [r7, #16]
 8018974:	f383 8810 	msr	PRIMASK, r3
}
 8018978:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2220      	movs	r2, #32
 801897e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018980:	46c0      	nop			@ (mov r8, r8)
 8018982:	46bd      	mov	sp, r7
 8018984:	b006      	add	sp, #24
 8018986:	bd80      	pop	{r7, pc}

08018988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b08e      	sub	sp, #56	@ 0x38
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018990:	f3ef 8310 	mrs	r3, PRIMASK
 8018994:	617b      	str	r3, [r7, #20]
  return(result);
 8018996:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018998:	637b      	str	r3, [r7, #52]	@ 0x34
 801899a:	2301      	movs	r3, #1
 801899c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801899e:	69bb      	ldr	r3, [r7, #24]
 80189a0:	f383 8810 	msr	PRIMASK, r3
}
 80189a4:	46c0      	nop			@ (mov r8, r8)
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	681a      	ldr	r2, [r3, #0]
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	4926      	ldr	r1, [pc, #152]	@ (8018a4c <UART_EndRxTransfer+0xc4>)
 80189b2:	400a      	ands	r2, r1
 80189b4:	601a      	str	r2, [r3, #0]
 80189b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ba:	69fb      	ldr	r3, [r7, #28]
 80189bc:	f383 8810 	msr	PRIMASK, r3
}
 80189c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189c2:	f3ef 8310 	mrs	r3, PRIMASK
 80189c6:	623b      	str	r3, [r7, #32]
  return(result);
 80189c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80189ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80189cc:	2301      	movs	r3, #1
 80189ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d2:	f383 8810 	msr	PRIMASK, r3
}
 80189d6:	46c0      	nop			@ (mov r8, r8)
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	689a      	ldr	r2, [r3, #8]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	2101      	movs	r1, #1
 80189e4:	438a      	bics	r2, r1
 80189e6:	609a      	str	r2, [r3, #8]
 80189e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189ee:	f383 8810 	msr	PRIMASK, r3
}
 80189f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189f8:	2b01      	cmp	r3, #1
 80189fa:	d118      	bne.n	8018a2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189fc:	f3ef 8310 	mrs	r3, PRIMASK
 8018a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a06:	2301      	movs	r3, #1
 8018a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	f383 8810 	msr	PRIMASK, r3
}
 8018a10:	46c0      	nop			@ (mov r8, r8)
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	681a      	ldr	r2, [r3, #0]
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2110      	movs	r1, #16
 8018a1e:	438a      	bics	r2, r1
 8018a20:	601a      	str	r2, [r3, #0]
 8018a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	f383 8810 	msr	PRIMASK, r3
}
 8018a2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2280      	movs	r2, #128	@ 0x80
 8018a32:	2120      	movs	r1, #32
 8018a34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	2200      	movs	r2, #0
 8018a3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	2200      	movs	r2, #0
 8018a40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018a42:	46c0      	nop			@ (mov r8, r8)
 8018a44:	46bd      	mov	sp, r7
 8018a46:	b00e      	add	sp, #56	@ 0x38
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	46c0      	nop			@ (mov r8, r8)
 8018a4c:	fffffedf 	.word	0xfffffedf

08018a50 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b08c      	sub	sp, #48	@ 0x30
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2220      	movs	r2, #32
 8018a66:	4013      	ands	r3, r2
 8018a68:	d135      	bne.n	8018ad6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a6c:	2252      	movs	r2, #82	@ 0x52
 8018a6e:	2100      	movs	r1, #0
 8018a70:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a72:	f3ef 8310 	mrs	r3, PRIMASK
 8018a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a78:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	f383 8810 	msr	PRIMASK, r3
}
 8018a86:	46c0      	nop			@ (mov r8, r8)
 8018a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	689a      	ldr	r2, [r3, #8]
 8018a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	2180      	movs	r1, #128	@ 0x80
 8018a94:	438a      	bics	r2, r1
 8018a96:	609a      	str	r2, [r3, #8]
 8018a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	f383 8810 	msr	PRIMASK, r3
}
 8018aa2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8018aa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8018aaa:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8018aae:	2301      	movs	r3, #1
 8018ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ab2:	69fb      	ldr	r3, [r7, #28]
 8018ab4:	f383 8810 	msr	PRIMASK, r3
}
 8018ab8:	46c0      	nop			@ (mov r8, r8)
 8018aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	2140      	movs	r1, #64	@ 0x40
 8018ac6:	430a      	orrs	r2, r1
 8018ac8:	601a      	str	r2, [r3, #0]
 8018aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018acc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ace:	6a3b      	ldr	r3, [r7, #32]
 8018ad0:	f383 8810 	msr	PRIMASK, r3
}
 8018ad4:	e006      	b.n	8018ae4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ad8:	228c      	movs	r2, #140	@ 0x8c
 8018ada:	589b      	ldr	r3, [r3, r2]
 8018adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018ade:	0010      	movs	r0, r2
 8018ae0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018ae2:	46c0      	nop			@ (mov r8, r8)
 8018ae4:	46c0      	nop			@ (mov r8, r8)
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	b00c      	add	sp, #48	@ 0x30
 8018aea:	bd80      	pop	{r7, pc}

08018aec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018af8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	2288      	movs	r2, #136	@ 0x88
 8018afe:	589b      	ldr	r3, [r3, r2]
 8018b00:	68fa      	ldr	r2, [r7, #12]
 8018b02:	0010      	movs	r0, r2
 8018b04:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b06:	46c0      	nop			@ (mov r8, r8)
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	b004      	add	sp, #16
 8018b0c:	bd80      	pop	{r7, pc}
	...

08018b10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b094      	sub	sp, #80	@ 0x50
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	2220      	movs	r2, #32
 8018b26:	4013      	ands	r3, r2
 8018b28:	d16f      	bne.n	8018c0a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b2c:	225a      	movs	r2, #90	@ 0x5a
 8018b2e:	2100      	movs	r1, #0
 8018b30:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b32:	f3ef 8310 	mrs	r3, PRIMASK
 8018b36:	61bb      	str	r3, [r7, #24]
  return(result);
 8018b38:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b40:	69fb      	ldr	r3, [r7, #28]
 8018b42:	f383 8810 	msr	PRIMASK, r3
}
 8018b46:	46c0      	nop			@ (mov r8, r8)
 8018b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	681a      	ldr	r2, [r3, #0]
 8018b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	493b      	ldr	r1, [pc, #236]	@ (8018c40 <UART_DMAReceiveCplt+0x130>)
 8018b54:	400a      	ands	r2, r1
 8018b56:	601a      	str	r2, [r3, #0]
 8018b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018b5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	f383 8810 	msr	PRIMASK, r3
}
 8018b62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b64:	f3ef 8310 	mrs	r3, PRIMASK
 8018b68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b6e:	2301      	movs	r3, #1
 8018b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b74:	f383 8810 	msr	PRIMASK, r3
}
 8018b78:	46c0      	nop			@ (mov r8, r8)
 8018b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	689a      	ldr	r2, [r3, #8]
 8018b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	2101      	movs	r1, #1
 8018b86:	438a      	bics	r2, r1
 8018b88:	609a      	str	r2, [r3, #8]
 8018b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b90:	f383 8810 	msr	PRIMASK, r3
}
 8018b94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b96:	f3ef 8310 	mrs	r3, PRIMASK
 8018b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ba0:	2301      	movs	r3, #1
 8018ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ba6:	f383 8810 	msr	PRIMASK, r3
}
 8018baa:	46c0      	nop			@ (mov r8, r8)
 8018bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	689a      	ldr	r2, [r3, #8]
 8018bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	2140      	movs	r1, #64	@ 0x40
 8018bb8:	438a      	bics	r2, r1
 8018bba:	609a      	str	r2, [r3, #8]
 8018bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bc2:	f383 8810 	msr	PRIMASK, r3
}
 8018bc6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bca:	2280      	movs	r2, #128	@ 0x80
 8018bcc:	2120      	movs	r1, #32
 8018bce:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d118      	bne.n	8018c0a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8018bdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8018bde:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018be2:	2301      	movs	r3, #1
 8018be4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	f383 8810 	msr	PRIMASK, r3
}
 8018bec:	46c0      	nop			@ (mov r8, r8)
 8018bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	2110      	movs	r1, #16
 8018bfa:	438a      	bics	r2, r1
 8018bfc:	601a      	str	r2, [r3, #0]
 8018bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c02:	697b      	ldr	r3, [r7, #20]
 8018c04:	f383 8810 	msr	PRIMASK, r3
}
 8018c08:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d109      	bne.n	8018c2c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c1a:	22ac      	movs	r2, #172	@ 0xac
 8018c1c:	589b      	ldr	r3, [r3, r2]
 8018c1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c20:	2158      	movs	r1, #88	@ 0x58
 8018c22:	5a51      	ldrh	r1, [r2, r1]
 8018c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c26:	0010      	movs	r0, r2
 8018c28:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018c2a:	e005      	b.n	8018c38 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c2e:	2294      	movs	r2, #148	@ 0x94
 8018c30:	589b      	ldr	r3, [r3, r2]
 8018c32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018c34:	0010      	movs	r0, r2
 8018c36:	4798      	blx	r3
}
 8018c38:	46c0      	nop			@ (mov r8, r8)
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	b014      	add	sp, #80	@ 0x50
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	fffffeff 	.word	0xfffffeff

08018c44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b084      	sub	sp, #16
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	2201      	movs	r2, #1
 8018c56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	d10b      	bne.n	8018c78 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	22ac      	movs	r2, #172	@ 0xac
 8018c64:	589b      	ldr	r3, [r3, r2]
 8018c66:	68fa      	ldr	r2, [r7, #12]
 8018c68:	2158      	movs	r1, #88	@ 0x58
 8018c6a:	5a52      	ldrh	r2, [r2, r1]
 8018c6c:	0852      	lsrs	r2, r2, #1
 8018c6e:	b291      	uxth	r1, r2
 8018c70:	68fa      	ldr	r2, [r7, #12]
 8018c72:	0010      	movs	r0, r2
 8018c74:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018c76:	e005      	b.n	8018c84 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	2290      	movs	r2, #144	@ 0x90
 8018c7c:	589b      	ldr	r3, [r3, r2]
 8018c7e:	68fa      	ldr	r2, [r7, #12]
 8018c80:	0010      	movs	r0, r2
 8018c82:	4798      	blx	r3
}
 8018c84:	46c0      	nop			@ (mov r8, r8)
 8018c86:	46bd      	mov	sp, r7
 8018c88:	b004      	add	sp, #16
 8018c8a:	bd80      	pop	{r7, pc}

08018c8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b086      	sub	sp, #24
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018c9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	2280      	movs	r2, #128	@ 0x80
 8018ca4:	589b      	ldr	r3, [r3, r2]
 8018ca6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	689b      	ldr	r3, [r3, #8]
 8018cae:	2280      	movs	r2, #128	@ 0x80
 8018cb0:	4013      	ands	r3, r2
 8018cb2:	2b80      	cmp	r3, #128	@ 0x80
 8018cb4:	d10a      	bne.n	8018ccc <UART_DMAError+0x40>
 8018cb6:	693b      	ldr	r3, [r7, #16]
 8018cb8:	2b21      	cmp	r3, #33	@ 0x21
 8018cba:	d107      	bne.n	8018ccc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	2252      	movs	r2, #82	@ 0x52
 8018cc0:	2100      	movs	r1, #0
 8018cc2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	0018      	movs	r0, r3
 8018cc8:	f7ff fe3a 	bl	8018940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	689b      	ldr	r3, [r3, #8]
 8018cd2:	2240      	movs	r2, #64	@ 0x40
 8018cd4:	4013      	ands	r3, r2
 8018cd6:	2b40      	cmp	r3, #64	@ 0x40
 8018cd8:	d10a      	bne.n	8018cf0 <UART_DMAError+0x64>
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	2b22      	cmp	r3, #34	@ 0x22
 8018cde:	d107      	bne.n	8018cf0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	225a      	movs	r2, #90	@ 0x5a
 8018ce4:	2100      	movs	r1, #0
 8018ce6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	0018      	movs	r0, r3
 8018cec:	f7ff fe4c 	bl	8018988 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	2284      	movs	r2, #132	@ 0x84
 8018cf4:	589b      	ldr	r3, [r3, r2]
 8018cf6:	2210      	movs	r2, #16
 8018cf8:	431a      	orrs	r2, r3
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	2184      	movs	r1, #132	@ 0x84
 8018cfe:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018d00:	697b      	ldr	r3, [r7, #20]
 8018d02:	2298      	movs	r2, #152	@ 0x98
 8018d04:	589b      	ldr	r3, [r3, r2]
 8018d06:	697a      	ldr	r2, [r7, #20]
 8018d08:	0010      	movs	r0, r2
 8018d0a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d0c:	46c0      	nop			@ (mov r8, r8)
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	b006      	add	sp, #24
 8018d12:	bd80      	pop	{r7, pc}

08018d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b084      	sub	sp, #16
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	225a      	movs	r2, #90	@ 0x5a
 8018d26:	2100      	movs	r1, #0
 8018d28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	2252      	movs	r2, #82	@ 0x52
 8018d2e:	2100      	movs	r1, #0
 8018d30:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	2298      	movs	r2, #152	@ 0x98
 8018d36:	589b      	ldr	r3, [r3, r2]
 8018d38:	68fa      	ldr	r2, [r7, #12]
 8018d3a:	0010      	movs	r0, r2
 8018d3c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d3e:	46c0      	nop			@ (mov r8, r8)
 8018d40:	46bd      	mov	sp, r7
 8018d42:	b004      	add	sp, #16
 8018d44:	bd80      	pop	{r7, pc}

08018d46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018d46:	b580      	push	{r7, lr}
 8018d48:	b086      	sub	sp, #24
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8018d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8018d54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018d56:	617b      	str	r3, [r7, #20]
 8018d58:	2301      	movs	r3, #1
 8018d5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	f383 8810 	msr	PRIMASK, r3
}
 8018d62:	46c0      	nop			@ (mov r8, r8)
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	2140      	movs	r1, #64	@ 0x40
 8018d70:	438a      	bics	r2, r1
 8018d72:	601a      	str	r2, [r3, #0]
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	f383 8810 	msr	PRIMASK, r3
}
 8018d7e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2220      	movs	r2, #32
 8018d84:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	2200      	movs	r2, #0
 8018d8a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	228c      	movs	r2, #140	@ 0x8c
 8018d90:	589b      	ldr	r3, [r3, r2]
 8018d92:	687a      	ldr	r2, [r7, #4]
 8018d94:	0010      	movs	r0, r2
 8018d96:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018d98:	46c0      	nop			@ (mov r8, r8)
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	b006      	add	sp, #24
 8018d9e:	bd80      	pop	{r7, pc}

08018da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b094      	sub	sp, #80	@ 0x50
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018da8:	204e      	movs	r0, #78	@ 0x4e
 8018daa:	183b      	adds	r3, r7, r0
 8018dac:	687a      	ldr	r2, [r7, #4]
 8018dae:	215c      	movs	r1, #92	@ 0x5c
 8018db0:	5a52      	ldrh	r2, [r2, r1]
 8018db2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	2280      	movs	r2, #128	@ 0x80
 8018db8:	589b      	ldr	r3, [r3, r2]
 8018dba:	2b22      	cmp	r3, #34	@ 0x22
 8018dbc:	d000      	beq.n	8018dc0 <UART_RxISR_8BIT+0x20>
 8018dbe:	e0c2      	b.n	8018f46 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018dc6:	214c      	movs	r1, #76	@ 0x4c
 8018dc8:	187b      	adds	r3, r7, r1
 8018dca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018dcc:	187b      	adds	r3, r7, r1
 8018dce:	881b      	ldrh	r3, [r3, #0]
 8018dd0:	b2da      	uxtb	r2, r3
 8018dd2:	183b      	adds	r3, r7, r0
 8018dd4:	881b      	ldrh	r3, [r3, #0]
 8018dd6:	b2d9      	uxtb	r1, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ddc:	400a      	ands	r2, r1
 8018dde:	b2d2      	uxtb	r2, r2
 8018de0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018de6:	1c5a      	adds	r2, r3, #1
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	225a      	movs	r2, #90	@ 0x5a
 8018df0:	5a9b      	ldrh	r3, [r3, r2]
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	3b01      	subs	r3, #1
 8018df6:	b299      	uxth	r1, r3
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	225a      	movs	r2, #90	@ 0x5a
 8018dfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	225a      	movs	r2, #90	@ 0x5a
 8018e02:	5a9b      	ldrh	r3, [r3, r2]
 8018e04:	b29b      	uxth	r3, r3
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d000      	beq.n	8018e0c <UART_RxISR_8BIT+0x6c>
 8018e0a:	e0a4      	b.n	8018f56 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8018e10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e16:	2301      	movs	r3, #1
 8018e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e1c:	f383 8810 	msr	PRIMASK, r3
}
 8018e20:	46c0      	nop			@ (mov r8, r8)
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	681a      	ldr	r2, [r3, #0]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	494c      	ldr	r1, [pc, #304]	@ (8018f60 <UART_RxISR_8BIT+0x1c0>)
 8018e2e:	400a      	ands	r2, r1
 8018e30:	601a      	str	r2, [r3, #0]
 8018e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e38:	f383 8810 	msr	PRIMASK, r3
}
 8018e3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8018e42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e48:	2301      	movs	r3, #1
 8018e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e4e:	f383 8810 	msr	PRIMASK, r3
}
 8018e52:	46c0      	nop			@ (mov r8, r8)
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	689a      	ldr	r2, [r3, #8]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2101      	movs	r1, #1
 8018e60:	438a      	bics	r2, r1
 8018e62:	609a      	str	r2, [r3, #8]
 8018e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e6a:	f383 8810 	msr	PRIMASK, r3
}
 8018e6e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2280      	movs	r2, #128	@ 0x80
 8018e74:	2120      	movs	r1, #32
 8018e76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	2200      	movs	r2, #0
 8018e82:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	4a36      	ldr	r2, [pc, #216]	@ (8018f64 <UART_RxISR_8BIT+0x1c4>)
 8018e8a:	4293      	cmp	r3, r2
 8018e8c:	d01f      	beq.n	8018ece <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	685a      	ldr	r2, [r3, #4]
 8018e94:	2380      	movs	r3, #128	@ 0x80
 8018e96:	041b      	lsls	r3, r3, #16
 8018e98:	4013      	ands	r3, r2
 8018e9a:	d018      	beq.n	8018ece <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8018ea0:	61bb      	str	r3, [r7, #24]
  return(result);
 8018ea2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ea6:	2301      	movs	r3, #1
 8018ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	f383 8810 	msr	PRIMASK, r3
}
 8018eb0:	46c0      	nop			@ (mov r8, r8)
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	681a      	ldr	r2, [r3, #0]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	492a      	ldr	r1, [pc, #168]	@ (8018f68 <UART_RxISR_8BIT+0x1c8>)
 8018ebe:	400a      	ands	r2, r1
 8018ec0:	601a      	str	r2, [r3, #0]
 8018ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ec4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ec6:	6a3b      	ldr	r3, [r7, #32]
 8018ec8:	f383 8810 	msr	PRIMASK, r3
}
 8018ecc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ed2:	2b01      	cmp	r3, #1
 8018ed4:	d130      	bne.n	8018f38 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018edc:	f3ef 8310 	mrs	r3, PRIMASK
 8018ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ee2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eea:	693b      	ldr	r3, [r7, #16]
 8018eec:	f383 8810 	msr	PRIMASK, r3
}
 8018ef0:	46c0      	nop			@ (mov r8, r8)
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	681a      	ldr	r2, [r3, #0]
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	2110      	movs	r1, #16
 8018efe:	438a      	bics	r2, r1
 8018f00:	601a      	str	r2, [r3, #0]
 8018f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f06:	697b      	ldr	r3, [r7, #20]
 8018f08:	f383 8810 	msr	PRIMASK, r3
}
 8018f0c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	69db      	ldr	r3, [r3, #28]
 8018f14:	2210      	movs	r2, #16
 8018f16:	4013      	ands	r3, r2
 8018f18:	2b10      	cmp	r3, #16
 8018f1a:	d103      	bne.n	8018f24 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2210      	movs	r2, #16
 8018f22:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	22ac      	movs	r2, #172	@ 0xac
 8018f28:	589b      	ldr	r3, [r3, r2]
 8018f2a:	687a      	ldr	r2, [r7, #4]
 8018f2c:	2158      	movs	r1, #88	@ 0x58
 8018f2e:	5a51      	ldrh	r1, [r2, r1]
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	0010      	movs	r0, r2
 8018f34:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018f36:	e00e      	b.n	8018f56 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	2294      	movs	r2, #148	@ 0x94
 8018f3c:	589b      	ldr	r3, [r3, r2]
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	0010      	movs	r0, r2
 8018f42:	4798      	blx	r3
}
 8018f44:	e007      	b.n	8018f56 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	699a      	ldr	r2, [r3, #24]
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	2108      	movs	r1, #8
 8018f52:	430a      	orrs	r2, r1
 8018f54:	619a      	str	r2, [r3, #24]
}
 8018f56:	46c0      	nop			@ (mov r8, r8)
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	b014      	add	sp, #80	@ 0x50
 8018f5c:	bd80      	pop	{r7, pc}
 8018f5e:	46c0      	nop			@ (mov r8, r8)
 8018f60:	fffffedf 	.word	0xfffffedf
 8018f64:	40004800 	.word	0x40004800
 8018f68:	fbffffff 	.word	0xfbffffff

08018f6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b094      	sub	sp, #80	@ 0x50
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018f74:	204e      	movs	r0, #78	@ 0x4e
 8018f76:	183b      	adds	r3, r7, r0
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	215c      	movs	r1, #92	@ 0x5c
 8018f7c:	5a52      	ldrh	r2, [r2, r1]
 8018f7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2280      	movs	r2, #128	@ 0x80
 8018f84:	589b      	ldr	r3, [r3, r2]
 8018f86:	2b22      	cmp	r3, #34	@ 0x22
 8018f88:	d000      	beq.n	8018f8c <UART_RxISR_16BIT+0x20>
 8018f8a:	e0c2      	b.n	8019112 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018f92:	214c      	movs	r1, #76	@ 0x4c
 8018f94:	187b      	adds	r3, r7, r1
 8018f96:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018f9e:	187b      	adds	r3, r7, r1
 8018fa0:	183a      	adds	r2, r7, r0
 8018fa2:	881b      	ldrh	r3, [r3, #0]
 8018fa4:	8812      	ldrh	r2, [r2, #0]
 8018fa6:	4013      	ands	r3, r2
 8018fa8:	b29a      	uxth	r2, r3
 8018faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018fb2:	1c9a      	adds	r2, r3, #2
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	225a      	movs	r2, #90	@ 0x5a
 8018fbc:	5a9b      	ldrh	r3, [r3, r2]
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	3b01      	subs	r3, #1
 8018fc2:	b299      	uxth	r1, r3
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	225a      	movs	r2, #90	@ 0x5a
 8018fc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	225a      	movs	r2, #90	@ 0x5a
 8018fce:	5a9b      	ldrh	r3, [r3, r2]
 8018fd0:	b29b      	uxth	r3, r3
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d000      	beq.n	8018fd8 <UART_RxISR_16BIT+0x6c>
 8018fd6:	e0a4      	b.n	8019122 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8018fdc:	623b      	str	r3, [r7, #32]
  return(result);
 8018fde:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8018fe2:	2301      	movs	r3, #1
 8018fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fe8:	f383 8810 	msr	PRIMASK, r3
}
 8018fec:	46c0      	nop			@ (mov r8, r8)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	681a      	ldr	r2, [r3, #0]
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	494c      	ldr	r1, [pc, #304]	@ (801912c <UART_RxISR_16BIT+0x1c0>)
 8018ffa:	400a      	ands	r2, r1
 8018ffc:	601a      	str	r2, [r3, #0]
 8018ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019000:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019004:	f383 8810 	msr	PRIMASK, r3
}
 8019008:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801900a:	f3ef 8310 	mrs	r3, PRIMASK
 801900e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8019010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019012:	643b      	str	r3, [r7, #64]	@ 0x40
 8019014:	2301      	movs	r3, #1
 8019016:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801901a:	f383 8810 	msr	PRIMASK, r3
}
 801901e:	46c0      	nop			@ (mov r8, r8)
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	689a      	ldr	r2, [r3, #8]
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	2101      	movs	r1, #1
 801902c:	438a      	bics	r2, r1
 801902e:	609a      	str	r2, [r3, #8]
 8019030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019032:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019036:	f383 8810 	msr	PRIMASK, r3
}
 801903a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2280      	movs	r2, #128	@ 0x80
 8019040:	2120      	movs	r1, #32
 8019042:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2200      	movs	r2, #0
 8019048:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2200      	movs	r2, #0
 801904e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	4a36      	ldr	r2, [pc, #216]	@ (8019130 <UART_RxISR_16BIT+0x1c4>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d01f      	beq.n	801909a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	685a      	ldr	r2, [r3, #4]
 8019060:	2380      	movs	r3, #128	@ 0x80
 8019062:	041b      	lsls	r3, r3, #16
 8019064:	4013      	ands	r3, r2
 8019066:	d018      	beq.n	801909a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019068:	f3ef 8310 	mrs	r3, PRIMASK
 801906c:	617b      	str	r3, [r7, #20]
  return(result);
 801906e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019072:	2301      	movs	r3, #1
 8019074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019076:	69bb      	ldr	r3, [r7, #24]
 8019078:	f383 8810 	msr	PRIMASK, r3
}
 801907c:	46c0      	nop			@ (mov r8, r8)
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	681a      	ldr	r2, [r3, #0]
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	492a      	ldr	r1, [pc, #168]	@ (8019134 <UART_RxISR_16BIT+0x1c8>)
 801908a:	400a      	ands	r2, r1
 801908c:	601a      	str	r2, [r3, #0]
 801908e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019092:	69fb      	ldr	r3, [r7, #28]
 8019094:	f383 8810 	msr	PRIMASK, r3
}
 8019098:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801909e:	2b01      	cmp	r3, #1
 80190a0:	d130      	bne.n	8019104 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	2200      	movs	r2, #0
 80190a6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190a8:	f3ef 8310 	mrs	r3, PRIMASK
 80190ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80190ae:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80190b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80190b2:	2301      	movs	r3, #1
 80190b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	f383 8810 	msr	PRIMASK, r3
}
 80190bc:	46c0      	nop			@ (mov r8, r8)
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	681a      	ldr	r2, [r3, #0]
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	2110      	movs	r1, #16
 80190ca:	438a      	bics	r2, r1
 80190cc:	601a      	str	r2, [r3, #0]
 80190ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190d2:	693b      	ldr	r3, [r7, #16]
 80190d4:	f383 8810 	msr	PRIMASK, r3
}
 80190d8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	69db      	ldr	r3, [r3, #28]
 80190e0:	2210      	movs	r2, #16
 80190e2:	4013      	ands	r3, r2
 80190e4:	2b10      	cmp	r3, #16
 80190e6:	d103      	bne.n	80190f0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	2210      	movs	r2, #16
 80190ee:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	22ac      	movs	r2, #172	@ 0xac
 80190f4:	589b      	ldr	r3, [r3, r2]
 80190f6:	687a      	ldr	r2, [r7, #4]
 80190f8:	2158      	movs	r1, #88	@ 0x58
 80190fa:	5a51      	ldrh	r1, [r2, r1]
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	0010      	movs	r0, r2
 8019100:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019102:	e00e      	b.n	8019122 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	2294      	movs	r2, #148	@ 0x94
 8019108:	589b      	ldr	r3, [r3, r2]
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	0010      	movs	r0, r2
 801910e:	4798      	blx	r3
}
 8019110:	e007      	b.n	8019122 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	699a      	ldr	r2, [r3, #24]
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	2108      	movs	r1, #8
 801911e:	430a      	orrs	r2, r1
 8019120:	619a      	str	r2, [r3, #24]
}
 8019122:	46c0      	nop			@ (mov r8, r8)
 8019124:	46bd      	mov	sp, r7
 8019126:	b014      	add	sp, #80	@ 0x50
 8019128:	bd80      	pop	{r7, pc}
 801912a:	46c0      	nop			@ (mov r8, r8)
 801912c:	fffffedf 	.word	0xfffffedf
 8019130:	40004800 	.word	0x40004800
 8019134:	fbffffff 	.word	0xfbffffff

08019138 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019138:	b580      	push	{r7, lr}
 801913a:	b082      	sub	sp, #8
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019140:	46c0      	nop			@ (mov r8, r8)
 8019142:	46bd      	mov	sp, r7
 8019144:	b002      	add	sp, #8
 8019146:	bd80      	pop	{r7, pc}

08019148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b084      	sub	sp, #16
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2244      	movs	r2, #68	@ 0x44
 8019154:	2100      	movs	r1, #0
 8019156:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019158:	4b05      	ldr	r3, [pc, #20]	@ (8019170 <USB_EnableGlobalInt+0x28>)
 801915a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	b299      	uxth	r1, r3
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	2240      	movs	r2, #64	@ 0x40
 8019164:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019166:	2300      	movs	r3, #0
}
 8019168:	0018      	movs	r0, r3
 801916a:	46bd      	mov	sp, r7
 801916c:	b004      	add	sp, #16
 801916e:	bd80      	pop	{r7, pc}
 8019170:	0000bf80 	.word	0x0000bf80

08019174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b084      	sub	sp, #16
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801917c:	4b09      	ldr	r3, [pc, #36]	@ (80191a4 <USB_DisableGlobalInt+0x30>)
 801917e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2240      	movs	r2, #64	@ 0x40
 8019184:	5a9b      	ldrh	r3, [r3, r2]
 8019186:	b29b      	uxth	r3, r3
 8019188:	68fa      	ldr	r2, [r7, #12]
 801918a:	b292      	uxth	r2, r2
 801918c:	43d2      	mvns	r2, r2
 801918e:	b292      	uxth	r2, r2
 8019190:	4013      	ands	r3, r2
 8019192:	b299      	uxth	r1, r3
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2240      	movs	r2, #64	@ 0x40
 8019198:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801919a:	2300      	movs	r3, #0
}
 801919c:	0018      	movs	r0, r3
 801919e:	46bd      	mov	sp, r7
 80191a0:	b004      	add	sp, #16
 80191a2:	bd80      	pop	{r7, pc}
 80191a4:	0000bf80 	.word	0x0000bf80

080191a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80191a8:	b084      	sub	sp, #16
 80191aa:	b590      	push	{r4, r7, lr}
 80191ac:	b083      	sub	sp, #12
 80191ae:	af00      	add	r7, sp, #0
 80191b0:	6078      	str	r0, [r7, #4]
 80191b2:	2004      	movs	r0, #4
 80191b4:	2410      	movs	r4, #16
 80191b6:	1900      	adds	r0, r0, r4
 80191b8:	2408      	movs	r4, #8
 80191ba:	46a4      	mov	ip, r4
 80191bc:	44bc      	add	ip, r7
 80191be:	4460      	add	r0, ip
 80191c0:	6001      	str	r1, [r0, #0]
 80191c2:	6042      	str	r2, [r0, #4]
 80191c4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	2240      	movs	r2, #64	@ 0x40
 80191ca:	2101      	movs	r1, #1
 80191cc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	2240      	movs	r2, #64	@ 0x40
 80191d2:	2100      	movs	r1, #0
 80191d4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	2244      	movs	r2, #68	@ 0x44
 80191da:	2100      	movs	r1, #0
 80191dc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	2250      	movs	r2, #80	@ 0x50
 80191e2:	2100      	movs	r1, #0
 80191e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80191e6:	2300      	movs	r3, #0
}
 80191e8:	0018      	movs	r0, r3
 80191ea:	46bd      	mov	sp, r7
 80191ec:	b003      	add	sp, #12
 80191ee:	bc90      	pop	{r4, r7}
 80191f0:	bc08      	pop	{r3}
 80191f2:	b004      	add	sp, #16
 80191f4:	4718      	bx	r3
	...

080191f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b09c      	sub	sp, #112	@ 0x70
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
 8019200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8019202:	236f      	movs	r3, #111	@ 0x6f
 8019204:	18fb      	adds	r3, r7, r3
 8019206:	2200      	movs	r2, #0
 8019208:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	683b      	ldr	r3, [r7, #0]
 801920e:	781b      	ldrb	r3, [r3, #0]
 8019210:	009b      	lsls	r3, r3, #2
 8019212:	18d3      	adds	r3, r2, r3
 8019214:	881b      	ldrh	r3, [r3, #0]
 8019216:	b29a      	uxth	r2, r3
 8019218:	236c      	movs	r3, #108	@ 0x6c
 801921a:	18fb      	adds	r3, r7, r3
 801921c:	49a3      	ldr	r1, [pc, #652]	@ (80194ac <USB_ActivateEndpoint+0x2b4>)
 801921e:	400a      	ands	r2, r1
 8019220:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8019222:	683b      	ldr	r3, [r7, #0]
 8019224:	78db      	ldrb	r3, [r3, #3]
 8019226:	2b03      	cmp	r3, #3
 8019228:	d017      	beq.n	801925a <USB_ActivateEndpoint+0x62>
 801922a:	dc28      	bgt.n	801927e <USB_ActivateEndpoint+0x86>
 801922c:	2b02      	cmp	r3, #2
 801922e:	d00e      	beq.n	801924e <USB_ActivateEndpoint+0x56>
 8019230:	dc25      	bgt.n	801927e <USB_ActivateEndpoint+0x86>
 8019232:	2b00      	cmp	r3, #0
 8019234:	d002      	beq.n	801923c <USB_ActivateEndpoint+0x44>
 8019236:	2b01      	cmp	r3, #1
 8019238:	d018      	beq.n	801926c <USB_ActivateEndpoint+0x74>
 801923a:	e020      	b.n	801927e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801923c:	226c      	movs	r2, #108	@ 0x6c
 801923e:	18bb      	adds	r3, r7, r2
 8019240:	18ba      	adds	r2, r7, r2
 8019242:	8812      	ldrh	r2, [r2, #0]
 8019244:	2180      	movs	r1, #128	@ 0x80
 8019246:	0089      	lsls	r1, r1, #2
 8019248:	430a      	orrs	r2, r1
 801924a:	801a      	strh	r2, [r3, #0]
      break;
 801924c:	e01c      	b.n	8019288 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801924e:	226c      	movs	r2, #108	@ 0x6c
 8019250:	18bb      	adds	r3, r7, r2
 8019252:	18ba      	adds	r2, r7, r2
 8019254:	8812      	ldrh	r2, [r2, #0]
 8019256:	801a      	strh	r2, [r3, #0]
      break;
 8019258:	e016      	b.n	8019288 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801925a:	226c      	movs	r2, #108	@ 0x6c
 801925c:	18bb      	adds	r3, r7, r2
 801925e:	18ba      	adds	r2, r7, r2
 8019260:	8812      	ldrh	r2, [r2, #0]
 8019262:	21c0      	movs	r1, #192	@ 0xc0
 8019264:	00c9      	lsls	r1, r1, #3
 8019266:	430a      	orrs	r2, r1
 8019268:	801a      	strh	r2, [r3, #0]
      break;
 801926a:	e00d      	b.n	8019288 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801926c:	226c      	movs	r2, #108	@ 0x6c
 801926e:	18bb      	adds	r3, r7, r2
 8019270:	18ba      	adds	r2, r7, r2
 8019272:	8812      	ldrh	r2, [r2, #0]
 8019274:	2180      	movs	r1, #128	@ 0x80
 8019276:	00c9      	lsls	r1, r1, #3
 8019278:	430a      	orrs	r2, r1
 801927a:	801a      	strh	r2, [r3, #0]
      break;
 801927c:	e004      	b.n	8019288 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801927e:	236f      	movs	r3, #111	@ 0x6f
 8019280:	18fb      	adds	r3, r7, r3
 8019282:	2201      	movs	r2, #1
 8019284:	701a      	strb	r2, [r3, #0]
      break;
 8019286:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019288:	687a      	ldr	r2, [r7, #4]
 801928a:	683b      	ldr	r3, [r7, #0]
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	009b      	lsls	r3, r3, #2
 8019290:	18d3      	adds	r3, r2, r3
 8019292:	226c      	movs	r2, #108	@ 0x6c
 8019294:	18ba      	adds	r2, r7, r2
 8019296:	8812      	ldrh	r2, [r2, #0]
 8019298:	4985      	ldr	r1, [pc, #532]	@ (80194b0 <USB_ActivateEndpoint+0x2b8>)
 801929a:	430a      	orrs	r2, r1
 801929c:	b292      	uxth	r2, r2
 801929e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	18d3      	adds	r3, r2, r3
 80192aa:	881b      	ldrh	r3, [r3, #0]
 80192ac:	b29b      	uxth	r3, r3
 80192ae:	b21b      	sxth	r3, r3
 80192b0:	4a80      	ldr	r2, [pc, #512]	@ (80194b4 <USB_ActivateEndpoint+0x2bc>)
 80192b2:	4013      	ands	r3, r2
 80192b4:	b21a      	sxth	r2, r3
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	b21b      	sxth	r3, r3
 80192bc:	4313      	orrs	r3, r2
 80192be:	b21a      	sxth	r2, r3
 80192c0:	2166      	movs	r1, #102	@ 0x66
 80192c2:	187b      	adds	r3, r7, r1
 80192c4:	801a      	strh	r2, [r3, #0]
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	009b      	lsls	r3, r3, #2
 80192ce:	18d3      	adds	r3, r2, r3
 80192d0:	187a      	adds	r2, r7, r1
 80192d2:	8812      	ldrh	r2, [r2, #0]
 80192d4:	4976      	ldr	r1, [pc, #472]	@ (80194b0 <USB_ActivateEndpoint+0x2b8>)
 80192d6:	430a      	orrs	r2, r1
 80192d8:	b292      	uxth	r2, r2
 80192da:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	7b1b      	ldrb	r3, [r3, #12]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d000      	beq.n	80192e6 <USB_ActivateEndpoint+0xee>
 80192e4:	e178      	b.n	80195d8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80192e6:	683b      	ldr	r3, [r7, #0]
 80192e8:	785b      	ldrb	r3, [r3, #1]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d100      	bne.n	80192f0 <USB_ActivateEndpoint+0xf8>
 80192ee:	e07a      	b.n	80193e6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	61bb      	str	r3, [r7, #24]
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2250      	movs	r2, #80	@ 0x50
 80192f8:	5a9b      	ldrh	r3, [r3, r2]
 80192fa:	b29b      	uxth	r3, r3
 80192fc:	001a      	movs	r2, r3
 80192fe:	69bb      	ldr	r3, [r7, #24]
 8019300:	189b      	adds	r3, r3, r2
 8019302:	61bb      	str	r3, [r7, #24]
 8019304:	683b      	ldr	r3, [r7, #0]
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	00da      	lsls	r2, r3, #3
 801930a:	69bb      	ldr	r3, [r7, #24]
 801930c:	18d3      	adds	r3, r2, r3
 801930e:	2280      	movs	r2, #128	@ 0x80
 8019310:	00d2      	lsls	r2, r2, #3
 8019312:	4694      	mov	ip, r2
 8019314:	4463      	add	r3, ip
 8019316:	617b      	str	r3, [r7, #20]
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	88db      	ldrh	r3, [r3, #6]
 801931c:	085b      	lsrs	r3, r3, #1
 801931e:	b29b      	uxth	r3, r3
 8019320:	18db      	adds	r3, r3, r3
 8019322:	b29a      	uxth	r2, r3
 8019324:	697b      	ldr	r3, [r7, #20]
 8019326:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	009b      	lsls	r3, r3, #2
 8019330:	18d2      	adds	r2, r2, r3
 8019332:	2112      	movs	r1, #18
 8019334:	187b      	adds	r3, r7, r1
 8019336:	8812      	ldrh	r2, [r2, #0]
 8019338:	801a      	strh	r2, [r3, #0]
 801933a:	187b      	adds	r3, r7, r1
 801933c:	881b      	ldrh	r3, [r3, #0]
 801933e:	2240      	movs	r2, #64	@ 0x40
 8019340:	4013      	ands	r3, r2
 8019342:	d016      	beq.n	8019372 <USB_ActivateEndpoint+0x17a>
 8019344:	687a      	ldr	r2, [r7, #4]
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	781b      	ldrb	r3, [r3, #0]
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	18d3      	adds	r3, r2, r3
 801934e:	881b      	ldrh	r3, [r3, #0]
 8019350:	b29a      	uxth	r2, r3
 8019352:	2010      	movs	r0, #16
 8019354:	183b      	adds	r3, r7, r0
 8019356:	4957      	ldr	r1, [pc, #348]	@ (80194b4 <USB_ActivateEndpoint+0x2bc>)
 8019358:	400a      	ands	r2, r1
 801935a:	801a      	strh	r2, [r3, #0]
 801935c:	687a      	ldr	r2, [r7, #4]
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	781b      	ldrb	r3, [r3, #0]
 8019362:	009b      	lsls	r3, r3, #2
 8019364:	18d3      	adds	r3, r2, r3
 8019366:	183a      	adds	r2, r7, r0
 8019368:	8812      	ldrh	r2, [r2, #0]
 801936a:	4953      	ldr	r1, [pc, #332]	@ (80194b8 <USB_ActivateEndpoint+0x2c0>)
 801936c:	430a      	orrs	r2, r1
 801936e:	b292      	uxth	r2, r2
 8019370:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	78db      	ldrb	r3, [r3, #3]
 8019376:	2b01      	cmp	r3, #1
 8019378:	d01d      	beq.n	80193b6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801937a:	687a      	ldr	r2, [r7, #4]
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	781b      	ldrb	r3, [r3, #0]
 8019380:	009b      	lsls	r3, r3, #2
 8019382:	18d3      	adds	r3, r2, r3
 8019384:	881b      	ldrh	r3, [r3, #0]
 8019386:	b29a      	uxth	r2, r3
 8019388:	200c      	movs	r0, #12
 801938a:	183b      	adds	r3, r7, r0
 801938c:	494b      	ldr	r1, [pc, #300]	@ (80194bc <USB_ActivateEndpoint+0x2c4>)
 801938e:	400a      	ands	r2, r1
 8019390:	801a      	strh	r2, [r3, #0]
 8019392:	183b      	adds	r3, r7, r0
 8019394:	183a      	adds	r2, r7, r0
 8019396:	8812      	ldrh	r2, [r2, #0]
 8019398:	2120      	movs	r1, #32
 801939a:	404a      	eors	r2, r1
 801939c:	801a      	strh	r2, [r3, #0]
 801939e:	687a      	ldr	r2, [r7, #4]
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	009b      	lsls	r3, r3, #2
 80193a6:	18d3      	adds	r3, r2, r3
 80193a8:	183a      	adds	r2, r7, r0
 80193aa:	8812      	ldrh	r2, [r2, #0]
 80193ac:	4940      	ldr	r1, [pc, #256]	@ (80194b0 <USB_ActivateEndpoint+0x2b8>)
 80193ae:	430a      	orrs	r2, r1
 80193b0:	b292      	uxth	r2, r2
 80193b2:	801a      	strh	r2, [r3, #0]
 80193b4:	e2b4      	b.n	8019920 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80193b6:	687a      	ldr	r2, [r7, #4]
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	781b      	ldrb	r3, [r3, #0]
 80193bc:	009b      	lsls	r3, r3, #2
 80193be:	18d3      	adds	r3, r2, r3
 80193c0:	881b      	ldrh	r3, [r3, #0]
 80193c2:	b29a      	uxth	r2, r3
 80193c4:	200e      	movs	r0, #14
 80193c6:	183b      	adds	r3, r7, r0
 80193c8:	493c      	ldr	r1, [pc, #240]	@ (80194bc <USB_ActivateEndpoint+0x2c4>)
 80193ca:	400a      	ands	r2, r1
 80193cc:	801a      	strh	r2, [r3, #0]
 80193ce:	687a      	ldr	r2, [r7, #4]
 80193d0:	683b      	ldr	r3, [r7, #0]
 80193d2:	781b      	ldrb	r3, [r3, #0]
 80193d4:	009b      	lsls	r3, r3, #2
 80193d6:	18d3      	adds	r3, r2, r3
 80193d8:	183a      	adds	r2, r7, r0
 80193da:	8812      	ldrh	r2, [r2, #0]
 80193dc:	4934      	ldr	r1, [pc, #208]	@ (80194b0 <USB_ActivateEndpoint+0x2b8>)
 80193de:	430a      	orrs	r2, r1
 80193e0:	b292      	uxth	r2, r2
 80193e2:	801a      	strh	r2, [r3, #0]
 80193e4:	e29c      	b.n	8019920 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	2250      	movs	r2, #80	@ 0x50
 80193ee:	5a9b      	ldrh	r3, [r3, r2]
 80193f0:	b29b      	uxth	r3, r3
 80193f2:	001a      	movs	r2, r3
 80193f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193f6:	189b      	adds	r3, r3, r2
 80193f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	00da      	lsls	r2, r3, #3
 8019400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019402:	18d3      	adds	r3, r2, r3
 8019404:	4a2e      	ldr	r2, [pc, #184]	@ (80194c0 <USB_ActivateEndpoint+0x2c8>)
 8019406:	4694      	mov	ip, r2
 8019408:	4463      	add	r3, ip
 801940a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	88db      	ldrh	r3, [r3, #6]
 8019410:	085b      	lsrs	r3, r3, #1
 8019412:	b29b      	uxth	r3, r3
 8019414:	18db      	adds	r3, r3, r3
 8019416:	b29a      	uxth	r2, r3
 8019418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801941a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2250      	movs	r2, #80	@ 0x50
 8019424:	5a9b      	ldrh	r3, [r3, r2]
 8019426:	b29b      	uxth	r3, r3
 8019428:	001a      	movs	r2, r3
 801942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801942c:	189b      	adds	r3, r3, r2
 801942e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	00da      	lsls	r2, r3, #3
 8019436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019438:	18d3      	adds	r3, r2, r3
 801943a:	4a22      	ldr	r2, [pc, #136]	@ (80194c4 <USB_ActivateEndpoint+0x2cc>)
 801943c:	4694      	mov	ip, r2
 801943e:	4463      	add	r3, ip
 8019440:	627b      	str	r3, [r7, #36]	@ 0x24
 8019442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019444:	881b      	ldrh	r3, [r3, #0]
 8019446:	b29b      	uxth	r3, r3
 8019448:	059b      	lsls	r3, r3, #22
 801944a:	0d9b      	lsrs	r3, r3, #22
 801944c:	b29a      	uxth	r2, r3
 801944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019450:	801a      	strh	r2, [r3, #0]
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	691b      	ldr	r3, [r3, #16]
 8019456:	2b3e      	cmp	r3, #62	@ 0x3e
 8019458:	d91a      	bls.n	8019490 <USB_ActivateEndpoint+0x298>
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	691b      	ldr	r3, [r3, #16]
 801945e:	095b      	lsrs	r3, r3, #5
 8019460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	691b      	ldr	r3, [r3, #16]
 8019466:	221f      	movs	r2, #31
 8019468:	4013      	ands	r3, r2
 801946a:	d102      	bne.n	8019472 <USB_ActivateEndpoint+0x27a>
 801946c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801946e:	3b01      	subs	r3, #1
 8019470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019474:	881b      	ldrh	r3, [r3, #0]
 8019476:	b29a      	uxth	r2, r3
 8019478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801947a:	b29b      	uxth	r3, r3
 801947c:	029b      	lsls	r3, r3, #10
 801947e:	b29b      	uxth	r3, r3
 8019480:	4313      	orrs	r3, r2
 8019482:	b29b      	uxth	r3, r3
 8019484:	4a10      	ldr	r2, [pc, #64]	@ (80194c8 <USB_ActivateEndpoint+0x2d0>)
 8019486:	4313      	orrs	r3, r2
 8019488:	b29a      	uxth	r2, r3
 801948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948c:	801a      	strh	r2, [r3, #0]
 801948e:	e034      	b.n	80194fa <USB_ActivateEndpoint+0x302>
 8019490:	683b      	ldr	r3, [r7, #0]
 8019492:	691b      	ldr	r3, [r3, #16]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d119      	bne.n	80194cc <USB_ActivateEndpoint+0x2d4>
 8019498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801949a:	881b      	ldrh	r3, [r3, #0]
 801949c:	b29b      	uxth	r3, r3
 801949e:	4a0a      	ldr	r2, [pc, #40]	@ (80194c8 <USB_ActivateEndpoint+0x2d0>)
 80194a0:	4313      	orrs	r3, r2
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194a6:	801a      	strh	r2, [r3, #0]
 80194a8:	e027      	b.n	80194fa <USB_ActivateEndpoint+0x302>
 80194aa:	46c0      	nop			@ (mov r8, r8)
 80194ac:	ffff898f 	.word	0xffff898f
 80194b0:	ffff8080 	.word	0xffff8080
 80194b4:	ffff8f8f 	.word	0xffff8f8f
 80194b8:	ffff80c0 	.word	0xffff80c0
 80194bc:	ffff8fbf 	.word	0xffff8fbf
 80194c0:	00000404 	.word	0x00000404
 80194c4:	00000406 	.word	0x00000406
 80194c8:	ffff8000 	.word	0xffff8000
 80194cc:	683b      	ldr	r3, [r7, #0]
 80194ce:	691b      	ldr	r3, [r3, #16]
 80194d0:	085b      	lsrs	r3, r3, #1
 80194d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	691b      	ldr	r3, [r3, #16]
 80194d8:	2201      	movs	r2, #1
 80194da:	4013      	ands	r3, r2
 80194dc:	d002      	beq.n	80194e4 <USB_ActivateEndpoint+0x2ec>
 80194de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194e0:	3301      	adds	r3, #1
 80194e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80194e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194e6:	881b      	ldrh	r3, [r3, #0]
 80194e8:	b29a      	uxth	r2, r3
 80194ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	029b      	lsls	r3, r3, #10
 80194f0:	b29b      	uxth	r3, r3
 80194f2:	4313      	orrs	r3, r2
 80194f4:	b29a      	uxth	r2, r3
 80194f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80194fa:	687a      	ldr	r2, [r7, #4]
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	781b      	ldrb	r3, [r3, #0]
 8019500:	009b      	lsls	r3, r3, #2
 8019502:	18d2      	adds	r2, r2, r3
 8019504:	2122      	movs	r1, #34	@ 0x22
 8019506:	187b      	adds	r3, r7, r1
 8019508:	8812      	ldrh	r2, [r2, #0]
 801950a:	801a      	strh	r2, [r3, #0]
 801950c:	187b      	adds	r3, r7, r1
 801950e:	881a      	ldrh	r2, [r3, #0]
 8019510:	2380      	movs	r3, #128	@ 0x80
 8019512:	01db      	lsls	r3, r3, #7
 8019514:	4013      	ands	r3, r2
 8019516:	d016      	beq.n	8019546 <USB_ActivateEndpoint+0x34e>
 8019518:	687a      	ldr	r2, [r7, #4]
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	009b      	lsls	r3, r3, #2
 8019520:	18d3      	adds	r3, r2, r3
 8019522:	881b      	ldrh	r3, [r3, #0]
 8019524:	b29a      	uxth	r2, r3
 8019526:	2020      	movs	r0, #32
 8019528:	183b      	adds	r3, r7, r0
 801952a:	49dd      	ldr	r1, [pc, #884]	@ (80198a0 <USB_ActivateEndpoint+0x6a8>)
 801952c:	400a      	ands	r2, r1
 801952e:	801a      	strh	r2, [r3, #0]
 8019530:	687a      	ldr	r2, [r7, #4]
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	781b      	ldrb	r3, [r3, #0]
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	18d3      	adds	r3, r2, r3
 801953a:	183a      	adds	r2, r7, r0
 801953c:	8812      	ldrh	r2, [r2, #0]
 801953e:	49d9      	ldr	r1, [pc, #868]	@ (80198a4 <USB_ActivateEndpoint+0x6ac>)
 8019540:	430a      	orrs	r2, r1
 8019542:	b292      	uxth	r2, r2
 8019544:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d125      	bne.n	801959a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801954e:	687a      	ldr	r2, [r7, #4]
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	781b      	ldrb	r3, [r3, #0]
 8019554:	009b      	lsls	r3, r3, #2
 8019556:	18d3      	adds	r3, r2, r3
 8019558:	881b      	ldrh	r3, [r3, #0]
 801955a:	b29a      	uxth	r2, r3
 801955c:	201c      	movs	r0, #28
 801955e:	183b      	adds	r3, r7, r0
 8019560:	49d1      	ldr	r1, [pc, #836]	@ (80198a8 <USB_ActivateEndpoint+0x6b0>)
 8019562:	400a      	ands	r2, r1
 8019564:	801a      	strh	r2, [r3, #0]
 8019566:	183b      	adds	r3, r7, r0
 8019568:	183a      	adds	r2, r7, r0
 801956a:	8812      	ldrh	r2, [r2, #0]
 801956c:	2180      	movs	r1, #128	@ 0x80
 801956e:	0149      	lsls	r1, r1, #5
 8019570:	404a      	eors	r2, r1
 8019572:	801a      	strh	r2, [r3, #0]
 8019574:	183b      	adds	r3, r7, r0
 8019576:	183a      	adds	r2, r7, r0
 8019578:	8812      	ldrh	r2, [r2, #0]
 801957a:	2180      	movs	r1, #128	@ 0x80
 801957c:	0189      	lsls	r1, r1, #6
 801957e:	404a      	eors	r2, r1
 8019580:	801a      	strh	r2, [r3, #0]
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	009b      	lsls	r3, r3, #2
 801958a:	18d3      	adds	r3, r2, r3
 801958c:	183a      	adds	r2, r7, r0
 801958e:	8812      	ldrh	r2, [r2, #0]
 8019590:	49c6      	ldr	r1, [pc, #792]	@ (80198ac <USB_ActivateEndpoint+0x6b4>)
 8019592:	430a      	orrs	r2, r1
 8019594:	b292      	uxth	r2, r2
 8019596:	801a      	strh	r2, [r3, #0]
 8019598:	e1c2      	b.n	8019920 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801959a:	687a      	ldr	r2, [r7, #4]
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	781b      	ldrb	r3, [r3, #0]
 80195a0:	009b      	lsls	r3, r3, #2
 80195a2:	18d3      	adds	r3, r2, r3
 80195a4:	881b      	ldrh	r3, [r3, #0]
 80195a6:	b29a      	uxth	r2, r3
 80195a8:	201e      	movs	r0, #30
 80195aa:	183b      	adds	r3, r7, r0
 80195ac:	49be      	ldr	r1, [pc, #760]	@ (80198a8 <USB_ActivateEndpoint+0x6b0>)
 80195ae:	400a      	ands	r2, r1
 80195b0:	801a      	strh	r2, [r3, #0]
 80195b2:	183b      	adds	r3, r7, r0
 80195b4:	183a      	adds	r2, r7, r0
 80195b6:	8812      	ldrh	r2, [r2, #0]
 80195b8:	2180      	movs	r1, #128	@ 0x80
 80195ba:	0189      	lsls	r1, r1, #6
 80195bc:	404a      	eors	r2, r1
 80195be:	801a      	strh	r2, [r3, #0]
 80195c0:	687a      	ldr	r2, [r7, #4]
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	781b      	ldrb	r3, [r3, #0]
 80195c6:	009b      	lsls	r3, r3, #2
 80195c8:	18d3      	adds	r3, r2, r3
 80195ca:	183a      	adds	r2, r7, r0
 80195cc:	8812      	ldrh	r2, [r2, #0]
 80195ce:	49b7      	ldr	r1, [pc, #732]	@ (80198ac <USB_ActivateEndpoint+0x6b4>)
 80195d0:	430a      	orrs	r2, r1
 80195d2:	b292      	uxth	r2, r2
 80195d4:	801a      	strh	r2, [r3, #0]
 80195d6:	e1a3      	b.n	8019920 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	78db      	ldrb	r3, [r3, #3]
 80195dc:	2b02      	cmp	r3, #2
 80195de:	d117      	bne.n	8019610 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80195e0:	687a      	ldr	r2, [r7, #4]
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	781b      	ldrb	r3, [r3, #0]
 80195e6:	009b      	lsls	r3, r3, #2
 80195e8:	18d3      	adds	r3, r2, r3
 80195ea:	881b      	ldrh	r3, [r3, #0]
 80195ec:	b29a      	uxth	r2, r3
 80195ee:	2062      	movs	r0, #98	@ 0x62
 80195f0:	183b      	adds	r3, r7, r0
 80195f2:	49ab      	ldr	r1, [pc, #684]	@ (80198a0 <USB_ActivateEndpoint+0x6a8>)
 80195f4:	400a      	ands	r2, r1
 80195f6:	801a      	strh	r2, [r3, #0]
 80195f8:	687a      	ldr	r2, [r7, #4]
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	781b      	ldrb	r3, [r3, #0]
 80195fe:	009b      	lsls	r3, r3, #2
 8019600:	18d3      	adds	r3, r2, r3
 8019602:	183a      	adds	r2, r7, r0
 8019604:	8812      	ldrh	r2, [r2, #0]
 8019606:	49aa      	ldr	r1, [pc, #680]	@ (80198b0 <USB_ActivateEndpoint+0x6b8>)
 8019608:	430a      	orrs	r2, r1
 801960a:	b292      	uxth	r2, r2
 801960c:	801a      	strh	r2, [r3, #0]
 801960e:	e016      	b.n	801963e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019610:	687a      	ldr	r2, [r7, #4]
 8019612:	683b      	ldr	r3, [r7, #0]
 8019614:	781b      	ldrb	r3, [r3, #0]
 8019616:	009b      	lsls	r3, r3, #2
 8019618:	18d3      	adds	r3, r2, r3
 801961a:	881b      	ldrh	r3, [r3, #0]
 801961c:	b29a      	uxth	r2, r3
 801961e:	2064      	movs	r0, #100	@ 0x64
 8019620:	183b      	adds	r3, r7, r0
 8019622:	49a4      	ldr	r1, [pc, #656]	@ (80198b4 <USB_ActivateEndpoint+0x6bc>)
 8019624:	400a      	ands	r2, r1
 8019626:	801a      	strh	r2, [r3, #0]
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	009b      	lsls	r3, r3, #2
 8019630:	18d3      	adds	r3, r2, r3
 8019632:	183a      	adds	r2, r7, r0
 8019634:	8812      	ldrh	r2, [r2, #0]
 8019636:	499d      	ldr	r1, [pc, #628]	@ (80198ac <USB_ActivateEndpoint+0x6b4>)
 8019638:	430a      	orrs	r2, r1
 801963a:	b292      	uxth	r2, r2
 801963c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	2250      	movs	r2, #80	@ 0x50
 8019646:	5a9b      	ldrh	r3, [r3, r2]
 8019648:	b29b      	uxth	r3, r3
 801964a:	001a      	movs	r2, r3
 801964c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801964e:	189b      	adds	r3, r3, r2
 8019650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	781b      	ldrb	r3, [r3, #0]
 8019656:	00da      	lsls	r2, r3, #3
 8019658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801965a:	18d3      	adds	r3, r2, r3
 801965c:	2280      	movs	r2, #128	@ 0x80
 801965e:	00d2      	lsls	r2, r2, #3
 8019660:	4694      	mov	ip, r2
 8019662:	4463      	add	r3, ip
 8019664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019666:	683b      	ldr	r3, [r7, #0]
 8019668:	891b      	ldrh	r3, [r3, #8]
 801966a:	085b      	lsrs	r3, r3, #1
 801966c:	b29b      	uxth	r3, r3
 801966e:	18db      	adds	r3, r3, r3
 8019670:	b29a      	uxth	r2, r3
 8019672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019674:	801a      	strh	r2, [r3, #0]
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	657b      	str	r3, [r7, #84]	@ 0x54
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2250      	movs	r2, #80	@ 0x50
 801967e:	5a9b      	ldrh	r3, [r3, r2]
 8019680:	b29b      	uxth	r3, r3
 8019682:	001a      	movs	r2, r3
 8019684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019686:	189b      	adds	r3, r3, r2
 8019688:	657b      	str	r3, [r7, #84]	@ 0x54
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	781b      	ldrb	r3, [r3, #0]
 801968e:	00da      	lsls	r2, r3, #3
 8019690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019692:	18d3      	adds	r3, r2, r3
 8019694:	4a88      	ldr	r2, [pc, #544]	@ (80198b8 <USB_ActivateEndpoint+0x6c0>)
 8019696:	4694      	mov	ip, r2
 8019698:	4463      	add	r3, ip
 801969a:	653b      	str	r3, [r7, #80]	@ 0x50
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	895b      	ldrh	r3, [r3, #10]
 80196a0:	085b      	lsrs	r3, r3, #1
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	18db      	adds	r3, r3, r3
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80196aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80196ac:	683b      	ldr	r3, [r7, #0]
 80196ae:	785b      	ldrb	r3, [r3, #1]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d000      	beq.n	80196b6 <USB_ActivateEndpoint+0x4be>
 80196b4:	e087      	b.n	80197c6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80196b6:	687a      	ldr	r2, [r7, #4]
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	781b      	ldrb	r3, [r3, #0]
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	18d2      	adds	r2, r2, r3
 80196c0:	2140      	movs	r1, #64	@ 0x40
 80196c2:	187b      	adds	r3, r7, r1
 80196c4:	8812      	ldrh	r2, [r2, #0]
 80196c6:	801a      	strh	r2, [r3, #0]
 80196c8:	187b      	adds	r3, r7, r1
 80196ca:	881a      	ldrh	r2, [r3, #0]
 80196cc:	2380      	movs	r3, #128	@ 0x80
 80196ce:	01db      	lsls	r3, r3, #7
 80196d0:	4013      	ands	r3, r2
 80196d2:	d016      	beq.n	8019702 <USB_ActivateEndpoint+0x50a>
 80196d4:	687a      	ldr	r2, [r7, #4]
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	009b      	lsls	r3, r3, #2
 80196dc:	18d3      	adds	r3, r2, r3
 80196de:	881b      	ldrh	r3, [r3, #0]
 80196e0:	b29a      	uxth	r2, r3
 80196e2:	203e      	movs	r0, #62	@ 0x3e
 80196e4:	183b      	adds	r3, r7, r0
 80196e6:	496e      	ldr	r1, [pc, #440]	@ (80198a0 <USB_ActivateEndpoint+0x6a8>)
 80196e8:	400a      	ands	r2, r1
 80196ea:	801a      	strh	r2, [r3, #0]
 80196ec:	687a      	ldr	r2, [r7, #4]
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	781b      	ldrb	r3, [r3, #0]
 80196f2:	009b      	lsls	r3, r3, #2
 80196f4:	18d3      	adds	r3, r2, r3
 80196f6:	183a      	adds	r2, r7, r0
 80196f8:	8812      	ldrh	r2, [r2, #0]
 80196fa:	496a      	ldr	r1, [pc, #424]	@ (80198a4 <USB_ActivateEndpoint+0x6ac>)
 80196fc:	430a      	orrs	r2, r1
 80196fe:	b292      	uxth	r2, r2
 8019700:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019702:	687a      	ldr	r2, [r7, #4]
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	009b      	lsls	r3, r3, #2
 801970a:	18d2      	adds	r2, r2, r3
 801970c:	213c      	movs	r1, #60	@ 0x3c
 801970e:	187b      	adds	r3, r7, r1
 8019710:	8812      	ldrh	r2, [r2, #0]
 8019712:	801a      	strh	r2, [r3, #0]
 8019714:	187b      	adds	r3, r7, r1
 8019716:	881b      	ldrh	r3, [r3, #0]
 8019718:	2240      	movs	r2, #64	@ 0x40
 801971a:	4013      	ands	r3, r2
 801971c:	d016      	beq.n	801974c <USB_ActivateEndpoint+0x554>
 801971e:	687a      	ldr	r2, [r7, #4]
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	781b      	ldrb	r3, [r3, #0]
 8019724:	009b      	lsls	r3, r3, #2
 8019726:	18d3      	adds	r3, r2, r3
 8019728:	881b      	ldrh	r3, [r3, #0]
 801972a:	b29a      	uxth	r2, r3
 801972c:	203a      	movs	r0, #58	@ 0x3a
 801972e:	183b      	adds	r3, r7, r0
 8019730:	495b      	ldr	r1, [pc, #364]	@ (80198a0 <USB_ActivateEndpoint+0x6a8>)
 8019732:	400a      	ands	r2, r1
 8019734:	801a      	strh	r2, [r3, #0]
 8019736:	687a      	ldr	r2, [r7, #4]
 8019738:	683b      	ldr	r3, [r7, #0]
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	009b      	lsls	r3, r3, #2
 801973e:	18d3      	adds	r3, r2, r3
 8019740:	183a      	adds	r2, r7, r0
 8019742:	8812      	ldrh	r2, [r2, #0]
 8019744:	495d      	ldr	r1, [pc, #372]	@ (80198bc <USB_ActivateEndpoint+0x6c4>)
 8019746:	430a      	orrs	r2, r1
 8019748:	b292      	uxth	r2, r2
 801974a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801974c:	687a      	ldr	r2, [r7, #4]
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	009b      	lsls	r3, r3, #2
 8019754:	18d3      	adds	r3, r2, r3
 8019756:	881b      	ldrh	r3, [r3, #0]
 8019758:	b29a      	uxth	r2, r3
 801975a:	2038      	movs	r0, #56	@ 0x38
 801975c:	183b      	adds	r3, r7, r0
 801975e:	4952      	ldr	r1, [pc, #328]	@ (80198a8 <USB_ActivateEndpoint+0x6b0>)
 8019760:	400a      	ands	r2, r1
 8019762:	801a      	strh	r2, [r3, #0]
 8019764:	183b      	adds	r3, r7, r0
 8019766:	183a      	adds	r2, r7, r0
 8019768:	8812      	ldrh	r2, [r2, #0]
 801976a:	2180      	movs	r1, #128	@ 0x80
 801976c:	0149      	lsls	r1, r1, #5
 801976e:	404a      	eors	r2, r1
 8019770:	801a      	strh	r2, [r3, #0]
 8019772:	183b      	adds	r3, r7, r0
 8019774:	183a      	adds	r2, r7, r0
 8019776:	8812      	ldrh	r2, [r2, #0]
 8019778:	2180      	movs	r1, #128	@ 0x80
 801977a:	0189      	lsls	r1, r1, #6
 801977c:	404a      	eors	r2, r1
 801977e:	801a      	strh	r2, [r3, #0]
 8019780:	687a      	ldr	r2, [r7, #4]
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	009b      	lsls	r3, r3, #2
 8019788:	18d3      	adds	r3, r2, r3
 801978a:	183a      	adds	r2, r7, r0
 801978c:	8812      	ldrh	r2, [r2, #0]
 801978e:	4947      	ldr	r1, [pc, #284]	@ (80198ac <USB_ActivateEndpoint+0x6b4>)
 8019790:	430a      	orrs	r2, r1
 8019792:	b292      	uxth	r2, r2
 8019794:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019796:	687a      	ldr	r2, [r7, #4]
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	781b      	ldrb	r3, [r3, #0]
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	18d3      	adds	r3, r2, r3
 80197a0:	881b      	ldrh	r3, [r3, #0]
 80197a2:	b29a      	uxth	r2, r3
 80197a4:	2036      	movs	r0, #54	@ 0x36
 80197a6:	183b      	adds	r3, r7, r0
 80197a8:	4945      	ldr	r1, [pc, #276]	@ (80198c0 <USB_ActivateEndpoint+0x6c8>)
 80197aa:	400a      	ands	r2, r1
 80197ac:	801a      	strh	r2, [r3, #0]
 80197ae:	687a      	ldr	r2, [r7, #4]
 80197b0:	683b      	ldr	r3, [r7, #0]
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	009b      	lsls	r3, r3, #2
 80197b6:	18d3      	adds	r3, r2, r3
 80197b8:	183a      	adds	r2, r7, r0
 80197ba:	8812      	ldrh	r2, [r2, #0]
 80197bc:	493b      	ldr	r1, [pc, #236]	@ (80198ac <USB_ActivateEndpoint+0x6b4>)
 80197be:	430a      	orrs	r2, r1
 80197c0:	b292      	uxth	r2, r2
 80197c2:	801a      	strh	r2, [r3, #0]
 80197c4:	e0ac      	b.n	8019920 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80197c6:	687a      	ldr	r2, [r7, #4]
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	009b      	lsls	r3, r3, #2
 80197ce:	18d2      	adds	r2, r2, r3
 80197d0:	214e      	movs	r1, #78	@ 0x4e
 80197d2:	187b      	adds	r3, r7, r1
 80197d4:	8812      	ldrh	r2, [r2, #0]
 80197d6:	801a      	strh	r2, [r3, #0]
 80197d8:	187b      	adds	r3, r7, r1
 80197da:	881a      	ldrh	r2, [r3, #0]
 80197dc:	2380      	movs	r3, #128	@ 0x80
 80197de:	01db      	lsls	r3, r3, #7
 80197e0:	4013      	ands	r3, r2
 80197e2:	d016      	beq.n	8019812 <USB_ActivateEndpoint+0x61a>
 80197e4:	687a      	ldr	r2, [r7, #4]
 80197e6:	683b      	ldr	r3, [r7, #0]
 80197e8:	781b      	ldrb	r3, [r3, #0]
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	18d3      	adds	r3, r2, r3
 80197ee:	881b      	ldrh	r3, [r3, #0]
 80197f0:	b29a      	uxth	r2, r3
 80197f2:	204c      	movs	r0, #76	@ 0x4c
 80197f4:	183b      	adds	r3, r7, r0
 80197f6:	492a      	ldr	r1, [pc, #168]	@ (80198a0 <USB_ActivateEndpoint+0x6a8>)
 80197f8:	400a      	ands	r2, r1
 80197fa:	801a      	strh	r2, [r3, #0]
 80197fc:	687a      	ldr	r2, [r7, #4]
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	781b      	ldrb	r3, [r3, #0]
 8019802:	009b      	lsls	r3, r3, #2
 8019804:	18d3      	adds	r3, r2, r3
 8019806:	183a      	adds	r2, r7, r0
 8019808:	8812      	ldrh	r2, [r2, #0]
 801980a:	4926      	ldr	r1, [pc, #152]	@ (80198a4 <USB_ActivateEndpoint+0x6ac>)
 801980c:	430a      	orrs	r2, r1
 801980e:	b292      	uxth	r2, r2
 8019810:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019812:	687a      	ldr	r2, [r7, #4]
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	781b      	ldrb	r3, [r3, #0]
 8019818:	009b      	lsls	r3, r3, #2
 801981a:	18d2      	adds	r2, r2, r3
 801981c:	214a      	movs	r1, #74	@ 0x4a
 801981e:	187b      	adds	r3, r7, r1
 8019820:	8812      	ldrh	r2, [r2, #0]
 8019822:	801a      	strh	r2, [r3, #0]
 8019824:	187b      	adds	r3, r7, r1
 8019826:	881b      	ldrh	r3, [r3, #0]
 8019828:	2240      	movs	r2, #64	@ 0x40
 801982a:	4013      	ands	r3, r2
 801982c:	d016      	beq.n	801985c <USB_ActivateEndpoint+0x664>
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	009b      	lsls	r3, r3, #2
 8019836:	18d3      	adds	r3, r2, r3
 8019838:	881b      	ldrh	r3, [r3, #0]
 801983a:	b29a      	uxth	r2, r3
 801983c:	2048      	movs	r0, #72	@ 0x48
 801983e:	183b      	adds	r3, r7, r0
 8019840:	4917      	ldr	r1, [pc, #92]	@ (80198a0 <USB_ActivateEndpoint+0x6a8>)
 8019842:	400a      	ands	r2, r1
 8019844:	801a      	strh	r2, [r3, #0]
 8019846:	687a      	ldr	r2, [r7, #4]
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	781b      	ldrb	r3, [r3, #0]
 801984c:	009b      	lsls	r3, r3, #2
 801984e:	18d3      	adds	r3, r2, r3
 8019850:	183a      	adds	r2, r7, r0
 8019852:	8812      	ldrh	r2, [r2, #0]
 8019854:	4919      	ldr	r1, [pc, #100]	@ (80198bc <USB_ActivateEndpoint+0x6c4>)
 8019856:	430a      	orrs	r2, r1
 8019858:	b292      	uxth	r2, r2
 801985a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	78db      	ldrb	r3, [r3, #3]
 8019860:	2b01      	cmp	r3, #1
 8019862:	d02f      	beq.n	80198c4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019864:	687a      	ldr	r2, [r7, #4]
 8019866:	683b      	ldr	r3, [r7, #0]
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	009b      	lsls	r3, r3, #2
 801986c:	18d3      	adds	r3, r2, r3
 801986e:	881b      	ldrh	r3, [r3, #0]
 8019870:	b29a      	uxth	r2, r3
 8019872:	2044      	movs	r0, #68	@ 0x44
 8019874:	183b      	adds	r3, r7, r0
 8019876:	4912      	ldr	r1, [pc, #72]	@ (80198c0 <USB_ActivateEndpoint+0x6c8>)
 8019878:	400a      	ands	r2, r1
 801987a:	801a      	strh	r2, [r3, #0]
 801987c:	183b      	adds	r3, r7, r0
 801987e:	183a      	adds	r2, r7, r0
 8019880:	8812      	ldrh	r2, [r2, #0]
 8019882:	2120      	movs	r1, #32
 8019884:	404a      	eors	r2, r1
 8019886:	801a      	strh	r2, [r3, #0]
 8019888:	687a      	ldr	r2, [r7, #4]
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	781b      	ldrb	r3, [r3, #0]
 801988e:	009b      	lsls	r3, r3, #2
 8019890:	18d3      	adds	r3, r2, r3
 8019892:	183a      	adds	r2, r7, r0
 8019894:	8812      	ldrh	r2, [r2, #0]
 8019896:	4905      	ldr	r1, [pc, #20]	@ (80198ac <USB_ActivateEndpoint+0x6b4>)
 8019898:	430a      	orrs	r2, r1
 801989a:	b292      	uxth	r2, r2
 801989c:	801a      	strh	r2, [r3, #0]
 801989e:	e028      	b.n	80198f2 <USB_ActivateEndpoint+0x6fa>
 80198a0:	ffff8f8f 	.word	0xffff8f8f
 80198a4:	ffffc080 	.word	0xffffc080
 80198a8:	ffffbf8f 	.word	0xffffbf8f
 80198ac:	ffff8080 	.word	0xffff8080
 80198b0:	ffff8180 	.word	0xffff8180
 80198b4:	ffff8e8f 	.word	0xffff8e8f
 80198b8:	00000404 	.word	0x00000404
 80198bc:	ffff80c0 	.word	0xffff80c0
 80198c0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80198c4:	687a      	ldr	r2, [r7, #4]
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	009b      	lsls	r3, r3, #2
 80198cc:	18d3      	adds	r3, r2, r3
 80198ce:	881b      	ldrh	r3, [r3, #0]
 80198d0:	b29a      	uxth	r2, r3
 80198d2:	2046      	movs	r0, #70	@ 0x46
 80198d4:	183b      	adds	r3, r7, r0
 80198d6:	4916      	ldr	r1, [pc, #88]	@ (8019930 <USB_ActivateEndpoint+0x738>)
 80198d8:	400a      	ands	r2, r1
 80198da:	801a      	strh	r2, [r3, #0]
 80198dc:	687a      	ldr	r2, [r7, #4]
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	18d3      	adds	r3, r2, r3
 80198e6:	183a      	adds	r2, r7, r0
 80198e8:	8812      	ldrh	r2, [r2, #0]
 80198ea:	4912      	ldr	r1, [pc, #72]	@ (8019934 <USB_ActivateEndpoint+0x73c>)
 80198ec:	430a      	orrs	r2, r1
 80198ee:	b292      	uxth	r2, r2
 80198f0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80198f2:	687a      	ldr	r2, [r7, #4]
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	009b      	lsls	r3, r3, #2
 80198fa:	18d3      	adds	r3, r2, r3
 80198fc:	881b      	ldrh	r3, [r3, #0]
 80198fe:	b29a      	uxth	r2, r3
 8019900:	2042      	movs	r0, #66	@ 0x42
 8019902:	183b      	adds	r3, r7, r0
 8019904:	490c      	ldr	r1, [pc, #48]	@ (8019938 <USB_ActivateEndpoint+0x740>)
 8019906:	400a      	ands	r2, r1
 8019908:	801a      	strh	r2, [r3, #0]
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	683b      	ldr	r3, [r7, #0]
 801990e:	781b      	ldrb	r3, [r3, #0]
 8019910:	009b      	lsls	r3, r3, #2
 8019912:	18d3      	adds	r3, r2, r3
 8019914:	183a      	adds	r2, r7, r0
 8019916:	8812      	ldrh	r2, [r2, #0]
 8019918:	4906      	ldr	r1, [pc, #24]	@ (8019934 <USB_ActivateEndpoint+0x73c>)
 801991a:	430a      	orrs	r2, r1
 801991c:	b292      	uxth	r2, r2
 801991e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019920:	236f      	movs	r3, #111	@ 0x6f
 8019922:	18fb      	adds	r3, r7, r3
 8019924:	781b      	ldrb	r3, [r3, #0]
}
 8019926:	0018      	movs	r0, r3
 8019928:	46bd      	mov	sp, r7
 801992a:	b01c      	add	sp, #112	@ 0x70
 801992c:	bd80      	pop	{r7, pc}
 801992e:	46c0      	nop			@ (mov r8, r8)
 8019930:	ffff8fbf 	.word	0xffff8fbf
 8019934:	ffff8080 	.word	0xffff8080
 8019938:	ffffbf8f 	.word	0xffffbf8f

0801993c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b08c      	sub	sp, #48	@ 0x30
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019946:	683b      	ldr	r3, [r7, #0]
 8019948:	7b1b      	ldrb	r3, [r3, #12]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d000      	beq.n	8019950 <USB_DeactivateEndpoint+0x14>
 801994e:	e07e      	b.n	8019a4e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019950:	683b      	ldr	r3, [r7, #0]
 8019952:	785b      	ldrb	r3, [r3, #1]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d03c      	beq.n	80199d2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019958:	687a      	ldr	r2, [r7, #4]
 801995a:	683b      	ldr	r3, [r7, #0]
 801995c:	781b      	ldrb	r3, [r3, #0]
 801995e:	009b      	lsls	r3, r3, #2
 8019960:	18d2      	adds	r2, r2, r3
 8019962:	210c      	movs	r1, #12
 8019964:	187b      	adds	r3, r7, r1
 8019966:	8812      	ldrh	r2, [r2, #0]
 8019968:	801a      	strh	r2, [r3, #0]
 801996a:	187b      	adds	r3, r7, r1
 801996c:	881b      	ldrh	r3, [r3, #0]
 801996e:	2240      	movs	r2, #64	@ 0x40
 8019970:	4013      	ands	r3, r2
 8019972:	d016      	beq.n	80199a2 <USB_DeactivateEndpoint+0x66>
 8019974:	687a      	ldr	r2, [r7, #4]
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	781b      	ldrb	r3, [r3, #0]
 801997a:	009b      	lsls	r3, r3, #2
 801997c:	18d3      	adds	r3, r2, r3
 801997e:	881b      	ldrh	r3, [r3, #0]
 8019980:	b29a      	uxth	r2, r3
 8019982:	200a      	movs	r0, #10
 8019984:	183b      	adds	r3, r7, r0
 8019986:	49c7      	ldr	r1, [pc, #796]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019988:	400a      	ands	r2, r1
 801998a:	801a      	strh	r2, [r3, #0]
 801998c:	687a      	ldr	r2, [r7, #4]
 801998e:	683b      	ldr	r3, [r7, #0]
 8019990:	781b      	ldrb	r3, [r3, #0]
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	18d3      	adds	r3, r2, r3
 8019996:	183a      	adds	r2, r7, r0
 8019998:	8812      	ldrh	r2, [r2, #0]
 801999a:	49c3      	ldr	r1, [pc, #780]	@ (8019ca8 <USB_DeactivateEndpoint+0x36c>)
 801999c:	430a      	orrs	r2, r1
 801999e:	b292      	uxth	r2, r2
 80199a0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80199a2:	687a      	ldr	r2, [r7, #4]
 80199a4:	683b      	ldr	r3, [r7, #0]
 80199a6:	781b      	ldrb	r3, [r3, #0]
 80199a8:	009b      	lsls	r3, r3, #2
 80199aa:	18d3      	adds	r3, r2, r3
 80199ac:	881b      	ldrh	r3, [r3, #0]
 80199ae:	b29a      	uxth	r2, r3
 80199b0:	2008      	movs	r0, #8
 80199b2:	183b      	adds	r3, r7, r0
 80199b4:	49bd      	ldr	r1, [pc, #756]	@ (8019cac <USB_DeactivateEndpoint+0x370>)
 80199b6:	400a      	ands	r2, r1
 80199b8:	801a      	strh	r2, [r3, #0]
 80199ba:	687a      	ldr	r2, [r7, #4]
 80199bc:	683b      	ldr	r3, [r7, #0]
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	009b      	lsls	r3, r3, #2
 80199c2:	18d3      	adds	r3, r2, r3
 80199c4:	183a      	adds	r2, r7, r0
 80199c6:	8812      	ldrh	r2, [r2, #0]
 80199c8:	49b9      	ldr	r1, [pc, #740]	@ (8019cb0 <USB_DeactivateEndpoint+0x374>)
 80199ca:	430a      	orrs	r2, r1
 80199cc:	b292      	uxth	r2, r2
 80199ce:	801a      	strh	r2, [r3, #0]
 80199d0:	e163      	b.n	8019c9a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80199d2:	687a      	ldr	r2, [r7, #4]
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	781b      	ldrb	r3, [r3, #0]
 80199d8:	009b      	lsls	r3, r3, #2
 80199da:	18d2      	adds	r2, r2, r3
 80199dc:	2112      	movs	r1, #18
 80199de:	187b      	adds	r3, r7, r1
 80199e0:	8812      	ldrh	r2, [r2, #0]
 80199e2:	801a      	strh	r2, [r3, #0]
 80199e4:	187b      	adds	r3, r7, r1
 80199e6:	881a      	ldrh	r2, [r3, #0]
 80199e8:	2380      	movs	r3, #128	@ 0x80
 80199ea:	01db      	lsls	r3, r3, #7
 80199ec:	4013      	ands	r3, r2
 80199ee:	d016      	beq.n	8019a1e <USB_DeactivateEndpoint+0xe2>
 80199f0:	687a      	ldr	r2, [r7, #4]
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	781b      	ldrb	r3, [r3, #0]
 80199f6:	009b      	lsls	r3, r3, #2
 80199f8:	18d3      	adds	r3, r2, r3
 80199fa:	881b      	ldrh	r3, [r3, #0]
 80199fc:	b29a      	uxth	r2, r3
 80199fe:	2010      	movs	r0, #16
 8019a00:	183b      	adds	r3, r7, r0
 8019a02:	49a8      	ldr	r1, [pc, #672]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019a04:	400a      	ands	r2, r1
 8019a06:	801a      	strh	r2, [r3, #0]
 8019a08:	687a      	ldr	r2, [r7, #4]
 8019a0a:	683b      	ldr	r3, [r7, #0]
 8019a0c:	781b      	ldrb	r3, [r3, #0]
 8019a0e:	009b      	lsls	r3, r3, #2
 8019a10:	18d3      	adds	r3, r2, r3
 8019a12:	183a      	adds	r2, r7, r0
 8019a14:	8812      	ldrh	r2, [r2, #0]
 8019a16:	49a7      	ldr	r1, [pc, #668]	@ (8019cb4 <USB_DeactivateEndpoint+0x378>)
 8019a18:	430a      	orrs	r2, r1
 8019a1a:	b292      	uxth	r2, r2
 8019a1c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019a1e:	687a      	ldr	r2, [r7, #4]
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	781b      	ldrb	r3, [r3, #0]
 8019a24:	009b      	lsls	r3, r3, #2
 8019a26:	18d3      	adds	r3, r2, r3
 8019a28:	881b      	ldrh	r3, [r3, #0]
 8019a2a:	b29a      	uxth	r2, r3
 8019a2c:	200e      	movs	r0, #14
 8019a2e:	183b      	adds	r3, r7, r0
 8019a30:	49a1      	ldr	r1, [pc, #644]	@ (8019cb8 <USB_DeactivateEndpoint+0x37c>)
 8019a32:	400a      	ands	r2, r1
 8019a34:	801a      	strh	r2, [r3, #0]
 8019a36:	687a      	ldr	r2, [r7, #4]
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	781b      	ldrb	r3, [r3, #0]
 8019a3c:	009b      	lsls	r3, r3, #2
 8019a3e:	18d3      	adds	r3, r2, r3
 8019a40:	183a      	adds	r2, r7, r0
 8019a42:	8812      	ldrh	r2, [r2, #0]
 8019a44:	499a      	ldr	r1, [pc, #616]	@ (8019cb0 <USB_DeactivateEndpoint+0x374>)
 8019a46:	430a      	orrs	r2, r1
 8019a48:	b292      	uxth	r2, r2
 8019a4a:	801a      	strh	r2, [r3, #0]
 8019a4c:	e125      	b.n	8019c9a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	785b      	ldrb	r3, [r3, #1]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d000      	beq.n	8019a58 <USB_DeactivateEndpoint+0x11c>
 8019a56:	e090      	b.n	8019b7a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a58:	687a      	ldr	r2, [r7, #4]
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	18d2      	adds	r2, r2, r3
 8019a62:	2120      	movs	r1, #32
 8019a64:	187b      	adds	r3, r7, r1
 8019a66:	8812      	ldrh	r2, [r2, #0]
 8019a68:	801a      	strh	r2, [r3, #0]
 8019a6a:	187b      	adds	r3, r7, r1
 8019a6c:	881a      	ldrh	r2, [r3, #0]
 8019a6e:	2380      	movs	r3, #128	@ 0x80
 8019a70:	01db      	lsls	r3, r3, #7
 8019a72:	4013      	ands	r3, r2
 8019a74:	d016      	beq.n	8019aa4 <USB_DeactivateEndpoint+0x168>
 8019a76:	687a      	ldr	r2, [r7, #4]
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	009b      	lsls	r3, r3, #2
 8019a7e:	18d3      	adds	r3, r2, r3
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	b29a      	uxth	r2, r3
 8019a84:	201e      	movs	r0, #30
 8019a86:	183b      	adds	r3, r7, r0
 8019a88:	4986      	ldr	r1, [pc, #536]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019a8a:	400a      	ands	r2, r1
 8019a8c:	801a      	strh	r2, [r3, #0]
 8019a8e:	687a      	ldr	r2, [r7, #4]
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	009b      	lsls	r3, r3, #2
 8019a96:	18d3      	adds	r3, r2, r3
 8019a98:	183a      	adds	r2, r7, r0
 8019a9a:	8812      	ldrh	r2, [r2, #0]
 8019a9c:	4985      	ldr	r1, [pc, #532]	@ (8019cb4 <USB_DeactivateEndpoint+0x378>)
 8019a9e:	430a      	orrs	r2, r1
 8019aa0:	b292      	uxth	r2, r2
 8019aa2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	781b      	ldrb	r3, [r3, #0]
 8019aaa:	009b      	lsls	r3, r3, #2
 8019aac:	18d2      	adds	r2, r2, r3
 8019aae:	211c      	movs	r1, #28
 8019ab0:	187b      	adds	r3, r7, r1
 8019ab2:	8812      	ldrh	r2, [r2, #0]
 8019ab4:	801a      	strh	r2, [r3, #0]
 8019ab6:	187b      	adds	r3, r7, r1
 8019ab8:	881b      	ldrh	r3, [r3, #0]
 8019aba:	2240      	movs	r2, #64	@ 0x40
 8019abc:	4013      	ands	r3, r2
 8019abe:	d016      	beq.n	8019aee <USB_DeactivateEndpoint+0x1b2>
 8019ac0:	687a      	ldr	r2, [r7, #4]
 8019ac2:	683b      	ldr	r3, [r7, #0]
 8019ac4:	781b      	ldrb	r3, [r3, #0]
 8019ac6:	009b      	lsls	r3, r3, #2
 8019ac8:	18d3      	adds	r3, r2, r3
 8019aca:	881b      	ldrh	r3, [r3, #0]
 8019acc:	b29a      	uxth	r2, r3
 8019ace:	201a      	movs	r0, #26
 8019ad0:	183b      	adds	r3, r7, r0
 8019ad2:	4974      	ldr	r1, [pc, #464]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019ad4:	400a      	ands	r2, r1
 8019ad6:	801a      	strh	r2, [r3, #0]
 8019ad8:	687a      	ldr	r2, [r7, #4]
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	009b      	lsls	r3, r3, #2
 8019ae0:	18d3      	adds	r3, r2, r3
 8019ae2:	183a      	adds	r2, r7, r0
 8019ae4:	8812      	ldrh	r2, [r2, #0]
 8019ae6:	4970      	ldr	r1, [pc, #448]	@ (8019ca8 <USB_DeactivateEndpoint+0x36c>)
 8019ae8:	430a      	orrs	r2, r1
 8019aea:	b292      	uxth	r2, r2
 8019aec:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019aee:	687a      	ldr	r2, [r7, #4]
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	781b      	ldrb	r3, [r3, #0]
 8019af4:	009b      	lsls	r3, r3, #2
 8019af6:	18d3      	adds	r3, r2, r3
 8019af8:	881b      	ldrh	r3, [r3, #0]
 8019afa:	b29a      	uxth	r2, r3
 8019afc:	2018      	movs	r0, #24
 8019afe:	183b      	adds	r3, r7, r0
 8019b00:	4968      	ldr	r1, [pc, #416]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019b02:	400a      	ands	r2, r1
 8019b04:	801a      	strh	r2, [r3, #0]
 8019b06:	687a      	ldr	r2, [r7, #4]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	18d3      	adds	r3, r2, r3
 8019b10:	183a      	adds	r2, r7, r0
 8019b12:	8812      	ldrh	r2, [r2, #0]
 8019b14:	4964      	ldr	r1, [pc, #400]	@ (8019ca8 <USB_DeactivateEndpoint+0x36c>)
 8019b16:	430a      	orrs	r2, r1
 8019b18:	b292      	uxth	r2, r2
 8019b1a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019b1c:	687a      	ldr	r2, [r7, #4]
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	781b      	ldrb	r3, [r3, #0]
 8019b22:	009b      	lsls	r3, r3, #2
 8019b24:	18d3      	adds	r3, r2, r3
 8019b26:	881b      	ldrh	r3, [r3, #0]
 8019b28:	b29a      	uxth	r2, r3
 8019b2a:	2016      	movs	r0, #22
 8019b2c:	183b      	adds	r3, r7, r0
 8019b2e:	4962      	ldr	r1, [pc, #392]	@ (8019cb8 <USB_DeactivateEndpoint+0x37c>)
 8019b30:	400a      	ands	r2, r1
 8019b32:	801a      	strh	r2, [r3, #0]
 8019b34:	687a      	ldr	r2, [r7, #4]
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	781b      	ldrb	r3, [r3, #0]
 8019b3a:	009b      	lsls	r3, r3, #2
 8019b3c:	18d3      	adds	r3, r2, r3
 8019b3e:	183a      	adds	r2, r7, r0
 8019b40:	8812      	ldrh	r2, [r2, #0]
 8019b42:	495b      	ldr	r1, [pc, #364]	@ (8019cb0 <USB_DeactivateEndpoint+0x374>)
 8019b44:	430a      	orrs	r2, r1
 8019b46:	b292      	uxth	r2, r2
 8019b48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019b4a:	687a      	ldr	r2, [r7, #4]
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	009b      	lsls	r3, r3, #2
 8019b52:	18d3      	adds	r3, r2, r3
 8019b54:	881b      	ldrh	r3, [r3, #0]
 8019b56:	b29a      	uxth	r2, r3
 8019b58:	2014      	movs	r0, #20
 8019b5a:	183b      	adds	r3, r7, r0
 8019b5c:	4953      	ldr	r1, [pc, #332]	@ (8019cac <USB_DeactivateEndpoint+0x370>)
 8019b5e:	400a      	ands	r2, r1
 8019b60:	801a      	strh	r2, [r3, #0]
 8019b62:	687a      	ldr	r2, [r7, #4]
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	781b      	ldrb	r3, [r3, #0]
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	18d3      	adds	r3, r2, r3
 8019b6c:	183a      	adds	r2, r7, r0
 8019b6e:	8812      	ldrh	r2, [r2, #0]
 8019b70:	494f      	ldr	r1, [pc, #316]	@ (8019cb0 <USB_DeactivateEndpoint+0x374>)
 8019b72:	430a      	orrs	r2, r1
 8019b74:	b292      	uxth	r2, r2
 8019b76:	801a      	strh	r2, [r3, #0]
 8019b78:	e08f      	b.n	8019c9a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019b7a:	687a      	ldr	r2, [r7, #4]
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	781b      	ldrb	r3, [r3, #0]
 8019b80:	009b      	lsls	r3, r3, #2
 8019b82:	18d2      	adds	r2, r2, r3
 8019b84:	212e      	movs	r1, #46	@ 0x2e
 8019b86:	187b      	adds	r3, r7, r1
 8019b88:	8812      	ldrh	r2, [r2, #0]
 8019b8a:	801a      	strh	r2, [r3, #0]
 8019b8c:	187b      	adds	r3, r7, r1
 8019b8e:	881a      	ldrh	r2, [r3, #0]
 8019b90:	2380      	movs	r3, #128	@ 0x80
 8019b92:	01db      	lsls	r3, r3, #7
 8019b94:	4013      	ands	r3, r2
 8019b96:	d016      	beq.n	8019bc6 <USB_DeactivateEndpoint+0x28a>
 8019b98:	687a      	ldr	r2, [r7, #4]
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	009b      	lsls	r3, r3, #2
 8019ba0:	18d3      	adds	r3, r2, r3
 8019ba2:	881b      	ldrh	r3, [r3, #0]
 8019ba4:	b29a      	uxth	r2, r3
 8019ba6:	202c      	movs	r0, #44	@ 0x2c
 8019ba8:	183b      	adds	r3, r7, r0
 8019baa:	493e      	ldr	r1, [pc, #248]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019bac:	400a      	ands	r2, r1
 8019bae:	801a      	strh	r2, [r3, #0]
 8019bb0:	687a      	ldr	r2, [r7, #4]
 8019bb2:	683b      	ldr	r3, [r7, #0]
 8019bb4:	781b      	ldrb	r3, [r3, #0]
 8019bb6:	009b      	lsls	r3, r3, #2
 8019bb8:	18d3      	adds	r3, r2, r3
 8019bba:	183a      	adds	r2, r7, r0
 8019bbc:	8812      	ldrh	r2, [r2, #0]
 8019bbe:	493d      	ldr	r1, [pc, #244]	@ (8019cb4 <USB_DeactivateEndpoint+0x378>)
 8019bc0:	430a      	orrs	r2, r1
 8019bc2:	b292      	uxth	r2, r2
 8019bc4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019bc6:	687a      	ldr	r2, [r7, #4]
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	009b      	lsls	r3, r3, #2
 8019bce:	18d2      	adds	r2, r2, r3
 8019bd0:	212a      	movs	r1, #42	@ 0x2a
 8019bd2:	187b      	adds	r3, r7, r1
 8019bd4:	8812      	ldrh	r2, [r2, #0]
 8019bd6:	801a      	strh	r2, [r3, #0]
 8019bd8:	187b      	adds	r3, r7, r1
 8019bda:	881b      	ldrh	r3, [r3, #0]
 8019bdc:	2240      	movs	r2, #64	@ 0x40
 8019bde:	4013      	ands	r3, r2
 8019be0:	d016      	beq.n	8019c10 <USB_DeactivateEndpoint+0x2d4>
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	18d3      	adds	r3, r2, r3
 8019bec:	881b      	ldrh	r3, [r3, #0]
 8019bee:	b29a      	uxth	r2, r3
 8019bf0:	2028      	movs	r0, #40	@ 0x28
 8019bf2:	183b      	adds	r3, r7, r0
 8019bf4:	492b      	ldr	r1, [pc, #172]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019bf6:	400a      	ands	r2, r1
 8019bf8:	801a      	strh	r2, [r3, #0]
 8019bfa:	687a      	ldr	r2, [r7, #4]
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	781b      	ldrb	r3, [r3, #0]
 8019c00:	009b      	lsls	r3, r3, #2
 8019c02:	18d3      	adds	r3, r2, r3
 8019c04:	183a      	adds	r2, r7, r0
 8019c06:	8812      	ldrh	r2, [r2, #0]
 8019c08:	4927      	ldr	r1, [pc, #156]	@ (8019ca8 <USB_DeactivateEndpoint+0x36c>)
 8019c0a:	430a      	orrs	r2, r1
 8019c0c:	b292      	uxth	r2, r2
 8019c0e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019c10:	687a      	ldr	r2, [r7, #4]
 8019c12:	683b      	ldr	r3, [r7, #0]
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	009b      	lsls	r3, r3, #2
 8019c18:	18d3      	adds	r3, r2, r3
 8019c1a:	881b      	ldrh	r3, [r3, #0]
 8019c1c:	b29a      	uxth	r2, r3
 8019c1e:	2026      	movs	r0, #38	@ 0x26
 8019c20:	183b      	adds	r3, r7, r0
 8019c22:	4920      	ldr	r1, [pc, #128]	@ (8019ca4 <USB_DeactivateEndpoint+0x368>)
 8019c24:	400a      	ands	r2, r1
 8019c26:	801a      	strh	r2, [r3, #0]
 8019c28:	687a      	ldr	r2, [r7, #4]
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	781b      	ldrb	r3, [r3, #0]
 8019c2e:	009b      	lsls	r3, r3, #2
 8019c30:	18d3      	adds	r3, r2, r3
 8019c32:	183a      	adds	r2, r7, r0
 8019c34:	8812      	ldrh	r2, [r2, #0]
 8019c36:	491f      	ldr	r1, [pc, #124]	@ (8019cb4 <USB_DeactivateEndpoint+0x378>)
 8019c38:	430a      	orrs	r2, r1
 8019c3a:	b292      	uxth	r2, r2
 8019c3c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c3e:	687a      	ldr	r2, [r7, #4]
 8019c40:	683b      	ldr	r3, [r7, #0]
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	009b      	lsls	r3, r3, #2
 8019c46:	18d3      	adds	r3, r2, r3
 8019c48:	881b      	ldrh	r3, [r3, #0]
 8019c4a:	b29a      	uxth	r2, r3
 8019c4c:	2024      	movs	r0, #36	@ 0x24
 8019c4e:	183b      	adds	r3, r7, r0
 8019c50:	4916      	ldr	r1, [pc, #88]	@ (8019cac <USB_DeactivateEndpoint+0x370>)
 8019c52:	400a      	ands	r2, r1
 8019c54:	801a      	strh	r2, [r3, #0]
 8019c56:	687a      	ldr	r2, [r7, #4]
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	009b      	lsls	r3, r3, #2
 8019c5e:	18d3      	adds	r3, r2, r3
 8019c60:	183a      	adds	r2, r7, r0
 8019c62:	8812      	ldrh	r2, [r2, #0]
 8019c64:	4912      	ldr	r1, [pc, #72]	@ (8019cb0 <USB_DeactivateEndpoint+0x374>)
 8019c66:	430a      	orrs	r2, r1
 8019c68:	b292      	uxth	r2, r2
 8019c6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019c6c:	687a      	ldr	r2, [r7, #4]
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	781b      	ldrb	r3, [r3, #0]
 8019c72:	009b      	lsls	r3, r3, #2
 8019c74:	18d3      	adds	r3, r2, r3
 8019c76:	881b      	ldrh	r3, [r3, #0]
 8019c78:	b29a      	uxth	r2, r3
 8019c7a:	2022      	movs	r0, #34	@ 0x22
 8019c7c:	183b      	adds	r3, r7, r0
 8019c7e:	490e      	ldr	r1, [pc, #56]	@ (8019cb8 <USB_DeactivateEndpoint+0x37c>)
 8019c80:	400a      	ands	r2, r1
 8019c82:	801a      	strh	r2, [r3, #0]
 8019c84:	687a      	ldr	r2, [r7, #4]
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	781b      	ldrb	r3, [r3, #0]
 8019c8a:	009b      	lsls	r3, r3, #2
 8019c8c:	18d3      	adds	r3, r2, r3
 8019c8e:	183a      	adds	r2, r7, r0
 8019c90:	8812      	ldrh	r2, [r2, #0]
 8019c92:	4907      	ldr	r1, [pc, #28]	@ (8019cb0 <USB_DeactivateEndpoint+0x374>)
 8019c94:	430a      	orrs	r2, r1
 8019c96:	b292      	uxth	r2, r2
 8019c98:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019c9a:	2300      	movs	r3, #0
}
 8019c9c:	0018      	movs	r0, r3
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	b00c      	add	sp, #48	@ 0x30
 8019ca2:	bd80      	pop	{r7, pc}
 8019ca4:	ffff8f8f 	.word	0xffff8f8f
 8019ca8:	ffff80c0 	.word	0xffff80c0
 8019cac:	ffff8fbf 	.word	0xffff8fbf
 8019cb0:	ffff8080 	.word	0xffff8080
 8019cb4:	ffffc080 	.word	0xffffc080
 8019cb8:	ffffbf8f 	.word	0xffffbf8f

08019cbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019cbc:	b590      	push	{r4, r7, lr}
 8019cbe:	b0c3      	sub	sp, #268	@ 0x10c
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	785b      	ldrb	r3, [r3, #1]
 8019cca:	2b01      	cmp	r3, #1
 8019ccc:	d001      	beq.n	8019cd2 <USB_EPStartXfer+0x16>
 8019cce:	f000 fd2d 	bl	801a72c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	699a      	ldr	r2, [r3, #24]
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	691b      	ldr	r3, [r3, #16]
 8019cda:	429a      	cmp	r2, r3
 8019cdc:	d905      	bls.n	8019cea <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	691b      	ldr	r3, [r3, #16]
 8019ce2:	1d7a      	adds	r2, r7, #5
 8019ce4:	32ff      	adds	r2, #255	@ 0xff
 8019ce6:	6013      	str	r3, [r2, #0]
 8019ce8:	e004      	b.n	8019cf4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	699b      	ldr	r3, [r3, #24]
 8019cee:	1d7a      	adds	r2, r7, #5
 8019cf0:	32ff      	adds	r2, #255	@ 0xff
 8019cf2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	7b1b      	ldrb	r3, [r3, #12]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d125      	bne.n	8019d48 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	6959      	ldr	r1, [r3, #20]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	88da      	ldrh	r2, [r3, #6]
 8019d04:	1d7b      	adds	r3, r7, #5
 8019d06:	33ff      	adds	r3, #255	@ 0xff
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f001 fa47 	bl	801b1a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	613b      	str	r3, [r7, #16]
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	2250      	movs	r2, #80	@ 0x50
 8019d1a:	5a9b      	ldrh	r3, [r3, r2]
 8019d1c:	b29b      	uxth	r3, r3
 8019d1e:	001a      	movs	r2, r3
 8019d20:	693b      	ldr	r3, [r7, #16]
 8019d22:	189b      	adds	r3, r3, r2
 8019d24:	613b      	str	r3, [r7, #16]
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	00da      	lsls	r2, r3, #3
 8019d2c:	693b      	ldr	r3, [r7, #16]
 8019d2e:	18d3      	adds	r3, r2, r3
 8019d30:	4ad7      	ldr	r2, [pc, #860]	@ (801a090 <USB_EPStartXfer+0x3d4>)
 8019d32:	4694      	mov	ip, r2
 8019d34:	4463      	add	r3, ip
 8019d36:	60fb      	str	r3, [r7, #12]
 8019d38:	1d7b      	adds	r3, r7, #5
 8019d3a:	33ff      	adds	r3, #255	@ 0xff
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	b29a      	uxth	r2, r3
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	801a      	strh	r2, [r3, #0]
 8019d44:	f000 fccd 	bl	801a6e2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	78db      	ldrb	r3, [r3, #3]
 8019d4c:	2b02      	cmp	r3, #2
 8019d4e:	d000      	beq.n	8019d52 <USB_EPStartXfer+0x96>
 8019d50:	e362      	b.n	801a418 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	6a1a      	ldr	r2, [r3, #32]
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	691b      	ldr	r3, [r3, #16]
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	d800      	bhi.n	8019d60 <USB_EPStartXfer+0xa4>
 8019d5e:	e309      	b.n	801a374 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019d60:	687a      	ldr	r2, [r7, #4]
 8019d62:	683b      	ldr	r3, [r7, #0]
 8019d64:	781b      	ldrb	r3, [r3, #0]
 8019d66:	009b      	lsls	r3, r3, #2
 8019d68:	18d3      	adds	r3, r2, r3
 8019d6a:	881b      	ldrh	r3, [r3, #0]
 8019d6c:	b29a      	uxth	r2, r3
 8019d6e:	2056      	movs	r0, #86	@ 0x56
 8019d70:	183b      	adds	r3, r7, r0
 8019d72:	49c8      	ldr	r1, [pc, #800]	@ (801a094 <USB_EPStartXfer+0x3d8>)
 8019d74:	400a      	ands	r2, r1
 8019d76:	801a      	strh	r2, [r3, #0]
 8019d78:	687a      	ldr	r2, [r7, #4]
 8019d7a:	683b      	ldr	r3, [r7, #0]
 8019d7c:	781b      	ldrb	r3, [r3, #0]
 8019d7e:	009b      	lsls	r3, r3, #2
 8019d80:	18d3      	adds	r3, r2, r3
 8019d82:	183a      	adds	r2, r7, r0
 8019d84:	8812      	ldrh	r2, [r2, #0]
 8019d86:	49c4      	ldr	r1, [pc, #784]	@ (801a098 <USB_EPStartXfer+0x3dc>)
 8019d88:	430a      	orrs	r2, r1
 8019d8a:	b292      	uxth	r2, r2
 8019d8c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019d8e:	683b      	ldr	r3, [r7, #0]
 8019d90:	6a1a      	ldr	r2, [r3, #32]
 8019d92:	1d7b      	adds	r3, r7, #5
 8019d94:	33ff      	adds	r3, #255	@ 0xff
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	1ad2      	subs	r2, r2, r3
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019d9e:	687a      	ldr	r2, [r7, #4]
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	781b      	ldrb	r3, [r3, #0]
 8019da4:	009b      	lsls	r3, r3, #2
 8019da6:	18d3      	adds	r3, r2, r3
 8019da8:	881b      	ldrh	r3, [r3, #0]
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	001a      	movs	r2, r3
 8019dae:	2340      	movs	r3, #64	@ 0x40
 8019db0:	4013      	ands	r3, r2
 8019db2:	d100      	bne.n	8019db6 <USB_EPStartXfer+0xfa>
 8019db4:	e176      	b.n	801a0a4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	785b      	ldrb	r3, [r3, #1]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d000      	beq.n	8019dc4 <USB_EPStartXfer+0x108>
 8019dc2:	e074      	b.n	8019eae <USB_EPStartXfer+0x1f2>
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2250      	movs	r2, #80	@ 0x50
 8019dcc:	5a9b      	ldrh	r3, [r3, r2]
 8019dce:	b29b      	uxth	r3, r3
 8019dd0:	001a      	movs	r2, r3
 8019dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dd4:	189b      	adds	r3, r3, r2
 8019dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	781b      	ldrb	r3, [r3, #0]
 8019ddc:	00da      	lsls	r2, r3, #3
 8019dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019de0:	18d3      	adds	r3, r2, r3
 8019de2:	4aae      	ldr	r2, [pc, #696]	@ (801a09c <USB_EPStartXfer+0x3e0>)
 8019de4:	4694      	mov	ip, r2
 8019de6:	4463      	add	r3, ip
 8019de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8019dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dec:	881b      	ldrh	r3, [r3, #0]
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	059b      	lsls	r3, r3, #22
 8019df2:	0d9b      	lsrs	r3, r3, #22
 8019df4:	b29a      	uxth	r2, r3
 8019df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df8:	801a      	strh	r2, [r3, #0]
 8019dfa:	1d7b      	adds	r3, r7, #5
 8019dfc:	33ff      	adds	r3, #255	@ 0xff
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e02:	d924      	bls.n	8019e4e <USB_EPStartXfer+0x192>
 8019e04:	1d7b      	adds	r3, r7, #5
 8019e06:	33ff      	adds	r3, #255	@ 0xff
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	095b      	lsrs	r3, r3, #5
 8019e0c:	1c7a      	adds	r2, r7, #1
 8019e0e:	32ff      	adds	r2, #255	@ 0xff
 8019e10:	6013      	str	r3, [r2, #0]
 8019e12:	1d7b      	adds	r3, r7, #5
 8019e14:	33ff      	adds	r3, #255	@ 0xff
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	221f      	movs	r2, #31
 8019e1a:	4013      	ands	r3, r2
 8019e1c:	d106      	bne.n	8019e2c <USB_EPStartXfer+0x170>
 8019e1e:	1c7b      	adds	r3, r7, #1
 8019e20:	33ff      	adds	r3, #255	@ 0xff
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	3b01      	subs	r3, #1
 8019e26:	1c7a      	adds	r2, r7, #1
 8019e28:	32ff      	adds	r2, #255	@ 0xff
 8019e2a:	6013      	str	r3, [r2, #0]
 8019e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e2e:	881b      	ldrh	r3, [r3, #0]
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	1c7b      	adds	r3, r7, #1
 8019e34:	33ff      	adds	r3, #255	@ 0xff
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	b29b      	uxth	r3, r3
 8019e3a:	029b      	lsls	r3, r3, #10
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	4313      	orrs	r3, r2
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	4a97      	ldr	r2, [pc, #604]	@ (801a0a0 <USB_EPStartXfer+0x3e4>)
 8019e44:	4313      	orrs	r3, r2
 8019e46:	b29a      	uxth	r2, r3
 8019e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e4a:	801a      	strh	r2, [r3, #0]
 8019e4c:	e04a      	b.n	8019ee4 <USB_EPStartXfer+0x228>
 8019e4e:	1d7b      	adds	r3, r7, #5
 8019e50:	33ff      	adds	r3, #255	@ 0xff
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d108      	bne.n	8019e6a <USB_EPStartXfer+0x1ae>
 8019e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e5a:	881b      	ldrh	r3, [r3, #0]
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	4a90      	ldr	r2, [pc, #576]	@ (801a0a0 <USB_EPStartXfer+0x3e4>)
 8019e60:	4313      	orrs	r3, r2
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e66:	801a      	strh	r2, [r3, #0]
 8019e68:	e03c      	b.n	8019ee4 <USB_EPStartXfer+0x228>
 8019e6a:	1d7b      	adds	r3, r7, #5
 8019e6c:	33ff      	adds	r3, #255	@ 0xff
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	085b      	lsrs	r3, r3, #1
 8019e72:	1c7a      	adds	r2, r7, #1
 8019e74:	32ff      	adds	r2, #255	@ 0xff
 8019e76:	6013      	str	r3, [r2, #0]
 8019e78:	1d7b      	adds	r3, r7, #5
 8019e7a:	33ff      	adds	r3, #255	@ 0xff
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	2201      	movs	r2, #1
 8019e80:	4013      	ands	r3, r2
 8019e82:	d006      	beq.n	8019e92 <USB_EPStartXfer+0x1d6>
 8019e84:	1c7b      	adds	r3, r7, #1
 8019e86:	33ff      	adds	r3, #255	@ 0xff
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	3301      	adds	r3, #1
 8019e8c:	1c7a      	adds	r2, r7, #1
 8019e8e:	32ff      	adds	r2, #255	@ 0xff
 8019e90:	6013      	str	r3, [r2, #0]
 8019e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e94:	881b      	ldrh	r3, [r3, #0]
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	1c7b      	adds	r3, r7, #1
 8019e9a:	33ff      	adds	r3, #255	@ 0xff
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	b29b      	uxth	r3, r3
 8019ea0:	029b      	lsls	r3, r3, #10
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	4313      	orrs	r3, r2
 8019ea6:	b29a      	uxth	r2, r3
 8019ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eaa:	801a      	strh	r2, [r3, #0]
 8019eac:	e01a      	b.n	8019ee4 <USB_EPStartXfer+0x228>
 8019eae:	683b      	ldr	r3, [r7, #0]
 8019eb0:	785b      	ldrb	r3, [r3, #1]
 8019eb2:	2b01      	cmp	r3, #1
 8019eb4:	d116      	bne.n	8019ee4 <USB_EPStartXfer+0x228>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	2250      	movs	r2, #80	@ 0x50
 8019eba:	5a9b      	ldrh	r3, [r3, r2]
 8019ebc:	b29b      	uxth	r3, r3
 8019ebe:	001a      	movs	r2, r3
 8019ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec2:	189b      	adds	r3, r3, r2
 8019ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ec6:	683b      	ldr	r3, [r7, #0]
 8019ec8:	781b      	ldrb	r3, [r3, #0]
 8019eca:	00da      	lsls	r2, r3, #3
 8019ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ece:	18d3      	adds	r3, r2, r3
 8019ed0:	4a72      	ldr	r2, [pc, #456]	@ (801a09c <USB_EPStartXfer+0x3e0>)
 8019ed2:	4694      	mov	ip, r2
 8019ed4:	4463      	add	r3, ip
 8019ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ed8:	1d7b      	adds	r3, r7, #5
 8019eda:	33ff      	adds	r3, #255	@ 0xff
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ee2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019ee4:	2076      	movs	r0, #118	@ 0x76
 8019ee6:	183b      	adds	r3, r7, r0
 8019ee8:	683a      	ldr	r2, [r7, #0]
 8019eea:	8952      	ldrh	r2, [r2, #10]
 8019eec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	6959      	ldr	r1, [r3, #20]
 8019ef2:	1d7b      	adds	r3, r7, #5
 8019ef4:	33ff      	adds	r3, #255	@ 0xff
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	b29c      	uxth	r4, r3
 8019efa:	183b      	adds	r3, r7, r0
 8019efc:	881a      	ldrh	r2, [r3, #0]
 8019efe:	6878      	ldr	r0, [r7, #4]
 8019f00:	0023      	movs	r3, r4
 8019f02:	f001 f94d 	bl	801b1a0 <USB_WritePMA>
            ep->xfer_buff += len;
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	695a      	ldr	r2, [r3, #20]
 8019f0a:	1d7b      	adds	r3, r7, #5
 8019f0c:	33ff      	adds	r3, #255	@ 0xff
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	18d2      	adds	r2, r2, r3
 8019f12:	683b      	ldr	r3, [r7, #0]
 8019f14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019f16:	683b      	ldr	r3, [r7, #0]
 8019f18:	6a1a      	ldr	r2, [r3, #32]
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	691b      	ldr	r3, [r3, #16]
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d908      	bls.n	8019f34 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	6a1a      	ldr	r2, [r3, #32]
 8019f26:	1d7b      	adds	r3, r7, #5
 8019f28:	33ff      	adds	r3, #255	@ 0xff
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	1ad2      	subs	r2, r2, r3
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	621a      	str	r2, [r3, #32]
 8019f32:	e007      	b.n	8019f44 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	6a1b      	ldr	r3, [r3, #32]
 8019f38:	1d7a      	adds	r2, r7, #5
 8019f3a:	32ff      	adds	r2, #255	@ 0xff
 8019f3c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	2200      	movs	r2, #0
 8019f42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	785b      	ldrb	r3, [r3, #1]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d000      	beq.n	8019f4e <USB_EPStartXfer+0x292>
 8019f4c:	e070      	b.n	801a030 <USB_EPStartXfer+0x374>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	61bb      	str	r3, [r7, #24]
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	2250      	movs	r2, #80	@ 0x50
 8019f56:	5a9b      	ldrh	r3, [r3, r2]
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	001a      	movs	r2, r3
 8019f5c:	69bb      	ldr	r3, [r7, #24]
 8019f5e:	189b      	adds	r3, r3, r2
 8019f60:	61bb      	str	r3, [r7, #24]
 8019f62:	683b      	ldr	r3, [r7, #0]
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	00da      	lsls	r2, r3, #3
 8019f68:	69bb      	ldr	r3, [r7, #24]
 8019f6a:	18d3      	adds	r3, r2, r3
 8019f6c:	4a48      	ldr	r2, [pc, #288]	@ (801a090 <USB_EPStartXfer+0x3d4>)
 8019f6e:	4694      	mov	ip, r2
 8019f70:	4463      	add	r3, ip
 8019f72:	617b      	str	r3, [r7, #20]
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	881b      	ldrh	r3, [r3, #0]
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	059b      	lsls	r3, r3, #22
 8019f7c:	0d9b      	lsrs	r3, r3, #22
 8019f7e:	b29a      	uxth	r2, r3
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	801a      	strh	r2, [r3, #0]
 8019f84:	1d7b      	adds	r3, r7, #5
 8019f86:	33ff      	adds	r3, #255	@ 0xff
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019f8c:	d922      	bls.n	8019fd4 <USB_EPStartXfer+0x318>
 8019f8e:	1d7b      	adds	r3, r7, #5
 8019f90:	33ff      	adds	r3, #255	@ 0xff
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	095b      	lsrs	r3, r3, #5
 8019f96:	21fc      	movs	r1, #252	@ 0xfc
 8019f98:	187a      	adds	r2, r7, r1
 8019f9a:	6013      	str	r3, [r2, #0]
 8019f9c:	1d7b      	adds	r3, r7, #5
 8019f9e:	33ff      	adds	r3, #255	@ 0xff
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	221f      	movs	r2, #31
 8019fa4:	4013      	ands	r3, r2
 8019fa6:	d104      	bne.n	8019fb2 <USB_EPStartXfer+0x2f6>
 8019fa8:	187b      	adds	r3, r7, r1
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	3b01      	subs	r3, #1
 8019fae:	187a      	adds	r2, r7, r1
 8019fb0:	6013      	str	r3, [r2, #0]
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	881b      	ldrh	r3, [r3, #0]
 8019fb6:	b29a      	uxth	r2, r3
 8019fb8:	23fc      	movs	r3, #252	@ 0xfc
 8019fba:	18fb      	adds	r3, r7, r3
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	029b      	lsls	r3, r3, #10
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	4313      	orrs	r3, r2
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	4a35      	ldr	r2, [pc, #212]	@ (801a0a0 <USB_EPStartXfer+0x3e4>)
 8019fca:	4313      	orrs	r3, r2
 8019fcc:	b29a      	uxth	r2, r3
 8019fce:	697b      	ldr	r3, [r7, #20]
 8019fd0:	801a      	strh	r2, [r3, #0]
 8019fd2:	e04a      	b.n	801a06a <USB_EPStartXfer+0x3ae>
 8019fd4:	1d7b      	adds	r3, r7, #5
 8019fd6:	33ff      	adds	r3, #255	@ 0xff
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d108      	bne.n	8019ff0 <USB_EPStartXfer+0x334>
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	881b      	ldrh	r3, [r3, #0]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	4a2e      	ldr	r2, [pc, #184]	@ (801a0a0 <USB_EPStartXfer+0x3e4>)
 8019fe6:	4313      	orrs	r3, r2
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	801a      	strh	r2, [r3, #0]
 8019fee:	e03c      	b.n	801a06a <USB_EPStartXfer+0x3ae>
 8019ff0:	1d7b      	adds	r3, r7, #5
 8019ff2:	33ff      	adds	r3, #255	@ 0xff
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	085b      	lsrs	r3, r3, #1
 8019ff8:	21fc      	movs	r1, #252	@ 0xfc
 8019ffa:	187a      	adds	r2, r7, r1
 8019ffc:	6013      	str	r3, [r2, #0]
 8019ffe:	1d7b      	adds	r3, r7, #5
 801a000:	33ff      	adds	r3, #255	@ 0xff
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	2201      	movs	r2, #1
 801a006:	4013      	ands	r3, r2
 801a008:	d004      	beq.n	801a014 <USB_EPStartXfer+0x358>
 801a00a:	187b      	adds	r3, r7, r1
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	3301      	adds	r3, #1
 801a010:	187a      	adds	r2, r7, r1
 801a012:	6013      	str	r3, [r2, #0]
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	881b      	ldrh	r3, [r3, #0]
 801a018:	b29a      	uxth	r2, r3
 801a01a:	23fc      	movs	r3, #252	@ 0xfc
 801a01c:	18fb      	adds	r3, r7, r3
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	b29b      	uxth	r3, r3
 801a022:	029b      	lsls	r3, r3, #10
 801a024:	b29b      	uxth	r3, r3
 801a026:	4313      	orrs	r3, r2
 801a028:	b29a      	uxth	r2, r3
 801a02a:	697b      	ldr	r3, [r7, #20]
 801a02c:	801a      	strh	r2, [r3, #0]
 801a02e:	e01c      	b.n	801a06a <USB_EPStartXfer+0x3ae>
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	785b      	ldrb	r3, [r3, #1]
 801a034:	2b01      	cmp	r3, #1
 801a036:	d118      	bne.n	801a06a <USB_EPStartXfer+0x3ae>
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	623b      	str	r3, [r7, #32]
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2250      	movs	r2, #80	@ 0x50
 801a040:	5a9b      	ldrh	r3, [r3, r2]
 801a042:	b29b      	uxth	r3, r3
 801a044:	001a      	movs	r2, r3
 801a046:	6a3b      	ldr	r3, [r7, #32]
 801a048:	189b      	adds	r3, r3, r2
 801a04a:	623b      	str	r3, [r7, #32]
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	781b      	ldrb	r3, [r3, #0]
 801a050:	00da      	lsls	r2, r3, #3
 801a052:	6a3b      	ldr	r3, [r7, #32]
 801a054:	18d3      	adds	r3, r2, r3
 801a056:	4a0e      	ldr	r2, [pc, #56]	@ (801a090 <USB_EPStartXfer+0x3d4>)
 801a058:	4694      	mov	ip, r2
 801a05a:	4463      	add	r3, ip
 801a05c:	61fb      	str	r3, [r7, #28]
 801a05e:	1d7b      	adds	r3, r7, #5
 801a060:	33ff      	adds	r3, #255	@ 0xff
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	b29a      	uxth	r2, r3
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a06a:	2076      	movs	r0, #118	@ 0x76
 801a06c:	183b      	adds	r3, r7, r0
 801a06e:	683a      	ldr	r2, [r7, #0]
 801a070:	8912      	ldrh	r2, [r2, #8]
 801a072:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	6959      	ldr	r1, [r3, #20]
 801a078:	1d7b      	adds	r3, r7, #5
 801a07a:	33ff      	adds	r3, #255	@ 0xff
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	b29c      	uxth	r4, r3
 801a080:	183b      	adds	r3, r7, r0
 801a082:	881a      	ldrh	r2, [r3, #0]
 801a084:	6878      	ldr	r0, [r7, #4]
 801a086:	0023      	movs	r3, r4
 801a088:	f001 f88a 	bl	801b1a0 <USB_WritePMA>
 801a08c:	e329      	b.n	801a6e2 <USB_EPStartXfer+0xa26>
 801a08e:	46c0      	nop			@ (mov r8, r8)
 801a090:	00000402 	.word	0x00000402
 801a094:	ffff8f8f 	.word	0xffff8f8f
 801a098:	ffff8180 	.word	0xffff8180
 801a09c:	00000406 	.word	0x00000406
 801a0a0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a0a4:	683b      	ldr	r3, [r7, #0]
 801a0a6:	785b      	ldrb	r3, [r3, #1]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d000      	beq.n	801a0ae <USB_EPStartXfer+0x3f2>
 801a0ac:	e070      	b.n	801a190 <USB_EPStartXfer+0x4d4>
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	2250      	movs	r2, #80	@ 0x50
 801a0b6:	5a9b      	ldrh	r3, [r3, r2]
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	001a      	movs	r2, r3
 801a0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0be:	189b      	adds	r3, r3, r2
 801a0c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	781b      	ldrb	r3, [r3, #0]
 801a0c6:	00da      	lsls	r2, r3, #3
 801a0c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0ca:	18d3      	adds	r3, r2, r3
 801a0cc:	4acd      	ldr	r2, [pc, #820]	@ (801a404 <USB_EPStartXfer+0x748>)
 801a0ce:	4694      	mov	ip, r2
 801a0d0:	4463      	add	r3, ip
 801a0d2:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0d6:	881b      	ldrh	r3, [r3, #0]
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	059b      	lsls	r3, r3, #22
 801a0dc:	0d9b      	lsrs	r3, r3, #22
 801a0de:	b29a      	uxth	r2, r3
 801a0e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0e2:	801a      	strh	r2, [r3, #0]
 801a0e4:	1d7b      	adds	r3, r7, #5
 801a0e6:	33ff      	adds	r3, #255	@ 0xff
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0ec:	d922      	bls.n	801a134 <USB_EPStartXfer+0x478>
 801a0ee:	1d7b      	adds	r3, r7, #5
 801a0f0:	33ff      	adds	r3, #255	@ 0xff
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	095b      	lsrs	r3, r3, #5
 801a0f6:	21f8      	movs	r1, #248	@ 0xf8
 801a0f8:	187a      	adds	r2, r7, r1
 801a0fa:	6013      	str	r3, [r2, #0]
 801a0fc:	1d7b      	adds	r3, r7, #5
 801a0fe:	33ff      	adds	r3, #255	@ 0xff
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	221f      	movs	r2, #31
 801a104:	4013      	ands	r3, r2
 801a106:	d104      	bne.n	801a112 <USB_EPStartXfer+0x456>
 801a108:	187b      	adds	r3, r7, r1
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	3b01      	subs	r3, #1
 801a10e:	187a      	adds	r2, r7, r1
 801a110:	6013      	str	r3, [r2, #0]
 801a112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a114:	881b      	ldrh	r3, [r3, #0]
 801a116:	b29a      	uxth	r2, r3
 801a118:	23f8      	movs	r3, #248	@ 0xf8
 801a11a:	18fb      	adds	r3, r7, r3
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	b29b      	uxth	r3, r3
 801a120:	029b      	lsls	r3, r3, #10
 801a122:	b29b      	uxth	r3, r3
 801a124:	4313      	orrs	r3, r2
 801a126:	b29b      	uxth	r3, r3
 801a128:	4ab7      	ldr	r2, [pc, #732]	@ (801a408 <USB_EPStartXfer+0x74c>)
 801a12a:	4313      	orrs	r3, r2
 801a12c:	b29a      	uxth	r2, r3
 801a12e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a130:	801a      	strh	r2, [r3, #0]
 801a132:	e04a      	b.n	801a1ca <USB_EPStartXfer+0x50e>
 801a134:	1d7b      	adds	r3, r7, #5
 801a136:	33ff      	adds	r3, #255	@ 0xff
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d108      	bne.n	801a150 <USB_EPStartXfer+0x494>
 801a13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a140:	881b      	ldrh	r3, [r3, #0]
 801a142:	b29b      	uxth	r3, r3
 801a144:	4ab0      	ldr	r2, [pc, #704]	@ (801a408 <USB_EPStartXfer+0x74c>)
 801a146:	4313      	orrs	r3, r2
 801a148:	b29a      	uxth	r2, r3
 801a14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a14c:	801a      	strh	r2, [r3, #0]
 801a14e:	e03c      	b.n	801a1ca <USB_EPStartXfer+0x50e>
 801a150:	1d7b      	adds	r3, r7, #5
 801a152:	33ff      	adds	r3, #255	@ 0xff
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	085b      	lsrs	r3, r3, #1
 801a158:	21f8      	movs	r1, #248	@ 0xf8
 801a15a:	187a      	adds	r2, r7, r1
 801a15c:	6013      	str	r3, [r2, #0]
 801a15e:	1d7b      	adds	r3, r7, #5
 801a160:	33ff      	adds	r3, #255	@ 0xff
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	2201      	movs	r2, #1
 801a166:	4013      	ands	r3, r2
 801a168:	d004      	beq.n	801a174 <USB_EPStartXfer+0x4b8>
 801a16a:	187b      	adds	r3, r7, r1
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	3301      	adds	r3, #1
 801a170:	187a      	adds	r2, r7, r1
 801a172:	6013      	str	r3, [r2, #0]
 801a174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a176:	881b      	ldrh	r3, [r3, #0]
 801a178:	b29a      	uxth	r2, r3
 801a17a:	23f8      	movs	r3, #248	@ 0xf8
 801a17c:	18fb      	adds	r3, r7, r3
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	b29b      	uxth	r3, r3
 801a182:	029b      	lsls	r3, r3, #10
 801a184:	b29b      	uxth	r3, r3
 801a186:	4313      	orrs	r3, r2
 801a188:	b29a      	uxth	r2, r3
 801a18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a18c:	801a      	strh	r2, [r3, #0]
 801a18e:	e01c      	b.n	801a1ca <USB_EPStartXfer+0x50e>
 801a190:	683b      	ldr	r3, [r7, #0]
 801a192:	785b      	ldrb	r3, [r3, #1]
 801a194:	2b01      	cmp	r3, #1
 801a196:	d118      	bne.n	801a1ca <USB_EPStartXfer+0x50e>
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	653b      	str	r3, [r7, #80]	@ 0x50
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2250      	movs	r2, #80	@ 0x50
 801a1a0:	5a9b      	ldrh	r3, [r3, r2]
 801a1a2:	b29b      	uxth	r3, r3
 801a1a4:	001a      	movs	r2, r3
 801a1a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1a8:	189b      	adds	r3, r3, r2
 801a1aa:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1ac:	683b      	ldr	r3, [r7, #0]
 801a1ae:	781b      	ldrb	r3, [r3, #0]
 801a1b0:	00da      	lsls	r2, r3, #3
 801a1b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1b4:	18d3      	adds	r3, r2, r3
 801a1b6:	4a93      	ldr	r2, [pc, #588]	@ (801a404 <USB_EPStartXfer+0x748>)
 801a1b8:	4694      	mov	ip, r2
 801a1ba:	4463      	add	r3, ip
 801a1bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a1be:	1d7b      	adds	r3, r7, #5
 801a1c0:	33ff      	adds	r3, #255	@ 0xff
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	b29a      	uxth	r2, r3
 801a1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a1ca:	2076      	movs	r0, #118	@ 0x76
 801a1cc:	183b      	adds	r3, r7, r0
 801a1ce:	683a      	ldr	r2, [r7, #0]
 801a1d0:	8912      	ldrh	r2, [r2, #8]
 801a1d2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a1d4:	683b      	ldr	r3, [r7, #0]
 801a1d6:	6959      	ldr	r1, [r3, #20]
 801a1d8:	1d7b      	adds	r3, r7, #5
 801a1da:	33ff      	adds	r3, #255	@ 0xff
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	b29c      	uxth	r4, r3
 801a1e0:	183b      	adds	r3, r7, r0
 801a1e2:	881a      	ldrh	r2, [r3, #0]
 801a1e4:	6878      	ldr	r0, [r7, #4]
 801a1e6:	0023      	movs	r3, r4
 801a1e8:	f000 ffda 	bl	801b1a0 <USB_WritePMA>
            ep->xfer_buff += len;
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	695a      	ldr	r2, [r3, #20]
 801a1f0:	1d7b      	adds	r3, r7, #5
 801a1f2:	33ff      	adds	r3, #255	@ 0xff
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	18d2      	adds	r2, r2, r3
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a1fc:	683b      	ldr	r3, [r7, #0]
 801a1fe:	6a1a      	ldr	r2, [r3, #32]
 801a200:	683b      	ldr	r3, [r7, #0]
 801a202:	691b      	ldr	r3, [r3, #16]
 801a204:	429a      	cmp	r2, r3
 801a206:	d908      	bls.n	801a21a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	6a1a      	ldr	r2, [r3, #32]
 801a20c:	1d7b      	adds	r3, r7, #5
 801a20e:	33ff      	adds	r3, #255	@ 0xff
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	1ad2      	subs	r2, r2, r3
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	621a      	str	r2, [r3, #32]
 801a218:	e007      	b.n	801a22a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a21a:	683b      	ldr	r3, [r7, #0]
 801a21c:	6a1b      	ldr	r3, [r3, #32]
 801a21e:	1d7a      	adds	r2, r7, #5
 801a220:	32ff      	adds	r2, #255	@ 0xff
 801a222:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	2200      	movs	r2, #0
 801a228:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	643b      	str	r3, [r7, #64]	@ 0x40
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	785b      	ldrb	r3, [r3, #1]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d000      	beq.n	801a238 <USB_EPStartXfer+0x57c>
 801a236:	e070      	b.n	801a31a <USB_EPStartXfer+0x65e>
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	2250      	movs	r2, #80	@ 0x50
 801a240:	5a9b      	ldrh	r3, [r3, r2]
 801a242:	b29b      	uxth	r3, r3
 801a244:	001a      	movs	r2, r3
 801a246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a248:	189b      	adds	r3, r3, r2
 801a24a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a24c:	683b      	ldr	r3, [r7, #0]
 801a24e:	781b      	ldrb	r3, [r3, #0]
 801a250:	00da      	lsls	r2, r3, #3
 801a252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a254:	18d3      	adds	r3, r2, r3
 801a256:	4a6d      	ldr	r2, [pc, #436]	@ (801a40c <USB_EPStartXfer+0x750>)
 801a258:	4694      	mov	ip, r2
 801a25a:	4463      	add	r3, ip
 801a25c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a260:	881b      	ldrh	r3, [r3, #0]
 801a262:	b29b      	uxth	r3, r3
 801a264:	059b      	lsls	r3, r3, #22
 801a266:	0d9b      	lsrs	r3, r3, #22
 801a268:	b29a      	uxth	r2, r3
 801a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a26c:	801a      	strh	r2, [r3, #0]
 801a26e:	1d7b      	adds	r3, r7, #5
 801a270:	33ff      	adds	r3, #255	@ 0xff
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	2b3e      	cmp	r3, #62	@ 0x3e
 801a276:	d922      	bls.n	801a2be <USB_EPStartXfer+0x602>
 801a278:	1d7b      	adds	r3, r7, #5
 801a27a:	33ff      	adds	r3, #255	@ 0xff
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	095b      	lsrs	r3, r3, #5
 801a280:	21f4      	movs	r1, #244	@ 0xf4
 801a282:	187a      	adds	r2, r7, r1
 801a284:	6013      	str	r3, [r2, #0]
 801a286:	1d7b      	adds	r3, r7, #5
 801a288:	33ff      	adds	r3, #255	@ 0xff
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	221f      	movs	r2, #31
 801a28e:	4013      	ands	r3, r2
 801a290:	d104      	bne.n	801a29c <USB_EPStartXfer+0x5e0>
 801a292:	187b      	adds	r3, r7, r1
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	3b01      	subs	r3, #1
 801a298:	187a      	adds	r2, r7, r1
 801a29a:	6013      	str	r3, [r2, #0]
 801a29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a29e:	881b      	ldrh	r3, [r3, #0]
 801a2a0:	b29a      	uxth	r2, r3
 801a2a2:	23f4      	movs	r3, #244	@ 0xf4
 801a2a4:	18fb      	adds	r3, r7, r3
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	b29b      	uxth	r3, r3
 801a2aa:	029b      	lsls	r3, r3, #10
 801a2ac:	b29b      	uxth	r3, r3
 801a2ae:	4313      	orrs	r3, r2
 801a2b0:	b29b      	uxth	r3, r3
 801a2b2:	4a55      	ldr	r2, [pc, #340]	@ (801a408 <USB_EPStartXfer+0x74c>)
 801a2b4:	4313      	orrs	r3, r2
 801a2b6:	b29a      	uxth	r2, r3
 801a2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2ba:	801a      	strh	r2, [r3, #0]
 801a2bc:	e048      	b.n	801a350 <USB_EPStartXfer+0x694>
 801a2be:	1d7b      	adds	r3, r7, #5
 801a2c0:	33ff      	adds	r3, #255	@ 0xff
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d108      	bne.n	801a2da <USB_EPStartXfer+0x61e>
 801a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2ca:	881b      	ldrh	r3, [r3, #0]
 801a2cc:	b29b      	uxth	r3, r3
 801a2ce:	4a4e      	ldr	r2, [pc, #312]	@ (801a408 <USB_EPStartXfer+0x74c>)
 801a2d0:	4313      	orrs	r3, r2
 801a2d2:	b29a      	uxth	r2, r3
 801a2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2d6:	801a      	strh	r2, [r3, #0]
 801a2d8:	e03a      	b.n	801a350 <USB_EPStartXfer+0x694>
 801a2da:	1d7b      	adds	r3, r7, #5
 801a2dc:	33ff      	adds	r3, #255	@ 0xff
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	085b      	lsrs	r3, r3, #1
 801a2e2:	21f4      	movs	r1, #244	@ 0xf4
 801a2e4:	187a      	adds	r2, r7, r1
 801a2e6:	6013      	str	r3, [r2, #0]
 801a2e8:	1d7b      	adds	r3, r7, #5
 801a2ea:	33ff      	adds	r3, #255	@ 0xff
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	2201      	movs	r2, #1
 801a2f0:	4013      	ands	r3, r2
 801a2f2:	d004      	beq.n	801a2fe <USB_EPStartXfer+0x642>
 801a2f4:	187b      	adds	r3, r7, r1
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	3301      	adds	r3, #1
 801a2fa:	187a      	adds	r2, r7, r1
 801a2fc:	6013      	str	r3, [r2, #0]
 801a2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a300:	881b      	ldrh	r3, [r3, #0]
 801a302:	b29a      	uxth	r2, r3
 801a304:	23f4      	movs	r3, #244	@ 0xf4
 801a306:	18fb      	adds	r3, r7, r3
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	b29b      	uxth	r3, r3
 801a30c:	029b      	lsls	r3, r3, #10
 801a30e:	b29b      	uxth	r3, r3
 801a310:	4313      	orrs	r3, r2
 801a312:	b29a      	uxth	r2, r3
 801a314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a316:	801a      	strh	r2, [r3, #0]
 801a318:	e01a      	b.n	801a350 <USB_EPStartXfer+0x694>
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	785b      	ldrb	r3, [r3, #1]
 801a31e:	2b01      	cmp	r3, #1
 801a320:	d116      	bne.n	801a350 <USB_EPStartXfer+0x694>
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	2250      	movs	r2, #80	@ 0x50
 801a326:	5a9b      	ldrh	r3, [r3, r2]
 801a328:	b29b      	uxth	r3, r3
 801a32a:	001a      	movs	r2, r3
 801a32c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a32e:	189b      	adds	r3, r3, r2
 801a330:	643b      	str	r3, [r7, #64]	@ 0x40
 801a332:	683b      	ldr	r3, [r7, #0]
 801a334:	781b      	ldrb	r3, [r3, #0]
 801a336:	00da      	lsls	r2, r3, #3
 801a338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a33a:	18d3      	adds	r3, r2, r3
 801a33c:	4a33      	ldr	r2, [pc, #204]	@ (801a40c <USB_EPStartXfer+0x750>)
 801a33e:	4694      	mov	ip, r2
 801a340:	4463      	add	r3, ip
 801a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a344:	1d7b      	adds	r3, r7, #5
 801a346:	33ff      	adds	r3, #255	@ 0xff
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	b29a      	uxth	r2, r3
 801a34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a34e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a350:	2076      	movs	r0, #118	@ 0x76
 801a352:	183b      	adds	r3, r7, r0
 801a354:	683a      	ldr	r2, [r7, #0]
 801a356:	8952      	ldrh	r2, [r2, #10]
 801a358:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	6959      	ldr	r1, [r3, #20]
 801a35e:	1d7b      	adds	r3, r7, #5
 801a360:	33ff      	adds	r3, #255	@ 0xff
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	b29c      	uxth	r4, r3
 801a366:	183b      	adds	r3, r7, r0
 801a368:	881a      	ldrh	r2, [r3, #0]
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	0023      	movs	r3, r4
 801a36e:	f000 ff17 	bl	801b1a0 <USB_WritePMA>
 801a372:	e1b6      	b.n	801a6e2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	6a1b      	ldr	r3, [r3, #32]
 801a378:	1d7a      	adds	r2, r7, #5
 801a37a:	32ff      	adds	r2, #255	@ 0xff
 801a37c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a37e:	687a      	ldr	r2, [r7, #4]
 801a380:	683b      	ldr	r3, [r7, #0]
 801a382:	781b      	ldrb	r3, [r3, #0]
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	18d3      	adds	r3, r2, r3
 801a388:	881b      	ldrh	r3, [r3, #0]
 801a38a:	b29a      	uxth	r2, r3
 801a38c:	2062      	movs	r0, #98	@ 0x62
 801a38e:	183b      	adds	r3, r7, r0
 801a390:	491f      	ldr	r1, [pc, #124]	@ (801a410 <USB_EPStartXfer+0x754>)
 801a392:	400a      	ands	r2, r1
 801a394:	801a      	strh	r2, [r3, #0]
 801a396:	687a      	ldr	r2, [r7, #4]
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	781b      	ldrb	r3, [r3, #0]
 801a39c:	009b      	lsls	r3, r3, #2
 801a39e:	18d3      	adds	r3, r2, r3
 801a3a0:	183a      	adds	r2, r7, r0
 801a3a2:	8812      	ldrh	r2, [r2, #0]
 801a3a4:	491b      	ldr	r1, [pc, #108]	@ (801a414 <USB_EPStartXfer+0x758>)
 801a3a6:	430a      	orrs	r2, r1
 801a3a8:	b292      	uxth	r2, r2
 801a3aa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2250      	movs	r2, #80	@ 0x50
 801a3b4:	5a9b      	ldrh	r3, [r3, r2]
 801a3b6:	b29b      	uxth	r3, r3
 801a3b8:	001a      	movs	r2, r3
 801a3ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3bc:	189b      	adds	r3, r3, r2
 801a3be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3c0:	683b      	ldr	r3, [r7, #0]
 801a3c2:	781b      	ldrb	r3, [r3, #0]
 801a3c4:	00da      	lsls	r2, r3, #3
 801a3c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3c8:	18d3      	adds	r3, r2, r3
 801a3ca:	4a0e      	ldr	r2, [pc, #56]	@ (801a404 <USB_EPStartXfer+0x748>)
 801a3cc:	4694      	mov	ip, r2
 801a3ce:	4463      	add	r3, ip
 801a3d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3d2:	1d7b      	adds	r3, r7, #5
 801a3d4:	33ff      	adds	r3, #255	@ 0xff
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	b29a      	uxth	r2, r3
 801a3da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a3de:	2076      	movs	r0, #118	@ 0x76
 801a3e0:	183b      	adds	r3, r7, r0
 801a3e2:	683a      	ldr	r2, [r7, #0]
 801a3e4:	8912      	ldrh	r2, [r2, #8]
 801a3e6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a3e8:	683b      	ldr	r3, [r7, #0]
 801a3ea:	6959      	ldr	r1, [r3, #20]
 801a3ec:	1d7b      	adds	r3, r7, #5
 801a3ee:	33ff      	adds	r3, #255	@ 0xff
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	b29c      	uxth	r4, r3
 801a3f4:	183b      	adds	r3, r7, r0
 801a3f6:	881a      	ldrh	r2, [r3, #0]
 801a3f8:	6878      	ldr	r0, [r7, #4]
 801a3fa:	0023      	movs	r3, r4
 801a3fc:	f000 fed0 	bl	801b1a0 <USB_WritePMA>
 801a400:	e16f      	b.n	801a6e2 <USB_EPStartXfer+0xa26>
 801a402:	46c0      	nop			@ (mov r8, r8)
 801a404:	00000402 	.word	0x00000402
 801a408:	ffff8000 	.word	0xffff8000
 801a40c:	00000406 	.word	0x00000406
 801a410:	ffff8e8f 	.word	0xffff8e8f
 801a414:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	6a1a      	ldr	r2, [r3, #32]
 801a41c:	1d7b      	adds	r3, r7, #5
 801a41e:	33ff      	adds	r3, #255	@ 0xff
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	1ad2      	subs	r2, r2, r3
 801a424:	683b      	ldr	r3, [r7, #0]
 801a426:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a428:	687a      	ldr	r2, [r7, #4]
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	781b      	ldrb	r3, [r3, #0]
 801a42e:	009b      	lsls	r3, r3, #2
 801a430:	18d3      	adds	r3, r2, r3
 801a432:	881b      	ldrh	r3, [r3, #0]
 801a434:	b29b      	uxth	r3, r3
 801a436:	001a      	movs	r2, r3
 801a438:	2340      	movs	r3, #64	@ 0x40
 801a43a:	4013      	ands	r3, r2
 801a43c:	d100      	bne.n	801a440 <USB_EPStartXfer+0x784>
 801a43e:	e0a4      	b.n	801a58a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	673b      	str	r3, [r7, #112]	@ 0x70
 801a444:	683b      	ldr	r3, [r7, #0]
 801a446:	785b      	ldrb	r3, [r3, #1]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d000      	beq.n	801a44e <USB_EPStartXfer+0x792>
 801a44c:	e070      	b.n	801a530 <USB_EPStartXfer+0x874>
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2250      	movs	r2, #80	@ 0x50
 801a456:	5a9b      	ldrh	r3, [r3, r2]
 801a458:	b29b      	uxth	r3, r3
 801a45a:	001a      	movs	r2, r3
 801a45c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a45e:	189b      	adds	r3, r3, r2
 801a460:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	781b      	ldrb	r3, [r3, #0]
 801a466:	00da      	lsls	r2, r3, #3
 801a468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a46a:	18d3      	adds	r3, r2, r3
 801a46c:	4abc      	ldr	r2, [pc, #752]	@ (801a760 <USB_EPStartXfer+0xaa4>)
 801a46e:	4694      	mov	ip, r2
 801a470:	4463      	add	r3, ip
 801a472:	667b      	str	r3, [r7, #100]	@ 0x64
 801a474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a476:	881b      	ldrh	r3, [r3, #0]
 801a478:	b29b      	uxth	r3, r3
 801a47a:	059b      	lsls	r3, r3, #22
 801a47c:	0d9b      	lsrs	r3, r3, #22
 801a47e:	b29a      	uxth	r2, r3
 801a480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a482:	801a      	strh	r2, [r3, #0]
 801a484:	1d7b      	adds	r3, r7, #5
 801a486:	33ff      	adds	r3, #255	@ 0xff
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	2b3e      	cmp	r3, #62	@ 0x3e
 801a48c:	d922      	bls.n	801a4d4 <USB_EPStartXfer+0x818>
 801a48e:	1d7b      	adds	r3, r7, #5
 801a490:	33ff      	adds	r3, #255	@ 0xff
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	095b      	lsrs	r3, r3, #5
 801a496:	21f0      	movs	r1, #240	@ 0xf0
 801a498:	187a      	adds	r2, r7, r1
 801a49a:	6013      	str	r3, [r2, #0]
 801a49c:	1d7b      	adds	r3, r7, #5
 801a49e:	33ff      	adds	r3, #255	@ 0xff
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	221f      	movs	r2, #31
 801a4a4:	4013      	ands	r3, r2
 801a4a6:	d104      	bne.n	801a4b2 <USB_EPStartXfer+0x7f6>
 801a4a8:	187b      	adds	r3, r7, r1
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	3b01      	subs	r3, #1
 801a4ae:	187a      	adds	r2, r7, r1
 801a4b0:	6013      	str	r3, [r2, #0]
 801a4b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4b4:	881b      	ldrh	r3, [r3, #0]
 801a4b6:	b29a      	uxth	r2, r3
 801a4b8:	23f0      	movs	r3, #240	@ 0xf0
 801a4ba:	18fb      	adds	r3, r7, r3
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	029b      	lsls	r3, r3, #10
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	4313      	orrs	r3, r2
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	4aa6      	ldr	r2, [pc, #664]	@ (801a764 <USB_EPStartXfer+0xaa8>)
 801a4ca:	4313      	orrs	r3, r2
 801a4cc:	b29a      	uxth	r2, r3
 801a4ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4d0:	801a      	strh	r2, [r3, #0]
 801a4d2:	e048      	b.n	801a566 <USB_EPStartXfer+0x8aa>
 801a4d4:	1d7b      	adds	r3, r7, #5
 801a4d6:	33ff      	adds	r3, #255	@ 0xff
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d108      	bne.n	801a4f0 <USB_EPStartXfer+0x834>
 801a4de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4e0:	881b      	ldrh	r3, [r3, #0]
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	4a9f      	ldr	r2, [pc, #636]	@ (801a764 <USB_EPStartXfer+0xaa8>)
 801a4e6:	4313      	orrs	r3, r2
 801a4e8:	b29a      	uxth	r2, r3
 801a4ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a4ec:	801a      	strh	r2, [r3, #0]
 801a4ee:	e03a      	b.n	801a566 <USB_EPStartXfer+0x8aa>
 801a4f0:	1d7b      	adds	r3, r7, #5
 801a4f2:	33ff      	adds	r3, #255	@ 0xff
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	085b      	lsrs	r3, r3, #1
 801a4f8:	21f0      	movs	r1, #240	@ 0xf0
 801a4fa:	187a      	adds	r2, r7, r1
 801a4fc:	6013      	str	r3, [r2, #0]
 801a4fe:	1d7b      	adds	r3, r7, #5
 801a500:	33ff      	adds	r3, #255	@ 0xff
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	2201      	movs	r2, #1
 801a506:	4013      	ands	r3, r2
 801a508:	d004      	beq.n	801a514 <USB_EPStartXfer+0x858>
 801a50a:	187b      	adds	r3, r7, r1
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	3301      	adds	r3, #1
 801a510:	187a      	adds	r2, r7, r1
 801a512:	6013      	str	r3, [r2, #0]
 801a514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a516:	881b      	ldrh	r3, [r3, #0]
 801a518:	b29a      	uxth	r2, r3
 801a51a:	23f0      	movs	r3, #240	@ 0xf0
 801a51c:	18fb      	adds	r3, r7, r3
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	b29b      	uxth	r3, r3
 801a522:	029b      	lsls	r3, r3, #10
 801a524:	b29b      	uxth	r3, r3
 801a526:	4313      	orrs	r3, r2
 801a528:	b29a      	uxth	r2, r3
 801a52a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a52c:	801a      	strh	r2, [r3, #0]
 801a52e:	e01a      	b.n	801a566 <USB_EPStartXfer+0x8aa>
 801a530:	683b      	ldr	r3, [r7, #0]
 801a532:	785b      	ldrb	r3, [r3, #1]
 801a534:	2b01      	cmp	r3, #1
 801a536:	d116      	bne.n	801a566 <USB_EPStartXfer+0x8aa>
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	2250      	movs	r2, #80	@ 0x50
 801a53c:	5a9b      	ldrh	r3, [r3, r2]
 801a53e:	b29b      	uxth	r3, r3
 801a540:	001a      	movs	r2, r3
 801a542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a544:	189b      	adds	r3, r3, r2
 801a546:	673b      	str	r3, [r7, #112]	@ 0x70
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	781b      	ldrb	r3, [r3, #0]
 801a54c:	00da      	lsls	r2, r3, #3
 801a54e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a550:	18d3      	adds	r3, r2, r3
 801a552:	4a83      	ldr	r2, [pc, #524]	@ (801a760 <USB_EPStartXfer+0xaa4>)
 801a554:	4694      	mov	ip, r2
 801a556:	4463      	add	r3, ip
 801a558:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a55a:	1d7b      	adds	r3, r7, #5
 801a55c:	33ff      	adds	r3, #255	@ 0xff
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	b29a      	uxth	r2, r3
 801a562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a564:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a566:	2076      	movs	r0, #118	@ 0x76
 801a568:	183b      	adds	r3, r7, r0
 801a56a:	683a      	ldr	r2, [r7, #0]
 801a56c:	8952      	ldrh	r2, [r2, #10]
 801a56e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	6959      	ldr	r1, [r3, #20]
 801a574:	1d7b      	adds	r3, r7, #5
 801a576:	33ff      	adds	r3, #255	@ 0xff
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	b29c      	uxth	r4, r3
 801a57c:	183b      	adds	r3, r7, r0
 801a57e:	881a      	ldrh	r2, [r3, #0]
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	0023      	movs	r3, r4
 801a584:	f000 fe0c 	bl	801b1a0 <USB_WritePMA>
 801a588:	e0ab      	b.n	801a6e2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a58a:	683b      	ldr	r3, [r7, #0]
 801a58c:	785b      	ldrb	r3, [r3, #1]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d000      	beq.n	801a594 <USB_EPStartXfer+0x8d8>
 801a592:	e070      	b.n	801a676 <USB_EPStartXfer+0x9ba>
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	2250      	movs	r2, #80	@ 0x50
 801a59c:	5a9b      	ldrh	r3, [r3, r2]
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	001a      	movs	r2, r3
 801a5a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5a4:	189b      	adds	r3, r3, r2
 801a5a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	00da      	lsls	r2, r3, #3
 801a5ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5b0:	18d3      	adds	r3, r2, r3
 801a5b2:	4a6d      	ldr	r2, [pc, #436]	@ (801a768 <USB_EPStartXfer+0xaac>)
 801a5b4:	4694      	mov	ip, r2
 801a5b6:	4463      	add	r3, ip
 801a5b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a5ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5bc:	881b      	ldrh	r3, [r3, #0]
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	059b      	lsls	r3, r3, #22
 801a5c2:	0d9b      	lsrs	r3, r3, #22
 801a5c4:	b29a      	uxth	r2, r3
 801a5c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5c8:	801a      	strh	r2, [r3, #0]
 801a5ca:	1d7b      	adds	r3, r7, #5
 801a5cc:	33ff      	adds	r3, #255	@ 0xff
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	2b3e      	cmp	r3, #62	@ 0x3e
 801a5d2:	d922      	bls.n	801a61a <USB_EPStartXfer+0x95e>
 801a5d4:	1d7b      	adds	r3, r7, #5
 801a5d6:	33ff      	adds	r3, #255	@ 0xff
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	095b      	lsrs	r3, r3, #5
 801a5dc:	21ec      	movs	r1, #236	@ 0xec
 801a5de:	187a      	adds	r2, r7, r1
 801a5e0:	6013      	str	r3, [r2, #0]
 801a5e2:	1d7b      	adds	r3, r7, #5
 801a5e4:	33ff      	adds	r3, #255	@ 0xff
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	221f      	movs	r2, #31
 801a5ea:	4013      	ands	r3, r2
 801a5ec:	d104      	bne.n	801a5f8 <USB_EPStartXfer+0x93c>
 801a5ee:	187b      	adds	r3, r7, r1
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	3b01      	subs	r3, #1
 801a5f4:	187a      	adds	r2, r7, r1
 801a5f6:	6013      	str	r3, [r2, #0]
 801a5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5fa:	881b      	ldrh	r3, [r3, #0]
 801a5fc:	b29a      	uxth	r2, r3
 801a5fe:	23ec      	movs	r3, #236	@ 0xec
 801a600:	18fb      	adds	r3, r7, r3
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	b29b      	uxth	r3, r3
 801a606:	029b      	lsls	r3, r3, #10
 801a608:	b29b      	uxth	r3, r3
 801a60a:	4313      	orrs	r3, r2
 801a60c:	b29b      	uxth	r3, r3
 801a60e:	4a55      	ldr	r2, [pc, #340]	@ (801a764 <USB_EPStartXfer+0xaa8>)
 801a610:	4313      	orrs	r3, r2
 801a612:	b29a      	uxth	r2, r3
 801a614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a616:	801a      	strh	r2, [r3, #0]
 801a618:	e052      	b.n	801a6c0 <USB_EPStartXfer+0xa04>
 801a61a:	1d7b      	adds	r3, r7, #5
 801a61c:	33ff      	adds	r3, #255	@ 0xff
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d108      	bne.n	801a636 <USB_EPStartXfer+0x97a>
 801a624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a626:	881b      	ldrh	r3, [r3, #0]
 801a628:	b29b      	uxth	r3, r3
 801a62a:	4a4e      	ldr	r2, [pc, #312]	@ (801a764 <USB_EPStartXfer+0xaa8>)
 801a62c:	4313      	orrs	r3, r2
 801a62e:	b29a      	uxth	r2, r3
 801a630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a632:	801a      	strh	r2, [r3, #0]
 801a634:	e044      	b.n	801a6c0 <USB_EPStartXfer+0xa04>
 801a636:	1d7b      	adds	r3, r7, #5
 801a638:	33ff      	adds	r3, #255	@ 0xff
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	085b      	lsrs	r3, r3, #1
 801a63e:	21ec      	movs	r1, #236	@ 0xec
 801a640:	187a      	adds	r2, r7, r1
 801a642:	6013      	str	r3, [r2, #0]
 801a644:	1d7b      	adds	r3, r7, #5
 801a646:	33ff      	adds	r3, #255	@ 0xff
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	2201      	movs	r2, #1
 801a64c:	4013      	ands	r3, r2
 801a64e:	d004      	beq.n	801a65a <USB_EPStartXfer+0x99e>
 801a650:	187b      	adds	r3, r7, r1
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	3301      	adds	r3, #1
 801a656:	187a      	adds	r2, r7, r1
 801a658:	6013      	str	r3, [r2, #0]
 801a65a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a65c:	881b      	ldrh	r3, [r3, #0]
 801a65e:	b29a      	uxth	r2, r3
 801a660:	23ec      	movs	r3, #236	@ 0xec
 801a662:	18fb      	adds	r3, r7, r3
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	b29b      	uxth	r3, r3
 801a668:	029b      	lsls	r3, r3, #10
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	4313      	orrs	r3, r2
 801a66e:	b29a      	uxth	r2, r3
 801a670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a672:	801a      	strh	r2, [r3, #0]
 801a674:	e024      	b.n	801a6c0 <USB_EPStartXfer+0xa04>
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	785b      	ldrb	r3, [r3, #1]
 801a67a:	2b01      	cmp	r3, #1
 801a67c:	d120      	bne.n	801a6c0 <USB_EPStartXfer+0xa04>
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	2184      	movs	r1, #132	@ 0x84
 801a682:	187a      	adds	r2, r7, r1
 801a684:	6013      	str	r3, [r2, #0]
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	2250      	movs	r2, #80	@ 0x50
 801a68a:	5a9b      	ldrh	r3, [r3, r2]
 801a68c:	b29b      	uxth	r3, r3
 801a68e:	001a      	movs	r2, r3
 801a690:	187b      	adds	r3, r7, r1
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	189b      	adds	r3, r3, r2
 801a696:	187a      	adds	r2, r7, r1
 801a698:	6013      	str	r3, [r2, #0]
 801a69a:	683b      	ldr	r3, [r7, #0]
 801a69c:	781b      	ldrb	r3, [r3, #0]
 801a69e:	00da      	lsls	r2, r3, #3
 801a6a0:	187b      	adds	r3, r7, r1
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	18d3      	adds	r3, r2, r3
 801a6a6:	4a30      	ldr	r2, [pc, #192]	@ (801a768 <USB_EPStartXfer+0xaac>)
 801a6a8:	4694      	mov	ip, r2
 801a6aa:	4463      	add	r3, ip
 801a6ac:	2180      	movs	r1, #128	@ 0x80
 801a6ae:	187a      	adds	r2, r7, r1
 801a6b0:	6013      	str	r3, [r2, #0]
 801a6b2:	1d7b      	adds	r3, r7, #5
 801a6b4:	33ff      	adds	r3, #255	@ 0xff
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	b29a      	uxth	r2, r3
 801a6ba:	187b      	adds	r3, r7, r1
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a6c0:	2076      	movs	r0, #118	@ 0x76
 801a6c2:	183b      	adds	r3, r7, r0
 801a6c4:	683a      	ldr	r2, [r7, #0]
 801a6c6:	8912      	ldrh	r2, [r2, #8]
 801a6c8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	6959      	ldr	r1, [r3, #20]
 801a6ce:	1d7b      	adds	r3, r7, #5
 801a6d0:	33ff      	adds	r3, #255	@ 0xff
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	b29c      	uxth	r4, r3
 801a6d6:	183b      	adds	r3, r7, r0
 801a6d8:	881a      	ldrh	r2, [r3, #0]
 801a6da:	6878      	ldr	r0, [r7, #4]
 801a6dc:	0023      	movs	r3, r4
 801a6de:	f000 fd5f 	bl	801b1a0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a6e2:	687a      	ldr	r2, [r7, #4]
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	781b      	ldrb	r3, [r3, #0]
 801a6e8:	009b      	lsls	r3, r3, #2
 801a6ea:	18d3      	adds	r3, r2, r3
 801a6ec:	881b      	ldrh	r3, [r3, #0]
 801a6ee:	b29a      	uxth	r2, r3
 801a6f0:	200a      	movs	r0, #10
 801a6f2:	183b      	adds	r3, r7, r0
 801a6f4:	491d      	ldr	r1, [pc, #116]	@ (801a76c <USB_EPStartXfer+0xab0>)
 801a6f6:	400a      	ands	r2, r1
 801a6f8:	801a      	strh	r2, [r3, #0]
 801a6fa:	183b      	adds	r3, r7, r0
 801a6fc:	183a      	adds	r2, r7, r0
 801a6fe:	8812      	ldrh	r2, [r2, #0]
 801a700:	2110      	movs	r1, #16
 801a702:	404a      	eors	r2, r1
 801a704:	801a      	strh	r2, [r3, #0]
 801a706:	183b      	adds	r3, r7, r0
 801a708:	183a      	adds	r2, r7, r0
 801a70a:	8812      	ldrh	r2, [r2, #0]
 801a70c:	2120      	movs	r1, #32
 801a70e:	404a      	eors	r2, r1
 801a710:	801a      	strh	r2, [r3, #0]
 801a712:	687a      	ldr	r2, [r7, #4]
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	781b      	ldrb	r3, [r3, #0]
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	18d3      	adds	r3, r2, r3
 801a71c:	183a      	adds	r2, r7, r0
 801a71e:	8812      	ldrh	r2, [r2, #0]
 801a720:	4913      	ldr	r1, [pc, #76]	@ (801a770 <USB_EPStartXfer+0xab4>)
 801a722:	430a      	orrs	r2, r1
 801a724:	b292      	uxth	r2, r2
 801a726:	801a      	strh	r2, [r3, #0]
 801a728:	f000 fbf4 	bl	801af14 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	7b1b      	ldrb	r3, [r3, #12]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d000      	beq.n	801a736 <USB_EPStartXfer+0xa7a>
 801a734:	e0a9      	b.n	801a88a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	699a      	ldr	r2, [r3, #24]
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	691b      	ldr	r3, [r3, #16]
 801a73e:	429a      	cmp	r2, r3
 801a740:	d918      	bls.n	801a774 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	691b      	ldr	r3, [r3, #16]
 801a746:	1d7a      	adds	r2, r7, #5
 801a748:	32ff      	adds	r2, #255	@ 0xff
 801a74a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	699a      	ldr	r2, [r3, #24]
 801a750:	1d7b      	adds	r3, r7, #5
 801a752:	33ff      	adds	r3, #255	@ 0xff
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	1ad2      	subs	r2, r2, r3
 801a758:	683b      	ldr	r3, [r7, #0]
 801a75a:	619a      	str	r2, [r3, #24]
 801a75c:	e012      	b.n	801a784 <USB_EPStartXfer+0xac8>
 801a75e:	46c0      	nop			@ (mov r8, r8)
 801a760:	00000406 	.word	0x00000406
 801a764:	ffff8000 	.word	0xffff8000
 801a768:	00000402 	.word	0x00000402
 801a76c:	ffff8fbf 	.word	0xffff8fbf
 801a770:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	699b      	ldr	r3, [r3, #24]
 801a778:	1d7a      	adds	r2, r7, #5
 801a77a:	32ff      	adds	r2, #255	@ 0xff
 801a77c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	2200      	movs	r2, #0
 801a782:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	2190      	movs	r1, #144	@ 0x90
 801a788:	187a      	adds	r2, r7, r1
 801a78a:	6013      	str	r3, [r2, #0]
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2250      	movs	r2, #80	@ 0x50
 801a790:	5a9b      	ldrh	r3, [r3, r2]
 801a792:	b29b      	uxth	r3, r3
 801a794:	001a      	movs	r2, r3
 801a796:	187b      	adds	r3, r7, r1
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	189b      	adds	r3, r3, r2
 801a79c:	187a      	adds	r2, r7, r1
 801a79e:	6013      	str	r3, [r2, #0]
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	781b      	ldrb	r3, [r3, #0]
 801a7a4:	00da      	lsls	r2, r3, #3
 801a7a6:	187b      	adds	r3, r7, r1
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	18d3      	adds	r3, r2, r3
 801a7ac:	4acf      	ldr	r2, [pc, #828]	@ (801aaec <USB_EPStartXfer+0xe30>)
 801a7ae:	4694      	mov	ip, r2
 801a7b0:	4463      	add	r3, ip
 801a7b2:	218c      	movs	r1, #140	@ 0x8c
 801a7b4:	187a      	adds	r2, r7, r1
 801a7b6:	6013      	str	r3, [r2, #0]
 801a7b8:	187b      	adds	r3, r7, r1
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	881b      	ldrh	r3, [r3, #0]
 801a7be:	b29b      	uxth	r3, r3
 801a7c0:	059b      	lsls	r3, r3, #22
 801a7c2:	0d9b      	lsrs	r3, r3, #22
 801a7c4:	b29a      	uxth	r2, r3
 801a7c6:	187b      	adds	r3, r7, r1
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	801a      	strh	r2, [r3, #0]
 801a7cc:	1d7b      	adds	r3, r7, #5
 801a7ce:	33ff      	adds	r3, #255	@ 0xff
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a7d4:	d925      	bls.n	801a822 <USB_EPStartXfer+0xb66>
 801a7d6:	1d7b      	adds	r3, r7, #5
 801a7d8:	33ff      	adds	r3, #255	@ 0xff
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	095b      	lsrs	r3, r3, #5
 801a7de:	21e8      	movs	r1, #232	@ 0xe8
 801a7e0:	187a      	adds	r2, r7, r1
 801a7e2:	6013      	str	r3, [r2, #0]
 801a7e4:	1d7b      	adds	r3, r7, #5
 801a7e6:	33ff      	adds	r3, #255	@ 0xff
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	221f      	movs	r2, #31
 801a7ec:	4013      	ands	r3, r2
 801a7ee:	d104      	bne.n	801a7fa <USB_EPStartXfer+0xb3e>
 801a7f0:	187b      	adds	r3, r7, r1
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	3b01      	subs	r3, #1
 801a7f6:	187a      	adds	r2, r7, r1
 801a7f8:	6013      	str	r3, [r2, #0]
 801a7fa:	218c      	movs	r1, #140	@ 0x8c
 801a7fc:	187b      	adds	r3, r7, r1
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	881b      	ldrh	r3, [r3, #0]
 801a802:	b29a      	uxth	r2, r3
 801a804:	23e8      	movs	r3, #232	@ 0xe8
 801a806:	18fb      	adds	r3, r7, r3
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	b29b      	uxth	r3, r3
 801a80c:	029b      	lsls	r3, r3, #10
 801a80e:	b29b      	uxth	r3, r3
 801a810:	4313      	orrs	r3, r2
 801a812:	b29b      	uxth	r3, r3
 801a814:	4ab6      	ldr	r2, [pc, #728]	@ (801aaf0 <USB_EPStartXfer+0xe34>)
 801a816:	4313      	orrs	r3, r2
 801a818:	b29a      	uxth	r2, r3
 801a81a:	187b      	adds	r3, r7, r1
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	801a      	strh	r2, [r3, #0]
 801a820:	e353      	b.n	801aeca <USB_EPStartXfer+0x120e>
 801a822:	1d7b      	adds	r3, r7, #5
 801a824:	33ff      	adds	r3, #255	@ 0xff
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d10b      	bne.n	801a844 <USB_EPStartXfer+0xb88>
 801a82c:	218c      	movs	r1, #140	@ 0x8c
 801a82e:	187b      	adds	r3, r7, r1
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	881b      	ldrh	r3, [r3, #0]
 801a834:	b29b      	uxth	r3, r3
 801a836:	4aae      	ldr	r2, [pc, #696]	@ (801aaf0 <USB_EPStartXfer+0xe34>)
 801a838:	4313      	orrs	r3, r2
 801a83a:	b29a      	uxth	r2, r3
 801a83c:	187b      	adds	r3, r7, r1
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	801a      	strh	r2, [r3, #0]
 801a842:	e342      	b.n	801aeca <USB_EPStartXfer+0x120e>
 801a844:	1d7b      	adds	r3, r7, #5
 801a846:	33ff      	adds	r3, #255	@ 0xff
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	085b      	lsrs	r3, r3, #1
 801a84c:	21e8      	movs	r1, #232	@ 0xe8
 801a84e:	187a      	adds	r2, r7, r1
 801a850:	6013      	str	r3, [r2, #0]
 801a852:	1d7b      	adds	r3, r7, #5
 801a854:	33ff      	adds	r3, #255	@ 0xff
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2201      	movs	r2, #1
 801a85a:	4013      	ands	r3, r2
 801a85c:	d004      	beq.n	801a868 <USB_EPStartXfer+0xbac>
 801a85e:	187b      	adds	r3, r7, r1
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	3301      	adds	r3, #1
 801a864:	187a      	adds	r2, r7, r1
 801a866:	6013      	str	r3, [r2, #0]
 801a868:	218c      	movs	r1, #140	@ 0x8c
 801a86a:	187b      	adds	r3, r7, r1
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	881b      	ldrh	r3, [r3, #0]
 801a870:	b29a      	uxth	r2, r3
 801a872:	23e8      	movs	r3, #232	@ 0xe8
 801a874:	18fb      	adds	r3, r7, r3
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	b29b      	uxth	r3, r3
 801a87a:	029b      	lsls	r3, r3, #10
 801a87c:	b29b      	uxth	r3, r3
 801a87e:	4313      	orrs	r3, r2
 801a880:	b29a      	uxth	r2, r3
 801a882:	187b      	adds	r3, r7, r1
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	801a      	strh	r2, [r3, #0]
 801a888:	e31f      	b.n	801aeca <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	78db      	ldrb	r3, [r3, #3]
 801a88e:	2b02      	cmp	r3, #2
 801a890:	d000      	beq.n	801a894 <USB_EPStartXfer+0xbd8>
 801a892:	e191      	b.n	801abb8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a894:	683b      	ldr	r3, [r7, #0]
 801a896:	785b      	ldrb	r3, [r3, #1]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d000      	beq.n	801a89e <USB_EPStartXfer+0xbe2>
 801a89c:	e07c      	b.n	801a998 <USB_EPStartXfer+0xcdc>
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	21ac      	movs	r1, #172	@ 0xac
 801a8a2:	187a      	adds	r2, r7, r1
 801a8a4:	6013      	str	r3, [r2, #0]
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	2250      	movs	r2, #80	@ 0x50
 801a8aa:	5a9b      	ldrh	r3, [r3, r2]
 801a8ac:	b29b      	uxth	r3, r3
 801a8ae:	001a      	movs	r2, r3
 801a8b0:	187b      	adds	r3, r7, r1
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	189b      	adds	r3, r3, r2
 801a8b6:	187a      	adds	r2, r7, r1
 801a8b8:	6013      	str	r3, [r2, #0]
 801a8ba:	683b      	ldr	r3, [r7, #0]
 801a8bc:	781b      	ldrb	r3, [r3, #0]
 801a8be:	00da      	lsls	r2, r3, #3
 801a8c0:	187b      	adds	r3, r7, r1
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	18d3      	adds	r3, r2, r3
 801a8c6:	4a8b      	ldr	r2, [pc, #556]	@ (801aaf4 <USB_EPStartXfer+0xe38>)
 801a8c8:	4694      	mov	ip, r2
 801a8ca:	4463      	add	r3, ip
 801a8cc:	21a8      	movs	r1, #168	@ 0xa8
 801a8ce:	187a      	adds	r2, r7, r1
 801a8d0:	6013      	str	r3, [r2, #0]
 801a8d2:	187b      	adds	r3, r7, r1
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	881b      	ldrh	r3, [r3, #0]
 801a8d8:	b29b      	uxth	r3, r3
 801a8da:	059b      	lsls	r3, r3, #22
 801a8dc:	0d9b      	lsrs	r3, r3, #22
 801a8de:	b29a      	uxth	r2, r3
 801a8e0:	187b      	adds	r3, r7, r1
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	801a      	strh	r2, [r3, #0]
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	691b      	ldr	r3, [r3, #16]
 801a8ea:	2b3e      	cmp	r3, #62	@ 0x3e
 801a8ec:	d923      	bls.n	801a936 <USB_EPStartXfer+0xc7a>
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	691b      	ldr	r3, [r3, #16]
 801a8f2:	095b      	lsrs	r3, r3, #5
 801a8f4:	21e4      	movs	r1, #228	@ 0xe4
 801a8f6:	187a      	adds	r2, r7, r1
 801a8f8:	6013      	str	r3, [r2, #0]
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	691b      	ldr	r3, [r3, #16]
 801a8fe:	221f      	movs	r2, #31
 801a900:	4013      	ands	r3, r2
 801a902:	d104      	bne.n	801a90e <USB_EPStartXfer+0xc52>
 801a904:	187b      	adds	r3, r7, r1
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	3b01      	subs	r3, #1
 801a90a:	187a      	adds	r2, r7, r1
 801a90c:	6013      	str	r3, [r2, #0]
 801a90e:	21a8      	movs	r1, #168	@ 0xa8
 801a910:	187b      	adds	r3, r7, r1
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	881b      	ldrh	r3, [r3, #0]
 801a916:	b29a      	uxth	r2, r3
 801a918:	23e4      	movs	r3, #228	@ 0xe4
 801a91a:	18fb      	adds	r3, r7, r3
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	b29b      	uxth	r3, r3
 801a920:	029b      	lsls	r3, r3, #10
 801a922:	b29b      	uxth	r3, r3
 801a924:	4313      	orrs	r3, r2
 801a926:	b29b      	uxth	r3, r3
 801a928:	4a71      	ldr	r2, [pc, #452]	@ (801aaf0 <USB_EPStartXfer+0xe34>)
 801a92a:	4313      	orrs	r3, r2
 801a92c:	b29a      	uxth	r2, r3
 801a92e:	187b      	adds	r3, r7, r1
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	801a      	strh	r2, [r3, #0]
 801a934:	e054      	b.n	801a9e0 <USB_EPStartXfer+0xd24>
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	691b      	ldr	r3, [r3, #16]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d10b      	bne.n	801a956 <USB_EPStartXfer+0xc9a>
 801a93e:	21a8      	movs	r1, #168	@ 0xa8
 801a940:	187b      	adds	r3, r7, r1
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	881b      	ldrh	r3, [r3, #0]
 801a946:	b29b      	uxth	r3, r3
 801a948:	4a69      	ldr	r2, [pc, #420]	@ (801aaf0 <USB_EPStartXfer+0xe34>)
 801a94a:	4313      	orrs	r3, r2
 801a94c:	b29a      	uxth	r2, r3
 801a94e:	187b      	adds	r3, r7, r1
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	801a      	strh	r2, [r3, #0]
 801a954:	e044      	b.n	801a9e0 <USB_EPStartXfer+0xd24>
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	691b      	ldr	r3, [r3, #16]
 801a95a:	085b      	lsrs	r3, r3, #1
 801a95c:	21e4      	movs	r1, #228	@ 0xe4
 801a95e:	187a      	adds	r2, r7, r1
 801a960:	6013      	str	r3, [r2, #0]
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	691b      	ldr	r3, [r3, #16]
 801a966:	2201      	movs	r2, #1
 801a968:	4013      	ands	r3, r2
 801a96a:	d004      	beq.n	801a976 <USB_EPStartXfer+0xcba>
 801a96c:	187b      	adds	r3, r7, r1
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	3301      	adds	r3, #1
 801a972:	187a      	adds	r2, r7, r1
 801a974:	6013      	str	r3, [r2, #0]
 801a976:	21a8      	movs	r1, #168	@ 0xa8
 801a978:	187b      	adds	r3, r7, r1
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	881b      	ldrh	r3, [r3, #0]
 801a97e:	b29a      	uxth	r2, r3
 801a980:	23e4      	movs	r3, #228	@ 0xe4
 801a982:	18fb      	adds	r3, r7, r3
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	b29b      	uxth	r3, r3
 801a988:	029b      	lsls	r3, r3, #10
 801a98a:	b29b      	uxth	r3, r3
 801a98c:	4313      	orrs	r3, r2
 801a98e:	b29a      	uxth	r2, r3
 801a990:	187b      	adds	r3, r7, r1
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	801a      	strh	r2, [r3, #0]
 801a996:	e023      	b.n	801a9e0 <USB_EPStartXfer+0xd24>
 801a998:	683b      	ldr	r3, [r7, #0]
 801a99a:	785b      	ldrb	r3, [r3, #1]
 801a99c:	2b01      	cmp	r3, #1
 801a99e:	d11f      	bne.n	801a9e0 <USB_EPStartXfer+0xd24>
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	21b4      	movs	r1, #180	@ 0xb4
 801a9a4:	187a      	adds	r2, r7, r1
 801a9a6:	6013      	str	r3, [r2, #0]
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2250      	movs	r2, #80	@ 0x50
 801a9ac:	5a9b      	ldrh	r3, [r3, r2]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	001a      	movs	r2, r3
 801a9b2:	187b      	adds	r3, r7, r1
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	189b      	adds	r3, r3, r2
 801a9b8:	187a      	adds	r2, r7, r1
 801a9ba:	6013      	str	r3, [r2, #0]
 801a9bc:	683b      	ldr	r3, [r7, #0]
 801a9be:	781b      	ldrb	r3, [r3, #0]
 801a9c0:	00da      	lsls	r2, r3, #3
 801a9c2:	187b      	adds	r3, r7, r1
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	18d3      	adds	r3, r2, r3
 801a9c8:	4a4a      	ldr	r2, [pc, #296]	@ (801aaf4 <USB_EPStartXfer+0xe38>)
 801a9ca:	4694      	mov	ip, r2
 801a9cc:	4463      	add	r3, ip
 801a9ce:	21b0      	movs	r1, #176	@ 0xb0
 801a9d0:	187a      	adds	r2, r7, r1
 801a9d2:	6013      	str	r3, [r2, #0]
 801a9d4:	683b      	ldr	r3, [r7, #0]
 801a9d6:	691b      	ldr	r3, [r3, #16]
 801a9d8:	b29a      	uxth	r2, r3
 801a9da:	187b      	adds	r3, r7, r1
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	801a      	strh	r2, [r3, #0]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	22a4      	movs	r2, #164	@ 0xa4
 801a9e4:	18ba      	adds	r2, r7, r2
 801a9e6:	6013      	str	r3, [r2, #0]
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	785b      	ldrb	r3, [r3, #1]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d000      	beq.n	801a9f2 <USB_EPStartXfer+0xd36>
 801a9f0:	e082      	b.n	801aaf8 <USB_EPStartXfer+0xe3c>
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	219c      	movs	r1, #156	@ 0x9c
 801a9f6:	187a      	adds	r2, r7, r1
 801a9f8:	6013      	str	r3, [r2, #0]
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	2250      	movs	r2, #80	@ 0x50
 801a9fe:	5a9b      	ldrh	r3, [r3, r2]
 801aa00:	b29b      	uxth	r3, r3
 801aa02:	001a      	movs	r2, r3
 801aa04:	187b      	adds	r3, r7, r1
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	189b      	adds	r3, r3, r2
 801aa0a:	187a      	adds	r2, r7, r1
 801aa0c:	6013      	str	r3, [r2, #0]
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	781b      	ldrb	r3, [r3, #0]
 801aa12:	00da      	lsls	r2, r3, #3
 801aa14:	187b      	adds	r3, r7, r1
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	18d3      	adds	r3, r2, r3
 801aa1a:	4a34      	ldr	r2, [pc, #208]	@ (801aaec <USB_EPStartXfer+0xe30>)
 801aa1c:	4694      	mov	ip, r2
 801aa1e:	4463      	add	r3, ip
 801aa20:	2198      	movs	r1, #152	@ 0x98
 801aa22:	187a      	adds	r2, r7, r1
 801aa24:	6013      	str	r3, [r2, #0]
 801aa26:	187b      	adds	r3, r7, r1
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	881b      	ldrh	r3, [r3, #0]
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	059b      	lsls	r3, r3, #22
 801aa30:	0d9b      	lsrs	r3, r3, #22
 801aa32:	b29a      	uxth	r2, r3
 801aa34:	187b      	adds	r3, r7, r1
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	801a      	strh	r2, [r3, #0]
 801aa3a:	683b      	ldr	r3, [r7, #0]
 801aa3c:	691b      	ldr	r3, [r3, #16]
 801aa3e:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa40:	d923      	bls.n	801aa8a <USB_EPStartXfer+0xdce>
 801aa42:	683b      	ldr	r3, [r7, #0]
 801aa44:	691b      	ldr	r3, [r3, #16]
 801aa46:	095b      	lsrs	r3, r3, #5
 801aa48:	21e0      	movs	r1, #224	@ 0xe0
 801aa4a:	187a      	adds	r2, r7, r1
 801aa4c:	6013      	str	r3, [r2, #0]
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	691b      	ldr	r3, [r3, #16]
 801aa52:	221f      	movs	r2, #31
 801aa54:	4013      	ands	r3, r2
 801aa56:	d104      	bne.n	801aa62 <USB_EPStartXfer+0xda6>
 801aa58:	187b      	adds	r3, r7, r1
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	3b01      	subs	r3, #1
 801aa5e:	187a      	adds	r2, r7, r1
 801aa60:	6013      	str	r3, [r2, #0]
 801aa62:	2198      	movs	r1, #152	@ 0x98
 801aa64:	187b      	adds	r3, r7, r1
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	881b      	ldrh	r3, [r3, #0]
 801aa6a:	b29a      	uxth	r2, r3
 801aa6c:	23e0      	movs	r3, #224	@ 0xe0
 801aa6e:	18fb      	adds	r3, r7, r3
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	b29b      	uxth	r3, r3
 801aa74:	029b      	lsls	r3, r3, #10
 801aa76:	b29b      	uxth	r3, r3
 801aa78:	4313      	orrs	r3, r2
 801aa7a:	b29b      	uxth	r3, r3
 801aa7c:	4a1c      	ldr	r2, [pc, #112]	@ (801aaf0 <USB_EPStartXfer+0xe34>)
 801aa7e:	4313      	orrs	r3, r2
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	187b      	adds	r3, r7, r1
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	801a      	strh	r2, [r3, #0]
 801aa88:	e057      	b.n	801ab3a <USB_EPStartXfer+0xe7e>
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	691b      	ldr	r3, [r3, #16]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d10b      	bne.n	801aaaa <USB_EPStartXfer+0xdee>
 801aa92:	2198      	movs	r1, #152	@ 0x98
 801aa94:	187b      	adds	r3, r7, r1
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	881b      	ldrh	r3, [r3, #0]
 801aa9a:	b29b      	uxth	r3, r3
 801aa9c:	4a14      	ldr	r2, [pc, #80]	@ (801aaf0 <USB_EPStartXfer+0xe34>)
 801aa9e:	4313      	orrs	r3, r2
 801aaa0:	b29a      	uxth	r2, r3
 801aaa2:	187b      	adds	r3, r7, r1
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	801a      	strh	r2, [r3, #0]
 801aaa8:	e047      	b.n	801ab3a <USB_EPStartXfer+0xe7e>
 801aaaa:	683b      	ldr	r3, [r7, #0]
 801aaac:	691b      	ldr	r3, [r3, #16]
 801aaae:	085b      	lsrs	r3, r3, #1
 801aab0:	21e0      	movs	r1, #224	@ 0xe0
 801aab2:	187a      	adds	r2, r7, r1
 801aab4:	6013      	str	r3, [r2, #0]
 801aab6:	683b      	ldr	r3, [r7, #0]
 801aab8:	691b      	ldr	r3, [r3, #16]
 801aaba:	2201      	movs	r2, #1
 801aabc:	4013      	ands	r3, r2
 801aabe:	d004      	beq.n	801aaca <USB_EPStartXfer+0xe0e>
 801aac0:	187b      	adds	r3, r7, r1
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	3301      	adds	r3, #1
 801aac6:	187a      	adds	r2, r7, r1
 801aac8:	6013      	str	r3, [r2, #0]
 801aaca:	2198      	movs	r1, #152	@ 0x98
 801aacc:	187b      	adds	r3, r7, r1
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	881b      	ldrh	r3, [r3, #0]
 801aad2:	b29a      	uxth	r2, r3
 801aad4:	23e0      	movs	r3, #224	@ 0xe0
 801aad6:	18fb      	adds	r3, r7, r3
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	b29b      	uxth	r3, r3
 801aadc:	029b      	lsls	r3, r3, #10
 801aade:	b29b      	uxth	r3, r3
 801aae0:	4313      	orrs	r3, r2
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	187b      	adds	r3, r7, r1
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	801a      	strh	r2, [r3, #0]
 801aaea:	e026      	b.n	801ab3a <USB_EPStartXfer+0xe7e>
 801aaec:	00000406 	.word	0x00000406
 801aaf0:	ffff8000 	.word	0xffff8000
 801aaf4:	00000402 	.word	0x00000402
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	785b      	ldrb	r3, [r3, #1]
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	d11c      	bne.n	801ab3a <USB_EPStartXfer+0xe7e>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	2250      	movs	r2, #80	@ 0x50
 801ab04:	5a9b      	ldrh	r3, [r3, r2]
 801ab06:	b29b      	uxth	r3, r3
 801ab08:	001a      	movs	r2, r3
 801ab0a:	21a4      	movs	r1, #164	@ 0xa4
 801ab0c:	187b      	adds	r3, r7, r1
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	189b      	adds	r3, r3, r2
 801ab12:	187a      	adds	r2, r7, r1
 801ab14:	6013      	str	r3, [r2, #0]
 801ab16:	683b      	ldr	r3, [r7, #0]
 801ab18:	781b      	ldrb	r3, [r3, #0]
 801ab1a:	00da      	lsls	r2, r3, #3
 801ab1c:	187b      	adds	r3, r7, r1
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	18d3      	adds	r3, r2, r3
 801ab22:	4ad2      	ldr	r2, [pc, #840]	@ (801ae6c <USB_EPStartXfer+0x11b0>)
 801ab24:	4694      	mov	ip, r2
 801ab26:	4463      	add	r3, ip
 801ab28:	21a0      	movs	r1, #160	@ 0xa0
 801ab2a:	187a      	adds	r2, r7, r1
 801ab2c:	6013      	str	r3, [r2, #0]
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	691b      	ldr	r3, [r3, #16]
 801ab32:	b29a      	uxth	r2, r3
 801ab34:	187b      	adds	r3, r7, r1
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801ab3a:	683b      	ldr	r3, [r7, #0]
 801ab3c:	69db      	ldr	r3, [r3, #28]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d100      	bne.n	801ab44 <USB_EPStartXfer+0xe88>
 801ab42:	e1c2      	b.n	801aeca <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801ab44:	687a      	ldr	r2, [r7, #4]
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	781b      	ldrb	r3, [r3, #0]
 801ab4a:	009b      	lsls	r3, r3, #2
 801ab4c:	18d2      	adds	r2, r2, r3
 801ab4e:	2196      	movs	r1, #150	@ 0x96
 801ab50:	187b      	adds	r3, r7, r1
 801ab52:	8812      	ldrh	r2, [r2, #0]
 801ab54:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ab56:	187b      	adds	r3, r7, r1
 801ab58:	881a      	ldrh	r2, [r3, #0]
 801ab5a:	2380      	movs	r3, #128	@ 0x80
 801ab5c:	01db      	lsls	r3, r3, #7
 801ab5e:	4013      	ands	r3, r2
 801ab60:	d004      	beq.n	801ab6c <USB_EPStartXfer+0xeb0>
 801ab62:	187b      	adds	r3, r7, r1
 801ab64:	881b      	ldrh	r3, [r3, #0]
 801ab66:	2240      	movs	r2, #64	@ 0x40
 801ab68:	4013      	ands	r3, r2
 801ab6a:	d10d      	bne.n	801ab88 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ab6c:	2196      	movs	r1, #150	@ 0x96
 801ab6e:	187b      	adds	r3, r7, r1
 801ab70:	881a      	ldrh	r2, [r3, #0]
 801ab72:	2380      	movs	r3, #128	@ 0x80
 801ab74:	01db      	lsls	r3, r3, #7
 801ab76:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ab78:	d000      	beq.n	801ab7c <USB_EPStartXfer+0xec0>
 801ab7a:	e1a6      	b.n	801aeca <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ab7c:	187b      	adds	r3, r7, r1
 801ab7e:	881b      	ldrh	r3, [r3, #0]
 801ab80:	2240      	movs	r2, #64	@ 0x40
 801ab82:	4013      	ands	r3, r2
 801ab84:	d000      	beq.n	801ab88 <USB_EPStartXfer+0xecc>
 801ab86:	e1a0      	b.n	801aeca <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801ab88:	687a      	ldr	r2, [r7, #4]
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	781b      	ldrb	r3, [r3, #0]
 801ab8e:	009b      	lsls	r3, r3, #2
 801ab90:	18d3      	adds	r3, r2, r3
 801ab92:	881b      	ldrh	r3, [r3, #0]
 801ab94:	b29a      	uxth	r2, r3
 801ab96:	2094      	movs	r0, #148	@ 0x94
 801ab98:	183b      	adds	r3, r7, r0
 801ab9a:	49b5      	ldr	r1, [pc, #724]	@ (801ae70 <USB_EPStartXfer+0x11b4>)
 801ab9c:	400a      	ands	r2, r1
 801ab9e:	801a      	strh	r2, [r3, #0]
 801aba0:	687a      	ldr	r2, [r7, #4]
 801aba2:	683b      	ldr	r3, [r7, #0]
 801aba4:	781b      	ldrb	r3, [r3, #0]
 801aba6:	009b      	lsls	r3, r3, #2
 801aba8:	18d3      	adds	r3, r2, r3
 801abaa:	183a      	adds	r2, r7, r0
 801abac:	8812      	ldrh	r2, [r2, #0]
 801abae:	49b1      	ldr	r1, [pc, #708]	@ (801ae74 <USB_EPStartXfer+0x11b8>)
 801abb0:	430a      	orrs	r2, r1
 801abb2:	b292      	uxth	r2, r2
 801abb4:	801a      	strh	r2, [r3, #0]
 801abb6:	e188      	b.n	801aeca <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801abb8:	683b      	ldr	r3, [r7, #0]
 801abba:	78db      	ldrb	r3, [r3, #3]
 801abbc:	2b01      	cmp	r3, #1
 801abbe:	d000      	beq.n	801abc2 <USB_EPStartXfer+0xf06>
 801abc0:	e181      	b.n	801aec6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	699a      	ldr	r2, [r3, #24]
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	691b      	ldr	r3, [r3, #16]
 801abca:	429a      	cmp	r2, r3
 801abcc:	d90d      	bls.n	801abea <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	691b      	ldr	r3, [r3, #16]
 801abd2:	1d7a      	adds	r2, r7, #5
 801abd4:	32ff      	adds	r2, #255	@ 0xff
 801abd6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801abd8:	683b      	ldr	r3, [r7, #0]
 801abda:	699a      	ldr	r2, [r3, #24]
 801abdc:	1d7b      	adds	r3, r7, #5
 801abde:	33ff      	adds	r3, #255	@ 0xff
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	1ad2      	subs	r2, r2, r3
 801abe4:	683b      	ldr	r3, [r7, #0]
 801abe6:	619a      	str	r2, [r3, #24]
 801abe8:	e007      	b.n	801abfa <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	699b      	ldr	r3, [r3, #24]
 801abee:	1d7a      	adds	r2, r7, #5
 801abf0:	32ff      	adds	r2, #255	@ 0xff
 801abf2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801abf4:	683b      	ldr	r3, [r7, #0]
 801abf6:	2200      	movs	r2, #0
 801abf8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	785b      	ldrb	r3, [r3, #1]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d000      	beq.n	801ac04 <USB_EPStartXfer+0xf48>
 801ac02:	e082      	b.n	801ad0a <USB_EPStartXfer+0x104e>
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	21cc      	movs	r1, #204	@ 0xcc
 801ac08:	187a      	adds	r2, r7, r1
 801ac0a:	6013      	str	r3, [r2, #0]
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2250      	movs	r2, #80	@ 0x50
 801ac10:	5a9b      	ldrh	r3, [r3, r2]
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	001a      	movs	r2, r3
 801ac16:	187b      	adds	r3, r7, r1
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	189b      	adds	r3, r3, r2
 801ac1c:	187a      	adds	r2, r7, r1
 801ac1e:	6013      	str	r3, [r2, #0]
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	781b      	ldrb	r3, [r3, #0]
 801ac24:	00da      	lsls	r2, r3, #3
 801ac26:	187b      	adds	r3, r7, r1
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	18d3      	adds	r3, r2, r3
 801ac2c:	4a92      	ldr	r2, [pc, #584]	@ (801ae78 <USB_EPStartXfer+0x11bc>)
 801ac2e:	4694      	mov	ip, r2
 801ac30:	4463      	add	r3, ip
 801ac32:	21c8      	movs	r1, #200	@ 0xc8
 801ac34:	187a      	adds	r2, r7, r1
 801ac36:	6013      	str	r3, [r2, #0]
 801ac38:	187b      	adds	r3, r7, r1
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	881b      	ldrh	r3, [r3, #0]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	059b      	lsls	r3, r3, #22
 801ac42:	0d9b      	lsrs	r3, r3, #22
 801ac44:	b29a      	uxth	r2, r3
 801ac46:	187b      	adds	r3, r7, r1
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	801a      	strh	r2, [r3, #0]
 801ac4c:	1d7b      	adds	r3, r7, #5
 801ac4e:	33ff      	adds	r3, #255	@ 0xff
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac54:	d925      	bls.n	801aca2 <USB_EPStartXfer+0xfe6>
 801ac56:	1d7b      	adds	r3, r7, #5
 801ac58:	33ff      	adds	r3, #255	@ 0xff
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	095b      	lsrs	r3, r3, #5
 801ac5e:	21dc      	movs	r1, #220	@ 0xdc
 801ac60:	187a      	adds	r2, r7, r1
 801ac62:	6013      	str	r3, [r2, #0]
 801ac64:	1d7b      	adds	r3, r7, #5
 801ac66:	33ff      	adds	r3, #255	@ 0xff
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	221f      	movs	r2, #31
 801ac6c:	4013      	ands	r3, r2
 801ac6e:	d104      	bne.n	801ac7a <USB_EPStartXfer+0xfbe>
 801ac70:	187b      	adds	r3, r7, r1
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	3b01      	subs	r3, #1
 801ac76:	187a      	adds	r2, r7, r1
 801ac78:	6013      	str	r3, [r2, #0]
 801ac7a:	21c8      	movs	r1, #200	@ 0xc8
 801ac7c:	187b      	adds	r3, r7, r1
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	881b      	ldrh	r3, [r3, #0]
 801ac82:	b29a      	uxth	r2, r3
 801ac84:	23dc      	movs	r3, #220	@ 0xdc
 801ac86:	18fb      	adds	r3, r7, r3
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	029b      	lsls	r3, r3, #10
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	4313      	orrs	r3, r2
 801ac92:	b29b      	uxth	r3, r3
 801ac94:	4a79      	ldr	r2, [pc, #484]	@ (801ae7c <USB_EPStartXfer+0x11c0>)
 801ac96:	4313      	orrs	r3, r2
 801ac98:	b29a      	uxth	r2, r3
 801ac9a:	187b      	adds	r3, r7, r1
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	801a      	strh	r2, [r3, #0]
 801aca0:	e058      	b.n	801ad54 <USB_EPStartXfer+0x1098>
 801aca2:	1d7b      	adds	r3, r7, #5
 801aca4:	33ff      	adds	r3, #255	@ 0xff
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d10b      	bne.n	801acc4 <USB_EPStartXfer+0x1008>
 801acac:	21c8      	movs	r1, #200	@ 0xc8
 801acae:	187b      	adds	r3, r7, r1
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	881b      	ldrh	r3, [r3, #0]
 801acb4:	b29b      	uxth	r3, r3
 801acb6:	4a71      	ldr	r2, [pc, #452]	@ (801ae7c <USB_EPStartXfer+0x11c0>)
 801acb8:	4313      	orrs	r3, r2
 801acba:	b29a      	uxth	r2, r3
 801acbc:	187b      	adds	r3, r7, r1
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	801a      	strh	r2, [r3, #0]
 801acc2:	e047      	b.n	801ad54 <USB_EPStartXfer+0x1098>
 801acc4:	1d7b      	adds	r3, r7, #5
 801acc6:	33ff      	adds	r3, #255	@ 0xff
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	085b      	lsrs	r3, r3, #1
 801accc:	21dc      	movs	r1, #220	@ 0xdc
 801acce:	187a      	adds	r2, r7, r1
 801acd0:	6013      	str	r3, [r2, #0]
 801acd2:	1d7b      	adds	r3, r7, #5
 801acd4:	33ff      	adds	r3, #255	@ 0xff
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	2201      	movs	r2, #1
 801acda:	4013      	ands	r3, r2
 801acdc:	d004      	beq.n	801ace8 <USB_EPStartXfer+0x102c>
 801acde:	187b      	adds	r3, r7, r1
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	3301      	adds	r3, #1
 801ace4:	187a      	adds	r2, r7, r1
 801ace6:	6013      	str	r3, [r2, #0]
 801ace8:	21c8      	movs	r1, #200	@ 0xc8
 801acea:	187b      	adds	r3, r7, r1
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	881b      	ldrh	r3, [r3, #0]
 801acf0:	b29a      	uxth	r2, r3
 801acf2:	23dc      	movs	r3, #220	@ 0xdc
 801acf4:	18fb      	adds	r3, r7, r3
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	b29b      	uxth	r3, r3
 801acfa:	029b      	lsls	r3, r3, #10
 801acfc:	b29b      	uxth	r3, r3
 801acfe:	4313      	orrs	r3, r2
 801ad00:	b29a      	uxth	r2, r3
 801ad02:	187b      	adds	r3, r7, r1
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	801a      	strh	r2, [r3, #0]
 801ad08:	e024      	b.n	801ad54 <USB_EPStartXfer+0x1098>
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	785b      	ldrb	r3, [r3, #1]
 801ad0e:	2b01      	cmp	r3, #1
 801ad10:	d120      	bne.n	801ad54 <USB_EPStartXfer+0x1098>
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	21d4      	movs	r1, #212	@ 0xd4
 801ad16:	187a      	adds	r2, r7, r1
 801ad18:	6013      	str	r3, [r2, #0]
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	2250      	movs	r2, #80	@ 0x50
 801ad1e:	5a9b      	ldrh	r3, [r3, r2]
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	001a      	movs	r2, r3
 801ad24:	187b      	adds	r3, r7, r1
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	189b      	adds	r3, r3, r2
 801ad2a:	187a      	adds	r2, r7, r1
 801ad2c:	6013      	str	r3, [r2, #0]
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	781b      	ldrb	r3, [r3, #0]
 801ad32:	00da      	lsls	r2, r3, #3
 801ad34:	187b      	adds	r3, r7, r1
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	18d3      	adds	r3, r2, r3
 801ad3a:	4a4f      	ldr	r2, [pc, #316]	@ (801ae78 <USB_EPStartXfer+0x11bc>)
 801ad3c:	4694      	mov	ip, r2
 801ad3e:	4463      	add	r3, ip
 801ad40:	21d0      	movs	r1, #208	@ 0xd0
 801ad42:	187a      	adds	r2, r7, r1
 801ad44:	6013      	str	r3, [r2, #0]
 801ad46:	1d7b      	adds	r3, r7, #5
 801ad48:	33ff      	adds	r3, #255	@ 0xff
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	b29a      	uxth	r2, r3
 801ad4e:	187b      	adds	r3, r7, r1
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	801a      	strh	r2, [r3, #0]
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	22c4      	movs	r2, #196	@ 0xc4
 801ad58:	18ba      	adds	r2, r7, r2
 801ad5a:	6013      	str	r3, [r2, #0]
 801ad5c:	683b      	ldr	r3, [r7, #0]
 801ad5e:	785b      	ldrb	r3, [r3, #1]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d000      	beq.n	801ad66 <USB_EPStartXfer+0x10aa>
 801ad64:	e08c      	b.n	801ae80 <USB_EPStartXfer+0x11c4>
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	21bc      	movs	r1, #188	@ 0xbc
 801ad6a:	187a      	adds	r2, r7, r1
 801ad6c:	6013      	str	r3, [r2, #0]
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	2250      	movs	r2, #80	@ 0x50
 801ad72:	5a9b      	ldrh	r3, [r3, r2]
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	001a      	movs	r2, r3
 801ad78:	187b      	adds	r3, r7, r1
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	189b      	adds	r3, r3, r2
 801ad7e:	187a      	adds	r2, r7, r1
 801ad80:	6013      	str	r3, [r2, #0]
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	00da      	lsls	r2, r3, #3
 801ad88:	187b      	adds	r3, r7, r1
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	18d3      	adds	r3, r2, r3
 801ad8e:	4a37      	ldr	r2, [pc, #220]	@ (801ae6c <USB_EPStartXfer+0x11b0>)
 801ad90:	4694      	mov	ip, r2
 801ad92:	4463      	add	r3, ip
 801ad94:	21b8      	movs	r1, #184	@ 0xb8
 801ad96:	187a      	adds	r2, r7, r1
 801ad98:	6013      	str	r3, [r2, #0]
 801ad9a:	187b      	adds	r3, r7, r1
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	881b      	ldrh	r3, [r3, #0]
 801ada0:	b29b      	uxth	r3, r3
 801ada2:	059b      	lsls	r3, r3, #22
 801ada4:	0d9b      	lsrs	r3, r3, #22
 801ada6:	b29a      	uxth	r2, r3
 801ada8:	187b      	adds	r3, r7, r1
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	801a      	strh	r2, [r3, #0]
 801adae:	1d7b      	adds	r3, r7, #5
 801adb0:	33ff      	adds	r3, #255	@ 0xff
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	2b3e      	cmp	r3, #62	@ 0x3e
 801adb6:	d925      	bls.n	801ae04 <USB_EPStartXfer+0x1148>
 801adb8:	1d7b      	adds	r3, r7, #5
 801adba:	33ff      	adds	r3, #255	@ 0xff
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	095b      	lsrs	r3, r3, #5
 801adc0:	21d8      	movs	r1, #216	@ 0xd8
 801adc2:	187a      	adds	r2, r7, r1
 801adc4:	6013      	str	r3, [r2, #0]
 801adc6:	1d7b      	adds	r3, r7, #5
 801adc8:	33ff      	adds	r3, #255	@ 0xff
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	221f      	movs	r2, #31
 801adce:	4013      	ands	r3, r2
 801add0:	d104      	bne.n	801addc <USB_EPStartXfer+0x1120>
 801add2:	187b      	adds	r3, r7, r1
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	3b01      	subs	r3, #1
 801add8:	187a      	adds	r2, r7, r1
 801adda:	6013      	str	r3, [r2, #0]
 801addc:	21b8      	movs	r1, #184	@ 0xb8
 801adde:	187b      	adds	r3, r7, r1
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	881b      	ldrh	r3, [r3, #0]
 801ade4:	b29a      	uxth	r2, r3
 801ade6:	23d8      	movs	r3, #216	@ 0xd8
 801ade8:	18fb      	adds	r3, r7, r3
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	b29b      	uxth	r3, r3
 801adee:	029b      	lsls	r3, r3, #10
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	4313      	orrs	r3, r2
 801adf4:	b29b      	uxth	r3, r3
 801adf6:	4a21      	ldr	r2, [pc, #132]	@ (801ae7c <USB_EPStartXfer+0x11c0>)
 801adf8:	4313      	orrs	r3, r2
 801adfa:	b29a      	uxth	r2, r3
 801adfc:	187b      	adds	r3, r7, r1
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	801a      	strh	r2, [r3, #0]
 801ae02:	e062      	b.n	801aeca <USB_EPStartXfer+0x120e>
 801ae04:	1d7b      	adds	r3, r7, #5
 801ae06:	33ff      	adds	r3, #255	@ 0xff
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d10b      	bne.n	801ae26 <USB_EPStartXfer+0x116a>
 801ae0e:	21b8      	movs	r1, #184	@ 0xb8
 801ae10:	187b      	adds	r3, r7, r1
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	881b      	ldrh	r3, [r3, #0]
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	4a18      	ldr	r2, [pc, #96]	@ (801ae7c <USB_EPStartXfer+0x11c0>)
 801ae1a:	4313      	orrs	r3, r2
 801ae1c:	b29a      	uxth	r2, r3
 801ae1e:	187b      	adds	r3, r7, r1
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	801a      	strh	r2, [r3, #0]
 801ae24:	e051      	b.n	801aeca <USB_EPStartXfer+0x120e>
 801ae26:	1d7b      	adds	r3, r7, #5
 801ae28:	33ff      	adds	r3, #255	@ 0xff
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	085b      	lsrs	r3, r3, #1
 801ae2e:	21d8      	movs	r1, #216	@ 0xd8
 801ae30:	187a      	adds	r2, r7, r1
 801ae32:	6013      	str	r3, [r2, #0]
 801ae34:	1d7b      	adds	r3, r7, #5
 801ae36:	33ff      	adds	r3, #255	@ 0xff
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	4013      	ands	r3, r2
 801ae3e:	d004      	beq.n	801ae4a <USB_EPStartXfer+0x118e>
 801ae40:	187b      	adds	r3, r7, r1
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	3301      	adds	r3, #1
 801ae46:	187a      	adds	r2, r7, r1
 801ae48:	6013      	str	r3, [r2, #0]
 801ae4a:	21b8      	movs	r1, #184	@ 0xb8
 801ae4c:	187b      	adds	r3, r7, r1
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	881b      	ldrh	r3, [r3, #0]
 801ae52:	b29a      	uxth	r2, r3
 801ae54:	23d8      	movs	r3, #216	@ 0xd8
 801ae56:	18fb      	adds	r3, r7, r3
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	029b      	lsls	r3, r3, #10
 801ae5e:	b29b      	uxth	r3, r3
 801ae60:	4313      	orrs	r3, r2
 801ae62:	b29a      	uxth	r2, r3
 801ae64:	187b      	adds	r3, r7, r1
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	801a      	strh	r2, [r3, #0]
 801ae6a:	e02e      	b.n	801aeca <USB_EPStartXfer+0x120e>
 801ae6c:	00000406 	.word	0x00000406
 801ae70:	ffff8f8f 	.word	0xffff8f8f
 801ae74:	ffff80c0 	.word	0xffff80c0
 801ae78:	00000402 	.word	0x00000402
 801ae7c:	ffff8000 	.word	0xffff8000
 801ae80:	683b      	ldr	r3, [r7, #0]
 801ae82:	785b      	ldrb	r3, [r3, #1]
 801ae84:	2b01      	cmp	r3, #1
 801ae86:	d120      	bne.n	801aeca <USB_EPStartXfer+0x120e>
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	2250      	movs	r2, #80	@ 0x50
 801ae8c:	5a9b      	ldrh	r3, [r3, r2]
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	001a      	movs	r2, r3
 801ae92:	21c4      	movs	r1, #196	@ 0xc4
 801ae94:	187b      	adds	r3, r7, r1
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	189b      	adds	r3, r3, r2
 801ae9a:	187a      	adds	r2, r7, r1
 801ae9c:	6013      	str	r3, [r2, #0]
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	781b      	ldrb	r3, [r3, #0]
 801aea2:	00da      	lsls	r2, r3, #3
 801aea4:	187b      	adds	r3, r7, r1
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	18d3      	adds	r3, r2, r3
 801aeaa:	4a1d      	ldr	r2, [pc, #116]	@ (801af20 <USB_EPStartXfer+0x1264>)
 801aeac:	4694      	mov	ip, r2
 801aeae:	4463      	add	r3, ip
 801aeb0:	21c0      	movs	r1, #192	@ 0xc0
 801aeb2:	187a      	adds	r2, r7, r1
 801aeb4:	6013      	str	r3, [r2, #0]
 801aeb6:	1d7b      	adds	r3, r7, #5
 801aeb8:	33ff      	adds	r3, #255	@ 0xff
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	b29a      	uxth	r2, r3
 801aebe:	187b      	adds	r3, r7, r1
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	801a      	strh	r2, [r3, #0]
 801aec4:	e001      	b.n	801aeca <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801aec6:	2301      	movs	r3, #1
 801aec8:	e025      	b.n	801af16 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801aeca:	687a      	ldr	r2, [r7, #4]
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	009b      	lsls	r3, r3, #2
 801aed2:	18d3      	adds	r3, r2, r3
 801aed4:	881b      	ldrh	r3, [r3, #0]
 801aed6:	b29a      	uxth	r2, r3
 801aed8:	208a      	movs	r0, #138	@ 0x8a
 801aeda:	183b      	adds	r3, r7, r0
 801aedc:	4911      	ldr	r1, [pc, #68]	@ (801af24 <USB_EPStartXfer+0x1268>)
 801aede:	400a      	ands	r2, r1
 801aee0:	801a      	strh	r2, [r3, #0]
 801aee2:	183b      	adds	r3, r7, r0
 801aee4:	183a      	adds	r2, r7, r0
 801aee6:	8812      	ldrh	r2, [r2, #0]
 801aee8:	2180      	movs	r1, #128	@ 0x80
 801aeea:	0149      	lsls	r1, r1, #5
 801aeec:	404a      	eors	r2, r1
 801aeee:	801a      	strh	r2, [r3, #0]
 801aef0:	183b      	adds	r3, r7, r0
 801aef2:	183a      	adds	r2, r7, r0
 801aef4:	8812      	ldrh	r2, [r2, #0]
 801aef6:	2180      	movs	r1, #128	@ 0x80
 801aef8:	0189      	lsls	r1, r1, #6
 801aefa:	404a      	eors	r2, r1
 801aefc:	801a      	strh	r2, [r3, #0]
 801aefe:	687a      	ldr	r2, [r7, #4]
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	781b      	ldrb	r3, [r3, #0]
 801af04:	009b      	lsls	r3, r3, #2
 801af06:	18d3      	adds	r3, r2, r3
 801af08:	183a      	adds	r2, r7, r0
 801af0a:	8812      	ldrh	r2, [r2, #0]
 801af0c:	4906      	ldr	r1, [pc, #24]	@ (801af28 <USB_EPStartXfer+0x126c>)
 801af0e:	430a      	orrs	r2, r1
 801af10:	b292      	uxth	r2, r2
 801af12:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801af14:	2300      	movs	r3, #0
}
 801af16:	0018      	movs	r0, r3
 801af18:	46bd      	mov	sp, r7
 801af1a:	b043      	add	sp, #268	@ 0x10c
 801af1c:	bd90      	pop	{r4, r7, pc}
 801af1e:	46c0      	nop			@ (mov r8, r8)
 801af20:	00000406 	.word	0x00000406
 801af24:	ffffbf8f 	.word	0xffffbf8f
 801af28:	ffff8080 	.word	0xffff8080

0801af2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b084      	sub	sp, #16
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
 801af34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	785b      	ldrb	r3, [r3, #1]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d01d      	beq.n	801af7a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801af3e:	687a      	ldr	r2, [r7, #4]
 801af40:	683b      	ldr	r3, [r7, #0]
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	009b      	lsls	r3, r3, #2
 801af46:	18d3      	adds	r3, r2, r3
 801af48:	881b      	ldrh	r3, [r3, #0]
 801af4a:	b29a      	uxth	r2, r3
 801af4c:	200c      	movs	r0, #12
 801af4e:	183b      	adds	r3, r7, r0
 801af50:	491b      	ldr	r1, [pc, #108]	@ (801afc0 <USB_EPSetStall+0x94>)
 801af52:	400a      	ands	r2, r1
 801af54:	801a      	strh	r2, [r3, #0]
 801af56:	183b      	adds	r3, r7, r0
 801af58:	183a      	adds	r2, r7, r0
 801af5a:	8812      	ldrh	r2, [r2, #0]
 801af5c:	2110      	movs	r1, #16
 801af5e:	404a      	eors	r2, r1
 801af60:	801a      	strh	r2, [r3, #0]
 801af62:	687a      	ldr	r2, [r7, #4]
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	781b      	ldrb	r3, [r3, #0]
 801af68:	009b      	lsls	r3, r3, #2
 801af6a:	18d3      	adds	r3, r2, r3
 801af6c:	183a      	adds	r2, r7, r0
 801af6e:	8812      	ldrh	r2, [r2, #0]
 801af70:	4914      	ldr	r1, [pc, #80]	@ (801afc4 <USB_EPSetStall+0x98>)
 801af72:	430a      	orrs	r2, r1
 801af74:	b292      	uxth	r2, r2
 801af76:	801a      	strh	r2, [r3, #0]
 801af78:	e01d      	b.n	801afb6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801af7a:	687a      	ldr	r2, [r7, #4]
 801af7c:	683b      	ldr	r3, [r7, #0]
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	009b      	lsls	r3, r3, #2
 801af82:	18d3      	adds	r3, r2, r3
 801af84:	881b      	ldrh	r3, [r3, #0]
 801af86:	b29a      	uxth	r2, r3
 801af88:	200e      	movs	r0, #14
 801af8a:	183b      	adds	r3, r7, r0
 801af8c:	490e      	ldr	r1, [pc, #56]	@ (801afc8 <USB_EPSetStall+0x9c>)
 801af8e:	400a      	ands	r2, r1
 801af90:	801a      	strh	r2, [r3, #0]
 801af92:	183b      	adds	r3, r7, r0
 801af94:	183a      	adds	r2, r7, r0
 801af96:	8812      	ldrh	r2, [r2, #0]
 801af98:	2180      	movs	r1, #128	@ 0x80
 801af9a:	0149      	lsls	r1, r1, #5
 801af9c:	404a      	eors	r2, r1
 801af9e:	801a      	strh	r2, [r3, #0]
 801afa0:	687a      	ldr	r2, [r7, #4]
 801afa2:	683b      	ldr	r3, [r7, #0]
 801afa4:	781b      	ldrb	r3, [r3, #0]
 801afa6:	009b      	lsls	r3, r3, #2
 801afa8:	18d3      	adds	r3, r2, r3
 801afaa:	183a      	adds	r2, r7, r0
 801afac:	8812      	ldrh	r2, [r2, #0]
 801afae:	4905      	ldr	r1, [pc, #20]	@ (801afc4 <USB_EPSetStall+0x98>)
 801afb0:	430a      	orrs	r2, r1
 801afb2:	b292      	uxth	r2, r2
 801afb4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801afb6:	2300      	movs	r3, #0
}
 801afb8:	0018      	movs	r0, r3
 801afba:	46bd      	mov	sp, r7
 801afbc:	b004      	add	sp, #16
 801afbe:	bd80      	pop	{r7, pc}
 801afc0:	ffff8fbf 	.word	0xffff8fbf
 801afc4:	ffff8080 	.word	0xffff8080
 801afc8:	ffffbf8f 	.word	0xffffbf8f

0801afcc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b086      	sub	sp, #24
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
 801afd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	7b1b      	ldrb	r3, [r3, #12]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d000      	beq.n	801afe0 <USB_EPClearStall+0x14>
 801afde:	e095      	b.n	801b10c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801afe0:	683b      	ldr	r3, [r7, #0]
 801afe2:	785b      	ldrb	r3, [r3, #1]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d046      	beq.n	801b076 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801afe8:	687a      	ldr	r2, [r7, #4]
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	781b      	ldrb	r3, [r3, #0]
 801afee:	009b      	lsls	r3, r3, #2
 801aff0:	18d2      	adds	r2, r2, r3
 801aff2:	2110      	movs	r1, #16
 801aff4:	187b      	adds	r3, r7, r1
 801aff6:	8812      	ldrh	r2, [r2, #0]
 801aff8:	801a      	strh	r2, [r3, #0]
 801affa:	187b      	adds	r3, r7, r1
 801affc:	881b      	ldrh	r3, [r3, #0]
 801affe:	2240      	movs	r2, #64	@ 0x40
 801b000:	4013      	ands	r3, r2
 801b002:	d016      	beq.n	801b032 <USB_EPClearStall+0x66>
 801b004:	687a      	ldr	r2, [r7, #4]
 801b006:	683b      	ldr	r3, [r7, #0]
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	009b      	lsls	r3, r3, #2
 801b00c:	18d3      	adds	r3, r2, r3
 801b00e:	881b      	ldrh	r3, [r3, #0]
 801b010:	b29a      	uxth	r2, r3
 801b012:	200e      	movs	r0, #14
 801b014:	183b      	adds	r3, r7, r0
 801b016:	4940      	ldr	r1, [pc, #256]	@ (801b118 <USB_EPClearStall+0x14c>)
 801b018:	400a      	ands	r2, r1
 801b01a:	801a      	strh	r2, [r3, #0]
 801b01c:	687a      	ldr	r2, [r7, #4]
 801b01e:	683b      	ldr	r3, [r7, #0]
 801b020:	781b      	ldrb	r3, [r3, #0]
 801b022:	009b      	lsls	r3, r3, #2
 801b024:	18d3      	adds	r3, r2, r3
 801b026:	183a      	adds	r2, r7, r0
 801b028:	8812      	ldrh	r2, [r2, #0]
 801b02a:	493c      	ldr	r1, [pc, #240]	@ (801b11c <USB_EPClearStall+0x150>)
 801b02c:	430a      	orrs	r2, r1
 801b02e:	b292      	uxth	r2, r2
 801b030:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	78db      	ldrb	r3, [r3, #3]
 801b036:	2b01      	cmp	r3, #1
 801b038:	d068      	beq.n	801b10c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b03a:	687a      	ldr	r2, [r7, #4]
 801b03c:	683b      	ldr	r3, [r7, #0]
 801b03e:	781b      	ldrb	r3, [r3, #0]
 801b040:	009b      	lsls	r3, r3, #2
 801b042:	18d3      	adds	r3, r2, r3
 801b044:	881b      	ldrh	r3, [r3, #0]
 801b046:	b29a      	uxth	r2, r3
 801b048:	200c      	movs	r0, #12
 801b04a:	183b      	adds	r3, r7, r0
 801b04c:	4934      	ldr	r1, [pc, #208]	@ (801b120 <USB_EPClearStall+0x154>)
 801b04e:	400a      	ands	r2, r1
 801b050:	801a      	strh	r2, [r3, #0]
 801b052:	183b      	adds	r3, r7, r0
 801b054:	183a      	adds	r2, r7, r0
 801b056:	8812      	ldrh	r2, [r2, #0]
 801b058:	2120      	movs	r1, #32
 801b05a:	404a      	eors	r2, r1
 801b05c:	801a      	strh	r2, [r3, #0]
 801b05e:	687a      	ldr	r2, [r7, #4]
 801b060:	683b      	ldr	r3, [r7, #0]
 801b062:	781b      	ldrb	r3, [r3, #0]
 801b064:	009b      	lsls	r3, r3, #2
 801b066:	18d3      	adds	r3, r2, r3
 801b068:	183a      	adds	r2, r7, r0
 801b06a:	8812      	ldrh	r2, [r2, #0]
 801b06c:	492d      	ldr	r1, [pc, #180]	@ (801b124 <USB_EPClearStall+0x158>)
 801b06e:	430a      	orrs	r2, r1
 801b070:	b292      	uxth	r2, r2
 801b072:	801a      	strh	r2, [r3, #0]
 801b074:	e04a      	b.n	801b10c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b076:	687a      	ldr	r2, [r7, #4]
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	781b      	ldrb	r3, [r3, #0]
 801b07c:	009b      	lsls	r3, r3, #2
 801b07e:	18d2      	adds	r2, r2, r3
 801b080:	2116      	movs	r1, #22
 801b082:	187b      	adds	r3, r7, r1
 801b084:	8812      	ldrh	r2, [r2, #0]
 801b086:	801a      	strh	r2, [r3, #0]
 801b088:	187b      	adds	r3, r7, r1
 801b08a:	881a      	ldrh	r2, [r3, #0]
 801b08c:	2380      	movs	r3, #128	@ 0x80
 801b08e:	01db      	lsls	r3, r3, #7
 801b090:	4013      	ands	r3, r2
 801b092:	d016      	beq.n	801b0c2 <USB_EPClearStall+0xf6>
 801b094:	687a      	ldr	r2, [r7, #4]
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	009b      	lsls	r3, r3, #2
 801b09c:	18d3      	adds	r3, r2, r3
 801b09e:	881b      	ldrh	r3, [r3, #0]
 801b0a0:	b29a      	uxth	r2, r3
 801b0a2:	2014      	movs	r0, #20
 801b0a4:	183b      	adds	r3, r7, r0
 801b0a6:	491c      	ldr	r1, [pc, #112]	@ (801b118 <USB_EPClearStall+0x14c>)
 801b0a8:	400a      	ands	r2, r1
 801b0aa:	801a      	strh	r2, [r3, #0]
 801b0ac:	687a      	ldr	r2, [r7, #4]
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	781b      	ldrb	r3, [r3, #0]
 801b0b2:	009b      	lsls	r3, r3, #2
 801b0b4:	18d3      	adds	r3, r2, r3
 801b0b6:	183a      	adds	r2, r7, r0
 801b0b8:	8812      	ldrh	r2, [r2, #0]
 801b0ba:	491b      	ldr	r1, [pc, #108]	@ (801b128 <USB_EPClearStall+0x15c>)
 801b0bc:	430a      	orrs	r2, r1
 801b0be:	b292      	uxth	r2, r2
 801b0c0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b0c2:	687a      	ldr	r2, [r7, #4]
 801b0c4:	683b      	ldr	r3, [r7, #0]
 801b0c6:	781b      	ldrb	r3, [r3, #0]
 801b0c8:	009b      	lsls	r3, r3, #2
 801b0ca:	18d3      	adds	r3, r2, r3
 801b0cc:	881b      	ldrh	r3, [r3, #0]
 801b0ce:	b29a      	uxth	r2, r3
 801b0d0:	2012      	movs	r0, #18
 801b0d2:	183b      	adds	r3, r7, r0
 801b0d4:	4915      	ldr	r1, [pc, #84]	@ (801b12c <USB_EPClearStall+0x160>)
 801b0d6:	400a      	ands	r2, r1
 801b0d8:	801a      	strh	r2, [r3, #0]
 801b0da:	183b      	adds	r3, r7, r0
 801b0dc:	183a      	adds	r2, r7, r0
 801b0de:	8812      	ldrh	r2, [r2, #0]
 801b0e0:	2180      	movs	r1, #128	@ 0x80
 801b0e2:	0149      	lsls	r1, r1, #5
 801b0e4:	404a      	eors	r2, r1
 801b0e6:	801a      	strh	r2, [r3, #0]
 801b0e8:	183b      	adds	r3, r7, r0
 801b0ea:	183a      	adds	r2, r7, r0
 801b0ec:	8812      	ldrh	r2, [r2, #0]
 801b0ee:	2180      	movs	r1, #128	@ 0x80
 801b0f0:	0189      	lsls	r1, r1, #6
 801b0f2:	404a      	eors	r2, r1
 801b0f4:	801a      	strh	r2, [r3, #0]
 801b0f6:	687a      	ldr	r2, [r7, #4]
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	009b      	lsls	r3, r3, #2
 801b0fe:	18d3      	adds	r3, r2, r3
 801b100:	183a      	adds	r2, r7, r0
 801b102:	8812      	ldrh	r2, [r2, #0]
 801b104:	4907      	ldr	r1, [pc, #28]	@ (801b124 <USB_EPClearStall+0x158>)
 801b106:	430a      	orrs	r2, r1
 801b108:	b292      	uxth	r2, r2
 801b10a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b10c:	2300      	movs	r3, #0
}
 801b10e:	0018      	movs	r0, r3
 801b110:	46bd      	mov	sp, r7
 801b112:	b006      	add	sp, #24
 801b114:	bd80      	pop	{r7, pc}
 801b116:	46c0      	nop			@ (mov r8, r8)
 801b118:	ffff8f8f 	.word	0xffff8f8f
 801b11c:	ffff80c0 	.word	0xffff80c0
 801b120:	ffff8fbf 	.word	0xffff8fbf
 801b124:	ffff8080 	.word	0xffff8080
 801b128:	ffffc080 	.word	0xffffc080
 801b12c:	ffffbf8f 	.word	0xffffbf8f

0801b130 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b130:	b580      	push	{r7, lr}
 801b132:	b082      	sub	sp, #8
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
 801b138:	000a      	movs	r2, r1
 801b13a:	1cfb      	adds	r3, r7, #3
 801b13c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b13e:	1cfb      	adds	r3, r7, #3
 801b140:	781b      	ldrb	r3, [r3, #0]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d103      	bne.n	801b14e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	224c      	movs	r2, #76	@ 0x4c
 801b14a:	2180      	movs	r1, #128	@ 0x80
 801b14c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b14e:	2300      	movs	r3, #0
}
 801b150:	0018      	movs	r0, r3
 801b152:	46bd      	mov	sp, r7
 801b154:	b002      	add	sp, #8
 801b156:	bd80      	pop	{r7, pc}

0801b158 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	2258      	movs	r2, #88	@ 0x58
 801b164:	5a9b      	ldrh	r3, [r3, r2]
 801b166:	b29b      	uxth	r3, r3
 801b168:	4a05      	ldr	r2, [pc, #20]	@ (801b180 <USB_DevConnect+0x28>)
 801b16a:	4313      	orrs	r3, r2
 801b16c:	b299      	uxth	r1, r3
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	2258      	movs	r2, #88	@ 0x58
 801b172:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b174:	2300      	movs	r3, #0
}
 801b176:	0018      	movs	r0, r3
 801b178:	46bd      	mov	sp, r7
 801b17a:	b002      	add	sp, #8
 801b17c:	bd80      	pop	{r7, pc}
 801b17e:	46c0      	nop			@ (mov r8, r8)
 801b180:	ffff8000 	.word	0xffff8000

0801b184 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b184:	b580      	push	{r7, lr}
 801b186:	b084      	sub	sp, #16
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	2244      	movs	r2, #68	@ 0x44
 801b190:	5a9b      	ldrh	r3, [r3, r2]
 801b192:	b29b      	uxth	r3, r3
 801b194:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b196:	68fb      	ldr	r3, [r7, #12]
}
 801b198:	0018      	movs	r0, r3
 801b19a:	46bd      	mov	sp, r7
 801b19c:	b004      	add	sp, #16
 801b19e:	bd80      	pop	{r7, pc}

0801b1a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b08a      	sub	sp, #40	@ 0x28
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	60f8      	str	r0, [r7, #12]
 801b1a8:	60b9      	str	r1, [r7, #8]
 801b1aa:	0019      	movs	r1, r3
 801b1ac:	1dbb      	adds	r3, r7, #6
 801b1ae:	801a      	strh	r2, [r3, #0]
 801b1b0:	1d3b      	adds	r3, r7, #4
 801b1b2:	1c0a      	adds	r2, r1, #0
 801b1b4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b1b6:	1d3b      	adds	r3, r7, #4
 801b1b8:	881b      	ldrh	r3, [r3, #0]
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	085b      	lsrs	r3, r3, #1
 801b1be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b1c4:	68bb      	ldr	r3, [r7, #8]
 801b1c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b1c8:	1dbb      	adds	r3, r7, #6
 801b1ca:	881a      	ldrh	r2, [r3, #0]
 801b1cc:	697b      	ldr	r3, [r7, #20]
 801b1ce:	18d3      	adds	r3, r2, r3
 801b1d0:	2280      	movs	r2, #128	@ 0x80
 801b1d2:	00d2      	lsls	r2, r2, #3
 801b1d4:	4694      	mov	ip, r2
 801b1d6:	4463      	add	r3, ip
 801b1d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b1da:	69bb      	ldr	r3, [r7, #24]
 801b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
 801b1de:	e020      	b.n	801b222 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b1e0:	69fb      	ldr	r3, [r7, #28]
 801b1e2:	781a      	ldrb	r2, [r3, #0]
 801b1e4:	2112      	movs	r1, #18
 801b1e6:	187b      	adds	r3, r7, r1
 801b1e8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b1ea:	69fb      	ldr	r3, [r7, #28]
 801b1ec:	3301      	adds	r3, #1
 801b1ee:	781b      	ldrb	r3, [r3, #0]
 801b1f0:	021b      	lsls	r3, r3, #8
 801b1f2:	b21a      	sxth	r2, r3
 801b1f4:	187b      	adds	r3, r7, r1
 801b1f6:	2000      	movs	r0, #0
 801b1f8:	5e1b      	ldrsh	r3, [r3, r0]
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	b21a      	sxth	r2, r3
 801b1fe:	187b      	adds	r3, r7, r1
 801b200:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b202:	6a3b      	ldr	r3, [r7, #32]
 801b204:	187a      	adds	r2, r7, r1
 801b206:	8812      	ldrh	r2, [r2, #0]
 801b208:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b20a:	6a3b      	ldr	r3, [r7, #32]
 801b20c:	3302      	adds	r3, #2
 801b20e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b210:	69fb      	ldr	r3, [r7, #28]
 801b212:	3301      	adds	r3, #1
 801b214:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b216:	69fb      	ldr	r3, [r7, #28]
 801b218:	3301      	adds	r3, #1
 801b21a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b21e:	3b01      	subs	r3, #1
 801b220:	627b      	str	r3, [r7, #36]	@ 0x24
 801b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b224:	2b00      	cmp	r3, #0
 801b226:	d1db      	bne.n	801b1e0 <USB_WritePMA+0x40>
  }
}
 801b228:	46c0      	nop			@ (mov r8, r8)
 801b22a:	46c0      	nop			@ (mov r8, r8)
 801b22c:	46bd      	mov	sp, r7
 801b22e:	b00a      	add	sp, #40	@ 0x28
 801b230:	bd80      	pop	{r7, pc}

0801b232 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b232:	b580      	push	{r7, lr}
 801b234:	b08a      	sub	sp, #40	@ 0x28
 801b236:	af00      	add	r7, sp, #0
 801b238:	60f8      	str	r0, [r7, #12]
 801b23a:	60b9      	str	r1, [r7, #8]
 801b23c:	0019      	movs	r1, r3
 801b23e:	1dbb      	adds	r3, r7, #6
 801b240:	801a      	strh	r2, [r3, #0]
 801b242:	1d3b      	adds	r3, r7, #4
 801b244:	1c0a      	adds	r2, r1, #0
 801b246:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b248:	1d3b      	adds	r3, r7, #4
 801b24a:	881b      	ldrh	r3, [r3, #0]
 801b24c:	085b      	lsrs	r3, r3, #1
 801b24e:	b29b      	uxth	r3, r3
 801b250:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b256:	68bb      	ldr	r3, [r7, #8]
 801b258:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b25a:	1dbb      	adds	r3, r7, #6
 801b25c:	881a      	ldrh	r2, [r3, #0]
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	18d3      	adds	r3, r2, r3
 801b262:	2280      	movs	r2, #128	@ 0x80
 801b264:	00d2      	lsls	r2, r2, #3
 801b266:	4694      	mov	ip, r2
 801b268:	4463      	add	r3, ip
 801b26a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b26c:	69bb      	ldr	r3, [r7, #24]
 801b26e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b270:	e018      	b.n	801b2a4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b272:	6a3b      	ldr	r3, [r7, #32]
 801b274:	881b      	ldrh	r3, [r3, #0]
 801b276:	b29b      	uxth	r3, r3
 801b278:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b27a:	6a3b      	ldr	r3, [r7, #32]
 801b27c:	3302      	adds	r3, #2
 801b27e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b280:	693b      	ldr	r3, [r7, #16]
 801b282:	b2da      	uxtb	r2, r3
 801b284:	69fb      	ldr	r3, [r7, #28]
 801b286:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b288:	69fb      	ldr	r3, [r7, #28]
 801b28a:	3301      	adds	r3, #1
 801b28c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b28e:	693b      	ldr	r3, [r7, #16]
 801b290:	0a1b      	lsrs	r3, r3, #8
 801b292:	b2da      	uxtb	r2, r3
 801b294:	69fb      	ldr	r3, [r7, #28]
 801b296:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b298:	69fb      	ldr	r3, [r7, #28]
 801b29a:	3301      	adds	r3, #1
 801b29c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a0:	3b01      	subs	r3, #1
 801b2a2:	627b      	str	r3, [r7, #36]	@ 0x24
 801b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d1e3      	bne.n	801b272 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b2aa:	1d3b      	adds	r3, r7, #4
 801b2ac:	881b      	ldrh	r3, [r3, #0]
 801b2ae:	2201      	movs	r2, #1
 801b2b0:	4013      	ands	r3, r2
 801b2b2:	b29b      	uxth	r3, r3
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d007      	beq.n	801b2c8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b2b8:	6a3b      	ldr	r3, [r7, #32]
 801b2ba:	881b      	ldrh	r3, [r3, #0]
 801b2bc:	b29b      	uxth	r3, r3
 801b2be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b2c0:	693b      	ldr	r3, [r7, #16]
 801b2c2:	b2da      	uxtb	r2, r3
 801b2c4:	69fb      	ldr	r3, [r7, #28]
 801b2c6:	701a      	strb	r2, [r3, #0]
  }
}
 801b2c8:	46c0      	nop			@ (mov r8, r8)
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	b00a      	add	sp, #40	@ 0x28
 801b2ce:	bd80      	pop	{r7, pc}

0801b2d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b2d0:	b580      	push	{r7, lr}
 801b2d2:	b084      	sub	sp, #16
 801b2d4:	af00      	add	r7, sp, #0
 801b2d6:	6078      	str	r0, [r7, #4]
 801b2d8:	000a      	movs	r2, r1
 801b2da:	1cfb      	adds	r3, r7, #3
 801b2dc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b2de:	230f      	movs	r3, #15
 801b2e0:	18fb      	adds	r3, r7, r3
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	7c1b      	ldrb	r3, [r3, #16]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d116      	bne.n	801b31c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b2ee:	2380      	movs	r3, #128	@ 0x80
 801b2f0:	009b      	lsls	r3, r3, #2
 801b2f2:	6878      	ldr	r0, [r7, #4]
 801b2f4:	2202      	movs	r2, #2
 801b2f6:	2181      	movs	r1, #129	@ 0x81
 801b2f8:	f002 f8eb 	bl	801d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	2201      	movs	r2, #1
 801b300:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b302:	2380      	movs	r3, #128	@ 0x80
 801b304:	009b      	lsls	r3, r3, #2
 801b306:	6878      	ldr	r0, [r7, #4]
 801b308:	2202      	movs	r2, #2
 801b30a:	2101      	movs	r1, #1
 801b30c:	f002 f8e1 	bl	801d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b310:	687a      	ldr	r2, [r7, #4]
 801b312:	23b6      	movs	r3, #182	@ 0xb6
 801b314:	005b      	lsls	r3, r3, #1
 801b316:	2101      	movs	r1, #1
 801b318:	50d1      	str	r1, [r2, r3]
 801b31a:	e013      	b.n	801b344 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b31c:	6878      	ldr	r0, [r7, #4]
 801b31e:	2340      	movs	r3, #64	@ 0x40
 801b320:	2202      	movs	r2, #2
 801b322:	2181      	movs	r1, #129	@ 0x81
 801b324:	f002 f8d5 	bl	801d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	2201      	movs	r2, #1
 801b32c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b32e:	6878      	ldr	r0, [r7, #4]
 801b330:	2340      	movs	r3, #64	@ 0x40
 801b332:	2202      	movs	r2, #2
 801b334:	2101      	movs	r1, #1
 801b336:	f002 f8cc 	bl	801d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b33a:	687a      	ldr	r2, [r7, #4]
 801b33c:	23b6      	movs	r3, #182	@ 0xb6
 801b33e:	005b      	lsls	r3, r3, #1
 801b340:	2101      	movs	r1, #1
 801b342:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b344:	6878      	ldr	r0, [r7, #4]
 801b346:	2308      	movs	r3, #8
 801b348:	2203      	movs	r2, #3
 801b34a:	2182      	movs	r1, #130	@ 0x82
 801b34c:	f002 f8c1 	bl	801d4d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2201      	movs	r2, #1
 801b354:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b356:	2387      	movs	r3, #135	@ 0x87
 801b358:	009b      	lsls	r3, r3, #2
 801b35a:	0018      	movs	r0, r3
 801b35c:	f002 fa52 	bl	801d804 <USBD_static_malloc>
 801b360:	0001      	movs	r1, r0
 801b362:	687a      	ldr	r2, [r7, #4]
 801b364:	23ae      	movs	r3, #174	@ 0xae
 801b366:	009b      	lsls	r3, r3, #2
 801b368:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b36a:	687a      	ldr	r2, [r7, #4]
 801b36c:	23ae      	movs	r3, #174	@ 0xae
 801b36e:	009b      	lsls	r3, r3, #2
 801b370:	58d3      	ldr	r3, [r2, r3]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d104      	bne.n	801b380 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b376:	230f      	movs	r3, #15
 801b378:	18fb      	adds	r3, r7, r3
 801b37a:	2201      	movs	r2, #1
 801b37c:	701a      	strb	r2, [r3, #0]
 801b37e:	e02c      	b.n	801b3da <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b380:	687a      	ldr	r2, [r7, #4]
 801b382:	23ae      	movs	r3, #174	@ 0xae
 801b384:	009b      	lsls	r3, r3, #2
 801b386:	58d3      	ldr	r3, [r2, r3]
 801b388:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b38a:	687a      	ldr	r2, [r7, #4]
 801b38c:	23af      	movs	r3, #175	@ 0xaf
 801b38e:	009b      	lsls	r3, r3, #2
 801b390:	58d3      	ldr	r3, [r2, r3]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b396:	68ba      	ldr	r2, [r7, #8]
 801b398:	2385      	movs	r3, #133	@ 0x85
 801b39a:	009b      	lsls	r3, r3, #2
 801b39c:	2100      	movs	r1, #0
 801b39e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b3a0:	68ba      	ldr	r2, [r7, #8]
 801b3a2:	2386      	movs	r3, #134	@ 0x86
 801b3a4:	009b      	lsls	r3, r3, #2
 801b3a6:	2100      	movs	r1, #0
 801b3a8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	7c1b      	ldrb	r3, [r3, #16]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d10a      	bne.n	801b3c8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b3b2:	68ba      	ldr	r2, [r7, #8]
 801b3b4:	2381      	movs	r3, #129	@ 0x81
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	58d2      	ldr	r2, [r2, r3]
 801b3ba:	2380      	movs	r3, #128	@ 0x80
 801b3bc:	009b      	lsls	r3, r3, #2
 801b3be:	6878      	ldr	r0, [r7, #4]
 801b3c0:	2101      	movs	r1, #1
 801b3c2:	f002 f9d1 	bl	801d768 <USBD_LL_PrepareReceive>
 801b3c6:	e008      	b.n	801b3da <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b3c8:	68ba      	ldr	r2, [r7, #8]
 801b3ca:	2381      	movs	r3, #129	@ 0x81
 801b3cc:	009b      	lsls	r3, r3, #2
 801b3ce:	58d2      	ldr	r2, [r2, r3]
 801b3d0:	6878      	ldr	r0, [r7, #4]
 801b3d2:	2340      	movs	r3, #64	@ 0x40
 801b3d4:	2101      	movs	r1, #1
 801b3d6:	f002 f9c7 	bl	801d768 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b3da:	230f      	movs	r3, #15
 801b3dc:	18fb      	adds	r3, r7, r3
 801b3de:	781b      	ldrb	r3, [r3, #0]
}
 801b3e0:	0018      	movs	r0, r3
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	b004      	add	sp, #16
 801b3e6:	bd80      	pop	{r7, pc}

0801b3e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	b084      	sub	sp, #16
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]
 801b3f0:	000a      	movs	r2, r1
 801b3f2:	1cfb      	adds	r3, r7, #3
 801b3f4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b3f6:	230f      	movs	r3, #15
 801b3f8:	18fb      	adds	r3, r7, r3
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	2181      	movs	r1, #129	@ 0x81
 801b402:	0018      	movs	r0, r3
 801b404:	f002 f89c 	bl	801d540 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	2200      	movs	r2, #0
 801b40c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	2101      	movs	r1, #1
 801b412:	0018      	movs	r0, r3
 801b414:	f002 f894 	bl	801d540 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b418:	687a      	ldr	r2, [r7, #4]
 801b41a:	23b6      	movs	r3, #182	@ 0xb6
 801b41c:	005b      	lsls	r3, r3, #1
 801b41e:	2100      	movs	r1, #0
 801b420:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2182      	movs	r1, #130	@ 0x82
 801b426:	0018      	movs	r0, r3
 801b428:	f002 f88a 	bl	801d540 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	2200      	movs	r2, #0
 801b430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b432:	687a      	ldr	r2, [r7, #4]
 801b434:	23ae      	movs	r3, #174	@ 0xae
 801b436:	009b      	lsls	r3, r3, #2
 801b438:	58d3      	ldr	r3, [r2, r3]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d011      	beq.n	801b462 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b43e:	687a      	ldr	r2, [r7, #4]
 801b440:	23af      	movs	r3, #175	@ 0xaf
 801b442:	009b      	lsls	r3, r3, #2
 801b444:	58d3      	ldr	r3, [r2, r3]
 801b446:	685b      	ldr	r3, [r3, #4]
 801b448:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b44a:	687a      	ldr	r2, [r7, #4]
 801b44c:	23ae      	movs	r3, #174	@ 0xae
 801b44e:	009b      	lsls	r3, r3, #2
 801b450:	58d3      	ldr	r3, [r2, r3]
 801b452:	0018      	movs	r0, r3
 801b454:	f002 f9e2 	bl	801d81c <USBD_static_free>
    pdev->pClassData = NULL;
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	23ae      	movs	r3, #174	@ 0xae
 801b45c:	009b      	lsls	r3, r3, #2
 801b45e:	2100      	movs	r1, #0
 801b460:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b462:	230f      	movs	r3, #15
 801b464:	18fb      	adds	r3, r7, r3
 801b466:	781b      	ldrb	r3, [r3, #0]
}
 801b468:	0018      	movs	r0, r3
 801b46a:	46bd      	mov	sp, r7
 801b46c:	b004      	add	sp, #16
 801b46e:	bd80      	pop	{r7, pc}

0801b470 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	b086      	sub	sp, #24
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
 801b478:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b47a:	687a      	ldr	r2, [r7, #4]
 801b47c:	23ae      	movs	r3, #174	@ 0xae
 801b47e:	009b      	lsls	r3, r3, #2
 801b480:	58d3      	ldr	r3, [r2, r3]
 801b482:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b484:	230f      	movs	r3, #15
 801b486:	18fb      	adds	r3, r7, r3
 801b488:	2200      	movs	r2, #0
 801b48a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b48c:	230c      	movs	r3, #12
 801b48e:	18fb      	adds	r3, r7, r3
 801b490:	2200      	movs	r2, #0
 801b492:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b494:	2317      	movs	r3, #23
 801b496:	18fb      	adds	r3, r7, r3
 801b498:	2200      	movs	r2, #0
 801b49a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	781b      	ldrb	r3, [r3, #0]
 801b4a0:	001a      	movs	r2, r3
 801b4a2:	2360      	movs	r3, #96	@ 0x60
 801b4a4:	4013      	ands	r3, r2
 801b4a6:	d03d      	beq.n	801b524 <USBD_CDC_Setup+0xb4>
 801b4a8:	2b20      	cmp	r3, #32
 801b4aa:	d000      	beq.n	801b4ae <USBD_CDC_Setup+0x3e>
 801b4ac:	e094      	b.n	801b5d8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b4ae:	683b      	ldr	r3, [r7, #0]
 801b4b0:	88db      	ldrh	r3, [r3, #6]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d02b      	beq.n	801b50e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b4b6:	683b      	ldr	r3, [r7, #0]
 801b4b8:	781b      	ldrb	r3, [r3, #0]
 801b4ba:	b25b      	sxtb	r3, r3
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	da12      	bge.n	801b4e6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b4c0:	687a      	ldr	r2, [r7, #4]
 801b4c2:	23af      	movs	r3, #175	@ 0xaf
 801b4c4:	009b      	lsls	r3, r3, #2
 801b4c6:	58d3      	ldr	r3, [r2, r3]
 801b4c8:	689b      	ldr	r3, [r3, #8]
 801b4ca:	683a      	ldr	r2, [r7, #0]
 801b4cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b4ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b4d0:	683a      	ldr	r2, [r7, #0]
 801b4d2:	88d2      	ldrh	r2, [r2, #6]
 801b4d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b4d6:	6939      	ldr	r1, [r7, #16]
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	88da      	ldrh	r2, [r3, #6]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	0018      	movs	r0, r3
 801b4e0:	f001 fbaf 	bl	801cc42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b4e4:	e083      	b.n	801b5ee <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b4e6:	683b      	ldr	r3, [r7, #0]
 801b4e8:	7859      	ldrb	r1, [r3, #1]
 801b4ea:	693a      	ldr	r2, [r7, #16]
 801b4ec:	2380      	movs	r3, #128	@ 0x80
 801b4ee:	009b      	lsls	r3, r3, #2
 801b4f0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b4f2:	683b      	ldr	r3, [r7, #0]
 801b4f4:	88db      	ldrh	r3, [r3, #6]
 801b4f6:	b2d9      	uxtb	r1, r3
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	4a40      	ldr	r2, [pc, #256]	@ (801b5fc <USBD_CDC_Setup+0x18c>)
 801b4fc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b4fe:	6939      	ldr	r1, [r7, #16]
 801b500:	683b      	ldr	r3, [r7, #0]
 801b502:	88da      	ldrh	r2, [r3, #6]
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	0018      	movs	r0, r3
 801b508:	f001 fbce 	bl	801cca8 <USBD_CtlPrepareRx>
      break;
 801b50c:	e06f      	b.n	801b5ee <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b50e:	687a      	ldr	r2, [r7, #4]
 801b510:	23af      	movs	r3, #175	@ 0xaf
 801b512:	009b      	lsls	r3, r3, #2
 801b514:	58d3      	ldr	r3, [r2, r3]
 801b516:	689b      	ldr	r3, [r3, #8]
 801b518:	683a      	ldr	r2, [r7, #0]
 801b51a:	7850      	ldrb	r0, [r2, #1]
 801b51c:	6839      	ldr	r1, [r7, #0]
 801b51e:	2200      	movs	r2, #0
 801b520:	4798      	blx	r3
      break;
 801b522:	e064      	b.n	801b5ee <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b524:	683b      	ldr	r3, [r7, #0]
 801b526:	785b      	ldrb	r3, [r3, #1]
 801b528:	2b0b      	cmp	r3, #11
 801b52a:	d037      	beq.n	801b59c <USBD_CDC_Setup+0x12c>
 801b52c:	dc47      	bgt.n	801b5be <USBD_CDC_Setup+0x14e>
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d002      	beq.n	801b538 <USBD_CDC_Setup+0xc8>
 801b532:	2b0a      	cmp	r3, #10
 801b534:	d019      	beq.n	801b56a <USBD_CDC_Setup+0xfa>
 801b536:	e042      	b.n	801b5be <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b538:	687a      	ldr	r2, [r7, #4]
 801b53a:	23a7      	movs	r3, #167	@ 0xa7
 801b53c:	009b      	lsls	r3, r3, #2
 801b53e:	5cd3      	ldrb	r3, [r2, r3]
 801b540:	2b03      	cmp	r3, #3
 801b542:	d107      	bne.n	801b554 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b544:	230c      	movs	r3, #12
 801b546:	18f9      	adds	r1, r7, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2202      	movs	r2, #2
 801b54c:	0018      	movs	r0, r3
 801b54e:	f001 fb78 	bl	801cc42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b552:	e040      	b.n	801b5d6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b554:	683a      	ldr	r2, [r7, #0]
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	0011      	movs	r1, r2
 801b55a:	0018      	movs	r0, r3
 801b55c:	f001 faf3 	bl	801cb46 <USBD_CtlError>
            ret = USBD_FAIL;
 801b560:	2317      	movs	r3, #23
 801b562:	18fb      	adds	r3, r7, r3
 801b564:	2202      	movs	r2, #2
 801b566:	701a      	strb	r2, [r3, #0]
          break;
 801b568:	e035      	b.n	801b5d6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b56a:	687a      	ldr	r2, [r7, #4]
 801b56c:	23a7      	movs	r3, #167	@ 0xa7
 801b56e:	009b      	lsls	r3, r3, #2
 801b570:	5cd3      	ldrb	r3, [r2, r3]
 801b572:	2b03      	cmp	r3, #3
 801b574:	d107      	bne.n	801b586 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b576:	230f      	movs	r3, #15
 801b578:	18f9      	adds	r1, r7, r3
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	2201      	movs	r2, #1
 801b57e:	0018      	movs	r0, r3
 801b580:	f001 fb5f 	bl	801cc42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b584:	e027      	b.n	801b5d6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b586:	683a      	ldr	r2, [r7, #0]
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	0011      	movs	r1, r2
 801b58c:	0018      	movs	r0, r3
 801b58e:	f001 fada 	bl	801cb46 <USBD_CtlError>
            ret = USBD_FAIL;
 801b592:	2317      	movs	r3, #23
 801b594:	18fb      	adds	r3, r7, r3
 801b596:	2202      	movs	r2, #2
 801b598:	701a      	strb	r2, [r3, #0]
          break;
 801b59a:	e01c      	b.n	801b5d6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b59c:	687a      	ldr	r2, [r7, #4]
 801b59e:	23a7      	movs	r3, #167	@ 0xa7
 801b5a0:	009b      	lsls	r3, r3, #2
 801b5a2:	5cd3      	ldrb	r3, [r2, r3]
 801b5a4:	2b03      	cmp	r3, #3
 801b5a6:	d015      	beq.n	801b5d4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b5a8:	683a      	ldr	r2, [r7, #0]
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	0011      	movs	r1, r2
 801b5ae:	0018      	movs	r0, r3
 801b5b0:	f001 fac9 	bl	801cb46 <USBD_CtlError>
            ret = USBD_FAIL;
 801b5b4:	2317      	movs	r3, #23
 801b5b6:	18fb      	adds	r3, r7, r3
 801b5b8:	2202      	movs	r2, #2
 801b5ba:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b5bc:	e00a      	b.n	801b5d4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b5be:	683a      	ldr	r2, [r7, #0]
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	0011      	movs	r1, r2
 801b5c4:	0018      	movs	r0, r3
 801b5c6:	f001 fabe 	bl	801cb46 <USBD_CtlError>
          ret = USBD_FAIL;
 801b5ca:	2317      	movs	r3, #23
 801b5cc:	18fb      	adds	r3, r7, r3
 801b5ce:	2202      	movs	r2, #2
 801b5d0:	701a      	strb	r2, [r3, #0]
          break;
 801b5d2:	e000      	b.n	801b5d6 <USBD_CDC_Setup+0x166>
          break;
 801b5d4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b5d6:	e00a      	b.n	801b5ee <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b5d8:	683a      	ldr	r2, [r7, #0]
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	0011      	movs	r1, r2
 801b5de:	0018      	movs	r0, r3
 801b5e0:	f001 fab1 	bl	801cb46 <USBD_CtlError>
      ret = USBD_FAIL;
 801b5e4:	2317      	movs	r3, #23
 801b5e6:	18fb      	adds	r3, r7, r3
 801b5e8:	2202      	movs	r2, #2
 801b5ea:	701a      	strb	r2, [r3, #0]
      break;
 801b5ec:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b5ee:	2317      	movs	r3, #23
 801b5f0:	18fb      	adds	r3, r7, r3
 801b5f2:	781b      	ldrb	r3, [r3, #0]
}
 801b5f4:	0018      	movs	r0, r3
 801b5f6:	46bd      	mov	sp, r7
 801b5f8:	b006      	add	sp, #24
 801b5fa:	bd80      	pop	{r7, pc}
 801b5fc:	00000201 	.word	0x00000201

0801b600 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b084      	sub	sp, #16
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
 801b608:	000a      	movs	r2, r1
 801b60a:	1cfb      	adds	r3, r7, #3
 801b60c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b60e:	687a      	ldr	r2, [r7, #4]
 801b610:	23ae      	movs	r3, #174	@ 0xae
 801b612:	009b      	lsls	r3, r3, #2
 801b614:	58d3      	ldr	r3, [r2, r3]
 801b616:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b618:	687a      	ldr	r2, [r7, #4]
 801b61a:	23b0      	movs	r3, #176	@ 0xb0
 801b61c:	009b      	lsls	r3, r3, #2
 801b61e:	58d3      	ldr	r3, [r2, r3]
 801b620:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b622:	687a      	ldr	r2, [r7, #4]
 801b624:	23ae      	movs	r3, #174	@ 0xae
 801b626:	009b      	lsls	r3, r3, #2
 801b628:	58d3      	ldr	r3, [r2, r3]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d03e      	beq.n	801b6ac <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b62e:	1cfb      	adds	r3, r7, #3
 801b630:	781a      	ldrb	r2, [r3, #0]
 801b632:	6879      	ldr	r1, [r7, #4]
 801b634:	0013      	movs	r3, r2
 801b636:	009b      	lsls	r3, r3, #2
 801b638:	189b      	adds	r3, r3, r2
 801b63a:	009b      	lsls	r3, r3, #2
 801b63c:	18cb      	adds	r3, r1, r3
 801b63e:	331c      	adds	r3, #28
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d02b      	beq.n	801b69e <USBD_CDC_DataIn+0x9e>
 801b646:	1cfb      	adds	r3, r7, #3
 801b648:	781a      	ldrb	r2, [r3, #0]
 801b64a:	6879      	ldr	r1, [r7, #4]
 801b64c:	0013      	movs	r3, r2
 801b64e:	009b      	lsls	r3, r3, #2
 801b650:	189b      	adds	r3, r3, r2
 801b652:	009b      	lsls	r3, r3, #2
 801b654:	18cb      	adds	r3, r1, r3
 801b656:	331c      	adds	r3, #28
 801b658:	6818      	ldr	r0, [r3, #0]
 801b65a:	1cfb      	adds	r3, r7, #3
 801b65c:	781a      	ldrb	r2, [r3, #0]
 801b65e:	68b9      	ldr	r1, [r7, #8]
 801b660:	0013      	movs	r3, r2
 801b662:	009b      	lsls	r3, r3, #2
 801b664:	189b      	adds	r3, r3, r2
 801b666:	00db      	lsls	r3, r3, #3
 801b668:	18cb      	adds	r3, r1, r3
 801b66a:	3338      	adds	r3, #56	@ 0x38
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	0019      	movs	r1, r3
 801b670:	f7e4 fe1e 	bl	80002b0 <__aeabi_uidivmod>
 801b674:	1e0b      	subs	r3, r1, #0
 801b676:	d112      	bne.n	801b69e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b678:	1cfb      	adds	r3, r7, #3
 801b67a:	781a      	ldrb	r2, [r3, #0]
 801b67c:	6879      	ldr	r1, [r7, #4]
 801b67e:	0013      	movs	r3, r2
 801b680:	009b      	lsls	r3, r3, #2
 801b682:	189b      	adds	r3, r3, r2
 801b684:	009b      	lsls	r3, r3, #2
 801b686:	18cb      	adds	r3, r1, r3
 801b688:	331c      	adds	r3, #28
 801b68a:	2200      	movs	r2, #0
 801b68c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b68e:	1cfb      	adds	r3, r7, #3
 801b690:	7819      	ldrb	r1, [r3, #0]
 801b692:	6878      	ldr	r0, [r7, #4]
 801b694:	2300      	movs	r3, #0
 801b696:	2200      	movs	r2, #0
 801b698:	f002 f82f 	bl	801d6fa <USBD_LL_Transmit>
 801b69c:	e004      	b.n	801b6a8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b69e:	68fa      	ldr	r2, [r7, #12]
 801b6a0:	2385      	movs	r3, #133	@ 0x85
 801b6a2:	009b      	lsls	r3, r3, #2
 801b6a4:	2100      	movs	r1, #0
 801b6a6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b6a8:	2300      	movs	r3, #0
 801b6aa:	e000      	b.n	801b6ae <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b6ac:	2302      	movs	r3, #2
  }
}
 801b6ae:	0018      	movs	r0, r3
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	b004      	add	sp, #16
 801b6b4:	bd80      	pop	{r7, pc}

0801b6b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b6b6:	b580      	push	{r7, lr}
 801b6b8:	b084      	sub	sp, #16
 801b6ba:	af00      	add	r7, sp, #0
 801b6bc:	6078      	str	r0, [r7, #4]
 801b6be:	000a      	movs	r2, r1
 801b6c0:	1cfb      	adds	r3, r7, #3
 801b6c2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	23ae      	movs	r3, #174	@ 0xae
 801b6c8:	009b      	lsls	r3, r3, #2
 801b6ca:	58d3      	ldr	r3, [r2, r3]
 801b6cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b6ce:	1cfb      	adds	r3, r7, #3
 801b6d0:	781a      	ldrb	r2, [r3, #0]
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	0011      	movs	r1, r2
 801b6d6:	0018      	movs	r0, r3
 801b6d8:	f002 f87d 	bl	801d7d6 <USBD_LL_GetRxDataSize>
 801b6dc:	0001      	movs	r1, r0
 801b6de:	68fa      	ldr	r2, [r7, #12]
 801b6e0:	2383      	movs	r3, #131	@ 0x83
 801b6e2:	009b      	lsls	r3, r3, #2
 801b6e4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b6e6:	687a      	ldr	r2, [r7, #4]
 801b6e8:	23ae      	movs	r3, #174	@ 0xae
 801b6ea:	009b      	lsls	r3, r3, #2
 801b6ec:	58d3      	ldr	r3, [r2, r3]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d011      	beq.n	801b716 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b6f2:	687a      	ldr	r2, [r7, #4]
 801b6f4:	23af      	movs	r3, #175	@ 0xaf
 801b6f6:	009b      	lsls	r3, r3, #2
 801b6f8:	58d3      	ldr	r3, [r2, r3]
 801b6fa:	68da      	ldr	r2, [r3, #12]
 801b6fc:	68f9      	ldr	r1, [r7, #12]
 801b6fe:	2381      	movs	r3, #129	@ 0x81
 801b700:	009b      	lsls	r3, r3, #2
 801b702:	58c8      	ldr	r0, [r1, r3]
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	2183      	movs	r1, #131	@ 0x83
 801b708:	0089      	lsls	r1, r1, #2
 801b70a:	468c      	mov	ip, r1
 801b70c:	4463      	add	r3, ip
 801b70e:	0019      	movs	r1, r3
 801b710:	4790      	blx	r2

    return USBD_OK;
 801b712:	2300      	movs	r3, #0
 801b714:	e000      	b.n	801b718 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b716:	2302      	movs	r3, #2
  }
}
 801b718:	0018      	movs	r0, r3
 801b71a:	46bd      	mov	sp, r7
 801b71c:	b004      	add	sp, #16
 801b71e:	bd80      	pop	{r7, pc}

0801b720 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b720:	b590      	push	{r4, r7, lr}
 801b722:	b085      	sub	sp, #20
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b728:	687a      	ldr	r2, [r7, #4]
 801b72a:	23ae      	movs	r3, #174	@ 0xae
 801b72c:	009b      	lsls	r3, r3, #2
 801b72e:	58d3      	ldr	r3, [r2, r3]
 801b730:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b732:	687a      	ldr	r2, [r7, #4]
 801b734:	23af      	movs	r3, #175	@ 0xaf
 801b736:	009b      	lsls	r3, r3, #2
 801b738:	58d3      	ldr	r3, [r2, r3]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d018      	beq.n	801b770 <USBD_CDC_EP0_RxReady+0x50>
 801b73e:	68fa      	ldr	r2, [r7, #12]
 801b740:	2380      	movs	r3, #128	@ 0x80
 801b742:	009b      	lsls	r3, r3, #2
 801b744:	5cd3      	ldrb	r3, [r2, r3]
 801b746:	2bff      	cmp	r3, #255	@ 0xff
 801b748:	d012      	beq.n	801b770 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b74a:	687a      	ldr	r2, [r7, #4]
 801b74c:	23af      	movs	r3, #175	@ 0xaf
 801b74e:	009b      	lsls	r3, r3, #2
 801b750:	58d3      	ldr	r3, [r2, r3]
 801b752:	689b      	ldr	r3, [r3, #8]
 801b754:	68f9      	ldr	r1, [r7, #12]
 801b756:	2280      	movs	r2, #128	@ 0x80
 801b758:	0092      	lsls	r2, r2, #2
 801b75a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b75c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b75e:	68fa      	ldr	r2, [r7, #12]
 801b760:	4c06      	ldr	r4, [pc, #24]	@ (801b77c <USBD_CDC_EP0_RxReady+0x5c>)
 801b762:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b764:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b766:	68fa      	ldr	r2, [r7, #12]
 801b768:	2380      	movs	r3, #128	@ 0x80
 801b76a:	009b      	lsls	r3, r3, #2
 801b76c:	21ff      	movs	r1, #255	@ 0xff
 801b76e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b770:	2300      	movs	r3, #0
}
 801b772:	0018      	movs	r0, r3
 801b774:	46bd      	mov	sp, r7
 801b776:	b005      	add	sp, #20
 801b778:	bd90      	pop	{r4, r7, pc}
 801b77a:	46c0      	nop			@ (mov r8, r8)
 801b77c:	00000201 	.word	0x00000201

0801b780 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b780:	b580      	push	{r7, lr}
 801b782:	b082      	sub	sp, #8
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2243      	movs	r2, #67	@ 0x43
 801b78c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b78e:	4b02      	ldr	r3, [pc, #8]	@ (801b798 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b790:	0018      	movs	r0, r3
 801b792:	46bd      	mov	sp, r7
 801b794:	b002      	add	sp, #8
 801b796:	bd80      	pop	{r7, pc}
 801b798:	20000170 	.word	0x20000170

0801b79c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b082      	sub	sp, #8
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	2243      	movs	r2, #67	@ 0x43
 801b7a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b7aa:	4b02      	ldr	r3, [pc, #8]	@ (801b7b4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b7ac:	0018      	movs	r0, r3
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	b002      	add	sp, #8
 801b7b2:	bd80      	pop	{r7, pc}
 801b7b4:	2000012c 	.word	0x2000012c

0801b7b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b082      	sub	sp, #8
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	2243      	movs	r2, #67	@ 0x43
 801b7c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b7c6:	4b02      	ldr	r3, [pc, #8]	@ (801b7d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b7c8:	0018      	movs	r0, r3
 801b7ca:	46bd      	mov	sp, r7
 801b7cc:	b002      	add	sp, #8
 801b7ce:	bd80      	pop	{r7, pc}
 801b7d0:	200001b4 	.word	0x200001b4

0801b7d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b082      	sub	sp, #8
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	220a      	movs	r2, #10
 801b7e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b7e2:	4b02      	ldr	r3, [pc, #8]	@ (801b7ec <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b7e4:	0018      	movs	r0, r3
 801b7e6:	46bd      	mov	sp, r7
 801b7e8:	b002      	add	sp, #8
 801b7ea:	bd80      	pop	{r7, pc}
 801b7ec:	200000e8 	.word	0x200000e8

0801b7f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	b084      	sub	sp, #16
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
 801b7f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b7fa:	200f      	movs	r0, #15
 801b7fc:	183b      	adds	r3, r7, r0
 801b7fe:	2202      	movs	r2, #2
 801b800:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d007      	beq.n	801b818 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b808:	687a      	ldr	r2, [r7, #4]
 801b80a:	23af      	movs	r3, #175	@ 0xaf
 801b80c:	009b      	lsls	r3, r3, #2
 801b80e:	6839      	ldr	r1, [r7, #0]
 801b810:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b812:	183b      	adds	r3, r7, r0
 801b814:	2200      	movs	r2, #0
 801b816:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b818:	230f      	movs	r3, #15
 801b81a:	18fb      	adds	r3, r7, r3
 801b81c:	781b      	ldrb	r3, [r3, #0]
}
 801b81e:	0018      	movs	r0, r3
 801b820:	46bd      	mov	sp, r7
 801b822:	b004      	add	sp, #16
 801b824:	bd80      	pop	{r7, pc}

0801b826 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b826:	b580      	push	{r7, lr}
 801b828:	b086      	sub	sp, #24
 801b82a:	af00      	add	r7, sp, #0
 801b82c:	60f8      	str	r0, [r7, #12]
 801b82e:	60b9      	str	r1, [r7, #8]
 801b830:	1dbb      	adds	r3, r7, #6
 801b832:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b834:	68fa      	ldr	r2, [r7, #12]
 801b836:	23ae      	movs	r3, #174	@ 0xae
 801b838:	009b      	lsls	r3, r3, #2
 801b83a:	58d3      	ldr	r3, [r2, r3]
 801b83c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b83e:	697a      	ldr	r2, [r7, #20]
 801b840:	2382      	movs	r3, #130	@ 0x82
 801b842:	009b      	lsls	r3, r3, #2
 801b844:	68b9      	ldr	r1, [r7, #8]
 801b846:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b848:	1dbb      	adds	r3, r7, #6
 801b84a:	8819      	ldrh	r1, [r3, #0]
 801b84c:	697a      	ldr	r2, [r7, #20]
 801b84e:	2384      	movs	r3, #132	@ 0x84
 801b850:	009b      	lsls	r3, r3, #2
 801b852:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b854:	2300      	movs	r3, #0
}
 801b856:	0018      	movs	r0, r3
 801b858:	46bd      	mov	sp, r7
 801b85a:	b006      	add	sp, #24
 801b85c:	bd80      	pop	{r7, pc}

0801b85e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b85e:	b580      	push	{r7, lr}
 801b860:	b084      	sub	sp, #16
 801b862:	af00      	add	r7, sp, #0
 801b864:	6078      	str	r0, [r7, #4]
 801b866:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b868:	687a      	ldr	r2, [r7, #4]
 801b86a:	23ae      	movs	r3, #174	@ 0xae
 801b86c:	009b      	lsls	r3, r3, #2
 801b86e:	58d3      	ldr	r3, [r2, r3]
 801b870:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b872:	68fa      	ldr	r2, [r7, #12]
 801b874:	2381      	movs	r3, #129	@ 0x81
 801b876:	009b      	lsls	r3, r3, #2
 801b878:	6839      	ldr	r1, [r7, #0]
 801b87a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b87c:	2300      	movs	r3, #0
}
 801b87e:	0018      	movs	r0, r3
 801b880:	46bd      	mov	sp, r7
 801b882:	b004      	add	sp, #16
 801b884:	bd80      	pop	{r7, pc}

0801b886 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b886:	b580      	push	{r7, lr}
 801b888:	b084      	sub	sp, #16
 801b88a:	af00      	add	r7, sp, #0
 801b88c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b88e:	687a      	ldr	r2, [r7, #4]
 801b890:	23ae      	movs	r3, #174	@ 0xae
 801b892:	009b      	lsls	r3, r3, #2
 801b894:	58d3      	ldr	r3, [r2, r3]
 801b896:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b898:	687a      	ldr	r2, [r7, #4]
 801b89a:	23ae      	movs	r3, #174	@ 0xae
 801b89c:	009b      	lsls	r3, r3, #2
 801b89e:	58d3      	ldr	r3, [r2, r3]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d022      	beq.n	801b8ea <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b8a4:	68fa      	ldr	r2, [r7, #12]
 801b8a6:	2385      	movs	r3, #133	@ 0x85
 801b8a8:	009b      	lsls	r3, r3, #2
 801b8aa:	58d3      	ldr	r3, [r2, r3]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d11a      	bne.n	801b8e6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b8b0:	68fa      	ldr	r2, [r7, #12]
 801b8b2:	2385      	movs	r3, #133	@ 0x85
 801b8b4:	009b      	lsls	r3, r3, #2
 801b8b6:	2101      	movs	r1, #1
 801b8b8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b8ba:	68fa      	ldr	r2, [r7, #12]
 801b8bc:	2384      	movs	r3, #132	@ 0x84
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	58d2      	ldr	r2, [r2, r3]
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b8c6:	68fa      	ldr	r2, [r7, #12]
 801b8c8:	2382      	movs	r3, #130	@ 0x82
 801b8ca:	009b      	lsls	r3, r3, #2
 801b8cc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b8ce:	68fa      	ldr	r2, [r7, #12]
 801b8d0:	2384      	movs	r3, #132	@ 0x84
 801b8d2:	009b      	lsls	r3, r3, #2
 801b8d4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b8d6:	b29b      	uxth	r3, r3
 801b8d8:	6878      	ldr	r0, [r7, #4]
 801b8da:	000a      	movs	r2, r1
 801b8dc:	2181      	movs	r1, #129	@ 0x81
 801b8de:	f001 ff0c 	bl	801d6fa <USBD_LL_Transmit>

      return USBD_OK;
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	e002      	b.n	801b8ec <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b8e6:	2301      	movs	r3, #1
 801b8e8:	e000      	b.n	801b8ec <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b8ea:	2302      	movs	r3, #2
  }
}
 801b8ec:	0018      	movs	r0, r3
 801b8ee:	46bd      	mov	sp, r7
 801b8f0:	b004      	add	sp, #16
 801b8f2:	bd80      	pop	{r7, pc}

0801b8f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b084      	sub	sp, #16
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b8fc:	687a      	ldr	r2, [r7, #4]
 801b8fe:	23ae      	movs	r3, #174	@ 0xae
 801b900:	009b      	lsls	r3, r3, #2
 801b902:	58d3      	ldr	r3, [r2, r3]
 801b904:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b906:	687a      	ldr	r2, [r7, #4]
 801b908:	23ae      	movs	r3, #174	@ 0xae
 801b90a:	009b      	lsls	r3, r3, #2
 801b90c:	58d3      	ldr	r3, [r2, r3]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d019      	beq.n	801b946 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	7c1b      	ldrb	r3, [r3, #16]
 801b916:	2b00      	cmp	r3, #0
 801b918:	d10a      	bne.n	801b930 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b91a:	68fa      	ldr	r2, [r7, #12]
 801b91c:	2381      	movs	r3, #129	@ 0x81
 801b91e:	009b      	lsls	r3, r3, #2
 801b920:	58d2      	ldr	r2, [r2, r3]
 801b922:	2380      	movs	r3, #128	@ 0x80
 801b924:	009b      	lsls	r3, r3, #2
 801b926:	6878      	ldr	r0, [r7, #4]
 801b928:	2101      	movs	r1, #1
 801b92a:	f001 ff1d 	bl	801d768 <USBD_LL_PrepareReceive>
 801b92e:	e008      	b.n	801b942 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b930:	68fa      	ldr	r2, [r7, #12]
 801b932:	2381      	movs	r3, #129	@ 0x81
 801b934:	009b      	lsls	r3, r3, #2
 801b936:	58d2      	ldr	r2, [r2, r3]
 801b938:	6878      	ldr	r0, [r7, #4]
 801b93a:	2340      	movs	r3, #64	@ 0x40
 801b93c:	2101      	movs	r1, #1
 801b93e:	f001 ff13 	bl	801d768 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b942:	2300      	movs	r3, #0
 801b944:	e000      	b.n	801b948 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b946:	2302      	movs	r3, #2
  }
}
 801b948:	0018      	movs	r0, r3
 801b94a:	46bd      	mov	sp, r7
 801b94c:	b004      	add	sp, #16
 801b94e:	bd80      	pop	{r7, pc}

0801b950 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b084      	sub	sp, #16
 801b954:	af00      	add	r7, sp, #0
 801b956:	60f8      	str	r0, [r7, #12]
 801b958:	60b9      	str	r1, [r7, #8]
 801b95a:	1dfb      	adds	r3, r7, #7
 801b95c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	2b00      	cmp	r3, #0
 801b962:	d101      	bne.n	801b968 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b964:	2302      	movs	r3, #2
 801b966:	e020      	b.n	801b9aa <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b968:	68fa      	ldr	r2, [r7, #12]
 801b96a:	23ad      	movs	r3, #173	@ 0xad
 801b96c:	009b      	lsls	r3, r3, #2
 801b96e:	58d3      	ldr	r3, [r2, r3]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d004      	beq.n	801b97e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b974:	68fa      	ldr	r2, [r7, #12]
 801b976:	23ad      	movs	r3, #173	@ 0xad
 801b978:	009b      	lsls	r3, r3, #2
 801b97a:	2100      	movs	r1, #0
 801b97c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	2b00      	cmp	r3, #0
 801b982:	d004      	beq.n	801b98e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b984:	68fa      	ldr	r2, [r7, #12]
 801b986:	23ac      	movs	r3, #172	@ 0xac
 801b988:	009b      	lsls	r3, r3, #2
 801b98a:	68b9      	ldr	r1, [r7, #8]
 801b98c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b98e:	68fa      	ldr	r2, [r7, #12]
 801b990:	23a7      	movs	r3, #167	@ 0xa7
 801b992:	009b      	lsls	r3, r3, #2
 801b994:	2101      	movs	r1, #1
 801b996:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	1dfa      	adds	r2, r7, #7
 801b99c:	7812      	ldrb	r2, [r2, #0]
 801b99e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	0018      	movs	r0, r3
 801b9a4:	f001 fd0c 	bl	801d3c0 <USBD_LL_Init>

  return USBD_OK;
 801b9a8:	2300      	movs	r3, #0
}
 801b9aa:	0018      	movs	r0, r3
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	b004      	add	sp, #16
 801b9b0:	bd80      	pop	{r7, pc}

0801b9b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b9b2:	b580      	push	{r7, lr}
 801b9b4:	b084      	sub	sp, #16
 801b9b6:	af00      	add	r7, sp, #0
 801b9b8:	6078      	str	r0, [r7, #4]
 801b9ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b9bc:	200f      	movs	r0, #15
 801b9be:	183b      	adds	r3, r7, r0
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b9c4:	683b      	ldr	r3, [r7, #0]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d008      	beq.n	801b9dc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b9ca:	687a      	ldr	r2, [r7, #4]
 801b9cc:	23ad      	movs	r3, #173	@ 0xad
 801b9ce:	009b      	lsls	r3, r3, #2
 801b9d0:	6839      	ldr	r1, [r7, #0]
 801b9d2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b9d4:	183b      	adds	r3, r7, r0
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	701a      	strb	r2, [r3, #0]
 801b9da:	e003      	b.n	801b9e4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b9dc:	230f      	movs	r3, #15
 801b9de:	18fb      	adds	r3, r7, r3
 801b9e0:	2202      	movs	r2, #2
 801b9e2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b9e4:	230f      	movs	r3, #15
 801b9e6:	18fb      	adds	r3, r7, r3
 801b9e8:	781b      	ldrb	r3, [r3, #0]
}
 801b9ea:	0018      	movs	r0, r3
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	b004      	add	sp, #16
 801b9f0:	bd80      	pop	{r7, pc}

0801b9f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b9f2:	b580      	push	{r7, lr}
 801b9f4:	b082      	sub	sp, #8
 801b9f6:	af00      	add	r7, sp, #0
 801b9f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	0018      	movs	r0, r3
 801b9fe:	f001 fd43 	bl	801d488 <USBD_LL_Start>

  return USBD_OK;
 801ba02:	2300      	movs	r3, #0
}
 801ba04:	0018      	movs	r0, r3
 801ba06:	46bd      	mov	sp, r7
 801ba08:	b002      	add	sp, #8
 801ba0a:	bd80      	pop	{r7, pc}

0801ba0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b082      	sub	sp, #8
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ba14:	2300      	movs	r3, #0
}
 801ba16:	0018      	movs	r0, r3
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	b002      	add	sp, #8
 801ba1c:	bd80      	pop	{r7, pc}

0801ba1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ba1e:	b590      	push	{r4, r7, lr}
 801ba20:	b085      	sub	sp, #20
 801ba22:	af00      	add	r7, sp, #0
 801ba24:	6078      	str	r0, [r7, #4]
 801ba26:	000a      	movs	r2, r1
 801ba28:	1cfb      	adds	r3, r7, #3
 801ba2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ba2c:	240f      	movs	r4, #15
 801ba2e:	193b      	adds	r3, r7, r4
 801ba30:	2202      	movs	r2, #2
 801ba32:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ba34:	687a      	ldr	r2, [r7, #4]
 801ba36:	23ad      	movs	r3, #173	@ 0xad
 801ba38:	009b      	lsls	r3, r3, #2
 801ba3a:	58d3      	ldr	r3, [r2, r3]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d00e      	beq.n	801ba5e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ba40:	687a      	ldr	r2, [r7, #4]
 801ba42:	23ad      	movs	r3, #173	@ 0xad
 801ba44:	009b      	lsls	r3, r3, #2
 801ba46:	58d3      	ldr	r3, [r2, r3]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	1cfa      	adds	r2, r7, #3
 801ba4c:	7811      	ldrb	r1, [r2, #0]
 801ba4e:	687a      	ldr	r2, [r7, #4]
 801ba50:	0010      	movs	r0, r2
 801ba52:	4798      	blx	r3
 801ba54:	1e03      	subs	r3, r0, #0
 801ba56:	d102      	bne.n	801ba5e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801ba58:	193b      	adds	r3, r7, r4
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801ba5e:	230f      	movs	r3, #15
 801ba60:	18fb      	adds	r3, r7, r3
 801ba62:	781b      	ldrb	r3, [r3, #0]
}
 801ba64:	0018      	movs	r0, r3
 801ba66:	46bd      	mov	sp, r7
 801ba68:	b005      	add	sp, #20
 801ba6a:	bd90      	pop	{r4, r7, pc}

0801ba6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ba6c:	b580      	push	{r7, lr}
 801ba6e:	b082      	sub	sp, #8
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
 801ba74:	000a      	movs	r2, r1
 801ba76:	1cfb      	adds	r3, r7, #3
 801ba78:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801ba7a:	687a      	ldr	r2, [r7, #4]
 801ba7c:	23ad      	movs	r3, #173	@ 0xad
 801ba7e:	009b      	lsls	r3, r3, #2
 801ba80:	58d3      	ldr	r3, [r2, r3]
 801ba82:	685b      	ldr	r3, [r3, #4]
 801ba84:	1cfa      	adds	r2, r7, #3
 801ba86:	7811      	ldrb	r1, [r2, #0]
 801ba88:	687a      	ldr	r2, [r7, #4]
 801ba8a:	0010      	movs	r0, r2
 801ba8c:	4798      	blx	r3

  return USBD_OK;
 801ba8e:	2300      	movs	r3, #0
}
 801ba90:	0018      	movs	r0, r3
 801ba92:	46bd      	mov	sp, r7
 801ba94:	b002      	add	sp, #8
 801ba96:	bd80      	pop	{r7, pc}

0801ba98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b082      	sub	sp, #8
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
 801baa0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	22aa      	movs	r2, #170	@ 0xaa
 801baa6:	0092      	lsls	r2, r2, #2
 801baa8:	4694      	mov	ip, r2
 801baaa:	4463      	add	r3, ip
 801baac:	683a      	ldr	r2, [r7, #0]
 801baae:	0011      	movs	r1, r2
 801bab0:	0018      	movs	r0, r3
 801bab2:	f001 f810 	bl	801cad6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801bab6:	687a      	ldr	r2, [r7, #4]
 801bab8:	23a5      	movs	r3, #165	@ 0xa5
 801baba:	009b      	lsls	r3, r3, #2
 801babc:	2101      	movs	r1, #1
 801babe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	4a23      	ldr	r2, [pc, #140]	@ (801bb50 <USBD_LL_SetupStage+0xb8>)
 801bac4:	5a9b      	ldrh	r3, [r3, r2]
 801bac6:	0019      	movs	r1, r3
 801bac8:	687a      	ldr	r2, [r7, #4]
 801baca:	23a6      	movs	r3, #166	@ 0xa6
 801bacc:	009b      	lsls	r3, r3, #2
 801bace:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801bad0:	687a      	ldr	r2, [r7, #4]
 801bad2:	23aa      	movs	r3, #170	@ 0xaa
 801bad4:	009b      	lsls	r3, r3, #2
 801bad6:	5cd3      	ldrb	r3, [r2, r3]
 801bad8:	001a      	movs	r2, r3
 801bada:	231f      	movs	r3, #31
 801badc:	4013      	ands	r3, r2
 801bade:	2b02      	cmp	r3, #2
 801bae0:	d019      	beq.n	801bb16 <USBD_LL_SetupStage+0x7e>
 801bae2:	d822      	bhi.n	801bb2a <USBD_LL_SetupStage+0x92>
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d002      	beq.n	801baee <USBD_LL_SetupStage+0x56>
 801bae8:	2b01      	cmp	r3, #1
 801baea:	d00a      	beq.n	801bb02 <USBD_LL_SetupStage+0x6a>
 801baec:	e01d      	b.n	801bb2a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	22aa      	movs	r2, #170	@ 0xaa
 801baf2:	0092      	lsls	r2, r2, #2
 801baf4:	189a      	adds	r2, r3, r2
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	0011      	movs	r1, r2
 801bafa:	0018      	movs	r0, r3
 801bafc:	f000 fa10 	bl	801bf20 <USBD_StdDevReq>
      break;
 801bb00:	e020      	b.n	801bb44 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	22aa      	movs	r2, #170	@ 0xaa
 801bb06:	0092      	lsls	r2, r2, #2
 801bb08:	189a      	adds	r2, r3, r2
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	0011      	movs	r1, r2
 801bb0e:	0018      	movs	r0, r3
 801bb10:	f000 fa78 	bl	801c004 <USBD_StdItfReq>
      break;
 801bb14:	e016      	b.n	801bb44 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	22aa      	movs	r2, #170	@ 0xaa
 801bb1a:	0092      	lsls	r2, r2, #2
 801bb1c:	189a      	adds	r2, r3, r2
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	0011      	movs	r1, r2
 801bb22:	0018      	movs	r0, r3
 801bb24:	f000 fac5 	bl	801c0b2 <USBD_StdEPReq>
      break;
 801bb28:	e00c      	b.n	801bb44 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801bb2a:	687a      	ldr	r2, [r7, #4]
 801bb2c:	23aa      	movs	r3, #170	@ 0xaa
 801bb2e:	009b      	lsls	r3, r3, #2
 801bb30:	5cd3      	ldrb	r3, [r2, r3]
 801bb32:	227f      	movs	r2, #127	@ 0x7f
 801bb34:	4393      	bics	r3, r2
 801bb36:	b2da      	uxtb	r2, r3
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	0011      	movs	r1, r2
 801bb3c:	0018      	movs	r0, r3
 801bb3e:	f001 fd2a 	bl	801d596 <USBD_LL_StallEP>
      break;
 801bb42:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bb44:	2300      	movs	r3, #0
}
 801bb46:	0018      	movs	r0, r3
 801bb48:	46bd      	mov	sp, r7
 801bb4a:	b002      	add	sp, #8
 801bb4c:	bd80      	pop	{r7, pc}
 801bb4e:	46c0      	nop			@ (mov r8, r8)
 801bb50:	000002ae 	.word	0x000002ae

0801bb54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b086      	sub	sp, #24
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	60f8      	str	r0, [r7, #12]
 801bb5c:	607a      	str	r2, [r7, #4]
 801bb5e:	200b      	movs	r0, #11
 801bb60:	183b      	adds	r3, r7, r0
 801bb62:	1c0a      	adds	r2, r1, #0
 801bb64:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bb66:	183b      	adds	r3, r7, r0
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d154      	bne.n	801bc18 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	3355      	adds	r3, #85	@ 0x55
 801bb72:	33ff      	adds	r3, #255	@ 0xff
 801bb74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801bb76:	68fa      	ldr	r2, [r7, #12]
 801bb78:	23a5      	movs	r3, #165	@ 0xa5
 801bb7a:	009b      	lsls	r3, r3, #2
 801bb7c:	58d3      	ldr	r3, [r2, r3]
 801bb7e:	2b03      	cmp	r3, #3
 801bb80:	d139      	bne.n	801bbf6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801bb82:	697b      	ldr	r3, [r7, #20]
 801bb84:	68da      	ldr	r2, [r3, #12]
 801bb86:	697b      	ldr	r3, [r7, #20]
 801bb88:	691b      	ldr	r3, [r3, #16]
 801bb8a:	429a      	cmp	r2, r3
 801bb8c:	d919      	bls.n	801bbc2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	68da      	ldr	r2, [r3, #12]
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	691b      	ldr	r3, [r3, #16]
 801bb96:	1ad2      	subs	r2, r2, r3
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	68da      	ldr	r2, [r3, #12]
 801bba0:	697b      	ldr	r3, [r7, #20]
 801bba2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bba4:	429a      	cmp	r2, r3
 801bba6:	d203      	bcs.n	801bbb0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801bbac:	b29b      	uxth	r3, r3
 801bbae:	e002      	b.n	801bbb6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801bbb4:	b29b      	uxth	r3, r3
 801bbb6:	6879      	ldr	r1, [r7, #4]
 801bbb8:	68f8      	ldr	r0, [r7, #12]
 801bbba:	001a      	movs	r2, r3
 801bbbc:	f001 f898 	bl	801ccf0 <USBD_CtlContinueRx>
 801bbc0:	e045      	b.n	801bc4e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bbc2:	68fa      	ldr	r2, [r7, #12]
 801bbc4:	23ad      	movs	r3, #173	@ 0xad
 801bbc6:	009b      	lsls	r3, r3, #2
 801bbc8:	58d3      	ldr	r3, [r2, r3]
 801bbca:	691b      	ldr	r3, [r3, #16]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d00d      	beq.n	801bbec <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bbd0:	68fa      	ldr	r2, [r7, #12]
 801bbd2:	23a7      	movs	r3, #167	@ 0xa7
 801bbd4:	009b      	lsls	r3, r3, #2
 801bbd6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bbd8:	2b03      	cmp	r3, #3
 801bbda:	d107      	bne.n	801bbec <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801bbdc:	68fa      	ldr	r2, [r7, #12]
 801bbde:	23ad      	movs	r3, #173	@ 0xad
 801bbe0:	009b      	lsls	r3, r3, #2
 801bbe2:	58d3      	ldr	r3, [r2, r3]
 801bbe4:	691b      	ldr	r3, [r3, #16]
 801bbe6:	68fa      	ldr	r2, [r7, #12]
 801bbe8:	0010      	movs	r0, r2
 801bbea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	0018      	movs	r0, r3
 801bbf0:	f001 f891 	bl	801cd16 <USBD_CtlSendStatus>
 801bbf4:	e02b      	b.n	801bc4e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801bbf6:	68fa      	ldr	r2, [r7, #12]
 801bbf8:	23a5      	movs	r3, #165	@ 0xa5
 801bbfa:	009b      	lsls	r3, r3, #2
 801bbfc:	58d3      	ldr	r3, [r2, r3]
 801bbfe:	2b05      	cmp	r3, #5
 801bc00:	d125      	bne.n	801bc4e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801bc02:	68fa      	ldr	r2, [r7, #12]
 801bc04:	23a5      	movs	r3, #165	@ 0xa5
 801bc06:	009b      	lsls	r3, r3, #2
 801bc08:	2100      	movs	r1, #0
 801bc0a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	2100      	movs	r1, #0
 801bc10:	0018      	movs	r0, r3
 801bc12:	f001 fcc0 	bl	801d596 <USBD_LL_StallEP>
 801bc16:	e01a      	b.n	801bc4e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bc18:	68fa      	ldr	r2, [r7, #12]
 801bc1a:	23ad      	movs	r3, #173	@ 0xad
 801bc1c:	009b      	lsls	r3, r3, #2
 801bc1e:	58d3      	ldr	r3, [r2, r3]
 801bc20:	699b      	ldr	r3, [r3, #24]
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d011      	beq.n	801bc4a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bc26:	68fa      	ldr	r2, [r7, #12]
 801bc28:	23a7      	movs	r3, #167	@ 0xa7
 801bc2a:	009b      	lsls	r3, r3, #2
 801bc2c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bc2e:	2b03      	cmp	r3, #3
 801bc30:	d10b      	bne.n	801bc4a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bc32:	68fa      	ldr	r2, [r7, #12]
 801bc34:	23ad      	movs	r3, #173	@ 0xad
 801bc36:	009b      	lsls	r3, r3, #2
 801bc38:	58d3      	ldr	r3, [r2, r3]
 801bc3a:	699b      	ldr	r3, [r3, #24]
 801bc3c:	220b      	movs	r2, #11
 801bc3e:	18ba      	adds	r2, r7, r2
 801bc40:	7811      	ldrb	r1, [r2, #0]
 801bc42:	68fa      	ldr	r2, [r7, #12]
 801bc44:	0010      	movs	r0, r2
 801bc46:	4798      	blx	r3
 801bc48:	e001      	b.n	801bc4e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bc4a:	2302      	movs	r3, #2
 801bc4c:	e000      	b.n	801bc50 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bc4e:	2300      	movs	r3, #0
}
 801bc50:	0018      	movs	r0, r3
 801bc52:	46bd      	mov	sp, r7
 801bc54:	b006      	add	sp, #24
 801bc56:	bd80      	pop	{r7, pc}

0801bc58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b086      	sub	sp, #24
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	60f8      	str	r0, [r7, #12]
 801bc60:	607a      	str	r2, [r7, #4]
 801bc62:	200b      	movs	r0, #11
 801bc64:	183b      	adds	r3, r7, r0
 801bc66:	1c0a      	adds	r2, r1, #0
 801bc68:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bc6a:	183b      	adds	r3, r7, r0
 801bc6c:	781b      	ldrb	r3, [r3, #0]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d000      	beq.n	801bc74 <USBD_LL_DataInStage+0x1c>
 801bc72:	e08e      	b.n	801bd92 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	3314      	adds	r3, #20
 801bc78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bc7a:	68fa      	ldr	r2, [r7, #12]
 801bc7c:	23a5      	movs	r3, #165	@ 0xa5
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	58d3      	ldr	r3, [r2, r3]
 801bc82:	2b02      	cmp	r3, #2
 801bc84:	d164      	bne.n	801bd50 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bc86:	697b      	ldr	r3, [r7, #20]
 801bc88:	68da      	ldr	r2, [r3, #12]
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	691b      	ldr	r3, [r3, #16]
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	d915      	bls.n	801bcbe <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bc92:	697b      	ldr	r3, [r7, #20]
 801bc94:	68da      	ldr	r2, [r3, #12]
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	691b      	ldr	r3, [r3, #16]
 801bc9a:	1ad2      	subs	r2, r2, r3
 801bc9c:	697b      	ldr	r3, [r7, #20]
 801bc9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	68db      	ldr	r3, [r3, #12]
 801bca4:	b29a      	uxth	r2, r3
 801bca6:	6879      	ldr	r1, [r7, #4]
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	0018      	movs	r0, r3
 801bcac:	f000 ffe9 	bl	801cc82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bcb0:	68f8      	ldr	r0, [r7, #12]
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	2200      	movs	r2, #0
 801bcb6:	2100      	movs	r1, #0
 801bcb8:	f001 fd56 	bl	801d768 <USBD_LL_PrepareReceive>
 801bcbc:	e059      	b.n	801bd72 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	689a      	ldr	r2, [r3, #8]
 801bcc2:	697b      	ldr	r3, [r7, #20]
 801bcc4:	691b      	ldr	r3, [r3, #16]
 801bcc6:	0019      	movs	r1, r3
 801bcc8:	0010      	movs	r0, r2
 801bcca:	f7e4 faf1 	bl	80002b0 <__aeabi_uidivmod>
 801bcce:	1e0b      	subs	r3, r1, #0
 801bcd0:	d11f      	bne.n	801bd12 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bcd2:	697b      	ldr	r3, [r7, #20]
 801bcd4:	689a      	ldr	r2, [r3, #8]
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bcda:	429a      	cmp	r2, r3
 801bcdc:	d319      	bcc.n	801bd12 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bcde:	697b      	ldr	r3, [r7, #20]
 801bce0:	689a      	ldr	r2, [r3, #8]
 801bce2:	68f9      	ldr	r1, [r7, #12]
 801bce4:	23a6      	movs	r3, #166	@ 0xa6
 801bce6:	009b      	lsls	r3, r3, #2
 801bce8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bcea:	429a      	cmp	r2, r3
 801bcec:	d211      	bcs.n	801bd12 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	2100      	movs	r1, #0
 801bcf4:	0018      	movs	r0, r3
 801bcf6:	f000 ffc4 	bl	801cc82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bcfa:	68fa      	ldr	r2, [r7, #12]
 801bcfc:	23a6      	movs	r3, #166	@ 0xa6
 801bcfe:	009b      	lsls	r3, r3, #2
 801bd00:	2100      	movs	r1, #0
 801bd02:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bd04:	68f8      	ldr	r0, [r7, #12]
 801bd06:	2300      	movs	r3, #0
 801bd08:	2200      	movs	r2, #0
 801bd0a:	2100      	movs	r1, #0
 801bd0c:	f001 fd2c 	bl	801d768 <USBD_LL_PrepareReceive>
 801bd10:	e02f      	b.n	801bd72 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bd12:	68fa      	ldr	r2, [r7, #12]
 801bd14:	23ad      	movs	r3, #173	@ 0xad
 801bd16:	009b      	lsls	r3, r3, #2
 801bd18:	58d3      	ldr	r3, [r2, r3]
 801bd1a:	68db      	ldr	r3, [r3, #12]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d00d      	beq.n	801bd3c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bd20:	68fa      	ldr	r2, [r7, #12]
 801bd22:	23a7      	movs	r3, #167	@ 0xa7
 801bd24:	009b      	lsls	r3, r3, #2
 801bd26:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bd28:	2b03      	cmp	r3, #3
 801bd2a:	d107      	bne.n	801bd3c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bd2c:	68fa      	ldr	r2, [r7, #12]
 801bd2e:	23ad      	movs	r3, #173	@ 0xad
 801bd30:	009b      	lsls	r3, r3, #2
 801bd32:	58d3      	ldr	r3, [r2, r3]
 801bd34:	68db      	ldr	r3, [r3, #12]
 801bd36:	68fa      	ldr	r2, [r7, #12]
 801bd38:	0010      	movs	r0, r2
 801bd3a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	2180      	movs	r1, #128	@ 0x80
 801bd40:	0018      	movs	r0, r3
 801bd42:	f001 fc28 	bl	801d596 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	0018      	movs	r0, r3
 801bd4a:	f000 fff8 	bl	801cd3e <USBD_CtlReceiveStatus>
 801bd4e:	e010      	b.n	801bd72 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bd50:	68fa      	ldr	r2, [r7, #12]
 801bd52:	23a5      	movs	r3, #165	@ 0xa5
 801bd54:	009b      	lsls	r3, r3, #2
 801bd56:	58d3      	ldr	r3, [r2, r3]
 801bd58:	2b04      	cmp	r3, #4
 801bd5a:	d005      	beq.n	801bd68 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bd5c:	68fa      	ldr	r2, [r7, #12]
 801bd5e:	23a5      	movs	r3, #165	@ 0xa5
 801bd60:	009b      	lsls	r3, r3, #2
 801bd62:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d104      	bne.n	801bd72 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	2180      	movs	r1, #128	@ 0x80
 801bd6c:	0018      	movs	r0, r3
 801bd6e:	f001 fc12 	bl	801d596 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bd72:	68fa      	ldr	r2, [r7, #12]
 801bd74:	23a8      	movs	r3, #168	@ 0xa8
 801bd76:	009b      	lsls	r3, r3, #2
 801bd78:	5cd3      	ldrb	r3, [r2, r3]
 801bd7a:	2b01      	cmp	r3, #1
 801bd7c:	d124      	bne.n	801bdc8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	0018      	movs	r0, r3
 801bd82:	f7ff fe43 	bl	801ba0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bd86:	68fa      	ldr	r2, [r7, #12]
 801bd88:	23a8      	movs	r3, #168	@ 0xa8
 801bd8a:	009b      	lsls	r3, r3, #2
 801bd8c:	2100      	movs	r1, #0
 801bd8e:	54d1      	strb	r1, [r2, r3]
 801bd90:	e01a      	b.n	801bdc8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bd92:	68fa      	ldr	r2, [r7, #12]
 801bd94:	23ad      	movs	r3, #173	@ 0xad
 801bd96:	009b      	lsls	r3, r3, #2
 801bd98:	58d3      	ldr	r3, [r2, r3]
 801bd9a:	695b      	ldr	r3, [r3, #20]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d011      	beq.n	801bdc4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bda0:	68fa      	ldr	r2, [r7, #12]
 801bda2:	23a7      	movs	r3, #167	@ 0xa7
 801bda4:	009b      	lsls	r3, r3, #2
 801bda6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bda8:	2b03      	cmp	r3, #3
 801bdaa:	d10b      	bne.n	801bdc4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bdac:	68fa      	ldr	r2, [r7, #12]
 801bdae:	23ad      	movs	r3, #173	@ 0xad
 801bdb0:	009b      	lsls	r3, r3, #2
 801bdb2:	58d3      	ldr	r3, [r2, r3]
 801bdb4:	695b      	ldr	r3, [r3, #20]
 801bdb6:	220b      	movs	r2, #11
 801bdb8:	18ba      	adds	r2, r7, r2
 801bdba:	7811      	ldrb	r1, [r2, #0]
 801bdbc:	68fa      	ldr	r2, [r7, #12]
 801bdbe:	0010      	movs	r0, r2
 801bdc0:	4798      	blx	r3
 801bdc2:	e001      	b.n	801bdc8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bdc4:	2302      	movs	r3, #2
 801bdc6:	e000      	b.n	801bdca <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bdc8:	2300      	movs	r3, #0
}
 801bdca:	0018      	movs	r0, r3
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	b006      	add	sp, #24
 801bdd0:	bd80      	pop	{r7, pc}

0801bdd2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bdd2:	b580      	push	{r7, lr}
 801bdd4:	b082      	sub	sp, #8
 801bdd6:	af00      	add	r7, sp, #0
 801bdd8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bdda:	6878      	ldr	r0, [r7, #4]
 801bddc:	2340      	movs	r3, #64	@ 0x40
 801bdde:	2200      	movs	r2, #0
 801bde0:	2100      	movs	r1, #0
 801bde2:	f001 fb76 	bl	801d4d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bde6:	687a      	ldr	r2, [r7, #4]
 801bde8:	23ac      	movs	r3, #172	@ 0xac
 801bdea:	005b      	lsls	r3, r3, #1
 801bdec:	2101      	movs	r1, #1
 801bdee:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bdf0:	687a      	ldr	r2, [r7, #4]
 801bdf2:	23b2      	movs	r3, #178	@ 0xb2
 801bdf4:	005b      	lsls	r3, r3, #1
 801bdf6:	2140      	movs	r1, #64	@ 0x40
 801bdf8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bdfa:	6878      	ldr	r0, [r7, #4]
 801bdfc:	2340      	movs	r3, #64	@ 0x40
 801bdfe:	2200      	movs	r2, #0
 801be00:	2180      	movs	r1, #128	@ 0x80
 801be02:	f001 fb66 	bl	801d4d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	2201      	movs	r2, #1
 801be0a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	2240      	movs	r2, #64	@ 0x40
 801be10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801be12:	687a      	ldr	r2, [r7, #4]
 801be14:	23a7      	movs	r3, #167	@ 0xa7
 801be16:	009b      	lsls	r3, r3, #2
 801be18:	2101      	movs	r1, #1
 801be1a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801be1c:	687a      	ldr	r2, [r7, #4]
 801be1e:	23a5      	movs	r3, #165	@ 0xa5
 801be20:	009b      	lsls	r3, r3, #2
 801be22:	2100      	movs	r1, #0
 801be24:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	2200      	movs	r2, #0
 801be2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801be2c:	687a      	ldr	r2, [r7, #4]
 801be2e:	23a9      	movs	r3, #169	@ 0xa9
 801be30:	009b      	lsls	r3, r3, #2
 801be32:	2100      	movs	r1, #0
 801be34:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801be36:	687a      	ldr	r2, [r7, #4]
 801be38:	23ae      	movs	r3, #174	@ 0xae
 801be3a:	009b      	lsls	r3, r3, #2
 801be3c:	58d3      	ldr	r3, [r2, r3]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d00a      	beq.n	801be58 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801be42:	687a      	ldr	r2, [r7, #4]
 801be44:	23ad      	movs	r3, #173	@ 0xad
 801be46:	009b      	lsls	r3, r3, #2
 801be48:	58d3      	ldr	r3, [r2, r3]
 801be4a:	685a      	ldr	r2, [r3, #4]
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	685b      	ldr	r3, [r3, #4]
 801be50:	b2d9      	uxtb	r1, r3
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	0018      	movs	r0, r3
 801be56:	4790      	blx	r2
  }

  return USBD_OK;
 801be58:	2300      	movs	r3, #0
}
 801be5a:	0018      	movs	r0, r3
 801be5c:	46bd      	mov	sp, r7
 801be5e:	b002      	add	sp, #8
 801be60:	bd80      	pop	{r7, pc}

0801be62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801be62:	b580      	push	{r7, lr}
 801be64:	b082      	sub	sp, #8
 801be66:	af00      	add	r7, sp, #0
 801be68:	6078      	str	r0, [r7, #4]
 801be6a:	000a      	movs	r2, r1
 801be6c:	1cfb      	adds	r3, r7, #3
 801be6e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	1cfa      	adds	r2, r7, #3
 801be74:	7812      	ldrb	r2, [r2, #0]
 801be76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801be78:	2300      	movs	r3, #0
}
 801be7a:	0018      	movs	r0, r3
 801be7c:	46bd      	mov	sp, r7
 801be7e:	b002      	add	sp, #8
 801be80:	bd80      	pop	{r7, pc}
	...

0801be84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b082      	sub	sp, #8
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801be8c:	687a      	ldr	r2, [r7, #4]
 801be8e:	23a7      	movs	r3, #167	@ 0xa7
 801be90:	009b      	lsls	r3, r3, #2
 801be92:	5cd1      	ldrb	r1, [r2, r3]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	4a06      	ldr	r2, [pc, #24]	@ (801beb0 <USBD_LL_Suspend+0x2c>)
 801be98:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801be9a:	687a      	ldr	r2, [r7, #4]
 801be9c:	23a7      	movs	r3, #167	@ 0xa7
 801be9e:	009b      	lsls	r3, r3, #2
 801bea0:	2104      	movs	r1, #4
 801bea2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bea4:	2300      	movs	r3, #0
}
 801bea6:	0018      	movs	r0, r3
 801bea8:	46bd      	mov	sp, r7
 801beaa:	b002      	add	sp, #8
 801beac:	bd80      	pop	{r7, pc}
 801beae:	46c0      	nop			@ (mov r8, r8)
 801beb0:	0000029d 	.word	0x0000029d

0801beb4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b082      	sub	sp, #8
 801beb8:	af00      	add	r7, sp, #0
 801beba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bebc:	687a      	ldr	r2, [r7, #4]
 801bebe:	23a7      	movs	r3, #167	@ 0xa7
 801bec0:	009b      	lsls	r3, r3, #2
 801bec2:	5cd3      	ldrb	r3, [r2, r3]
 801bec4:	2b04      	cmp	r3, #4
 801bec6:	d106      	bne.n	801bed6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	4a05      	ldr	r2, [pc, #20]	@ (801bee0 <USBD_LL_Resume+0x2c>)
 801becc:	5c99      	ldrb	r1, [r3, r2]
 801bece:	687a      	ldr	r2, [r7, #4]
 801bed0:	23a7      	movs	r3, #167	@ 0xa7
 801bed2:	009b      	lsls	r3, r3, #2
 801bed4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bed6:	2300      	movs	r3, #0
}
 801bed8:	0018      	movs	r0, r3
 801beda:	46bd      	mov	sp, r7
 801bedc:	b002      	add	sp, #8
 801bede:	bd80      	pop	{r7, pc}
 801bee0:	0000029d 	.word	0x0000029d

0801bee4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bee4:	b580      	push	{r7, lr}
 801bee6:	b082      	sub	sp, #8
 801bee8:	af00      	add	r7, sp, #0
 801beea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801beec:	687a      	ldr	r2, [r7, #4]
 801beee:	23a7      	movs	r3, #167	@ 0xa7
 801bef0:	009b      	lsls	r3, r3, #2
 801bef2:	5cd3      	ldrb	r3, [r2, r3]
 801bef4:	2b03      	cmp	r3, #3
 801bef6:	d10e      	bne.n	801bf16 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bef8:	687a      	ldr	r2, [r7, #4]
 801befa:	23ad      	movs	r3, #173	@ 0xad
 801befc:	009b      	lsls	r3, r3, #2
 801befe:	58d3      	ldr	r3, [r2, r3]
 801bf00:	69db      	ldr	r3, [r3, #28]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d007      	beq.n	801bf16 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bf06:	687a      	ldr	r2, [r7, #4]
 801bf08:	23ad      	movs	r3, #173	@ 0xad
 801bf0a:	009b      	lsls	r3, r3, #2
 801bf0c:	58d3      	ldr	r3, [r2, r3]
 801bf0e:	69db      	ldr	r3, [r3, #28]
 801bf10:	687a      	ldr	r2, [r7, #4]
 801bf12:	0010      	movs	r0, r2
 801bf14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bf16:	2300      	movs	r3, #0
}
 801bf18:	0018      	movs	r0, r3
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	b002      	add	sp, #8
 801bf1e:	bd80      	pop	{r7, pc}

0801bf20 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b084      	sub	sp, #16
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
 801bf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bf2a:	230f      	movs	r3, #15
 801bf2c:	18fb      	adds	r3, r7, r3
 801bf2e:	2200      	movs	r2, #0
 801bf30:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	781b      	ldrb	r3, [r3, #0]
 801bf36:	001a      	movs	r2, r3
 801bf38:	2360      	movs	r3, #96	@ 0x60
 801bf3a:	4013      	ands	r3, r2
 801bf3c:	2b40      	cmp	r3, #64	@ 0x40
 801bf3e:	d004      	beq.n	801bf4a <USBD_StdDevReq+0x2a>
 801bf40:	d84f      	bhi.n	801bfe2 <USBD_StdDevReq+0xc2>
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d00b      	beq.n	801bf5e <USBD_StdDevReq+0x3e>
 801bf46:	2b20      	cmp	r3, #32
 801bf48:	d14b      	bne.n	801bfe2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bf4a:	687a      	ldr	r2, [r7, #4]
 801bf4c:	23ad      	movs	r3, #173	@ 0xad
 801bf4e:	009b      	lsls	r3, r3, #2
 801bf50:	58d3      	ldr	r3, [r2, r3]
 801bf52:	689b      	ldr	r3, [r3, #8]
 801bf54:	6839      	ldr	r1, [r7, #0]
 801bf56:	687a      	ldr	r2, [r7, #4]
 801bf58:	0010      	movs	r0, r2
 801bf5a:	4798      	blx	r3
      break;
 801bf5c:	e048      	b.n	801bff0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bf5e:	683b      	ldr	r3, [r7, #0]
 801bf60:	785b      	ldrb	r3, [r3, #1]
 801bf62:	2b09      	cmp	r3, #9
 801bf64:	d835      	bhi.n	801bfd2 <USBD_StdDevReq+0xb2>
 801bf66:	009a      	lsls	r2, r3, #2
 801bf68:	4b25      	ldr	r3, [pc, #148]	@ (801c000 <USBD_StdDevReq+0xe0>)
 801bf6a:	18d3      	adds	r3, r2, r3
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bf70:	683a      	ldr	r2, [r7, #0]
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	0011      	movs	r1, r2
 801bf76:	0018      	movs	r0, r3
 801bf78:	f000 fa52 	bl	801c420 <USBD_GetDescriptor>
          break;
 801bf7c:	e030      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bf7e:	683a      	ldr	r2, [r7, #0]
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	0011      	movs	r1, r2
 801bf84:	0018      	movs	r0, r3
 801bf86:	f000 fbfd 	bl	801c784 <USBD_SetAddress>
          break;
 801bf8a:	e029      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bf8c:	683a      	ldr	r2, [r7, #0]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	0011      	movs	r1, r2
 801bf92:	0018      	movs	r0, r3
 801bf94:	f000 fc4a 	bl	801c82c <USBD_SetConfig>
          break;
 801bf98:	e022      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bf9a:	683a      	ldr	r2, [r7, #0]
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	0011      	movs	r1, r2
 801bfa0:	0018      	movs	r0, r3
 801bfa2:	f000 fce7 	bl	801c974 <USBD_GetConfig>
          break;
 801bfa6:	e01b      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bfa8:	683a      	ldr	r2, [r7, #0]
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	0011      	movs	r1, r2
 801bfae:	0018      	movs	r0, r3
 801bfb0:	f000 fd1b 	bl	801c9ea <USBD_GetStatus>
          break;
 801bfb4:	e014      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bfb6:	683a      	ldr	r2, [r7, #0]
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	0011      	movs	r1, r2
 801bfbc:	0018      	movs	r0, r3
 801bfbe:	f000 fd4e 	bl	801ca5e <USBD_SetFeature>
          break;
 801bfc2:	e00d      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801bfc4:	683a      	ldr	r2, [r7, #0]
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	0011      	movs	r1, r2
 801bfca:	0018      	movs	r0, r3
 801bfcc:	f000 fd5d 	bl	801ca8a <USBD_ClrFeature>
          break;
 801bfd0:	e006      	b.n	801bfe0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801bfd2:	683a      	ldr	r2, [r7, #0]
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	0011      	movs	r1, r2
 801bfd8:	0018      	movs	r0, r3
 801bfda:	f000 fdb4 	bl	801cb46 <USBD_CtlError>
          break;
 801bfde:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bfe0:	e006      	b.n	801bff0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801bfe2:	683a      	ldr	r2, [r7, #0]
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	0011      	movs	r1, r2
 801bfe8:	0018      	movs	r0, r3
 801bfea:	f000 fdac 	bl	801cb46 <USBD_CtlError>
      break;
 801bfee:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bff0:	230f      	movs	r3, #15
 801bff2:	18fb      	adds	r3, r7, r3
 801bff4:	781b      	ldrb	r3, [r3, #0]
}
 801bff6:	0018      	movs	r0, r3
 801bff8:	46bd      	mov	sp, r7
 801bffa:	b004      	add	sp, #16
 801bffc:	bd80      	pop	{r7, pc}
 801bffe:	46c0      	nop			@ (mov r8, r8)
 801c000:	08025868 	.word	0x08025868

0801c004 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c004:	b5b0      	push	{r4, r5, r7, lr}
 801c006:	b084      	sub	sp, #16
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
 801c00c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c00e:	230f      	movs	r3, #15
 801c010:	18fb      	adds	r3, r7, r3
 801c012:	2200      	movs	r2, #0
 801c014:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	001a      	movs	r2, r3
 801c01c:	2360      	movs	r3, #96	@ 0x60
 801c01e:	4013      	ands	r3, r2
 801c020:	2b40      	cmp	r3, #64	@ 0x40
 801c022:	d004      	beq.n	801c02e <USBD_StdItfReq+0x2a>
 801c024:	d839      	bhi.n	801c09a <USBD_StdItfReq+0x96>
 801c026:	2b00      	cmp	r3, #0
 801c028:	d001      	beq.n	801c02e <USBD_StdItfReq+0x2a>
 801c02a:	2b20      	cmp	r3, #32
 801c02c:	d135      	bne.n	801c09a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c02e:	687a      	ldr	r2, [r7, #4]
 801c030:	23a7      	movs	r3, #167	@ 0xa7
 801c032:	009b      	lsls	r3, r3, #2
 801c034:	5cd3      	ldrb	r3, [r2, r3]
 801c036:	3b01      	subs	r3, #1
 801c038:	2b02      	cmp	r3, #2
 801c03a:	d825      	bhi.n	801c088 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c03c:	683b      	ldr	r3, [r7, #0]
 801c03e:	889b      	ldrh	r3, [r3, #4]
 801c040:	b2db      	uxtb	r3, r3
 801c042:	2b01      	cmp	r3, #1
 801c044:	d819      	bhi.n	801c07a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c046:	687a      	ldr	r2, [r7, #4]
 801c048:	23ad      	movs	r3, #173	@ 0xad
 801c04a:	009b      	lsls	r3, r3, #2
 801c04c:	58d3      	ldr	r3, [r2, r3]
 801c04e:	689b      	ldr	r3, [r3, #8]
 801c050:	250f      	movs	r5, #15
 801c052:	197c      	adds	r4, r7, r5
 801c054:	6839      	ldr	r1, [r7, #0]
 801c056:	687a      	ldr	r2, [r7, #4]
 801c058:	0010      	movs	r0, r2
 801c05a:	4798      	blx	r3
 801c05c:	0003      	movs	r3, r0
 801c05e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c060:	683b      	ldr	r3, [r7, #0]
 801c062:	88db      	ldrh	r3, [r3, #6]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d116      	bne.n	801c096 <USBD_StdItfReq+0x92>
 801c068:	197b      	adds	r3, r7, r5
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d112      	bne.n	801c096 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	0018      	movs	r0, r3
 801c074:	f000 fe4f 	bl	801cd16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c078:	e00d      	b.n	801c096 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c07a:	683a      	ldr	r2, [r7, #0]
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	0011      	movs	r1, r2
 801c080:	0018      	movs	r0, r3
 801c082:	f000 fd60 	bl	801cb46 <USBD_CtlError>
          break;
 801c086:	e006      	b.n	801c096 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c088:	683a      	ldr	r2, [r7, #0]
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	0011      	movs	r1, r2
 801c08e:	0018      	movs	r0, r3
 801c090:	f000 fd59 	bl	801cb46 <USBD_CtlError>
          break;
 801c094:	e000      	b.n	801c098 <USBD_StdItfReq+0x94>
          break;
 801c096:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c098:	e006      	b.n	801c0a8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c09a:	683a      	ldr	r2, [r7, #0]
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	0011      	movs	r1, r2
 801c0a0:	0018      	movs	r0, r3
 801c0a2:	f000 fd50 	bl	801cb46 <USBD_CtlError>
      break;
 801c0a6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c0a8:	2300      	movs	r3, #0
}
 801c0aa:	0018      	movs	r0, r3
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	b004      	add	sp, #16
 801c0b0:	bdb0      	pop	{r4, r5, r7, pc}

0801c0b2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c0b2:	b5b0      	push	{r4, r5, r7, lr}
 801c0b4:	b084      	sub	sp, #16
 801c0b6:	af00      	add	r7, sp, #0
 801c0b8:	6078      	str	r0, [r7, #4]
 801c0ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c0bc:	230f      	movs	r3, #15
 801c0be:	18fb      	adds	r3, r7, r3
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	889a      	ldrh	r2, [r3, #4]
 801c0c8:	230e      	movs	r3, #14
 801c0ca:	18fb      	adds	r3, r7, r3
 801c0cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	781b      	ldrb	r3, [r3, #0]
 801c0d2:	001a      	movs	r2, r3
 801c0d4:	2360      	movs	r3, #96	@ 0x60
 801c0d6:	4013      	ands	r3, r2
 801c0d8:	2b40      	cmp	r3, #64	@ 0x40
 801c0da:	d006      	beq.n	801c0ea <USBD_StdEPReq+0x38>
 801c0dc:	d900      	bls.n	801c0e0 <USBD_StdEPReq+0x2e>
 801c0de:	e190      	b.n	801c402 <USBD_StdEPReq+0x350>
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d00c      	beq.n	801c0fe <USBD_StdEPReq+0x4c>
 801c0e4:	2b20      	cmp	r3, #32
 801c0e6:	d000      	beq.n	801c0ea <USBD_StdEPReq+0x38>
 801c0e8:	e18b      	b.n	801c402 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c0ea:	687a      	ldr	r2, [r7, #4]
 801c0ec:	23ad      	movs	r3, #173	@ 0xad
 801c0ee:	009b      	lsls	r3, r3, #2
 801c0f0:	58d3      	ldr	r3, [r2, r3]
 801c0f2:	689b      	ldr	r3, [r3, #8]
 801c0f4:	6839      	ldr	r1, [r7, #0]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	0010      	movs	r0, r2
 801c0fa:	4798      	blx	r3
      break;
 801c0fc:	e188      	b.n	801c410 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c0fe:	683b      	ldr	r3, [r7, #0]
 801c100:	781b      	ldrb	r3, [r3, #0]
 801c102:	001a      	movs	r2, r3
 801c104:	2360      	movs	r3, #96	@ 0x60
 801c106:	4013      	ands	r3, r2
 801c108:	2b20      	cmp	r3, #32
 801c10a:	d10f      	bne.n	801c12c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	23ad      	movs	r3, #173	@ 0xad
 801c110:	009b      	lsls	r3, r3, #2
 801c112:	58d3      	ldr	r3, [r2, r3]
 801c114:	689b      	ldr	r3, [r3, #8]
 801c116:	250f      	movs	r5, #15
 801c118:	197c      	adds	r4, r7, r5
 801c11a:	6839      	ldr	r1, [r7, #0]
 801c11c:	687a      	ldr	r2, [r7, #4]
 801c11e:	0010      	movs	r0, r2
 801c120:	4798      	blx	r3
 801c122:	0003      	movs	r3, r0
 801c124:	7023      	strb	r3, [r4, #0]

        return ret;
 801c126:	197b      	adds	r3, r7, r5
 801c128:	781b      	ldrb	r3, [r3, #0]
 801c12a:	e174      	b.n	801c416 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c12c:	683b      	ldr	r3, [r7, #0]
 801c12e:	785b      	ldrb	r3, [r3, #1]
 801c130:	2b03      	cmp	r3, #3
 801c132:	d007      	beq.n	801c144 <USBD_StdEPReq+0x92>
 801c134:	dd00      	ble.n	801c138 <USBD_StdEPReq+0x86>
 801c136:	e15c      	b.n	801c3f2 <USBD_StdEPReq+0x340>
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d100      	bne.n	801c13e <USBD_StdEPReq+0x8c>
 801c13c:	e092      	b.n	801c264 <USBD_StdEPReq+0x1b2>
 801c13e:	2b01      	cmp	r3, #1
 801c140:	d04b      	beq.n	801c1da <USBD_StdEPReq+0x128>
 801c142:	e156      	b.n	801c3f2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c144:	687a      	ldr	r2, [r7, #4]
 801c146:	23a7      	movs	r3, #167	@ 0xa7
 801c148:	009b      	lsls	r3, r3, #2
 801c14a:	5cd3      	ldrb	r3, [r2, r3]
 801c14c:	2b02      	cmp	r3, #2
 801c14e:	d002      	beq.n	801c156 <USBD_StdEPReq+0xa4>
 801c150:	2b03      	cmp	r3, #3
 801c152:	d01d      	beq.n	801c190 <USBD_StdEPReq+0xde>
 801c154:	e039      	b.n	801c1ca <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c156:	220e      	movs	r2, #14
 801c158:	18bb      	adds	r3, r7, r2
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d010      	beq.n	801c182 <USBD_StdEPReq+0xd0>
 801c160:	18bb      	adds	r3, r7, r2
 801c162:	781b      	ldrb	r3, [r3, #0]
 801c164:	2b80      	cmp	r3, #128	@ 0x80
 801c166:	d00c      	beq.n	801c182 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c168:	18bb      	adds	r3, r7, r2
 801c16a:	781a      	ldrb	r2, [r3, #0]
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	0011      	movs	r1, r2
 801c170:	0018      	movs	r0, r3
 801c172:	f001 fa10 	bl	801d596 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	2180      	movs	r1, #128	@ 0x80
 801c17a:	0018      	movs	r0, r3
 801c17c:	f001 fa0b 	bl	801d596 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c180:	e02a      	b.n	801c1d8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c182:	683a      	ldr	r2, [r7, #0]
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	0011      	movs	r1, r2
 801c188:	0018      	movs	r0, r3
 801c18a:	f000 fcdc 	bl	801cb46 <USBD_CtlError>
              break;
 801c18e:	e023      	b.n	801c1d8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c190:	683b      	ldr	r3, [r7, #0]
 801c192:	885b      	ldrh	r3, [r3, #2]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d113      	bne.n	801c1c0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c198:	220e      	movs	r2, #14
 801c19a:	18bb      	adds	r3, r7, r2
 801c19c:	781b      	ldrb	r3, [r3, #0]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d00e      	beq.n	801c1c0 <USBD_StdEPReq+0x10e>
 801c1a2:	18bb      	adds	r3, r7, r2
 801c1a4:	781b      	ldrb	r3, [r3, #0]
 801c1a6:	2b80      	cmp	r3, #128	@ 0x80
 801c1a8:	d00a      	beq.n	801c1c0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c1aa:	683b      	ldr	r3, [r7, #0]
 801c1ac:	88db      	ldrh	r3, [r3, #6]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d106      	bne.n	801c1c0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c1b2:	18bb      	adds	r3, r7, r2
 801c1b4:	781a      	ldrb	r2, [r3, #0]
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	0011      	movs	r1, r2
 801c1ba:	0018      	movs	r0, r3
 801c1bc:	f001 f9eb 	bl	801d596 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	0018      	movs	r0, r3
 801c1c4:	f000 fda7 	bl	801cd16 <USBD_CtlSendStatus>

              break;
 801c1c8:	e006      	b.n	801c1d8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c1ca:	683a      	ldr	r2, [r7, #0]
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	0011      	movs	r1, r2
 801c1d0:	0018      	movs	r0, r3
 801c1d2:	f000 fcb8 	bl	801cb46 <USBD_CtlError>
              break;
 801c1d6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c1d8:	e112      	b.n	801c400 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c1da:	687a      	ldr	r2, [r7, #4]
 801c1dc:	23a7      	movs	r3, #167	@ 0xa7
 801c1de:	009b      	lsls	r3, r3, #2
 801c1e0:	5cd3      	ldrb	r3, [r2, r3]
 801c1e2:	2b02      	cmp	r3, #2
 801c1e4:	d002      	beq.n	801c1ec <USBD_StdEPReq+0x13a>
 801c1e6:	2b03      	cmp	r3, #3
 801c1e8:	d01d      	beq.n	801c226 <USBD_StdEPReq+0x174>
 801c1ea:	e032      	b.n	801c252 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c1ec:	220e      	movs	r2, #14
 801c1ee:	18bb      	adds	r3, r7, r2
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d010      	beq.n	801c218 <USBD_StdEPReq+0x166>
 801c1f6:	18bb      	adds	r3, r7, r2
 801c1f8:	781b      	ldrb	r3, [r3, #0]
 801c1fa:	2b80      	cmp	r3, #128	@ 0x80
 801c1fc:	d00c      	beq.n	801c218 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c1fe:	18bb      	adds	r3, r7, r2
 801c200:	781a      	ldrb	r2, [r3, #0]
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	0011      	movs	r1, r2
 801c206:	0018      	movs	r0, r3
 801c208:	f001 f9c5 	bl	801d596 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	2180      	movs	r1, #128	@ 0x80
 801c210:	0018      	movs	r0, r3
 801c212:	f001 f9c0 	bl	801d596 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c216:	e024      	b.n	801c262 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c218:	683a      	ldr	r2, [r7, #0]
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	0011      	movs	r1, r2
 801c21e:	0018      	movs	r0, r3
 801c220:	f000 fc91 	bl	801cb46 <USBD_CtlError>
              break;
 801c224:	e01d      	b.n	801c262 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c226:	683b      	ldr	r3, [r7, #0]
 801c228:	885b      	ldrh	r3, [r3, #2]
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d118      	bne.n	801c260 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c22e:	210e      	movs	r1, #14
 801c230:	187b      	adds	r3, r7, r1
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	227f      	movs	r2, #127	@ 0x7f
 801c236:	4013      	ands	r3, r2
 801c238:	d006      	beq.n	801c248 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c23a:	187b      	adds	r3, r7, r1
 801c23c:	781a      	ldrb	r2, [r3, #0]
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	0011      	movs	r1, r2
 801c242:	0018      	movs	r0, r3
 801c244:	f001 f9d2 	bl	801d5ec <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	0018      	movs	r0, r3
 801c24c:	f000 fd63 	bl	801cd16 <USBD_CtlSendStatus>
              }
              break;
 801c250:	e006      	b.n	801c260 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c252:	683a      	ldr	r2, [r7, #0]
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	0011      	movs	r1, r2
 801c258:	0018      	movs	r0, r3
 801c25a:	f000 fc74 	bl	801cb46 <USBD_CtlError>
              break;
 801c25e:	e000      	b.n	801c262 <USBD_StdEPReq+0x1b0>
              break;
 801c260:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c262:	e0cd      	b.n	801c400 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c264:	687a      	ldr	r2, [r7, #4]
 801c266:	23a7      	movs	r3, #167	@ 0xa7
 801c268:	009b      	lsls	r3, r3, #2
 801c26a:	5cd3      	ldrb	r3, [r2, r3]
 801c26c:	2b02      	cmp	r3, #2
 801c26e:	d002      	beq.n	801c276 <USBD_StdEPReq+0x1c4>
 801c270:	2b03      	cmp	r3, #3
 801c272:	d03c      	beq.n	801c2ee <USBD_StdEPReq+0x23c>
 801c274:	e0b5      	b.n	801c3e2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c276:	220e      	movs	r2, #14
 801c278:	18bb      	adds	r3, r7, r2
 801c27a:	781b      	ldrb	r3, [r3, #0]
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d00a      	beq.n	801c296 <USBD_StdEPReq+0x1e4>
 801c280:	18bb      	adds	r3, r7, r2
 801c282:	781b      	ldrb	r3, [r3, #0]
 801c284:	2b80      	cmp	r3, #128	@ 0x80
 801c286:	d006      	beq.n	801c296 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c288:	683a      	ldr	r2, [r7, #0]
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	0011      	movs	r1, r2
 801c28e:	0018      	movs	r0, r3
 801c290:	f000 fc59 	bl	801cb46 <USBD_CtlError>
                break;
 801c294:	e0ac      	b.n	801c3f0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c296:	220e      	movs	r2, #14
 801c298:	18bb      	adds	r3, r7, r2
 801c29a:	781b      	ldrb	r3, [r3, #0]
 801c29c:	b25b      	sxtb	r3, r3
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	da0c      	bge.n	801c2bc <USBD_StdEPReq+0x20a>
 801c2a2:	18bb      	adds	r3, r7, r2
 801c2a4:	781b      	ldrb	r3, [r3, #0]
 801c2a6:	227f      	movs	r2, #127	@ 0x7f
 801c2a8:	401a      	ands	r2, r3
 801c2aa:	0013      	movs	r3, r2
 801c2ac:	009b      	lsls	r3, r3, #2
 801c2ae:	189b      	adds	r3, r3, r2
 801c2b0:	009b      	lsls	r3, r3, #2
 801c2b2:	3310      	adds	r3, #16
 801c2b4:	687a      	ldr	r2, [r7, #4]
 801c2b6:	18d3      	adds	r3, r2, r3
 801c2b8:	3304      	adds	r3, #4
 801c2ba:	e00d      	b.n	801c2d8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c2bc:	230e      	movs	r3, #14
 801c2be:	18fb      	adds	r3, r7, r3
 801c2c0:	781b      	ldrb	r3, [r3, #0]
 801c2c2:	227f      	movs	r2, #127	@ 0x7f
 801c2c4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c2c6:	0013      	movs	r3, r2
 801c2c8:	009b      	lsls	r3, r3, #2
 801c2ca:	189b      	adds	r3, r3, r2
 801c2cc:	009b      	lsls	r3, r3, #2
 801c2ce:	3351      	adds	r3, #81	@ 0x51
 801c2d0:	33ff      	adds	r3, #255	@ 0xff
 801c2d2:	687a      	ldr	r2, [r7, #4]
 801c2d4:	18d3      	adds	r3, r2, r3
 801c2d6:	3304      	adds	r3, #4
 801c2d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c2da:	68bb      	ldr	r3, [r7, #8]
 801c2dc:	2200      	movs	r2, #0
 801c2de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c2e0:	68b9      	ldr	r1, [r7, #8]
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	2202      	movs	r2, #2
 801c2e6:	0018      	movs	r0, r3
 801c2e8:	f000 fcab 	bl	801cc42 <USBD_CtlSendData>
              break;
 801c2ec:	e080      	b.n	801c3f0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c2ee:	220e      	movs	r2, #14
 801c2f0:	18bb      	adds	r3, r7, r2
 801c2f2:	781b      	ldrb	r3, [r3, #0]
 801c2f4:	b25b      	sxtb	r3, r3
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	da14      	bge.n	801c324 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c2fa:	18bb      	adds	r3, r7, r2
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	220f      	movs	r2, #15
 801c300:	401a      	ands	r2, r3
 801c302:	6879      	ldr	r1, [r7, #4]
 801c304:	0013      	movs	r3, r2
 801c306:	009b      	lsls	r3, r3, #2
 801c308:	189b      	adds	r3, r3, r2
 801c30a:	009b      	lsls	r3, r3, #2
 801c30c:	18cb      	adds	r3, r1, r3
 801c30e:	3318      	adds	r3, #24
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d11e      	bne.n	801c354 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c316:	683a      	ldr	r2, [r7, #0]
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	0011      	movs	r1, r2
 801c31c:	0018      	movs	r0, r3
 801c31e:	f000 fc12 	bl	801cb46 <USBD_CtlError>
                  break;
 801c322:	e065      	b.n	801c3f0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c324:	230e      	movs	r3, #14
 801c326:	18fb      	adds	r3, r7, r3
 801c328:	781b      	ldrb	r3, [r3, #0]
 801c32a:	220f      	movs	r2, #15
 801c32c:	401a      	ands	r2, r3
 801c32e:	6878      	ldr	r0, [r7, #4]
 801c330:	23ac      	movs	r3, #172	@ 0xac
 801c332:	0059      	lsls	r1, r3, #1
 801c334:	0013      	movs	r3, r2
 801c336:	009b      	lsls	r3, r3, #2
 801c338:	189b      	adds	r3, r3, r2
 801c33a:	009b      	lsls	r3, r3, #2
 801c33c:	18c3      	adds	r3, r0, r3
 801c33e:	185b      	adds	r3, r3, r1
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d106      	bne.n	801c354 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c346:	683a      	ldr	r2, [r7, #0]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	0011      	movs	r1, r2
 801c34c:	0018      	movs	r0, r3
 801c34e:	f000 fbfa 	bl	801cb46 <USBD_CtlError>
                  break;
 801c352:	e04d      	b.n	801c3f0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c354:	220e      	movs	r2, #14
 801c356:	18bb      	adds	r3, r7, r2
 801c358:	781b      	ldrb	r3, [r3, #0]
 801c35a:	b25b      	sxtb	r3, r3
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	da0c      	bge.n	801c37a <USBD_StdEPReq+0x2c8>
 801c360:	18bb      	adds	r3, r7, r2
 801c362:	781b      	ldrb	r3, [r3, #0]
 801c364:	227f      	movs	r2, #127	@ 0x7f
 801c366:	401a      	ands	r2, r3
 801c368:	0013      	movs	r3, r2
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	189b      	adds	r3, r3, r2
 801c36e:	009b      	lsls	r3, r3, #2
 801c370:	3310      	adds	r3, #16
 801c372:	687a      	ldr	r2, [r7, #4]
 801c374:	18d3      	adds	r3, r2, r3
 801c376:	3304      	adds	r3, #4
 801c378:	e00d      	b.n	801c396 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c37a:	230e      	movs	r3, #14
 801c37c:	18fb      	adds	r3, r7, r3
 801c37e:	781b      	ldrb	r3, [r3, #0]
 801c380:	227f      	movs	r2, #127	@ 0x7f
 801c382:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c384:	0013      	movs	r3, r2
 801c386:	009b      	lsls	r3, r3, #2
 801c388:	189b      	adds	r3, r3, r2
 801c38a:	009b      	lsls	r3, r3, #2
 801c38c:	3351      	adds	r3, #81	@ 0x51
 801c38e:	33ff      	adds	r3, #255	@ 0xff
 801c390:	687a      	ldr	r2, [r7, #4]
 801c392:	18d3      	adds	r3, r2, r3
 801c394:	3304      	adds	r3, #4
 801c396:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c398:	220e      	movs	r2, #14
 801c39a:	18bb      	adds	r3, r7, r2
 801c39c:	781b      	ldrb	r3, [r3, #0]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d003      	beq.n	801c3aa <USBD_StdEPReq+0x2f8>
 801c3a2:	18bb      	adds	r3, r7, r2
 801c3a4:	781b      	ldrb	r3, [r3, #0]
 801c3a6:	2b80      	cmp	r3, #128	@ 0x80
 801c3a8:	d103      	bne.n	801c3b2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	601a      	str	r2, [r3, #0]
 801c3b0:	e010      	b.n	801c3d4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c3b2:	230e      	movs	r3, #14
 801c3b4:	18fb      	adds	r3, r7, r3
 801c3b6:	781a      	ldrb	r2, [r3, #0]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	0011      	movs	r1, r2
 801c3bc:	0018      	movs	r0, r3
 801c3be:	f001 f940 	bl	801d642 <USBD_LL_IsStallEP>
 801c3c2:	1e03      	subs	r3, r0, #0
 801c3c4:	d003      	beq.n	801c3ce <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c3c6:	68bb      	ldr	r3, [r7, #8]
 801c3c8:	2201      	movs	r2, #1
 801c3ca:	601a      	str	r2, [r3, #0]
 801c3cc:	e002      	b.n	801c3d4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c3ce:	68bb      	ldr	r3, [r7, #8]
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c3d4:	68b9      	ldr	r1, [r7, #8]
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	2202      	movs	r2, #2
 801c3da:	0018      	movs	r0, r3
 801c3dc:	f000 fc31 	bl	801cc42 <USBD_CtlSendData>
              break;
 801c3e0:	e006      	b.n	801c3f0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c3e2:	683a      	ldr	r2, [r7, #0]
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	0011      	movs	r1, r2
 801c3e8:	0018      	movs	r0, r3
 801c3ea:	f000 fbac 	bl	801cb46 <USBD_CtlError>
              break;
 801c3ee:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c3f0:	e006      	b.n	801c400 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c3f2:	683a      	ldr	r2, [r7, #0]
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	0011      	movs	r1, r2
 801c3f8:	0018      	movs	r0, r3
 801c3fa:	f000 fba4 	bl	801cb46 <USBD_CtlError>
          break;
 801c3fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c400:	e006      	b.n	801c410 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c402:	683a      	ldr	r2, [r7, #0]
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	0011      	movs	r1, r2
 801c408:	0018      	movs	r0, r3
 801c40a:	f000 fb9c 	bl	801cb46 <USBD_CtlError>
      break;
 801c40e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c410:	230f      	movs	r3, #15
 801c412:	18fb      	adds	r3, r7, r3
 801c414:	781b      	ldrb	r3, [r3, #0]
}
 801c416:	0018      	movs	r0, r3
 801c418:	46bd      	mov	sp, r7
 801c41a:	b004      	add	sp, #16
 801c41c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c420 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b084      	sub	sp, #16
 801c424:	af00      	add	r7, sp, #0
 801c426:	6078      	str	r0, [r7, #4]
 801c428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c42a:	2308      	movs	r3, #8
 801c42c:	18fb      	adds	r3, r7, r3
 801c42e:	2200      	movs	r2, #0
 801c430:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c432:	2300      	movs	r3, #0
 801c434:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c436:	230b      	movs	r3, #11
 801c438:	18fb      	adds	r3, r7, r3
 801c43a:	2200      	movs	r2, #0
 801c43c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	885b      	ldrh	r3, [r3, #2]
 801c442:	0a1b      	lsrs	r3, r3, #8
 801c444:	b29b      	uxth	r3, r3
 801c446:	2b07      	cmp	r3, #7
 801c448:	d900      	bls.n	801c44c <USBD_GetDescriptor+0x2c>
 801c44a:	e159      	b.n	801c700 <USBD_GetDescriptor+0x2e0>
 801c44c:	009a      	lsls	r2, r3, #2
 801c44e:	4bcb      	ldr	r3, [pc, #812]	@ (801c77c <USBD_GetDescriptor+0x35c>)
 801c450:	18d3      	adds	r3, r2, r3
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c456:	687a      	ldr	r2, [r7, #4]
 801c458:	23ac      	movs	r3, #172	@ 0xac
 801c45a:	009b      	lsls	r3, r3, #2
 801c45c:	58d3      	ldr	r3, [r2, r3]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	7c12      	ldrb	r2, [r2, #16]
 801c464:	2108      	movs	r1, #8
 801c466:	1879      	adds	r1, r7, r1
 801c468:	0010      	movs	r0, r2
 801c46a:	4798      	blx	r3
 801c46c:	0003      	movs	r3, r0
 801c46e:	60fb      	str	r3, [r7, #12]
      break;
 801c470:	e153      	b.n	801c71a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	7c1b      	ldrb	r3, [r3, #16]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d10f      	bne.n	801c49a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c47a:	687a      	ldr	r2, [r7, #4]
 801c47c:	23ad      	movs	r3, #173	@ 0xad
 801c47e:	009b      	lsls	r3, r3, #2
 801c480:	58d3      	ldr	r3, [r2, r3]
 801c482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c484:	2208      	movs	r2, #8
 801c486:	18ba      	adds	r2, r7, r2
 801c488:	0010      	movs	r0, r2
 801c48a:	4798      	blx	r3
 801c48c:	0003      	movs	r3, r0
 801c48e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	3301      	adds	r3, #1
 801c494:	2202      	movs	r2, #2
 801c496:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c498:	e13f      	b.n	801c71a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c49a:	687a      	ldr	r2, [r7, #4]
 801c49c:	23ad      	movs	r3, #173	@ 0xad
 801c49e:	009b      	lsls	r3, r3, #2
 801c4a0:	58d3      	ldr	r3, [r2, r3]
 801c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4a4:	2208      	movs	r2, #8
 801c4a6:	18ba      	adds	r2, r7, r2
 801c4a8:	0010      	movs	r0, r2
 801c4aa:	4798      	blx	r3
 801c4ac:	0003      	movs	r3, r0
 801c4ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	3301      	adds	r3, #1
 801c4b4:	2202      	movs	r2, #2
 801c4b6:	701a      	strb	r2, [r3, #0]
      break;
 801c4b8:	e12f      	b.n	801c71a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c4ba:	683b      	ldr	r3, [r7, #0]
 801c4bc:	885b      	ldrh	r3, [r3, #2]
 801c4be:	b2db      	uxtb	r3, r3
 801c4c0:	2b05      	cmp	r3, #5
 801c4c2:	d900      	bls.n	801c4c6 <USBD_GetDescriptor+0xa6>
 801c4c4:	e0d0      	b.n	801c668 <USBD_GetDescriptor+0x248>
 801c4c6:	009a      	lsls	r2, r3, #2
 801c4c8:	4bad      	ldr	r3, [pc, #692]	@ (801c780 <USBD_GetDescriptor+0x360>)
 801c4ca:	18d3      	adds	r3, r2, r3
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c4d0:	687a      	ldr	r2, [r7, #4]
 801c4d2:	23ac      	movs	r3, #172	@ 0xac
 801c4d4:	009b      	lsls	r3, r3, #2
 801c4d6:	58d3      	ldr	r3, [r2, r3]
 801c4d8:	685b      	ldr	r3, [r3, #4]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d00d      	beq.n	801c4fa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c4de:	687a      	ldr	r2, [r7, #4]
 801c4e0:	23ac      	movs	r3, #172	@ 0xac
 801c4e2:	009b      	lsls	r3, r3, #2
 801c4e4:	58d3      	ldr	r3, [r2, r3]
 801c4e6:	685b      	ldr	r3, [r3, #4]
 801c4e8:	687a      	ldr	r2, [r7, #4]
 801c4ea:	7c12      	ldrb	r2, [r2, #16]
 801c4ec:	2108      	movs	r1, #8
 801c4ee:	1879      	adds	r1, r7, r1
 801c4f0:	0010      	movs	r0, r2
 801c4f2:	4798      	blx	r3
 801c4f4:	0003      	movs	r3, r0
 801c4f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c4f8:	e0c3      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c4fa:	683a      	ldr	r2, [r7, #0]
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	0011      	movs	r1, r2
 801c500:	0018      	movs	r0, r3
 801c502:	f000 fb20 	bl	801cb46 <USBD_CtlError>
            err++;
 801c506:	210b      	movs	r1, #11
 801c508:	187b      	adds	r3, r7, r1
 801c50a:	781a      	ldrb	r2, [r3, #0]
 801c50c:	187b      	adds	r3, r7, r1
 801c50e:	3201      	adds	r2, #1
 801c510:	701a      	strb	r2, [r3, #0]
          break;
 801c512:	e0b6      	b.n	801c682 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c514:	687a      	ldr	r2, [r7, #4]
 801c516:	23ac      	movs	r3, #172	@ 0xac
 801c518:	009b      	lsls	r3, r3, #2
 801c51a:	58d3      	ldr	r3, [r2, r3]
 801c51c:	689b      	ldr	r3, [r3, #8]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d00d      	beq.n	801c53e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c522:	687a      	ldr	r2, [r7, #4]
 801c524:	23ac      	movs	r3, #172	@ 0xac
 801c526:	009b      	lsls	r3, r3, #2
 801c528:	58d3      	ldr	r3, [r2, r3]
 801c52a:	689b      	ldr	r3, [r3, #8]
 801c52c:	687a      	ldr	r2, [r7, #4]
 801c52e:	7c12      	ldrb	r2, [r2, #16]
 801c530:	2108      	movs	r1, #8
 801c532:	1879      	adds	r1, r7, r1
 801c534:	0010      	movs	r0, r2
 801c536:	4798      	blx	r3
 801c538:	0003      	movs	r3, r0
 801c53a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c53c:	e0a1      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c53e:	683a      	ldr	r2, [r7, #0]
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	0011      	movs	r1, r2
 801c544:	0018      	movs	r0, r3
 801c546:	f000 fafe 	bl	801cb46 <USBD_CtlError>
            err++;
 801c54a:	210b      	movs	r1, #11
 801c54c:	187b      	adds	r3, r7, r1
 801c54e:	781a      	ldrb	r2, [r3, #0]
 801c550:	187b      	adds	r3, r7, r1
 801c552:	3201      	adds	r2, #1
 801c554:	701a      	strb	r2, [r3, #0]
          break;
 801c556:	e094      	b.n	801c682 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c558:	687a      	ldr	r2, [r7, #4]
 801c55a:	23ac      	movs	r3, #172	@ 0xac
 801c55c:	009b      	lsls	r3, r3, #2
 801c55e:	58d3      	ldr	r3, [r2, r3]
 801c560:	68db      	ldr	r3, [r3, #12]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d00d      	beq.n	801c582 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c566:	687a      	ldr	r2, [r7, #4]
 801c568:	23ac      	movs	r3, #172	@ 0xac
 801c56a:	009b      	lsls	r3, r3, #2
 801c56c:	58d3      	ldr	r3, [r2, r3]
 801c56e:	68db      	ldr	r3, [r3, #12]
 801c570:	687a      	ldr	r2, [r7, #4]
 801c572:	7c12      	ldrb	r2, [r2, #16]
 801c574:	2108      	movs	r1, #8
 801c576:	1879      	adds	r1, r7, r1
 801c578:	0010      	movs	r0, r2
 801c57a:	4798      	blx	r3
 801c57c:	0003      	movs	r3, r0
 801c57e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c580:	e07f      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c582:	683a      	ldr	r2, [r7, #0]
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	0011      	movs	r1, r2
 801c588:	0018      	movs	r0, r3
 801c58a:	f000 fadc 	bl	801cb46 <USBD_CtlError>
            err++;
 801c58e:	210b      	movs	r1, #11
 801c590:	187b      	adds	r3, r7, r1
 801c592:	781a      	ldrb	r2, [r3, #0]
 801c594:	187b      	adds	r3, r7, r1
 801c596:	3201      	adds	r2, #1
 801c598:	701a      	strb	r2, [r3, #0]
          break;
 801c59a:	e072      	b.n	801c682 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c59c:	687a      	ldr	r2, [r7, #4]
 801c59e:	23ac      	movs	r3, #172	@ 0xac
 801c5a0:	009b      	lsls	r3, r3, #2
 801c5a2:	58d3      	ldr	r3, [r2, r3]
 801c5a4:	691b      	ldr	r3, [r3, #16]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d00d      	beq.n	801c5c6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c5aa:	687a      	ldr	r2, [r7, #4]
 801c5ac:	23ac      	movs	r3, #172	@ 0xac
 801c5ae:	009b      	lsls	r3, r3, #2
 801c5b0:	58d3      	ldr	r3, [r2, r3]
 801c5b2:	691b      	ldr	r3, [r3, #16]
 801c5b4:	687a      	ldr	r2, [r7, #4]
 801c5b6:	7c12      	ldrb	r2, [r2, #16]
 801c5b8:	2108      	movs	r1, #8
 801c5ba:	1879      	adds	r1, r7, r1
 801c5bc:	0010      	movs	r0, r2
 801c5be:	4798      	blx	r3
 801c5c0:	0003      	movs	r3, r0
 801c5c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c5c4:	e05d      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c5c6:	683a      	ldr	r2, [r7, #0]
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	0011      	movs	r1, r2
 801c5cc:	0018      	movs	r0, r3
 801c5ce:	f000 faba 	bl	801cb46 <USBD_CtlError>
            err++;
 801c5d2:	210b      	movs	r1, #11
 801c5d4:	187b      	adds	r3, r7, r1
 801c5d6:	781a      	ldrb	r2, [r3, #0]
 801c5d8:	187b      	adds	r3, r7, r1
 801c5da:	3201      	adds	r2, #1
 801c5dc:	701a      	strb	r2, [r3, #0]
          break;
 801c5de:	e050      	b.n	801c682 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c5e0:	687a      	ldr	r2, [r7, #4]
 801c5e2:	23ac      	movs	r3, #172	@ 0xac
 801c5e4:	009b      	lsls	r3, r3, #2
 801c5e6:	58d3      	ldr	r3, [r2, r3]
 801c5e8:	695b      	ldr	r3, [r3, #20]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d00d      	beq.n	801c60a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c5ee:	687a      	ldr	r2, [r7, #4]
 801c5f0:	23ac      	movs	r3, #172	@ 0xac
 801c5f2:	009b      	lsls	r3, r3, #2
 801c5f4:	58d3      	ldr	r3, [r2, r3]
 801c5f6:	695b      	ldr	r3, [r3, #20]
 801c5f8:	687a      	ldr	r2, [r7, #4]
 801c5fa:	7c12      	ldrb	r2, [r2, #16]
 801c5fc:	2108      	movs	r1, #8
 801c5fe:	1879      	adds	r1, r7, r1
 801c600:	0010      	movs	r0, r2
 801c602:	4798      	blx	r3
 801c604:	0003      	movs	r3, r0
 801c606:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c608:	e03b      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c60a:	683a      	ldr	r2, [r7, #0]
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	0011      	movs	r1, r2
 801c610:	0018      	movs	r0, r3
 801c612:	f000 fa98 	bl	801cb46 <USBD_CtlError>
            err++;
 801c616:	210b      	movs	r1, #11
 801c618:	187b      	adds	r3, r7, r1
 801c61a:	781a      	ldrb	r2, [r3, #0]
 801c61c:	187b      	adds	r3, r7, r1
 801c61e:	3201      	adds	r2, #1
 801c620:	701a      	strb	r2, [r3, #0]
          break;
 801c622:	e02e      	b.n	801c682 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c624:	687a      	ldr	r2, [r7, #4]
 801c626:	23ac      	movs	r3, #172	@ 0xac
 801c628:	009b      	lsls	r3, r3, #2
 801c62a:	58d3      	ldr	r3, [r2, r3]
 801c62c:	699b      	ldr	r3, [r3, #24]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d00d      	beq.n	801c64e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c632:	687a      	ldr	r2, [r7, #4]
 801c634:	23ac      	movs	r3, #172	@ 0xac
 801c636:	009b      	lsls	r3, r3, #2
 801c638:	58d3      	ldr	r3, [r2, r3]
 801c63a:	699b      	ldr	r3, [r3, #24]
 801c63c:	687a      	ldr	r2, [r7, #4]
 801c63e:	7c12      	ldrb	r2, [r2, #16]
 801c640:	2108      	movs	r1, #8
 801c642:	1879      	adds	r1, r7, r1
 801c644:	0010      	movs	r0, r2
 801c646:	4798      	blx	r3
 801c648:	0003      	movs	r3, r0
 801c64a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c64c:	e019      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c64e:	683a      	ldr	r2, [r7, #0]
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	0011      	movs	r1, r2
 801c654:	0018      	movs	r0, r3
 801c656:	f000 fa76 	bl	801cb46 <USBD_CtlError>
            err++;
 801c65a:	210b      	movs	r1, #11
 801c65c:	187b      	adds	r3, r7, r1
 801c65e:	781a      	ldrb	r2, [r3, #0]
 801c660:	187b      	adds	r3, r7, r1
 801c662:	3201      	adds	r2, #1
 801c664:	701a      	strb	r2, [r3, #0]
          break;
 801c666:	e00c      	b.n	801c682 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c668:	683a      	ldr	r2, [r7, #0]
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	0011      	movs	r1, r2
 801c66e:	0018      	movs	r0, r3
 801c670:	f000 fa69 	bl	801cb46 <USBD_CtlError>
          err++;
 801c674:	210b      	movs	r1, #11
 801c676:	187b      	adds	r3, r7, r1
 801c678:	781a      	ldrb	r2, [r3, #0]
 801c67a:	187b      	adds	r3, r7, r1
 801c67c:	3201      	adds	r2, #1
 801c67e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c680:	e04b      	b.n	801c71a <USBD_GetDescriptor+0x2fa>
 801c682:	e04a      	b.n	801c71a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	7c1b      	ldrb	r3, [r3, #16]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d10b      	bne.n	801c6a4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c68c:	687a      	ldr	r2, [r7, #4]
 801c68e:	23ad      	movs	r3, #173	@ 0xad
 801c690:	009b      	lsls	r3, r3, #2
 801c692:	58d3      	ldr	r3, [r2, r3]
 801c694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c696:	2208      	movs	r2, #8
 801c698:	18ba      	adds	r2, r7, r2
 801c69a:	0010      	movs	r0, r2
 801c69c:	4798      	blx	r3
 801c69e:	0003      	movs	r3, r0
 801c6a0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c6a2:	e03a      	b.n	801c71a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c6a4:	683a      	ldr	r2, [r7, #0]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	0011      	movs	r1, r2
 801c6aa:	0018      	movs	r0, r3
 801c6ac:	f000 fa4b 	bl	801cb46 <USBD_CtlError>
        err++;
 801c6b0:	210b      	movs	r1, #11
 801c6b2:	187b      	adds	r3, r7, r1
 801c6b4:	781a      	ldrb	r2, [r3, #0]
 801c6b6:	187b      	adds	r3, r7, r1
 801c6b8:	3201      	adds	r2, #1
 801c6ba:	701a      	strb	r2, [r3, #0]
      break;
 801c6bc:	e02d      	b.n	801c71a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	7c1b      	ldrb	r3, [r3, #16]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d10f      	bne.n	801c6e6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c6c6:	687a      	ldr	r2, [r7, #4]
 801c6c8:	23ad      	movs	r3, #173	@ 0xad
 801c6ca:	009b      	lsls	r3, r3, #2
 801c6cc:	58d3      	ldr	r3, [r2, r3]
 801c6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c6d0:	2208      	movs	r2, #8
 801c6d2:	18ba      	adds	r2, r7, r2
 801c6d4:	0010      	movs	r0, r2
 801c6d6:	4798      	blx	r3
 801c6d8:	0003      	movs	r3, r0
 801c6da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	3301      	adds	r3, #1
 801c6e0:	2207      	movs	r2, #7
 801c6e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c6e4:	e019      	b.n	801c71a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c6e6:	683a      	ldr	r2, [r7, #0]
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	0011      	movs	r1, r2
 801c6ec:	0018      	movs	r0, r3
 801c6ee:	f000 fa2a 	bl	801cb46 <USBD_CtlError>
        err++;
 801c6f2:	210b      	movs	r1, #11
 801c6f4:	187b      	adds	r3, r7, r1
 801c6f6:	781a      	ldrb	r2, [r3, #0]
 801c6f8:	187b      	adds	r3, r7, r1
 801c6fa:	3201      	adds	r2, #1
 801c6fc:	701a      	strb	r2, [r3, #0]
      break;
 801c6fe:	e00c      	b.n	801c71a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c700:	683a      	ldr	r2, [r7, #0]
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	0011      	movs	r1, r2
 801c706:	0018      	movs	r0, r3
 801c708:	f000 fa1d 	bl	801cb46 <USBD_CtlError>
      err++;
 801c70c:	210b      	movs	r1, #11
 801c70e:	187b      	adds	r3, r7, r1
 801c710:	781a      	ldrb	r2, [r3, #0]
 801c712:	187b      	adds	r3, r7, r1
 801c714:	3201      	adds	r2, #1
 801c716:	701a      	strb	r2, [r3, #0]
      break;
 801c718:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c71a:	230b      	movs	r3, #11
 801c71c:	18fb      	adds	r3, r7, r3
 801c71e:	781b      	ldrb	r3, [r3, #0]
 801c720:	2b00      	cmp	r3, #0
 801c722:	d127      	bne.n	801c774 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c724:	2108      	movs	r1, #8
 801c726:	187b      	adds	r3, r7, r1
 801c728:	881b      	ldrh	r3, [r3, #0]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d019      	beq.n	801c762 <USBD_GetDescriptor+0x342>
 801c72e:	683b      	ldr	r3, [r7, #0]
 801c730:	88db      	ldrh	r3, [r3, #6]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d015      	beq.n	801c762 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c736:	683b      	ldr	r3, [r7, #0]
 801c738:	88da      	ldrh	r2, [r3, #6]
 801c73a:	187b      	adds	r3, r7, r1
 801c73c:	881b      	ldrh	r3, [r3, #0]
 801c73e:	1c18      	adds	r0, r3, #0
 801c740:	1c11      	adds	r1, r2, #0
 801c742:	b28a      	uxth	r2, r1
 801c744:	b283      	uxth	r3, r0
 801c746:	429a      	cmp	r2, r3
 801c748:	d900      	bls.n	801c74c <USBD_GetDescriptor+0x32c>
 801c74a:	1c01      	adds	r1, r0, #0
 801c74c:	b28a      	uxth	r2, r1
 801c74e:	2108      	movs	r1, #8
 801c750:	187b      	adds	r3, r7, r1
 801c752:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c754:	187b      	adds	r3, r7, r1
 801c756:	881a      	ldrh	r2, [r3, #0]
 801c758:	68f9      	ldr	r1, [r7, #12]
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	0018      	movs	r0, r3
 801c75e:	f000 fa70 	bl	801cc42 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c762:	683b      	ldr	r3, [r7, #0]
 801c764:	88db      	ldrh	r3, [r3, #6]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d105      	bne.n	801c776 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	0018      	movs	r0, r3
 801c76e:	f000 fad2 	bl	801cd16 <USBD_CtlSendStatus>
 801c772:	e000      	b.n	801c776 <USBD_GetDescriptor+0x356>
    return;
 801c774:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c776:	46bd      	mov	sp, r7
 801c778:	b004      	add	sp, #16
 801c77a:	bd80      	pop	{r7, pc}
 801c77c:	08025890 	.word	0x08025890
 801c780:	080258b0 	.word	0x080258b0

0801c784 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c784:	b590      	push	{r4, r7, lr}
 801c786:	b085      	sub	sp, #20
 801c788:	af00      	add	r7, sp, #0
 801c78a:	6078      	str	r0, [r7, #4]
 801c78c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	889b      	ldrh	r3, [r3, #4]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d13d      	bne.n	801c812 <USBD_SetAddress+0x8e>
 801c796:	683b      	ldr	r3, [r7, #0]
 801c798:	88db      	ldrh	r3, [r3, #6]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d139      	bne.n	801c812 <USBD_SetAddress+0x8e>
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	885b      	ldrh	r3, [r3, #2]
 801c7a2:	2b7f      	cmp	r3, #127	@ 0x7f
 801c7a4:	d835      	bhi.n	801c812 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c7a6:	683b      	ldr	r3, [r7, #0]
 801c7a8:	885b      	ldrh	r3, [r3, #2]
 801c7aa:	b2da      	uxtb	r2, r3
 801c7ac:	230f      	movs	r3, #15
 801c7ae:	18fb      	adds	r3, r7, r3
 801c7b0:	217f      	movs	r1, #127	@ 0x7f
 801c7b2:	400a      	ands	r2, r1
 801c7b4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7b6:	687a      	ldr	r2, [r7, #4]
 801c7b8:	23a7      	movs	r3, #167	@ 0xa7
 801c7ba:	009b      	lsls	r3, r3, #2
 801c7bc:	5cd3      	ldrb	r3, [r2, r3]
 801c7be:	2b03      	cmp	r3, #3
 801c7c0:	d106      	bne.n	801c7d0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c7c2:	683a      	ldr	r2, [r7, #0]
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	0011      	movs	r1, r2
 801c7c8:	0018      	movs	r0, r3
 801c7ca:	f000 f9bc 	bl	801cb46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7ce:	e027      	b.n	801c820 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	240f      	movs	r4, #15
 801c7d4:	193a      	adds	r2, r7, r4
 801c7d6:	4914      	ldr	r1, [pc, #80]	@ (801c828 <USBD_SetAddress+0xa4>)
 801c7d8:	7812      	ldrb	r2, [r2, #0]
 801c7da:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c7dc:	193b      	adds	r3, r7, r4
 801c7de:	781a      	ldrb	r2, [r3, #0]
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	0011      	movs	r1, r2
 801c7e4:	0018      	movs	r0, r3
 801c7e6:	f000 ff5d 	bl	801d6a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	0018      	movs	r0, r3
 801c7ee:	f000 fa92 	bl	801cd16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c7f2:	193b      	adds	r3, r7, r4
 801c7f4:	781b      	ldrb	r3, [r3, #0]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d005      	beq.n	801c806 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c7fa:	687a      	ldr	r2, [r7, #4]
 801c7fc:	23a7      	movs	r3, #167	@ 0xa7
 801c7fe:	009b      	lsls	r3, r3, #2
 801c800:	2102      	movs	r1, #2
 801c802:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c804:	e00c      	b.n	801c820 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	23a7      	movs	r3, #167	@ 0xa7
 801c80a:	009b      	lsls	r3, r3, #2
 801c80c:	2101      	movs	r1, #1
 801c80e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c810:	e006      	b.n	801c820 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c812:	683a      	ldr	r2, [r7, #0]
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	0011      	movs	r1, r2
 801c818:	0018      	movs	r0, r3
 801c81a:	f000 f994 	bl	801cb46 <USBD_CtlError>
  }
}
 801c81e:	46c0      	nop			@ (mov r8, r8)
 801c820:	46c0      	nop			@ (mov r8, r8)
 801c822:	46bd      	mov	sp, r7
 801c824:	b005      	add	sp, #20
 801c826:	bd90      	pop	{r4, r7, pc}
 801c828:	0000029e 	.word	0x0000029e

0801c82c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b082      	sub	sp, #8
 801c830:	af00      	add	r7, sp, #0
 801c832:	6078      	str	r0, [r7, #4]
 801c834:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	885b      	ldrh	r3, [r3, #2]
 801c83a:	b2da      	uxtb	r2, r3
 801c83c:	4b4c      	ldr	r3, [pc, #304]	@ (801c970 <USBD_SetConfig+0x144>)
 801c83e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c840:	4b4b      	ldr	r3, [pc, #300]	@ (801c970 <USBD_SetConfig+0x144>)
 801c842:	781b      	ldrb	r3, [r3, #0]
 801c844:	2b01      	cmp	r3, #1
 801c846:	d906      	bls.n	801c856 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c848:	683a      	ldr	r2, [r7, #0]
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	0011      	movs	r1, r2
 801c84e:	0018      	movs	r0, r3
 801c850:	f000 f979 	bl	801cb46 <USBD_CtlError>
 801c854:	e088      	b.n	801c968 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	23a7      	movs	r3, #167	@ 0xa7
 801c85a:	009b      	lsls	r3, r3, #2
 801c85c:	5cd3      	ldrb	r3, [r2, r3]
 801c85e:	2b02      	cmp	r3, #2
 801c860:	d002      	beq.n	801c868 <USBD_SetConfig+0x3c>
 801c862:	2b03      	cmp	r3, #3
 801c864:	d029      	beq.n	801c8ba <USBD_SetConfig+0x8e>
 801c866:	e071      	b.n	801c94c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c868:	4b41      	ldr	r3, [pc, #260]	@ (801c970 <USBD_SetConfig+0x144>)
 801c86a:	781b      	ldrb	r3, [r3, #0]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d01f      	beq.n	801c8b0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c870:	4b3f      	ldr	r3, [pc, #252]	@ (801c970 <USBD_SetConfig+0x144>)
 801c872:	781b      	ldrb	r3, [r3, #0]
 801c874:	001a      	movs	r2, r3
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c87a:	687a      	ldr	r2, [r7, #4]
 801c87c:	23a7      	movs	r3, #167	@ 0xa7
 801c87e:	009b      	lsls	r3, r3, #2
 801c880:	2103      	movs	r1, #3
 801c882:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c884:	4b3a      	ldr	r3, [pc, #232]	@ (801c970 <USBD_SetConfig+0x144>)
 801c886:	781a      	ldrb	r2, [r3, #0]
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	0011      	movs	r1, r2
 801c88c:	0018      	movs	r0, r3
 801c88e:	f7ff f8c6 	bl	801ba1e <USBD_SetClassConfig>
 801c892:	0003      	movs	r3, r0
 801c894:	2b02      	cmp	r3, #2
 801c896:	d106      	bne.n	801c8a6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c898:	683a      	ldr	r2, [r7, #0]
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	0011      	movs	r1, r2
 801c89e:	0018      	movs	r0, r3
 801c8a0:	f000 f951 	bl	801cb46 <USBD_CtlError>
            return;
 801c8a4:	e060      	b.n	801c968 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	0018      	movs	r0, r3
 801c8aa:	f000 fa34 	bl	801cd16 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c8ae:	e05b      	b.n	801c968 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	0018      	movs	r0, r3
 801c8b4:	f000 fa2f 	bl	801cd16 <USBD_CtlSendStatus>
        break;
 801c8b8:	e056      	b.n	801c968 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c8ba:	4b2d      	ldr	r3, [pc, #180]	@ (801c970 <USBD_SetConfig+0x144>)
 801c8bc:	781b      	ldrb	r3, [r3, #0]
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d115      	bne.n	801c8ee <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c8c2:	687a      	ldr	r2, [r7, #4]
 801c8c4:	23a7      	movs	r3, #167	@ 0xa7
 801c8c6:	009b      	lsls	r3, r3, #2
 801c8c8:	2102      	movs	r1, #2
 801c8ca:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c8cc:	4b28      	ldr	r3, [pc, #160]	@ (801c970 <USBD_SetConfig+0x144>)
 801c8ce:	781b      	ldrb	r3, [r3, #0]
 801c8d0:	001a      	movs	r2, r3
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c8d6:	4b26      	ldr	r3, [pc, #152]	@ (801c970 <USBD_SetConfig+0x144>)
 801c8d8:	781a      	ldrb	r2, [r3, #0]
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	0011      	movs	r1, r2
 801c8de:	0018      	movs	r0, r3
 801c8e0:	f7ff f8c4 	bl	801ba6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	0018      	movs	r0, r3
 801c8e8:	f000 fa15 	bl	801cd16 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c8ec:	e03c      	b.n	801c968 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c8ee:	4b20      	ldr	r3, [pc, #128]	@ (801c970 <USBD_SetConfig+0x144>)
 801c8f0:	781b      	ldrb	r3, [r3, #0]
 801c8f2:	001a      	movs	r2, r3
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	685b      	ldr	r3, [r3, #4]
 801c8f8:	429a      	cmp	r2, r3
 801c8fa:	d022      	beq.n	801c942 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	685b      	ldr	r3, [r3, #4]
 801c900:	b2da      	uxtb	r2, r3
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	0011      	movs	r1, r2
 801c906:	0018      	movs	r0, r3
 801c908:	f7ff f8b0 	bl	801ba6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c90c:	4b18      	ldr	r3, [pc, #96]	@ (801c970 <USBD_SetConfig+0x144>)
 801c90e:	781b      	ldrb	r3, [r3, #0]
 801c910:	001a      	movs	r2, r3
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c916:	4b16      	ldr	r3, [pc, #88]	@ (801c970 <USBD_SetConfig+0x144>)
 801c918:	781a      	ldrb	r2, [r3, #0]
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	0011      	movs	r1, r2
 801c91e:	0018      	movs	r0, r3
 801c920:	f7ff f87d 	bl	801ba1e <USBD_SetClassConfig>
 801c924:	0003      	movs	r3, r0
 801c926:	2b02      	cmp	r3, #2
 801c928:	d106      	bne.n	801c938 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c92a:	683a      	ldr	r2, [r7, #0]
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	0011      	movs	r1, r2
 801c930:	0018      	movs	r0, r3
 801c932:	f000 f908 	bl	801cb46 <USBD_CtlError>
            return;
 801c936:	e017      	b.n	801c968 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	0018      	movs	r0, r3
 801c93c:	f000 f9eb 	bl	801cd16 <USBD_CtlSendStatus>
        break;
 801c940:	e012      	b.n	801c968 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	0018      	movs	r0, r3
 801c946:	f000 f9e6 	bl	801cd16 <USBD_CtlSendStatus>
        break;
 801c94a:	e00d      	b.n	801c968 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c94c:	683a      	ldr	r2, [r7, #0]
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	0011      	movs	r1, r2
 801c952:	0018      	movs	r0, r3
 801c954:	f000 f8f7 	bl	801cb46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c958:	4b05      	ldr	r3, [pc, #20]	@ (801c970 <USBD_SetConfig+0x144>)
 801c95a:	781a      	ldrb	r2, [r3, #0]
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	0011      	movs	r1, r2
 801c960:	0018      	movs	r0, r3
 801c962:	f7ff f883 	bl	801ba6c <USBD_ClrClassConfig>
        break;
 801c966:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c968:	46bd      	mov	sp, r7
 801c96a:	b002      	add	sp, #8
 801c96c:	bd80      	pop	{r7, pc}
 801c96e:	46c0      	nop			@ (mov r8, r8)
 801c970:	200023e4 	.word	0x200023e4

0801c974 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b082      	sub	sp, #8
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
 801c97c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c97e:	683b      	ldr	r3, [r7, #0]
 801c980:	88db      	ldrh	r3, [r3, #6]
 801c982:	2b01      	cmp	r3, #1
 801c984:	d006      	beq.n	801c994 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c986:	683a      	ldr	r2, [r7, #0]
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	0011      	movs	r1, r2
 801c98c:	0018      	movs	r0, r3
 801c98e:	f000 f8da 	bl	801cb46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c992:	e026      	b.n	801c9e2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c994:	687a      	ldr	r2, [r7, #4]
 801c996:	23a7      	movs	r3, #167	@ 0xa7
 801c998:	009b      	lsls	r3, r3, #2
 801c99a:	5cd3      	ldrb	r3, [r2, r3]
 801c99c:	2b02      	cmp	r3, #2
 801c99e:	dc02      	bgt.n	801c9a6 <USBD_GetConfig+0x32>
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	dc03      	bgt.n	801c9ac <USBD_GetConfig+0x38>
 801c9a4:	e016      	b.n	801c9d4 <USBD_GetConfig+0x60>
 801c9a6:	2b03      	cmp	r3, #3
 801c9a8:	d00c      	beq.n	801c9c4 <USBD_GetConfig+0x50>
 801c9aa:	e013      	b.n	801c9d4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	2200      	movs	r2, #0
 801c9b0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	3308      	adds	r3, #8
 801c9b6:	0019      	movs	r1, r3
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	2201      	movs	r2, #1
 801c9bc:	0018      	movs	r0, r3
 801c9be:	f000 f940 	bl	801cc42 <USBD_CtlSendData>
        break;
 801c9c2:	e00e      	b.n	801c9e2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	1d19      	adds	r1, r3, #4
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	2201      	movs	r2, #1
 801c9cc:	0018      	movs	r0, r3
 801c9ce:	f000 f938 	bl	801cc42 <USBD_CtlSendData>
        break;
 801c9d2:	e006      	b.n	801c9e2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c9d4:	683a      	ldr	r2, [r7, #0]
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	0011      	movs	r1, r2
 801c9da:	0018      	movs	r0, r3
 801c9dc:	f000 f8b3 	bl	801cb46 <USBD_CtlError>
        break;
 801c9e0:	46c0      	nop			@ (mov r8, r8)
}
 801c9e2:	46c0      	nop			@ (mov r8, r8)
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	b002      	add	sp, #8
 801c9e8:	bd80      	pop	{r7, pc}

0801c9ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c9ea:	b580      	push	{r7, lr}
 801c9ec:	b082      	sub	sp, #8
 801c9ee:	af00      	add	r7, sp, #0
 801c9f0:	6078      	str	r0, [r7, #4]
 801c9f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c9f4:	687a      	ldr	r2, [r7, #4]
 801c9f6:	23a7      	movs	r3, #167	@ 0xa7
 801c9f8:	009b      	lsls	r3, r3, #2
 801c9fa:	5cd3      	ldrb	r3, [r2, r3]
 801c9fc:	3b01      	subs	r3, #1
 801c9fe:	2b02      	cmp	r3, #2
 801ca00:	d822      	bhi.n	801ca48 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	88db      	ldrh	r3, [r3, #6]
 801ca06:	2b02      	cmp	r3, #2
 801ca08:	d006      	beq.n	801ca18 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801ca0a:	683a      	ldr	r2, [r7, #0]
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	0011      	movs	r1, r2
 801ca10:	0018      	movs	r0, r3
 801ca12:	f000 f898 	bl	801cb46 <USBD_CtlError>
        break;
 801ca16:	e01e      	b.n	801ca56 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	2201      	movs	r2, #1
 801ca1c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ca1e:	687a      	ldr	r2, [r7, #4]
 801ca20:	23a9      	movs	r3, #169	@ 0xa9
 801ca22:	009b      	lsls	r3, r3, #2
 801ca24:	58d3      	ldr	r3, [r2, r3]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d005      	beq.n	801ca36 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	68db      	ldr	r3, [r3, #12]
 801ca2e:	2202      	movs	r2, #2
 801ca30:	431a      	orrs	r2, r3
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	330c      	adds	r3, #12
 801ca3a:	0019      	movs	r1, r3
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	2202      	movs	r2, #2
 801ca40:	0018      	movs	r0, r3
 801ca42:	f000 f8fe 	bl	801cc42 <USBD_CtlSendData>
      break;
 801ca46:	e006      	b.n	801ca56 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801ca48:	683a      	ldr	r2, [r7, #0]
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	0011      	movs	r1, r2
 801ca4e:	0018      	movs	r0, r3
 801ca50:	f000 f879 	bl	801cb46 <USBD_CtlError>
      break;
 801ca54:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ca56:	46c0      	nop			@ (mov r8, r8)
 801ca58:	46bd      	mov	sp, r7
 801ca5a:	b002      	add	sp, #8
 801ca5c:	bd80      	pop	{r7, pc}

0801ca5e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ca5e:	b580      	push	{r7, lr}
 801ca60:	b082      	sub	sp, #8
 801ca62:	af00      	add	r7, sp, #0
 801ca64:	6078      	str	r0, [r7, #4]
 801ca66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ca68:	683b      	ldr	r3, [r7, #0]
 801ca6a:	885b      	ldrh	r3, [r3, #2]
 801ca6c:	2b01      	cmp	r3, #1
 801ca6e:	d108      	bne.n	801ca82 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801ca70:	687a      	ldr	r2, [r7, #4]
 801ca72:	23a9      	movs	r3, #169	@ 0xa9
 801ca74:	009b      	lsls	r3, r3, #2
 801ca76:	2101      	movs	r1, #1
 801ca78:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	0018      	movs	r0, r3
 801ca7e:	f000 f94a 	bl	801cd16 <USBD_CtlSendStatus>
  }
}
 801ca82:	46c0      	nop			@ (mov r8, r8)
 801ca84:	46bd      	mov	sp, r7
 801ca86:	b002      	add	sp, #8
 801ca88:	bd80      	pop	{r7, pc}

0801ca8a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ca8a:	b580      	push	{r7, lr}
 801ca8c:	b082      	sub	sp, #8
 801ca8e:	af00      	add	r7, sp, #0
 801ca90:	6078      	str	r0, [r7, #4]
 801ca92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ca94:	687a      	ldr	r2, [r7, #4]
 801ca96:	23a7      	movs	r3, #167	@ 0xa7
 801ca98:	009b      	lsls	r3, r3, #2
 801ca9a:	5cd3      	ldrb	r3, [r2, r3]
 801ca9c:	3b01      	subs	r3, #1
 801ca9e:	2b02      	cmp	r3, #2
 801caa0:	d80d      	bhi.n	801cabe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801caa2:	683b      	ldr	r3, [r7, #0]
 801caa4:	885b      	ldrh	r3, [r3, #2]
 801caa6:	2b01      	cmp	r3, #1
 801caa8:	d110      	bne.n	801cacc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801caaa:	687a      	ldr	r2, [r7, #4]
 801caac:	23a9      	movs	r3, #169	@ 0xa9
 801caae:	009b      	lsls	r3, r3, #2
 801cab0:	2100      	movs	r1, #0
 801cab2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	0018      	movs	r0, r3
 801cab8:	f000 f92d 	bl	801cd16 <USBD_CtlSendStatus>
      }
      break;
 801cabc:	e006      	b.n	801cacc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801cabe:	683a      	ldr	r2, [r7, #0]
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	0011      	movs	r1, r2
 801cac4:	0018      	movs	r0, r3
 801cac6:	f000 f83e 	bl	801cb46 <USBD_CtlError>
      break;
 801caca:	e000      	b.n	801cace <USBD_ClrFeature+0x44>
      break;
 801cacc:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cace:	46c0      	nop			@ (mov r8, r8)
 801cad0:	46bd      	mov	sp, r7
 801cad2:	b002      	add	sp, #8
 801cad4:	bd80      	pop	{r7, pc}

0801cad6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801cad6:	b580      	push	{r7, lr}
 801cad8:	b082      	sub	sp, #8
 801cada:	af00      	add	r7, sp, #0
 801cadc:	6078      	str	r0, [r7, #4]
 801cade:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801cae0:	683b      	ldr	r3, [r7, #0]
 801cae2:	781a      	ldrb	r2, [r3, #0]
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801cae8:	683b      	ldr	r3, [r7, #0]
 801caea:	785a      	ldrb	r2, [r3, #1]
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801caf0:	683b      	ldr	r3, [r7, #0]
 801caf2:	3302      	adds	r3, #2
 801caf4:	781b      	ldrb	r3, [r3, #0]
 801caf6:	001a      	movs	r2, r3
 801caf8:	683b      	ldr	r3, [r7, #0]
 801cafa:	3303      	adds	r3, #3
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	021b      	lsls	r3, r3, #8
 801cb00:	b29b      	uxth	r3, r3
 801cb02:	18d3      	adds	r3, r2, r3
 801cb04:	b29a      	uxth	r2, r3
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801cb0a:	683b      	ldr	r3, [r7, #0]
 801cb0c:	3304      	adds	r3, #4
 801cb0e:	781b      	ldrb	r3, [r3, #0]
 801cb10:	001a      	movs	r2, r3
 801cb12:	683b      	ldr	r3, [r7, #0]
 801cb14:	3305      	adds	r3, #5
 801cb16:	781b      	ldrb	r3, [r3, #0]
 801cb18:	021b      	lsls	r3, r3, #8
 801cb1a:	b29b      	uxth	r3, r3
 801cb1c:	18d3      	adds	r3, r2, r3
 801cb1e:	b29a      	uxth	r2, r3
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801cb24:	683b      	ldr	r3, [r7, #0]
 801cb26:	3306      	adds	r3, #6
 801cb28:	781b      	ldrb	r3, [r3, #0]
 801cb2a:	001a      	movs	r2, r3
 801cb2c:	683b      	ldr	r3, [r7, #0]
 801cb2e:	3307      	adds	r3, #7
 801cb30:	781b      	ldrb	r3, [r3, #0]
 801cb32:	021b      	lsls	r3, r3, #8
 801cb34:	b29b      	uxth	r3, r3
 801cb36:	18d3      	adds	r3, r2, r3
 801cb38:	b29a      	uxth	r2, r3
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	80da      	strh	r2, [r3, #6]

}
 801cb3e:	46c0      	nop			@ (mov r8, r8)
 801cb40:	46bd      	mov	sp, r7
 801cb42:	b002      	add	sp, #8
 801cb44:	bd80      	pop	{r7, pc}

0801cb46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801cb46:	b580      	push	{r7, lr}
 801cb48:	b082      	sub	sp, #8
 801cb4a:	af00      	add	r7, sp, #0
 801cb4c:	6078      	str	r0, [r7, #4]
 801cb4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	2180      	movs	r1, #128	@ 0x80
 801cb54:	0018      	movs	r0, r3
 801cb56:	f000 fd1e 	bl	801d596 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	2100      	movs	r1, #0
 801cb5e:	0018      	movs	r0, r3
 801cb60:	f000 fd19 	bl	801d596 <USBD_LL_StallEP>
}
 801cb64:	46c0      	nop			@ (mov r8, r8)
 801cb66:	46bd      	mov	sp, r7
 801cb68:	b002      	add	sp, #8
 801cb6a:	bd80      	pop	{r7, pc}

0801cb6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801cb6c:	b590      	push	{r4, r7, lr}
 801cb6e:	b087      	sub	sp, #28
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	60f8      	str	r0, [r7, #12]
 801cb74:	60b9      	str	r1, [r7, #8]
 801cb76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801cb78:	2417      	movs	r4, #23
 801cb7a:	193b      	adds	r3, r7, r4
 801cb7c:	2200      	movs	r2, #0
 801cb7e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d03c      	beq.n	801cc00 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	0018      	movs	r0, r3
 801cb8a:	f000 f83d 	bl	801cc08 <USBD_GetLen>
 801cb8e:	0003      	movs	r3, r0
 801cb90:	3301      	adds	r3, #1
 801cb92:	b29b      	uxth	r3, r3
 801cb94:	18db      	adds	r3, r3, r3
 801cb96:	b29a      	uxth	r2, r3
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801cb9c:	193b      	adds	r3, r7, r4
 801cb9e:	781b      	ldrb	r3, [r3, #0]
 801cba0:	193a      	adds	r2, r7, r4
 801cba2:	1c59      	adds	r1, r3, #1
 801cba4:	7011      	strb	r1, [r2, #0]
 801cba6:	001a      	movs	r2, r3
 801cba8:	68bb      	ldr	r3, [r7, #8]
 801cbaa:	189b      	adds	r3, r3, r2
 801cbac:	687a      	ldr	r2, [r7, #4]
 801cbae:	7812      	ldrb	r2, [r2, #0]
 801cbb0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801cbb2:	193b      	adds	r3, r7, r4
 801cbb4:	781b      	ldrb	r3, [r3, #0]
 801cbb6:	193a      	adds	r2, r7, r4
 801cbb8:	1c59      	adds	r1, r3, #1
 801cbba:	7011      	strb	r1, [r2, #0]
 801cbbc:	001a      	movs	r2, r3
 801cbbe:	68bb      	ldr	r3, [r7, #8]
 801cbc0:	189b      	adds	r3, r3, r2
 801cbc2:	2203      	movs	r2, #3
 801cbc4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801cbc6:	e017      	b.n	801cbf8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	1c5a      	adds	r2, r3, #1
 801cbcc:	60fa      	str	r2, [r7, #12]
 801cbce:	2417      	movs	r4, #23
 801cbd0:	193a      	adds	r2, r7, r4
 801cbd2:	7812      	ldrb	r2, [r2, #0]
 801cbd4:	1939      	adds	r1, r7, r4
 801cbd6:	1c50      	adds	r0, r2, #1
 801cbd8:	7008      	strb	r0, [r1, #0]
 801cbda:	0011      	movs	r1, r2
 801cbdc:	68ba      	ldr	r2, [r7, #8]
 801cbde:	1852      	adds	r2, r2, r1
 801cbe0:	781b      	ldrb	r3, [r3, #0]
 801cbe2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801cbe4:	193b      	adds	r3, r7, r4
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	193a      	adds	r2, r7, r4
 801cbea:	1c59      	adds	r1, r3, #1
 801cbec:	7011      	strb	r1, [r2, #0]
 801cbee:	001a      	movs	r2, r3
 801cbf0:	68bb      	ldr	r3, [r7, #8]
 801cbf2:	189b      	adds	r3, r3, r2
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	781b      	ldrb	r3, [r3, #0]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d1e3      	bne.n	801cbc8 <USBD_GetString+0x5c>
    }
  }
}
 801cc00:	46c0      	nop			@ (mov r8, r8)
 801cc02:	46bd      	mov	sp, r7
 801cc04:	b007      	add	sp, #28
 801cc06:	bd90      	pop	{r4, r7, pc}

0801cc08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b084      	sub	sp, #16
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cc10:	230f      	movs	r3, #15
 801cc12:	18fb      	adds	r3, r7, r3
 801cc14:	2200      	movs	r2, #0
 801cc16:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cc18:	e008      	b.n	801cc2c <USBD_GetLen+0x24>
  {
    len++;
 801cc1a:	210f      	movs	r1, #15
 801cc1c:	187b      	adds	r3, r7, r1
 801cc1e:	781a      	ldrb	r2, [r3, #0]
 801cc20:	187b      	adds	r3, r7, r1
 801cc22:	3201      	adds	r2, #1
 801cc24:	701a      	strb	r2, [r3, #0]
    buf++;
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	3301      	adds	r3, #1
 801cc2a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d1f2      	bne.n	801cc1a <USBD_GetLen+0x12>
  }

  return len;
 801cc34:	230f      	movs	r3, #15
 801cc36:	18fb      	adds	r3, r7, r3
 801cc38:	781b      	ldrb	r3, [r3, #0]
}
 801cc3a:	0018      	movs	r0, r3
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	b004      	add	sp, #16
 801cc40:	bd80      	pop	{r7, pc}

0801cc42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cc42:	b580      	push	{r7, lr}
 801cc44:	b084      	sub	sp, #16
 801cc46:	af00      	add	r7, sp, #0
 801cc48:	60f8      	str	r0, [r7, #12]
 801cc4a:	60b9      	str	r1, [r7, #8]
 801cc4c:	1dbb      	adds	r3, r7, #6
 801cc4e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cc50:	68fa      	ldr	r2, [r7, #12]
 801cc52:	23a5      	movs	r3, #165	@ 0xa5
 801cc54:	009b      	lsls	r3, r3, #2
 801cc56:	2102      	movs	r1, #2
 801cc58:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cc5a:	1dbb      	adds	r3, r7, #6
 801cc5c:	881a      	ldrh	r2, [r3, #0]
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801cc62:	1dbb      	adds	r3, r7, #6
 801cc64:	881a      	ldrh	r2, [r3, #0]
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cc6a:	1dbb      	adds	r3, r7, #6
 801cc6c:	881b      	ldrh	r3, [r3, #0]
 801cc6e:	68ba      	ldr	r2, [r7, #8]
 801cc70:	68f8      	ldr	r0, [r7, #12]
 801cc72:	2100      	movs	r1, #0
 801cc74:	f000 fd41 	bl	801d6fa <USBD_LL_Transmit>

  return USBD_OK;
 801cc78:	2300      	movs	r3, #0
}
 801cc7a:	0018      	movs	r0, r3
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	b004      	add	sp, #16
 801cc80:	bd80      	pop	{r7, pc}

0801cc82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cc82:	b580      	push	{r7, lr}
 801cc84:	b084      	sub	sp, #16
 801cc86:	af00      	add	r7, sp, #0
 801cc88:	60f8      	str	r0, [r7, #12]
 801cc8a:	60b9      	str	r1, [r7, #8]
 801cc8c:	1dbb      	adds	r3, r7, #6
 801cc8e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cc90:	1dbb      	adds	r3, r7, #6
 801cc92:	881b      	ldrh	r3, [r3, #0]
 801cc94:	68ba      	ldr	r2, [r7, #8]
 801cc96:	68f8      	ldr	r0, [r7, #12]
 801cc98:	2100      	movs	r1, #0
 801cc9a:	f000 fd2e 	bl	801d6fa <USBD_LL_Transmit>

  return USBD_OK;
 801cc9e:	2300      	movs	r3, #0
}
 801cca0:	0018      	movs	r0, r3
 801cca2:	46bd      	mov	sp, r7
 801cca4:	b004      	add	sp, #16
 801cca6:	bd80      	pop	{r7, pc}

0801cca8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b084      	sub	sp, #16
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	60f8      	str	r0, [r7, #12]
 801ccb0:	60b9      	str	r1, [r7, #8]
 801ccb2:	1dbb      	adds	r3, r7, #6
 801ccb4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ccb6:	68fa      	ldr	r2, [r7, #12]
 801ccb8:	23a5      	movs	r3, #165	@ 0xa5
 801ccba:	009b      	lsls	r3, r3, #2
 801ccbc:	2103      	movs	r1, #3
 801ccbe:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801ccc0:	1dbb      	adds	r3, r7, #6
 801ccc2:	8819      	ldrh	r1, [r3, #0]
 801ccc4:	68fa      	ldr	r2, [r7, #12]
 801ccc6:	23ae      	movs	r3, #174	@ 0xae
 801ccc8:	005b      	lsls	r3, r3, #1
 801ccca:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cccc:	1dbb      	adds	r3, r7, #6
 801ccce:	8819      	ldrh	r1, [r3, #0]
 801ccd0:	68fa      	ldr	r2, [r7, #12]
 801ccd2:	23b0      	movs	r3, #176	@ 0xb0
 801ccd4:	005b      	lsls	r3, r3, #1
 801ccd6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ccd8:	1dbb      	adds	r3, r7, #6
 801ccda:	881b      	ldrh	r3, [r3, #0]
 801ccdc:	68ba      	ldr	r2, [r7, #8]
 801ccde:	68f8      	ldr	r0, [r7, #12]
 801cce0:	2100      	movs	r1, #0
 801cce2:	f000 fd41 	bl	801d768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cce6:	2300      	movs	r3, #0
}
 801cce8:	0018      	movs	r0, r3
 801ccea:	46bd      	mov	sp, r7
 801ccec:	b004      	add	sp, #16
 801ccee:	bd80      	pop	{r7, pc}

0801ccf0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b084      	sub	sp, #16
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	60f8      	str	r0, [r7, #12]
 801ccf8:	60b9      	str	r1, [r7, #8]
 801ccfa:	1dbb      	adds	r3, r7, #6
 801ccfc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ccfe:	1dbb      	adds	r3, r7, #6
 801cd00:	881b      	ldrh	r3, [r3, #0]
 801cd02:	68ba      	ldr	r2, [r7, #8]
 801cd04:	68f8      	ldr	r0, [r7, #12]
 801cd06:	2100      	movs	r1, #0
 801cd08:	f000 fd2e 	bl	801d768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cd0c:	2300      	movs	r3, #0
}
 801cd0e:	0018      	movs	r0, r3
 801cd10:	46bd      	mov	sp, r7
 801cd12:	b004      	add	sp, #16
 801cd14:	bd80      	pop	{r7, pc}

0801cd16 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cd16:	b580      	push	{r7, lr}
 801cd18:	b082      	sub	sp, #8
 801cd1a:	af00      	add	r7, sp, #0
 801cd1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cd1e:	687a      	ldr	r2, [r7, #4]
 801cd20:	23a5      	movs	r3, #165	@ 0xa5
 801cd22:	009b      	lsls	r3, r3, #2
 801cd24:	2104      	movs	r1, #4
 801cd26:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cd28:	6878      	ldr	r0, [r7, #4]
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	2200      	movs	r2, #0
 801cd2e:	2100      	movs	r1, #0
 801cd30:	f000 fce3 	bl	801d6fa <USBD_LL_Transmit>

  return USBD_OK;
 801cd34:	2300      	movs	r3, #0
}
 801cd36:	0018      	movs	r0, r3
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	b002      	add	sp, #8
 801cd3c:	bd80      	pop	{r7, pc}

0801cd3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cd3e:	b580      	push	{r7, lr}
 801cd40:	b082      	sub	sp, #8
 801cd42:	af00      	add	r7, sp, #0
 801cd44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cd46:	687a      	ldr	r2, [r7, #4]
 801cd48:	23a5      	movs	r3, #165	@ 0xa5
 801cd4a:	009b      	lsls	r3, r3, #2
 801cd4c:	2105      	movs	r1, #5
 801cd4e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cd50:	6878      	ldr	r0, [r7, #4]
 801cd52:	2300      	movs	r3, #0
 801cd54:	2200      	movs	r2, #0
 801cd56:	2100      	movs	r1, #0
 801cd58:	f000 fd06 	bl	801d768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cd5c:	2300      	movs	r3, #0
}
 801cd5e:	0018      	movs	r0, r3
 801cd60:	46bd      	mov	sp, r7
 801cd62:	b002      	add	sp, #8
 801cd64:	bd80      	pop	{r7, pc}
	...

0801cd68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cd6c:	4914      	ldr	r1, [pc, #80]	@ (801cdc0 <MX_USB_DEVICE_Init+0x58>)
 801cd6e:	4b15      	ldr	r3, [pc, #84]	@ (801cdc4 <MX_USB_DEVICE_Init+0x5c>)
 801cd70:	2200      	movs	r2, #0
 801cd72:	0018      	movs	r0, r3
 801cd74:	f7fe fdec 	bl	801b950 <USBD_Init>
 801cd78:	1e03      	subs	r3, r0, #0
 801cd7a:	d001      	beq.n	801cd80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cd7c:	f7eb fada 	bl	8008334 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cd80:	4a11      	ldr	r2, [pc, #68]	@ (801cdc8 <MX_USB_DEVICE_Init+0x60>)
 801cd82:	4b10      	ldr	r3, [pc, #64]	@ (801cdc4 <MX_USB_DEVICE_Init+0x5c>)
 801cd84:	0011      	movs	r1, r2
 801cd86:	0018      	movs	r0, r3
 801cd88:	f7fe fe13 	bl	801b9b2 <USBD_RegisterClass>
 801cd8c:	1e03      	subs	r3, r0, #0
 801cd8e:	d001      	beq.n	801cd94 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cd90:	f7eb fad0 	bl	8008334 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cd94:	4a0d      	ldr	r2, [pc, #52]	@ (801cdcc <MX_USB_DEVICE_Init+0x64>)
 801cd96:	4b0b      	ldr	r3, [pc, #44]	@ (801cdc4 <MX_USB_DEVICE_Init+0x5c>)
 801cd98:	0011      	movs	r1, r2
 801cd9a:	0018      	movs	r0, r3
 801cd9c:	f7fe fd28 	bl	801b7f0 <USBD_CDC_RegisterInterface>
 801cda0:	1e03      	subs	r3, r0, #0
 801cda2:	d001      	beq.n	801cda8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cda4:	f7eb fac6 	bl	8008334 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cda8:	4b06      	ldr	r3, [pc, #24]	@ (801cdc4 <MX_USB_DEVICE_Init+0x5c>)
 801cdaa:	0018      	movs	r0, r3
 801cdac:	f7fe fe21 	bl	801b9f2 <USBD_Start>
 801cdb0:	1e03      	subs	r3, r0, #0
 801cdb2:	d001      	beq.n	801cdb8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cdb4:	f7eb fabe 	bl	8008334 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cdb8:	46c0      	nop			@ (mov r8, r8)
 801cdba:	46bd      	mov	sp, r7
 801cdbc:	bd80      	pop	{r7, pc}
 801cdbe:	46c0      	nop			@ (mov r8, r8)
 801cdc0:	20000208 	.word	0x20000208
 801cdc4:	200023e8 	.word	0x200023e8
 801cdc8:	200000f4 	.word	0x200000f4
 801cdcc:	200001f8 	.word	0x200001f8

0801cdd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cdd4:	4907      	ldr	r1, [pc, #28]	@ (801cdf4 <CDC_Init_FS+0x24>)
 801cdd6:	4b08      	ldr	r3, [pc, #32]	@ (801cdf8 <CDC_Init_FS+0x28>)
 801cdd8:	2200      	movs	r2, #0
 801cdda:	0018      	movs	r0, r3
 801cddc:	f7fe fd23 	bl	801b826 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cde0:	4a06      	ldr	r2, [pc, #24]	@ (801cdfc <CDC_Init_FS+0x2c>)
 801cde2:	4b05      	ldr	r3, [pc, #20]	@ (801cdf8 <CDC_Init_FS+0x28>)
 801cde4:	0011      	movs	r1, r2
 801cde6:	0018      	movs	r0, r3
 801cde8:	f7fe fd39 	bl	801b85e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cdec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cdee:	0018      	movs	r0, r3
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	20002b6c 	.word	0x20002b6c
 801cdf8:	200023e8 	.word	0x200023e8
 801cdfc:	2000276c 	.word	0x2000276c

0801ce00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ce00:	b580      	push	{r7, lr}
 801ce02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ce04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ce06:	0018      	movs	r0, r3
 801ce08:	46bd      	mov	sp, r7
 801ce0a:	bd80      	pop	{r7, pc}

0801ce0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	b082      	sub	sp, #8
 801ce10:	af00      	add	r7, sp, #0
 801ce12:	6039      	str	r1, [r7, #0]
 801ce14:	0011      	movs	r1, r2
 801ce16:	1dfb      	adds	r3, r7, #7
 801ce18:	1c02      	adds	r2, r0, #0
 801ce1a:	701a      	strb	r2, [r3, #0]
 801ce1c:	1d3b      	adds	r3, r7, #4
 801ce1e:	1c0a      	adds	r2, r1, #0
 801ce20:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ce22:	1dfb      	adds	r3, r7, #7
 801ce24:	781b      	ldrb	r3, [r3, #0]
 801ce26:	2b23      	cmp	r3, #35	@ 0x23
 801ce28:	d804      	bhi.n	801ce34 <CDC_Control_FS+0x28>
 801ce2a:	009a      	lsls	r2, r3, #2
 801ce2c:	4b04      	ldr	r3, [pc, #16]	@ (801ce40 <CDC_Control_FS+0x34>)
 801ce2e:	18d3      	adds	r3, r2, r3
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ce34:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801ce36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ce38:	0018      	movs	r0, r3
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	b002      	add	sp, #8
 801ce3e:	bd80      	pop	{r7, pc}
 801ce40:	080258c8 	.word	0x080258c8

0801ce44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
 801ce4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801ce4e:	4b12      	ldr	r3, [pc, #72]	@ (801ce98 <CDC_Receive_FS+0x54>)
 801ce50:	781b      	ldrb	r3, [r3, #0]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d013      	beq.n	801ce7e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801ce56:	683b      	ldr	r3, [r7, #0]
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	b29a      	uxth	r2, r3
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	425b      	negs	r3, r3
 801ce60:	6879      	ldr	r1, [r7, #4]
 801ce62:	480e      	ldr	r0, [pc, #56]	@ (801ce9c <CDC_Receive_FS+0x58>)
 801ce64:	f7fa fa46 	bl	80172f4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ce68:	687a      	ldr	r2, [r7, #4]
 801ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (801cea0 <CDC_Receive_FS+0x5c>)
 801ce6c:	0011      	movs	r1, r2
 801ce6e:	0018      	movs	r0, r3
 801ce70:	f7fe fcf5 	bl	801b85e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ce74:	4b0a      	ldr	r3, [pc, #40]	@ (801cea0 <CDC_Receive_FS+0x5c>)
 801ce76:	0018      	movs	r0, r3
 801ce78:	f7fe fd3c 	bl	801b8f4 <USBD_CDC_ReceivePacket>
 801ce7c:	e006      	b.n	801ce8c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801ce7e:	683b      	ldr	r3, [r7, #0]
 801ce80:	681a      	ldr	r2, [r3, #0]
 801ce82:	4b08      	ldr	r3, [pc, #32]	@ (801cea4 <CDC_Receive_FS+0x60>)
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	18d2      	adds	r2, r2, r3
 801ce88:	4b06      	ldr	r3, [pc, #24]	@ (801cea4 <CDC_Receive_FS+0x60>)
 801ce8a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801ce8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ce8e:	0018      	movs	r0, r3
 801ce90:	46bd      	mov	sp, r7
 801ce92:	b002      	add	sp, #8
 801ce94:	bd80      	pop	{r7, pc}
 801ce96:	46c0      	nop			@ (mov r8, r8)
 801ce98:	200026ac 	.word	0x200026ac
 801ce9c:	200026b0 	.word	0x200026b0
 801cea0:	200023e8 	.word	0x200023e8
 801cea4:	20002768 	.word	0x20002768

0801cea8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cea8:	b5b0      	push	{r4, r5, r7, lr}
 801ceaa:	b084      	sub	sp, #16
 801ceac:	af00      	add	r7, sp, #0
 801ceae:	6078      	str	r0, [r7, #4]
 801ceb0:	000a      	movs	r2, r1
 801ceb2:	1cbb      	adds	r3, r7, #2
 801ceb4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801ceb6:	230f      	movs	r3, #15
 801ceb8:	18fb      	adds	r3, r7, r3
 801ceba:	2200      	movs	r2, #0
 801cebc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cebe:	4a11      	ldr	r2, [pc, #68]	@ (801cf04 <CDC_Transmit_FS+0x5c>)
 801cec0:	23ae      	movs	r3, #174	@ 0xae
 801cec2:	009b      	lsls	r3, r3, #2
 801cec4:	58d3      	ldr	r3, [r2, r3]
 801cec6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cec8:	68ba      	ldr	r2, [r7, #8]
 801ceca:	2385      	movs	r3, #133	@ 0x85
 801cecc:	009b      	lsls	r3, r3, #2
 801cece:	58d3      	ldr	r3, [r2, r3]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d001      	beq.n	801ced8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801ced4:	2301      	movs	r3, #1
 801ced6:	e010      	b.n	801cefa <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801ced8:	1cbb      	adds	r3, r7, #2
 801ceda:	881a      	ldrh	r2, [r3, #0]
 801cedc:	6879      	ldr	r1, [r7, #4]
 801cede:	4b09      	ldr	r3, [pc, #36]	@ (801cf04 <CDC_Transmit_FS+0x5c>)
 801cee0:	0018      	movs	r0, r3
 801cee2:	f7fe fca0 	bl	801b826 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cee6:	250f      	movs	r5, #15
 801cee8:	197c      	adds	r4, r7, r5
 801ceea:	4b06      	ldr	r3, [pc, #24]	@ (801cf04 <CDC_Transmit_FS+0x5c>)
 801ceec:	0018      	movs	r0, r3
 801ceee:	f7fe fcca 	bl	801b886 <USBD_CDC_TransmitPacket>
 801cef2:	0003      	movs	r3, r0
 801cef4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cef6:	197b      	adds	r3, r7, r5
 801cef8:	781b      	ldrb	r3, [r3, #0]
}
 801cefa:	0018      	movs	r0, r3
 801cefc:	46bd      	mov	sp, r7
 801cefe:	b004      	add	sp, #16
 801cf00:	bdb0      	pop	{r4, r5, r7, pc}
 801cf02:	46c0      	nop			@ (mov r8, r8)
 801cf04:	200023e8 	.word	0x200023e8

0801cf08 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cf0c:	4b02      	ldr	r3, [pc, #8]	@ (801cf18 <EnableESPProg+0x10>)
 801cf0e:	2201      	movs	r2, #1
 801cf10:	701a      	strb	r2, [r3, #0]
}
 801cf12:	46c0      	nop			@ (mov r8, r8)
 801cf14:	46bd      	mov	sp, r7
 801cf16:	bd80      	pop	{r7, pc}
 801cf18:	200026ac 	.word	0x200026ac

0801cf1c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cf1c:	b580      	push	{r7, lr}
 801cf1e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cf20:	4b01      	ldr	r3, [pc, #4]	@ (801cf28 <GetUsbRxPointer+0xc>)
}
 801cf22:	0018      	movs	r0, r3
 801cf24:	46bd      	mov	sp, r7
 801cf26:	bd80      	pop	{r7, pc}
 801cf28:	2000276c 	.word	0x2000276c

0801cf2c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cf30:	4b07      	ldr	r3, [pc, #28]	@ (801cf50 <ResetUsbRxDataSize+0x24>)
 801cf32:	2200      	movs	r2, #0
 801cf34:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cf36:	4a07      	ldr	r2, [pc, #28]	@ (801cf54 <ResetUsbRxDataSize+0x28>)
 801cf38:	4b07      	ldr	r3, [pc, #28]	@ (801cf58 <ResetUsbRxDataSize+0x2c>)
 801cf3a:	0011      	movs	r1, r2
 801cf3c:	0018      	movs	r0, r3
 801cf3e:	f7fe fc8e 	bl	801b85e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cf42:	4b05      	ldr	r3, [pc, #20]	@ (801cf58 <ResetUsbRxDataSize+0x2c>)
 801cf44:	0018      	movs	r0, r3
 801cf46:	f7fe fcd5 	bl	801b8f4 <USBD_CDC_ReceivePacket>
}
 801cf4a:	46c0      	nop			@ (mov r8, r8)
 801cf4c:	46bd      	mov	sp, r7
 801cf4e:	bd80      	pop	{r7, pc}
 801cf50:	20002768 	.word	0x20002768
 801cf54:	2000276c 	.word	0x2000276c
 801cf58:	200023e8 	.word	0x200023e8

0801cf5c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cf5c:	b580      	push	{r7, lr}
 801cf5e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cf60:	4b02      	ldr	r3, [pc, #8]	@ (801cf6c <GetUsbRxDataSize+0x10>)
 801cf62:	681b      	ldr	r3, [r3, #0]
}
 801cf64:	0018      	movs	r0, r3
 801cf66:	46bd      	mov	sp, r7
 801cf68:	bd80      	pop	{r7, pc}
 801cf6a:	46c0      	nop			@ (mov r8, r8)
 801cf6c:	20002768 	.word	0x20002768

0801cf70 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b082      	sub	sp, #8
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801cf78:	687a      	ldr	r2, [r7, #4]
 801cf7a:	4b07      	ldr	r3, [pc, #28]	@ (801cf98 <GetUsbRxNextChunk+0x28>)
 801cf7c:	18d2      	adds	r2, r2, r3
 801cf7e:	4b07      	ldr	r3, [pc, #28]	@ (801cf9c <GetUsbRxNextChunk+0x2c>)
 801cf80:	0011      	movs	r1, r2
 801cf82:	0018      	movs	r0, r3
 801cf84:	f7fe fc6b 	bl	801b85e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cf88:	4b04      	ldr	r3, [pc, #16]	@ (801cf9c <GetUsbRxNextChunk+0x2c>)
 801cf8a:	0018      	movs	r0, r3
 801cf8c:	f7fe fcb2 	bl	801b8f4 <USBD_CDC_ReceivePacket>
}
 801cf90:	46c0      	nop			@ (mov r8, r8)
 801cf92:	46bd      	mov	sp, r7
 801cf94:	b002      	add	sp, #8
 801cf96:	bd80      	pop	{r7, pc}
 801cf98:	2000276c 	.word	0x2000276c
 801cf9c:	200023e8 	.word	0x200023e8

0801cfa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b082      	sub	sp, #8
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	0002      	movs	r2, r0
 801cfa8:	6039      	str	r1, [r7, #0]
 801cfaa:	1dfb      	adds	r3, r7, #7
 801cfac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cfae:	683b      	ldr	r3, [r7, #0]
 801cfb0:	2212      	movs	r2, #18
 801cfb2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cfb4:	4b02      	ldr	r3, [pc, #8]	@ (801cfc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cfb6:	0018      	movs	r0, r3
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	b002      	add	sp, #8
 801cfbc:	bd80      	pop	{r7, pc}
 801cfbe:	46c0      	nop			@ (mov r8, r8)
 801cfc0:	20000224 	.word	0x20000224

0801cfc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b082      	sub	sp, #8
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	0002      	movs	r2, r0
 801cfcc:	6039      	str	r1, [r7, #0]
 801cfce:	1dfb      	adds	r3, r7, #7
 801cfd0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	2204      	movs	r2, #4
 801cfd6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cfd8:	4b02      	ldr	r3, [pc, #8]	@ (801cfe4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cfda:	0018      	movs	r0, r3
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	b002      	add	sp, #8
 801cfe0:	bd80      	pop	{r7, pc}
 801cfe2:	46c0      	nop			@ (mov r8, r8)
 801cfe4:	20000238 	.word	0x20000238

0801cfe8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	0002      	movs	r2, r0
 801cff0:	6039      	str	r1, [r7, #0]
 801cff2:	1dfb      	adds	r3, r7, #7
 801cff4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cff6:	1dfb      	adds	r3, r7, #7
 801cff8:	781b      	ldrb	r3, [r3, #0]
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d106      	bne.n	801d00c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cffe:	683a      	ldr	r2, [r7, #0]
 801d000:	4908      	ldr	r1, [pc, #32]	@ (801d024 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d002:	4b09      	ldr	r3, [pc, #36]	@ (801d028 <USBD_FS_ProductStrDescriptor+0x40>)
 801d004:	0018      	movs	r0, r3
 801d006:	f7ff fdb1 	bl	801cb6c <USBD_GetString>
 801d00a:	e005      	b.n	801d018 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d00c:	683a      	ldr	r2, [r7, #0]
 801d00e:	4905      	ldr	r1, [pc, #20]	@ (801d024 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d010:	4b05      	ldr	r3, [pc, #20]	@ (801d028 <USBD_FS_ProductStrDescriptor+0x40>)
 801d012:	0018      	movs	r0, r3
 801d014:	f7ff fdaa 	bl	801cb6c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d018:	4b02      	ldr	r3, [pc, #8]	@ (801d024 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d01a:	0018      	movs	r0, r3
 801d01c:	46bd      	mov	sp, r7
 801d01e:	b002      	add	sp, #8
 801d020:	bd80      	pop	{r7, pc}
 801d022:	46c0      	nop			@ (mov r8, r8)
 801d024:	20002f6c 	.word	0x20002f6c
 801d028:	08025354 	.word	0x08025354

0801d02c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b082      	sub	sp, #8
 801d030:	af00      	add	r7, sp, #0
 801d032:	0002      	movs	r2, r0
 801d034:	6039      	str	r1, [r7, #0]
 801d036:	1dfb      	adds	r3, r7, #7
 801d038:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d03a:	683a      	ldr	r2, [r7, #0]
 801d03c:	4904      	ldr	r1, [pc, #16]	@ (801d050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d03e:	4b05      	ldr	r3, [pc, #20]	@ (801d054 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d040:	0018      	movs	r0, r3
 801d042:	f7ff fd93 	bl	801cb6c <USBD_GetString>
  return USBD_StrDesc;
 801d046:	4b02      	ldr	r3, [pc, #8]	@ (801d050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d048:	0018      	movs	r0, r3
 801d04a:	46bd      	mov	sp, r7
 801d04c:	b002      	add	sp, #8
 801d04e:	bd80      	pop	{r7, pc}
 801d050:	20002f6c 	.word	0x20002f6c
 801d054:	0802536c 	.word	0x0802536c

0801d058 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d058:	b580      	push	{r7, lr}
 801d05a:	b082      	sub	sp, #8
 801d05c:	af00      	add	r7, sp, #0
 801d05e:	0002      	movs	r2, r0
 801d060:	6039      	str	r1, [r7, #0]
 801d062:	1dfb      	adds	r3, r7, #7
 801d064:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d066:	683b      	ldr	r3, [r7, #0]
 801d068:	221a      	movs	r2, #26
 801d06a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d06c:	f000 f84c 	bl	801d108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d070:	4b02      	ldr	r3, [pc, #8]	@ (801d07c <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d072:	0018      	movs	r0, r3
 801d074:	46bd      	mov	sp, r7
 801d076:	b002      	add	sp, #8
 801d078:	bd80      	pop	{r7, pc}
 801d07a:	46c0      	nop			@ (mov r8, r8)
 801d07c:	2000023c 	.word	0x2000023c

0801d080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b082      	sub	sp, #8
 801d084:	af00      	add	r7, sp, #0
 801d086:	0002      	movs	r2, r0
 801d088:	6039      	str	r1, [r7, #0]
 801d08a:	1dfb      	adds	r3, r7, #7
 801d08c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d08e:	1dfb      	adds	r3, r7, #7
 801d090:	781b      	ldrb	r3, [r3, #0]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d106      	bne.n	801d0a4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d096:	683a      	ldr	r2, [r7, #0]
 801d098:	4908      	ldr	r1, [pc, #32]	@ (801d0bc <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d09a:	4b09      	ldr	r3, [pc, #36]	@ (801d0c0 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d09c:	0018      	movs	r0, r3
 801d09e:	f7ff fd65 	bl	801cb6c <USBD_GetString>
 801d0a2:	e005      	b.n	801d0b0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d0a4:	683a      	ldr	r2, [r7, #0]
 801d0a6:	4905      	ldr	r1, [pc, #20]	@ (801d0bc <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d0a8:	4b05      	ldr	r3, [pc, #20]	@ (801d0c0 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d0aa:	0018      	movs	r0, r3
 801d0ac:	f7ff fd5e 	bl	801cb6c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d0b0:	4b02      	ldr	r3, [pc, #8]	@ (801d0bc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d0b2:	0018      	movs	r0, r3
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	b002      	add	sp, #8
 801d0b8:	bd80      	pop	{r7, pc}
 801d0ba:	46c0      	nop			@ (mov r8, r8)
 801d0bc:	20002f6c 	.word	0x20002f6c
 801d0c0:	08025380 	.word	0x08025380

0801d0c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b082      	sub	sp, #8
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	0002      	movs	r2, r0
 801d0cc:	6039      	str	r1, [r7, #0]
 801d0ce:	1dfb      	adds	r3, r7, #7
 801d0d0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d0d2:	1dfb      	adds	r3, r7, #7
 801d0d4:	781b      	ldrb	r3, [r3, #0]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d106      	bne.n	801d0e8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d0da:	683a      	ldr	r2, [r7, #0]
 801d0dc:	4908      	ldr	r1, [pc, #32]	@ (801d100 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d0de:	4b09      	ldr	r3, [pc, #36]	@ (801d104 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d0e0:	0018      	movs	r0, r3
 801d0e2:	f7ff fd43 	bl	801cb6c <USBD_GetString>
 801d0e6:	e005      	b.n	801d0f4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d0e8:	683a      	ldr	r2, [r7, #0]
 801d0ea:	4905      	ldr	r1, [pc, #20]	@ (801d100 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d0ec:	4b05      	ldr	r3, [pc, #20]	@ (801d104 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d0ee:	0018      	movs	r0, r3
 801d0f0:	f7ff fd3c 	bl	801cb6c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d0f4:	4b02      	ldr	r3, [pc, #8]	@ (801d100 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d0f6:	0018      	movs	r0, r3
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	b002      	add	sp, #8
 801d0fc:	bd80      	pop	{r7, pc}
 801d0fe:	46c0      	nop			@ (mov r8, r8)
 801d100:	20002f6c 	.word	0x20002f6c
 801d104:	0802538c 	.word	0x0802538c

0801d108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d108:	b580      	push	{r7, lr}
 801d10a:	b084      	sub	sp, #16
 801d10c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d10e:	4b10      	ldr	r3, [pc, #64]	@ (801d150 <Get_SerialNum+0x48>)
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d114:	4b0f      	ldr	r3, [pc, #60]	@ (801d154 <Get_SerialNum+0x4c>)
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d11a:	4b0f      	ldr	r3, [pc, #60]	@ (801d158 <Get_SerialNum+0x50>)
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d120:	68fa      	ldr	r2, [r7, #12]
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	18d3      	adds	r3, r2, r3
 801d126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d00b      	beq.n	801d146 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d12e:	490b      	ldr	r1, [pc, #44]	@ (801d15c <Get_SerialNum+0x54>)
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	2208      	movs	r2, #8
 801d134:	0018      	movs	r0, r3
 801d136:	f000 f815 	bl	801d164 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d13a:	4909      	ldr	r1, [pc, #36]	@ (801d160 <Get_SerialNum+0x58>)
 801d13c:	68bb      	ldr	r3, [r7, #8]
 801d13e:	2204      	movs	r2, #4
 801d140:	0018      	movs	r0, r3
 801d142:	f000 f80f 	bl	801d164 <IntToUnicode>
  }
}
 801d146:	46c0      	nop			@ (mov r8, r8)
 801d148:	46bd      	mov	sp, r7
 801d14a:	b004      	add	sp, #16
 801d14c:	bd80      	pop	{r7, pc}
 801d14e:	46c0      	nop			@ (mov r8, r8)
 801d150:	1ff80050 	.word	0x1ff80050
 801d154:	1ff80054 	.word	0x1ff80054
 801d158:	1ff80058 	.word	0x1ff80058
 801d15c:	2000023e 	.word	0x2000023e
 801d160:	2000024e 	.word	0x2000024e

0801d164 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b086      	sub	sp, #24
 801d168:	af00      	add	r7, sp, #0
 801d16a:	60f8      	str	r0, [r7, #12]
 801d16c:	60b9      	str	r1, [r7, #8]
 801d16e:	1dfb      	adds	r3, r7, #7
 801d170:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d172:	2117      	movs	r1, #23
 801d174:	187b      	adds	r3, r7, r1
 801d176:	2200      	movs	r2, #0
 801d178:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d17a:	187b      	adds	r3, r7, r1
 801d17c:	2200      	movs	r2, #0
 801d17e:	701a      	strb	r2, [r3, #0]
 801d180:	e02f      	b.n	801d1e2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	0f1b      	lsrs	r3, r3, #28
 801d186:	2b09      	cmp	r3, #9
 801d188:	d80d      	bhi.n	801d1a6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	0f1b      	lsrs	r3, r3, #28
 801d18e:	b2da      	uxtb	r2, r3
 801d190:	2317      	movs	r3, #23
 801d192:	18fb      	adds	r3, r7, r3
 801d194:	781b      	ldrb	r3, [r3, #0]
 801d196:	005b      	lsls	r3, r3, #1
 801d198:	0019      	movs	r1, r3
 801d19a:	68bb      	ldr	r3, [r7, #8]
 801d19c:	185b      	adds	r3, r3, r1
 801d19e:	3230      	adds	r2, #48	@ 0x30
 801d1a0:	b2d2      	uxtb	r2, r2
 801d1a2:	701a      	strb	r2, [r3, #0]
 801d1a4:	e00c      	b.n	801d1c0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	0f1b      	lsrs	r3, r3, #28
 801d1aa:	b2da      	uxtb	r2, r3
 801d1ac:	2317      	movs	r3, #23
 801d1ae:	18fb      	adds	r3, r7, r3
 801d1b0:	781b      	ldrb	r3, [r3, #0]
 801d1b2:	005b      	lsls	r3, r3, #1
 801d1b4:	0019      	movs	r1, r3
 801d1b6:	68bb      	ldr	r3, [r7, #8]
 801d1b8:	185b      	adds	r3, r3, r1
 801d1ba:	3237      	adds	r2, #55	@ 0x37
 801d1bc:	b2d2      	uxtb	r2, r2
 801d1be:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	011b      	lsls	r3, r3, #4
 801d1c4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d1c6:	2117      	movs	r1, #23
 801d1c8:	187b      	adds	r3, r7, r1
 801d1ca:	781b      	ldrb	r3, [r3, #0]
 801d1cc:	005b      	lsls	r3, r3, #1
 801d1ce:	3301      	adds	r3, #1
 801d1d0:	68ba      	ldr	r2, [r7, #8]
 801d1d2:	18d3      	adds	r3, r2, r3
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d1d8:	187b      	adds	r3, r7, r1
 801d1da:	781a      	ldrb	r2, [r3, #0]
 801d1dc:	187b      	adds	r3, r7, r1
 801d1de:	3201      	adds	r2, #1
 801d1e0:	701a      	strb	r2, [r3, #0]
 801d1e2:	2317      	movs	r3, #23
 801d1e4:	18fa      	adds	r2, r7, r3
 801d1e6:	1dfb      	adds	r3, r7, #7
 801d1e8:	7812      	ldrb	r2, [r2, #0]
 801d1ea:	781b      	ldrb	r3, [r3, #0]
 801d1ec:	429a      	cmp	r2, r3
 801d1ee:	d3c8      	bcc.n	801d182 <IntToUnicode+0x1e>
  }
}
 801d1f0:	46c0      	nop			@ (mov r8, r8)
 801d1f2:	46c0      	nop			@ (mov r8, r8)
 801d1f4:	46bd      	mov	sp, r7
 801d1f6:	b006      	add	sp, #24
 801d1f8:	bd80      	pop	{r7, pc}
	...

0801d1fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d1fc:	b580      	push	{r7, lr}
 801d1fe:	b082      	sub	sp, #8
 801d200:	af00      	add	r7, sp, #0
 801d202:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4a0a      	ldr	r2, [pc, #40]	@ (801d234 <HAL_PCD_MspInit+0x38>)
 801d20a:	4293      	cmp	r3, r2
 801d20c:	d10e      	bne.n	801d22c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d20e:	4b0a      	ldr	r3, [pc, #40]	@ (801d238 <HAL_PCD_MspInit+0x3c>)
 801d210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d212:	4b09      	ldr	r3, [pc, #36]	@ (801d238 <HAL_PCD_MspInit+0x3c>)
 801d214:	2180      	movs	r1, #128	@ 0x80
 801d216:	0409      	lsls	r1, r1, #16
 801d218:	430a      	orrs	r2, r1
 801d21a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d21c:	2200      	movs	r2, #0
 801d21e:	2100      	movs	r1, #0
 801d220:	201f      	movs	r0, #31
 801d222:	f7f2 fadf 	bl	800f7e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d226:	201f      	movs	r0, #31
 801d228:	f7f2 faf1 	bl	800f80e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d22c:	46c0      	nop			@ (mov r8, r8)
 801d22e:	46bd      	mov	sp, r7
 801d230:	b002      	add	sp, #8
 801d232:	bd80      	pop	{r7, pc}
 801d234:	40005c00 	.word	0x40005c00
 801d238:	40021000 	.word	0x40021000

0801d23c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b082      	sub	sp, #8
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d244:	687a      	ldr	r2, [r7, #4]
 801d246:	23bc      	movs	r3, #188	@ 0xbc
 801d248:	009b      	lsls	r3, r3, #2
 801d24a:	58d2      	ldr	r2, [r2, r3]
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	21ac      	movs	r1, #172	@ 0xac
 801d250:	0089      	lsls	r1, r1, #2
 801d252:	468c      	mov	ip, r1
 801d254:	4463      	add	r3, ip
 801d256:	0019      	movs	r1, r3
 801d258:	0010      	movs	r0, r2
 801d25a:	f7fe fc1d 	bl	801ba98 <USBD_LL_SetupStage>
}
 801d25e:	46c0      	nop			@ (mov r8, r8)
 801d260:	46bd      	mov	sp, r7
 801d262:	b002      	add	sp, #8
 801d264:	bd80      	pop	{r7, pc}

0801d266 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d266:	b590      	push	{r4, r7, lr}
 801d268:	b083      	sub	sp, #12
 801d26a:	af00      	add	r7, sp, #0
 801d26c:	6078      	str	r0, [r7, #4]
 801d26e:	000a      	movs	r2, r1
 801d270:	1cfb      	adds	r3, r7, #3
 801d272:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d274:	687a      	ldr	r2, [r7, #4]
 801d276:	23bc      	movs	r3, #188	@ 0xbc
 801d278:	009b      	lsls	r3, r3, #2
 801d27a:	58d4      	ldr	r4, [r2, r3]
 801d27c:	1cfb      	adds	r3, r7, #3
 801d27e:	781a      	ldrb	r2, [r3, #0]
 801d280:	6878      	ldr	r0, [r7, #4]
 801d282:	23be      	movs	r3, #190	@ 0xbe
 801d284:	0059      	lsls	r1, r3, #1
 801d286:	0013      	movs	r3, r2
 801d288:	009b      	lsls	r3, r3, #2
 801d28a:	189b      	adds	r3, r3, r2
 801d28c:	00db      	lsls	r3, r3, #3
 801d28e:	18c3      	adds	r3, r0, r3
 801d290:	185b      	adds	r3, r3, r1
 801d292:	681a      	ldr	r2, [r3, #0]
 801d294:	1cfb      	adds	r3, r7, #3
 801d296:	781b      	ldrb	r3, [r3, #0]
 801d298:	0019      	movs	r1, r3
 801d29a:	0020      	movs	r0, r4
 801d29c:	f7fe fc5a 	bl	801bb54 <USBD_LL_DataOutStage>
}
 801d2a0:	46c0      	nop			@ (mov r8, r8)
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	b003      	add	sp, #12
 801d2a6:	bd90      	pop	{r4, r7, pc}

0801d2a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2a8:	b580      	push	{r7, lr}
 801d2aa:	b082      	sub	sp, #8
 801d2ac:	af00      	add	r7, sp, #0
 801d2ae:	6078      	str	r0, [r7, #4]
 801d2b0:	000a      	movs	r2, r1
 801d2b2:	1cfb      	adds	r3, r7, #3
 801d2b4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d2b6:	687a      	ldr	r2, [r7, #4]
 801d2b8:	23bc      	movs	r3, #188	@ 0xbc
 801d2ba:	009b      	lsls	r3, r3, #2
 801d2bc:	58d0      	ldr	r0, [r2, r3]
 801d2be:	1cfb      	adds	r3, r7, #3
 801d2c0:	781a      	ldrb	r2, [r3, #0]
 801d2c2:	6879      	ldr	r1, [r7, #4]
 801d2c4:	0013      	movs	r3, r2
 801d2c6:	009b      	lsls	r3, r3, #2
 801d2c8:	189b      	adds	r3, r3, r2
 801d2ca:	00db      	lsls	r3, r3, #3
 801d2cc:	18cb      	adds	r3, r1, r3
 801d2ce:	333c      	adds	r3, #60	@ 0x3c
 801d2d0:	681a      	ldr	r2, [r3, #0]
 801d2d2:	1cfb      	adds	r3, r7, #3
 801d2d4:	781b      	ldrb	r3, [r3, #0]
 801d2d6:	0019      	movs	r1, r3
 801d2d8:	f7fe fcbe 	bl	801bc58 <USBD_LL_DataInStage>
}
 801d2dc:	46c0      	nop			@ (mov r8, r8)
 801d2de:	46bd      	mov	sp, r7
 801d2e0:	b002      	add	sp, #8
 801d2e2:	bd80      	pop	{r7, pc}

0801d2e4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b082      	sub	sp, #8
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d2ec:	687a      	ldr	r2, [r7, #4]
 801d2ee:	23bc      	movs	r3, #188	@ 0xbc
 801d2f0:	009b      	lsls	r3, r3, #2
 801d2f2:	58d3      	ldr	r3, [r2, r3]
 801d2f4:	0018      	movs	r0, r3
 801d2f6:	f7fe fdf5 	bl	801bee4 <USBD_LL_SOF>
}
 801d2fa:	46c0      	nop			@ (mov r8, r8)
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	b002      	add	sp, #8
 801d300:	bd80      	pop	{r7, pc}

0801d302 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d302:	b580      	push	{r7, lr}
 801d304:	b084      	sub	sp, #16
 801d306:	af00      	add	r7, sp, #0
 801d308:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d30a:	230f      	movs	r3, #15
 801d30c:	18fb      	adds	r3, r7, r3
 801d30e:	2201      	movs	r2, #1
 801d310:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	689b      	ldr	r3, [r3, #8]
 801d316:	2b02      	cmp	r3, #2
 801d318:	d001      	beq.n	801d31e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d31a:	f7eb f80b 	bl	8008334 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d31e:	687a      	ldr	r2, [r7, #4]
 801d320:	23bc      	movs	r3, #188	@ 0xbc
 801d322:	009b      	lsls	r3, r3, #2
 801d324:	58d2      	ldr	r2, [r2, r3]
 801d326:	230f      	movs	r3, #15
 801d328:	18fb      	adds	r3, r7, r3
 801d32a:	781b      	ldrb	r3, [r3, #0]
 801d32c:	0019      	movs	r1, r3
 801d32e:	0010      	movs	r0, r2
 801d330:	f7fe fd97 	bl	801be62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d334:	687a      	ldr	r2, [r7, #4]
 801d336:	23bc      	movs	r3, #188	@ 0xbc
 801d338:	009b      	lsls	r3, r3, #2
 801d33a:	58d3      	ldr	r3, [r2, r3]
 801d33c:	0018      	movs	r0, r3
 801d33e:	f7fe fd48 	bl	801bdd2 <USBD_LL_Reset>
}
 801d342:	46c0      	nop			@ (mov r8, r8)
 801d344:	46bd      	mov	sp, r7
 801d346:	b004      	add	sp, #16
 801d348:	bd80      	pop	{r7, pc}
	...

0801d34c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d34c:	b580      	push	{r7, lr}
 801d34e:	b082      	sub	sp, #8
 801d350:	af00      	add	r7, sp, #0
 801d352:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d354:	687a      	ldr	r2, [r7, #4]
 801d356:	23bc      	movs	r3, #188	@ 0xbc
 801d358:	009b      	lsls	r3, r3, #2
 801d35a:	58d3      	ldr	r3, [r2, r3]
 801d35c:	0018      	movs	r0, r3
 801d35e:	f7fe fd91 	bl	801be84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	699b      	ldr	r3, [r3, #24]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d005      	beq.n	801d376 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d36a:	4b05      	ldr	r3, [pc, #20]	@ (801d380 <HAL_PCD_SuspendCallback+0x34>)
 801d36c:	691a      	ldr	r2, [r3, #16]
 801d36e:	4b04      	ldr	r3, [pc, #16]	@ (801d380 <HAL_PCD_SuspendCallback+0x34>)
 801d370:	2106      	movs	r1, #6
 801d372:	430a      	orrs	r2, r1
 801d374:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d376:	46c0      	nop			@ (mov r8, r8)
 801d378:	46bd      	mov	sp, r7
 801d37a:	b002      	add	sp, #8
 801d37c:	bd80      	pop	{r7, pc}
 801d37e:	46c0      	nop			@ (mov r8, r8)
 801d380:	e000ed00 	.word	0xe000ed00

0801d384 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d384:	b580      	push	{r7, lr}
 801d386:	b082      	sub	sp, #8
 801d388:	af00      	add	r7, sp, #0
 801d38a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	699b      	ldr	r3, [r3, #24]
 801d390:	2b00      	cmp	r3, #0
 801d392:	d007      	beq.n	801d3a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d394:	4b09      	ldr	r3, [pc, #36]	@ (801d3bc <HAL_PCD_ResumeCallback+0x38>)
 801d396:	691a      	ldr	r2, [r3, #16]
 801d398:	4b08      	ldr	r3, [pc, #32]	@ (801d3bc <HAL_PCD_ResumeCallback+0x38>)
 801d39a:	2106      	movs	r1, #6
 801d39c:	438a      	bics	r2, r1
 801d39e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d3a0:	f000 fa44 	bl	801d82c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d3a4:	687a      	ldr	r2, [r7, #4]
 801d3a6:	23bc      	movs	r3, #188	@ 0xbc
 801d3a8:	009b      	lsls	r3, r3, #2
 801d3aa:	58d3      	ldr	r3, [r2, r3]
 801d3ac:	0018      	movs	r0, r3
 801d3ae:	f7fe fd81 	bl	801beb4 <USBD_LL_Resume>
}
 801d3b2:	46c0      	nop			@ (mov r8, r8)
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	b002      	add	sp, #8
 801d3b8:	bd80      	pop	{r7, pc}
 801d3ba:	46c0      	nop			@ (mov r8, r8)
 801d3bc:	e000ed00 	.word	0xe000ed00

0801d3c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b082      	sub	sp, #8
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d3c8:	4a2d      	ldr	r2, [pc, #180]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3ca:	23bc      	movs	r3, #188	@ 0xbc
 801d3cc:	009b      	lsls	r3, r3, #2
 801d3ce:	6879      	ldr	r1, [r7, #4]
 801d3d0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d3d2:	687a      	ldr	r2, [r7, #4]
 801d3d4:	23b0      	movs	r3, #176	@ 0xb0
 801d3d6:	009b      	lsls	r3, r3, #2
 801d3d8:	4929      	ldr	r1, [pc, #164]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3da:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d3dc:	4b28      	ldr	r3, [pc, #160]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3de:	4a29      	ldr	r2, [pc, #164]	@ (801d484 <USBD_LL_Init+0xc4>)
 801d3e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d3e2:	4b27      	ldr	r3, [pc, #156]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3e4:	2208      	movs	r2, #8
 801d3e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d3e8:	4b25      	ldr	r3, [pc, #148]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3ea:	2202      	movs	r2, #2
 801d3ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d3ee:	4b24      	ldr	r3, [pc, #144]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3f0:	2202      	movs	r2, #2
 801d3f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d3f4:	4b22      	ldr	r3, [pc, #136]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d3fa:	4b21      	ldr	r3, [pc, #132]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d3fc:	2200      	movs	r2, #0
 801d3fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d400:	4b1f      	ldr	r3, [pc, #124]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d402:	2200      	movs	r2, #0
 801d404:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d406:	4b1e      	ldr	r3, [pc, #120]	@ (801d480 <USBD_LL_Init+0xc0>)
 801d408:	0018      	movs	r0, r3
 801d40a:	f7f5 ff95 	bl	8013338 <HAL_PCD_Init>
 801d40e:	1e03      	subs	r3, r0, #0
 801d410:	d001      	beq.n	801d416 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d412:	f7ea ff8f 	bl	8008334 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d416:	687a      	ldr	r2, [r7, #4]
 801d418:	23b0      	movs	r3, #176	@ 0xb0
 801d41a:	009b      	lsls	r3, r3, #2
 801d41c:	58d0      	ldr	r0, [r2, r3]
 801d41e:	2318      	movs	r3, #24
 801d420:	2200      	movs	r2, #0
 801d422:	2100      	movs	r1, #0
 801d424:	f7f7 fd56 	bl	8014ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d428:	687a      	ldr	r2, [r7, #4]
 801d42a:	23b0      	movs	r3, #176	@ 0xb0
 801d42c:	009b      	lsls	r3, r3, #2
 801d42e:	58d0      	ldr	r0, [r2, r3]
 801d430:	2358      	movs	r3, #88	@ 0x58
 801d432:	2200      	movs	r2, #0
 801d434:	2180      	movs	r1, #128	@ 0x80
 801d436:	f7f7 fd4d 	bl	8014ed4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d43a:	687a      	ldr	r2, [r7, #4]
 801d43c:	23b0      	movs	r3, #176	@ 0xb0
 801d43e:	009b      	lsls	r3, r3, #2
 801d440:	58d0      	ldr	r0, [r2, r3]
 801d442:	23c0      	movs	r3, #192	@ 0xc0
 801d444:	2200      	movs	r2, #0
 801d446:	2181      	movs	r1, #129	@ 0x81
 801d448:	f7f7 fd44 	bl	8014ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d44c:	687a      	ldr	r2, [r7, #4]
 801d44e:	23b0      	movs	r3, #176	@ 0xb0
 801d450:	009b      	lsls	r3, r3, #2
 801d452:	58d0      	ldr	r0, [r2, r3]
 801d454:	2388      	movs	r3, #136	@ 0x88
 801d456:	005b      	lsls	r3, r3, #1
 801d458:	2200      	movs	r2, #0
 801d45a:	2101      	movs	r1, #1
 801d45c:	f7f7 fd3a 	bl	8014ed4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d460:	687a      	ldr	r2, [r7, #4]
 801d462:	23b0      	movs	r3, #176	@ 0xb0
 801d464:	009b      	lsls	r3, r3, #2
 801d466:	58d0      	ldr	r0, [r2, r3]
 801d468:	2380      	movs	r3, #128	@ 0x80
 801d46a:	005b      	lsls	r3, r3, #1
 801d46c:	2200      	movs	r2, #0
 801d46e:	2182      	movs	r1, #130	@ 0x82
 801d470:	f7f7 fd30 	bl	8014ed4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d474:	2300      	movs	r3, #0
}
 801d476:	0018      	movs	r0, r3
 801d478:	46bd      	mov	sp, r7
 801d47a:	b002      	add	sp, #8
 801d47c:	bd80      	pop	{r7, pc}
 801d47e:	46c0      	nop			@ (mov r8, r8)
 801d480:	2000316c 	.word	0x2000316c
 801d484:	40005c00 	.word	0x40005c00

0801d488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d48a:	b085      	sub	sp, #20
 801d48c:	af00      	add	r7, sp, #0
 801d48e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d490:	210f      	movs	r1, #15
 801d492:	187b      	adds	r3, r7, r1
 801d494:	2200      	movs	r2, #0
 801d496:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d498:	260e      	movs	r6, #14
 801d49a:	19bb      	adds	r3, r7, r6
 801d49c:	2200      	movs	r2, #0
 801d49e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d4a0:	687a      	ldr	r2, [r7, #4]
 801d4a2:	23b0      	movs	r3, #176	@ 0xb0
 801d4a4:	009b      	lsls	r3, r3, #2
 801d4a6:	58d3      	ldr	r3, [r2, r3]
 801d4a8:	000d      	movs	r5, r1
 801d4aa:	187c      	adds	r4, r7, r1
 801d4ac:	0018      	movs	r0, r3
 801d4ae:	f7f6 f843 	bl	8013538 <HAL_PCD_Start>
 801d4b2:	0003      	movs	r3, r0
 801d4b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4b6:	19bc      	adds	r4, r7, r6
 801d4b8:	197b      	adds	r3, r7, r5
 801d4ba:	781b      	ldrb	r3, [r3, #0]
 801d4bc:	0018      	movs	r0, r3
 801d4be:	f000 f9bc 	bl	801d83a <USBD_Get_USB_Status>
 801d4c2:	0003      	movs	r3, r0
 801d4c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4c6:	19bb      	adds	r3, r7, r6
 801d4c8:	781b      	ldrb	r3, [r3, #0]
}
 801d4ca:	0018      	movs	r0, r3
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	b005      	add	sp, #20
 801d4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4d4:	b085      	sub	sp, #20
 801d4d6:	af00      	add	r7, sp, #0
 801d4d8:	6078      	str	r0, [r7, #4]
 801d4da:	000c      	movs	r4, r1
 801d4dc:	0010      	movs	r0, r2
 801d4de:	0019      	movs	r1, r3
 801d4e0:	1cfb      	adds	r3, r7, #3
 801d4e2:	1c22      	adds	r2, r4, #0
 801d4e4:	701a      	strb	r2, [r3, #0]
 801d4e6:	1cbb      	adds	r3, r7, #2
 801d4e8:	1c02      	adds	r2, r0, #0
 801d4ea:	701a      	strb	r2, [r3, #0]
 801d4ec:	003b      	movs	r3, r7
 801d4ee:	1c0a      	adds	r2, r1, #0
 801d4f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4f2:	260f      	movs	r6, #15
 801d4f4:	19bb      	adds	r3, r7, r6
 801d4f6:	2200      	movs	r2, #0
 801d4f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4fa:	250e      	movs	r5, #14
 801d4fc:	197b      	adds	r3, r7, r5
 801d4fe:	2200      	movs	r2, #0
 801d500:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d502:	687a      	ldr	r2, [r7, #4]
 801d504:	23b0      	movs	r3, #176	@ 0xb0
 801d506:	009b      	lsls	r3, r3, #2
 801d508:	58d0      	ldr	r0, [r2, r3]
 801d50a:	19bc      	adds	r4, r7, r6
 801d50c:	1cbb      	adds	r3, r7, #2
 801d50e:	781d      	ldrb	r5, [r3, #0]
 801d510:	003b      	movs	r3, r7
 801d512:	881a      	ldrh	r2, [r3, #0]
 801d514:	1cfb      	adds	r3, r7, #3
 801d516:	7819      	ldrb	r1, [r3, #0]
 801d518:	002b      	movs	r3, r5
 801d51a:	f7f6 f9a2 	bl	8013862 <HAL_PCD_EP_Open>
 801d51e:	0003      	movs	r3, r0
 801d520:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d522:	250e      	movs	r5, #14
 801d524:	197c      	adds	r4, r7, r5
 801d526:	19bb      	adds	r3, r7, r6
 801d528:	781b      	ldrb	r3, [r3, #0]
 801d52a:	0018      	movs	r0, r3
 801d52c:	f000 f985 	bl	801d83a <USBD_Get_USB_Status>
 801d530:	0003      	movs	r3, r0
 801d532:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d534:	197b      	adds	r3, r7, r5
 801d536:	781b      	ldrb	r3, [r3, #0]
}
 801d538:	0018      	movs	r0, r3
 801d53a:	46bd      	mov	sp, r7
 801d53c:	b005      	add	sp, #20
 801d53e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d540 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d540:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d542:	b085      	sub	sp, #20
 801d544:	af00      	add	r7, sp, #0
 801d546:	6078      	str	r0, [r7, #4]
 801d548:	000a      	movs	r2, r1
 801d54a:	1cfb      	adds	r3, r7, #3
 801d54c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d54e:	210f      	movs	r1, #15
 801d550:	187b      	adds	r3, r7, r1
 801d552:	2200      	movs	r2, #0
 801d554:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d556:	260e      	movs	r6, #14
 801d558:	19bb      	adds	r3, r7, r6
 801d55a:	2200      	movs	r2, #0
 801d55c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d55e:	687a      	ldr	r2, [r7, #4]
 801d560:	23b0      	movs	r3, #176	@ 0xb0
 801d562:	009b      	lsls	r3, r3, #2
 801d564:	58d2      	ldr	r2, [r2, r3]
 801d566:	000d      	movs	r5, r1
 801d568:	187c      	adds	r4, r7, r1
 801d56a:	1cfb      	adds	r3, r7, #3
 801d56c:	781b      	ldrb	r3, [r3, #0]
 801d56e:	0019      	movs	r1, r3
 801d570:	0010      	movs	r0, r2
 801d572:	f7f6 f9e5 	bl	8013940 <HAL_PCD_EP_Close>
 801d576:	0003      	movs	r3, r0
 801d578:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d57a:	19bc      	adds	r4, r7, r6
 801d57c:	197b      	adds	r3, r7, r5
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	0018      	movs	r0, r3
 801d582:	f000 f95a 	bl	801d83a <USBD_Get_USB_Status>
 801d586:	0003      	movs	r3, r0
 801d588:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d58a:	19bb      	adds	r3, r7, r6
 801d58c:	781b      	ldrb	r3, [r3, #0]
}
 801d58e:	0018      	movs	r0, r3
 801d590:	46bd      	mov	sp, r7
 801d592:	b005      	add	sp, #20
 801d594:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d596 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d596:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d598:	b085      	sub	sp, #20
 801d59a:	af00      	add	r7, sp, #0
 801d59c:	6078      	str	r0, [r7, #4]
 801d59e:	000a      	movs	r2, r1
 801d5a0:	1cfb      	adds	r3, r7, #3
 801d5a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5a4:	210f      	movs	r1, #15
 801d5a6:	187b      	adds	r3, r7, r1
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5ac:	260e      	movs	r6, #14
 801d5ae:	19bb      	adds	r3, r7, r6
 801d5b0:	2200      	movs	r2, #0
 801d5b2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d5b4:	687a      	ldr	r2, [r7, #4]
 801d5b6:	23b0      	movs	r3, #176	@ 0xb0
 801d5b8:	009b      	lsls	r3, r3, #2
 801d5ba:	58d2      	ldr	r2, [r2, r3]
 801d5bc:	000d      	movs	r5, r1
 801d5be:	187c      	adds	r4, r7, r1
 801d5c0:	1cfb      	adds	r3, r7, #3
 801d5c2:	781b      	ldrb	r3, [r3, #0]
 801d5c4:	0019      	movs	r1, r3
 801d5c6:	0010      	movs	r0, r2
 801d5c8:	f7f6 fa97 	bl	8013afa <HAL_PCD_EP_SetStall>
 801d5cc:	0003      	movs	r3, r0
 801d5ce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5d0:	19bc      	adds	r4, r7, r6
 801d5d2:	197b      	adds	r3, r7, r5
 801d5d4:	781b      	ldrb	r3, [r3, #0]
 801d5d6:	0018      	movs	r0, r3
 801d5d8:	f000 f92f 	bl	801d83a <USBD_Get_USB_Status>
 801d5dc:	0003      	movs	r3, r0
 801d5de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d5e0:	19bb      	adds	r3, r7, r6
 801d5e2:	781b      	ldrb	r3, [r3, #0]
}
 801d5e4:	0018      	movs	r0, r3
 801d5e6:	46bd      	mov	sp, r7
 801d5e8:	b005      	add	sp, #20
 801d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5ee:	b085      	sub	sp, #20
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
 801d5f4:	000a      	movs	r2, r1
 801d5f6:	1cfb      	adds	r3, r7, #3
 801d5f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5fa:	210f      	movs	r1, #15
 801d5fc:	187b      	adds	r3, r7, r1
 801d5fe:	2200      	movs	r2, #0
 801d600:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d602:	260e      	movs	r6, #14
 801d604:	19bb      	adds	r3, r7, r6
 801d606:	2200      	movs	r2, #0
 801d608:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d60a:	687a      	ldr	r2, [r7, #4]
 801d60c:	23b0      	movs	r3, #176	@ 0xb0
 801d60e:	009b      	lsls	r3, r3, #2
 801d610:	58d2      	ldr	r2, [r2, r3]
 801d612:	000d      	movs	r5, r1
 801d614:	187c      	adds	r4, r7, r1
 801d616:	1cfb      	adds	r3, r7, #3
 801d618:	781b      	ldrb	r3, [r3, #0]
 801d61a:	0019      	movs	r1, r3
 801d61c:	0010      	movs	r0, r2
 801d61e:	f7f6 fac8 	bl	8013bb2 <HAL_PCD_EP_ClrStall>
 801d622:	0003      	movs	r3, r0
 801d624:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d626:	19bc      	adds	r4, r7, r6
 801d628:	197b      	adds	r3, r7, r5
 801d62a:	781b      	ldrb	r3, [r3, #0]
 801d62c:	0018      	movs	r0, r3
 801d62e:	f000 f904 	bl	801d83a <USBD_Get_USB_Status>
 801d632:	0003      	movs	r3, r0
 801d634:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d636:	19bb      	adds	r3, r7, r6
 801d638:	781b      	ldrb	r3, [r3, #0]
}
 801d63a:	0018      	movs	r0, r3
 801d63c:	46bd      	mov	sp, r7
 801d63e:	b005      	add	sp, #20
 801d640:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d642 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d642:	b580      	push	{r7, lr}
 801d644:	b084      	sub	sp, #16
 801d646:	af00      	add	r7, sp, #0
 801d648:	6078      	str	r0, [r7, #4]
 801d64a:	000a      	movs	r2, r1
 801d64c:	1cfb      	adds	r3, r7, #3
 801d64e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d650:	687a      	ldr	r2, [r7, #4]
 801d652:	23b0      	movs	r3, #176	@ 0xb0
 801d654:	009b      	lsls	r3, r3, #2
 801d656:	58d3      	ldr	r3, [r2, r3]
 801d658:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d65a:	1cfb      	adds	r3, r7, #3
 801d65c:	781b      	ldrb	r3, [r3, #0]
 801d65e:	b25b      	sxtb	r3, r3
 801d660:	2b00      	cmp	r3, #0
 801d662:	da0d      	bge.n	801d680 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d664:	1cfb      	adds	r3, r7, #3
 801d666:	781b      	ldrb	r3, [r3, #0]
 801d668:	227f      	movs	r2, #127	@ 0x7f
 801d66a:	4013      	ands	r3, r2
 801d66c:	68f9      	ldr	r1, [r7, #12]
 801d66e:	1c5a      	adds	r2, r3, #1
 801d670:	0013      	movs	r3, r2
 801d672:	009b      	lsls	r3, r3, #2
 801d674:	189b      	adds	r3, r3, r2
 801d676:	00db      	lsls	r3, r3, #3
 801d678:	18cb      	adds	r3, r1, r3
 801d67a:	3302      	adds	r3, #2
 801d67c:	781b      	ldrb	r3, [r3, #0]
 801d67e:	e00d      	b.n	801d69c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d680:	1cfb      	adds	r3, r7, #3
 801d682:	781b      	ldrb	r3, [r3, #0]
 801d684:	227f      	movs	r2, #127	@ 0x7f
 801d686:	401a      	ands	r2, r3
 801d688:	68f8      	ldr	r0, [r7, #12]
 801d68a:	23b5      	movs	r3, #181	@ 0xb5
 801d68c:	0059      	lsls	r1, r3, #1
 801d68e:	0013      	movs	r3, r2
 801d690:	009b      	lsls	r3, r3, #2
 801d692:	189b      	adds	r3, r3, r2
 801d694:	00db      	lsls	r3, r3, #3
 801d696:	18c3      	adds	r3, r0, r3
 801d698:	185b      	adds	r3, r3, r1
 801d69a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d69c:	0018      	movs	r0, r3
 801d69e:	46bd      	mov	sp, r7
 801d6a0:	b004      	add	sp, #16
 801d6a2:	bd80      	pop	{r7, pc}

0801d6a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6a6:	b085      	sub	sp, #20
 801d6a8:	af00      	add	r7, sp, #0
 801d6aa:	6078      	str	r0, [r7, #4]
 801d6ac:	000a      	movs	r2, r1
 801d6ae:	1cfb      	adds	r3, r7, #3
 801d6b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6b2:	210f      	movs	r1, #15
 801d6b4:	187b      	adds	r3, r7, r1
 801d6b6:	2200      	movs	r2, #0
 801d6b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6ba:	260e      	movs	r6, #14
 801d6bc:	19bb      	adds	r3, r7, r6
 801d6be:	2200      	movs	r2, #0
 801d6c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d6c2:	687a      	ldr	r2, [r7, #4]
 801d6c4:	23b0      	movs	r3, #176	@ 0xb0
 801d6c6:	009b      	lsls	r3, r3, #2
 801d6c8:	58d2      	ldr	r2, [r2, r3]
 801d6ca:	000d      	movs	r5, r1
 801d6cc:	187c      	adds	r4, r7, r1
 801d6ce:	1cfb      	adds	r3, r7, #3
 801d6d0:	781b      	ldrb	r3, [r3, #0]
 801d6d2:	0019      	movs	r1, r3
 801d6d4:	0010      	movs	r0, r2
 801d6d6:	f7f6 f899 	bl	801380c <HAL_PCD_SetAddress>
 801d6da:	0003      	movs	r3, r0
 801d6dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6de:	19bc      	adds	r4, r7, r6
 801d6e0:	197b      	adds	r3, r7, r5
 801d6e2:	781b      	ldrb	r3, [r3, #0]
 801d6e4:	0018      	movs	r0, r3
 801d6e6:	f000 f8a8 	bl	801d83a <USBD_Get_USB_Status>
 801d6ea:	0003      	movs	r3, r0
 801d6ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d6ee:	19bb      	adds	r3, r7, r6
 801d6f0:	781b      	ldrb	r3, [r3, #0]
}
 801d6f2:	0018      	movs	r0, r3
 801d6f4:	46bd      	mov	sp, r7
 801d6f6:	b005      	add	sp, #20
 801d6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6fc:	b087      	sub	sp, #28
 801d6fe:	af00      	add	r7, sp, #0
 801d700:	60f8      	str	r0, [r7, #12]
 801d702:	0008      	movs	r0, r1
 801d704:	607a      	str	r2, [r7, #4]
 801d706:	0019      	movs	r1, r3
 801d708:	230b      	movs	r3, #11
 801d70a:	18fb      	adds	r3, r7, r3
 801d70c:	1c02      	adds	r2, r0, #0
 801d70e:	701a      	strb	r2, [r3, #0]
 801d710:	2408      	movs	r4, #8
 801d712:	193b      	adds	r3, r7, r4
 801d714:	1c0a      	adds	r2, r1, #0
 801d716:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d718:	2117      	movs	r1, #23
 801d71a:	187b      	adds	r3, r7, r1
 801d71c:	2200      	movs	r2, #0
 801d71e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d720:	2516      	movs	r5, #22
 801d722:	197b      	adds	r3, r7, r5
 801d724:	2200      	movs	r2, #0
 801d726:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d728:	68fa      	ldr	r2, [r7, #12]
 801d72a:	23b0      	movs	r3, #176	@ 0xb0
 801d72c:	009b      	lsls	r3, r3, #2
 801d72e:	58d0      	ldr	r0, [r2, r3]
 801d730:	193b      	adds	r3, r7, r4
 801d732:	881d      	ldrh	r5, [r3, #0]
 801d734:	000e      	movs	r6, r1
 801d736:	187c      	adds	r4, r7, r1
 801d738:	687a      	ldr	r2, [r7, #4]
 801d73a:	230b      	movs	r3, #11
 801d73c:	18fb      	adds	r3, r7, r3
 801d73e:	7819      	ldrb	r1, [r3, #0]
 801d740:	002b      	movs	r3, r5
 801d742:	f7f6 f99e 	bl	8013a82 <HAL_PCD_EP_Transmit>
 801d746:	0003      	movs	r3, r0
 801d748:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d74a:	2516      	movs	r5, #22
 801d74c:	197c      	adds	r4, r7, r5
 801d74e:	19bb      	adds	r3, r7, r6
 801d750:	781b      	ldrb	r3, [r3, #0]
 801d752:	0018      	movs	r0, r3
 801d754:	f000 f871 	bl	801d83a <USBD_Get_USB_Status>
 801d758:	0003      	movs	r3, r0
 801d75a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d75c:	197b      	adds	r3, r7, r5
 801d75e:	781b      	ldrb	r3, [r3, #0]
}
 801d760:	0018      	movs	r0, r3
 801d762:	46bd      	mov	sp, r7
 801d764:	b007      	add	sp, #28
 801d766:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d768 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d76a:	b087      	sub	sp, #28
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	60f8      	str	r0, [r7, #12]
 801d770:	0008      	movs	r0, r1
 801d772:	607a      	str	r2, [r7, #4]
 801d774:	0019      	movs	r1, r3
 801d776:	230b      	movs	r3, #11
 801d778:	18fb      	adds	r3, r7, r3
 801d77a:	1c02      	adds	r2, r0, #0
 801d77c:	701a      	strb	r2, [r3, #0]
 801d77e:	2408      	movs	r4, #8
 801d780:	193b      	adds	r3, r7, r4
 801d782:	1c0a      	adds	r2, r1, #0
 801d784:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d786:	2117      	movs	r1, #23
 801d788:	187b      	adds	r3, r7, r1
 801d78a:	2200      	movs	r2, #0
 801d78c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d78e:	2516      	movs	r5, #22
 801d790:	197b      	adds	r3, r7, r5
 801d792:	2200      	movs	r2, #0
 801d794:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d796:	68fa      	ldr	r2, [r7, #12]
 801d798:	23b0      	movs	r3, #176	@ 0xb0
 801d79a:	009b      	lsls	r3, r3, #2
 801d79c:	58d0      	ldr	r0, [r2, r3]
 801d79e:	193b      	adds	r3, r7, r4
 801d7a0:	881d      	ldrh	r5, [r3, #0]
 801d7a2:	000e      	movs	r6, r1
 801d7a4:	187c      	adds	r4, r7, r1
 801d7a6:	687a      	ldr	r2, [r7, #4]
 801d7a8:	230b      	movs	r3, #11
 801d7aa:	18fb      	adds	r3, r7, r3
 801d7ac:	7819      	ldrb	r1, [r3, #0]
 801d7ae:	002b      	movs	r3, r5
 801d7b0:	f7f6 f917 	bl	80139e2 <HAL_PCD_EP_Receive>
 801d7b4:	0003      	movs	r3, r0
 801d7b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7b8:	2516      	movs	r5, #22
 801d7ba:	197c      	adds	r4, r7, r5
 801d7bc:	19bb      	adds	r3, r7, r6
 801d7be:	781b      	ldrb	r3, [r3, #0]
 801d7c0:	0018      	movs	r0, r3
 801d7c2:	f000 f83a 	bl	801d83a <USBD_Get_USB_Status>
 801d7c6:	0003      	movs	r3, r0
 801d7c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d7ca:	197b      	adds	r3, r7, r5
 801d7cc:	781b      	ldrb	r3, [r3, #0]
}
 801d7ce:	0018      	movs	r0, r3
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	b007      	add	sp, #28
 801d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d7d6:	b580      	push	{r7, lr}
 801d7d8:	b082      	sub	sp, #8
 801d7da:	af00      	add	r7, sp, #0
 801d7dc:	6078      	str	r0, [r7, #4]
 801d7de:	000a      	movs	r2, r1
 801d7e0:	1cfb      	adds	r3, r7, #3
 801d7e2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d7e4:	687a      	ldr	r2, [r7, #4]
 801d7e6:	23b0      	movs	r3, #176	@ 0xb0
 801d7e8:	009b      	lsls	r3, r3, #2
 801d7ea:	58d2      	ldr	r2, [r2, r3]
 801d7ec:	1cfb      	adds	r3, r7, #3
 801d7ee:	781b      	ldrb	r3, [r3, #0]
 801d7f0:	0019      	movs	r1, r3
 801d7f2:	0010      	movs	r0, r2
 801d7f4:	f7f6 f92c 	bl	8013a50 <HAL_PCD_EP_GetRxCount>
 801d7f8:	0003      	movs	r3, r0
}
 801d7fa:	0018      	movs	r0, r3
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	b002      	add	sp, #8
 801d800:	bd80      	pop	{r7, pc}
	...

0801d804 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b082      	sub	sp, #8
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d80c:	4b02      	ldr	r3, [pc, #8]	@ (801d818 <USBD_static_malloc+0x14>)
}
 801d80e:	0018      	movs	r0, r3
 801d810:	46bd      	mov	sp, r7
 801d812:	b002      	add	sp, #8
 801d814:	bd80      	pop	{r7, pc}
 801d816:	46c0      	nop			@ (mov r8, r8)
 801d818:	20003460 	.word	0x20003460

0801d81c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b082      	sub	sp, #8
 801d820:	af00      	add	r7, sp, #0
 801d822:	6078      	str	r0, [r7, #4]

}
 801d824:	46c0      	nop			@ (mov r8, r8)
 801d826:	46bd      	mov	sp, r7
 801d828:	b002      	add	sp, #8
 801d82a:	bd80      	pop	{r7, pc}

0801d82c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d830:	f7ea fc3a 	bl	80080a8 <SystemClock_Config>
}
 801d834:	46c0      	nop			@ (mov r8, r8)
 801d836:	46bd      	mov	sp, r7
 801d838:	bd80      	pop	{r7, pc}

0801d83a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d83a:	b580      	push	{r7, lr}
 801d83c:	b084      	sub	sp, #16
 801d83e:	af00      	add	r7, sp, #0
 801d840:	0002      	movs	r2, r0
 801d842:	1dfb      	adds	r3, r7, #7
 801d844:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d846:	230f      	movs	r3, #15
 801d848:	18fb      	adds	r3, r7, r3
 801d84a:	2200      	movs	r2, #0
 801d84c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d84e:	1dfb      	adds	r3, r7, #7
 801d850:	781b      	ldrb	r3, [r3, #0]
 801d852:	2b03      	cmp	r3, #3
 801d854:	d017      	beq.n	801d886 <USBD_Get_USB_Status+0x4c>
 801d856:	dc1b      	bgt.n	801d890 <USBD_Get_USB_Status+0x56>
 801d858:	2b02      	cmp	r3, #2
 801d85a:	d00f      	beq.n	801d87c <USBD_Get_USB_Status+0x42>
 801d85c:	dc18      	bgt.n	801d890 <USBD_Get_USB_Status+0x56>
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d002      	beq.n	801d868 <USBD_Get_USB_Status+0x2e>
 801d862:	2b01      	cmp	r3, #1
 801d864:	d005      	beq.n	801d872 <USBD_Get_USB_Status+0x38>
 801d866:	e013      	b.n	801d890 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d868:	230f      	movs	r3, #15
 801d86a:	18fb      	adds	r3, r7, r3
 801d86c:	2200      	movs	r2, #0
 801d86e:	701a      	strb	r2, [r3, #0]
    break;
 801d870:	e013      	b.n	801d89a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d872:	230f      	movs	r3, #15
 801d874:	18fb      	adds	r3, r7, r3
 801d876:	2202      	movs	r2, #2
 801d878:	701a      	strb	r2, [r3, #0]
    break;
 801d87a:	e00e      	b.n	801d89a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d87c:	230f      	movs	r3, #15
 801d87e:	18fb      	adds	r3, r7, r3
 801d880:	2201      	movs	r2, #1
 801d882:	701a      	strb	r2, [r3, #0]
    break;
 801d884:	e009      	b.n	801d89a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d886:	230f      	movs	r3, #15
 801d888:	18fb      	adds	r3, r7, r3
 801d88a:	2202      	movs	r2, #2
 801d88c:	701a      	strb	r2, [r3, #0]
    break;
 801d88e:	e004      	b.n	801d89a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d890:	230f      	movs	r3, #15
 801d892:	18fb      	adds	r3, r7, r3
 801d894:	2202      	movs	r2, #2
 801d896:	701a      	strb	r2, [r3, #0]
    break;
 801d898:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d89a:	230f      	movs	r3, #15
 801d89c:	18fb      	adds	r3, r7, r3
 801d89e:	781b      	ldrb	r3, [r3, #0]
}
 801d8a0:	0018      	movs	r0, r3
 801d8a2:	46bd      	mov	sp, r7
 801d8a4:	b004      	add	sp, #16
 801d8a6:	bd80      	pop	{r7, pc}

0801d8a8 <arm_cfft_radix4by2_q31>:
 801d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8aa:	465f      	mov	r7, fp
 801d8ac:	4656      	mov	r6, sl
 801d8ae:	464d      	mov	r5, r9
 801d8b0:	4644      	mov	r4, r8
 801d8b2:	000b      	movs	r3, r1
 801d8b4:	b4f0      	push	{r4, r5, r6, r7}
 801d8b6:	085b      	lsrs	r3, r3, #1
 801d8b8:	b08f      	sub	sp, #60	@ 0x3c
 801d8ba:	910a      	str	r1, [sp, #40]	@ 0x28
 801d8bc:	0007      	movs	r7, r0
 801d8be:	9009      	str	r0, [sp, #36]	@ 0x24
 801d8c0:	0011      	movs	r1, r2
 801d8c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d8c4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d100      	bne.n	801d8cc <arm_cfft_radix4by2_q31+0x24>
 801d8ca:	e0a0      	b.n	801da0e <arm_cfft_radix4by2_q31+0x166>
 801d8cc:	0002      	movs	r2, r0
 801d8ce:	00db      	lsls	r3, r3, #3
 801d8d0:	3204      	adds	r2, #4
 801d8d2:	4691      	mov	r9, r2
 801d8d4:	4698      	mov	r8, r3
 801d8d6:	000a      	movs	r2, r1
 801d8d8:	464e      	mov	r6, r9
 801d8da:	4442      	add	r2, r8
 801d8dc:	4699      	mov	r9, r3
 801d8de:	4688      	mov	r8, r1
 801d8e0:	9208      	str	r2, [sp, #32]
 801d8e2:	900d      	str	r0, [sp, #52]	@ 0x34
 801d8e4:	4643      	mov	r3, r8
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	469b      	mov	fp, r3
 801d8ea:	4643      	mov	r3, r8
 801d8ec:	685b      	ldr	r3, [r3, #4]
 801d8ee:	469a      	mov	sl, r3
 801d8f0:	683b      	ldr	r3, [r7, #0]
 801d8f2:	109c      	asrs	r4, r3, #2
 801d8f4:	464b      	mov	r3, r9
 801d8f6:	58fb      	ldr	r3, [r7, r3]
 801d8f8:	109a      	asrs	r2, r3, #2
 801d8fa:	18a3      	adds	r3, r4, r2
 801d8fc:	603b      	str	r3, [r7, #0]
 801d8fe:	6833      	ldr	r3, [r6, #0]
 801d900:	1aa4      	subs	r4, r4, r2
 801d902:	109d      	asrs	r5, r3, #2
 801d904:	464b      	mov	r3, r9
 801d906:	58f3      	ldr	r3, [r6, r3]
 801d908:	17e2      	asrs	r2, r4, #31
 801d90a:	109b      	asrs	r3, r3, #2
 801d90c:	18e9      	adds	r1, r5, r3
 801d90e:	6031      	str	r1, [r6, #0]
 801d910:	0011      	movs	r1, r2
 801d912:	465a      	mov	r2, fp
 801d914:	17d2      	asrs	r2, r2, #31
 801d916:	0010      	movs	r0, r2
 801d918:	4652      	mov	r2, sl
 801d91a:	1aed      	subs	r5, r5, r3
 801d91c:	17eb      	asrs	r3, r5, #31
 801d91e:	17d2      	asrs	r2, r2, #31
 801d920:	9307      	str	r3, [sp, #28]
 801d922:	9204      	str	r2, [sp, #16]
 801d924:	0003      	movs	r3, r0
 801d926:	465a      	mov	r2, fp
 801d928:	9006      	str	r0, [sp, #24]
 801d92a:	0020      	movs	r0, r4
 801d92c:	9105      	str	r1, [sp, #20]
 801d92e:	f7e2 fe47 	bl	80005c0 <__aeabi_lmul>
 801d932:	2280      	movs	r2, #128	@ 0x80
 801d934:	2300      	movs	r3, #0
 801d936:	0612      	lsls	r2, r2, #24
 801d938:	1880      	adds	r0, r0, r2
 801d93a:	4159      	adcs	r1, r3
 801d93c:	2300      	movs	r3, #0
 801d93e:	9101      	str	r1, [sp, #4]
 801d940:	9300      	str	r3, [sp, #0]
 801d942:	4652      	mov	r2, sl
 801d944:	9b04      	ldr	r3, [sp, #16]
 801d946:	0028      	movs	r0, r5
 801d948:	17e9      	asrs	r1, r5, #31
 801d94a:	f7e2 fe39 	bl	80005c0 <__aeabi_lmul>
 801d94e:	9a00      	ldr	r2, [sp, #0]
 801d950:	9b01      	ldr	r3, [sp, #4]
 801d952:	1880      	adds	r0, r0, r2
 801d954:	4159      	adcs	r1, r3
 801d956:	2280      	movs	r2, #128	@ 0x80
 801d958:	2300      	movs	r3, #0
 801d95a:	0612      	lsls	r2, r2, #24
 801d95c:	1880      	adds	r0, r0, r2
 801d95e:	4159      	adcs	r1, r3
 801d960:	464a      	mov	r2, r9
 801d962:	004b      	lsls	r3, r1, #1
 801d964:	50bb      	str	r3, [r7, r2]
 801d966:	4658      	mov	r0, fp
 801d968:	002a      	movs	r2, r5
 801d96a:	9b07      	ldr	r3, [sp, #28]
 801d96c:	9906      	ldr	r1, [sp, #24]
 801d96e:	f7e2 fe27 	bl	80005c0 <__aeabi_lmul>
 801d972:	2280      	movs	r2, #128	@ 0x80
 801d974:	2300      	movs	r3, #0
 801d976:	0612      	lsls	r2, r2, #24
 801d978:	1880      	adds	r0, r0, r2
 801d97a:	4159      	adcs	r1, r3
 801d97c:	2000      	movs	r0, #0
 801d97e:	9103      	str	r1, [sp, #12]
 801d980:	9002      	str	r0, [sp, #8]
 801d982:	4652      	mov	r2, sl
 801d984:	9b04      	ldr	r3, [sp, #16]
 801d986:	0020      	movs	r0, r4
 801d988:	9905      	ldr	r1, [sp, #20]
 801d98a:	f7e2 fe19 	bl	80005c0 <__aeabi_lmul>
 801d98e:	9a02      	ldr	r2, [sp, #8]
 801d990:	9b03      	ldr	r3, [sp, #12]
 801d992:	1a12      	subs	r2, r2, r0
 801d994:	418b      	sbcs	r3, r1
 801d996:	2080      	movs	r0, #128	@ 0x80
 801d998:	2100      	movs	r1, #0
 801d99a:	0600      	lsls	r0, r0, #24
 801d99c:	1812      	adds	r2, r2, r0
 801d99e:	414b      	adcs	r3, r1
 801d9a0:	464a      	mov	r2, r9
 801d9a2:	005b      	lsls	r3, r3, #1
 801d9a4:	50b3      	str	r3, [r6, r2]
 801d9a6:	2308      	movs	r3, #8
 801d9a8:	469c      	mov	ip, r3
 801d9aa:	9b08      	ldr	r3, [sp, #32]
 801d9ac:	44e0      	add	r8, ip
 801d9ae:	3708      	adds	r7, #8
 801d9b0:	3608      	adds	r6, #8
 801d9b2:	4598      	cmp	r8, r3
 801d9b4:	d196      	bne.n	801d8e4 <arm_cfft_radix4by2_q31+0x3c>
 801d9b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d9b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d9ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d9bc:	2302      	movs	r3, #2
 801d9be:	003a      	movs	r2, r7
 801d9c0:	0029      	movs	r1, r5
 801d9c2:	0020      	movs	r0, r4
 801d9c4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d9c6:	f000 f957 	bl	801dc78 <arm_radix4_butterfly_q31>
 801d9ca:	46a4      	mov	ip, r4
 801d9cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d9ce:	2302      	movs	r3, #2
 801d9d0:	0088      	lsls	r0, r1, #2
 801d9d2:	4460      	add	r0, ip
 801d9d4:	003a      	movs	r2, r7
 801d9d6:	0029      	movs	r1, r5
 801d9d8:	f000 f94e 	bl	801dc78 <arm_radix4_butterfly_q31>
 801d9dc:	46a4      	mov	ip, r4
 801d9de:	0128      	lsls	r0, r5, #4
 801d9e0:	4460      	add	r0, ip
 801d9e2:	6833      	ldr	r3, [r6, #0]
 801d9e4:	005b      	lsls	r3, r3, #1
 801d9e6:	6033      	str	r3, [r6, #0]
 801d9e8:	6873      	ldr	r3, [r6, #4]
 801d9ea:	005b      	lsls	r3, r3, #1
 801d9ec:	6073      	str	r3, [r6, #4]
 801d9ee:	68b3      	ldr	r3, [r6, #8]
 801d9f0:	005b      	lsls	r3, r3, #1
 801d9f2:	60b3      	str	r3, [r6, #8]
 801d9f4:	68f3      	ldr	r3, [r6, #12]
 801d9f6:	005b      	lsls	r3, r3, #1
 801d9f8:	60f3      	str	r3, [r6, #12]
 801d9fa:	3610      	adds	r6, #16
 801d9fc:	42b0      	cmp	r0, r6
 801d9fe:	d1f0      	bne.n	801d9e2 <arm_cfft_radix4by2_q31+0x13a>
 801da00:	b00f      	add	sp, #60	@ 0x3c
 801da02:	bc3c      	pop	{r2, r3, r4, r5}
 801da04:	4690      	mov	r8, r2
 801da06:	4699      	mov	r9, r3
 801da08:	46a2      	mov	sl, r4
 801da0a:	46ab      	mov	fp, r5
 801da0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da0e:	2302      	movs	r3, #2
 801da10:	2100      	movs	r1, #0
 801da12:	0015      	movs	r5, r2
 801da14:	f000 f930 	bl	801dc78 <arm_radix4_butterfly_q31>
 801da18:	46bc      	mov	ip, r7
 801da1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da1c:	002a      	movs	r2, r5
 801da1e:	0098      	lsls	r0, r3, #2
 801da20:	4460      	add	r0, ip
 801da22:	2302      	movs	r3, #2
 801da24:	2100      	movs	r1, #0
 801da26:	f000 f927 	bl	801dc78 <arm_radix4_butterfly_q31>
 801da2a:	e7e9      	b.n	801da00 <arm_cfft_radix4by2_q31+0x158>

0801da2c <arm_cfft_radix4by2_inverse_q31>:
 801da2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da2e:	465f      	mov	r7, fp
 801da30:	4656      	mov	r6, sl
 801da32:	464d      	mov	r5, r9
 801da34:	4644      	mov	r4, r8
 801da36:	000b      	movs	r3, r1
 801da38:	b4f0      	push	{r4, r5, r6, r7}
 801da3a:	085b      	lsrs	r3, r3, #1
 801da3c:	b08f      	sub	sp, #60	@ 0x3c
 801da3e:	910a      	str	r1, [sp, #40]	@ 0x28
 801da40:	0007      	movs	r7, r0
 801da42:	9009      	str	r0, [sp, #36]	@ 0x24
 801da44:	0011      	movs	r1, r2
 801da46:	920b      	str	r2, [sp, #44]	@ 0x2c
 801da48:	930c      	str	r3, [sp, #48]	@ 0x30
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d100      	bne.n	801da50 <arm_cfft_radix4by2_inverse_q31+0x24>
 801da4e:	e0a0      	b.n	801db92 <arm_cfft_radix4by2_inverse_q31+0x166>
 801da50:	0002      	movs	r2, r0
 801da52:	00db      	lsls	r3, r3, #3
 801da54:	3204      	adds	r2, #4
 801da56:	4691      	mov	r9, r2
 801da58:	4698      	mov	r8, r3
 801da5a:	000a      	movs	r2, r1
 801da5c:	464e      	mov	r6, r9
 801da5e:	4442      	add	r2, r8
 801da60:	4699      	mov	r9, r3
 801da62:	4688      	mov	r8, r1
 801da64:	9208      	str	r2, [sp, #32]
 801da66:	900d      	str	r0, [sp, #52]	@ 0x34
 801da68:	4643      	mov	r3, r8
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	469b      	mov	fp, r3
 801da6e:	4643      	mov	r3, r8
 801da70:	685b      	ldr	r3, [r3, #4]
 801da72:	469a      	mov	sl, r3
 801da74:	683b      	ldr	r3, [r7, #0]
 801da76:	109c      	asrs	r4, r3, #2
 801da78:	464b      	mov	r3, r9
 801da7a:	58fb      	ldr	r3, [r7, r3]
 801da7c:	109a      	asrs	r2, r3, #2
 801da7e:	18a3      	adds	r3, r4, r2
 801da80:	603b      	str	r3, [r7, #0]
 801da82:	6833      	ldr	r3, [r6, #0]
 801da84:	1aa4      	subs	r4, r4, r2
 801da86:	109d      	asrs	r5, r3, #2
 801da88:	464b      	mov	r3, r9
 801da8a:	58f3      	ldr	r3, [r6, r3]
 801da8c:	17e2      	asrs	r2, r4, #31
 801da8e:	109b      	asrs	r3, r3, #2
 801da90:	18e9      	adds	r1, r5, r3
 801da92:	6031      	str	r1, [r6, #0]
 801da94:	0011      	movs	r1, r2
 801da96:	465a      	mov	r2, fp
 801da98:	17d2      	asrs	r2, r2, #31
 801da9a:	0010      	movs	r0, r2
 801da9c:	4652      	mov	r2, sl
 801da9e:	1aed      	subs	r5, r5, r3
 801daa0:	17eb      	asrs	r3, r5, #31
 801daa2:	17d2      	asrs	r2, r2, #31
 801daa4:	9307      	str	r3, [sp, #28]
 801daa6:	9204      	str	r2, [sp, #16]
 801daa8:	0003      	movs	r3, r0
 801daaa:	465a      	mov	r2, fp
 801daac:	9006      	str	r0, [sp, #24]
 801daae:	0020      	movs	r0, r4
 801dab0:	9105      	str	r1, [sp, #20]
 801dab2:	f7e2 fd85 	bl	80005c0 <__aeabi_lmul>
 801dab6:	2280      	movs	r2, #128	@ 0x80
 801dab8:	2300      	movs	r3, #0
 801daba:	0612      	lsls	r2, r2, #24
 801dabc:	1880      	adds	r0, r0, r2
 801dabe:	4159      	adcs	r1, r3
 801dac0:	2300      	movs	r3, #0
 801dac2:	9101      	str	r1, [sp, #4]
 801dac4:	9300      	str	r3, [sp, #0]
 801dac6:	4652      	mov	r2, sl
 801dac8:	9b04      	ldr	r3, [sp, #16]
 801daca:	0028      	movs	r0, r5
 801dacc:	17e9      	asrs	r1, r5, #31
 801dace:	f7e2 fd77 	bl	80005c0 <__aeabi_lmul>
 801dad2:	9a00      	ldr	r2, [sp, #0]
 801dad4:	9b01      	ldr	r3, [sp, #4]
 801dad6:	1a12      	subs	r2, r2, r0
 801dad8:	418b      	sbcs	r3, r1
 801dada:	2080      	movs	r0, #128	@ 0x80
 801dadc:	2100      	movs	r1, #0
 801dade:	0600      	lsls	r0, r0, #24
 801dae0:	1812      	adds	r2, r2, r0
 801dae2:	414b      	adcs	r3, r1
 801dae4:	464a      	mov	r2, r9
 801dae6:	005b      	lsls	r3, r3, #1
 801dae8:	50bb      	str	r3, [r7, r2]
 801daea:	4658      	mov	r0, fp
 801daec:	002a      	movs	r2, r5
 801daee:	9b07      	ldr	r3, [sp, #28]
 801daf0:	9906      	ldr	r1, [sp, #24]
 801daf2:	f7e2 fd65 	bl	80005c0 <__aeabi_lmul>
 801daf6:	2280      	movs	r2, #128	@ 0x80
 801daf8:	2300      	movs	r3, #0
 801dafa:	0612      	lsls	r2, r2, #24
 801dafc:	1880      	adds	r0, r0, r2
 801dafe:	4159      	adcs	r1, r3
 801db00:	2000      	movs	r0, #0
 801db02:	9103      	str	r1, [sp, #12]
 801db04:	9002      	str	r0, [sp, #8]
 801db06:	4652      	mov	r2, sl
 801db08:	9b04      	ldr	r3, [sp, #16]
 801db0a:	0020      	movs	r0, r4
 801db0c:	9905      	ldr	r1, [sp, #20]
 801db0e:	f7e2 fd57 	bl	80005c0 <__aeabi_lmul>
 801db12:	9b02      	ldr	r3, [sp, #8]
 801db14:	9c03      	ldr	r4, [sp, #12]
 801db16:	18c0      	adds	r0, r0, r3
 801db18:	4161      	adcs	r1, r4
 801db1a:	2380      	movs	r3, #128	@ 0x80
 801db1c:	2400      	movs	r4, #0
 801db1e:	061b      	lsls	r3, r3, #24
 801db20:	18c0      	adds	r0, r0, r3
 801db22:	4161      	adcs	r1, r4
 801db24:	464a      	mov	r2, r9
 801db26:	004b      	lsls	r3, r1, #1
 801db28:	50b3      	str	r3, [r6, r2]
 801db2a:	2308      	movs	r3, #8
 801db2c:	469c      	mov	ip, r3
 801db2e:	9b08      	ldr	r3, [sp, #32]
 801db30:	44e0      	add	r8, ip
 801db32:	3708      	adds	r7, #8
 801db34:	3608      	adds	r6, #8
 801db36:	4598      	cmp	r8, r3
 801db38:	d196      	bne.n	801da68 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801db3a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801db3c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801db3e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801db40:	2302      	movs	r3, #2
 801db42:	003a      	movs	r2, r7
 801db44:	0029      	movs	r1, r5
 801db46:	0020      	movs	r0, r4
 801db48:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801db4a:	f000 fb3b 	bl	801e1c4 <arm_radix4_butterfly_inverse_q31>
 801db4e:	46a4      	mov	ip, r4
 801db50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801db52:	2302      	movs	r3, #2
 801db54:	0088      	lsls	r0, r1, #2
 801db56:	4460      	add	r0, ip
 801db58:	003a      	movs	r2, r7
 801db5a:	0029      	movs	r1, r5
 801db5c:	f000 fb32 	bl	801e1c4 <arm_radix4_butterfly_inverse_q31>
 801db60:	46a4      	mov	ip, r4
 801db62:	0128      	lsls	r0, r5, #4
 801db64:	4460      	add	r0, ip
 801db66:	6833      	ldr	r3, [r6, #0]
 801db68:	005b      	lsls	r3, r3, #1
 801db6a:	6033      	str	r3, [r6, #0]
 801db6c:	6873      	ldr	r3, [r6, #4]
 801db6e:	005b      	lsls	r3, r3, #1
 801db70:	6073      	str	r3, [r6, #4]
 801db72:	68b3      	ldr	r3, [r6, #8]
 801db74:	005b      	lsls	r3, r3, #1
 801db76:	60b3      	str	r3, [r6, #8]
 801db78:	68f3      	ldr	r3, [r6, #12]
 801db7a:	005b      	lsls	r3, r3, #1
 801db7c:	60f3      	str	r3, [r6, #12]
 801db7e:	3610      	adds	r6, #16
 801db80:	42b0      	cmp	r0, r6
 801db82:	d1f0      	bne.n	801db66 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801db84:	b00f      	add	sp, #60	@ 0x3c
 801db86:	bc3c      	pop	{r2, r3, r4, r5}
 801db88:	4690      	mov	r8, r2
 801db8a:	4699      	mov	r9, r3
 801db8c:	46a2      	mov	sl, r4
 801db8e:	46ab      	mov	fp, r5
 801db90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db92:	2302      	movs	r3, #2
 801db94:	2100      	movs	r1, #0
 801db96:	0015      	movs	r5, r2
 801db98:	f000 fb14 	bl	801e1c4 <arm_radix4_butterfly_inverse_q31>
 801db9c:	46bc      	mov	ip, r7
 801db9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dba0:	002a      	movs	r2, r5
 801dba2:	0098      	lsls	r0, r3, #2
 801dba4:	4460      	add	r0, ip
 801dba6:	2302      	movs	r3, #2
 801dba8:	2100      	movs	r1, #0
 801dbaa:	f000 fb0b 	bl	801e1c4 <arm_radix4_butterfly_inverse_q31>
 801dbae:	e7e9      	b.n	801db84 <arm_cfft_radix4by2_inverse_q31+0x158>

0801dbb0 <arm_cfft_q31>:
 801dbb0:	b570      	push	{r4, r5, r6, lr}
 801dbb2:	001e      	movs	r6, r3
 801dbb4:	2380      	movs	r3, #128	@ 0x80
 801dbb6:	000d      	movs	r5, r1
 801dbb8:	0004      	movs	r4, r0
 801dbba:	8801      	ldrh	r1, [r0, #0]
 801dbbc:	005b      	lsls	r3, r3, #1
 801dbbe:	2a01      	cmp	r2, #1
 801dbc0:	d028      	beq.n	801dc14 <arm_cfft_q31+0x64>
 801dbc2:	4299      	cmp	r1, r3
 801dbc4:	d020      	beq.n	801dc08 <arm_cfft_q31+0x58>
 801dbc6:	d812      	bhi.n	801dbee <arm_cfft_q31+0x3e>
 801dbc8:	2920      	cmp	r1, #32
 801dbca:	d004      	beq.n	801dbd6 <arm_cfft_q31+0x26>
 801dbcc:	d949      	bls.n	801dc62 <arm_cfft_q31+0xb2>
 801dbce:	2940      	cmp	r1, #64	@ 0x40
 801dbd0:	d01a      	beq.n	801dc08 <arm_cfft_q31+0x58>
 801dbd2:	2980      	cmp	r1, #128	@ 0x80
 801dbd4:	d103      	bne.n	801dbde <arm_cfft_q31+0x2e>
 801dbd6:	6862      	ldr	r2, [r4, #4]
 801dbd8:	0028      	movs	r0, r5
 801dbda:	f7ff fe65 	bl	801d8a8 <arm_cfft_radix4by2_q31>
 801dbde:	2e00      	cmp	r6, #0
 801dbe0:	d004      	beq.n	801dbec <arm_cfft_q31+0x3c>
 801dbe2:	68a2      	ldr	r2, [r4, #8]
 801dbe4:	89a1      	ldrh	r1, [r4, #12]
 801dbe6:	0028      	movs	r0, r5
 801dbe8:	f7e2 fa8e 	bl	8000108 <arm_bitreversal_32>
 801dbec:	bd70      	pop	{r4, r5, r6, pc}
 801dbee:	2380      	movs	r3, #128	@ 0x80
 801dbf0:	00db      	lsls	r3, r3, #3
 801dbf2:	4299      	cmp	r1, r3
 801dbf4:	d008      	beq.n	801dc08 <arm_cfft_q31+0x58>
 801dbf6:	d92f      	bls.n	801dc58 <arm_cfft_q31+0xa8>
 801dbf8:	2380      	movs	r3, #128	@ 0x80
 801dbfa:	011b      	lsls	r3, r3, #4
 801dbfc:	4299      	cmp	r1, r3
 801dbfe:	d0ea      	beq.n	801dbd6 <arm_cfft_q31+0x26>
 801dc00:	2380      	movs	r3, #128	@ 0x80
 801dc02:	015b      	lsls	r3, r3, #5
 801dc04:	4299      	cmp	r1, r3
 801dc06:	d1ea      	bne.n	801dbde <arm_cfft_q31+0x2e>
 801dc08:	2301      	movs	r3, #1
 801dc0a:	6862      	ldr	r2, [r4, #4]
 801dc0c:	0028      	movs	r0, r5
 801dc0e:	f000 f833 	bl	801dc78 <arm_radix4_butterfly_q31>
 801dc12:	e7e4      	b.n	801dbde <arm_cfft_q31+0x2e>
 801dc14:	4299      	cmp	r1, r3
 801dc16:	d019      	beq.n	801dc4c <arm_cfft_q31+0x9c>
 801dc18:	d80b      	bhi.n	801dc32 <arm_cfft_q31+0x82>
 801dc1a:	2920      	cmp	r1, #32
 801dc1c:	d004      	beq.n	801dc28 <arm_cfft_q31+0x78>
 801dc1e:	d928      	bls.n	801dc72 <arm_cfft_q31+0xc2>
 801dc20:	2940      	cmp	r1, #64	@ 0x40
 801dc22:	d013      	beq.n	801dc4c <arm_cfft_q31+0x9c>
 801dc24:	2980      	cmp	r1, #128	@ 0x80
 801dc26:	d1da      	bne.n	801dbde <arm_cfft_q31+0x2e>
 801dc28:	6862      	ldr	r2, [r4, #4]
 801dc2a:	0028      	movs	r0, r5
 801dc2c:	f7ff fefe 	bl	801da2c <arm_cfft_radix4by2_inverse_q31>
 801dc30:	e7d5      	b.n	801dbde <arm_cfft_q31+0x2e>
 801dc32:	2380      	movs	r3, #128	@ 0x80
 801dc34:	00db      	lsls	r3, r3, #3
 801dc36:	4299      	cmp	r1, r3
 801dc38:	d008      	beq.n	801dc4c <arm_cfft_q31+0x9c>
 801dc3a:	d915      	bls.n	801dc68 <arm_cfft_q31+0xb8>
 801dc3c:	2380      	movs	r3, #128	@ 0x80
 801dc3e:	011b      	lsls	r3, r3, #4
 801dc40:	4299      	cmp	r1, r3
 801dc42:	d0f1      	beq.n	801dc28 <arm_cfft_q31+0x78>
 801dc44:	2380      	movs	r3, #128	@ 0x80
 801dc46:	015b      	lsls	r3, r3, #5
 801dc48:	4299      	cmp	r1, r3
 801dc4a:	d1c8      	bne.n	801dbde <arm_cfft_q31+0x2e>
 801dc4c:	2301      	movs	r3, #1
 801dc4e:	6862      	ldr	r2, [r4, #4]
 801dc50:	0028      	movs	r0, r5
 801dc52:	f000 fab7 	bl	801e1c4 <arm_radix4_butterfly_inverse_q31>
 801dc56:	e7c2      	b.n	801dbde <arm_cfft_q31+0x2e>
 801dc58:	2380      	movs	r3, #128	@ 0x80
 801dc5a:	009b      	lsls	r3, r3, #2
 801dc5c:	4299      	cmp	r1, r3
 801dc5e:	d0ba      	beq.n	801dbd6 <arm_cfft_q31+0x26>
 801dc60:	e7bd      	b.n	801dbde <arm_cfft_q31+0x2e>
 801dc62:	2910      	cmp	r1, #16
 801dc64:	d1bb      	bne.n	801dbde <arm_cfft_q31+0x2e>
 801dc66:	e7cf      	b.n	801dc08 <arm_cfft_q31+0x58>
 801dc68:	2380      	movs	r3, #128	@ 0x80
 801dc6a:	009b      	lsls	r3, r3, #2
 801dc6c:	4299      	cmp	r1, r3
 801dc6e:	d0db      	beq.n	801dc28 <arm_cfft_q31+0x78>
 801dc70:	e7b5      	b.n	801dbde <arm_cfft_q31+0x2e>
 801dc72:	2910      	cmp	r1, #16
 801dc74:	d1b3      	bne.n	801dbde <arm_cfft_q31+0x2e>
 801dc76:	e7e9      	b.n	801dc4c <arm_cfft_q31+0x9c>

0801dc78 <arm_radix4_butterfly_q31>:
 801dc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc7a:	464d      	mov	r5, r9
 801dc7c:	4644      	mov	r4, r8
 801dc7e:	465f      	mov	r7, fp
 801dc80:	4656      	mov	r6, sl
 801dc82:	469c      	mov	ip, r3
 801dc84:	b4f0      	push	{r4, r5, r6, r7}
 801dc86:	b0a7      	sub	sp, #156	@ 0x9c
 801dc88:	9114      	str	r1, [sp, #80]	@ 0x50
 801dc8a:	0889      	lsrs	r1, r1, #2
 801dc8c:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc8e:	00cb      	lsls	r3, r1, #3
 801dc90:	0015      	movs	r5, r2
 801dc92:	9223      	str	r2, [sp, #140]	@ 0x8c
 801dc94:	18c2      	adds	r2, r0, r3
 801dc96:	000c      	movs	r4, r1
 801dc98:	469a      	mov	sl, r3
 801dc9a:	9124      	str	r1, [sp, #144]	@ 0x90
 801dc9c:	18d1      	adds	r1, r2, r3
 801dc9e:	4663      	mov	r3, ip
 801dca0:	468b      	mov	fp, r1
 801dca2:	0119      	lsls	r1, r3, #4
 801dca4:	910d      	str	r1, [sp, #52]	@ 0x34
 801dca6:	00d9      	lsls	r1, r3, #3
 801dca8:	005b      	lsls	r3, r3, #1
 801dcaa:	4463      	add	r3, ip
 801dcac:	910e      	str	r1, [sp, #56]	@ 0x38
 801dcae:	00d9      	lsls	r1, r3, #3
 801dcb0:	465b      	mov	r3, fp
 801dcb2:	44da      	add	sl, fp
 801dcb4:	4690      	mov	r8, r2
 801dcb6:	4683      	mov	fp, r0
 801dcb8:	4699      	mov	r9, r3
 801dcba:	9022      	str	r0, [sp, #136]	@ 0x88
 801dcbc:	9025      	str	r0, [sp, #148]	@ 0x94
 801dcbe:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dcc0:	9502      	str	r5, [sp, #8]
 801dcc2:	9500      	str	r5, [sp, #0]
 801dcc4:	9501      	str	r5, [sp, #4]
 801dcc6:	9407      	str	r4, [sp, #28]
 801dcc8:	465b      	mov	r3, fp
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	4642      	mov	r2, r8
 801dcce:	111c      	asrs	r4, r3, #4
 801dcd0:	464b      	mov	r3, r9
 801dcd2:	4658      	mov	r0, fp
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	6812      	ldr	r2, [r2, #0]
 801dcd8:	111b      	asrs	r3, r3, #4
 801dcda:	18e7      	adds	r7, r4, r3
 801dcdc:	1ae3      	subs	r3, r4, r3
 801dcde:	1114      	asrs	r4, r2, #4
 801dce0:	4652      	mov	r2, sl
 801dce2:	6840      	ldr	r0, [r0, #4]
 801dce4:	6812      	ldr	r2, [r2, #0]
 801dce6:	1105      	asrs	r5, r0, #4
 801dce8:	4648      	mov	r0, r9
 801dcea:	9303      	str	r3, [sp, #12]
 801dcec:	1113      	asrs	r3, r2, #4
 801dcee:	18e2      	adds	r2, r4, r3
 801dcf0:	465c      	mov	r4, fp
 801dcf2:	6840      	ldr	r0, [r0, #4]
 801dcf4:	1103      	asrs	r3, r0, #4
 801dcf6:	18ee      	adds	r6, r5, r3
 801dcf8:	1ae8      	subs	r0, r5, r3
 801dcfa:	18bb      	adds	r3, r7, r2
 801dcfc:	6023      	str	r3, [r4, #0]
 801dcfe:	4644      	mov	r4, r8
 801dd00:	6864      	ldr	r4, [r4, #4]
 801dd02:	9004      	str	r0, [sp, #16]
 801dd04:	1125      	asrs	r5, r4, #4
 801dd06:	4654      	mov	r4, sl
 801dd08:	6864      	ldr	r4, [r4, #4]
 801dd0a:	1123      	asrs	r3, r4, #4
 801dd0c:	465c      	mov	r4, fp
 801dd0e:	18eb      	adds	r3, r5, r3
 801dd10:	18f1      	adds	r1, r6, r3
 801dd12:	6061      	str	r1, [r4, #4]
 801dd14:	4655      	mov	r5, sl
 801dd16:	4644      	mov	r4, r8
 801dd18:	686d      	ldr	r5, [r5, #4]
 801dd1a:	6864      	ldr	r4, [r4, #4]
 801dd1c:	1129      	asrs	r1, r5, #4
 801dd1e:	1124      	asrs	r4, r4, #4
 801dd20:	1a64      	subs	r4, r4, r1
 801dd22:	4641      	mov	r1, r8
 801dd24:	6809      	ldr	r1, [r1, #0]
 801dd26:	9405      	str	r4, [sp, #20]
 801dd28:	1108      	asrs	r0, r1, #4
 801dd2a:	4651      	mov	r1, sl
 801dd2c:	6809      	ldr	r1, [r1, #0]
 801dd2e:	1abc      	subs	r4, r7, r2
 801dd30:	1109      	asrs	r1, r1, #4
 801dd32:	1a41      	subs	r1, r0, r1
 801dd34:	17e2      	asrs	r2, r4, #31
 801dd36:	9106      	str	r1, [sp, #24]
 801dd38:	0011      	movs	r1, r2
 801dd3a:	9a01      	ldr	r2, [sp, #4]
 801dd3c:	9108      	str	r1, [sp, #32]
 801dd3e:	6817      	ldr	r7, [r2, #0]
 801dd40:	17fd      	asrs	r5, r7, #31
 801dd42:	0028      	movs	r0, r5
 801dd44:	1af5      	subs	r5, r6, r3
 801dd46:	17ee      	asrs	r6, r5, #31
 801dd48:	960a      	str	r6, [sp, #40]	@ 0x28
 801dd4a:	6856      	ldr	r6, [r2, #4]
 801dd4c:	9009      	str	r0, [sp, #36]	@ 0x24
 801dd4e:	17f3      	asrs	r3, r6, #31
 801dd50:	003a      	movs	r2, r7
 801dd52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dd54:	0003      	movs	r3, r0
 801dd56:	0020      	movs	r0, r4
 801dd58:	f7e2 fc32 	bl	80005c0 <__aeabi_lmul>
 801dd5c:	0032      	movs	r2, r6
 801dd5e:	17f3      	asrs	r3, r6, #31
 801dd60:	910c      	str	r1, [sp, #48]	@ 0x30
 801dd62:	0028      	movs	r0, r5
 801dd64:	17e9      	asrs	r1, r5, #31
 801dd66:	f7e2 fc2b 	bl	80005c0 <__aeabi_lmul>
 801dd6a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dd6c:	002a      	movs	r2, r5
 801dd6e:	4684      	mov	ip, r0
 801dd70:	4640      	mov	r0, r8
 801dd72:	4461      	add	r1, ip
 801dd74:	0049      	lsls	r1, r1, #1
 801dd76:	6001      	str	r1, [r0, #0]
 801dd78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dd7c:	0038      	movs	r0, r7
 801dd7e:	f7e2 fc1f 	bl	80005c0 <__aeabi_lmul>
 801dd82:	0032      	movs	r2, r6
 801dd84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd86:	000d      	movs	r5, r1
 801dd88:	0020      	movs	r0, r4
 801dd8a:	9908      	ldr	r1, [sp, #32]
 801dd8c:	f7e2 fc18 	bl	80005c0 <__aeabi_lmul>
 801dd90:	4646      	mov	r6, r8
 801dd92:	1a6d      	subs	r5, r5, r1
 801dd94:	006d      	lsls	r5, r5, #1
 801dd96:	6075      	str	r5, [r6, #4]
 801dd98:	9903      	ldr	r1, [sp, #12]
 801dd9a:	9d05      	ldr	r5, [sp, #20]
 801dd9c:	000c      	movs	r4, r1
 801dd9e:	46ac      	mov	ip, r5
 801dda0:	4464      	add	r4, ip
 801dda2:	17e6      	asrs	r6, r4, #31
 801dda4:	0031      	movs	r1, r6
 801dda6:	9b00      	ldr	r3, [sp, #0]
 801dda8:	9804      	ldr	r0, [sp, #16]
 801ddaa:	681e      	ldr	r6, [r3, #0]
 801ddac:	17f7      	asrs	r7, r6, #31
 801ddae:	9709      	str	r7, [sp, #36]	@ 0x24
 801ddb0:	9f06      	ldr	r7, [sp, #24]
 801ddb2:	0032      	movs	r2, r6
 801ddb4:	1bc7      	subs	r7, r0, r7
 801ddb6:	17fd      	asrs	r5, r7, #31
 801ddb8:	950a      	str	r5, [sp, #40]	@ 0x28
 801ddba:	685d      	ldr	r5, [r3, #4]
 801ddbc:	17f3      	asrs	r3, r6, #31
 801ddbe:	17e8      	asrs	r0, r5, #31
 801ddc0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ddc2:	0020      	movs	r0, r4
 801ddc4:	9108      	str	r1, [sp, #32]
 801ddc6:	f7e2 fbfb 	bl	80005c0 <__aeabi_lmul>
 801ddca:	002a      	movs	r2, r5
 801ddcc:	17eb      	asrs	r3, r5, #31
 801ddce:	910c      	str	r1, [sp, #48]	@ 0x30
 801ddd0:	0038      	movs	r0, r7
 801ddd2:	17f9      	asrs	r1, r7, #31
 801ddd4:	f7e2 fbf4 	bl	80005c0 <__aeabi_lmul>
 801ddd8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ddda:	003a      	movs	r2, r7
 801dddc:	4684      	mov	ip, r0
 801ddde:	4648      	mov	r0, r9
 801dde0:	4461      	add	r1, ip
 801dde2:	0049      	lsls	r1, r1, #1
 801dde4:	6001      	str	r1, [r0, #0]
 801dde6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dde8:	0030      	movs	r0, r6
 801ddea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ddec:	f7e2 fbe8 	bl	80005c0 <__aeabi_lmul>
 801ddf0:	002a      	movs	r2, r5
 801ddf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddf4:	000e      	movs	r6, r1
 801ddf6:	0020      	movs	r0, r4
 801ddf8:	9908      	ldr	r1, [sp, #32]
 801ddfa:	f7e2 fbe1 	bl	80005c0 <__aeabi_lmul>
 801ddfe:	464c      	mov	r4, r9
 801de00:	9d05      	ldr	r5, [sp, #20]
 801de02:	1a76      	subs	r6, r6, r1
 801de04:	9903      	ldr	r1, [sp, #12]
 801de06:	0076      	lsls	r6, r6, #1
 801de08:	6066      	str	r6, [r4, #4]
 801de0a:	1b4c      	subs	r4, r1, r5
 801de0c:	9e06      	ldr	r6, [sp, #24]
 801de0e:	17e1      	asrs	r1, r4, #31
 801de10:	9103      	str	r1, [sp, #12]
 801de12:	9902      	ldr	r1, [sp, #8]
 801de14:	46b4      	mov	ip, r6
 801de16:	680f      	ldr	r7, [r1, #0]
 801de18:	9804      	ldr	r0, [sp, #16]
 801de1a:	17fd      	asrs	r5, r7, #31
 801de1c:	002b      	movs	r3, r5
 801de1e:	684e      	ldr	r6, [r1, #4]
 801de20:	4460      	add	r0, ip
 801de22:	0005      	movs	r5, r0
 801de24:	17c0      	asrs	r0, r0, #31
 801de26:	9005      	str	r0, [sp, #20]
 801de28:	17f0      	asrs	r0, r6, #31
 801de2a:	9006      	str	r0, [sp, #24]
 801de2c:	003a      	movs	r2, r7
 801de2e:	0020      	movs	r0, r4
 801de30:	17e1      	asrs	r1, r4, #31
 801de32:	9304      	str	r3, [sp, #16]
 801de34:	f7e2 fbc4 	bl	80005c0 <__aeabi_lmul>
 801de38:	0032      	movs	r2, r6
 801de3a:	9108      	str	r1, [sp, #32]
 801de3c:	17f3      	asrs	r3, r6, #31
 801de3e:	0028      	movs	r0, r5
 801de40:	17e9      	asrs	r1, r5, #31
 801de42:	f7e2 fbbd 	bl	80005c0 <__aeabi_lmul>
 801de46:	9808      	ldr	r0, [sp, #32]
 801de48:	002a      	movs	r2, r5
 801de4a:	4684      	mov	ip, r0
 801de4c:	4650      	mov	r0, sl
 801de4e:	4461      	add	r1, ip
 801de50:	0049      	lsls	r1, r1, #1
 801de52:	6001      	str	r1, [r0, #0]
 801de54:	9b05      	ldr	r3, [sp, #20]
 801de56:	9904      	ldr	r1, [sp, #16]
 801de58:	0038      	movs	r0, r7
 801de5a:	f7e2 fbb1 	bl	80005c0 <__aeabi_lmul>
 801de5e:	0020      	movs	r0, r4
 801de60:	2408      	movs	r4, #8
 801de62:	000d      	movs	r5, r1
 801de64:	0032      	movs	r2, r6
 801de66:	9b06      	ldr	r3, [sp, #24]
 801de68:	9903      	ldr	r1, [sp, #12]
 801de6a:	f7e2 fba9 	bl	80005c0 <__aeabi_lmul>
 801de6e:	46a4      	mov	ip, r4
 801de70:	4650      	mov	r0, sl
 801de72:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801de74:	44e3      	add	fp, ip
 801de76:	44e0      	add	r8, ip
 801de78:	44e1      	add	r9, ip
 801de7a:	44e2      	add	sl, ip
 801de7c:	46a4      	mov	ip, r4
 801de7e:	1a6d      	subs	r5, r5, r1
 801de80:	006d      	lsls	r5, r5, #1
 801de82:	9a01      	ldr	r2, [sp, #4]
 801de84:	6045      	str	r5, [r0, #4]
 801de86:	9807      	ldr	r0, [sp, #28]
 801de88:	4462      	add	r2, ip
 801de8a:	3801      	subs	r0, #1
 801de8c:	9201      	str	r2, [sp, #4]
 801de8e:	9007      	str	r0, [sp, #28]
 801de90:	9b00      	ldr	r3, [sp, #0]
 801de92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801de94:	9902      	ldr	r1, [sp, #8]
 801de96:	4694      	mov	ip, r2
 801de98:	4463      	add	r3, ip
 801de9a:	9300      	str	r3, [sp, #0]
 801de9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de9e:	469c      	mov	ip, r3
 801dea0:	4461      	add	r1, ip
 801dea2:	9102      	str	r1, [sp, #8]
 801dea4:	2800      	cmp	r0, #0
 801dea6:	d000      	beq.n	801deaa <arm_radix4_butterfly_q31+0x232>
 801dea8:	e70e      	b.n	801dcc8 <arm_radix4_butterfly_q31+0x50>
 801deaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801deac:	009b      	lsls	r3, r3, #2
 801deae:	931f      	str	r3, [sp, #124]	@ 0x7c
 801deb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801deb2:	9320      	str	r3, [sp, #128]	@ 0x80
 801deb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801deb6:	2b04      	cmp	r3, #4
 801deb8:	d800      	bhi.n	801debc <arm_radix4_butterfly_q31+0x244>
 801deba:	e180      	b.n	801e1be <arm_radix4_butterfly_q31+0x546>
 801debc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801debe:	0893      	lsrs	r3, r2, #2
 801dec0:	1e59      	subs	r1, r3, #1
 801dec2:	9321      	str	r3, [sp, #132]	@ 0x84
 801dec4:	00db      	lsls	r3, r3, #3
 801dec6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dec8:	00d3      	lsls	r3, r2, #3
 801deca:	9300      	str	r3, [sp, #0]
 801decc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dece:	911a      	str	r1, [sp, #104]	@ 0x68
 801ded0:	00da      	lsls	r2, r3, #3
 801ded2:	921e      	str	r2, [sp, #120]	@ 0x78
 801ded4:	011a      	lsls	r2, r3, #4
 801ded6:	921d      	str	r2, [sp, #116]	@ 0x74
 801ded8:	001a      	movs	r2, r3
 801deda:	4694      	mov	ip, r2
 801dedc:	005b      	lsls	r3, r3, #1
 801dede:	4463      	add	r3, ip
 801dee0:	00db      	lsls	r3, r3, #3
 801dee2:	931c      	str	r3, [sp, #112]	@ 0x70
 801dee4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dee6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dee8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801deea:	9318      	str	r3, [sp, #96]	@ 0x60
 801deec:	9319      	str	r3, [sp, #100]	@ 0x64
 801deee:	9316      	str	r3, [sp, #88]	@ 0x58
 801def0:	2300      	movs	r3, #0
 801def2:	9315      	str	r3, [sp, #84]	@ 0x54
 801def4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801def6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801def8:	681a      	ldr	r2, [r3, #0]
 801defa:	685b      	ldr	r3, [r3, #4]
 801defc:	9205      	str	r2, [sp, #20]
 801defe:	9306      	str	r3, [sp, #24]
 801df00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df02:	468c      	mov	ip, r1
 801df04:	681a      	ldr	r2, [r3, #0]
 801df06:	685b      	ldr	r3, [r3, #4]
 801df08:	9207      	str	r2, [sp, #28]
 801df0a:	9308      	str	r3, [sp, #32]
 801df0c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801df0e:	681a      	ldr	r2, [r3, #0]
 801df10:	685b      	ldr	r3, [r3, #4]
 801df12:	9209      	str	r2, [sp, #36]	@ 0x24
 801df14:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801df16:	930a      	str	r3, [sp, #40]	@ 0x28
 801df18:	0013      	movs	r3, r2
 801df1a:	4463      	add	r3, ip
 801df1c:	4698      	mov	r8, r3
 801df1e:	0013      	movs	r3, r2
 801df20:	4442      	add	r2, r8
 801df22:	4691      	mov	r9, r2
 801df24:	001a      	movs	r2, r3
 801df26:	444a      	add	r2, r9
 801df28:	4692      	mov	sl, r2
 801df2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801df2c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801df2e:	4293      	cmp	r3, r2
 801df30:	d800      	bhi.n	801df34 <arm_radix4_butterfly_q31+0x2bc>
 801df32:	e0dd      	b.n	801e0f0 <arm_radix4_butterfly_q31+0x478>
 801df34:	4694      	mov	ip, r2
 801df36:	468b      	mov	fp, r1
 801df38:	4644      	mov	r4, r8
 801df3a:	4655      	mov	r5, sl
 801df3c:	9b07      	ldr	r3, [sp, #28]
 801df3e:	17db      	asrs	r3, r3, #31
 801df40:	930c      	str	r3, [sp, #48]	@ 0x30
 801df42:	9b08      	ldr	r3, [sp, #32]
 801df44:	17db      	asrs	r3, r3, #31
 801df46:	930d      	str	r3, [sp, #52]	@ 0x34
 801df48:	9b05      	ldr	r3, [sp, #20]
 801df4a:	17db      	asrs	r3, r3, #31
 801df4c:	930e      	str	r3, [sp, #56]	@ 0x38
 801df4e:	9b06      	ldr	r3, [sp, #24]
 801df50:	17db      	asrs	r3, r3, #31
 801df52:	930f      	str	r3, [sp, #60]	@ 0x3c
 801df54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df56:	17db      	asrs	r3, r3, #31
 801df58:	9310      	str	r3, [sp, #64]	@ 0x40
 801df5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df5c:	17db      	asrs	r3, r3, #31
 801df5e:	9311      	str	r3, [sp, #68]	@ 0x44
 801df60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801df62:	4463      	add	r3, ip
 801df64:	930b      	str	r3, [sp, #44]	@ 0x2c
 801df66:	465b      	mov	r3, fp
 801df68:	4659      	mov	r1, fp
 801df6a:	681a      	ldr	r2, [r3, #0]
 801df6c:	464b      	mov	r3, r9
 801df6e:	684f      	ldr	r7, [r1, #4]
 801df70:	4649      	mov	r1, r9
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	18d6      	adds	r6, r2, r3
 801df76:	1ad3      	subs	r3, r2, r3
 801df78:	9301      	str	r3, [sp, #4]
 801df7a:	684b      	ldr	r3, [r1, #4]
 801df7c:	18f8      	adds	r0, r7, r3
 801df7e:	1af9      	subs	r1, r7, r3
 801df80:	6827      	ldr	r7, [r4, #0]
 801df82:	9102      	str	r1, [sp, #8]
 801df84:	003a      	movs	r2, r7
 801df86:	682f      	ldr	r7, [r5, #0]
 801df88:	46bc      	mov	ip, r7
 801df8a:	465f      	mov	r7, fp
 801df8c:	4462      	add	r2, ip
 801df8e:	18b3      	adds	r3, r6, r2
 801df90:	109b      	asrs	r3, r3, #2
 801df92:	603b      	str	r3, [r7, #0]
 801df94:	6867      	ldr	r7, [r4, #4]
 801df96:	1ab6      	subs	r6, r6, r2
 801df98:	46b8      	mov	r8, r7
 801df9a:	686f      	ldr	r7, [r5, #4]
 801df9c:	17f2      	asrs	r2, r6, #31
 801df9e:	46bc      	mov	ip, r7
 801dfa0:	44e0      	add	r8, ip
 801dfa2:	4643      	mov	r3, r8
 801dfa4:	465f      	mov	r7, fp
 801dfa6:	18c1      	adds	r1, r0, r3
 801dfa8:	1089      	asrs	r1, r1, #2
 801dfaa:	6079      	str	r1, [r7, #4]
 801dfac:	9900      	ldr	r1, [sp, #0]
 801dfae:	4690      	mov	r8, r2
 801dfb0:	468c      	mov	ip, r1
 801dfb2:	6867      	ldr	r7, [r4, #4]
 801dfb4:	6869      	ldr	r1, [r5, #4]
 801dfb6:	44e3      	add	fp, ip
 801dfb8:	1a7f      	subs	r7, r7, r1
 801dfba:	9703      	str	r7, [sp, #12]
 801dfbc:	6829      	ldr	r1, [r5, #0]
 801dfbe:	6827      	ldr	r7, [r4, #0]
 801dfc0:	1a7f      	subs	r7, r7, r1
 801dfc2:	9704      	str	r7, [sp, #16]
 801dfc4:	1ac7      	subs	r7, r0, r3
 801dfc6:	17fa      	asrs	r2, r7, #31
 801dfc8:	4692      	mov	sl, r2
 801dfca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dfcc:	9a07      	ldr	r2, [sp, #28]
 801dfce:	0030      	movs	r0, r6
 801dfd0:	4641      	mov	r1, r8
 801dfd2:	f7e2 faf5 	bl	80005c0 <__aeabi_lmul>
 801dfd6:	9a08      	ldr	r2, [sp, #32]
 801dfd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dfda:	9112      	str	r1, [sp, #72]	@ 0x48
 801dfdc:	0038      	movs	r0, r7
 801dfde:	4651      	mov	r1, sl
 801dfe0:	f7e2 faee 	bl	80005c0 <__aeabi_lmul>
 801dfe4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dfe6:	9a07      	ldr	r2, [sp, #28]
 801dfe8:	4684      	mov	ip, r0
 801dfea:	4461      	add	r1, ip
 801dfec:	1049      	asrs	r1, r1, #1
 801dfee:	6021      	str	r1, [r4, #0]
 801dff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dff2:	0038      	movs	r0, r7
 801dff4:	4651      	mov	r1, sl
 801dff6:	f7e2 fae3 	bl	80005c0 <__aeabi_lmul>
 801dffa:	9a08      	ldr	r2, [sp, #32]
 801dffc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dffe:	000f      	movs	r7, r1
 801e000:	0030      	movs	r0, r6
 801e002:	4641      	mov	r1, r8
 801e004:	f7e2 fadc 	bl	80005c0 <__aeabi_lmul>
 801e008:	9b00      	ldr	r3, [sp, #0]
 801e00a:	9a01      	ldr	r2, [sp, #4]
 801e00c:	469c      	mov	ip, r3
 801e00e:	9803      	ldr	r0, [sp, #12]
 801e010:	1a7f      	subs	r7, r7, r1
 801e012:	107f      	asrs	r7, r7, #1
 801e014:	6067      	str	r7, [r4, #4]
 801e016:	0016      	movs	r6, r2
 801e018:	4464      	add	r4, ip
 801e01a:	4684      	mov	ip, r0
 801e01c:	4466      	add	r6, ip
 801e01e:	17f2      	asrs	r2, r6, #31
 801e020:	4690      	mov	r8, r2
 801e022:	9902      	ldr	r1, [sp, #8]
 801e024:	9f04      	ldr	r7, [sp, #16]
 801e026:	0030      	movs	r0, r6
 801e028:	1bcf      	subs	r7, r1, r7
 801e02a:	17fa      	asrs	r2, r7, #31
 801e02c:	4692      	mov	sl, r2
 801e02e:	4641      	mov	r1, r8
 801e030:	9a05      	ldr	r2, [sp, #20]
 801e032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e034:	f7e2 fac4 	bl	80005c0 <__aeabi_lmul>
 801e038:	9a06      	ldr	r2, [sp, #24]
 801e03a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e03c:	9112      	str	r1, [sp, #72]	@ 0x48
 801e03e:	0038      	movs	r0, r7
 801e040:	4651      	mov	r1, sl
 801e042:	f7e2 fabd 	bl	80005c0 <__aeabi_lmul>
 801e046:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e048:	9a05      	ldr	r2, [sp, #20]
 801e04a:	4684      	mov	ip, r0
 801e04c:	4648      	mov	r0, r9
 801e04e:	4461      	add	r1, ip
 801e050:	1049      	asrs	r1, r1, #1
 801e052:	6001      	str	r1, [r0, #0]
 801e054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e056:	0038      	movs	r0, r7
 801e058:	4651      	mov	r1, sl
 801e05a:	f7e2 fab1 	bl	80005c0 <__aeabi_lmul>
 801e05e:	9a06      	ldr	r2, [sp, #24]
 801e060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e062:	000f      	movs	r7, r1
 801e064:	0030      	movs	r0, r6
 801e066:	4641      	mov	r1, r8
 801e068:	f7e2 faaa 	bl	80005c0 <__aeabi_lmul>
 801e06c:	464e      	mov	r6, r9
 801e06e:	9a00      	ldr	r2, [sp, #0]
 801e070:	9b01      	ldr	r3, [sp, #4]
 801e072:	4694      	mov	ip, r2
 801e074:	9803      	ldr	r0, [sp, #12]
 801e076:	1a7f      	subs	r7, r7, r1
 801e078:	107f      	asrs	r7, r7, #1
 801e07a:	6077      	str	r7, [r6, #4]
 801e07c:	1a1e      	subs	r6, r3, r0
 801e07e:	9b04      	ldr	r3, [sp, #16]
 801e080:	44e1      	add	r9, ip
 801e082:	469c      	mov	ip, r3
 801e084:	17f0      	asrs	r0, r6, #31
 801e086:	4680      	mov	r8, r0
 801e088:	9902      	ldr	r1, [sp, #8]
 801e08a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e08c:	4461      	add	r1, ip
 801e08e:	17cb      	asrs	r3, r1, #31
 801e090:	000f      	movs	r7, r1
 801e092:	469a      	mov	sl, r3
 801e094:	0030      	movs	r0, r6
 801e096:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e098:	4641      	mov	r1, r8
 801e09a:	f7e2 fa91 	bl	80005c0 <__aeabi_lmul>
 801e09e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e0a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e0a2:	9101      	str	r1, [sp, #4]
 801e0a4:	0038      	movs	r0, r7
 801e0a6:	4651      	mov	r1, sl
 801e0a8:	f7e2 fa8a 	bl	80005c0 <__aeabi_lmul>
 801e0ac:	9801      	ldr	r0, [sp, #4]
 801e0ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0b0:	4684      	mov	ip, r0
 801e0b2:	4461      	add	r1, ip
 801e0b4:	1049      	asrs	r1, r1, #1
 801e0b6:	6029      	str	r1, [r5, #0]
 801e0b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0ba:	0038      	movs	r0, r7
 801e0bc:	4651      	mov	r1, sl
 801e0be:	f7e2 fa7f 	bl	80005c0 <__aeabi_lmul>
 801e0c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e0c4:	000f      	movs	r7, r1
 801e0c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e0c8:	0030      	movs	r0, r6
 801e0ca:	4641      	mov	r1, r8
 801e0cc:	f7e2 fa78 	bl	80005c0 <__aeabi_lmul>
 801e0d0:	1a7f      	subs	r7, r7, r1
 801e0d2:	107f      	asrs	r7, r7, #1
 801e0d4:	606f      	str	r7, [r5, #4]
 801e0d6:	9a00      	ldr	r2, [sp, #0]
 801e0d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e0da:	4694      	mov	ip, r2
 801e0dc:	4465      	add	r5, ip
 801e0de:	468c      	mov	ip, r1
 801e0e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e0e2:	0013      	movs	r3, r2
 801e0e4:	4462      	add	r2, ip
 801e0e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e0e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e0ea:	429a      	cmp	r2, r3
 801e0ec:	d900      	bls.n	801e0f0 <arm_radix4_butterfly_q31+0x478>
 801e0ee:	e73a      	b.n	801df66 <arm_radix4_butterfly_q31+0x2ee>
 801e0f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e0f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e0f4:	468c      	mov	ip, r1
 801e0f6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e0f8:	4462      	add	r2, ip
 801e0fa:	468c      	mov	ip, r1
 801e0fc:	9216      	str	r2, [sp, #88]	@ 0x58
 801e0fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e100:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e102:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e104:	4462      	add	r2, ip
 801e106:	468c      	mov	ip, r1
 801e108:	9219      	str	r2, [sp, #100]	@ 0x64
 801e10a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e10c:	3301      	adds	r3, #1
 801e10e:	4462      	add	r2, ip
 801e110:	9218      	str	r2, [sp, #96]	@ 0x60
 801e112:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e114:	9315      	str	r3, [sp, #84]	@ 0x54
 801e116:	3208      	adds	r2, #8
 801e118:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e11a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e11c:	4293      	cmp	r3, r2
 801e11e:	d800      	bhi.n	801e122 <arm_radix4_butterfly_q31+0x4aa>
 801e120:	e6e8      	b.n	801def4 <arm_radix4_butterfly_q31+0x27c>
 801e122:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e124:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e126:	009b      	lsls	r3, r3, #2
 801e128:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e12a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e12c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e12e:	089b      	lsrs	r3, r3, #2
 801e130:	9320      	str	r3, [sp, #128]	@ 0x80
 801e132:	2b04      	cmp	r3, #4
 801e134:	d900      	bls.n	801e138 <arm_radix4_butterfly_q31+0x4c0>
 801e136:	e6c1      	b.n	801debc <arm_radix4_butterfly_q31+0x244>
 801e138:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e13a:	469a      	mov	sl, r3
 801e13c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e13e:	691c      	ldr	r4, [r3, #16]
 801e140:	685a      	ldr	r2, [r3, #4]
 801e142:	46a1      	mov	r9, r4
 801e144:	4690      	mov	r8, r2
 801e146:	6819      	ldr	r1, [r3, #0]
 801e148:	689a      	ldr	r2, [r3, #8]
 801e14a:	699f      	ldr	r7, [r3, #24]
 801e14c:	188d      	adds	r5, r1, r2
 801e14e:	444d      	add	r5, r9
 801e150:	19ed      	adds	r5, r5, r7
 801e152:	69de      	ldr	r6, [r3, #28]
 801e154:	601d      	str	r5, [r3, #0]
 801e156:	4645      	mov	r5, r8
 801e158:	46b4      	mov	ip, r6
 801e15a:	68d8      	ldr	r0, [r3, #12]
 801e15c:	695c      	ldr	r4, [r3, #20]
 801e15e:	182d      	adds	r5, r5, r0
 801e160:	192d      	adds	r5, r5, r4
 801e162:	4465      	add	r5, ip
 801e164:	605d      	str	r5, [r3, #4]
 801e166:	1a8d      	subs	r5, r1, r2
 801e168:	444d      	add	r5, r9
 801e16a:	1bed      	subs	r5, r5, r7
 801e16c:	609d      	str	r5, [r3, #8]
 801e16e:	4645      	mov	r5, r8
 801e170:	1a2d      	subs	r5, r5, r0
 801e172:	192d      	adds	r5, r5, r4
 801e174:	1bad      	subs	r5, r5, r6
 801e176:	464e      	mov	r6, r9
 801e178:	60dd      	str	r5, [r3, #12]
 801e17a:	180d      	adds	r5, r1, r0
 801e17c:	1bad      	subs	r5, r5, r6
 801e17e:	4666      	mov	r6, ip
 801e180:	1bad      	subs	r5, r5, r6
 801e182:	611d      	str	r5, [r3, #16]
 801e184:	4645      	mov	r5, r8
 801e186:	1aad      	subs	r5, r5, r2
 801e188:	4442      	add	r2, r8
 801e18a:	1b12      	subs	r2, r2, r4
 801e18c:	1bd2      	subs	r2, r2, r7
 801e18e:	1a08      	subs	r0, r1, r0
 801e190:	61da      	str	r2, [r3, #28]
 801e192:	4649      	mov	r1, r9
 801e194:	2201      	movs	r2, #1
 801e196:	1a41      	subs	r1, r0, r1
 801e198:	4252      	negs	r2, r2
 801e19a:	4461      	add	r1, ip
 801e19c:	4694      	mov	ip, r2
 801e19e:	44e2      	add	sl, ip
 801e1a0:	4652      	mov	r2, sl
 801e1a2:	1b2d      	subs	r5, r5, r4
 801e1a4:	19ed      	adds	r5, r5, r7
 801e1a6:	615d      	str	r5, [r3, #20]
 801e1a8:	6199      	str	r1, [r3, #24]
 801e1aa:	3320      	adds	r3, #32
 801e1ac:	2a00      	cmp	r2, #0
 801e1ae:	d1c6      	bne.n	801e13e <arm_radix4_butterfly_q31+0x4c6>
 801e1b0:	b027      	add	sp, #156	@ 0x9c
 801e1b2:	bc3c      	pop	{r2, r3, r4, r5}
 801e1b4:	4690      	mov	r8, r2
 801e1b6:	4699      	mov	r9, r3
 801e1b8:	46a2      	mov	sl, r4
 801e1ba:	46ab      	mov	fp, r5
 801e1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1be:	469a      	mov	sl, r3
 801e1c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e1c2:	e7bc      	b.n	801e13e <arm_radix4_butterfly_q31+0x4c6>

0801e1c4 <arm_radix4_butterfly_inverse_q31>:
 801e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1c6:	464d      	mov	r5, r9
 801e1c8:	4644      	mov	r4, r8
 801e1ca:	465f      	mov	r7, fp
 801e1cc:	4656      	mov	r6, sl
 801e1ce:	b4f0      	push	{r4, r5, r6, r7}
 801e1d0:	b0a7      	sub	sp, #156	@ 0x9c
 801e1d2:	469c      	mov	ip, r3
 801e1d4:	9114      	str	r1, [sp, #80]	@ 0x50
 801e1d6:	0889      	lsrs	r1, r1, #2
 801e1d8:	9310      	str	r3, [sp, #64]	@ 0x40
 801e1da:	00cb      	lsls	r3, r1, #3
 801e1dc:	0015      	movs	r5, r2
 801e1de:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e1e0:	18c2      	adds	r2, r0, r3
 801e1e2:	000c      	movs	r4, r1
 801e1e4:	9124      	str	r1, [sp, #144]	@ 0x90
 801e1e6:	18d1      	adds	r1, r2, r3
 801e1e8:	468b      	mov	fp, r1
 801e1ea:	469a      	mov	sl, r3
 801e1ec:	4663      	mov	r3, ip
 801e1ee:	44da      	add	sl, fp
 801e1f0:	46d0      	mov	r8, sl
 801e1f2:	4681      	mov	r9, r0
 801e1f4:	4692      	mov	sl, r2
 801e1f6:	0119      	lsls	r1, r3, #4
 801e1f8:	910d      	str	r1, [sp, #52]	@ 0x34
 801e1fa:	00d9      	lsls	r1, r3, #3
 801e1fc:	005b      	lsls	r3, r3, #1
 801e1fe:	4463      	add	r3, ip
 801e200:	910e      	str	r1, [sp, #56]	@ 0x38
 801e202:	00d9      	lsls	r1, r3, #3
 801e204:	9022      	str	r0, [sp, #136]	@ 0x88
 801e206:	9025      	str	r0, [sp, #148]	@ 0x94
 801e208:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e20a:	9502      	str	r5, [sp, #8]
 801e20c:	9500      	str	r5, [sp, #0]
 801e20e:	9501      	str	r5, [sp, #4]
 801e210:	9409      	str	r4, [sp, #36]	@ 0x24
 801e212:	464b      	mov	r3, r9
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	4652      	mov	r2, sl
 801e218:	111c      	asrs	r4, r3, #4
 801e21a:	465b      	mov	r3, fp
 801e21c:	4648      	mov	r0, r9
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	6812      	ldr	r2, [r2, #0]
 801e222:	6840      	ldr	r0, [r0, #4]
 801e224:	111b      	asrs	r3, r3, #4
 801e226:	18e7      	adds	r7, r4, r3
 801e228:	1ae3      	subs	r3, r4, r3
 801e22a:	1114      	asrs	r4, r2, #4
 801e22c:	4642      	mov	r2, r8
 801e22e:	1105      	asrs	r5, r0, #4
 801e230:	4658      	mov	r0, fp
 801e232:	6812      	ldr	r2, [r2, #0]
 801e234:	6840      	ldr	r0, [r0, #4]
 801e236:	9303      	str	r3, [sp, #12]
 801e238:	1113      	asrs	r3, r2, #4
 801e23a:	18e2      	adds	r2, r4, r3
 801e23c:	1103      	asrs	r3, r0, #4
 801e23e:	18ee      	adds	r6, r5, r3
 801e240:	1ae8      	subs	r0, r5, r3
 801e242:	464d      	mov	r5, r9
 801e244:	18bb      	adds	r3, r7, r2
 801e246:	602b      	str	r3, [r5, #0]
 801e248:	4641      	mov	r1, r8
 801e24a:	4655      	mov	r5, sl
 801e24c:	6849      	ldr	r1, [r1, #4]
 801e24e:	686d      	ldr	r5, [r5, #4]
 801e250:	110b      	asrs	r3, r1, #4
 801e252:	112d      	asrs	r5, r5, #4
 801e254:	18eb      	adds	r3, r5, r3
 801e256:	464d      	mov	r5, r9
 801e258:	18f1      	adds	r1, r6, r3
 801e25a:	6069      	str	r1, [r5, #4]
 801e25c:	4655      	mov	r5, sl
 801e25e:	686d      	ldr	r5, [r5, #4]
 801e260:	9004      	str	r0, [sp, #16]
 801e262:	112c      	asrs	r4, r5, #4
 801e264:	4645      	mov	r5, r8
 801e266:	686d      	ldr	r5, [r5, #4]
 801e268:	1129      	asrs	r1, r5, #4
 801e26a:	1a65      	subs	r5, r4, r1
 801e26c:	4651      	mov	r1, sl
 801e26e:	6809      	ldr	r1, [r1, #0]
 801e270:	1abc      	subs	r4, r7, r2
 801e272:	1108      	asrs	r0, r1, #4
 801e274:	4641      	mov	r1, r8
 801e276:	17e2      	asrs	r2, r4, #31
 801e278:	6809      	ldr	r1, [r1, #0]
 801e27a:	9207      	str	r2, [sp, #28]
 801e27c:	9a01      	ldr	r2, [sp, #4]
 801e27e:	1109      	asrs	r1, r1, #4
 801e280:	6817      	ldr	r7, [r2, #0]
 801e282:	1a41      	subs	r1, r0, r1
 801e284:	9106      	str	r1, [sp, #24]
 801e286:	0039      	movs	r1, r7
 801e288:	17ff      	asrs	r7, r7, #31
 801e28a:	0038      	movs	r0, r7
 801e28c:	9505      	str	r5, [sp, #20]
 801e28e:	1af5      	subs	r5, r6, r3
 801e290:	17ef      	asrs	r7, r5, #31
 801e292:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e294:	6857      	ldr	r7, [r2, #4]
 801e296:	0003      	movs	r3, r0
 801e298:	17fe      	asrs	r6, r7, #31
 801e29a:	000a      	movs	r2, r1
 801e29c:	9108      	str	r1, [sp, #32]
 801e29e:	900a      	str	r0, [sp, #40]	@ 0x28
 801e2a0:	17e1      	asrs	r1, r4, #31
 801e2a2:	0020      	movs	r0, r4
 801e2a4:	960c      	str	r6, [sp, #48]	@ 0x30
 801e2a6:	f7e2 f98b 	bl	80005c0 <__aeabi_lmul>
 801e2aa:	003a      	movs	r2, r7
 801e2ac:	17fb      	asrs	r3, r7, #31
 801e2ae:	000e      	movs	r6, r1
 801e2b0:	0028      	movs	r0, r5
 801e2b2:	17e9      	asrs	r1, r5, #31
 801e2b4:	f7e2 f984 	bl	80005c0 <__aeabi_lmul>
 801e2b8:	4653      	mov	r3, sl
 801e2ba:	1a76      	subs	r6, r6, r1
 801e2bc:	0076      	lsls	r6, r6, #1
 801e2be:	601e      	str	r6, [r3, #0]
 801e2c0:	002a      	movs	r2, r5
 801e2c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e2c4:	9808      	ldr	r0, [sp, #32]
 801e2c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e2c8:	f7e2 f97a 	bl	80005c0 <__aeabi_lmul>
 801e2cc:	003a      	movs	r2, r7
 801e2ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2d0:	000d      	movs	r5, r1
 801e2d2:	0020      	movs	r0, r4
 801e2d4:	9907      	ldr	r1, [sp, #28]
 801e2d6:	f7e2 f973 	bl	80005c0 <__aeabi_lmul>
 801e2da:	4657      	mov	r7, sl
 801e2dc:	186d      	adds	r5, r5, r1
 801e2de:	006d      	lsls	r5, r5, #1
 801e2e0:	607d      	str	r5, [r7, #4]
 801e2e2:	9b03      	ldr	r3, [sp, #12]
 801e2e4:	9e06      	ldr	r6, [sp, #24]
 801e2e6:	9d05      	ldr	r5, [sp, #20]
 801e2e8:	46b4      	mov	ip, r6
 801e2ea:	1b5d      	subs	r5, r3, r5
 801e2ec:	9b00      	ldr	r3, [sp, #0]
 801e2ee:	17ef      	asrs	r7, r5, #31
 801e2f0:	0039      	movs	r1, r7
 801e2f2:	681f      	ldr	r7, [r3, #0]
 801e2f4:	17fc      	asrs	r4, r7, #31
 801e2f6:	0020      	movs	r0, r4
 801e2f8:	9c04      	ldr	r4, [sp, #16]
 801e2fa:	4464      	add	r4, ip
 801e2fc:	17e6      	asrs	r6, r4, #31
 801e2fe:	9407      	str	r4, [sp, #28]
 801e300:	9608      	str	r6, [sp, #32]
 801e302:	685e      	ldr	r6, [r3, #4]
 801e304:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e306:	17f2      	asrs	r2, r6, #31
 801e308:	0003      	movs	r3, r0
 801e30a:	920c      	str	r2, [sp, #48]	@ 0x30
 801e30c:	0028      	movs	r0, r5
 801e30e:	003a      	movs	r2, r7
 801e310:	910a      	str	r1, [sp, #40]	@ 0x28
 801e312:	f7e2 f955 	bl	80005c0 <__aeabi_lmul>
 801e316:	0032      	movs	r2, r6
 801e318:	17f3      	asrs	r3, r6, #31
 801e31a:	9807      	ldr	r0, [sp, #28]
 801e31c:	000c      	movs	r4, r1
 801e31e:	9908      	ldr	r1, [sp, #32]
 801e320:	f7e2 f94e 	bl	80005c0 <__aeabi_lmul>
 801e324:	4658      	mov	r0, fp
 801e326:	1a64      	subs	r4, r4, r1
 801e328:	0064      	lsls	r4, r4, #1
 801e32a:	9a07      	ldr	r2, [sp, #28]
 801e32c:	6004      	str	r4, [r0, #0]
 801e32e:	9b08      	ldr	r3, [sp, #32]
 801e330:	0038      	movs	r0, r7
 801e332:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e334:	f7e2 f944 	bl	80005c0 <__aeabi_lmul>
 801e338:	0032      	movs	r2, r6
 801e33a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e33c:	000c      	movs	r4, r1
 801e33e:	0028      	movs	r0, r5
 801e340:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e342:	f7e2 f93d 	bl	80005c0 <__aeabi_lmul>
 801e346:	9d05      	ldr	r5, [sp, #20]
 801e348:	465f      	mov	r7, fp
 801e34a:	46ac      	mov	ip, r5
 801e34c:	1864      	adds	r4, r4, r1
 801e34e:	9903      	ldr	r1, [sp, #12]
 801e350:	0064      	lsls	r4, r4, #1
 801e352:	4461      	add	r1, ip
 801e354:	607c      	str	r4, [r7, #4]
 801e356:	000c      	movs	r4, r1
 801e358:	17c9      	asrs	r1, r1, #31
 801e35a:	9105      	str	r1, [sp, #20]
 801e35c:	9902      	ldr	r1, [sp, #8]
 801e35e:	9804      	ldr	r0, [sp, #16]
 801e360:	680d      	ldr	r5, [r1, #0]
 801e362:	9e06      	ldr	r6, [sp, #24]
 801e364:	002b      	movs	r3, r5
 801e366:	17ed      	asrs	r5, r5, #31
 801e368:	684f      	ldr	r7, [r1, #4]
 801e36a:	9503      	str	r5, [sp, #12]
 801e36c:	1b85      	subs	r5, r0, r6
 801e36e:	17e8      	asrs	r0, r5, #31
 801e370:	001a      	movs	r2, r3
 801e372:	9006      	str	r0, [sp, #24]
 801e374:	17fe      	asrs	r6, r7, #31
 801e376:	9304      	str	r3, [sp, #16]
 801e378:	0020      	movs	r0, r4
 801e37a:	9b03      	ldr	r3, [sp, #12]
 801e37c:	17e1      	asrs	r1, r4, #31
 801e37e:	9607      	str	r6, [sp, #28]
 801e380:	f7e2 f91e 	bl	80005c0 <__aeabi_lmul>
 801e384:	003a      	movs	r2, r7
 801e386:	000e      	movs	r6, r1
 801e388:	17fb      	asrs	r3, r7, #31
 801e38a:	0028      	movs	r0, r5
 801e38c:	17e9      	asrs	r1, r5, #31
 801e38e:	f7e2 f917 	bl	80005c0 <__aeabi_lmul>
 801e392:	4640      	mov	r0, r8
 801e394:	1a76      	subs	r6, r6, r1
 801e396:	0076      	lsls	r6, r6, #1
 801e398:	002a      	movs	r2, r5
 801e39a:	9b06      	ldr	r3, [sp, #24]
 801e39c:	6006      	str	r6, [r0, #0]
 801e39e:	9903      	ldr	r1, [sp, #12]
 801e3a0:	9804      	ldr	r0, [sp, #16]
 801e3a2:	f7e2 f90d 	bl	80005c0 <__aeabi_lmul>
 801e3a6:	0020      	movs	r0, r4
 801e3a8:	2408      	movs	r4, #8
 801e3aa:	9b07      	ldr	r3, [sp, #28]
 801e3ac:	000d      	movs	r5, r1
 801e3ae:	003a      	movs	r2, r7
 801e3b0:	9905      	ldr	r1, [sp, #20]
 801e3b2:	f7e2 f905 	bl	80005c0 <__aeabi_lmul>
 801e3b6:	4640      	mov	r0, r8
 801e3b8:	46a4      	mov	ip, r4
 801e3ba:	186d      	adds	r5, r5, r1
 801e3bc:	006d      	lsls	r5, r5, #1
 801e3be:	6045      	str	r5, [r0, #4]
 801e3c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e3c2:	44e1      	add	r9, ip
 801e3c4:	3801      	subs	r0, #1
 801e3c6:	9009      	str	r0, [sp, #36]	@ 0x24
 801e3c8:	9a01      	ldr	r2, [sp, #4]
 801e3ca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e3cc:	44e2      	add	sl, ip
 801e3ce:	44e3      	add	fp, ip
 801e3d0:	44e0      	add	r8, ip
 801e3d2:	46a4      	mov	ip, r4
 801e3d4:	4462      	add	r2, ip
 801e3d6:	9201      	str	r2, [sp, #4]
 801e3d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e3da:	9b00      	ldr	r3, [sp, #0]
 801e3dc:	4694      	mov	ip, r2
 801e3de:	4463      	add	r3, ip
 801e3e0:	9300      	str	r3, [sp, #0]
 801e3e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3e4:	9902      	ldr	r1, [sp, #8]
 801e3e6:	469c      	mov	ip, r3
 801e3e8:	4461      	add	r1, ip
 801e3ea:	9102      	str	r1, [sp, #8]
 801e3ec:	2800      	cmp	r0, #0
 801e3ee:	d000      	beq.n	801e3f2 <arm_radix4_butterfly_inverse_q31+0x22e>
 801e3f0:	e70f      	b.n	801e212 <arm_radix4_butterfly_inverse_q31+0x4e>
 801e3f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3f4:	009b      	lsls	r3, r3, #2
 801e3f6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e3f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3fa:	9320      	str	r3, [sp, #128]	@ 0x80
 801e3fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e3fe:	2b04      	cmp	r3, #4
 801e400:	d800      	bhi.n	801e404 <arm_radix4_butterfly_inverse_q31+0x240>
 801e402:	e17c      	b.n	801e6fe <arm_radix4_butterfly_inverse_q31+0x53a>
 801e404:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e406:	0893      	lsrs	r3, r2, #2
 801e408:	1e59      	subs	r1, r3, #1
 801e40a:	9321      	str	r3, [sp, #132]	@ 0x84
 801e40c:	00db      	lsls	r3, r3, #3
 801e40e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e410:	00d3      	lsls	r3, r2, #3
 801e412:	9300      	str	r3, [sp, #0]
 801e414:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e416:	911a      	str	r1, [sp, #104]	@ 0x68
 801e418:	00da      	lsls	r2, r3, #3
 801e41a:	921e      	str	r2, [sp, #120]	@ 0x78
 801e41c:	011a      	lsls	r2, r3, #4
 801e41e:	921d      	str	r2, [sp, #116]	@ 0x74
 801e420:	001a      	movs	r2, r3
 801e422:	4694      	mov	ip, r2
 801e424:	005b      	lsls	r3, r3, #1
 801e426:	4463      	add	r3, ip
 801e428:	00db      	lsls	r3, r3, #3
 801e42a:	931c      	str	r3, [sp, #112]	@ 0x70
 801e42c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e42e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e430:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e432:	9318      	str	r3, [sp, #96]	@ 0x60
 801e434:	9319      	str	r3, [sp, #100]	@ 0x64
 801e436:	9316      	str	r3, [sp, #88]	@ 0x58
 801e438:	2300      	movs	r3, #0
 801e43a:	9315      	str	r3, [sp, #84]	@ 0x54
 801e43c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e43e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e440:	681a      	ldr	r2, [r3, #0]
 801e442:	685b      	ldr	r3, [r3, #4]
 801e444:	9205      	str	r2, [sp, #20]
 801e446:	9306      	str	r3, [sp, #24]
 801e448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e44a:	468c      	mov	ip, r1
 801e44c:	681a      	ldr	r2, [r3, #0]
 801e44e:	685b      	ldr	r3, [r3, #4]
 801e450:	9207      	str	r2, [sp, #28]
 801e452:	9308      	str	r3, [sp, #32]
 801e454:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e456:	681a      	ldr	r2, [r3, #0]
 801e458:	685b      	ldr	r3, [r3, #4]
 801e45a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e45c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e45e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e460:	0013      	movs	r3, r2
 801e462:	4463      	add	r3, ip
 801e464:	4698      	mov	r8, r3
 801e466:	0013      	movs	r3, r2
 801e468:	4442      	add	r2, r8
 801e46a:	4691      	mov	r9, r2
 801e46c:	001a      	movs	r2, r3
 801e46e:	444a      	add	r2, r9
 801e470:	4692      	mov	sl, r2
 801e472:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e474:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e476:	4293      	cmp	r3, r2
 801e478:	d800      	bhi.n	801e47c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e47a:	e0d9      	b.n	801e630 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e47c:	4694      	mov	ip, r2
 801e47e:	4644      	mov	r4, r8
 801e480:	4655      	mov	r5, sl
 801e482:	4688      	mov	r8, r1
 801e484:	9b07      	ldr	r3, [sp, #28]
 801e486:	17db      	asrs	r3, r3, #31
 801e488:	930c      	str	r3, [sp, #48]	@ 0x30
 801e48a:	9b08      	ldr	r3, [sp, #32]
 801e48c:	17db      	asrs	r3, r3, #31
 801e48e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e490:	9b05      	ldr	r3, [sp, #20]
 801e492:	17db      	asrs	r3, r3, #31
 801e494:	930e      	str	r3, [sp, #56]	@ 0x38
 801e496:	9b06      	ldr	r3, [sp, #24]
 801e498:	17db      	asrs	r3, r3, #31
 801e49a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e49e:	17db      	asrs	r3, r3, #31
 801e4a0:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4a4:	17db      	asrs	r3, r3, #31
 801e4a6:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4aa:	4463      	add	r3, ip
 801e4ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4ae:	4643      	mov	r3, r8
 801e4b0:	4641      	mov	r1, r8
 801e4b2:	681a      	ldr	r2, [r3, #0]
 801e4b4:	464b      	mov	r3, r9
 801e4b6:	684f      	ldr	r7, [r1, #4]
 801e4b8:	4649      	mov	r1, r9
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	18d6      	adds	r6, r2, r3
 801e4be:	1ad3      	subs	r3, r2, r3
 801e4c0:	9301      	str	r3, [sp, #4]
 801e4c2:	684b      	ldr	r3, [r1, #4]
 801e4c4:	1af9      	subs	r1, r7, r3
 801e4c6:	9102      	str	r1, [sp, #8]
 801e4c8:	6829      	ldr	r1, [r5, #0]
 801e4ca:	18f8      	adds	r0, r7, r3
 801e4cc:	468c      	mov	ip, r1
 801e4ce:	6827      	ldr	r7, [r4, #0]
 801e4d0:	4467      	add	r7, ip
 801e4d2:	003a      	movs	r2, r7
 801e4d4:	19f3      	adds	r3, r6, r7
 801e4d6:	4647      	mov	r7, r8
 801e4d8:	109b      	asrs	r3, r3, #2
 801e4da:	603b      	str	r3, [r7, #0]
 801e4dc:	6869      	ldr	r1, [r5, #4]
 801e4de:	6867      	ldr	r7, [r4, #4]
 801e4e0:	468c      	mov	ip, r1
 801e4e2:	4467      	add	r7, ip
 801e4e4:	003b      	movs	r3, r7
 801e4e6:	19c1      	adds	r1, r0, r7
 801e4e8:	4647      	mov	r7, r8
 801e4ea:	1ab6      	subs	r6, r6, r2
 801e4ec:	1089      	asrs	r1, r1, #2
 801e4ee:	6079      	str	r1, [r7, #4]
 801e4f0:	17f2      	asrs	r2, r6, #31
 801e4f2:	9900      	ldr	r1, [sp, #0]
 801e4f4:	4692      	mov	sl, r2
 801e4f6:	468c      	mov	ip, r1
 801e4f8:	6867      	ldr	r7, [r4, #4]
 801e4fa:	6869      	ldr	r1, [r5, #4]
 801e4fc:	44e0      	add	r8, ip
 801e4fe:	1a7f      	subs	r7, r7, r1
 801e500:	9703      	str	r7, [sp, #12]
 801e502:	6821      	ldr	r1, [r4, #0]
 801e504:	682f      	ldr	r7, [r5, #0]
 801e506:	1bc9      	subs	r1, r1, r7
 801e508:	1ac7      	subs	r7, r0, r3
 801e50a:	17fa      	asrs	r2, r7, #31
 801e50c:	4693      	mov	fp, r2
 801e50e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e510:	9a07      	ldr	r2, [sp, #28]
 801e512:	9104      	str	r1, [sp, #16]
 801e514:	0030      	movs	r0, r6
 801e516:	4651      	mov	r1, sl
 801e518:	f7e2 f852 	bl	80005c0 <__aeabi_lmul>
 801e51c:	9a08      	ldr	r2, [sp, #32]
 801e51e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e520:	9112      	str	r1, [sp, #72]	@ 0x48
 801e522:	0038      	movs	r0, r7
 801e524:	4659      	mov	r1, fp
 801e526:	f7e2 f84b 	bl	80005c0 <__aeabi_lmul>
 801e52a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e52c:	9a07      	ldr	r2, [sp, #28]
 801e52e:	1a41      	subs	r1, r0, r1
 801e530:	1049      	asrs	r1, r1, #1
 801e532:	6021      	str	r1, [r4, #0]
 801e534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e536:	0038      	movs	r0, r7
 801e538:	4659      	mov	r1, fp
 801e53a:	f7e2 f841 	bl	80005c0 <__aeabi_lmul>
 801e53e:	9a08      	ldr	r2, [sp, #32]
 801e540:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e542:	000f      	movs	r7, r1
 801e544:	0030      	movs	r0, r6
 801e546:	4651      	mov	r1, sl
 801e548:	f7e2 f83a 	bl	80005c0 <__aeabi_lmul>
 801e54c:	9b00      	ldr	r3, [sp, #0]
 801e54e:	187f      	adds	r7, r7, r1
 801e550:	469c      	mov	ip, r3
 801e552:	107f      	asrs	r7, r7, #1
 801e554:	6067      	str	r7, [r4, #4]
 801e556:	9a01      	ldr	r2, [sp, #4]
 801e558:	9f03      	ldr	r7, [sp, #12]
 801e55a:	9802      	ldr	r0, [sp, #8]
 801e55c:	1bd7      	subs	r7, r2, r7
 801e55e:	17fe      	asrs	r6, r7, #31
 801e560:	0031      	movs	r1, r6
 801e562:	9e04      	ldr	r6, [sp, #16]
 801e564:	4682      	mov	sl, r0
 801e566:	4464      	add	r4, ip
 801e568:	46b4      	mov	ip, r6
 801e56a:	44e2      	add	sl, ip
 801e56c:	4652      	mov	r2, sl
 801e56e:	17d2      	asrs	r2, r2, #31
 801e570:	4693      	mov	fp, r2
 801e572:	0038      	movs	r0, r7
 801e574:	9a05      	ldr	r2, [sp, #20]
 801e576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e578:	9112      	str	r1, [sp, #72]	@ 0x48
 801e57a:	f7e2 f821 	bl	80005c0 <__aeabi_lmul>
 801e57e:	9a06      	ldr	r2, [sp, #24]
 801e580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e582:	000e      	movs	r6, r1
 801e584:	4650      	mov	r0, sl
 801e586:	4659      	mov	r1, fp
 801e588:	f7e2 f81a 	bl	80005c0 <__aeabi_lmul>
 801e58c:	4648      	mov	r0, r9
 801e58e:	1a76      	subs	r6, r6, r1
 801e590:	1076      	asrs	r6, r6, #1
 801e592:	6006      	str	r6, [r0, #0]
 801e594:	9a05      	ldr	r2, [sp, #20]
 801e596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e598:	4650      	mov	r0, sl
 801e59a:	4659      	mov	r1, fp
 801e59c:	f7e2 f810 	bl	80005c0 <__aeabi_lmul>
 801e5a0:	9a06      	ldr	r2, [sp, #24]
 801e5a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5a4:	000e      	movs	r6, r1
 801e5a6:	0038      	movs	r0, r7
 801e5a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e5aa:	f7e2 f809 	bl	80005c0 <__aeabi_lmul>
 801e5ae:	9a00      	ldr	r2, [sp, #0]
 801e5b0:	9f03      	ldr	r7, [sp, #12]
 801e5b2:	4694      	mov	ip, r2
 801e5b4:	1876      	adds	r6, r6, r1
 801e5b6:	4649      	mov	r1, r9
 801e5b8:	44e1      	add	r9, ip
 801e5ba:	46bc      	mov	ip, r7
 801e5bc:	9b01      	ldr	r3, [sp, #4]
 801e5be:	1076      	asrs	r6, r6, #1
 801e5c0:	4463      	add	r3, ip
 801e5c2:	17df      	asrs	r7, r3, #31
 801e5c4:	604e      	str	r6, [r1, #4]
 801e5c6:	46ba      	mov	sl, r7
 801e5c8:	001e      	movs	r6, r3
 801e5ca:	9802      	ldr	r0, [sp, #8]
 801e5cc:	9b04      	ldr	r3, [sp, #16]
 801e5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5d0:	1ac7      	subs	r7, r0, r3
 801e5d2:	17fb      	asrs	r3, r7, #31
 801e5d4:	469b      	mov	fp, r3
 801e5d6:	0030      	movs	r0, r6
 801e5d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5da:	4651      	mov	r1, sl
 801e5dc:	f7e1 fff0 	bl	80005c0 <__aeabi_lmul>
 801e5e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e5e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e5e4:	9101      	str	r1, [sp, #4]
 801e5e6:	0038      	movs	r0, r7
 801e5e8:	4659      	mov	r1, fp
 801e5ea:	f7e1 ffe9 	bl	80005c0 <__aeabi_lmul>
 801e5ee:	9801      	ldr	r0, [sp, #4]
 801e5f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5f2:	1a41      	subs	r1, r0, r1
 801e5f4:	1049      	asrs	r1, r1, #1
 801e5f6:	6029      	str	r1, [r5, #0]
 801e5f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5fa:	0038      	movs	r0, r7
 801e5fc:	4659      	mov	r1, fp
 801e5fe:	f7e1 ffdf 	bl	80005c0 <__aeabi_lmul>
 801e602:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e604:	000f      	movs	r7, r1
 801e606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e608:	0030      	movs	r0, r6
 801e60a:	4651      	mov	r1, sl
 801e60c:	f7e1 ffd8 	bl	80005c0 <__aeabi_lmul>
 801e610:	187f      	adds	r7, r7, r1
 801e612:	107f      	asrs	r7, r7, #1
 801e614:	606f      	str	r7, [r5, #4]
 801e616:	9a00      	ldr	r2, [sp, #0]
 801e618:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e61a:	4694      	mov	ip, r2
 801e61c:	4465      	add	r5, ip
 801e61e:	468c      	mov	ip, r1
 801e620:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e622:	0013      	movs	r3, r2
 801e624:	4462      	add	r2, ip
 801e626:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e628:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e62a:	429a      	cmp	r2, r3
 801e62c:	d900      	bls.n	801e630 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e62e:	e73e      	b.n	801e4ae <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e630:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e632:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e634:	468c      	mov	ip, r1
 801e636:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e638:	4462      	add	r2, ip
 801e63a:	468c      	mov	ip, r1
 801e63c:	9216      	str	r2, [sp, #88]	@ 0x58
 801e63e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e640:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e642:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e644:	4462      	add	r2, ip
 801e646:	468c      	mov	ip, r1
 801e648:	9219      	str	r2, [sp, #100]	@ 0x64
 801e64a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e64c:	3301      	adds	r3, #1
 801e64e:	4462      	add	r2, ip
 801e650:	9218      	str	r2, [sp, #96]	@ 0x60
 801e652:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e654:	9315      	str	r3, [sp, #84]	@ 0x54
 801e656:	3208      	adds	r2, #8
 801e658:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e65a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e65c:	4293      	cmp	r3, r2
 801e65e:	d800      	bhi.n	801e662 <arm_radix4_butterfly_inverse_q31+0x49e>
 801e660:	e6ec      	b.n	801e43c <arm_radix4_butterfly_inverse_q31+0x278>
 801e662:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e664:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e666:	009b      	lsls	r3, r3, #2
 801e668:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e66a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e66c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e66e:	089b      	lsrs	r3, r3, #2
 801e670:	9320      	str	r3, [sp, #128]	@ 0x80
 801e672:	2b04      	cmp	r3, #4
 801e674:	d900      	bls.n	801e678 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e676:	e6c5      	b.n	801e404 <arm_radix4_butterfly_inverse_q31+0x240>
 801e678:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e67a:	469a      	mov	sl, r3
 801e67c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e67e:	681a      	ldr	r2, [r3, #0]
 801e680:	6918      	ldr	r0, [r3, #16]
 801e682:	4691      	mov	r9, r2
 801e684:	464c      	mov	r4, r9
 801e686:	4680      	mov	r8, r0
 801e688:	69de      	ldr	r6, [r3, #28]
 801e68a:	689d      	ldr	r5, [r3, #8]
 801e68c:	46b4      	mov	ip, r6
 801e68e:	6998      	ldr	r0, [r3, #24]
 801e690:	1964      	adds	r4, r4, r5
 801e692:	6859      	ldr	r1, [r3, #4]
 801e694:	68da      	ldr	r2, [r3, #12]
 801e696:	4444      	add	r4, r8
 801e698:	695f      	ldr	r7, [r3, #20]
 801e69a:	1824      	adds	r4, r4, r0
 801e69c:	601c      	str	r4, [r3, #0]
 801e69e:	188c      	adds	r4, r1, r2
 801e6a0:	19e4      	adds	r4, r4, r7
 801e6a2:	4464      	add	r4, ip
 801e6a4:	605c      	str	r4, [r3, #4]
 801e6a6:	464c      	mov	r4, r9
 801e6a8:	1b64      	subs	r4, r4, r5
 801e6aa:	4444      	add	r4, r8
 801e6ac:	1a24      	subs	r4, r4, r0
 801e6ae:	609c      	str	r4, [r3, #8]
 801e6b0:	1a8c      	subs	r4, r1, r2
 801e6b2:	19e4      	adds	r4, r4, r7
 801e6b4:	1ba4      	subs	r4, r4, r6
 801e6b6:	60dc      	str	r4, [r3, #12]
 801e6b8:	464c      	mov	r4, r9
 801e6ba:	4646      	mov	r6, r8
 801e6bc:	1aa4      	subs	r4, r4, r2
 801e6be:	1ba4      	subs	r4, r4, r6
 801e6c0:	4464      	add	r4, ip
 801e6c2:	611c      	str	r4, [r3, #16]
 801e6c4:	194c      	adds	r4, r1, r5
 801e6c6:	1be4      	subs	r4, r4, r7
 801e6c8:	1a24      	subs	r4, r4, r0
 801e6ca:	615c      	str	r4, [r3, #20]
 801e6cc:	4644      	mov	r4, r8
 801e6ce:	4666      	mov	r6, ip
 801e6d0:	444a      	add	r2, r9
 801e6d2:	1b12      	subs	r2, r2, r4
 801e6d4:	1b92      	subs	r2, r2, r6
 801e6d6:	619a      	str	r2, [r3, #24]
 801e6d8:	1b4a      	subs	r2, r1, r5
 801e6da:	1bd1      	subs	r1, r2, r7
 801e6dc:	2201      	movs	r2, #1
 801e6de:	4252      	negs	r2, r2
 801e6e0:	4694      	mov	ip, r2
 801e6e2:	44e2      	add	sl, ip
 801e6e4:	4652      	mov	r2, sl
 801e6e6:	1809      	adds	r1, r1, r0
 801e6e8:	61d9      	str	r1, [r3, #28]
 801e6ea:	3320      	adds	r3, #32
 801e6ec:	2a00      	cmp	r2, #0
 801e6ee:	d1c6      	bne.n	801e67e <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e6f0:	b027      	add	sp, #156	@ 0x9c
 801e6f2:	bc3c      	pop	{r2, r3, r4, r5}
 801e6f4:	4690      	mov	r8, r2
 801e6f6:	4699      	mov	r9, r3
 801e6f8:	46a2      	mov	sl, r4
 801e6fa:	46ab      	mov	fp, r5
 801e6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6fe:	469a      	mov	sl, r3
 801e700:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e702:	e7bc      	b.n	801e67e <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e704 <arm_cmplx_mag_squared_q31>:
 801e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e706:	464f      	mov	r7, r9
 801e708:	4646      	mov	r6, r8
 801e70a:	0004      	movs	r4, r0
 801e70c:	b4c0      	push	{r6, r7}
 801e70e:	0016      	movs	r6, r2
 801e710:	000f      	movs	r7, r1
 801e712:	2a00      	cmp	r2, #0
 801e714:	d018      	beq.n	801e748 <arm_cmplx_mag_squared_q31+0x44>
 801e716:	6823      	ldr	r3, [r4, #0]
 801e718:	6822      	ldr	r2, [r4, #0]
 801e71a:	17d9      	asrs	r1, r3, #31
 801e71c:	6863      	ldr	r3, [r4, #4]
 801e71e:	0010      	movs	r0, r2
 801e720:	4698      	mov	r8, r3
 801e722:	17db      	asrs	r3, r3, #31
 801e724:	4699      	mov	r9, r3
 801e726:	000b      	movs	r3, r1
 801e728:	f7e1 ff4a 	bl	80005c0 <__aeabi_lmul>
 801e72c:	4642      	mov	r2, r8
 801e72e:	104d      	asrs	r5, r1, #1
 801e730:	464b      	mov	r3, r9
 801e732:	4640      	mov	r0, r8
 801e734:	4649      	mov	r1, r9
 801e736:	f7e1 ff43 	bl	80005c0 <__aeabi_lmul>
 801e73a:	1049      	asrs	r1, r1, #1
 801e73c:	1869      	adds	r1, r5, r1
 801e73e:	3e01      	subs	r6, #1
 801e740:	c702      	stmia	r7!, {r1}
 801e742:	3408      	adds	r4, #8
 801e744:	2e00      	cmp	r6, #0
 801e746:	d1e6      	bne.n	801e716 <arm_cmplx_mag_squared_q31+0x12>
 801e748:	bc0c      	pop	{r2, r3}
 801e74a:	4690      	mov	r8, r2
 801e74c:	4699      	mov	r9, r3
 801e74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e750 <arm_mult_q31>:
 801e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e752:	4646      	mov	r6, r8
 801e754:	464f      	mov	r7, r9
 801e756:	4690      	mov	r8, r2
 801e758:	b4c0      	push	{r6, r7}
 801e75a:	001d      	movs	r5, r3
 801e75c:	0006      	movs	r6, r0
 801e75e:	000f      	movs	r7, r1
 801e760:	2400      	movs	r4, #0
 801e762:	2b00      	cmp	r3, #0
 801e764:	d020      	beq.n	801e7a8 <arm_mult_q31+0x58>
 801e766:	4b12      	ldr	r3, [pc, #72]	@ (801e7b0 <arm_mult_q31+0x60>)
 801e768:	4699      	mov	r9, r3
 801e76a:	e007      	b.n	801e77c <arm_mult_q31+0x2c>
 801e76c:	464b      	mov	r3, r9
 801e76e:	4059      	eors	r1, r3
 801e770:	4643      	mov	r3, r8
 801e772:	3d01      	subs	r5, #1
 801e774:	5119      	str	r1, [r3, r4]
 801e776:	3404      	adds	r4, #4
 801e778:	2d00      	cmp	r5, #0
 801e77a:	d015      	beq.n	801e7a8 <arm_mult_q31+0x58>
 801e77c:	5933      	ldr	r3, [r6, r4]
 801e77e:	593a      	ldr	r2, [r7, r4]
 801e780:	17d9      	asrs	r1, r3, #31
 801e782:	593b      	ldr	r3, [r7, r4]
 801e784:	5930      	ldr	r0, [r6, r4]
 801e786:	17db      	asrs	r3, r3, #31
 801e788:	f7e1 ff1a 	bl	80005c0 <__aeabi_lmul>
 801e78c:	004b      	lsls	r3, r1, #1
 801e78e:	0fc0      	lsrs	r0, r0, #31
 801e790:	4318      	orrs	r0, r3
 801e792:	17c9      	asrs	r1, r1, #31
 801e794:	17c3      	asrs	r3, r0, #31
 801e796:	428b      	cmp	r3, r1
 801e798:	d1e8      	bne.n	801e76c <arm_mult_q31+0x1c>
 801e79a:	0001      	movs	r1, r0
 801e79c:	4643      	mov	r3, r8
 801e79e:	3d01      	subs	r5, #1
 801e7a0:	5119      	str	r1, [r3, r4]
 801e7a2:	3404      	adds	r4, #4
 801e7a4:	2d00      	cmp	r5, #0
 801e7a6:	d1e9      	bne.n	801e77c <arm_mult_q31+0x2c>
 801e7a8:	bc0c      	pop	{r2, r3}
 801e7aa:	4690      	mov	r8, r2
 801e7ac:	4699      	mov	r9, r3
 801e7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7b0:	7fffffff 	.word	0x7fffffff

0801e7b4 <arm_add_q31>:
 801e7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7b6:	465f      	mov	r7, fp
 801e7b8:	4656      	mov	r6, sl
 801e7ba:	464d      	mov	r5, r9
 801e7bc:	4644      	mov	r4, r8
 801e7be:	b4f0      	push	{r4, r5, r6, r7}
 801e7c0:	4693      	mov	fp, r2
 801e7c2:	b083      	sub	sp, #12
 801e7c4:	4681      	mov	r9, r0
 801e7c6:	468a      	mov	sl, r1
 801e7c8:	4698      	mov	r8, r3
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	d020      	beq.n	801e812 <arm_add_q31+0x5e>
 801e7d0:	4649      	mov	r1, r9
 801e7d2:	4653      	mov	r3, sl
 801e7d4:	588e      	ldr	r6, [r1, r2]
 801e7d6:	589b      	ldr	r3, [r3, r2]
 801e7d8:	17f7      	asrs	r7, r6, #31
 801e7da:	001c      	movs	r4, r3
 801e7dc:	0030      	movs	r0, r6
 801e7de:	0039      	movs	r1, r7
 801e7e0:	17dd      	asrs	r5, r3, #31
 801e7e2:	46b4      	mov	ip, r6
 801e7e4:	1900      	adds	r0, r0, r4
 801e7e6:	4169      	adcs	r1, r5
 801e7e8:	4463      	add	r3, ip
 801e7ea:	9000      	str	r0, [sp, #0]
 801e7ec:	9101      	str	r1, [sp, #4]
 801e7ee:	17d9      	asrs	r1, r3, #31
 801e7f0:	468c      	mov	ip, r1
 801e7f2:	9901      	ldr	r1, [sp, #4]
 801e7f4:	458c      	cmp	ip, r1
 801e7f6:	d002      	beq.n	801e7fe <arm_add_q31+0x4a>
 801e7f8:	17cb      	asrs	r3, r1, #31
 801e7fa:	4909      	ldr	r1, [pc, #36]	@ (801e820 <arm_add_q31+0x6c>)
 801e7fc:	404b      	eors	r3, r1
 801e7fe:	4659      	mov	r1, fp
 801e800:	508b      	str	r3, [r1, r2]
 801e802:	2301      	movs	r3, #1
 801e804:	425b      	negs	r3, r3
 801e806:	469c      	mov	ip, r3
 801e808:	44e0      	add	r8, ip
 801e80a:	4643      	mov	r3, r8
 801e80c:	3204      	adds	r2, #4
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d1de      	bne.n	801e7d0 <arm_add_q31+0x1c>
 801e812:	b003      	add	sp, #12
 801e814:	bc3c      	pop	{r2, r3, r4, r5}
 801e816:	4690      	mov	r8, r2
 801e818:	4699      	mov	r9, r3
 801e81a:	46a2      	mov	sl, r4
 801e81c:	46ab      	mov	fp, r5
 801e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e820:	7fffffff 	.word	0x7fffffff

0801e824 <atof>:
 801e824:	b510      	push	{r4, lr}
 801e826:	2100      	movs	r1, #0
 801e828:	f000 fe12 	bl	801f450 <strtod>
 801e82c:	bd10      	pop	{r4, pc}

0801e82e <atoi>:
 801e82e:	b510      	push	{r4, lr}
 801e830:	220a      	movs	r2, #10
 801e832:	2100      	movs	r1, #0
 801e834:	f000 fea4 	bl	801f580 <strtol>
 801e838:	bd10      	pop	{r4, pc}
	...

0801e83c <sulp>:
 801e83c:	b570      	push	{r4, r5, r6, lr}
 801e83e:	0016      	movs	r6, r2
 801e840:	000d      	movs	r5, r1
 801e842:	f003 fcf3 	bl	802222c <__ulp>
 801e846:	2e00      	cmp	r6, #0
 801e848:	d00d      	beq.n	801e866 <sulp+0x2a>
 801e84a:	236b      	movs	r3, #107	@ 0x6b
 801e84c:	006a      	lsls	r2, r5, #1
 801e84e:	0d52      	lsrs	r2, r2, #21
 801e850:	1a9b      	subs	r3, r3, r2
 801e852:	2b00      	cmp	r3, #0
 801e854:	dd07      	ble.n	801e866 <sulp+0x2a>
 801e856:	2400      	movs	r4, #0
 801e858:	4a03      	ldr	r2, [pc, #12]	@ (801e868 <sulp+0x2c>)
 801e85a:	051b      	lsls	r3, r3, #20
 801e85c:	189d      	adds	r5, r3, r2
 801e85e:	002b      	movs	r3, r5
 801e860:	0022      	movs	r2, r4
 801e862:	f7e3 feeb 	bl	800263c <__aeabi_dmul>
 801e866:	bd70      	pop	{r4, r5, r6, pc}
 801e868:	3ff00000 	.word	0x3ff00000

0801e86c <_strtod_l>:
 801e86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e86e:	b0a3      	sub	sp, #140	@ 0x8c
 801e870:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e872:	2200      	movs	r2, #0
 801e874:	2600      	movs	r6, #0
 801e876:	2700      	movs	r7, #0
 801e878:	9005      	str	r0, [sp, #20]
 801e87a:	9109      	str	r1, [sp, #36]	@ 0x24
 801e87c:	921e      	str	r2, [sp, #120]	@ 0x78
 801e87e:	911d      	str	r1, [sp, #116]	@ 0x74
 801e880:	780a      	ldrb	r2, [r1, #0]
 801e882:	2a2b      	cmp	r2, #43	@ 0x2b
 801e884:	d053      	beq.n	801e92e <_strtod_l+0xc2>
 801e886:	d83f      	bhi.n	801e908 <_strtod_l+0x9c>
 801e888:	2a0d      	cmp	r2, #13
 801e88a:	d839      	bhi.n	801e900 <_strtod_l+0x94>
 801e88c:	2a08      	cmp	r2, #8
 801e88e:	d839      	bhi.n	801e904 <_strtod_l+0x98>
 801e890:	2a00      	cmp	r2, #0
 801e892:	d042      	beq.n	801e91a <_strtod_l+0xae>
 801e894:	2200      	movs	r2, #0
 801e896:	9212      	str	r2, [sp, #72]	@ 0x48
 801e898:	2100      	movs	r1, #0
 801e89a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e89c:	910c      	str	r1, [sp, #48]	@ 0x30
 801e89e:	782a      	ldrb	r2, [r5, #0]
 801e8a0:	2a30      	cmp	r2, #48	@ 0x30
 801e8a2:	d000      	beq.n	801e8a6 <_strtod_l+0x3a>
 801e8a4:	e083      	b.n	801e9ae <_strtod_l+0x142>
 801e8a6:	786a      	ldrb	r2, [r5, #1]
 801e8a8:	3120      	adds	r1, #32
 801e8aa:	438a      	bics	r2, r1
 801e8ac:	2a58      	cmp	r2, #88	@ 0x58
 801e8ae:	d000      	beq.n	801e8b2 <_strtod_l+0x46>
 801e8b0:	e073      	b.n	801e99a <_strtod_l+0x12e>
 801e8b2:	9302      	str	r3, [sp, #8]
 801e8b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e8b6:	4a95      	ldr	r2, [pc, #596]	@ (801eb0c <_strtod_l+0x2a0>)
 801e8b8:	9301      	str	r3, [sp, #4]
 801e8ba:	ab1e      	add	r3, sp, #120	@ 0x78
 801e8bc:	9300      	str	r3, [sp, #0]
 801e8be:	9805      	ldr	r0, [sp, #20]
 801e8c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e8c2:	a91d      	add	r1, sp, #116	@ 0x74
 801e8c4:	f002 fd62 	bl	802138c <__gethex>
 801e8c8:	230f      	movs	r3, #15
 801e8ca:	0002      	movs	r2, r0
 801e8cc:	401a      	ands	r2, r3
 801e8ce:	0004      	movs	r4, r0
 801e8d0:	9206      	str	r2, [sp, #24]
 801e8d2:	4218      	tst	r0, r3
 801e8d4:	d005      	beq.n	801e8e2 <_strtod_l+0x76>
 801e8d6:	2a06      	cmp	r2, #6
 801e8d8:	d12b      	bne.n	801e932 <_strtod_l+0xc6>
 801e8da:	2300      	movs	r3, #0
 801e8dc:	3501      	adds	r5, #1
 801e8de:	951d      	str	r5, [sp, #116]	@ 0x74
 801e8e0:	9312      	str	r3, [sp, #72]	@ 0x48
 801e8e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d002      	beq.n	801e8ee <_strtod_l+0x82>
 801e8e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e8ec:	6013      	str	r3, [r2, #0]
 801e8ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d019      	beq.n	801e928 <_strtod_l+0xbc>
 801e8f4:	2380      	movs	r3, #128	@ 0x80
 801e8f6:	0030      	movs	r0, r6
 801e8f8:	061b      	lsls	r3, r3, #24
 801e8fa:	18f9      	adds	r1, r7, r3
 801e8fc:	b023      	add	sp, #140	@ 0x8c
 801e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e900:	2a20      	cmp	r2, #32
 801e902:	d1c7      	bne.n	801e894 <_strtod_l+0x28>
 801e904:	3101      	adds	r1, #1
 801e906:	e7ba      	b.n	801e87e <_strtod_l+0x12>
 801e908:	2a2d      	cmp	r2, #45	@ 0x2d
 801e90a:	d1c3      	bne.n	801e894 <_strtod_l+0x28>
 801e90c:	3a2c      	subs	r2, #44	@ 0x2c
 801e90e:	9212      	str	r2, [sp, #72]	@ 0x48
 801e910:	1c4a      	adds	r2, r1, #1
 801e912:	921d      	str	r2, [sp, #116]	@ 0x74
 801e914:	784a      	ldrb	r2, [r1, #1]
 801e916:	2a00      	cmp	r2, #0
 801e918:	d1be      	bne.n	801e898 <_strtod_l+0x2c>
 801e91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e91c:	931d      	str	r3, [sp, #116]	@ 0x74
 801e91e:	2300      	movs	r3, #0
 801e920:	9312      	str	r3, [sp, #72]	@ 0x48
 801e922:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e924:	2b00      	cmp	r3, #0
 801e926:	d1df      	bne.n	801e8e8 <_strtod_l+0x7c>
 801e928:	0030      	movs	r0, r6
 801e92a:	0039      	movs	r1, r7
 801e92c:	e7e6      	b.n	801e8fc <_strtod_l+0x90>
 801e92e:	2200      	movs	r2, #0
 801e930:	e7ed      	b.n	801e90e <_strtod_l+0xa2>
 801e932:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e934:	2a00      	cmp	r2, #0
 801e936:	d007      	beq.n	801e948 <_strtod_l+0xdc>
 801e938:	2135      	movs	r1, #53	@ 0x35
 801e93a:	a820      	add	r0, sp, #128	@ 0x80
 801e93c:	f003 fd6c 	bl	8022418 <__copybits>
 801e940:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e942:	9805      	ldr	r0, [sp, #20]
 801e944:	f003 f926 	bl	8021b94 <_Bfree>
 801e948:	9806      	ldr	r0, [sp, #24]
 801e94a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e94c:	3801      	subs	r0, #1
 801e94e:	2804      	cmp	r0, #4
 801e950:	d806      	bhi.n	801e960 <_strtod_l+0xf4>
 801e952:	f7e1 fc13 	bl	800017c <__gnu_thumb1_case_uqi>
 801e956:	0312      	.short	0x0312
 801e958:	1e1c      	.short	0x1e1c
 801e95a:	12          	.byte	0x12
 801e95b:	00          	.byte	0x00
 801e95c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e95e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e960:	05e4      	lsls	r4, r4, #23
 801e962:	d502      	bpl.n	801e96a <_strtod_l+0xfe>
 801e964:	2380      	movs	r3, #128	@ 0x80
 801e966:	061b      	lsls	r3, r3, #24
 801e968:	431f      	orrs	r7, r3
 801e96a:	4b69      	ldr	r3, [pc, #420]	@ (801eb10 <_strtod_l+0x2a4>)
 801e96c:	423b      	tst	r3, r7
 801e96e:	d1b8      	bne.n	801e8e2 <_strtod_l+0x76>
 801e970:	f001 fd90 	bl	8020494 <__errno>
 801e974:	2322      	movs	r3, #34	@ 0x22
 801e976:	6003      	str	r3, [r0, #0]
 801e978:	e7b3      	b.n	801e8e2 <_strtod_l+0x76>
 801e97a:	4966      	ldr	r1, [pc, #408]	@ (801eb14 <_strtod_l+0x2a8>)
 801e97c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e97e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e980:	400a      	ands	r2, r1
 801e982:	4965      	ldr	r1, [pc, #404]	@ (801eb18 <_strtod_l+0x2ac>)
 801e984:	185b      	adds	r3, r3, r1
 801e986:	051b      	lsls	r3, r3, #20
 801e988:	431a      	orrs	r2, r3
 801e98a:	0017      	movs	r7, r2
 801e98c:	e7e8      	b.n	801e960 <_strtod_l+0xf4>
 801e98e:	4f60      	ldr	r7, [pc, #384]	@ (801eb10 <_strtod_l+0x2a4>)
 801e990:	e7e6      	b.n	801e960 <_strtod_l+0xf4>
 801e992:	2601      	movs	r6, #1
 801e994:	4f61      	ldr	r7, [pc, #388]	@ (801eb1c <_strtod_l+0x2b0>)
 801e996:	4276      	negs	r6, r6
 801e998:	e7e2      	b.n	801e960 <_strtod_l+0xf4>
 801e99a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e99c:	1c5a      	adds	r2, r3, #1
 801e99e:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9a0:	785b      	ldrb	r3, [r3, #1]
 801e9a2:	2b30      	cmp	r3, #48	@ 0x30
 801e9a4:	d0f9      	beq.n	801e99a <_strtod_l+0x12e>
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d09b      	beq.n	801e8e2 <_strtod_l+0x76>
 801e9aa:	2301      	movs	r3, #1
 801e9ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801e9ae:	2500      	movs	r5, #0
 801e9b0:	220a      	movs	r2, #10
 801e9b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9b4:	950d      	str	r5, [sp, #52]	@ 0x34
 801e9b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e9b8:	9508      	str	r5, [sp, #32]
 801e9ba:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e9bc:	7804      	ldrb	r4, [r0, #0]
 801e9be:	0023      	movs	r3, r4
 801e9c0:	3b30      	subs	r3, #48	@ 0x30
 801e9c2:	b2d9      	uxtb	r1, r3
 801e9c4:	2909      	cmp	r1, #9
 801e9c6:	d927      	bls.n	801ea18 <_strtod_l+0x1ac>
 801e9c8:	2201      	movs	r2, #1
 801e9ca:	4955      	ldr	r1, [pc, #340]	@ (801eb20 <_strtod_l+0x2b4>)
 801e9cc:	f001 fcd4 	bl	8020378 <strncmp>
 801e9d0:	2800      	cmp	r0, #0
 801e9d2:	d031      	beq.n	801ea38 <_strtod_l+0x1cc>
 801e9d4:	2000      	movs	r0, #0
 801e9d6:	0023      	movs	r3, r4
 801e9d8:	4684      	mov	ip, r0
 801e9da:	9a08      	ldr	r2, [sp, #32]
 801e9dc:	900e      	str	r0, [sp, #56]	@ 0x38
 801e9de:	9206      	str	r2, [sp, #24]
 801e9e0:	2220      	movs	r2, #32
 801e9e2:	0019      	movs	r1, r3
 801e9e4:	4391      	bics	r1, r2
 801e9e6:	000a      	movs	r2, r1
 801e9e8:	2100      	movs	r1, #0
 801e9ea:	9107      	str	r1, [sp, #28]
 801e9ec:	2a45      	cmp	r2, #69	@ 0x45
 801e9ee:	d000      	beq.n	801e9f2 <_strtod_l+0x186>
 801e9f0:	e0c0      	b.n	801eb74 <_strtod_l+0x308>
 801e9f2:	9b06      	ldr	r3, [sp, #24]
 801e9f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e9f6:	4303      	orrs	r3, r0
 801e9f8:	4313      	orrs	r3, r2
 801e9fa:	428b      	cmp	r3, r1
 801e9fc:	d08d      	beq.n	801e91a <_strtod_l+0xae>
 801e9fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea00:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea02:	3301      	adds	r3, #1
 801ea04:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea08:	785b      	ldrb	r3, [r3, #1]
 801ea0a:	2b2b      	cmp	r3, #43	@ 0x2b
 801ea0c:	d070      	beq.n	801eaf0 <_strtod_l+0x284>
 801ea0e:	000c      	movs	r4, r1
 801ea10:	2b2d      	cmp	r3, #45	@ 0x2d
 801ea12:	d173      	bne.n	801eafc <_strtod_l+0x290>
 801ea14:	2401      	movs	r4, #1
 801ea16:	e06c      	b.n	801eaf2 <_strtod_l+0x286>
 801ea18:	9908      	ldr	r1, [sp, #32]
 801ea1a:	2908      	cmp	r1, #8
 801ea1c:	dc09      	bgt.n	801ea32 <_strtod_l+0x1c6>
 801ea1e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ea20:	4351      	muls	r1, r2
 801ea22:	185b      	adds	r3, r3, r1
 801ea24:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea26:	9b08      	ldr	r3, [sp, #32]
 801ea28:	3001      	adds	r0, #1
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	9308      	str	r3, [sp, #32]
 801ea2e:	901d      	str	r0, [sp, #116]	@ 0x74
 801ea30:	e7c3      	b.n	801e9ba <_strtod_l+0x14e>
 801ea32:	4355      	muls	r5, r2
 801ea34:	195d      	adds	r5, r3, r5
 801ea36:	e7f6      	b.n	801ea26 <_strtod_l+0x1ba>
 801ea38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea3a:	1c5a      	adds	r2, r3, #1
 801ea3c:	921d      	str	r2, [sp, #116]	@ 0x74
 801ea3e:	9a08      	ldr	r2, [sp, #32]
 801ea40:	785b      	ldrb	r3, [r3, #1]
 801ea42:	2a00      	cmp	r2, #0
 801ea44:	d03a      	beq.n	801eabc <_strtod_l+0x250>
 801ea46:	900e      	str	r0, [sp, #56]	@ 0x38
 801ea48:	9206      	str	r2, [sp, #24]
 801ea4a:	001a      	movs	r2, r3
 801ea4c:	3a30      	subs	r2, #48	@ 0x30
 801ea4e:	2a09      	cmp	r2, #9
 801ea50:	d912      	bls.n	801ea78 <_strtod_l+0x20c>
 801ea52:	2201      	movs	r2, #1
 801ea54:	4694      	mov	ip, r2
 801ea56:	e7c3      	b.n	801e9e0 <_strtod_l+0x174>
 801ea58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea5a:	3001      	adds	r0, #1
 801ea5c:	1c5a      	adds	r2, r3, #1
 801ea5e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ea60:	785b      	ldrb	r3, [r3, #1]
 801ea62:	2b30      	cmp	r3, #48	@ 0x30
 801ea64:	d0f8      	beq.n	801ea58 <_strtod_l+0x1ec>
 801ea66:	001a      	movs	r2, r3
 801ea68:	3a31      	subs	r2, #49	@ 0x31
 801ea6a:	2a08      	cmp	r2, #8
 801ea6c:	d83b      	bhi.n	801eae6 <_strtod_l+0x27a>
 801ea6e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ea70:	2000      	movs	r0, #0
 801ea72:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ea74:	9006      	str	r0, [sp, #24]
 801ea76:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ea78:	001a      	movs	r2, r3
 801ea7a:	1c41      	adds	r1, r0, #1
 801ea7c:	3a30      	subs	r2, #48	@ 0x30
 801ea7e:	2b30      	cmp	r3, #48	@ 0x30
 801ea80:	d016      	beq.n	801eab0 <_strtod_l+0x244>
 801ea82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea84:	185b      	adds	r3, r3, r1
 801ea86:	930e      	str	r3, [sp, #56]	@ 0x38
 801ea88:	9b06      	ldr	r3, [sp, #24]
 801ea8a:	210a      	movs	r1, #10
 801ea8c:	469c      	mov	ip, r3
 801ea8e:	4484      	add	ip, r0
 801ea90:	459c      	cmp	ip, r3
 801ea92:	d115      	bne.n	801eac0 <_strtod_l+0x254>
 801ea94:	9906      	ldr	r1, [sp, #24]
 801ea96:	9b06      	ldr	r3, [sp, #24]
 801ea98:	3101      	adds	r1, #1
 801ea9a:	1809      	adds	r1, r1, r0
 801ea9c:	181b      	adds	r3, r3, r0
 801ea9e:	9106      	str	r1, [sp, #24]
 801eaa0:	2b08      	cmp	r3, #8
 801eaa2:	dc19      	bgt.n	801ead8 <_strtod_l+0x26c>
 801eaa4:	230a      	movs	r3, #10
 801eaa6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801eaa8:	434b      	muls	r3, r1
 801eaaa:	2100      	movs	r1, #0
 801eaac:	18d3      	adds	r3, r2, r3
 801eaae:	930d      	str	r3, [sp, #52]	@ 0x34
 801eab0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eab2:	0008      	movs	r0, r1
 801eab4:	1c5a      	adds	r2, r3, #1
 801eab6:	921d      	str	r2, [sp, #116]	@ 0x74
 801eab8:	785b      	ldrb	r3, [r3, #1]
 801eaba:	e7c6      	b.n	801ea4a <_strtod_l+0x1de>
 801eabc:	9808      	ldr	r0, [sp, #32]
 801eabe:	e7d0      	b.n	801ea62 <_strtod_l+0x1f6>
 801eac0:	1c5c      	adds	r4, r3, #1
 801eac2:	2b08      	cmp	r3, #8
 801eac4:	dc04      	bgt.n	801ead0 <_strtod_l+0x264>
 801eac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eac8:	434b      	muls	r3, r1
 801eaca:	930d      	str	r3, [sp, #52]	@ 0x34
 801eacc:	0023      	movs	r3, r4
 801eace:	e7df      	b.n	801ea90 <_strtod_l+0x224>
 801ead0:	2c10      	cmp	r4, #16
 801ead2:	dcfb      	bgt.n	801eacc <_strtod_l+0x260>
 801ead4:	434d      	muls	r5, r1
 801ead6:	e7f9      	b.n	801eacc <_strtod_l+0x260>
 801ead8:	2100      	movs	r1, #0
 801eada:	2b0f      	cmp	r3, #15
 801eadc:	dce8      	bgt.n	801eab0 <_strtod_l+0x244>
 801eade:	230a      	movs	r3, #10
 801eae0:	435d      	muls	r5, r3
 801eae2:	1955      	adds	r5, r2, r5
 801eae4:	e7e4      	b.n	801eab0 <_strtod_l+0x244>
 801eae6:	2200      	movs	r2, #0
 801eae8:	920e      	str	r2, [sp, #56]	@ 0x38
 801eaea:	9206      	str	r2, [sp, #24]
 801eaec:	3201      	adds	r2, #1
 801eaee:	e7b1      	b.n	801ea54 <_strtod_l+0x1e8>
 801eaf0:	2400      	movs	r4, #0
 801eaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaf4:	3302      	adds	r3, #2
 801eaf6:	931d      	str	r3, [sp, #116]	@ 0x74
 801eaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eafa:	789b      	ldrb	r3, [r3, #2]
 801eafc:	001a      	movs	r2, r3
 801eafe:	3a30      	subs	r2, #48	@ 0x30
 801eb00:	2a09      	cmp	r2, #9
 801eb02:	d913      	bls.n	801eb2c <_strtod_l+0x2c0>
 801eb04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb06:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb08:	2200      	movs	r2, #0
 801eb0a:	e032      	b.n	801eb72 <_strtod_l+0x306>
 801eb0c:	08025d60 	.word	0x08025d60
 801eb10:	7ff00000 	.word	0x7ff00000
 801eb14:	ffefffff 	.word	0xffefffff
 801eb18:	00000433 	.word	0x00000433
 801eb1c:	7fffffff 	.word	0x7fffffff
 801eb20:	08025d48 	.word	0x08025d48
 801eb24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb26:	1c5a      	adds	r2, r3, #1
 801eb28:	921d      	str	r2, [sp, #116]	@ 0x74
 801eb2a:	785b      	ldrb	r3, [r3, #1]
 801eb2c:	2b30      	cmp	r3, #48	@ 0x30
 801eb2e:	d0f9      	beq.n	801eb24 <_strtod_l+0x2b8>
 801eb30:	2200      	movs	r2, #0
 801eb32:	9207      	str	r2, [sp, #28]
 801eb34:	001a      	movs	r2, r3
 801eb36:	3a31      	subs	r2, #49	@ 0x31
 801eb38:	2a08      	cmp	r2, #8
 801eb3a:	d81b      	bhi.n	801eb74 <_strtod_l+0x308>
 801eb3c:	3b30      	subs	r3, #48	@ 0x30
 801eb3e:	9310      	str	r3, [sp, #64]	@ 0x40
 801eb40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb42:	9307      	str	r3, [sp, #28]
 801eb44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eb46:	1c59      	adds	r1, r3, #1
 801eb48:	911d      	str	r1, [sp, #116]	@ 0x74
 801eb4a:	785b      	ldrb	r3, [r3, #1]
 801eb4c:	001a      	movs	r2, r3
 801eb4e:	3a30      	subs	r2, #48	@ 0x30
 801eb50:	2a09      	cmp	r2, #9
 801eb52:	d93a      	bls.n	801ebca <_strtod_l+0x35e>
 801eb54:	9a07      	ldr	r2, [sp, #28]
 801eb56:	1a8a      	subs	r2, r1, r2
 801eb58:	49b4      	ldr	r1, [pc, #720]	@ (801ee2c <_strtod_l+0x5c0>)
 801eb5a:	9107      	str	r1, [sp, #28]
 801eb5c:	2a08      	cmp	r2, #8
 801eb5e:	dc04      	bgt.n	801eb6a <_strtod_l+0x2fe>
 801eb60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eb62:	9207      	str	r2, [sp, #28]
 801eb64:	428a      	cmp	r2, r1
 801eb66:	dd00      	ble.n	801eb6a <_strtod_l+0x2fe>
 801eb68:	9107      	str	r1, [sp, #28]
 801eb6a:	2c00      	cmp	r4, #0
 801eb6c:	d002      	beq.n	801eb74 <_strtod_l+0x308>
 801eb6e:	9a07      	ldr	r2, [sp, #28]
 801eb70:	4252      	negs	r2, r2
 801eb72:	9207      	str	r2, [sp, #28]
 801eb74:	9a06      	ldr	r2, [sp, #24]
 801eb76:	2a00      	cmp	r2, #0
 801eb78:	d14d      	bne.n	801ec16 <_strtod_l+0x3aa>
 801eb7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb7c:	4310      	orrs	r0, r2
 801eb7e:	d000      	beq.n	801eb82 <_strtod_l+0x316>
 801eb80:	e6af      	b.n	801e8e2 <_strtod_l+0x76>
 801eb82:	4662      	mov	r2, ip
 801eb84:	2a00      	cmp	r2, #0
 801eb86:	d000      	beq.n	801eb8a <_strtod_l+0x31e>
 801eb88:	e6c7      	b.n	801e91a <_strtod_l+0xae>
 801eb8a:	2b69      	cmp	r3, #105	@ 0x69
 801eb8c:	d027      	beq.n	801ebde <_strtod_l+0x372>
 801eb8e:	dc23      	bgt.n	801ebd8 <_strtod_l+0x36c>
 801eb90:	2b49      	cmp	r3, #73	@ 0x49
 801eb92:	d024      	beq.n	801ebde <_strtod_l+0x372>
 801eb94:	2b4e      	cmp	r3, #78	@ 0x4e
 801eb96:	d000      	beq.n	801eb9a <_strtod_l+0x32e>
 801eb98:	e6bf      	b.n	801e91a <_strtod_l+0xae>
 801eb9a:	49a5      	ldr	r1, [pc, #660]	@ (801ee30 <_strtod_l+0x5c4>)
 801eb9c:	a81d      	add	r0, sp, #116	@ 0x74
 801eb9e:	f002 fe2b 	bl	80217f8 <__match>
 801eba2:	2800      	cmp	r0, #0
 801eba4:	d100      	bne.n	801eba8 <_strtod_l+0x33c>
 801eba6:	e6b8      	b.n	801e91a <_strtod_l+0xae>
 801eba8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebaa:	781b      	ldrb	r3, [r3, #0]
 801ebac:	2b28      	cmp	r3, #40	@ 0x28
 801ebae:	d12c      	bne.n	801ec0a <_strtod_l+0x39e>
 801ebb0:	49a0      	ldr	r1, [pc, #640]	@ (801ee34 <_strtod_l+0x5c8>)
 801ebb2:	aa20      	add	r2, sp, #128	@ 0x80
 801ebb4:	a81d      	add	r0, sp, #116	@ 0x74
 801ebb6:	f002 fe33 	bl	8021820 <__hexnan>
 801ebba:	2805      	cmp	r0, #5
 801ebbc:	d125      	bne.n	801ec0a <_strtod_l+0x39e>
 801ebbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ebc0:	4a9d      	ldr	r2, [pc, #628]	@ (801ee38 <_strtod_l+0x5cc>)
 801ebc2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ebc4:	431a      	orrs	r2, r3
 801ebc6:	0017      	movs	r7, r2
 801ebc8:	e68b      	b.n	801e8e2 <_strtod_l+0x76>
 801ebca:	220a      	movs	r2, #10
 801ebcc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ebce:	434a      	muls	r2, r1
 801ebd0:	18d2      	adds	r2, r2, r3
 801ebd2:	3a30      	subs	r2, #48	@ 0x30
 801ebd4:	9210      	str	r2, [sp, #64]	@ 0x40
 801ebd6:	e7b5      	b.n	801eb44 <_strtod_l+0x2d8>
 801ebd8:	2b6e      	cmp	r3, #110	@ 0x6e
 801ebda:	d0de      	beq.n	801eb9a <_strtod_l+0x32e>
 801ebdc:	e69d      	b.n	801e91a <_strtod_l+0xae>
 801ebde:	4997      	ldr	r1, [pc, #604]	@ (801ee3c <_strtod_l+0x5d0>)
 801ebe0:	a81d      	add	r0, sp, #116	@ 0x74
 801ebe2:	f002 fe09 	bl	80217f8 <__match>
 801ebe6:	2800      	cmp	r0, #0
 801ebe8:	d100      	bne.n	801ebec <_strtod_l+0x380>
 801ebea:	e696      	b.n	801e91a <_strtod_l+0xae>
 801ebec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebee:	4994      	ldr	r1, [pc, #592]	@ (801ee40 <_strtod_l+0x5d4>)
 801ebf0:	3b01      	subs	r3, #1
 801ebf2:	a81d      	add	r0, sp, #116	@ 0x74
 801ebf4:	931d      	str	r3, [sp, #116]	@ 0x74
 801ebf6:	f002 fdff 	bl	80217f8 <__match>
 801ebfa:	2800      	cmp	r0, #0
 801ebfc:	d102      	bne.n	801ec04 <_strtod_l+0x398>
 801ebfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec00:	3301      	adds	r3, #1
 801ec02:	931d      	str	r3, [sp, #116]	@ 0x74
 801ec04:	2600      	movs	r6, #0
 801ec06:	4f8c      	ldr	r7, [pc, #560]	@ (801ee38 <_strtod_l+0x5cc>)
 801ec08:	e66b      	b.n	801e8e2 <_strtod_l+0x76>
 801ec0a:	488e      	ldr	r0, [pc, #568]	@ (801ee44 <_strtod_l+0x5d8>)
 801ec0c:	f001 fc84 	bl	8020518 <nan>
 801ec10:	0006      	movs	r6, r0
 801ec12:	000f      	movs	r7, r1
 801ec14:	e665      	b.n	801e8e2 <_strtod_l+0x76>
 801ec16:	9b07      	ldr	r3, [sp, #28]
 801ec18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec1a:	1a9b      	subs	r3, r3, r2
 801ec1c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec1e:	9b08      	ldr	r3, [sp, #32]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d101      	bne.n	801ec28 <_strtod_l+0x3bc>
 801ec24:	9b06      	ldr	r3, [sp, #24]
 801ec26:	9308      	str	r3, [sp, #32]
 801ec28:	9c06      	ldr	r4, [sp, #24]
 801ec2a:	2c10      	cmp	r4, #16
 801ec2c:	dd00      	ble.n	801ec30 <_strtod_l+0x3c4>
 801ec2e:	2410      	movs	r4, #16
 801ec30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ec32:	f7e4 fbf3 	bl	800341c <__aeabi_ui2d>
 801ec36:	9b06      	ldr	r3, [sp, #24]
 801ec38:	0006      	movs	r6, r0
 801ec3a:	000f      	movs	r7, r1
 801ec3c:	2b09      	cmp	r3, #9
 801ec3e:	dc13      	bgt.n	801ec68 <_strtod_l+0x3fc>
 801ec40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d100      	bne.n	801ec48 <_strtod_l+0x3dc>
 801ec46:	e64c      	b.n	801e8e2 <_strtod_l+0x76>
 801ec48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	dc00      	bgt.n	801ec50 <_strtod_l+0x3e4>
 801ec4e:	e07e      	b.n	801ed4e <_strtod_l+0x4e2>
 801ec50:	2b16      	cmp	r3, #22
 801ec52:	dc63      	bgt.n	801ed1c <_strtod_l+0x4b0>
 801ec54:	497c      	ldr	r1, [pc, #496]	@ (801ee48 <_strtod_l+0x5dc>)
 801ec56:	00db      	lsls	r3, r3, #3
 801ec58:	18c9      	adds	r1, r1, r3
 801ec5a:	0032      	movs	r2, r6
 801ec5c:	6808      	ldr	r0, [r1, #0]
 801ec5e:	6849      	ldr	r1, [r1, #4]
 801ec60:	003b      	movs	r3, r7
 801ec62:	f7e3 fceb 	bl	800263c <__aeabi_dmul>
 801ec66:	e7d3      	b.n	801ec10 <_strtod_l+0x3a4>
 801ec68:	0022      	movs	r2, r4
 801ec6a:	4b77      	ldr	r3, [pc, #476]	@ (801ee48 <_strtod_l+0x5dc>)
 801ec6c:	3a09      	subs	r2, #9
 801ec6e:	00d2      	lsls	r2, r2, #3
 801ec70:	189b      	adds	r3, r3, r2
 801ec72:	681a      	ldr	r2, [r3, #0]
 801ec74:	685b      	ldr	r3, [r3, #4]
 801ec76:	f7e3 fce1 	bl	800263c <__aeabi_dmul>
 801ec7a:	0006      	movs	r6, r0
 801ec7c:	0028      	movs	r0, r5
 801ec7e:	000f      	movs	r7, r1
 801ec80:	f7e4 fbcc 	bl	800341c <__aeabi_ui2d>
 801ec84:	000b      	movs	r3, r1
 801ec86:	0002      	movs	r2, r0
 801ec88:	0039      	movs	r1, r7
 801ec8a:	0030      	movs	r0, r6
 801ec8c:	f7e2 fd2e 	bl	80016ec <__aeabi_dadd>
 801ec90:	9b06      	ldr	r3, [sp, #24]
 801ec92:	0006      	movs	r6, r0
 801ec94:	000f      	movs	r7, r1
 801ec96:	2b0f      	cmp	r3, #15
 801ec98:	ddd2      	ble.n	801ec40 <_strtod_l+0x3d4>
 801ec9a:	9b06      	ldr	r3, [sp, #24]
 801ec9c:	1b1c      	subs	r4, r3, r4
 801ec9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eca0:	18e4      	adds	r4, r4, r3
 801eca2:	2c00      	cmp	r4, #0
 801eca4:	dc00      	bgt.n	801eca8 <_strtod_l+0x43c>
 801eca6:	e09b      	b.n	801ede0 <_strtod_l+0x574>
 801eca8:	220f      	movs	r2, #15
 801ecaa:	0023      	movs	r3, r4
 801ecac:	4013      	ands	r3, r2
 801ecae:	4214      	tst	r4, r2
 801ecb0:	d00a      	beq.n	801ecc8 <_strtod_l+0x45c>
 801ecb2:	4965      	ldr	r1, [pc, #404]	@ (801ee48 <_strtod_l+0x5dc>)
 801ecb4:	00db      	lsls	r3, r3, #3
 801ecb6:	18c9      	adds	r1, r1, r3
 801ecb8:	0032      	movs	r2, r6
 801ecba:	6808      	ldr	r0, [r1, #0]
 801ecbc:	6849      	ldr	r1, [r1, #4]
 801ecbe:	003b      	movs	r3, r7
 801ecc0:	f7e3 fcbc 	bl	800263c <__aeabi_dmul>
 801ecc4:	0006      	movs	r6, r0
 801ecc6:	000f      	movs	r7, r1
 801ecc8:	230f      	movs	r3, #15
 801ecca:	439c      	bics	r4, r3
 801eccc:	d073      	beq.n	801edb6 <_strtod_l+0x54a>
 801ecce:	3326      	adds	r3, #38	@ 0x26
 801ecd0:	33ff      	adds	r3, #255	@ 0xff
 801ecd2:	429c      	cmp	r4, r3
 801ecd4:	dd4b      	ble.n	801ed6e <_strtod_l+0x502>
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	9306      	str	r3, [sp, #24]
 801ecda:	9307      	str	r3, [sp, #28]
 801ecdc:	930d      	str	r3, [sp, #52]	@ 0x34
 801ecde:	9308      	str	r3, [sp, #32]
 801ece0:	2322      	movs	r3, #34	@ 0x22
 801ece2:	2600      	movs	r6, #0
 801ece4:	9a05      	ldr	r2, [sp, #20]
 801ece6:	4f54      	ldr	r7, [pc, #336]	@ (801ee38 <_strtod_l+0x5cc>)
 801ece8:	6013      	str	r3, [r2, #0]
 801ecea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecec:	42b3      	cmp	r3, r6
 801ecee:	d100      	bne.n	801ecf2 <_strtod_l+0x486>
 801ecf0:	e5f7      	b.n	801e8e2 <_strtod_l+0x76>
 801ecf2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ecf4:	9805      	ldr	r0, [sp, #20]
 801ecf6:	f002 ff4d 	bl	8021b94 <_Bfree>
 801ecfa:	9908      	ldr	r1, [sp, #32]
 801ecfc:	9805      	ldr	r0, [sp, #20]
 801ecfe:	f002 ff49 	bl	8021b94 <_Bfree>
 801ed02:	9907      	ldr	r1, [sp, #28]
 801ed04:	9805      	ldr	r0, [sp, #20]
 801ed06:	f002 ff45 	bl	8021b94 <_Bfree>
 801ed0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ed0c:	9805      	ldr	r0, [sp, #20]
 801ed0e:	f002 ff41 	bl	8021b94 <_Bfree>
 801ed12:	9906      	ldr	r1, [sp, #24]
 801ed14:	9805      	ldr	r0, [sp, #20]
 801ed16:	f002 ff3d 	bl	8021b94 <_Bfree>
 801ed1a:	e5e2      	b.n	801e8e2 <_strtod_l+0x76>
 801ed1c:	2325      	movs	r3, #37	@ 0x25
 801ed1e:	9a06      	ldr	r2, [sp, #24]
 801ed20:	1a9b      	subs	r3, r3, r2
 801ed22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed24:	4293      	cmp	r3, r2
 801ed26:	dbb8      	blt.n	801ec9a <_strtod_l+0x42e>
 801ed28:	240f      	movs	r4, #15
 801ed2a:	9b06      	ldr	r3, [sp, #24]
 801ed2c:	4d46      	ldr	r5, [pc, #280]	@ (801ee48 <_strtod_l+0x5dc>)
 801ed2e:	1ae4      	subs	r4, r4, r3
 801ed30:	00e1      	lsls	r1, r4, #3
 801ed32:	1869      	adds	r1, r5, r1
 801ed34:	0032      	movs	r2, r6
 801ed36:	6808      	ldr	r0, [r1, #0]
 801ed38:	6849      	ldr	r1, [r1, #4]
 801ed3a:	003b      	movs	r3, r7
 801ed3c:	f7e3 fc7e 	bl	800263c <__aeabi_dmul>
 801ed40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed42:	1b1c      	subs	r4, r3, r4
 801ed44:	00e4      	lsls	r4, r4, #3
 801ed46:	192d      	adds	r5, r5, r4
 801ed48:	682a      	ldr	r2, [r5, #0]
 801ed4a:	686b      	ldr	r3, [r5, #4]
 801ed4c:	e789      	b.n	801ec62 <_strtod_l+0x3f6>
 801ed4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed50:	3316      	adds	r3, #22
 801ed52:	dba2      	blt.n	801ec9a <_strtod_l+0x42e>
 801ed54:	9907      	ldr	r1, [sp, #28]
 801ed56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed58:	4b3b      	ldr	r3, [pc, #236]	@ (801ee48 <_strtod_l+0x5dc>)
 801ed5a:	1a52      	subs	r2, r2, r1
 801ed5c:	00d2      	lsls	r2, r2, #3
 801ed5e:	189b      	adds	r3, r3, r2
 801ed60:	0030      	movs	r0, r6
 801ed62:	681a      	ldr	r2, [r3, #0]
 801ed64:	685b      	ldr	r3, [r3, #4]
 801ed66:	0039      	movs	r1, r7
 801ed68:	f7e3 f824 	bl	8001db4 <__aeabi_ddiv>
 801ed6c:	e750      	b.n	801ec10 <_strtod_l+0x3a4>
 801ed6e:	2300      	movs	r3, #0
 801ed70:	0030      	movs	r0, r6
 801ed72:	0039      	movs	r1, r7
 801ed74:	4d35      	ldr	r5, [pc, #212]	@ (801ee4c <_strtod_l+0x5e0>)
 801ed76:	1124      	asrs	r4, r4, #4
 801ed78:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed7a:	2c01      	cmp	r4, #1
 801ed7c:	dc1e      	bgt.n	801edbc <_strtod_l+0x550>
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d001      	beq.n	801ed86 <_strtod_l+0x51a>
 801ed82:	0006      	movs	r6, r0
 801ed84:	000f      	movs	r7, r1
 801ed86:	4b32      	ldr	r3, [pc, #200]	@ (801ee50 <_strtod_l+0x5e4>)
 801ed88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ed8a:	18ff      	adds	r7, r7, r3
 801ed8c:	4b2f      	ldr	r3, [pc, #188]	@ (801ee4c <_strtod_l+0x5e0>)
 801ed8e:	00d5      	lsls	r5, r2, #3
 801ed90:	195d      	adds	r5, r3, r5
 801ed92:	0032      	movs	r2, r6
 801ed94:	6828      	ldr	r0, [r5, #0]
 801ed96:	6869      	ldr	r1, [r5, #4]
 801ed98:	003b      	movs	r3, r7
 801ed9a:	f7e3 fc4f 	bl	800263c <__aeabi_dmul>
 801ed9e:	4b26      	ldr	r3, [pc, #152]	@ (801ee38 <_strtod_l+0x5cc>)
 801eda0:	4a2c      	ldr	r2, [pc, #176]	@ (801ee54 <_strtod_l+0x5e8>)
 801eda2:	0006      	movs	r6, r0
 801eda4:	400b      	ands	r3, r1
 801eda6:	4293      	cmp	r3, r2
 801eda8:	d895      	bhi.n	801ecd6 <_strtod_l+0x46a>
 801edaa:	4a2b      	ldr	r2, [pc, #172]	@ (801ee58 <_strtod_l+0x5ec>)
 801edac:	4293      	cmp	r3, r2
 801edae:	d913      	bls.n	801edd8 <_strtod_l+0x56c>
 801edb0:	2601      	movs	r6, #1
 801edb2:	4f2a      	ldr	r7, [pc, #168]	@ (801ee5c <_strtod_l+0x5f0>)
 801edb4:	4276      	negs	r6, r6
 801edb6:	2300      	movs	r3, #0
 801edb8:	9309      	str	r3, [sp, #36]	@ 0x24
 801edba:	e086      	b.n	801eeca <_strtod_l+0x65e>
 801edbc:	2201      	movs	r2, #1
 801edbe:	4214      	tst	r4, r2
 801edc0:	d004      	beq.n	801edcc <_strtod_l+0x560>
 801edc2:	682a      	ldr	r2, [r5, #0]
 801edc4:	686b      	ldr	r3, [r5, #4]
 801edc6:	f7e3 fc39 	bl	800263c <__aeabi_dmul>
 801edca:	2301      	movs	r3, #1
 801edcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801edce:	1064      	asrs	r4, r4, #1
 801edd0:	3201      	adds	r2, #1
 801edd2:	9209      	str	r2, [sp, #36]	@ 0x24
 801edd4:	3508      	adds	r5, #8
 801edd6:	e7d0      	b.n	801ed7a <_strtod_l+0x50e>
 801edd8:	23d4      	movs	r3, #212	@ 0xd4
 801edda:	049b      	lsls	r3, r3, #18
 801eddc:	18cf      	adds	r7, r1, r3
 801edde:	e7ea      	b.n	801edb6 <_strtod_l+0x54a>
 801ede0:	2c00      	cmp	r4, #0
 801ede2:	d0e8      	beq.n	801edb6 <_strtod_l+0x54a>
 801ede4:	4264      	negs	r4, r4
 801ede6:	230f      	movs	r3, #15
 801ede8:	0022      	movs	r2, r4
 801edea:	401a      	ands	r2, r3
 801edec:	421c      	tst	r4, r3
 801edee:	d00a      	beq.n	801ee06 <_strtod_l+0x59a>
 801edf0:	4b15      	ldr	r3, [pc, #84]	@ (801ee48 <_strtod_l+0x5dc>)
 801edf2:	00d2      	lsls	r2, r2, #3
 801edf4:	189b      	adds	r3, r3, r2
 801edf6:	0030      	movs	r0, r6
 801edf8:	681a      	ldr	r2, [r3, #0]
 801edfa:	685b      	ldr	r3, [r3, #4]
 801edfc:	0039      	movs	r1, r7
 801edfe:	f7e2 ffd9 	bl	8001db4 <__aeabi_ddiv>
 801ee02:	0006      	movs	r6, r0
 801ee04:	000f      	movs	r7, r1
 801ee06:	1124      	asrs	r4, r4, #4
 801ee08:	d0d5      	beq.n	801edb6 <_strtod_l+0x54a>
 801ee0a:	2c1f      	cmp	r4, #31
 801ee0c:	dd28      	ble.n	801ee60 <_strtod_l+0x5f4>
 801ee0e:	2300      	movs	r3, #0
 801ee10:	9306      	str	r3, [sp, #24]
 801ee12:	9307      	str	r3, [sp, #28]
 801ee14:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee16:	9308      	str	r3, [sp, #32]
 801ee18:	2322      	movs	r3, #34	@ 0x22
 801ee1a:	9a05      	ldr	r2, [sp, #20]
 801ee1c:	2600      	movs	r6, #0
 801ee1e:	6013      	str	r3, [r2, #0]
 801ee20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee22:	2700      	movs	r7, #0
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d000      	beq.n	801ee2a <_strtod_l+0x5be>
 801ee28:	e763      	b.n	801ecf2 <_strtod_l+0x486>
 801ee2a:	e55a      	b.n	801e8e2 <_strtod_l+0x76>
 801ee2c:	00004e1f 	.word	0x00004e1f
 801ee30:	08025eae 	.word	0x08025eae
 801ee34:	08025d4c 	.word	0x08025d4c
 801ee38:	7ff00000 	.word	0x7ff00000
 801ee3c:	08025ea6 	.word	0x08025ea6
 801ee40:	08025ee0 	.word	0x08025ee0
 801ee44:	0802616c 	.word	0x0802616c
 801ee48:	08026058 	.word	0x08026058
 801ee4c:	08026030 	.word	0x08026030
 801ee50:	fcb00000 	.word	0xfcb00000
 801ee54:	7ca00000 	.word	0x7ca00000
 801ee58:	7c900000 	.word	0x7c900000
 801ee5c:	7fefffff 	.word	0x7fefffff
 801ee60:	2310      	movs	r3, #16
 801ee62:	0022      	movs	r2, r4
 801ee64:	401a      	ands	r2, r3
 801ee66:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee68:	421c      	tst	r4, r3
 801ee6a:	d001      	beq.n	801ee70 <_strtod_l+0x604>
 801ee6c:	335a      	adds	r3, #90	@ 0x5a
 801ee6e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee70:	0030      	movs	r0, r6
 801ee72:	0039      	movs	r1, r7
 801ee74:	2300      	movs	r3, #0
 801ee76:	4dbf      	ldr	r5, [pc, #764]	@ (801f174 <_strtod_l+0x908>)
 801ee78:	2201      	movs	r2, #1
 801ee7a:	4214      	tst	r4, r2
 801ee7c:	d004      	beq.n	801ee88 <_strtod_l+0x61c>
 801ee7e:	682a      	ldr	r2, [r5, #0]
 801ee80:	686b      	ldr	r3, [r5, #4]
 801ee82:	f7e3 fbdb 	bl	800263c <__aeabi_dmul>
 801ee86:	2301      	movs	r3, #1
 801ee88:	1064      	asrs	r4, r4, #1
 801ee8a:	3508      	adds	r5, #8
 801ee8c:	2c00      	cmp	r4, #0
 801ee8e:	d1f3      	bne.n	801ee78 <_strtod_l+0x60c>
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d001      	beq.n	801ee98 <_strtod_l+0x62c>
 801ee94:	0006      	movs	r6, r0
 801ee96:	000f      	movs	r7, r1
 801ee98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	d00d      	beq.n	801eeba <_strtod_l+0x64e>
 801ee9e:	236b      	movs	r3, #107	@ 0x6b
 801eea0:	007a      	lsls	r2, r7, #1
 801eea2:	0d52      	lsrs	r2, r2, #21
 801eea4:	0039      	movs	r1, r7
 801eea6:	1a9b      	subs	r3, r3, r2
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	dd06      	ble.n	801eeba <_strtod_l+0x64e>
 801eeac:	2b1f      	cmp	r3, #31
 801eeae:	dd5a      	ble.n	801ef66 <_strtod_l+0x6fa>
 801eeb0:	2600      	movs	r6, #0
 801eeb2:	2b34      	cmp	r3, #52	@ 0x34
 801eeb4:	dd50      	ble.n	801ef58 <_strtod_l+0x6ec>
 801eeb6:	27dc      	movs	r7, #220	@ 0xdc
 801eeb8:	04bf      	lsls	r7, r7, #18
 801eeba:	2200      	movs	r2, #0
 801eebc:	2300      	movs	r3, #0
 801eebe:	0030      	movs	r0, r6
 801eec0:	0039      	movs	r1, r7
 801eec2:	f7e1 faf5 	bl	80004b0 <__aeabi_dcmpeq>
 801eec6:	2800      	cmp	r0, #0
 801eec8:	d1a1      	bne.n	801ee0e <_strtod_l+0x5a2>
 801eeca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eecc:	9a08      	ldr	r2, [sp, #32]
 801eece:	9300      	str	r3, [sp, #0]
 801eed0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eed2:	9b06      	ldr	r3, [sp, #24]
 801eed4:	9805      	ldr	r0, [sp, #20]
 801eed6:	f002 fec5 	bl	8021c64 <__s2b>
 801eeda:	900d      	str	r0, [sp, #52]	@ 0x34
 801eedc:	2800      	cmp	r0, #0
 801eede:	d100      	bne.n	801eee2 <_strtod_l+0x676>
 801eee0:	e6f9      	b.n	801ecd6 <_strtod_l+0x46a>
 801eee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eee4:	9907      	ldr	r1, [sp, #28]
 801eee6:	17da      	asrs	r2, r3, #31
 801eee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eeea:	1a5b      	subs	r3, r3, r1
 801eeec:	401a      	ands	r2, r3
 801eeee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eef0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801eef2:	43db      	mvns	r3, r3
 801eef4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eef6:	17db      	asrs	r3, r3, #31
 801eef8:	401a      	ands	r2, r3
 801eefa:	2300      	movs	r3, #0
 801eefc:	921a      	str	r2, [sp, #104]	@ 0x68
 801eefe:	9306      	str	r3, [sp, #24]
 801ef00:	9307      	str	r3, [sp, #28]
 801ef02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef04:	9805      	ldr	r0, [sp, #20]
 801ef06:	6859      	ldr	r1, [r3, #4]
 801ef08:	f002 fe00 	bl	8021b0c <_Balloc>
 801ef0c:	9008      	str	r0, [sp, #32]
 801ef0e:	2800      	cmp	r0, #0
 801ef10:	d100      	bne.n	801ef14 <_strtod_l+0x6a8>
 801ef12:	e6e5      	b.n	801ece0 <_strtod_l+0x474>
 801ef14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef16:	300c      	adds	r0, #12
 801ef18:	0019      	movs	r1, r3
 801ef1a:	691a      	ldr	r2, [r3, #16]
 801ef1c:	310c      	adds	r1, #12
 801ef1e:	3202      	adds	r2, #2
 801ef20:	0092      	lsls	r2, r2, #2
 801ef22:	f001 faef 	bl	8020504 <memcpy>
 801ef26:	ab20      	add	r3, sp, #128	@ 0x80
 801ef28:	9301      	str	r3, [sp, #4]
 801ef2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ef2c:	9300      	str	r3, [sp, #0]
 801ef2e:	0032      	movs	r2, r6
 801ef30:	003b      	movs	r3, r7
 801ef32:	9805      	ldr	r0, [sp, #20]
 801ef34:	9610      	str	r6, [sp, #64]	@ 0x40
 801ef36:	9711      	str	r7, [sp, #68]	@ 0x44
 801ef38:	f003 f9e4 	bl	8022304 <__d2b>
 801ef3c:	901e      	str	r0, [sp, #120]	@ 0x78
 801ef3e:	2800      	cmp	r0, #0
 801ef40:	d100      	bne.n	801ef44 <_strtod_l+0x6d8>
 801ef42:	e6cd      	b.n	801ece0 <_strtod_l+0x474>
 801ef44:	2101      	movs	r1, #1
 801ef46:	9805      	ldr	r0, [sp, #20]
 801ef48:	f002 ff28 	bl	8021d9c <__i2b>
 801ef4c:	9007      	str	r0, [sp, #28]
 801ef4e:	2800      	cmp	r0, #0
 801ef50:	d10e      	bne.n	801ef70 <_strtod_l+0x704>
 801ef52:	2300      	movs	r3, #0
 801ef54:	9307      	str	r3, [sp, #28]
 801ef56:	e6c3      	b.n	801ece0 <_strtod_l+0x474>
 801ef58:	234b      	movs	r3, #75	@ 0x4b
 801ef5a:	1a9a      	subs	r2, r3, r2
 801ef5c:	3b4c      	subs	r3, #76	@ 0x4c
 801ef5e:	4093      	lsls	r3, r2
 801ef60:	4019      	ands	r1, r3
 801ef62:	000f      	movs	r7, r1
 801ef64:	e7a9      	b.n	801eeba <_strtod_l+0x64e>
 801ef66:	2201      	movs	r2, #1
 801ef68:	4252      	negs	r2, r2
 801ef6a:	409a      	lsls	r2, r3
 801ef6c:	4016      	ands	r6, r2
 801ef6e:	e7a4      	b.n	801eeba <_strtod_l+0x64e>
 801ef70:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ef72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ef74:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ef76:	1ad4      	subs	r4, r2, r3
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	db01      	blt.n	801ef80 <_strtod_l+0x714>
 801ef7c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ef7e:	195d      	adds	r5, r3, r5
 801ef80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ef82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ef84:	1a5b      	subs	r3, r3, r1
 801ef86:	2136      	movs	r1, #54	@ 0x36
 801ef88:	189b      	adds	r3, r3, r2
 801ef8a:	1a8a      	subs	r2, r1, r2
 801ef8c:	497a      	ldr	r1, [pc, #488]	@ (801f178 <_strtod_l+0x90c>)
 801ef8e:	2001      	movs	r0, #1
 801ef90:	468c      	mov	ip, r1
 801ef92:	2100      	movs	r1, #0
 801ef94:	3b01      	subs	r3, #1
 801ef96:	9116      	str	r1, [sp, #88]	@ 0x58
 801ef98:	9014      	str	r0, [sp, #80]	@ 0x50
 801ef9a:	4563      	cmp	r3, ip
 801ef9c:	da06      	bge.n	801efac <_strtod_l+0x740>
 801ef9e:	4661      	mov	r1, ip
 801efa0:	1ac9      	subs	r1, r1, r3
 801efa2:	1a52      	subs	r2, r2, r1
 801efa4:	291f      	cmp	r1, #31
 801efa6:	dc3f      	bgt.n	801f028 <_strtod_l+0x7bc>
 801efa8:	4088      	lsls	r0, r1
 801efaa:	9014      	str	r0, [sp, #80]	@ 0x50
 801efac:	18ab      	adds	r3, r5, r2
 801efae:	930e      	str	r3, [sp, #56]	@ 0x38
 801efb0:	18a4      	adds	r4, r4, r2
 801efb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efb6:	191c      	adds	r4, r3, r4
 801efb8:	002b      	movs	r3, r5
 801efba:	4295      	cmp	r5, r2
 801efbc:	dd00      	ble.n	801efc0 <_strtod_l+0x754>
 801efbe:	0013      	movs	r3, r2
 801efc0:	42a3      	cmp	r3, r4
 801efc2:	dd00      	ble.n	801efc6 <_strtod_l+0x75a>
 801efc4:	0023      	movs	r3, r4
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	dd04      	ble.n	801efd4 <_strtod_l+0x768>
 801efca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efcc:	1ae4      	subs	r4, r4, r3
 801efce:	1ad2      	subs	r2, r2, r3
 801efd0:	920e      	str	r2, [sp, #56]	@ 0x38
 801efd2:	1aed      	subs	r5, r5, r3
 801efd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	dd16      	ble.n	801f008 <_strtod_l+0x79c>
 801efda:	001a      	movs	r2, r3
 801efdc:	9907      	ldr	r1, [sp, #28]
 801efde:	9805      	ldr	r0, [sp, #20]
 801efe0:	f002 ffa6 	bl	8021f30 <__pow5mult>
 801efe4:	9007      	str	r0, [sp, #28]
 801efe6:	2800      	cmp	r0, #0
 801efe8:	d0b3      	beq.n	801ef52 <_strtod_l+0x6e6>
 801efea:	0001      	movs	r1, r0
 801efec:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801efee:	9805      	ldr	r0, [sp, #20]
 801eff0:	f002 feec 	bl	8021dcc <__multiply>
 801eff4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801eff6:	2800      	cmp	r0, #0
 801eff8:	d100      	bne.n	801effc <_strtod_l+0x790>
 801effa:	e671      	b.n	801ece0 <_strtod_l+0x474>
 801effc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801effe:	9805      	ldr	r0, [sp, #20]
 801f000:	f002 fdc8 	bl	8021b94 <_Bfree>
 801f004:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f006:	931e      	str	r3, [sp, #120]	@ 0x78
 801f008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	dc12      	bgt.n	801f034 <_strtod_l+0x7c8>
 801f00e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f010:	2b00      	cmp	r3, #0
 801f012:	dd18      	ble.n	801f046 <_strtod_l+0x7da>
 801f014:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f016:	9908      	ldr	r1, [sp, #32]
 801f018:	9805      	ldr	r0, [sp, #20]
 801f01a:	f002 ff89 	bl	8021f30 <__pow5mult>
 801f01e:	9008      	str	r0, [sp, #32]
 801f020:	2800      	cmp	r0, #0
 801f022:	d110      	bne.n	801f046 <_strtod_l+0x7da>
 801f024:	2300      	movs	r3, #0
 801f026:	e65a      	b.n	801ecde <_strtod_l+0x472>
 801f028:	4954      	ldr	r1, [pc, #336]	@ (801f17c <_strtod_l+0x910>)
 801f02a:	1acb      	subs	r3, r1, r3
 801f02c:	0001      	movs	r1, r0
 801f02e:	4099      	lsls	r1, r3
 801f030:	9116      	str	r1, [sp, #88]	@ 0x58
 801f032:	e7ba      	b.n	801efaa <_strtod_l+0x73e>
 801f034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f036:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f038:	9805      	ldr	r0, [sp, #20]
 801f03a:	f002 ffd5 	bl	8021fe8 <__lshift>
 801f03e:	901e      	str	r0, [sp, #120]	@ 0x78
 801f040:	2800      	cmp	r0, #0
 801f042:	d1e4      	bne.n	801f00e <_strtod_l+0x7a2>
 801f044:	e64c      	b.n	801ece0 <_strtod_l+0x474>
 801f046:	2c00      	cmp	r4, #0
 801f048:	dd07      	ble.n	801f05a <_strtod_l+0x7ee>
 801f04a:	0022      	movs	r2, r4
 801f04c:	9908      	ldr	r1, [sp, #32]
 801f04e:	9805      	ldr	r0, [sp, #20]
 801f050:	f002 ffca 	bl	8021fe8 <__lshift>
 801f054:	9008      	str	r0, [sp, #32]
 801f056:	2800      	cmp	r0, #0
 801f058:	d0e4      	beq.n	801f024 <_strtod_l+0x7b8>
 801f05a:	2d00      	cmp	r5, #0
 801f05c:	dd08      	ble.n	801f070 <_strtod_l+0x804>
 801f05e:	002a      	movs	r2, r5
 801f060:	9907      	ldr	r1, [sp, #28]
 801f062:	9805      	ldr	r0, [sp, #20]
 801f064:	f002 ffc0 	bl	8021fe8 <__lshift>
 801f068:	9007      	str	r0, [sp, #28]
 801f06a:	2800      	cmp	r0, #0
 801f06c:	d100      	bne.n	801f070 <_strtod_l+0x804>
 801f06e:	e637      	b.n	801ece0 <_strtod_l+0x474>
 801f070:	9a08      	ldr	r2, [sp, #32]
 801f072:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f074:	9805      	ldr	r0, [sp, #20]
 801f076:	f003 f83f 	bl	80220f8 <__mdiff>
 801f07a:	9006      	str	r0, [sp, #24]
 801f07c:	2800      	cmp	r0, #0
 801f07e:	d100      	bne.n	801f082 <_strtod_l+0x816>
 801f080:	e62e      	b.n	801ece0 <_strtod_l+0x474>
 801f082:	68c3      	ldr	r3, [r0, #12]
 801f084:	9907      	ldr	r1, [sp, #28]
 801f086:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f088:	2300      	movs	r3, #0
 801f08a:	60c3      	str	r3, [r0, #12]
 801f08c:	f003 f818 	bl	80220c0 <__mcmp>
 801f090:	2800      	cmp	r0, #0
 801f092:	da3b      	bge.n	801f10c <_strtod_l+0x8a0>
 801f094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f096:	4333      	orrs	r3, r6
 801f098:	d167      	bne.n	801f16a <_strtod_l+0x8fe>
 801f09a:	033b      	lsls	r3, r7, #12
 801f09c:	d165      	bne.n	801f16a <_strtod_l+0x8fe>
 801f09e:	22d6      	movs	r2, #214	@ 0xd6
 801f0a0:	4b37      	ldr	r3, [pc, #220]	@ (801f180 <_strtod_l+0x914>)
 801f0a2:	04d2      	lsls	r2, r2, #19
 801f0a4:	403b      	ands	r3, r7
 801f0a6:	4293      	cmp	r3, r2
 801f0a8:	d95f      	bls.n	801f16a <_strtod_l+0x8fe>
 801f0aa:	9b06      	ldr	r3, [sp, #24]
 801f0ac:	695b      	ldr	r3, [r3, #20]
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d103      	bne.n	801f0ba <_strtod_l+0x84e>
 801f0b2:	9b06      	ldr	r3, [sp, #24]
 801f0b4:	691b      	ldr	r3, [r3, #16]
 801f0b6:	2b01      	cmp	r3, #1
 801f0b8:	dd57      	ble.n	801f16a <_strtod_l+0x8fe>
 801f0ba:	9906      	ldr	r1, [sp, #24]
 801f0bc:	2201      	movs	r2, #1
 801f0be:	9805      	ldr	r0, [sp, #20]
 801f0c0:	f002 ff92 	bl	8021fe8 <__lshift>
 801f0c4:	9907      	ldr	r1, [sp, #28]
 801f0c6:	9006      	str	r0, [sp, #24]
 801f0c8:	f002 fffa 	bl	80220c0 <__mcmp>
 801f0cc:	2800      	cmp	r0, #0
 801f0ce:	dd4c      	ble.n	801f16a <_strtod_l+0x8fe>
 801f0d0:	4b2b      	ldr	r3, [pc, #172]	@ (801f180 <_strtod_l+0x914>)
 801f0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0d4:	403b      	ands	r3, r7
 801f0d6:	2a00      	cmp	r2, #0
 801f0d8:	d074      	beq.n	801f1c4 <_strtod_l+0x958>
 801f0da:	22d6      	movs	r2, #214	@ 0xd6
 801f0dc:	04d2      	lsls	r2, r2, #19
 801f0de:	4293      	cmp	r3, r2
 801f0e0:	d870      	bhi.n	801f1c4 <_strtod_l+0x958>
 801f0e2:	22dc      	movs	r2, #220	@ 0xdc
 801f0e4:	0492      	lsls	r2, r2, #18
 801f0e6:	4293      	cmp	r3, r2
 801f0e8:	d800      	bhi.n	801f0ec <_strtod_l+0x880>
 801f0ea:	e695      	b.n	801ee18 <_strtod_l+0x5ac>
 801f0ec:	0030      	movs	r0, r6
 801f0ee:	0039      	movs	r1, r7
 801f0f0:	4b24      	ldr	r3, [pc, #144]	@ (801f184 <_strtod_l+0x918>)
 801f0f2:	2200      	movs	r2, #0
 801f0f4:	f7e3 faa2 	bl	800263c <__aeabi_dmul>
 801f0f8:	4b21      	ldr	r3, [pc, #132]	@ (801f180 <_strtod_l+0x914>)
 801f0fa:	0006      	movs	r6, r0
 801f0fc:	000f      	movs	r7, r1
 801f0fe:	420b      	tst	r3, r1
 801f100:	d000      	beq.n	801f104 <_strtod_l+0x898>
 801f102:	e5f6      	b.n	801ecf2 <_strtod_l+0x486>
 801f104:	2322      	movs	r3, #34	@ 0x22
 801f106:	9a05      	ldr	r2, [sp, #20]
 801f108:	6013      	str	r3, [r2, #0]
 801f10a:	e5f2      	b.n	801ecf2 <_strtod_l+0x486>
 801f10c:	970e      	str	r7, [sp, #56]	@ 0x38
 801f10e:	2800      	cmp	r0, #0
 801f110:	d175      	bne.n	801f1fe <_strtod_l+0x992>
 801f112:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f114:	033b      	lsls	r3, r7, #12
 801f116:	0b1b      	lsrs	r3, r3, #12
 801f118:	2a00      	cmp	r2, #0
 801f11a:	d039      	beq.n	801f190 <_strtod_l+0x924>
 801f11c:	4a1a      	ldr	r2, [pc, #104]	@ (801f188 <_strtod_l+0x91c>)
 801f11e:	4293      	cmp	r3, r2
 801f120:	d138      	bne.n	801f194 <_strtod_l+0x928>
 801f122:	2101      	movs	r1, #1
 801f124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f126:	4249      	negs	r1, r1
 801f128:	0032      	movs	r2, r6
 801f12a:	0008      	movs	r0, r1
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d00b      	beq.n	801f148 <_strtod_l+0x8dc>
 801f130:	24d4      	movs	r4, #212	@ 0xd4
 801f132:	4b13      	ldr	r3, [pc, #76]	@ (801f180 <_strtod_l+0x914>)
 801f134:	0008      	movs	r0, r1
 801f136:	403b      	ands	r3, r7
 801f138:	04e4      	lsls	r4, r4, #19
 801f13a:	42a3      	cmp	r3, r4
 801f13c:	d804      	bhi.n	801f148 <_strtod_l+0x8dc>
 801f13e:	306c      	adds	r0, #108	@ 0x6c
 801f140:	0d1b      	lsrs	r3, r3, #20
 801f142:	1ac3      	subs	r3, r0, r3
 801f144:	4099      	lsls	r1, r3
 801f146:	0008      	movs	r0, r1
 801f148:	4282      	cmp	r2, r0
 801f14a:	d123      	bne.n	801f194 <_strtod_l+0x928>
 801f14c:	4b0f      	ldr	r3, [pc, #60]	@ (801f18c <_strtod_l+0x920>)
 801f14e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f150:	4299      	cmp	r1, r3
 801f152:	d102      	bne.n	801f15a <_strtod_l+0x8ee>
 801f154:	3201      	adds	r2, #1
 801f156:	d100      	bne.n	801f15a <_strtod_l+0x8ee>
 801f158:	e5c2      	b.n	801ece0 <_strtod_l+0x474>
 801f15a:	4b09      	ldr	r3, [pc, #36]	@ (801f180 <_strtod_l+0x914>)
 801f15c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f15e:	2600      	movs	r6, #0
 801f160:	401a      	ands	r2, r3
 801f162:	0013      	movs	r3, r2
 801f164:	2280      	movs	r2, #128	@ 0x80
 801f166:	0352      	lsls	r2, r2, #13
 801f168:	189f      	adds	r7, r3, r2
 801f16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d1bd      	bne.n	801f0ec <_strtod_l+0x880>
 801f170:	e5bf      	b.n	801ecf2 <_strtod_l+0x486>
 801f172:	46c0      	nop			@ (mov r8, r8)
 801f174:	08025d78 	.word	0x08025d78
 801f178:	fffffc02 	.word	0xfffffc02
 801f17c:	fffffbe2 	.word	0xfffffbe2
 801f180:	7ff00000 	.word	0x7ff00000
 801f184:	39500000 	.word	0x39500000
 801f188:	000fffff 	.word	0x000fffff
 801f18c:	7fefffff 	.word	0x7fefffff
 801f190:	4333      	orrs	r3, r6
 801f192:	d09d      	beq.n	801f0d0 <_strtod_l+0x864>
 801f194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f196:	2b00      	cmp	r3, #0
 801f198:	d01c      	beq.n	801f1d4 <_strtod_l+0x968>
 801f19a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f19c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f19e:	4213      	tst	r3, r2
 801f1a0:	d0e3      	beq.n	801f16a <_strtod_l+0x8fe>
 801f1a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1a4:	0030      	movs	r0, r6
 801f1a6:	0039      	movs	r1, r7
 801f1a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d016      	beq.n	801f1dc <_strtod_l+0x970>
 801f1ae:	f7ff fb45 	bl	801e83c <sulp>
 801f1b2:	0002      	movs	r2, r0
 801f1b4:	000b      	movs	r3, r1
 801f1b6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1b8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f1ba:	f7e2 fa97 	bl	80016ec <__aeabi_dadd>
 801f1be:	0006      	movs	r6, r0
 801f1c0:	000f      	movs	r7, r1
 801f1c2:	e7d2      	b.n	801f16a <_strtod_l+0x8fe>
 801f1c4:	2601      	movs	r6, #1
 801f1c6:	4a92      	ldr	r2, [pc, #584]	@ (801f410 <_strtod_l+0xba4>)
 801f1c8:	4276      	negs	r6, r6
 801f1ca:	189b      	adds	r3, r3, r2
 801f1cc:	4a91      	ldr	r2, [pc, #580]	@ (801f414 <_strtod_l+0xba8>)
 801f1ce:	431a      	orrs	r2, r3
 801f1d0:	0017      	movs	r7, r2
 801f1d2:	e7ca      	b.n	801f16a <_strtod_l+0x8fe>
 801f1d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f1d6:	4233      	tst	r3, r6
 801f1d8:	d0c7      	beq.n	801f16a <_strtod_l+0x8fe>
 801f1da:	e7e2      	b.n	801f1a2 <_strtod_l+0x936>
 801f1dc:	f7ff fb2e 	bl	801e83c <sulp>
 801f1e0:	0002      	movs	r2, r0
 801f1e2:	000b      	movs	r3, r1
 801f1e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f1e8:	f7e3 fcf0 	bl	8002bcc <__aeabi_dsub>
 801f1ec:	2200      	movs	r2, #0
 801f1ee:	2300      	movs	r3, #0
 801f1f0:	0006      	movs	r6, r0
 801f1f2:	000f      	movs	r7, r1
 801f1f4:	f7e1 f95c 	bl	80004b0 <__aeabi_dcmpeq>
 801f1f8:	2800      	cmp	r0, #0
 801f1fa:	d0b6      	beq.n	801f16a <_strtod_l+0x8fe>
 801f1fc:	e60c      	b.n	801ee18 <_strtod_l+0x5ac>
 801f1fe:	9907      	ldr	r1, [sp, #28]
 801f200:	9806      	ldr	r0, [sp, #24]
 801f202:	f003 f8df 	bl	80223c4 <__ratio>
 801f206:	2380      	movs	r3, #128	@ 0x80
 801f208:	2200      	movs	r2, #0
 801f20a:	05db      	lsls	r3, r3, #23
 801f20c:	0004      	movs	r4, r0
 801f20e:	000d      	movs	r5, r1
 801f210:	f7e1 f95e 	bl	80004d0 <__aeabi_dcmple>
 801f214:	2800      	cmp	r0, #0
 801f216:	d06c      	beq.n	801f2f2 <_strtod_l+0xa86>
 801f218:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d177      	bne.n	801f30e <_strtod_l+0xaa2>
 801f21e:	2e00      	cmp	r6, #0
 801f220:	d157      	bne.n	801f2d2 <_strtod_l+0xa66>
 801f222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f224:	031b      	lsls	r3, r3, #12
 801f226:	d15a      	bne.n	801f2de <_strtod_l+0xa72>
 801f228:	2200      	movs	r2, #0
 801f22a:	0020      	movs	r0, r4
 801f22c:	0029      	movs	r1, r5
 801f22e:	4b7a      	ldr	r3, [pc, #488]	@ (801f418 <_strtod_l+0xbac>)
 801f230:	f7e1 f944 	bl	80004bc <__aeabi_dcmplt>
 801f234:	2800      	cmp	r0, #0
 801f236:	d159      	bne.n	801f2ec <_strtod_l+0xa80>
 801f238:	0020      	movs	r0, r4
 801f23a:	0029      	movs	r1, r5
 801f23c:	2200      	movs	r2, #0
 801f23e:	4b77      	ldr	r3, [pc, #476]	@ (801f41c <_strtod_l+0xbb0>)
 801f240:	f7e3 f9fc 	bl	800263c <__aeabi_dmul>
 801f244:	0004      	movs	r4, r0
 801f246:	000d      	movs	r5, r1
 801f248:	2380      	movs	r3, #128	@ 0x80
 801f24a:	061b      	lsls	r3, r3, #24
 801f24c:	18eb      	adds	r3, r5, r3
 801f24e:	940a      	str	r4, [sp, #40]	@ 0x28
 801f250:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f252:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f256:	9214      	str	r2, [sp, #80]	@ 0x50
 801f258:	9315      	str	r3, [sp, #84]	@ 0x54
 801f25a:	4a71      	ldr	r2, [pc, #452]	@ (801f420 <_strtod_l+0xbb4>)
 801f25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f25e:	4013      	ands	r3, r2
 801f260:	9316      	str	r3, [sp, #88]	@ 0x58
 801f262:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f264:	4b6f      	ldr	r3, [pc, #444]	@ (801f424 <_strtod_l+0xbb8>)
 801f266:	429a      	cmp	r2, r3
 801f268:	d000      	beq.n	801f26c <_strtod_l+0xa00>
 801f26a:	e087      	b.n	801f37c <_strtod_l+0xb10>
 801f26c:	4a6e      	ldr	r2, [pc, #440]	@ (801f428 <_strtod_l+0xbbc>)
 801f26e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f270:	4694      	mov	ip, r2
 801f272:	4463      	add	r3, ip
 801f274:	001f      	movs	r7, r3
 801f276:	0030      	movs	r0, r6
 801f278:	0019      	movs	r1, r3
 801f27a:	f002 ffd7 	bl	802222c <__ulp>
 801f27e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f282:	f7e3 f9db 	bl	800263c <__aeabi_dmul>
 801f286:	0032      	movs	r2, r6
 801f288:	003b      	movs	r3, r7
 801f28a:	f7e2 fa2f 	bl	80016ec <__aeabi_dadd>
 801f28e:	4a64      	ldr	r2, [pc, #400]	@ (801f420 <_strtod_l+0xbb4>)
 801f290:	4b66      	ldr	r3, [pc, #408]	@ (801f42c <_strtod_l+0xbc0>)
 801f292:	0006      	movs	r6, r0
 801f294:	400a      	ands	r2, r1
 801f296:	429a      	cmp	r2, r3
 801f298:	d940      	bls.n	801f31c <_strtod_l+0xab0>
 801f29a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f29c:	4a64      	ldr	r2, [pc, #400]	@ (801f430 <_strtod_l+0xbc4>)
 801f29e:	4293      	cmp	r3, r2
 801f2a0:	d103      	bne.n	801f2aa <_strtod_l+0xa3e>
 801f2a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2a4:	3301      	adds	r3, #1
 801f2a6:	d100      	bne.n	801f2aa <_strtod_l+0xa3e>
 801f2a8:	e51a      	b.n	801ece0 <_strtod_l+0x474>
 801f2aa:	2601      	movs	r6, #1
 801f2ac:	4f60      	ldr	r7, [pc, #384]	@ (801f430 <_strtod_l+0xbc4>)
 801f2ae:	4276      	negs	r6, r6
 801f2b0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f2b2:	9805      	ldr	r0, [sp, #20]
 801f2b4:	f002 fc6e 	bl	8021b94 <_Bfree>
 801f2b8:	9908      	ldr	r1, [sp, #32]
 801f2ba:	9805      	ldr	r0, [sp, #20]
 801f2bc:	f002 fc6a 	bl	8021b94 <_Bfree>
 801f2c0:	9907      	ldr	r1, [sp, #28]
 801f2c2:	9805      	ldr	r0, [sp, #20]
 801f2c4:	f002 fc66 	bl	8021b94 <_Bfree>
 801f2c8:	9906      	ldr	r1, [sp, #24]
 801f2ca:	9805      	ldr	r0, [sp, #20]
 801f2cc:	f002 fc62 	bl	8021b94 <_Bfree>
 801f2d0:	e617      	b.n	801ef02 <_strtod_l+0x696>
 801f2d2:	2e01      	cmp	r6, #1
 801f2d4:	d103      	bne.n	801f2de <_strtod_l+0xa72>
 801f2d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d100      	bne.n	801f2de <_strtod_l+0xa72>
 801f2dc:	e59c      	b.n	801ee18 <_strtod_l+0x5ac>
 801f2de:	2300      	movs	r3, #0
 801f2e0:	4c54      	ldr	r4, [pc, #336]	@ (801f434 <_strtod_l+0xbc8>)
 801f2e2:	4d4d      	ldr	r5, [pc, #308]	@ (801f418 <_strtod_l+0xbac>)
 801f2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f2e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f2e8:	2400      	movs	r4, #0
 801f2ea:	e7b2      	b.n	801f252 <_strtod_l+0x9e6>
 801f2ec:	2400      	movs	r4, #0
 801f2ee:	4d4b      	ldr	r5, [pc, #300]	@ (801f41c <_strtod_l+0xbb0>)
 801f2f0:	e7aa      	b.n	801f248 <_strtod_l+0x9dc>
 801f2f2:	0020      	movs	r0, r4
 801f2f4:	0029      	movs	r1, r5
 801f2f6:	4b49      	ldr	r3, [pc, #292]	@ (801f41c <_strtod_l+0xbb0>)
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	f7e3 f99f 	bl	800263c <__aeabi_dmul>
 801f2fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f300:	0004      	movs	r4, r0
 801f302:	000d      	movs	r5, r1
 801f304:	2b00      	cmp	r3, #0
 801f306:	d09f      	beq.n	801f248 <_strtod_l+0x9dc>
 801f308:	940a      	str	r4, [sp, #40]	@ 0x28
 801f30a:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f30c:	e7a1      	b.n	801f252 <_strtod_l+0x9e6>
 801f30e:	2300      	movs	r3, #0
 801f310:	4c41      	ldr	r4, [pc, #260]	@ (801f418 <_strtod_l+0xbac>)
 801f312:	0025      	movs	r5, r4
 801f314:	930a      	str	r3, [sp, #40]	@ 0x28
 801f316:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f318:	001c      	movs	r4, r3
 801f31a:	e79a      	b.n	801f252 <_strtod_l+0x9e6>
 801f31c:	23d4      	movs	r3, #212	@ 0xd4
 801f31e:	049b      	lsls	r3, r3, #18
 801f320:	18cf      	adds	r7, r1, r3
 801f322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f324:	9710      	str	r7, [sp, #64]	@ 0x40
 801f326:	2b00      	cmp	r3, #0
 801f328:	d1c2      	bne.n	801f2b0 <_strtod_l+0xa44>
 801f32a:	4b3d      	ldr	r3, [pc, #244]	@ (801f420 <_strtod_l+0xbb4>)
 801f32c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f32e:	403b      	ands	r3, r7
 801f330:	429a      	cmp	r2, r3
 801f332:	d1bd      	bne.n	801f2b0 <_strtod_l+0xa44>
 801f334:	0020      	movs	r0, r4
 801f336:	0029      	movs	r1, r5
 801f338:	f7e1 f9a6 	bl	8000688 <__aeabi_d2lz>
 801f33c:	f7e1 f9de 	bl	80006fc <__aeabi_l2d>
 801f340:	0002      	movs	r2, r0
 801f342:	000b      	movs	r3, r1
 801f344:	0020      	movs	r0, r4
 801f346:	0029      	movs	r1, r5
 801f348:	f7e3 fc40 	bl	8002bcc <__aeabi_dsub>
 801f34c:	033c      	lsls	r4, r7, #12
 801f34e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f350:	0b24      	lsrs	r4, r4, #12
 801f352:	4334      	orrs	r4, r6
 801f354:	900e      	str	r0, [sp, #56]	@ 0x38
 801f356:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f358:	4a37      	ldr	r2, [pc, #220]	@ (801f438 <_strtod_l+0xbcc>)
 801f35a:	431c      	orrs	r4, r3
 801f35c:	d052      	beq.n	801f404 <_strtod_l+0xb98>
 801f35e:	4b37      	ldr	r3, [pc, #220]	@ (801f43c <_strtod_l+0xbd0>)
 801f360:	f7e1 f8ac 	bl	80004bc <__aeabi_dcmplt>
 801f364:	2800      	cmp	r0, #0
 801f366:	d000      	beq.n	801f36a <_strtod_l+0xafe>
 801f368:	e4c3      	b.n	801ecf2 <_strtod_l+0x486>
 801f36a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f36c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f36e:	4a34      	ldr	r2, [pc, #208]	@ (801f440 <_strtod_l+0xbd4>)
 801f370:	4b2a      	ldr	r3, [pc, #168]	@ (801f41c <_strtod_l+0xbb0>)
 801f372:	f7e1 f8b7 	bl	80004e4 <__aeabi_dcmpgt>
 801f376:	2800      	cmp	r0, #0
 801f378:	d09a      	beq.n	801f2b0 <_strtod_l+0xa44>
 801f37a:	e4ba      	b.n	801ecf2 <_strtod_l+0x486>
 801f37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d02a      	beq.n	801f3d8 <_strtod_l+0xb6c>
 801f382:	23d4      	movs	r3, #212	@ 0xd4
 801f384:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f386:	04db      	lsls	r3, r3, #19
 801f388:	429a      	cmp	r2, r3
 801f38a:	d825      	bhi.n	801f3d8 <_strtod_l+0xb6c>
 801f38c:	0020      	movs	r0, r4
 801f38e:	0029      	movs	r1, r5
 801f390:	4a2c      	ldr	r2, [pc, #176]	@ (801f444 <_strtod_l+0xbd8>)
 801f392:	4b2d      	ldr	r3, [pc, #180]	@ (801f448 <_strtod_l+0xbdc>)
 801f394:	f7e1 f89c 	bl	80004d0 <__aeabi_dcmple>
 801f398:	2800      	cmp	r0, #0
 801f39a:	d016      	beq.n	801f3ca <_strtod_l+0xb5e>
 801f39c:	0020      	movs	r0, r4
 801f39e:	0029      	movs	r1, r5
 801f3a0:	f7e1 f954 	bl	800064c <__aeabi_d2uiz>
 801f3a4:	2800      	cmp	r0, #0
 801f3a6:	d100      	bne.n	801f3aa <_strtod_l+0xb3e>
 801f3a8:	3001      	adds	r0, #1
 801f3aa:	f7e4 f837 	bl	800341c <__aeabi_ui2d>
 801f3ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f3b0:	0004      	movs	r4, r0
 801f3b2:	000d      	movs	r5, r1
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d122      	bne.n	801f3fe <_strtod_l+0xb92>
 801f3b8:	2380      	movs	r3, #128	@ 0x80
 801f3ba:	061b      	lsls	r3, r3, #24
 801f3bc:	18cb      	adds	r3, r1, r3
 801f3be:	9018      	str	r0, [sp, #96]	@ 0x60
 801f3c0:	9319      	str	r3, [sp, #100]	@ 0x64
 801f3c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f3c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f3c6:	9214      	str	r2, [sp, #80]	@ 0x50
 801f3c8:	9315      	str	r3, [sp, #84]	@ 0x54
 801f3ca:	22d6      	movs	r2, #214	@ 0xd6
 801f3cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f3ce:	04d2      	lsls	r2, r2, #19
 801f3d0:	189b      	adds	r3, r3, r2
 801f3d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f3d4:	1a9b      	subs	r3, r3, r2
 801f3d6:	9315      	str	r3, [sp, #84]	@ 0x54
 801f3d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f3da:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f3dc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f3de:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f3e0:	f002 ff24 	bl	802222c <__ulp>
 801f3e4:	0002      	movs	r2, r0
 801f3e6:	000b      	movs	r3, r1
 801f3e8:	0030      	movs	r0, r6
 801f3ea:	0039      	movs	r1, r7
 801f3ec:	f7e3 f926 	bl	800263c <__aeabi_dmul>
 801f3f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f3f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f3f4:	f7e2 f97a 	bl	80016ec <__aeabi_dadd>
 801f3f8:	0006      	movs	r6, r0
 801f3fa:	000f      	movs	r7, r1
 801f3fc:	e791      	b.n	801f322 <_strtod_l+0xab6>
 801f3fe:	9418      	str	r4, [sp, #96]	@ 0x60
 801f400:	9519      	str	r5, [sp, #100]	@ 0x64
 801f402:	e7de      	b.n	801f3c2 <_strtod_l+0xb56>
 801f404:	4b11      	ldr	r3, [pc, #68]	@ (801f44c <_strtod_l+0xbe0>)
 801f406:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f408:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f40a:	f7e1 f857 	bl	80004bc <__aeabi_dcmplt>
 801f40e:	e7b2      	b.n	801f376 <_strtod_l+0xb0a>
 801f410:	fff00000 	.word	0xfff00000
 801f414:	000fffff 	.word	0x000fffff
 801f418:	3ff00000 	.word	0x3ff00000
 801f41c:	3fe00000 	.word	0x3fe00000
 801f420:	7ff00000 	.word	0x7ff00000
 801f424:	7fe00000 	.word	0x7fe00000
 801f428:	fcb00000 	.word	0xfcb00000
 801f42c:	7c9fffff 	.word	0x7c9fffff
 801f430:	7fefffff 	.word	0x7fefffff
 801f434:	bff00000 	.word	0xbff00000
 801f438:	94a03595 	.word	0x94a03595
 801f43c:	3fdfffff 	.word	0x3fdfffff
 801f440:	35afe535 	.word	0x35afe535
 801f444:	ffc00000 	.word	0xffc00000
 801f448:	41dfffff 	.word	0x41dfffff
 801f44c:	3fcfffff 	.word	0x3fcfffff

0801f450 <strtod>:
 801f450:	b510      	push	{r4, lr}
 801f452:	4c04      	ldr	r4, [pc, #16]	@ (801f464 <strtod+0x14>)
 801f454:	000a      	movs	r2, r1
 801f456:	0001      	movs	r1, r0
 801f458:	4b03      	ldr	r3, [pc, #12]	@ (801f468 <strtod+0x18>)
 801f45a:	6820      	ldr	r0, [r4, #0]
 801f45c:	f7ff fa06 	bl	801e86c <_strtod_l>
 801f460:	bd10      	pop	{r4, pc}
 801f462:	46c0      	nop			@ (mov r8, r8)
 801f464:	200003d0 	.word	0x200003d0
 801f468:	20000264 	.word	0x20000264

0801f46c <_strtol_l.constprop.0>:
 801f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f46e:	b085      	sub	sp, #20
 801f470:	0017      	movs	r7, r2
 801f472:	001e      	movs	r6, r3
 801f474:	9003      	str	r0, [sp, #12]
 801f476:	9101      	str	r1, [sp, #4]
 801f478:	2b24      	cmp	r3, #36	@ 0x24
 801f47a:	d844      	bhi.n	801f506 <_strtol_l.constprop.0+0x9a>
 801f47c:	000c      	movs	r4, r1
 801f47e:	2b01      	cmp	r3, #1
 801f480:	d041      	beq.n	801f506 <_strtol_l.constprop.0+0x9a>
 801f482:	4b3d      	ldr	r3, [pc, #244]	@ (801f578 <_strtol_l.constprop.0+0x10c>)
 801f484:	2208      	movs	r2, #8
 801f486:	469c      	mov	ip, r3
 801f488:	0023      	movs	r3, r4
 801f48a:	4661      	mov	r1, ip
 801f48c:	781d      	ldrb	r5, [r3, #0]
 801f48e:	3401      	adds	r4, #1
 801f490:	5d48      	ldrb	r0, [r1, r5]
 801f492:	0001      	movs	r1, r0
 801f494:	4011      	ands	r1, r2
 801f496:	4210      	tst	r0, r2
 801f498:	d1f6      	bne.n	801f488 <_strtol_l.constprop.0+0x1c>
 801f49a:	2d2d      	cmp	r5, #45	@ 0x2d
 801f49c:	d13a      	bne.n	801f514 <_strtol_l.constprop.0+0xa8>
 801f49e:	7825      	ldrb	r5, [r4, #0]
 801f4a0:	1c9c      	adds	r4, r3, #2
 801f4a2:	2301      	movs	r3, #1
 801f4a4:	9300      	str	r3, [sp, #0]
 801f4a6:	2210      	movs	r2, #16
 801f4a8:	0033      	movs	r3, r6
 801f4aa:	4393      	bics	r3, r2
 801f4ac:	d109      	bne.n	801f4c2 <_strtol_l.constprop.0+0x56>
 801f4ae:	2d30      	cmp	r5, #48	@ 0x30
 801f4b0:	d136      	bne.n	801f520 <_strtol_l.constprop.0+0xb4>
 801f4b2:	2120      	movs	r1, #32
 801f4b4:	7823      	ldrb	r3, [r4, #0]
 801f4b6:	438b      	bics	r3, r1
 801f4b8:	2b58      	cmp	r3, #88	@ 0x58
 801f4ba:	d131      	bne.n	801f520 <_strtol_l.constprop.0+0xb4>
 801f4bc:	0016      	movs	r6, r2
 801f4be:	7865      	ldrb	r5, [r4, #1]
 801f4c0:	3402      	adds	r4, #2
 801f4c2:	4a2e      	ldr	r2, [pc, #184]	@ (801f57c <_strtol_l.constprop.0+0x110>)
 801f4c4:	9b00      	ldr	r3, [sp, #0]
 801f4c6:	4694      	mov	ip, r2
 801f4c8:	4463      	add	r3, ip
 801f4ca:	0031      	movs	r1, r6
 801f4cc:	0018      	movs	r0, r3
 801f4ce:	9302      	str	r3, [sp, #8]
 801f4d0:	f7e0 feee 	bl	80002b0 <__aeabi_uidivmod>
 801f4d4:	2200      	movs	r2, #0
 801f4d6:	4684      	mov	ip, r0
 801f4d8:	0010      	movs	r0, r2
 801f4da:	002b      	movs	r3, r5
 801f4dc:	3b30      	subs	r3, #48	@ 0x30
 801f4de:	2b09      	cmp	r3, #9
 801f4e0:	d825      	bhi.n	801f52e <_strtol_l.constprop.0+0xc2>
 801f4e2:	001d      	movs	r5, r3
 801f4e4:	42ae      	cmp	r6, r5
 801f4e6:	dd31      	ble.n	801f54c <_strtol_l.constprop.0+0xe0>
 801f4e8:	1c53      	adds	r3, r2, #1
 801f4ea:	d009      	beq.n	801f500 <_strtol_l.constprop.0+0x94>
 801f4ec:	2201      	movs	r2, #1
 801f4ee:	4252      	negs	r2, r2
 801f4f0:	4584      	cmp	ip, r0
 801f4f2:	d305      	bcc.n	801f500 <_strtol_l.constprop.0+0x94>
 801f4f4:	d101      	bne.n	801f4fa <_strtol_l.constprop.0+0x8e>
 801f4f6:	42a9      	cmp	r1, r5
 801f4f8:	db25      	blt.n	801f546 <_strtol_l.constprop.0+0xda>
 801f4fa:	2201      	movs	r2, #1
 801f4fc:	4370      	muls	r0, r6
 801f4fe:	1828      	adds	r0, r5, r0
 801f500:	7825      	ldrb	r5, [r4, #0]
 801f502:	3401      	adds	r4, #1
 801f504:	e7e9      	b.n	801f4da <_strtol_l.constprop.0+0x6e>
 801f506:	f000 ffc5 	bl	8020494 <__errno>
 801f50a:	2316      	movs	r3, #22
 801f50c:	6003      	str	r3, [r0, #0]
 801f50e:	2000      	movs	r0, #0
 801f510:	b005      	add	sp, #20
 801f512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f514:	9100      	str	r1, [sp, #0]
 801f516:	2d2b      	cmp	r5, #43	@ 0x2b
 801f518:	d1c5      	bne.n	801f4a6 <_strtol_l.constprop.0+0x3a>
 801f51a:	7825      	ldrb	r5, [r4, #0]
 801f51c:	1c9c      	adds	r4, r3, #2
 801f51e:	e7c2      	b.n	801f4a6 <_strtol_l.constprop.0+0x3a>
 801f520:	2e00      	cmp	r6, #0
 801f522:	d1ce      	bne.n	801f4c2 <_strtol_l.constprop.0+0x56>
 801f524:	3608      	adds	r6, #8
 801f526:	2d30      	cmp	r5, #48	@ 0x30
 801f528:	d0cb      	beq.n	801f4c2 <_strtol_l.constprop.0+0x56>
 801f52a:	3602      	adds	r6, #2
 801f52c:	e7c9      	b.n	801f4c2 <_strtol_l.constprop.0+0x56>
 801f52e:	002b      	movs	r3, r5
 801f530:	3b41      	subs	r3, #65	@ 0x41
 801f532:	2b19      	cmp	r3, #25
 801f534:	d801      	bhi.n	801f53a <_strtol_l.constprop.0+0xce>
 801f536:	3d37      	subs	r5, #55	@ 0x37
 801f538:	e7d4      	b.n	801f4e4 <_strtol_l.constprop.0+0x78>
 801f53a:	002b      	movs	r3, r5
 801f53c:	3b61      	subs	r3, #97	@ 0x61
 801f53e:	2b19      	cmp	r3, #25
 801f540:	d804      	bhi.n	801f54c <_strtol_l.constprop.0+0xe0>
 801f542:	3d57      	subs	r5, #87	@ 0x57
 801f544:	e7ce      	b.n	801f4e4 <_strtol_l.constprop.0+0x78>
 801f546:	2201      	movs	r2, #1
 801f548:	4252      	negs	r2, r2
 801f54a:	e7d9      	b.n	801f500 <_strtol_l.constprop.0+0x94>
 801f54c:	1c53      	adds	r3, r2, #1
 801f54e:	d108      	bne.n	801f562 <_strtol_l.constprop.0+0xf6>
 801f550:	2322      	movs	r3, #34	@ 0x22
 801f552:	9a03      	ldr	r2, [sp, #12]
 801f554:	9802      	ldr	r0, [sp, #8]
 801f556:	6013      	str	r3, [r2, #0]
 801f558:	2f00      	cmp	r7, #0
 801f55a:	d0d9      	beq.n	801f510 <_strtol_l.constprop.0+0xa4>
 801f55c:	1e63      	subs	r3, r4, #1
 801f55e:	9301      	str	r3, [sp, #4]
 801f560:	e007      	b.n	801f572 <_strtol_l.constprop.0+0x106>
 801f562:	9b00      	ldr	r3, [sp, #0]
 801f564:	2b00      	cmp	r3, #0
 801f566:	d000      	beq.n	801f56a <_strtol_l.constprop.0+0xfe>
 801f568:	4240      	negs	r0, r0
 801f56a:	2f00      	cmp	r7, #0
 801f56c:	d0d0      	beq.n	801f510 <_strtol_l.constprop.0+0xa4>
 801f56e:	2a00      	cmp	r2, #0
 801f570:	d1f4      	bne.n	801f55c <_strtol_l.constprop.0+0xf0>
 801f572:	9b01      	ldr	r3, [sp, #4]
 801f574:	603b      	str	r3, [r7, #0]
 801f576:	e7cb      	b.n	801f510 <_strtol_l.constprop.0+0xa4>
 801f578:	08025da1 	.word	0x08025da1
 801f57c:	7fffffff 	.word	0x7fffffff

0801f580 <strtol>:
 801f580:	b510      	push	{r4, lr}
 801f582:	4c04      	ldr	r4, [pc, #16]	@ (801f594 <strtol+0x14>)
 801f584:	0013      	movs	r3, r2
 801f586:	000a      	movs	r2, r1
 801f588:	0001      	movs	r1, r0
 801f58a:	6820      	ldr	r0, [r4, #0]
 801f58c:	f7ff ff6e 	bl	801f46c <_strtol_l.constprop.0>
 801f590:	bd10      	pop	{r4, pc}
 801f592:	46c0      	nop			@ (mov r8, r8)
 801f594:	200003d0 	.word	0x200003d0

0801f598 <__cvt>:
 801f598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f59a:	001f      	movs	r7, r3
 801f59c:	2300      	movs	r3, #0
 801f59e:	0016      	movs	r6, r2
 801f5a0:	b08b      	sub	sp, #44	@ 0x2c
 801f5a2:	429f      	cmp	r7, r3
 801f5a4:	da04      	bge.n	801f5b0 <__cvt+0x18>
 801f5a6:	2180      	movs	r1, #128	@ 0x80
 801f5a8:	0609      	lsls	r1, r1, #24
 801f5aa:	187b      	adds	r3, r7, r1
 801f5ac:	001f      	movs	r7, r3
 801f5ae:	232d      	movs	r3, #45	@ 0x2d
 801f5b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f5b2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f5b4:	7013      	strb	r3, [r2, #0]
 801f5b6:	2320      	movs	r3, #32
 801f5b8:	2203      	movs	r2, #3
 801f5ba:	439d      	bics	r5, r3
 801f5bc:	2d46      	cmp	r5, #70	@ 0x46
 801f5be:	d007      	beq.n	801f5d0 <__cvt+0x38>
 801f5c0:	002b      	movs	r3, r5
 801f5c2:	3b45      	subs	r3, #69	@ 0x45
 801f5c4:	4259      	negs	r1, r3
 801f5c6:	414b      	adcs	r3, r1
 801f5c8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f5ca:	3a01      	subs	r2, #1
 801f5cc:	18cb      	adds	r3, r1, r3
 801f5ce:	9310      	str	r3, [sp, #64]	@ 0x40
 801f5d0:	ab09      	add	r3, sp, #36	@ 0x24
 801f5d2:	9304      	str	r3, [sp, #16]
 801f5d4:	ab08      	add	r3, sp, #32
 801f5d6:	9303      	str	r3, [sp, #12]
 801f5d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5da:	9200      	str	r2, [sp, #0]
 801f5dc:	9302      	str	r3, [sp, #8]
 801f5de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5e0:	0032      	movs	r2, r6
 801f5e2:	9301      	str	r3, [sp, #4]
 801f5e4:	003b      	movs	r3, r7
 801f5e6:	f001 f82b 	bl	8020640 <_dtoa_r>
 801f5ea:	0004      	movs	r4, r0
 801f5ec:	2d47      	cmp	r5, #71	@ 0x47
 801f5ee:	d11b      	bne.n	801f628 <__cvt+0x90>
 801f5f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f5f2:	07db      	lsls	r3, r3, #31
 801f5f4:	d511      	bpl.n	801f61a <__cvt+0x82>
 801f5f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5f8:	18c3      	adds	r3, r0, r3
 801f5fa:	9307      	str	r3, [sp, #28]
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	2300      	movs	r3, #0
 801f600:	0030      	movs	r0, r6
 801f602:	0039      	movs	r1, r7
 801f604:	f7e0 ff54 	bl	80004b0 <__aeabi_dcmpeq>
 801f608:	2800      	cmp	r0, #0
 801f60a:	d001      	beq.n	801f610 <__cvt+0x78>
 801f60c:	9b07      	ldr	r3, [sp, #28]
 801f60e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f610:	2230      	movs	r2, #48	@ 0x30
 801f612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f614:	9907      	ldr	r1, [sp, #28]
 801f616:	428b      	cmp	r3, r1
 801f618:	d320      	bcc.n	801f65c <__cvt+0xc4>
 801f61a:	0020      	movs	r0, r4
 801f61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f61e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f620:	1b1b      	subs	r3, r3, r4
 801f622:	6013      	str	r3, [r2, #0]
 801f624:	b00b      	add	sp, #44	@ 0x2c
 801f626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f62a:	18c3      	adds	r3, r0, r3
 801f62c:	9307      	str	r3, [sp, #28]
 801f62e:	2d46      	cmp	r5, #70	@ 0x46
 801f630:	d1e4      	bne.n	801f5fc <__cvt+0x64>
 801f632:	7803      	ldrb	r3, [r0, #0]
 801f634:	2b30      	cmp	r3, #48	@ 0x30
 801f636:	d10c      	bne.n	801f652 <__cvt+0xba>
 801f638:	2200      	movs	r2, #0
 801f63a:	2300      	movs	r3, #0
 801f63c:	0030      	movs	r0, r6
 801f63e:	0039      	movs	r1, r7
 801f640:	f7e0 ff36 	bl	80004b0 <__aeabi_dcmpeq>
 801f644:	2800      	cmp	r0, #0
 801f646:	d104      	bne.n	801f652 <__cvt+0xba>
 801f648:	2301      	movs	r3, #1
 801f64a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f64c:	1a9b      	subs	r3, r3, r2
 801f64e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f650:	6013      	str	r3, [r2, #0]
 801f652:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f654:	9a07      	ldr	r2, [sp, #28]
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	18d3      	adds	r3, r2, r3
 801f65a:	e7ce      	b.n	801f5fa <__cvt+0x62>
 801f65c:	1c59      	adds	r1, r3, #1
 801f65e:	9109      	str	r1, [sp, #36]	@ 0x24
 801f660:	701a      	strb	r2, [r3, #0]
 801f662:	e7d6      	b.n	801f612 <__cvt+0x7a>

0801f664 <__exponent>:
 801f664:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f666:	232b      	movs	r3, #43	@ 0x2b
 801f668:	0005      	movs	r5, r0
 801f66a:	000c      	movs	r4, r1
 801f66c:	b085      	sub	sp, #20
 801f66e:	7002      	strb	r2, [r0, #0]
 801f670:	2900      	cmp	r1, #0
 801f672:	da01      	bge.n	801f678 <__exponent+0x14>
 801f674:	424c      	negs	r4, r1
 801f676:	3302      	adds	r3, #2
 801f678:	706b      	strb	r3, [r5, #1]
 801f67a:	2c09      	cmp	r4, #9
 801f67c:	dd2c      	ble.n	801f6d8 <__exponent+0x74>
 801f67e:	ab02      	add	r3, sp, #8
 801f680:	1dde      	adds	r6, r3, #7
 801f682:	0020      	movs	r0, r4
 801f684:	210a      	movs	r1, #10
 801f686:	f7e0 fefd 	bl	8000484 <__aeabi_idivmod>
 801f68a:	0037      	movs	r7, r6
 801f68c:	3130      	adds	r1, #48	@ 0x30
 801f68e:	3e01      	subs	r6, #1
 801f690:	0020      	movs	r0, r4
 801f692:	7031      	strb	r1, [r6, #0]
 801f694:	210a      	movs	r1, #10
 801f696:	9401      	str	r4, [sp, #4]
 801f698:	f7e0 fe0e 	bl	80002b8 <__divsi3>
 801f69c:	9b01      	ldr	r3, [sp, #4]
 801f69e:	0004      	movs	r4, r0
 801f6a0:	2b63      	cmp	r3, #99	@ 0x63
 801f6a2:	dcee      	bgt.n	801f682 <__exponent+0x1e>
 801f6a4:	1eba      	subs	r2, r7, #2
 801f6a6:	1ca8      	adds	r0, r5, #2
 801f6a8:	0001      	movs	r1, r0
 801f6aa:	0013      	movs	r3, r2
 801f6ac:	3430      	adds	r4, #48	@ 0x30
 801f6ae:	7014      	strb	r4, [r2, #0]
 801f6b0:	ac02      	add	r4, sp, #8
 801f6b2:	3407      	adds	r4, #7
 801f6b4:	429c      	cmp	r4, r3
 801f6b6:	d80a      	bhi.n	801f6ce <__exponent+0x6a>
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	42a2      	cmp	r2, r4
 801f6bc:	d803      	bhi.n	801f6c6 <__exponent+0x62>
 801f6be:	3309      	adds	r3, #9
 801f6c0:	aa02      	add	r2, sp, #8
 801f6c2:	189b      	adds	r3, r3, r2
 801f6c4:	1bdb      	subs	r3, r3, r7
 801f6c6:	18c0      	adds	r0, r0, r3
 801f6c8:	1b40      	subs	r0, r0, r5
 801f6ca:	b005      	add	sp, #20
 801f6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6ce:	781c      	ldrb	r4, [r3, #0]
 801f6d0:	3301      	adds	r3, #1
 801f6d2:	700c      	strb	r4, [r1, #0]
 801f6d4:	3101      	adds	r1, #1
 801f6d6:	e7eb      	b.n	801f6b0 <__exponent+0x4c>
 801f6d8:	2330      	movs	r3, #48	@ 0x30
 801f6da:	18e4      	adds	r4, r4, r3
 801f6dc:	70ab      	strb	r3, [r5, #2]
 801f6de:	1d28      	adds	r0, r5, #4
 801f6e0:	70ec      	strb	r4, [r5, #3]
 801f6e2:	e7f1      	b.n	801f6c8 <__exponent+0x64>

0801f6e4 <_printf_float>:
 801f6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6e6:	b097      	sub	sp, #92	@ 0x5c
 801f6e8:	000d      	movs	r5, r1
 801f6ea:	920a      	str	r2, [sp, #40]	@ 0x28
 801f6ec:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f6ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f6f0:	9009      	str	r0, [sp, #36]	@ 0x24
 801f6f2:	f000 fe7d 	bl	80203f0 <_localeconv_r>
 801f6f6:	6803      	ldr	r3, [r0, #0]
 801f6f8:	0018      	movs	r0, r3
 801f6fa:	930d      	str	r3, [sp, #52]	@ 0x34
 801f6fc:	f7e0 fd36 	bl	800016c <strlen>
 801f700:	2300      	movs	r3, #0
 801f702:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f704:	9314      	str	r3, [sp, #80]	@ 0x50
 801f706:	7e2b      	ldrb	r3, [r5, #24]
 801f708:	2207      	movs	r2, #7
 801f70a:	930c      	str	r3, [sp, #48]	@ 0x30
 801f70c:	682b      	ldr	r3, [r5, #0]
 801f70e:	930e      	str	r3, [sp, #56]	@ 0x38
 801f710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f712:	6823      	ldr	r3, [r4, #0]
 801f714:	05c9      	lsls	r1, r1, #23
 801f716:	d545      	bpl.n	801f7a4 <_printf_float+0xc0>
 801f718:	189b      	adds	r3, r3, r2
 801f71a:	4393      	bics	r3, r2
 801f71c:	001a      	movs	r2, r3
 801f71e:	3208      	adds	r2, #8
 801f720:	6022      	str	r2, [r4, #0]
 801f722:	2201      	movs	r2, #1
 801f724:	681e      	ldr	r6, [r3, #0]
 801f726:	685f      	ldr	r7, [r3, #4]
 801f728:	007b      	lsls	r3, r7, #1
 801f72a:	085b      	lsrs	r3, r3, #1
 801f72c:	9311      	str	r3, [sp, #68]	@ 0x44
 801f72e:	9610      	str	r6, [sp, #64]	@ 0x40
 801f730:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f732:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f734:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f736:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f738:	4ba7      	ldr	r3, [pc, #668]	@ (801f9d8 <_printf_float+0x2f4>)
 801f73a:	4252      	negs	r2, r2
 801f73c:	f7e3 fde2 	bl	8003304 <__aeabi_dcmpun>
 801f740:	2800      	cmp	r0, #0
 801f742:	d131      	bne.n	801f7a8 <_printf_float+0xc4>
 801f744:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f746:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f748:	2201      	movs	r2, #1
 801f74a:	4ba3      	ldr	r3, [pc, #652]	@ (801f9d8 <_printf_float+0x2f4>)
 801f74c:	4252      	negs	r2, r2
 801f74e:	f7e0 febf 	bl	80004d0 <__aeabi_dcmple>
 801f752:	2800      	cmp	r0, #0
 801f754:	d128      	bne.n	801f7a8 <_printf_float+0xc4>
 801f756:	2200      	movs	r2, #0
 801f758:	2300      	movs	r3, #0
 801f75a:	0030      	movs	r0, r6
 801f75c:	0039      	movs	r1, r7
 801f75e:	f7e0 fead 	bl	80004bc <__aeabi_dcmplt>
 801f762:	2800      	cmp	r0, #0
 801f764:	d003      	beq.n	801f76e <_printf_float+0x8a>
 801f766:	002b      	movs	r3, r5
 801f768:	222d      	movs	r2, #45	@ 0x2d
 801f76a:	3343      	adds	r3, #67	@ 0x43
 801f76c:	701a      	strb	r2, [r3, #0]
 801f76e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f770:	4f9a      	ldr	r7, [pc, #616]	@ (801f9dc <_printf_float+0x2f8>)
 801f772:	2b47      	cmp	r3, #71	@ 0x47
 801f774:	d900      	bls.n	801f778 <_printf_float+0x94>
 801f776:	4f9a      	ldr	r7, [pc, #616]	@ (801f9e0 <_printf_float+0x2fc>)
 801f778:	2303      	movs	r3, #3
 801f77a:	2400      	movs	r4, #0
 801f77c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f77e:	612b      	str	r3, [r5, #16]
 801f780:	3301      	adds	r3, #1
 801f782:	439a      	bics	r2, r3
 801f784:	602a      	str	r2, [r5, #0]
 801f786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f788:	0029      	movs	r1, r5
 801f78a:	9300      	str	r3, [sp, #0]
 801f78c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f78e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f790:	aa15      	add	r2, sp, #84	@ 0x54
 801f792:	f000 f9e5 	bl	801fb60 <_printf_common>
 801f796:	3001      	adds	r0, #1
 801f798:	d000      	beq.n	801f79c <_printf_float+0xb8>
 801f79a:	e09f      	b.n	801f8dc <_printf_float+0x1f8>
 801f79c:	2001      	movs	r0, #1
 801f79e:	4240      	negs	r0, r0
 801f7a0:	b017      	add	sp, #92	@ 0x5c
 801f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7a4:	3307      	adds	r3, #7
 801f7a6:	e7b8      	b.n	801f71a <_printf_float+0x36>
 801f7a8:	0032      	movs	r2, r6
 801f7aa:	003b      	movs	r3, r7
 801f7ac:	0030      	movs	r0, r6
 801f7ae:	0039      	movs	r1, r7
 801f7b0:	f7e3 fda8 	bl	8003304 <__aeabi_dcmpun>
 801f7b4:	2800      	cmp	r0, #0
 801f7b6:	d00b      	beq.n	801f7d0 <_printf_float+0xec>
 801f7b8:	2f00      	cmp	r7, #0
 801f7ba:	da03      	bge.n	801f7c4 <_printf_float+0xe0>
 801f7bc:	002b      	movs	r3, r5
 801f7be:	222d      	movs	r2, #45	@ 0x2d
 801f7c0:	3343      	adds	r3, #67	@ 0x43
 801f7c2:	701a      	strb	r2, [r3, #0]
 801f7c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7c6:	4f87      	ldr	r7, [pc, #540]	@ (801f9e4 <_printf_float+0x300>)
 801f7c8:	2b47      	cmp	r3, #71	@ 0x47
 801f7ca:	d9d5      	bls.n	801f778 <_printf_float+0x94>
 801f7cc:	4f86      	ldr	r7, [pc, #536]	@ (801f9e8 <_printf_float+0x304>)
 801f7ce:	e7d3      	b.n	801f778 <_printf_float+0x94>
 801f7d0:	2220      	movs	r2, #32
 801f7d2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f7d4:	686b      	ldr	r3, [r5, #4]
 801f7d6:	4394      	bics	r4, r2
 801f7d8:	1c5a      	adds	r2, r3, #1
 801f7da:	d146      	bne.n	801f86a <_printf_float+0x186>
 801f7dc:	3307      	adds	r3, #7
 801f7de:	606b      	str	r3, [r5, #4]
 801f7e0:	2380      	movs	r3, #128	@ 0x80
 801f7e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7e4:	00db      	lsls	r3, r3, #3
 801f7e6:	4313      	orrs	r3, r2
 801f7e8:	2200      	movs	r2, #0
 801f7ea:	602b      	str	r3, [r5, #0]
 801f7ec:	9206      	str	r2, [sp, #24]
 801f7ee:	aa14      	add	r2, sp, #80	@ 0x50
 801f7f0:	9205      	str	r2, [sp, #20]
 801f7f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7f4:	a90a      	add	r1, sp, #40	@ 0x28
 801f7f6:	9204      	str	r2, [sp, #16]
 801f7f8:	aa13      	add	r2, sp, #76	@ 0x4c
 801f7fa:	9203      	str	r2, [sp, #12]
 801f7fc:	2223      	movs	r2, #35	@ 0x23
 801f7fe:	1852      	adds	r2, r2, r1
 801f800:	9202      	str	r2, [sp, #8]
 801f802:	9301      	str	r3, [sp, #4]
 801f804:	686b      	ldr	r3, [r5, #4]
 801f806:	0032      	movs	r2, r6
 801f808:	9300      	str	r3, [sp, #0]
 801f80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f80c:	003b      	movs	r3, r7
 801f80e:	f7ff fec3 	bl	801f598 <__cvt>
 801f812:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f814:	0007      	movs	r7, r0
 801f816:	2c47      	cmp	r4, #71	@ 0x47
 801f818:	d12d      	bne.n	801f876 <_printf_float+0x192>
 801f81a:	1cd3      	adds	r3, r2, #3
 801f81c:	db02      	blt.n	801f824 <_printf_float+0x140>
 801f81e:	686b      	ldr	r3, [r5, #4]
 801f820:	429a      	cmp	r2, r3
 801f822:	dd48      	ble.n	801f8b6 <_printf_float+0x1d2>
 801f824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f826:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f828:	3b02      	subs	r3, #2
 801f82a:	b2db      	uxtb	r3, r3
 801f82c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f82e:	0028      	movs	r0, r5
 801f830:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f832:	3901      	subs	r1, #1
 801f834:	3050      	adds	r0, #80	@ 0x50
 801f836:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f838:	f7ff ff14 	bl	801f664 <__exponent>
 801f83c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f83e:	0004      	movs	r4, r0
 801f840:	1813      	adds	r3, r2, r0
 801f842:	612b      	str	r3, [r5, #16]
 801f844:	2a01      	cmp	r2, #1
 801f846:	dc02      	bgt.n	801f84e <_printf_float+0x16a>
 801f848:	682a      	ldr	r2, [r5, #0]
 801f84a:	07d2      	lsls	r2, r2, #31
 801f84c:	d501      	bpl.n	801f852 <_printf_float+0x16e>
 801f84e:	3301      	adds	r3, #1
 801f850:	612b      	str	r3, [r5, #16]
 801f852:	2323      	movs	r3, #35	@ 0x23
 801f854:	aa0a      	add	r2, sp, #40	@ 0x28
 801f856:	189b      	adds	r3, r3, r2
 801f858:	781b      	ldrb	r3, [r3, #0]
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	d100      	bne.n	801f860 <_printf_float+0x17c>
 801f85e:	e792      	b.n	801f786 <_printf_float+0xa2>
 801f860:	002b      	movs	r3, r5
 801f862:	222d      	movs	r2, #45	@ 0x2d
 801f864:	3343      	adds	r3, #67	@ 0x43
 801f866:	701a      	strb	r2, [r3, #0]
 801f868:	e78d      	b.n	801f786 <_printf_float+0xa2>
 801f86a:	2c47      	cmp	r4, #71	@ 0x47
 801f86c:	d1b8      	bne.n	801f7e0 <_printf_float+0xfc>
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d1b6      	bne.n	801f7e0 <_printf_float+0xfc>
 801f872:	3301      	adds	r3, #1
 801f874:	e7b3      	b.n	801f7de <_printf_float+0xfa>
 801f876:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f878:	0011      	movs	r1, r2
 801f87a:	2b65      	cmp	r3, #101	@ 0x65
 801f87c:	d9d7      	bls.n	801f82e <_printf_float+0x14a>
 801f87e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f880:	2b66      	cmp	r3, #102	@ 0x66
 801f882:	d11a      	bne.n	801f8ba <_printf_float+0x1d6>
 801f884:	686b      	ldr	r3, [r5, #4]
 801f886:	2a00      	cmp	r2, #0
 801f888:	dd09      	ble.n	801f89e <_printf_float+0x1ba>
 801f88a:	612a      	str	r2, [r5, #16]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d102      	bne.n	801f896 <_printf_float+0x1b2>
 801f890:	6829      	ldr	r1, [r5, #0]
 801f892:	07c9      	lsls	r1, r1, #31
 801f894:	d50b      	bpl.n	801f8ae <_printf_float+0x1ca>
 801f896:	3301      	adds	r3, #1
 801f898:	189b      	adds	r3, r3, r2
 801f89a:	612b      	str	r3, [r5, #16]
 801f89c:	e007      	b.n	801f8ae <_printf_float+0x1ca>
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d103      	bne.n	801f8aa <_printf_float+0x1c6>
 801f8a2:	2201      	movs	r2, #1
 801f8a4:	6829      	ldr	r1, [r5, #0]
 801f8a6:	4211      	tst	r1, r2
 801f8a8:	d000      	beq.n	801f8ac <_printf_float+0x1c8>
 801f8aa:	1c9a      	adds	r2, r3, #2
 801f8ac:	612a      	str	r2, [r5, #16]
 801f8ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8b0:	2400      	movs	r4, #0
 801f8b2:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f8b4:	e7cd      	b.n	801f852 <_printf_float+0x16e>
 801f8b6:	2367      	movs	r3, #103	@ 0x67
 801f8b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f8bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f8be:	4299      	cmp	r1, r3
 801f8c0:	db06      	blt.n	801f8d0 <_printf_float+0x1ec>
 801f8c2:	682b      	ldr	r3, [r5, #0]
 801f8c4:	6129      	str	r1, [r5, #16]
 801f8c6:	07db      	lsls	r3, r3, #31
 801f8c8:	d5f1      	bpl.n	801f8ae <_printf_float+0x1ca>
 801f8ca:	3101      	adds	r1, #1
 801f8cc:	6129      	str	r1, [r5, #16]
 801f8ce:	e7ee      	b.n	801f8ae <_printf_float+0x1ca>
 801f8d0:	2201      	movs	r2, #1
 801f8d2:	2900      	cmp	r1, #0
 801f8d4:	dce0      	bgt.n	801f898 <_printf_float+0x1b4>
 801f8d6:	1892      	adds	r2, r2, r2
 801f8d8:	1a52      	subs	r2, r2, r1
 801f8da:	e7dd      	b.n	801f898 <_printf_float+0x1b4>
 801f8dc:	682a      	ldr	r2, [r5, #0]
 801f8de:	0553      	lsls	r3, r2, #21
 801f8e0:	d408      	bmi.n	801f8f4 <_printf_float+0x210>
 801f8e2:	692b      	ldr	r3, [r5, #16]
 801f8e4:	003a      	movs	r2, r7
 801f8e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8ec:	47a0      	blx	r4
 801f8ee:	3001      	adds	r0, #1
 801f8f0:	d129      	bne.n	801f946 <_printf_float+0x262>
 801f8f2:	e753      	b.n	801f79c <_printf_float+0xb8>
 801f8f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8f6:	2b65      	cmp	r3, #101	@ 0x65
 801f8f8:	d800      	bhi.n	801f8fc <_printf_float+0x218>
 801f8fa:	e0da      	b.n	801fab2 <_printf_float+0x3ce>
 801f8fc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f8fe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f900:	2200      	movs	r2, #0
 801f902:	2300      	movs	r3, #0
 801f904:	f7e0 fdd4 	bl	80004b0 <__aeabi_dcmpeq>
 801f908:	2800      	cmp	r0, #0
 801f90a:	d033      	beq.n	801f974 <_printf_float+0x290>
 801f90c:	2301      	movs	r3, #1
 801f90e:	4a37      	ldr	r2, [pc, #220]	@ (801f9ec <_printf_float+0x308>)
 801f910:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f914:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f916:	47a0      	blx	r4
 801f918:	3001      	adds	r0, #1
 801f91a:	d100      	bne.n	801f91e <_printf_float+0x23a>
 801f91c:	e73e      	b.n	801f79c <_printf_float+0xb8>
 801f91e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f920:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f922:	42b3      	cmp	r3, r6
 801f924:	db02      	blt.n	801f92c <_printf_float+0x248>
 801f926:	682b      	ldr	r3, [r5, #0]
 801f928:	07db      	lsls	r3, r3, #31
 801f92a:	d50c      	bpl.n	801f946 <_printf_float+0x262>
 801f92c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f92e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f932:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f934:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f936:	47a0      	blx	r4
 801f938:	2400      	movs	r4, #0
 801f93a:	3001      	adds	r0, #1
 801f93c:	d100      	bne.n	801f940 <_printf_float+0x25c>
 801f93e:	e72d      	b.n	801f79c <_printf_float+0xb8>
 801f940:	1e73      	subs	r3, r6, #1
 801f942:	42a3      	cmp	r3, r4
 801f944:	dc0a      	bgt.n	801f95c <_printf_float+0x278>
 801f946:	682b      	ldr	r3, [r5, #0]
 801f948:	079b      	lsls	r3, r3, #30
 801f94a:	d500      	bpl.n	801f94e <_printf_float+0x26a>
 801f94c:	e105      	b.n	801fb5a <_printf_float+0x476>
 801f94e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f950:	68e8      	ldr	r0, [r5, #12]
 801f952:	4298      	cmp	r0, r3
 801f954:	db00      	blt.n	801f958 <_printf_float+0x274>
 801f956:	e723      	b.n	801f7a0 <_printf_float+0xbc>
 801f958:	0018      	movs	r0, r3
 801f95a:	e721      	b.n	801f7a0 <_printf_float+0xbc>
 801f95c:	002a      	movs	r2, r5
 801f95e:	2301      	movs	r3, #1
 801f960:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f964:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f966:	321a      	adds	r2, #26
 801f968:	47b8      	blx	r7
 801f96a:	3001      	adds	r0, #1
 801f96c:	d100      	bne.n	801f970 <_printf_float+0x28c>
 801f96e:	e715      	b.n	801f79c <_printf_float+0xb8>
 801f970:	3401      	adds	r4, #1
 801f972:	e7e5      	b.n	801f940 <_printf_float+0x25c>
 801f974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f976:	2b00      	cmp	r3, #0
 801f978:	dc3a      	bgt.n	801f9f0 <_printf_float+0x30c>
 801f97a:	2301      	movs	r3, #1
 801f97c:	4a1b      	ldr	r2, [pc, #108]	@ (801f9ec <_printf_float+0x308>)
 801f97e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f980:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f982:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f984:	47a0      	blx	r4
 801f986:	3001      	adds	r0, #1
 801f988:	d100      	bne.n	801f98c <_printf_float+0x2a8>
 801f98a:	e707      	b.n	801f79c <_printf_float+0xb8>
 801f98c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f98e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f990:	4333      	orrs	r3, r6
 801f992:	d102      	bne.n	801f99a <_printf_float+0x2b6>
 801f994:	682b      	ldr	r3, [r5, #0]
 801f996:	07db      	lsls	r3, r3, #31
 801f998:	d5d5      	bpl.n	801f946 <_printf_float+0x262>
 801f99a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f99c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f99e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9a4:	47a0      	blx	r4
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	3001      	adds	r0, #1
 801f9aa:	d100      	bne.n	801f9ae <_printf_float+0x2ca>
 801f9ac:	e6f6      	b.n	801f79c <_printf_float+0xb8>
 801f9ae:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f9b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9b4:	425b      	negs	r3, r3
 801f9b6:	4293      	cmp	r3, r2
 801f9b8:	dc01      	bgt.n	801f9be <_printf_float+0x2da>
 801f9ba:	0033      	movs	r3, r6
 801f9bc:	e792      	b.n	801f8e4 <_printf_float+0x200>
 801f9be:	002a      	movs	r2, r5
 801f9c0:	2301      	movs	r3, #1
 801f9c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f9c8:	321a      	adds	r2, #26
 801f9ca:	47a0      	blx	r4
 801f9cc:	3001      	adds	r0, #1
 801f9ce:	d100      	bne.n	801f9d2 <_printf_float+0x2ee>
 801f9d0:	e6e4      	b.n	801f79c <_printf_float+0xb8>
 801f9d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9d4:	3301      	adds	r3, #1
 801f9d6:	e7ea      	b.n	801f9ae <_printf_float+0x2ca>
 801f9d8:	7fefffff 	.word	0x7fefffff
 801f9dc:	08025ea1 	.word	0x08025ea1
 801f9e0:	08025ea5 	.word	0x08025ea5
 801f9e4:	08025ea9 	.word	0x08025ea9
 801f9e8:	08025ead 	.word	0x08025ead
 801f9ec:	08025eb1 	.word	0x08025eb1
 801f9f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f9f2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f9f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9f6:	429e      	cmp	r6, r3
 801f9f8:	dd00      	ble.n	801f9fc <_printf_float+0x318>
 801f9fa:	001e      	movs	r6, r3
 801f9fc:	2e00      	cmp	r6, #0
 801f9fe:	dc31      	bgt.n	801fa64 <_printf_float+0x380>
 801fa00:	43f3      	mvns	r3, r6
 801fa02:	2400      	movs	r4, #0
 801fa04:	17db      	asrs	r3, r3, #31
 801fa06:	4033      	ands	r3, r6
 801fa08:	930e      	str	r3, [sp, #56]	@ 0x38
 801fa0a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fa0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa0e:	1af3      	subs	r3, r6, r3
 801fa10:	42a3      	cmp	r3, r4
 801fa12:	dc30      	bgt.n	801fa76 <_printf_float+0x392>
 801fa14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa18:	429a      	cmp	r2, r3
 801fa1a:	dc38      	bgt.n	801fa8e <_printf_float+0x3aa>
 801fa1c:	682b      	ldr	r3, [r5, #0]
 801fa1e:	07db      	lsls	r3, r3, #31
 801fa20:	d435      	bmi.n	801fa8e <_printf_float+0x3aa>
 801fa22:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa28:	1b9b      	subs	r3, r3, r6
 801fa2a:	1b14      	subs	r4, r2, r4
 801fa2c:	429c      	cmp	r4, r3
 801fa2e:	dd00      	ble.n	801fa32 <_printf_float+0x34e>
 801fa30:	001c      	movs	r4, r3
 801fa32:	2c00      	cmp	r4, #0
 801fa34:	dc34      	bgt.n	801faa0 <_printf_float+0x3bc>
 801fa36:	43e3      	mvns	r3, r4
 801fa38:	2600      	movs	r6, #0
 801fa3a:	17db      	asrs	r3, r3, #31
 801fa3c:	401c      	ands	r4, r3
 801fa3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa42:	1ad3      	subs	r3, r2, r3
 801fa44:	1b1b      	subs	r3, r3, r4
 801fa46:	42b3      	cmp	r3, r6
 801fa48:	dc00      	bgt.n	801fa4c <_printf_float+0x368>
 801fa4a:	e77c      	b.n	801f946 <_printf_float+0x262>
 801fa4c:	002a      	movs	r2, r5
 801fa4e:	2301      	movs	r3, #1
 801fa50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa54:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fa56:	321a      	adds	r2, #26
 801fa58:	47b8      	blx	r7
 801fa5a:	3001      	adds	r0, #1
 801fa5c:	d100      	bne.n	801fa60 <_printf_float+0x37c>
 801fa5e:	e69d      	b.n	801f79c <_printf_float+0xb8>
 801fa60:	3601      	adds	r6, #1
 801fa62:	e7ec      	b.n	801fa3e <_printf_float+0x35a>
 801fa64:	0033      	movs	r3, r6
 801fa66:	003a      	movs	r2, r7
 801fa68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fa6e:	47a0      	blx	r4
 801fa70:	3001      	adds	r0, #1
 801fa72:	d1c5      	bne.n	801fa00 <_printf_float+0x31c>
 801fa74:	e692      	b.n	801f79c <_printf_float+0xb8>
 801fa76:	002a      	movs	r2, r5
 801fa78:	2301      	movs	r3, #1
 801fa7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa7e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fa80:	321a      	adds	r2, #26
 801fa82:	47b0      	blx	r6
 801fa84:	3001      	adds	r0, #1
 801fa86:	d100      	bne.n	801fa8a <_printf_float+0x3a6>
 801fa88:	e688      	b.n	801f79c <_printf_float+0xb8>
 801fa8a:	3401      	adds	r4, #1
 801fa8c:	e7bd      	b.n	801fa0a <_printf_float+0x326>
 801fa8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fa94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fa98:	47a0      	blx	r4
 801fa9a:	3001      	adds	r0, #1
 801fa9c:	d1c1      	bne.n	801fa22 <_printf_float+0x33e>
 801fa9e:	e67d      	b.n	801f79c <_printf_float+0xb8>
 801faa0:	19ba      	adds	r2, r7, r6
 801faa2:	0023      	movs	r3, r4
 801faa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801faa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801faa8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801faaa:	47b0      	blx	r6
 801faac:	3001      	adds	r0, #1
 801faae:	d1c2      	bne.n	801fa36 <_printf_float+0x352>
 801fab0:	e674      	b.n	801f79c <_printf_float+0xb8>
 801fab2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fab4:	930c      	str	r3, [sp, #48]	@ 0x30
 801fab6:	2b01      	cmp	r3, #1
 801fab8:	dc02      	bgt.n	801fac0 <_printf_float+0x3dc>
 801faba:	2301      	movs	r3, #1
 801fabc:	421a      	tst	r2, r3
 801fabe:	d039      	beq.n	801fb34 <_printf_float+0x450>
 801fac0:	2301      	movs	r3, #1
 801fac2:	003a      	movs	r2, r7
 801fac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fac8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801faca:	47b0      	blx	r6
 801facc:	3001      	adds	r0, #1
 801face:	d100      	bne.n	801fad2 <_printf_float+0x3ee>
 801fad0:	e664      	b.n	801f79c <_printf_float+0xb8>
 801fad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fad4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fad6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fad8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fada:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fadc:	47b0      	blx	r6
 801fade:	3001      	adds	r0, #1
 801fae0:	d100      	bne.n	801fae4 <_printf_float+0x400>
 801fae2:	e65b      	b.n	801f79c <_printf_float+0xb8>
 801fae4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fae6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801faea:	2200      	movs	r2, #0
 801faec:	3b01      	subs	r3, #1
 801faee:	930c      	str	r3, [sp, #48]	@ 0x30
 801faf0:	2300      	movs	r3, #0
 801faf2:	f7e0 fcdd 	bl	80004b0 <__aeabi_dcmpeq>
 801faf6:	2800      	cmp	r0, #0
 801faf8:	d11a      	bne.n	801fb30 <_printf_float+0x44c>
 801fafa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fafc:	1c7a      	adds	r2, r7, #1
 801fafe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb02:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb04:	47b0      	blx	r6
 801fb06:	3001      	adds	r0, #1
 801fb08:	d10e      	bne.n	801fb28 <_printf_float+0x444>
 801fb0a:	e647      	b.n	801f79c <_printf_float+0xb8>
 801fb0c:	002a      	movs	r2, r5
 801fb0e:	2301      	movs	r3, #1
 801fb10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fb16:	321a      	adds	r2, #26
 801fb18:	47b8      	blx	r7
 801fb1a:	3001      	adds	r0, #1
 801fb1c:	d100      	bne.n	801fb20 <_printf_float+0x43c>
 801fb1e:	e63d      	b.n	801f79c <_printf_float+0xb8>
 801fb20:	3601      	adds	r6, #1
 801fb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb24:	429e      	cmp	r6, r3
 801fb26:	dbf1      	blt.n	801fb0c <_printf_float+0x428>
 801fb28:	002a      	movs	r2, r5
 801fb2a:	0023      	movs	r3, r4
 801fb2c:	3250      	adds	r2, #80	@ 0x50
 801fb2e:	e6da      	b.n	801f8e6 <_printf_float+0x202>
 801fb30:	2600      	movs	r6, #0
 801fb32:	e7f6      	b.n	801fb22 <_printf_float+0x43e>
 801fb34:	003a      	movs	r2, r7
 801fb36:	e7e2      	b.n	801fafe <_printf_float+0x41a>
 801fb38:	002a      	movs	r2, r5
 801fb3a:	2301      	movs	r3, #1
 801fb3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fb3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fb40:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fb42:	3219      	adds	r2, #25
 801fb44:	47b0      	blx	r6
 801fb46:	3001      	adds	r0, #1
 801fb48:	d100      	bne.n	801fb4c <_printf_float+0x468>
 801fb4a:	e627      	b.n	801f79c <_printf_float+0xb8>
 801fb4c:	3401      	adds	r4, #1
 801fb4e:	68eb      	ldr	r3, [r5, #12]
 801fb50:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fb52:	1a9b      	subs	r3, r3, r2
 801fb54:	42a3      	cmp	r3, r4
 801fb56:	dcef      	bgt.n	801fb38 <_printf_float+0x454>
 801fb58:	e6f9      	b.n	801f94e <_printf_float+0x26a>
 801fb5a:	2400      	movs	r4, #0
 801fb5c:	e7f7      	b.n	801fb4e <_printf_float+0x46a>
 801fb5e:	46c0      	nop			@ (mov r8, r8)

0801fb60 <_printf_common>:
 801fb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fb62:	0016      	movs	r6, r2
 801fb64:	9301      	str	r3, [sp, #4]
 801fb66:	688a      	ldr	r2, [r1, #8]
 801fb68:	690b      	ldr	r3, [r1, #16]
 801fb6a:	000c      	movs	r4, r1
 801fb6c:	9000      	str	r0, [sp, #0]
 801fb6e:	4293      	cmp	r3, r2
 801fb70:	da00      	bge.n	801fb74 <_printf_common+0x14>
 801fb72:	0013      	movs	r3, r2
 801fb74:	0022      	movs	r2, r4
 801fb76:	6033      	str	r3, [r6, #0]
 801fb78:	3243      	adds	r2, #67	@ 0x43
 801fb7a:	7812      	ldrb	r2, [r2, #0]
 801fb7c:	2a00      	cmp	r2, #0
 801fb7e:	d001      	beq.n	801fb84 <_printf_common+0x24>
 801fb80:	3301      	adds	r3, #1
 801fb82:	6033      	str	r3, [r6, #0]
 801fb84:	6823      	ldr	r3, [r4, #0]
 801fb86:	069b      	lsls	r3, r3, #26
 801fb88:	d502      	bpl.n	801fb90 <_printf_common+0x30>
 801fb8a:	6833      	ldr	r3, [r6, #0]
 801fb8c:	3302      	adds	r3, #2
 801fb8e:	6033      	str	r3, [r6, #0]
 801fb90:	6822      	ldr	r2, [r4, #0]
 801fb92:	2306      	movs	r3, #6
 801fb94:	0015      	movs	r5, r2
 801fb96:	401d      	ands	r5, r3
 801fb98:	421a      	tst	r2, r3
 801fb9a:	d027      	beq.n	801fbec <_printf_common+0x8c>
 801fb9c:	0023      	movs	r3, r4
 801fb9e:	3343      	adds	r3, #67	@ 0x43
 801fba0:	781b      	ldrb	r3, [r3, #0]
 801fba2:	1e5a      	subs	r2, r3, #1
 801fba4:	4193      	sbcs	r3, r2
 801fba6:	6822      	ldr	r2, [r4, #0]
 801fba8:	0692      	lsls	r2, r2, #26
 801fbaa:	d430      	bmi.n	801fc0e <_printf_common+0xae>
 801fbac:	0022      	movs	r2, r4
 801fbae:	9901      	ldr	r1, [sp, #4]
 801fbb0:	9800      	ldr	r0, [sp, #0]
 801fbb2:	9d08      	ldr	r5, [sp, #32]
 801fbb4:	3243      	adds	r2, #67	@ 0x43
 801fbb6:	47a8      	blx	r5
 801fbb8:	3001      	adds	r0, #1
 801fbba:	d025      	beq.n	801fc08 <_printf_common+0xa8>
 801fbbc:	2206      	movs	r2, #6
 801fbbe:	6823      	ldr	r3, [r4, #0]
 801fbc0:	2500      	movs	r5, #0
 801fbc2:	4013      	ands	r3, r2
 801fbc4:	2b04      	cmp	r3, #4
 801fbc6:	d105      	bne.n	801fbd4 <_printf_common+0x74>
 801fbc8:	6833      	ldr	r3, [r6, #0]
 801fbca:	68e5      	ldr	r5, [r4, #12]
 801fbcc:	1aed      	subs	r5, r5, r3
 801fbce:	43eb      	mvns	r3, r5
 801fbd0:	17db      	asrs	r3, r3, #31
 801fbd2:	401d      	ands	r5, r3
 801fbd4:	68a3      	ldr	r3, [r4, #8]
 801fbd6:	6922      	ldr	r2, [r4, #16]
 801fbd8:	4293      	cmp	r3, r2
 801fbda:	dd01      	ble.n	801fbe0 <_printf_common+0x80>
 801fbdc:	1a9b      	subs	r3, r3, r2
 801fbde:	18ed      	adds	r5, r5, r3
 801fbe0:	2600      	movs	r6, #0
 801fbe2:	42b5      	cmp	r5, r6
 801fbe4:	d120      	bne.n	801fc28 <_printf_common+0xc8>
 801fbe6:	2000      	movs	r0, #0
 801fbe8:	e010      	b.n	801fc0c <_printf_common+0xac>
 801fbea:	3501      	adds	r5, #1
 801fbec:	68e3      	ldr	r3, [r4, #12]
 801fbee:	6832      	ldr	r2, [r6, #0]
 801fbf0:	1a9b      	subs	r3, r3, r2
 801fbf2:	42ab      	cmp	r3, r5
 801fbf4:	ddd2      	ble.n	801fb9c <_printf_common+0x3c>
 801fbf6:	0022      	movs	r2, r4
 801fbf8:	2301      	movs	r3, #1
 801fbfa:	9901      	ldr	r1, [sp, #4]
 801fbfc:	9800      	ldr	r0, [sp, #0]
 801fbfe:	9f08      	ldr	r7, [sp, #32]
 801fc00:	3219      	adds	r2, #25
 801fc02:	47b8      	blx	r7
 801fc04:	3001      	adds	r0, #1
 801fc06:	d1f0      	bne.n	801fbea <_printf_common+0x8a>
 801fc08:	2001      	movs	r0, #1
 801fc0a:	4240      	negs	r0, r0
 801fc0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fc0e:	2030      	movs	r0, #48	@ 0x30
 801fc10:	18e1      	adds	r1, r4, r3
 801fc12:	3143      	adds	r1, #67	@ 0x43
 801fc14:	7008      	strb	r0, [r1, #0]
 801fc16:	0021      	movs	r1, r4
 801fc18:	1c5a      	adds	r2, r3, #1
 801fc1a:	3145      	adds	r1, #69	@ 0x45
 801fc1c:	7809      	ldrb	r1, [r1, #0]
 801fc1e:	18a2      	adds	r2, r4, r2
 801fc20:	3243      	adds	r2, #67	@ 0x43
 801fc22:	3302      	adds	r3, #2
 801fc24:	7011      	strb	r1, [r2, #0]
 801fc26:	e7c1      	b.n	801fbac <_printf_common+0x4c>
 801fc28:	0022      	movs	r2, r4
 801fc2a:	2301      	movs	r3, #1
 801fc2c:	9901      	ldr	r1, [sp, #4]
 801fc2e:	9800      	ldr	r0, [sp, #0]
 801fc30:	9f08      	ldr	r7, [sp, #32]
 801fc32:	321a      	adds	r2, #26
 801fc34:	47b8      	blx	r7
 801fc36:	3001      	adds	r0, #1
 801fc38:	d0e6      	beq.n	801fc08 <_printf_common+0xa8>
 801fc3a:	3601      	adds	r6, #1
 801fc3c:	e7d1      	b.n	801fbe2 <_printf_common+0x82>
	...

0801fc40 <_printf_i>:
 801fc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc42:	b08b      	sub	sp, #44	@ 0x2c
 801fc44:	9206      	str	r2, [sp, #24]
 801fc46:	000a      	movs	r2, r1
 801fc48:	3243      	adds	r2, #67	@ 0x43
 801fc4a:	9307      	str	r3, [sp, #28]
 801fc4c:	9005      	str	r0, [sp, #20]
 801fc4e:	9203      	str	r2, [sp, #12]
 801fc50:	7e0a      	ldrb	r2, [r1, #24]
 801fc52:	000c      	movs	r4, r1
 801fc54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc56:	2a78      	cmp	r2, #120	@ 0x78
 801fc58:	d809      	bhi.n	801fc6e <_printf_i+0x2e>
 801fc5a:	2a62      	cmp	r2, #98	@ 0x62
 801fc5c:	d80b      	bhi.n	801fc76 <_printf_i+0x36>
 801fc5e:	2a00      	cmp	r2, #0
 801fc60:	d100      	bne.n	801fc64 <_printf_i+0x24>
 801fc62:	e0bc      	b.n	801fdde <_printf_i+0x19e>
 801fc64:	497b      	ldr	r1, [pc, #492]	@ (801fe54 <_printf_i+0x214>)
 801fc66:	9104      	str	r1, [sp, #16]
 801fc68:	2a58      	cmp	r2, #88	@ 0x58
 801fc6a:	d100      	bne.n	801fc6e <_printf_i+0x2e>
 801fc6c:	e090      	b.n	801fd90 <_printf_i+0x150>
 801fc6e:	0025      	movs	r5, r4
 801fc70:	3542      	adds	r5, #66	@ 0x42
 801fc72:	702a      	strb	r2, [r5, #0]
 801fc74:	e022      	b.n	801fcbc <_printf_i+0x7c>
 801fc76:	0010      	movs	r0, r2
 801fc78:	3863      	subs	r0, #99	@ 0x63
 801fc7a:	2815      	cmp	r0, #21
 801fc7c:	d8f7      	bhi.n	801fc6e <_printf_i+0x2e>
 801fc7e:	f7e0 fa87 	bl	8000190 <__gnu_thumb1_case_shi>
 801fc82:	0016      	.short	0x0016
 801fc84:	fff6001f 	.word	0xfff6001f
 801fc88:	fff6fff6 	.word	0xfff6fff6
 801fc8c:	001ffff6 	.word	0x001ffff6
 801fc90:	fff6fff6 	.word	0xfff6fff6
 801fc94:	fff6fff6 	.word	0xfff6fff6
 801fc98:	003600a1 	.word	0x003600a1
 801fc9c:	fff60080 	.word	0xfff60080
 801fca0:	00b2fff6 	.word	0x00b2fff6
 801fca4:	0036fff6 	.word	0x0036fff6
 801fca8:	fff6fff6 	.word	0xfff6fff6
 801fcac:	0084      	.short	0x0084
 801fcae:	0025      	movs	r5, r4
 801fcb0:	681a      	ldr	r2, [r3, #0]
 801fcb2:	3542      	adds	r5, #66	@ 0x42
 801fcb4:	1d11      	adds	r1, r2, #4
 801fcb6:	6019      	str	r1, [r3, #0]
 801fcb8:	6813      	ldr	r3, [r2, #0]
 801fcba:	702b      	strb	r3, [r5, #0]
 801fcbc:	2301      	movs	r3, #1
 801fcbe:	e0a0      	b.n	801fe02 <_printf_i+0x1c2>
 801fcc0:	6818      	ldr	r0, [r3, #0]
 801fcc2:	6809      	ldr	r1, [r1, #0]
 801fcc4:	1d02      	adds	r2, r0, #4
 801fcc6:	060d      	lsls	r5, r1, #24
 801fcc8:	d50b      	bpl.n	801fce2 <_printf_i+0xa2>
 801fcca:	6806      	ldr	r6, [r0, #0]
 801fccc:	601a      	str	r2, [r3, #0]
 801fcce:	2e00      	cmp	r6, #0
 801fcd0:	da03      	bge.n	801fcda <_printf_i+0x9a>
 801fcd2:	232d      	movs	r3, #45	@ 0x2d
 801fcd4:	9a03      	ldr	r2, [sp, #12]
 801fcd6:	4276      	negs	r6, r6
 801fcd8:	7013      	strb	r3, [r2, #0]
 801fcda:	4b5e      	ldr	r3, [pc, #376]	@ (801fe54 <_printf_i+0x214>)
 801fcdc:	270a      	movs	r7, #10
 801fcde:	9304      	str	r3, [sp, #16]
 801fce0:	e018      	b.n	801fd14 <_printf_i+0xd4>
 801fce2:	6806      	ldr	r6, [r0, #0]
 801fce4:	601a      	str	r2, [r3, #0]
 801fce6:	0649      	lsls	r1, r1, #25
 801fce8:	d5f1      	bpl.n	801fcce <_printf_i+0x8e>
 801fcea:	b236      	sxth	r6, r6
 801fcec:	e7ef      	b.n	801fcce <_printf_i+0x8e>
 801fcee:	6808      	ldr	r0, [r1, #0]
 801fcf0:	6819      	ldr	r1, [r3, #0]
 801fcf2:	c940      	ldmia	r1!, {r6}
 801fcf4:	0605      	lsls	r5, r0, #24
 801fcf6:	d402      	bmi.n	801fcfe <_printf_i+0xbe>
 801fcf8:	0640      	lsls	r0, r0, #25
 801fcfa:	d500      	bpl.n	801fcfe <_printf_i+0xbe>
 801fcfc:	b2b6      	uxth	r6, r6
 801fcfe:	6019      	str	r1, [r3, #0]
 801fd00:	4b54      	ldr	r3, [pc, #336]	@ (801fe54 <_printf_i+0x214>)
 801fd02:	270a      	movs	r7, #10
 801fd04:	9304      	str	r3, [sp, #16]
 801fd06:	2a6f      	cmp	r2, #111	@ 0x6f
 801fd08:	d100      	bne.n	801fd0c <_printf_i+0xcc>
 801fd0a:	3f02      	subs	r7, #2
 801fd0c:	0023      	movs	r3, r4
 801fd0e:	2200      	movs	r2, #0
 801fd10:	3343      	adds	r3, #67	@ 0x43
 801fd12:	701a      	strb	r2, [r3, #0]
 801fd14:	6863      	ldr	r3, [r4, #4]
 801fd16:	60a3      	str	r3, [r4, #8]
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	db03      	blt.n	801fd24 <_printf_i+0xe4>
 801fd1c:	2104      	movs	r1, #4
 801fd1e:	6822      	ldr	r2, [r4, #0]
 801fd20:	438a      	bics	r2, r1
 801fd22:	6022      	str	r2, [r4, #0]
 801fd24:	2e00      	cmp	r6, #0
 801fd26:	d102      	bne.n	801fd2e <_printf_i+0xee>
 801fd28:	9d03      	ldr	r5, [sp, #12]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d00c      	beq.n	801fd48 <_printf_i+0x108>
 801fd2e:	9d03      	ldr	r5, [sp, #12]
 801fd30:	0030      	movs	r0, r6
 801fd32:	0039      	movs	r1, r7
 801fd34:	f7e0 fabc 	bl	80002b0 <__aeabi_uidivmod>
 801fd38:	9b04      	ldr	r3, [sp, #16]
 801fd3a:	3d01      	subs	r5, #1
 801fd3c:	5c5b      	ldrb	r3, [r3, r1]
 801fd3e:	702b      	strb	r3, [r5, #0]
 801fd40:	0033      	movs	r3, r6
 801fd42:	0006      	movs	r6, r0
 801fd44:	429f      	cmp	r7, r3
 801fd46:	d9f3      	bls.n	801fd30 <_printf_i+0xf0>
 801fd48:	2f08      	cmp	r7, #8
 801fd4a:	d109      	bne.n	801fd60 <_printf_i+0x120>
 801fd4c:	6823      	ldr	r3, [r4, #0]
 801fd4e:	07db      	lsls	r3, r3, #31
 801fd50:	d506      	bpl.n	801fd60 <_printf_i+0x120>
 801fd52:	6862      	ldr	r2, [r4, #4]
 801fd54:	6923      	ldr	r3, [r4, #16]
 801fd56:	429a      	cmp	r2, r3
 801fd58:	dc02      	bgt.n	801fd60 <_printf_i+0x120>
 801fd5a:	2330      	movs	r3, #48	@ 0x30
 801fd5c:	3d01      	subs	r5, #1
 801fd5e:	702b      	strb	r3, [r5, #0]
 801fd60:	9b03      	ldr	r3, [sp, #12]
 801fd62:	1b5b      	subs	r3, r3, r5
 801fd64:	6123      	str	r3, [r4, #16]
 801fd66:	9b07      	ldr	r3, [sp, #28]
 801fd68:	0021      	movs	r1, r4
 801fd6a:	9300      	str	r3, [sp, #0]
 801fd6c:	9805      	ldr	r0, [sp, #20]
 801fd6e:	9b06      	ldr	r3, [sp, #24]
 801fd70:	aa09      	add	r2, sp, #36	@ 0x24
 801fd72:	f7ff fef5 	bl	801fb60 <_printf_common>
 801fd76:	3001      	adds	r0, #1
 801fd78:	d148      	bne.n	801fe0c <_printf_i+0x1cc>
 801fd7a:	2001      	movs	r0, #1
 801fd7c:	4240      	negs	r0, r0
 801fd7e:	b00b      	add	sp, #44	@ 0x2c
 801fd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd82:	2220      	movs	r2, #32
 801fd84:	6809      	ldr	r1, [r1, #0]
 801fd86:	430a      	orrs	r2, r1
 801fd88:	6022      	str	r2, [r4, #0]
 801fd8a:	2278      	movs	r2, #120	@ 0x78
 801fd8c:	4932      	ldr	r1, [pc, #200]	@ (801fe58 <_printf_i+0x218>)
 801fd8e:	9104      	str	r1, [sp, #16]
 801fd90:	0021      	movs	r1, r4
 801fd92:	3145      	adds	r1, #69	@ 0x45
 801fd94:	700a      	strb	r2, [r1, #0]
 801fd96:	6819      	ldr	r1, [r3, #0]
 801fd98:	6822      	ldr	r2, [r4, #0]
 801fd9a:	c940      	ldmia	r1!, {r6}
 801fd9c:	0610      	lsls	r0, r2, #24
 801fd9e:	d402      	bmi.n	801fda6 <_printf_i+0x166>
 801fda0:	0650      	lsls	r0, r2, #25
 801fda2:	d500      	bpl.n	801fda6 <_printf_i+0x166>
 801fda4:	b2b6      	uxth	r6, r6
 801fda6:	6019      	str	r1, [r3, #0]
 801fda8:	07d3      	lsls	r3, r2, #31
 801fdaa:	d502      	bpl.n	801fdb2 <_printf_i+0x172>
 801fdac:	2320      	movs	r3, #32
 801fdae:	4313      	orrs	r3, r2
 801fdb0:	6023      	str	r3, [r4, #0]
 801fdb2:	2e00      	cmp	r6, #0
 801fdb4:	d001      	beq.n	801fdba <_printf_i+0x17a>
 801fdb6:	2710      	movs	r7, #16
 801fdb8:	e7a8      	b.n	801fd0c <_printf_i+0xcc>
 801fdba:	2220      	movs	r2, #32
 801fdbc:	6823      	ldr	r3, [r4, #0]
 801fdbe:	4393      	bics	r3, r2
 801fdc0:	6023      	str	r3, [r4, #0]
 801fdc2:	e7f8      	b.n	801fdb6 <_printf_i+0x176>
 801fdc4:	681a      	ldr	r2, [r3, #0]
 801fdc6:	680d      	ldr	r5, [r1, #0]
 801fdc8:	1d10      	adds	r0, r2, #4
 801fdca:	6949      	ldr	r1, [r1, #20]
 801fdcc:	6018      	str	r0, [r3, #0]
 801fdce:	6813      	ldr	r3, [r2, #0]
 801fdd0:	062e      	lsls	r6, r5, #24
 801fdd2:	d501      	bpl.n	801fdd8 <_printf_i+0x198>
 801fdd4:	6019      	str	r1, [r3, #0]
 801fdd6:	e002      	b.n	801fdde <_printf_i+0x19e>
 801fdd8:	066d      	lsls	r5, r5, #25
 801fdda:	d5fb      	bpl.n	801fdd4 <_printf_i+0x194>
 801fddc:	8019      	strh	r1, [r3, #0]
 801fdde:	2300      	movs	r3, #0
 801fde0:	9d03      	ldr	r5, [sp, #12]
 801fde2:	6123      	str	r3, [r4, #16]
 801fde4:	e7bf      	b.n	801fd66 <_printf_i+0x126>
 801fde6:	681a      	ldr	r2, [r3, #0]
 801fde8:	1d11      	adds	r1, r2, #4
 801fdea:	6019      	str	r1, [r3, #0]
 801fdec:	6815      	ldr	r5, [r2, #0]
 801fdee:	2100      	movs	r1, #0
 801fdf0:	0028      	movs	r0, r5
 801fdf2:	6862      	ldr	r2, [r4, #4]
 801fdf4:	f000 fb7b 	bl	80204ee <memchr>
 801fdf8:	2800      	cmp	r0, #0
 801fdfa:	d001      	beq.n	801fe00 <_printf_i+0x1c0>
 801fdfc:	1b40      	subs	r0, r0, r5
 801fdfe:	6060      	str	r0, [r4, #4]
 801fe00:	6863      	ldr	r3, [r4, #4]
 801fe02:	6123      	str	r3, [r4, #16]
 801fe04:	2300      	movs	r3, #0
 801fe06:	9a03      	ldr	r2, [sp, #12]
 801fe08:	7013      	strb	r3, [r2, #0]
 801fe0a:	e7ac      	b.n	801fd66 <_printf_i+0x126>
 801fe0c:	002a      	movs	r2, r5
 801fe0e:	6923      	ldr	r3, [r4, #16]
 801fe10:	9906      	ldr	r1, [sp, #24]
 801fe12:	9805      	ldr	r0, [sp, #20]
 801fe14:	9d07      	ldr	r5, [sp, #28]
 801fe16:	47a8      	blx	r5
 801fe18:	3001      	adds	r0, #1
 801fe1a:	d0ae      	beq.n	801fd7a <_printf_i+0x13a>
 801fe1c:	6823      	ldr	r3, [r4, #0]
 801fe1e:	079b      	lsls	r3, r3, #30
 801fe20:	d415      	bmi.n	801fe4e <_printf_i+0x20e>
 801fe22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe24:	68e0      	ldr	r0, [r4, #12]
 801fe26:	4298      	cmp	r0, r3
 801fe28:	daa9      	bge.n	801fd7e <_printf_i+0x13e>
 801fe2a:	0018      	movs	r0, r3
 801fe2c:	e7a7      	b.n	801fd7e <_printf_i+0x13e>
 801fe2e:	0022      	movs	r2, r4
 801fe30:	2301      	movs	r3, #1
 801fe32:	9906      	ldr	r1, [sp, #24]
 801fe34:	9805      	ldr	r0, [sp, #20]
 801fe36:	9e07      	ldr	r6, [sp, #28]
 801fe38:	3219      	adds	r2, #25
 801fe3a:	47b0      	blx	r6
 801fe3c:	3001      	adds	r0, #1
 801fe3e:	d09c      	beq.n	801fd7a <_printf_i+0x13a>
 801fe40:	3501      	adds	r5, #1
 801fe42:	68e3      	ldr	r3, [r4, #12]
 801fe44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe46:	1a9b      	subs	r3, r3, r2
 801fe48:	42ab      	cmp	r3, r5
 801fe4a:	dcf0      	bgt.n	801fe2e <_printf_i+0x1ee>
 801fe4c:	e7e9      	b.n	801fe22 <_printf_i+0x1e2>
 801fe4e:	2500      	movs	r5, #0
 801fe50:	e7f7      	b.n	801fe42 <_printf_i+0x202>
 801fe52:	46c0      	nop			@ (mov r8, r8)
 801fe54:	08025eb3 	.word	0x08025eb3
 801fe58:	08025ec4 	.word	0x08025ec4

0801fe5c <std>:
 801fe5c:	2300      	movs	r3, #0
 801fe5e:	b510      	push	{r4, lr}
 801fe60:	0004      	movs	r4, r0
 801fe62:	6003      	str	r3, [r0, #0]
 801fe64:	6043      	str	r3, [r0, #4]
 801fe66:	6083      	str	r3, [r0, #8]
 801fe68:	8181      	strh	r1, [r0, #12]
 801fe6a:	6643      	str	r3, [r0, #100]	@ 0x64
 801fe6c:	81c2      	strh	r2, [r0, #14]
 801fe6e:	6103      	str	r3, [r0, #16]
 801fe70:	6143      	str	r3, [r0, #20]
 801fe72:	6183      	str	r3, [r0, #24]
 801fe74:	0019      	movs	r1, r3
 801fe76:	2208      	movs	r2, #8
 801fe78:	305c      	adds	r0, #92	@ 0x5c
 801fe7a:	f000 fa67 	bl	802034c <memset>
 801fe7e:	4b0b      	ldr	r3, [pc, #44]	@ (801feac <std+0x50>)
 801fe80:	6224      	str	r4, [r4, #32]
 801fe82:	6263      	str	r3, [r4, #36]	@ 0x24
 801fe84:	4b0a      	ldr	r3, [pc, #40]	@ (801feb0 <std+0x54>)
 801fe86:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fe88:	4b0a      	ldr	r3, [pc, #40]	@ (801feb4 <std+0x58>)
 801fe8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fe8c:	4b0a      	ldr	r3, [pc, #40]	@ (801feb8 <std+0x5c>)
 801fe8e:	6323      	str	r3, [r4, #48]	@ 0x30
 801fe90:	4b0a      	ldr	r3, [pc, #40]	@ (801febc <std+0x60>)
 801fe92:	429c      	cmp	r4, r3
 801fe94:	d005      	beq.n	801fea2 <std+0x46>
 801fe96:	4b0a      	ldr	r3, [pc, #40]	@ (801fec0 <std+0x64>)
 801fe98:	429c      	cmp	r4, r3
 801fe9a:	d002      	beq.n	801fea2 <std+0x46>
 801fe9c:	4b09      	ldr	r3, [pc, #36]	@ (801fec4 <std+0x68>)
 801fe9e:	429c      	cmp	r4, r3
 801fea0:	d103      	bne.n	801feaa <std+0x4e>
 801fea2:	0020      	movs	r0, r4
 801fea4:	3058      	adds	r0, #88	@ 0x58
 801fea6:	f000 fb1f 	bl	80204e8 <__retarget_lock_init_recursive>
 801feaa:	bd10      	pop	{r4, pc}
 801feac:	08020105 	.word	0x08020105
 801feb0:	0802012d 	.word	0x0802012d
 801feb4:	08020165 	.word	0x08020165
 801feb8:	08020191 	.word	0x08020191
 801febc:	20003680 	.word	0x20003680
 801fec0:	200036e8 	.word	0x200036e8
 801fec4:	20003750 	.word	0x20003750

0801fec8 <stdio_exit_handler>:
 801fec8:	b510      	push	{r4, lr}
 801feca:	4a03      	ldr	r2, [pc, #12]	@ (801fed8 <stdio_exit_handler+0x10>)
 801fecc:	4903      	ldr	r1, [pc, #12]	@ (801fedc <stdio_exit_handler+0x14>)
 801fece:	4804      	ldr	r0, [pc, #16]	@ (801fee0 <stdio_exit_handler+0x18>)
 801fed0:	f000 f86c 	bl	801ffac <_fwalk_sglue>
 801fed4:	bd10      	pop	{r4, pc}
 801fed6:	46c0      	nop			@ (mov r8, r8)
 801fed8:	20000258 	.word	0x20000258
 801fedc:	08022b0d 	.word	0x08022b0d
 801fee0:	200003d4 	.word	0x200003d4

0801fee4 <cleanup_stdio>:
 801fee4:	6841      	ldr	r1, [r0, #4]
 801fee6:	4b0b      	ldr	r3, [pc, #44]	@ (801ff14 <cleanup_stdio+0x30>)
 801fee8:	b510      	push	{r4, lr}
 801feea:	0004      	movs	r4, r0
 801feec:	4299      	cmp	r1, r3
 801feee:	d001      	beq.n	801fef4 <cleanup_stdio+0x10>
 801fef0:	f002 fe0c 	bl	8022b0c <_fflush_r>
 801fef4:	68a1      	ldr	r1, [r4, #8]
 801fef6:	4b08      	ldr	r3, [pc, #32]	@ (801ff18 <cleanup_stdio+0x34>)
 801fef8:	4299      	cmp	r1, r3
 801fefa:	d002      	beq.n	801ff02 <cleanup_stdio+0x1e>
 801fefc:	0020      	movs	r0, r4
 801fefe:	f002 fe05 	bl	8022b0c <_fflush_r>
 801ff02:	68e1      	ldr	r1, [r4, #12]
 801ff04:	4b05      	ldr	r3, [pc, #20]	@ (801ff1c <cleanup_stdio+0x38>)
 801ff06:	4299      	cmp	r1, r3
 801ff08:	d002      	beq.n	801ff10 <cleanup_stdio+0x2c>
 801ff0a:	0020      	movs	r0, r4
 801ff0c:	f002 fdfe 	bl	8022b0c <_fflush_r>
 801ff10:	bd10      	pop	{r4, pc}
 801ff12:	46c0      	nop			@ (mov r8, r8)
 801ff14:	20003680 	.word	0x20003680
 801ff18:	200036e8 	.word	0x200036e8
 801ff1c:	20003750 	.word	0x20003750

0801ff20 <global_stdio_init.part.0>:
 801ff20:	b510      	push	{r4, lr}
 801ff22:	4b09      	ldr	r3, [pc, #36]	@ (801ff48 <global_stdio_init.part.0+0x28>)
 801ff24:	4a09      	ldr	r2, [pc, #36]	@ (801ff4c <global_stdio_init.part.0+0x2c>)
 801ff26:	2104      	movs	r1, #4
 801ff28:	601a      	str	r2, [r3, #0]
 801ff2a:	4809      	ldr	r0, [pc, #36]	@ (801ff50 <global_stdio_init.part.0+0x30>)
 801ff2c:	2200      	movs	r2, #0
 801ff2e:	f7ff ff95 	bl	801fe5c <std>
 801ff32:	2201      	movs	r2, #1
 801ff34:	2109      	movs	r1, #9
 801ff36:	4807      	ldr	r0, [pc, #28]	@ (801ff54 <global_stdio_init.part.0+0x34>)
 801ff38:	f7ff ff90 	bl	801fe5c <std>
 801ff3c:	2202      	movs	r2, #2
 801ff3e:	2112      	movs	r1, #18
 801ff40:	4805      	ldr	r0, [pc, #20]	@ (801ff58 <global_stdio_init.part.0+0x38>)
 801ff42:	f7ff ff8b 	bl	801fe5c <std>
 801ff46:	bd10      	pop	{r4, pc}
 801ff48:	200037b8 	.word	0x200037b8
 801ff4c:	0801fec9 	.word	0x0801fec9
 801ff50:	20003680 	.word	0x20003680
 801ff54:	200036e8 	.word	0x200036e8
 801ff58:	20003750 	.word	0x20003750

0801ff5c <__sfp_lock_acquire>:
 801ff5c:	b510      	push	{r4, lr}
 801ff5e:	4802      	ldr	r0, [pc, #8]	@ (801ff68 <__sfp_lock_acquire+0xc>)
 801ff60:	f000 fac3 	bl	80204ea <__retarget_lock_acquire_recursive>
 801ff64:	bd10      	pop	{r4, pc}
 801ff66:	46c0      	nop			@ (mov r8, r8)
 801ff68:	200037c1 	.word	0x200037c1

0801ff6c <__sfp_lock_release>:
 801ff6c:	b510      	push	{r4, lr}
 801ff6e:	4802      	ldr	r0, [pc, #8]	@ (801ff78 <__sfp_lock_release+0xc>)
 801ff70:	f000 fabc 	bl	80204ec <__retarget_lock_release_recursive>
 801ff74:	bd10      	pop	{r4, pc}
 801ff76:	46c0      	nop			@ (mov r8, r8)
 801ff78:	200037c1 	.word	0x200037c1

0801ff7c <__sinit>:
 801ff7c:	b510      	push	{r4, lr}
 801ff7e:	0004      	movs	r4, r0
 801ff80:	f7ff ffec 	bl	801ff5c <__sfp_lock_acquire>
 801ff84:	6a23      	ldr	r3, [r4, #32]
 801ff86:	2b00      	cmp	r3, #0
 801ff88:	d002      	beq.n	801ff90 <__sinit+0x14>
 801ff8a:	f7ff ffef 	bl	801ff6c <__sfp_lock_release>
 801ff8e:	bd10      	pop	{r4, pc}
 801ff90:	4b04      	ldr	r3, [pc, #16]	@ (801ffa4 <__sinit+0x28>)
 801ff92:	6223      	str	r3, [r4, #32]
 801ff94:	4b04      	ldr	r3, [pc, #16]	@ (801ffa8 <__sinit+0x2c>)
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	d1f6      	bne.n	801ff8a <__sinit+0xe>
 801ff9c:	f7ff ffc0 	bl	801ff20 <global_stdio_init.part.0>
 801ffa0:	e7f3      	b.n	801ff8a <__sinit+0xe>
 801ffa2:	46c0      	nop			@ (mov r8, r8)
 801ffa4:	0801fee5 	.word	0x0801fee5
 801ffa8:	200037b8 	.word	0x200037b8

0801ffac <_fwalk_sglue>:
 801ffac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ffae:	0014      	movs	r4, r2
 801ffb0:	2600      	movs	r6, #0
 801ffb2:	9000      	str	r0, [sp, #0]
 801ffb4:	9101      	str	r1, [sp, #4]
 801ffb6:	68a5      	ldr	r5, [r4, #8]
 801ffb8:	6867      	ldr	r7, [r4, #4]
 801ffba:	3f01      	subs	r7, #1
 801ffbc:	d504      	bpl.n	801ffc8 <_fwalk_sglue+0x1c>
 801ffbe:	6824      	ldr	r4, [r4, #0]
 801ffc0:	2c00      	cmp	r4, #0
 801ffc2:	d1f8      	bne.n	801ffb6 <_fwalk_sglue+0xa>
 801ffc4:	0030      	movs	r0, r6
 801ffc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ffc8:	89ab      	ldrh	r3, [r5, #12]
 801ffca:	2b01      	cmp	r3, #1
 801ffcc:	d908      	bls.n	801ffe0 <_fwalk_sglue+0x34>
 801ffce:	220e      	movs	r2, #14
 801ffd0:	5eab      	ldrsh	r3, [r5, r2]
 801ffd2:	3301      	adds	r3, #1
 801ffd4:	d004      	beq.n	801ffe0 <_fwalk_sglue+0x34>
 801ffd6:	0029      	movs	r1, r5
 801ffd8:	9800      	ldr	r0, [sp, #0]
 801ffda:	9b01      	ldr	r3, [sp, #4]
 801ffdc:	4798      	blx	r3
 801ffde:	4306      	orrs	r6, r0
 801ffe0:	3568      	adds	r5, #104	@ 0x68
 801ffe2:	e7ea      	b.n	801ffba <_fwalk_sglue+0xe>

0801ffe4 <iprintf>:
 801ffe4:	b40f      	push	{r0, r1, r2, r3}
 801ffe6:	b507      	push	{r0, r1, r2, lr}
 801ffe8:	4905      	ldr	r1, [pc, #20]	@ (8020000 <iprintf+0x1c>)
 801ffea:	ab04      	add	r3, sp, #16
 801ffec:	6808      	ldr	r0, [r1, #0]
 801ffee:	cb04      	ldmia	r3!, {r2}
 801fff0:	6881      	ldr	r1, [r0, #8]
 801fff2:	9301      	str	r3, [sp, #4]
 801fff4:	f002 fbe8 	bl	80227c8 <_vfiprintf_r>
 801fff8:	b003      	add	sp, #12
 801fffa:	bc08      	pop	{r3}
 801fffc:	b004      	add	sp, #16
 801fffe:	4718      	bx	r3
 8020000:	200003d0 	.word	0x200003d0

08020004 <_puts_r>:
 8020004:	6a03      	ldr	r3, [r0, #32]
 8020006:	b570      	push	{r4, r5, r6, lr}
 8020008:	0005      	movs	r5, r0
 802000a:	000e      	movs	r6, r1
 802000c:	6884      	ldr	r4, [r0, #8]
 802000e:	2b00      	cmp	r3, #0
 8020010:	d101      	bne.n	8020016 <_puts_r+0x12>
 8020012:	f7ff ffb3 	bl	801ff7c <__sinit>
 8020016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020018:	07db      	lsls	r3, r3, #31
 802001a:	d405      	bmi.n	8020028 <_puts_r+0x24>
 802001c:	89a3      	ldrh	r3, [r4, #12]
 802001e:	059b      	lsls	r3, r3, #22
 8020020:	d402      	bmi.n	8020028 <_puts_r+0x24>
 8020022:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020024:	f000 fa61 	bl	80204ea <__retarget_lock_acquire_recursive>
 8020028:	89a3      	ldrh	r3, [r4, #12]
 802002a:	071b      	lsls	r3, r3, #28
 802002c:	d502      	bpl.n	8020034 <_puts_r+0x30>
 802002e:	6923      	ldr	r3, [r4, #16]
 8020030:	2b00      	cmp	r3, #0
 8020032:	d11f      	bne.n	8020074 <_puts_r+0x70>
 8020034:	0021      	movs	r1, r4
 8020036:	0028      	movs	r0, r5
 8020038:	f000 f92a 	bl	8020290 <__swsetup_r>
 802003c:	2800      	cmp	r0, #0
 802003e:	d019      	beq.n	8020074 <_puts_r+0x70>
 8020040:	2501      	movs	r5, #1
 8020042:	426d      	negs	r5, r5
 8020044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020046:	07db      	lsls	r3, r3, #31
 8020048:	d405      	bmi.n	8020056 <_puts_r+0x52>
 802004a:	89a3      	ldrh	r3, [r4, #12]
 802004c:	059b      	lsls	r3, r3, #22
 802004e:	d402      	bmi.n	8020056 <_puts_r+0x52>
 8020050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020052:	f000 fa4b 	bl	80204ec <__retarget_lock_release_recursive>
 8020056:	0028      	movs	r0, r5
 8020058:	bd70      	pop	{r4, r5, r6, pc}
 802005a:	3601      	adds	r6, #1
 802005c:	60a3      	str	r3, [r4, #8]
 802005e:	2b00      	cmp	r3, #0
 8020060:	da04      	bge.n	802006c <_puts_r+0x68>
 8020062:	69a2      	ldr	r2, [r4, #24]
 8020064:	429a      	cmp	r2, r3
 8020066:	dc16      	bgt.n	8020096 <_puts_r+0x92>
 8020068:	290a      	cmp	r1, #10
 802006a:	d014      	beq.n	8020096 <_puts_r+0x92>
 802006c:	6823      	ldr	r3, [r4, #0]
 802006e:	1c5a      	adds	r2, r3, #1
 8020070:	6022      	str	r2, [r4, #0]
 8020072:	7019      	strb	r1, [r3, #0]
 8020074:	68a3      	ldr	r3, [r4, #8]
 8020076:	7831      	ldrb	r1, [r6, #0]
 8020078:	3b01      	subs	r3, #1
 802007a:	2900      	cmp	r1, #0
 802007c:	d1ed      	bne.n	802005a <_puts_r+0x56>
 802007e:	60a3      	str	r3, [r4, #8]
 8020080:	2b00      	cmp	r3, #0
 8020082:	da0f      	bge.n	80200a4 <_puts_r+0xa0>
 8020084:	0022      	movs	r2, r4
 8020086:	0028      	movs	r0, r5
 8020088:	310a      	adds	r1, #10
 802008a:	f000 f8bf 	bl	802020c <__swbuf_r>
 802008e:	3001      	adds	r0, #1
 8020090:	d0d6      	beq.n	8020040 <_puts_r+0x3c>
 8020092:	250a      	movs	r5, #10
 8020094:	e7d6      	b.n	8020044 <_puts_r+0x40>
 8020096:	0022      	movs	r2, r4
 8020098:	0028      	movs	r0, r5
 802009a:	f000 f8b7 	bl	802020c <__swbuf_r>
 802009e:	3001      	adds	r0, #1
 80200a0:	d1e8      	bne.n	8020074 <_puts_r+0x70>
 80200a2:	e7cd      	b.n	8020040 <_puts_r+0x3c>
 80200a4:	6823      	ldr	r3, [r4, #0]
 80200a6:	1c5a      	adds	r2, r3, #1
 80200a8:	6022      	str	r2, [r4, #0]
 80200aa:	220a      	movs	r2, #10
 80200ac:	701a      	strb	r2, [r3, #0]
 80200ae:	e7f0      	b.n	8020092 <_puts_r+0x8e>

080200b0 <puts>:
 80200b0:	b510      	push	{r4, lr}
 80200b2:	4b03      	ldr	r3, [pc, #12]	@ (80200c0 <puts+0x10>)
 80200b4:	0001      	movs	r1, r0
 80200b6:	6818      	ldr	r0, [r3, #0]
 80200b8:	f7ff ffa4 	bl	8020004 <_puts_r>
 80200bc:	bd10      	pop	{r4, pc}
 80200be:	46c0      	nop			@ (mov r8, r8)
 80200c0:	200003d0 	.word	0x200003d0

080200c4 <siprintf>:
 80200c4:	b40e      	push	{r1, r2, r3}
 80200c6:	b500      	push	{lr}
 80200c8:	490b      	ldr	r1, [pc, #44]	@ (80200f8 <siprintf+0x34>)
 80200ca:	b09c      	sub	sp, #112	@ 0x70
 80200cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80200ce:	9002      	str	r0, [sp, #8]
 80200d0:	9006      	str	r0, [sp, #24]
 80200d2:	9107      	str	r1, [sp, #28]
 80200d4:	9104      	str	r1, [sp, #16]
 80200d6:	4809      	ldr	r0, [pc, #36]	@ (80200fc <siprintf+0x38>)
 80200d8:	4909      	ldr	r1, [pc, #36]	@ (8020100 <siprintf+0x3c>)
 80200da:	cb04      	ldmia	r3!, {r2}
 80200dc:	9105      	str	r1, [sp, #20]
 80200de:	6800      	ldr	r0, [r0, #0]
 80200e0:	a902      	add	r1, sp, #8
 80200e2:	9301      	str	r3, [sp, #4]
 80200e4:	f002 fa4a 	bl	802257c <_svfiprintf_r>
 80200e8:	2200      	movs	r2, #0
 80200ea:	9b02      	ldr	r3, [sp, #8]
 80200ec:	701a      	strb	r2, [r3, #0]
 80200ee:	b01c      	add	sp, #112	@ 0x70
 80200f0:	bc08      	pop	{r3}
 80200f2:	b003      	add	sp, #12
 80200f4:	4718      	bx	r3
 80200f6:	46c0      	nop			@ (mov r8, r8)
 80200f8:	7fffffff 	.word	0x7fffffff
 80200fc:	200003d0 	.word	0x200003d0
 8020100:	ffff0208 	.word	0xffff0208

08020104 <__sread>:
 8020104:	b570      	push	{r4, r5, r6, lr}
 8020106:	000c      	movs	r4, r1
 8020108:	250e      	movs	r5, #14
 802010a:	5f49      	ldrsh	r1, [r1, r5]
 802010c:	f000 f99a 	bl	8020444 <_read_r>
 8020110:	2800      	cmp	r0, #0
 8020112:	db03      	blt.n	802011c <__sread+0x18>
 8020114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8020116:	181b      	adds	r3, r3, r0
 8020118:	6563      	str	r3, [r4, #84]	@ 0x54
 802011a:	bd70      	pop	{r4, r5, r6, pc}
 802011c:	89a3      	ldrh	r3, [r4, #12]
 802011e:	4a02      	ldr	r2, [pc, #8]	@ (8020128 <__sread+0x24>)
 8020120:	4013      	ands	r3, r2
 8020122:	81a3      	strh	r3, [r4, #12]
 8020124:	e7f9      	b.n	802011a <__sread+0x16>
 8020126:	46c0      	nop			@ (mov r8, r8)
 8020128:	ffffefff 	.word	0xffffefff

0802012c <__swrite>:
 802012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802012e:	001f      	movs	r7, r3
 8020130:	898b      	ldrh	r3, [r1, #12]
 8020132:	0005      	movs	r5, r0
 8020134:	000c      	movs	r4, r1
 8020136:	0016      	movs	r6, r2
 8020138:	05db      	lsls	r3, r3, #23
 802013a:	d505      	bpl.n	8020148 <__swrite+0x1c>
 802013c:	230e      	movs	r3, #14
 802013e:	5ec9      	ldrsh	r1, [r1, r3]
 8020140:	2200      	movs	r2, #0
 8020142:	2302      	movs	r3, #2
 8020144:	f000 f96a 	bl	802041c <_lseek_r>
 8020148:	89a3      	ldrh	r3, [r4, #12]
 802014a:	4a05      	ldr	r2, [pc, #20]	@ (8020160 <__swrite+0x34>)
 802014c:	0028      	movs	r0, r5
 802014e:	4013      	ands	r3, r2
 8020150:	81a3      	strh	r3, [r4, #12]
 8020152:	0032      	movs	r2, r6
 8020154:	230e      	movs	r3, #14
 8020156:	5ee1      	ldrsh	r1, [r4, r3]
 8020158:	003b      	movs	r3, r7
 802015a:	f000 f987 	bl	802046c <_write_r>
 802015e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020160:	ffffefff 	.word	0xffffefff

08020164 <__sseek>:
 8020164:	b570      	push	{r4, r5, r6, lr}
 8020166:	000c      	movs	r4, r1
 8020168:	250e      	movs	r5, #14
 802016a:	5f49      	ldrsh	r1, [r1, r5]
 802016c:	f000 f956 	bl	802041c <_lseek_r>
 8020170:	89a3      	ldrh	r3, [r4, #12]
 8020172:	1c42      	adds	r2, r0, #1
 8020174:	d103      	bne.n	802017e <__sseek+0x1a>
 8020176:	4a05      	ldr	r2, [pc, #20]	@ (802018c <__sseek+0x28>)
 8020178:	4013      	ands	r3, r2
 802017a:	81a3      	strh	r3, [r4, #12]
 802017c:	bd70      	pop	{r4, r5, r6, pc}
 802017e:	2280      	movs	r2, #128	@ 0x80
 8020180:	0152      	lsls	r2, r2, #5
 8020182:	4313      	orrs	r3, r2
 8020184:	81a3      	strh	r3, [r4, #12]
 8020186:	6560      	str	r0, [r4, #84]	@ 0x54
 8020188:	e7f8      	b.n	802017c <__sseek+0x18>
 802018a:	46c0      	nop			@ (mov r8, r8)
 802018c:	ffffefff 	.word	0xffffefff

08020190 <__sclose>:
 8020190:	b510      	push	{r4, lr}
 8020192:	230e      	movs	r3, #14
 8020194:	5ec9      	ldrsh	r1, [r1, r3]
 8020196:	f000 f92f 	bl	80203f8 <_close_r>
 802019a:	bd10      	pop	{r4, pc}

0802019c <_vsniprintf_r>:
 802019c:	b530      	push	{r4, r5, lr}
 802019e:	0014      	movs	r4, r2
 80201a0:	0005      	movs	r5, r0
 80201a2:	001a      	movs	r2, r3
 80201a4:	b09b      	sub	sp, #108	@ 0x6c
 80201a6:	2c00      	cmp	r4, #0
 80201a8:	da05      	bge.n	80201b6 <_vsniprintf_r+0x1a>
 80201aa:	238b      	movs	r3, #139	@ 0x8b
 80201ac:	6003      	str	r3, [r0, #0]
 80201ae:	2001      	movs	r0, #1
 80201b0:	4240      	negs	r0, r0
 80201b2:	b01b      	add	sp, #108	@ 0x6c
 80201b4:	bd30      	pop	{r4, r5, pc}
 80201b6:	2382      	movs	r3, #130	@ 0x82
 80201b8:	4668      	mov	r0, sp
 80201ba:	009b      	lsls	r3, r3, #2
 80201bc:	8183      	strh	r3, [r0, #12]
 80201be:	2300      	movs	r3, #0
 80201c0:	9100      	str	r1, [sp, #0]
 80201c2:	9104      	str	r1, [sp, #16]
 80201c4:	429c      	cmp	r4, r3
 80201c6:	d000      	beq.n	80201ca <_vsniprintf_r+0x2e>
 80201c8:	1e63      	subs	r3, r4, #1
 80201ca:	9302      	str	r3, [sp, #8]
 80201cc:	9305      	str	r3, [sp, #20]
 80201ce:	2301      	movs	r3, #1
 80201d0:	4669      	mov	r1, sp
 80201d2:	425b      	negs	r3, r3
 80201d4:	81cb      	strh	r3, [r1, #14]
 80201d6:	0028      	movs	r0, r5
 80201d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201da:	f002 f9cf 	bl	802257c <_svfiprintf_r>
 80201de:	1c43      	adds	r3, r0, #1
 80201e0:	da01      	bge.n	80201e6 <_vsniprintf_r+0x4a>
 80201e2:	238b      	movs	r3, #139	@ 0x8b
 80201e4:	602b      	str	r3, [r5, #0]
 80201e6:	2c00      	cmp	r4, #0
 80201e8:	d0e3      	beq.n	80201b2 <_vsniprintf_r+0x16>
 80201ea:	2200      	movs	r2, #0
 80201ec:	9b00      	ldr	r3, [sp, #0]
 80201ee:	701a      	strb	r2, [r3, #0]
 80201f0:	e7df      	b.n	80201b2 <_vsniprintf_r+0x16>
	...

080201f4 <vsniprintf>:
 80201f4:	b513      	push	{r0, r1, r4, lr}
 80201f6:	4c04      	ldr	r4, [pc, #16]	@ (8020208 <vsniprintf+0x14>)
 80201f8:	9300      	str	r3, [sp, #0]
 80201fa:	0013      	movs	r3, r2
 80201fc:	000a      	movs	r2, r1
 80201fe:	0001      	movs	r1, r0
 8020200:	6820      	ldr	r0, [r4, #0]
 8020202:	f7ff ffcb 	bl	802019c <_vsniprintf_r>
 8020206:	bd16      	pop	{r1, r2, r4, pc}
 8020208:	200003d0 	.word	0x200003d0

0802020c <__swbuf_r>:
 802020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802020e:	0006      	movs	r6, r0
 8020210:	000d      	movs	r5, r1
 8020212:	0014      	movs	r4, r2
 8020214:	2800      	cmp	r0, #0
 8020216:	d004      	beq.n	8020222 <__swbuf_r+0x16>
 8020218:	6a03      	ldr	r3, [r0, #32]
 802021a:	2b00      	cmp	r3, #0
 802021c:	d101      	bne.n	8020222 <__swbuf_r+0x16>
 802021e:	f7ff fead 	bl	801ff7c <__sinit>
 8020222:	69a3      	ldr	r3, [r4, #24]
 8020224:	60a3      	str	r3, [r4, #8]
 8020226:	89a3      	ldrh	r3, [r4, #12]
 8020228:	071b      	lsls	r3, r3, #28
 802022a:	d502      	bpl.n	8020232 <__swbuf_r+0x26>
 802022c:	6923      	ldr	r3, [r4, #16]
 802022e:	2b00      	cmp	r3, #0
 8020230:	d109      	bne.n	8020246 <__swbuf_r+0x3a>
 8020232:	0021      	movs	r1, r4
 8020234:	0030      	movs	r0, r6
 8020236:	f000 f82b 	bl	8020290 <__swsetup_r>
 802023a:	2800      	cmp	r0, #0
 802023c:	d003      	beq.n	8020246 <__swbuf_r+0x3a>
 802023e:	2501      	movs	r5, #1
 8020240:	426d      	negs	r5, r5
 8020242:	0028      	movs	r0, r5
 8020244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020246:	6923      	ldr	r3, [r4, #16]
 8020248:	6820      	ldr	r0, [r4, #0]
 802024a:	b2ef      	uxtb	r7, r5
 802024c:	1ac0      	subs	r0, r0, r3
 802024e:	6963      	ldr	r3, [r4, #20]
 8020250:	b2ed      	uxtb	r5, r5
 8020252:	4283      	cmp	r3, r0
 8020254:	dc05      	bgt.n	8020262 <__swbuf_r+0x56>
 8020256:	0021      	movs	r1, r4
 8020258:	0030      	movs	r0, r6
 802025a:	f002 fc57 	bl	8022b0c <_fflush_r>
 802025e:	2800      	cmp	r0, #0
 8020260:	d1ed      	bne.n	802023e <__swbuf_r+0x32>
 8020262:	68a3      	ldr	r3, [r4, #8]
 8020264:	3001      	adds	r0, #1
 8020266:	3b01      	subs	r3, #1
 8020268:	60a3      	str	r3, [r4, #8]
 802026a:	6823      	ldr	r3, [r4, #0]
 802026c:	1c5a      	adds	r2, r3, #1
 802026e:	6022      	str	r2, [r4, #0]
 8020270:	701f      	strb	r7, [r3, #0]
 8020272:	6963      	ldr	r3, [r4, #20]
 8020274:	4283      	cmp	r3, r0
 8020276:	d004      	beq.n	8020282 <__swbuf_r+0x76>
 8020278:	89a3      	ldrh	r3, [r4, #12]
 802027a:	07db      	lsls	r3, r3, #31
 802027c:	d5e1      	bpl.n	8020242 <__swbuf_r+0x36>
 802027e:	2d0a      	cmp	r5, #10
 8020280:	d1df      	bne.n	8020242 <__swbuf_r+0x36>
 8020282:	0021      	movs	r1, r4
 8020284:	0030      	movs	r0, r6
 8020286:	f002 fc41 	bl	8022b0c <_fflush_r>
 802028a:	2800      	cmp	r0, #0
 802028c:	d0d9      	beq.n	8020242 <__swbuf_r+0x36>
 802028e:	e7d6      	b.n	802023e <__swbuf_r+0x32>

08020290 <__swsetup_r>:
 8020290:	4b2d      	ldr	r3, [pc, #180]	@ (8020348 <__swsetup_r+0xb8>)
 8020292:	b570      	push	{r4, r5, r6, lr}
 8020294:	0005      	movs	r5, r0
 8020296:	6818      	ldr	r0, [r3, #0]
 8020298:	000c      	movs	r4, r1
 802029a:	2800      	cmp	r0, #0
 802029c:	d004      	beq.n	80202a8 <__swsetup_r+0x18>
 802029e:	6a03      	ldr	r3, [r0, #32]
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d101      	bne.n	80202a8 <__swsetup_r+0x18>
 80202a4:	f7ff fe6a 	bl	801ff7c <__sinit>
 80202a8:	230c      	movs	r3, #12
 80202aa:	5ee2      	ldrsh	r2, [r4, r3]
 80202ac:	0713      	lsls	r3, r2, #28
 80202ae:	d423      	bmi.n	80202f8 <__swsetup_r+0x68>
 80202b0:	06d3      	lsls	r3, r2, #27
 80202b2:	d407      	bmi.n	80202c4 <__swsetup_r+0x34>
 80202b4:	2309      	movs	r3, #9
 80202b6:	602b      	str	r3, [r5, #0]
 80202b8:	2340      	movs	r3, #64	@ 0x40
 80202ba:	2001      	movs	r0, #1
 80202bc:	4313      	orrs	r3, r2
 80202be:	81a3      	strh	r3, [r4, #12]
 80202c0:	4240      	negs	r0, r0
 80202c2:	e03a      	b.n	802033a <__swsetup_r+0xaa>
 80202c4:	0752      	lsls	r2, r2, #29
 80202c6:	d513      	bpl.n	80202f0 <__swsetup_r+0x60>
 80202c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80202ca:	2900      	cmp	r1, #0
 80202cc:	d008      	beq.n	80202e0 <__swsetup_r+0x50>
 80202ce:	0023      	movs	r3, r4
 80202d0:	3344      	adds	r3, #68	@ 0x44
 80202d2:	4299      	cmp	r1, r3
 80202d4:	d002      	beq.n	80202dc <__swsetup_r+0x4c>
 80202d6:	0028      	movs	r0, r5
 80202d8:	f000 ffa6 	bl	8021228 <_free_r>
 80202dc:	2300      	movs	r3, #0
 80202de:	6363      	str	r3, [r4, #52]	@ 0x34
 80202e0:	2224      	movs	r2, #36	@ 0x24
 80202e2:	89a3      	ldrh	r3, [r4, #12]
 80202e4:	4393      	bics	r3, r2
 80202e6:	81a3      	strh	r3, [r4, #12]
 80202e8:	2300      	movs	r3, #0
 80202ea:	6063      	str	r3, [r4, #4]
 80202ec:	6923      	ldr	r3, [r4, #16]
 80202ee:	6023      	str	r3, [r4, #0]
 80202f0:	2308      	movs	r3, #8
 80202f2:	89a2      	ldrh	r2, [r4, #12]
 80202f4:	4313      	orrs	r3, r2
 80202f6:	81a3      	strh	r3, [r4, #12]
 80202f8:	6923      	ldr	r3, [r4, #16]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d10b      	bne.n	8020316 <__swsetup_r+0x86>
 80202fe:	21a0      	movs	r1, #160	@ 0xa0
 8020300:	2280      	movs	r2, #128	@ 0x80
 8020302:	89a3      	ldrh	r3, [r4, #12]
 8020304:	0089      	lsls	r1, r1, #2
 8020306:	0092      	lsls	r2, r2, #2
 8020308:	400b      	ands	r3, r1
 802030a:	4293      	cmp	r3, r2
 802030c:	d003      	beq.n	8020316 <__swsetup_r+0x86>
 802030e:	0021      	movs	r1, r4
 8020310:	0028      	movs	r0, r5
 8020312:	f002 fc51 	bl	8022bb8 <__smakebuf_r>
 8020316:	230c      	movs	r3, #12
 8020318:	5ee2      	ldrsh	r2, [r4, r3]
 802031a:	2101      	movs	r1, #1
 802031c:	0013      	movs	r3, r2
 802031e:	400b      	ands	r3, r1
 8020320:	420a      	tst	r2, r1
 8020322:	d00b      	beq.n	802033c <__swsetup_r+0xac>
 8020324:	2300      	movs	r3, #0
 8020326:	60a3      	str	r3, [r4, #8]
 8020328:	6963      	ldr	r3, [r4, #20]
 802032a:	425b      	negs	r3, r3
 802032c:	61a3      	str	r3, [r4, #24]
 802032e:	2000      	movs	r0, #0
 8020330:	6923      	ldr	r3, [r4, #16]
 8020332:	4283      	cmp	r3, r0
 8020334:	d101      	bne.n	802033a <__swsetup_r+0xaa>
 8020336:	0613      	lsls	r3, r2, #24
 8020338:	d4be      	bmi.n	80202b8 <__swsetup_r+0x28>
 802033a:	bd70      	pop	{r4, r5, r6, pc}
 802033c:	0791      	lsls	r1, r2, #30
 802033e:	d400      	bmi.n	8020342 <__swsetup_r+0xb2>
 8020340:	6963      	ldr	r3, [r4, #20]
 8020342:	60a3      	str	r3, [r4, #8]
 8020344:	e7f3      	b.n	802032e <__swsetup_r+0x9e>
 8020346:	46c0      	nop			@ (mov r8, r8)
 8020348:	200003d0 	.word	0x200003d0

0802034c <memset>:
 802034c:	0003      	movs	r3, r0
 802034e:	1882      	adds	r2, r0, r2
 8020350:	4293      	cmp	r3, r2
 8020352:	d100      	bne.n	8020356 <memset+0xa>
 8020354:	4770      	bx	lr
 8020356:	7019      	strb	r1, [r3, #0]
 8020358:	3301      	adds	r3, #1
 802035a:	e7f9      	b.n	8020350 <memset+0x4>

0802035c <strchr>:
 802035c:	b2c9      	uxtb	r1, r1
 802035e:	7803      	ldrb	r3, [r0, #0]
 8020360:	2b00      	cmp	r3, #0
 8020362:	d004      	beq.n	802036e <strchr+0x12>
 8020364:	428b      	cmp	r3, r1
 8020366:	d100      	bne.n	802036a <strchr+0xe>
 8020368:	4770      	bx	lr
 802036a:	3001      	adds	r0, #1
 802036c:	e7f7      	b.n	802035e <strchr+0x2>
 802036e:	424b      	negs	r3, r1
 8020370:	4159      	adcs	r1, r3
 8020372:	4249      	negs	r1, r1
 8020374:	4008      	ands	r0, r1
 8020376:	e7f7      	b.n	8020368 <strchr+0xc>

08020378 <strncmp>:
 8020378:	b530      	push	{r4, r5, lr}
 802037a:	0005      	movs	r5, r0
 802037c:	1e10      	subs	r0, r2, #0
 802037e:	d00b      	beq.n	8020398 <strncmp+0x20>
 8020380:	2400      	movs	r4, #0
 8020382:	3a01      	subs	r2, #1
 8020384:	5d2b      	ldrb	r3, [r5, r4]
 8020386:	5d08      	ldrb	r0, [r1, r4]
 8020388:	4283      	cmp	r3, r0
 802038a:	d104      	bne.n	8020396 <strncmp+0x1e>
 802038c:	42a2      	cmp	r2, r4
 802038e:	d002      	beq.n	8020396 <strncmp+0x1e>
 8020390:	3401      	adds	r4, #1
 8020392:	2b00      	cmp	r3, #0
 8020394:	d1f6      	bne.n	8020384 <strncmp+0xc>
 8020396:	1a18      	subs	r0, r3, r0
 8020398:	bd30      	pop	{r4, r5, pc}

0802039a <strncpy>:
 802039a:	0003      	movs	r3, r0
 802039c:	b530      	push	{r4, r5, lr}
 802039e:	001d      	movs	r5, r3
 80203a0:	2a00      	cmp	r2, #0
 80203a2:	d006      	beq.n	80203b2 <strncpy+0x18>
 80203a4:	780c      	ldrb	r4, [r1, #0]
 80203a6:	3a01      	subs	r2, #1
 80203a8:	3301      	adds	r3, #1
 80203aa:	702c      	strb	r4, [r5, #0]
 80203ac:	3101      	adds	r1, #1
 80203ae:	2c00      	cmp	r4, #0
 80203b0:	d1f5      	bne.n	802039e <strncpy+0x4>
 80203b2:	2100      	movs	r1, #0
 80203b4:	189a      	adds	r2, r3, r2
 80203b6:	4293      	cmp	r3, r2
 80203b8:	d100      	bne.n	80203bc <strncpy+0x22>
 80203ba:	bd30      	pop	{r4, r5, pc}
 80203bc:	7019      	strb	r1, [r3, #0]
 80203be:	3301      	adds	r3, #1
 80203c0:	e7f9      	b.n	80203b6 <strncpy+0x1c>

080203c2 <strstr>:
 80203c2:	780a      	ldrb	r2, [r1, #0]
 80203c4:	b530      	push	{r4, r5, lr}
 80203c6:	2a00      	cmp	r2, #0
 80203c8:	d10c      	bne.n	80203e4 <strstr+0x22>
 80203ca:	bd30      	pop	{r4, r5, pc}
 80203cc:	429a      	cmp	r2, r3
 80203ce:	d108      	bne.n	80203e2 <strstr+0x20>
 80203d0:	2301      	movs	r3, #1
 80203d2:	5ccc      	ldrb	r4, [r1, r3]
 80203d4:	2c00      	cmp	r4, #0
 80203d6:	d0f8      	beq.n	80203ca <strstr+0x8>
 80203d8:	5cc5      	ldrb	r5, [r0, r3]
 80203da:	42a5      	cmp	r5, r4
 80203dc:	d101      	bne.n	80203e2 <strstr+0x20>
 80203de:	3301      	adds	r3, #1
 80203e0:	e7f7      	b.n	80203d2 <strstr+0x10>
 80203e2:	3001      	adds	r0, #1
 80203e4:	7803      	ldrb	r3, [r0, #0]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d1f0      	bne.n	80203cc <strstr+0xa>
 80203ea:	0018      	movs	r0, r3
 80203ec:	e7ed      	b.n	80203ca <strstr+0x8>
	...

080203f0 <_localeconv_r>:
 80203f0:	4800      	ldr	r0, [pc, #0]	@ (80203f4 <_localeconv_r+0x4>)
 80203f2:	4770      	bx	lr
 80203f4:	20000354 	.word	0x20000354

080203f8 <_close_r>:
 80203f8:	2300      	movs	r3, #0
 80203fa:	b570      	push	{r4, r5, r6, lr}
 80203fc:	4d06      	ldr	r5, [pc, #24]	@ (8020418 <_close_r+0x20>)
 80203fe:	0004      	movs	r4, r0
 8020400:	0008      	movs	r0, r1
 8020402:	602b      	str	r3, [r5, #0]
 8020404:	f7ed fca8 	bl	800dd58 <_close>
 8020408:	1c43      	adds	r3, r0, #1
 802040a:	d103      	bne.n	8020414 <_close_r+0x1c>
 802040c:	682b      	ldr	r3, [r5, #0]
 802040e:	2b00      	cmp	r3, #0
 8020410:	d000      	beq.n	8020414 <_close_r+0x1c>
 8020412:	6023      	str	r3, [r4, #0]
 8020414:	bd70      	pop	{r4, r5, r6, pc}
 8020416:	46c0      	nop			@ (mov r8, r8)
 8020418:	200037bc 	.word	0x200037bc

0802041c <_lseek_r>:
 802041c:	b570      	push	{r4, r5, r6, lr}
 802041e:	0004      	movs	r4, r0
 8020420:	0008      	movs	r0, r1
 8020422:	0011      	movs	r1, r2
 8020424:	001a      	movs	r2, r3
 8020426:	2300      	movs	r3, #0
 8020428:	4d05      	ldr	r5, [pc, #20]	@ (8020440 <_lseek_r+0x24>)
 802042a:	602b      	str	r3, [r5, #0]
 802042c:	f7ed fcb5 	bl	800dd9a <_lseek>
 8020430:	1c43      	adds	r3, r0, #1
 8020432:	d103      	bne.n	802043c <_lseek_r+0x20>
 8020434:	682b      	ldr	r3, [r5, #0]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d000      	beq.n	802043c <_lseek_r+0x20>
 802043a:	6023      	str	r3, [r4, #0]
 802043c:	bd70      	pop	{r4, r5, r6, pc}
 802043e:	46c0      	nop			@ (mov r8, r8)
 8020440:	200037bc 	.word	0x200037bc

08020444 <_read_r>:
 8020444:	b570      	push	{r4, r5, r6, lr}
 8020446:	0004      	movs	r4, r0
 8020448:	0008      	movs	r0, r1
 802044a:	0011      	movs	r1, r2
 802044c:	001a      	movs	r2, r3
 802044e:	2300      	movs	r3, #0
 8020450:	4d05      	ldr	r5, [pc, #20]	@ (8020468 <_read_r+0x24>)
 8020452:	602b      	str	r3, [r5, #0]
 8020454:	f7ed fc63 	bl	800dd1e <_read>
 8020458:	1c43      	adds	r3, r0, #1
 802045a:	d103      	bne.n	8020464 <_read_r+0x20>
 802045c:	682b      	ldr	r3, [r5, #0]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d000      	beq.n	8020464 <_read_r+0x20>
 8020462:	6023      	str	r3, [r4, #0]
 8020464:	bd70      	pop	{r4, r5, r6, pc}
 8020466:	46c0      	nop			@ (mov r8, r8)
 8020468:	200037bc 	.word	0x200037bc

0802046c <_write_r>:
 802046c:	b570      	push	{r4, r5, r6, lr}
 802046e:	0004      	movs	r4, r0
 8020470:	0008      	movs	r0, r1
 8020472:	0011      	movs	r1, r2
 8020474:	001a      	movs	r2, r3
 8020476:	2300      	movs	r3, #0
 8020478:	4d05      	ldr	r5, [pc, #20]	@ (8020490 <_write_r+0x24>)
 802047a:	602b      	str	r3, [r5, #0]
 802047c:	f7ee f924 	bl	800e6c8 <_write>
 8020480:	1c43      	adds	r3, r0, #1
 8020482:	d103      	bne.n	802048c <_write_r+0x20>
 8020484:	682b      	ldr	r3, [r5, #0]
 8020486:	2b00      	cmp	r3, #0
 8020488:	d000      	beq.n	802048c <_write_r+0x20>
 802048a:	6023      	str	r3, [r4, #0]
 802048c:	bd70      	pop	{r4, r5, r6, pc}
 802048e:	46c0      	nop			@ (mov r8, r8)
 8020490:	200037bc 	.word	0x200037bc

08020494 <__errno>:
 8020494:	4b01      	ldr	r3, [pc, #4]	@ (802049c <__errno+0x8>)
 8020496:	6818      	ldr	r0, [r3, #0]
 8020498:	4770      	bx	lr
 802049a:	46c0      	nop			@ (mov r8, r8)
 802049c:	200003d0 	.word	0x200003d0

080204a0 <__libc_init_array>:
 80204a0:	b570      	push	{r4, r5, r6, lr}
 80204a2:	2600      	movs	r6, #0
 80204a4:	4c0c      	ldr	r4, [pc, #48]	@ (80204d8 <__libc_init_array+0x38>)
 80204a6:	4d0d      	ldr	r5, [pc, #52]	@ (80204dc <__libc_init_array+0x3c>)
 80204a8:	1b64      	subs	r4, r4, r5
 80204aa:	10a4      	asrs	r4, r4, #2
 80204ac:	42a6      	cmp	r6, r4
 80204ae:	d109      	bne.n	80204c4 <__libc_init_array+0x24>
 80204b0:	2600      	movs	r6, #0
 80204b2:	f002 fee9 	bl	8023288 <_init>
 80204b6:	4c0a      	ldr	r4, [pc, #40]	@ (80204e0 <__libc_init_array+0x40>)
 80204b8:	4d0a      	ldr	r5, [pc, #40]	@ (80204e4 <__libc_init_array+0x44>)
 80204ba:	1b64      	subs	r4, r4, r5
 80204bc:	10a4      	asrs	r4, r4, #2
 80204be:	42a6      	cmp	r6, r4
 80204c0:	d105      	bne.n	80204ce <__libc_init_array+0x2e>
 80204c2:	bd70      	pop	{r4, r5, r6, pc}
 80204c4:	00b3      	lsls	r3, r6, #2
 80204c6:	58eb      	ldr	r3, [r5, r3]
 80204c8:	4798      	blx	r3
 80204ca:	3601      	adds	r6, #1
 80204cc:	e7ee      	b.n	80204ac <__libc_init_array+0xc>
 80204ce:	00b3      	lsls	r3, r6, #2
 80204d0:	58eb      	ldr	r3, [r5, r3]
 80204d2:	4798      	blx	r3
 80204d4:	3601      	adds	r6, #1
 80204d6:	e7f2      	b.n	80204be <__libc_init_array+0x1e>
 80204d8:	08026190 	.word	0x08026190
 80204dc:	08026190 	.word	0x08026190
 80204e0:	08026194 	.word	0x08026194
 80204e4:	08026190 	.word	0x08026190

080204e8 <__retarget_lock_init_recursive>:
 80204e8:	4770      	bx	lr

080204ea <__retarget_lock_acquire_recursive>:
 80204ea:	4770      	bx	lr

080204ec <__retarget_lock_release_recursive>:
 80204ec:	4770      	bx	lr

080204ee <memchr>:
 80204ee:	b2c9      	uxtb	r1, r1
 80204f0:	1882      	adds	r2, r0, r2
 80204f2:	4290      	cmp	r0, r2
 80204f4:	d101      	bne.n	80204fa <memchr+0xc>
 80204f6:	2000      	movs	r0, #0
 80204f8:	4770      	bx	lr
 80204fa:	7803      	ldrb	r3, [r0, #0]
 80204fc:	428b      	cmp	r3, r1
 80204fe:	d0fb      	beq.n	80204f8 <memchr+0xa>
 8020500:	3001      	adds	r0, #1
 8020502:	e7f6      	b.n	80204f2 <memchr+0x4>

08020504 <memcpy>:
 8020504:	2300      	movs	r3, #0
 8020506:	b510      	push	{r4, lr}
 8020508:	429a      	cmp	r2, r3
 802050a:	d100      	bne.n	802050e <memcpy+0xa>
 802050c:	bd10      	pop	{r4, pc}
 802050e:	5ccc      	ldrb	r4, [r1, r3]
 8020510:	54c4      	strb	r4, [r0, r3]
 8020512:	3301      	adds	r3, #1
 8020514:	e7f8      	b.n	8020508 <memcpy+0x4>
	...

08020518 <nan>:
 8020518:	2000      	movs	r0, #0
 802051a:	4901      	ldr	r1, [pc, #4]	@ (8020520 <nan+0x8>)
 802051c:	4770      	bx	lr
 802051e:	46c0      	nop			@ (mov r8, r8)
 8020520:	7ff80000 	.word	0x7ff80000

08020524 <quorem>:
 8020524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020526:	6902      	ldr	r2, [r0, #16]
 8020528:	690f      	ldr	r7, [r1, #16]
 802052a:	b087      	sub	sp, #28
 802052c:	0006      	movs	r6, r0
 802052e:	000b      	movs	r3, r1
 8020530:	2000      	movs	r0, #0
 8020532:	9102      	str	r1, [sp, #8]
 8020534:	42ba      	cmp	r2, r7
 8020536:	db6d      	blt.n	8020614 <quorem+0xf0>
 8020538:	3f01      	subs	r7, #1
 802053a:	00bc      	lsls	r4, r7, #2
 802053c:	3314      	adds	r3, #20
 802053e:	9305      	str	r3, [sp, #20]
 8020540:	191b      	adds	r3, r3, r4
 8020542:	9303      	str	r3, [sp, #12]
 8020544:	0033      	movs	r3, r6
 8020546:	3314      	adds	r3, #20
 8020548:	191c      	adds	r4, r3, r4
 802054a:	9301      	str	r3, [sp, #4]
 802054c:	6823      	ldr	r3, [r4, #0]
 802054e:	9304      	str	r3, [sp, #16]
 8020550:	9b03      	ldr	r3, [sp, #12]
 8020552:	9804      	ldr	r0, [sp, #16]
 8020554:	681d      	ldr	r5, [r3, #0]
 8020556:	3501      	adds	r5, #1
 8020558:	0029      	movs	r1, r5
 802055a:	f7df fe23 	bl	80001a4 <__udivsi3>
 802055e:	9b04      	ldr	r3, [sp, #16]
 8020560:	9000      	str	r0, [sp, #0]
 8020562:	42ab      	cmp	r3, r5
 8020564:	d32b      	bcc.n	80205be <quorem+0x9a>
 8020566:	9b05      	ldr	r3, [sp, #20]
 8020568:	9d01      	ldr	r5, [sp, #4]
 802056a:	469c      	mov	ip, r3
 802056c:	2300      	movs	r3, #0
 802056e:	9305      	str	r3, [sp, #20]
 8020570:	9304      	str	r3, [sp, #16]
 8020572:	4662      	mov	r2, ip
 8020574:	ca08      	ldmia	r2!, {r3}
 8020576:	6828      	ldr	r0, [r5, #0]
 8020578:	4694      	mov	ip, r2
 802057a:	9a00      	ldr	r2, [sp, #0]
 802057c:	b299      	uxth	r1, r3
 802057e:	4351      	muls	r1, r2
 8020580:	9a05      	ldr	r2, [sp, #20]
 8020582:	0c1b      	lsrs	r3, r3, #16
 8020584:	1889      	adds	r1, r1, r2
 8020586:	9a00      	ldr	r2, [sp, #0]
 8020588:	4353      	muls	r3, r2
 802058a:	0c0a      	lsrs	r2, r1, #16
 802058c:	189b      	adds	r3, r3, r2
 802058e:	0c1a      	lsrs	r2, r3, #16
 8020590:	b289      	uxth	r1, r1
 8020592:	9205      	str	r2, [sp, #20]
 8020594:	b282      	uxth	r2, r0
 8020596:	1a52      	subs	r2, r2, r1
 8020598:	9904      	ldr	r1, [sp, #16]
 802059a:	0c00      	lsrs	r0, r0, #16
 802059c:	1852      	adds	r2, r2, r1
 802059e:	b29b      	uxth	r3, r3
 80205a0:	1411      	asrs	r1, r2, #16
 80205a2:	1ac3      	subs	r3, r0, r3
 80205a4:	185b      	adds	r3, r3, r1
 80205a6:	1419      	asrs	r1, r3, #16
 80205a8:	b292      	uxth	r2, r2
 80205aa:	041b      	lsls	r3, r3, #16
 80205ac:	431a      	orrs	r2, r3
 80205ae:	9b03      	ldr	r3, [sp, #12]
 80205b0:	9104      	str	r1, [sp, #16]
 80205b2:	c504      	stmia	r5!, {r2}
 80205b4:	4563      	cmp	r3, ip
 80205b6:	d2dc      	bcs.n	8020572 <quorem+0x4e>
 80205b8:	6823      	ldr	r3, [r4, #0]
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	d030      	beq.n	8020620 <quorem+0xfc>
 80205be:	0030      	movs	r0, r6
 80205c0:	9902      	ldr	r1, [sp, #8]
 80205c2:	f001 fd7d 	bl	80220c0 <__mcmp>
 80205c6:	2800      	cmp	r0, #0
 80205c8:	db23      	blt.n	8020612 <quorem+0xee>
 80205ca:	0034      	movs	r4, r6
 80205cc:	2500      	movs	r5, #0
 80205ce:	9902      	ldr	r1, [sp, #8]
 80205d0:	3414      	adds	r4, #20
 80205d2:	3114      	adds	r1, #20
 80205d4:	6823      	ldr	r3, [r4, #0]
 80205d6:	c901      	ldmia	r1!, {r0}
 80205d8:	9302      	str	r3, [sp, #8]
 80205da:	466b      	mov	r3, sp
 80205dc:	891b      	ldrh	r3, [r3, #8]
 80205de:	b282      	uxth	r2, r0
 80205e0:	1a9a      	subs	r2, r3, r2
 80205e2:	9b02      	ldr	r3, [sp, #8]
 80205e4:	1952      	adds	r2, r2, r5
 80205e6:	0c00      	lsrs	r0, r0, #16
 80205e8:	0c1b      	lsrs	r3, r3, #16
 80205ea:	1a1b      	subs	r3, r3, r0
 80205ec:	1410      	asrs	r0, r2, #16
 80205ee:	181b      	adds	r3, r3, r0
 80205f0:	141d      	asrs	r5, r3, #16
 80205f2:	b292      	uxth	r2, r2
 80205f4:	041b      	lsls	r3, r3, #16
 80205f6:	431a      	orrs	r2, r3
 80205f8:	9b03      	ldr	r3, [sp, #12]
 80205fa:	c404      	stmia	r4!, {r2}
 80205fc:	428b      	cmp	r3, r1
 80205fe:	d2e9      	bcs.n	80205d4 <quorem+0xb0>
 8020600:	9a01      	ldr	r2, [sp, #4]
 8020602:	00bb      	lsls	r3, r7, #2
 8020604:	18d3      	adds	r3, r2, r3
 8020606:	681a      	ldr	r2, [r3, #0]
 8020608:	2a00      	cmp	r2, #0
 802060a:	d013      	beq.n	8020634 <quorem+0x110>
 802060c:	9b00      	ldr	r3, [sp, #0]
 802060e:	3301      	adds	r3, #1
 8020610:	9300      	str	r3, [sp, #0]
 8020612:	9800      	ldr	r0, [sp, #0]
 8020614:	b007      	add	sp, #28
 8020616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020618:	6823      	ldr	r3, [r4, #0]
 802061a:	2b00      	cmp	r3, #0
 802061c:	d104      	bne.n	8020628 <quorem+0x104>
 802061e:	3f01      	subs	r7, #1
 8020620:	9b01      	ldr	r3, [sp, #4]
 8020622:	3c04      	subs	r4, #4
 8020624:	42a3      	cmp	r3, r4
 8020626:	d3f7      	bcc.n	8020618 <quorem+0xf4>
 8020628:	6137      	str	r7, [r6, #16]
 802062a:	e7c8      	b.n	80205be <quorem+0x9a>
 802062c:	681a      	ldr	r2, [r3, #0]
 802062e:	2a00      	cmp	r2, #0
 8020630:	d104      	bne.n	802063c <quorem+0x118>
 8020632:	3f01      	subs	r7, #1
 8020634:	9a01      	ldr	r2, [sp, #4]
 8020636:	3b04      	subs	r3, #4
 8020638:	429a      	cmp	r2, r3
 802063a:	d3f7      	bcc.n	802062c <quorem+0x108>
 802063c:	6137      	str	r7, [r6, #16]
 802063e:	e7e5      	b.n	802060c <quorem+0xe8>

08020640 <_dtoa_r>:
 8020640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020642:	0014      	movs	r4, r2
 8020644:	001d      	movs	r5, r3
 8020646:	69c6      	ldr	r6, [r0, #28]
 8020648:	b09d      	sub	sp, #116	@ 0x74
 802064a:	940a      	str	r4, [sp, #40]	@ 0x28
 802064c:	950b      	str	r5, [sp, #44]	@ 0x2c
 802064e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020650:	9003      	str	r0, [sp, #12]
 8020652:	2e00      	cmp	r6, #0
 8020654:	d10f      	bne.n	8020676 <_dtoa_r+0x36>
 8020656:	2010      	movs	r0, #16
 8020658:	f001 f98a 	bl	8021970 <malloc>
 802065c:	9b03      	ldr	r3, [sp, #12]
 802065e:	1e02      	subs	r2, r0, #0
 8020660:	61d8      	str	r0, [r3, #28]
 8020662:	d104      	bne.n	802066e <_dtoa_r+0x2e>
 8020664:	21ef      	movs	r1, #239	@ 0xef
 8020666:	4bc7      	ldr	r3, [pc, #796]	@ (8020984 <_dtoa_r+0x344>)
 8020668:	48c7      	ldr	r0, [pc, #796]	@ (8020988 <_dtoa_r+0x348>)
 802066a:	f002 fb2f 	bl	8022ccc <__assert_func>
 802066e:	6046      	str	r6, [r0, #4]
 8020670:	6086      	str	r6, [r0, #8]
 8020672:	6006      	str	r6, [r0, #0]
 8020674:	60c6      	str	r6, [r0, #12]
 8020676:	9b03      	ldr	r3, [sp, #12]
 8020678:	69db      	ldr	r3, [r3, #28]
 802067a:	6819      	ldr	r1, [r3, #0]
 802067c:	2900      	cmp	r1, #0
 802067e:	d00b      	beq.n	8020698 <_dtoa_r+0x58>
 8020680:	685a      	ldr	r2, [r3, #4]
 8020682:	2301      	movs	r3, #1
 8020684:	4093      	lsls	r3, r2
 8020686:	604a      	str	r2, [r1, #4]
 8020688:	608b      	str	r3, [r1, #8]
 802068a:	9803      	ldr	r0, [sp, #12]
 802068c:	f001 fa82 	bl	8021b94 <_Bfree>
 8020690:	2200      	movs	r2, #0
 8020692:	9b03      	ldr	r3, [sp, #12]
 8020694:	69db      	ldr	r3, [r3, #28]
 8020696:	601a      	str	r2, [r3, #0]
 8020698:	2d00      	cmp	r5, #0
 802069a:	da1e      	bge.n	80206da <_dtoa_r+0x9a>
 802069c:	2301      	movs	r3, #1
 802069e:	603b      	str	r3, [r7, #0]
 80206a0:	006b      	lsls	r3, r5, #1
 80206a2:	085b      	lsrs	r3, r3, #1
 80206a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80206a6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80206a8:	4bb8      	ldr	r3, [pc, #736]	@ (802098c <_dtoa_r+0x34c>)
 80206aa:	4ab8      	ldr	r2, [pc, #736]	@ (802098c <_dtoa_r+0x34c>)
 80206ac:	403b      	ands	r3, r7
 80206ae:	4293      	cmp	r3, r2
 80206b0:	d116      	bne.n	80206e0 <_dtoa_r+0xa0>
 80206b2:	4bb7      	ldr	r3, [pc, #732]	@ (8020990 <_dtoa_r+0x350>)
 80206b4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80206b6:	6013      	str	r3, [r2, #0]
 80206b8:	033b      	lsls	r3, r7, #12
 80206ba:	0b1b      	lsrs	r3, r3, #12
 80206bc:	4323      	orrs	r3, r4
 80206be:	d101      	bne.n	80206c4 <_dtoa_r+0x84>
 80206c0:	f000 fd83 	bl	80211ca <_dtoa_r+0xb8a>
 80206c4:	4bb3      	ldr	r3, [pc, #716]	@ (8020994 <_dtoa_r+0x354>)
 80206c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80206c8:	9308      	str	r3, [sp, #32]
 80206ca:	2a00      	cmp	r2, #0
 80206cc:	d002      	beq.n	80206d4 <_dtoa_r+0x94>
 80206ce:	4bb2      	ldr	r3, [pc, #712]	@ (8020998 <_dtoa_r+0x358>)
 80206d0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80206d2:	6013      	str	r3, [r2, #0]
 80206d4:	9808      	ldr	r0, [sp, #32]
 80206d6:	b01d      	add	sp, #116	@ 0x74
 80206d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80206da:	2300      	movs	r3, #0
 80206dc:	603b      	str	r3, [r7, #0]
 80206de:	e7e2      	b.n	80206a6 <_dtoa_r+0x66>
 80206e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80206e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80206e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80206e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80206ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80206ec:	2200      	movs	r2, #0
 80206ee:	2300      	movs	r3, #0
 80206f0:	f7df fede 	bl	80004b0 <__aeabi_dcmpeq>
 80206f4:	1e06      	subs	r6, r0, #0
 80206f6:	d00b      	beq.n	8020710 <_dtoa_r+0xd0>
 80206f8:	2301      	movs	r3, #1
 80206fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80206fc:	6013      	str	r3, [r2, #0]
 80206fe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020700:	2b00      	cmp	r3, #0
 8020702:	d002      	beq.n	802070a <_dtoa_r+0xca>
 8020704:	4ba5      	ldr	r3, [pc, #660]	@ (802099c <_dtoa_r+0x35c>)
 8020706:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020708:	6013      	str	r3, [r2, #0]
 802070a:	4ba5      	ldr	r3, [pc, #660]	@ (80209a0 <_dtoa_r+0x360>)
 802070c:	9308      	str	r3, [sp, #32]
 802070e:	e7e1      	b.n	80206d4 <_dtoa_r+0x94>
 8020710:	ab1a      	add	r3, sp, #104	@ 0x68
 8020712:	9301      	str	r3, [sp, #4]
 8020714:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020716:	9300      	str	r3, [sp, #0]
 8020718:	9803      	ldr	r0, [sp, #12]
 802071a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802071c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802071e:	f001 fdf1 	bl	8022304 <__d2b>
 8020722:	007a      	lsls	r2, r7, #1
 8020724:	9005      	str	r0, [sp, #20]
 8020726:	0d52      	lsrs	r2, r2, #21
 8020728:	d100      	bne.n	802072c <_dtoa_r+0xec>
 802072a:	e07b      	b.n	8020824 <_dtoa_r+0x1e4>
 802072c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802072e:	9618      	str	r6, [sp, #96]	@ 0x60
 8020730:	0319      	lsls	r1, r3, #12
 8020732:	4b9c      	ldr	r3, [pc, #624]	@ (80209a4 <_dtoa_r+0x364>)
 8020734:	0b09      	lsrs	r1, r1, #12
 8020736:	430b      	orrs	r3, r1
 8020738:	499b      	ldr	r1, [pc, #620]	@ (80209a8 <_dtoa_r+0x368>)
 802073a:	1857      	adds	r7, r2, r1
 802073c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802073e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020740:	0019      	movs	r1, r3
 8020742:	2200      	movs	r2, #0
 8020744:	4b99      	ldr	r3, [pc, #612]	@ (80209ac <_dtoa_r+0x36c>)
 8020746:	f7e2 fa41 	bl	8002bcc <__aeabi_dsub>
 802074a:	4a99      	ldr	r2, [pc, #612]	@ (80209b0 <_dtoa_r+0x370>)
 802074c:	4b99      	ldr	r3, [pc, #612]	@ (80209b4 <_dtoa_r+0x374>)
 802074e:	f7e1 ff75 	bl	800263c <__aeabi_dmul>
 8020752:	4a99      	ldr	r2, [pc, #612]	@ (80209b8 <_dtoa_r+0x378>)
 8020754:	4b99      	ldr	r3, [pc, #612]	@ (80209bc <_dtoa_r+0x37c>)
 8020756:	f7e0 ffc9 	bl	80016ec <__aeabi_dadd>
 802075a:	0004      	movs	r4, r0
 802075c:	0038      	movs	r0, r7
 802075e:	000d      	movs	r5, r1
 8020760:	f7e2 fe2e 	bl	80033c0 <__aeabi_i2d>
 8020764:	4a96      	ldr	r2, [pc, #600]	@ (80209c0 <_dtoa_r+0x380>)
 8020766:	4b97      	ldr	r3, [pc, #604]	@ (80209c4 <_dtoa_r+0x384>)
 8020768:	f7e1 ff68 	bl	800263c <__aeabi_dmul>
 802076c:	0002      	movs	r2, r0
 802076e:	000b      	movs	r3, r1
 8020770:	0020      	movs	r0, r4
 8020772:	0029      	movs	r1, r5
 8020774:	f7e0 ffba 	bl	80016ec <__aeabi_dadd>
 8020778:	0004      	movs	r4, r0
 802077a:	000d      	movs	r5, r1
 802077c:	f7e2 fde4 	bl	8003348 <__aeabi_d2iz>
 8020780:	2200      	movs	r2, #0
 8020782:	9004      	str	r0, [sp, #16]
 8020784:	2300      	movs	r3, #0
 8020786:	0020      	movs	r0, r4
 8020788:	0029      	movs	r1, r5
 802078a:	f7df fe97 	bl	80004bc <__aeabi_dcmplt>
 802078e:	2800      	cmp	r0, #0
 8020790:	d00b      	beq.n	80207aa <_dtoa_r+0x16a>
 8020792:	9804      	ldr	r0, [sp, #16]
 8020794:	f7e2 fe14 	bl	80033c0 <__aeabi_i2d>
 8020798:	002b      	movs	r3, r5
 802079a:	0022      	movs	r2, r4
 802079c:	f7df fe88 	bl	80004b0 <__aeabi_dcmpeq>
 80207a0:	4243      	negs	r3, r0
 80207a2:	4158      	adcs	r0, r3
 80207a4:	9b04      	ldr	r3, [sp, #16]
 80207a6:	1a1b      	subs	r3, r3, r0
 80207a8:	9304      	str	r3, [sp, #16]
 80207aa:	2301      	movs	r3, #1
 80207ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80207ae:	9b04      	ldr	r3, [sp, #16]
 80207b0:	2b16      	cmp	r3, #22
 80207b2:	d810      	bhi.n	80207d6 <_dtoa_r+0x196>
 80207b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80207b8:	9a04      	ldr	r2, [sp, #16]
 80207ba:	4b83      	ldr	r3, [pc, #524]	@ (80209c8 <_dtoa_r+0x388>)
 80207bc:	00d2      	lsls	r2, r2, #3
 80207be:	189b      	adds	r3, r3, r2
 80207c0:	681a      	ldr	r2, [r3, #0]
 80207c2:	685b      	ldr	r3, [r3, #4]
 80207c4:	f7df fe7a 	bl	80004bc <__aeabi_dcmplt>
 80207c8:	2800      	cmp	r0, #0
 80207ca:	d047      	beq.n	802085c <_dtoa_r+0x21c>
 80207cc:	9b04      	ldr	r3, [sp, #16]
 80207ce:	3b01      	subs	r3, #1
 80207d0:	9304      	str	r3, [sp, #16]
 80207d2:	2300      	movs	r3, #0
 80207d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80207d6:	2200      	movs	r2, #0
 80207d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80207da:	9206      	str	r2, [sp, #24]
 80207dc:	1bdb      	subs	r3, r3, r7
 80207de:	1e5a      	subs	r2, r3, #1
 80207e0:	d53e      	bpl.n	8020860 <_dtoa_r+0x220>
 80207e2:	2201      	movs	r2, #1
 80207e4:	1ad3      	subs	r3, r2, r3
 80207e6:	9306      	str	r3, [sp, #24]
 80207e8:	2300      	movs	r3, #0
 80207ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80207ec:	9b04      	ldr	r3, [sp, #16]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	db38      	blt.n	8020864 <_dtoa_r+0x224>
 80207f2:	9a04      	ldr	r2, [sp, #16]
 80207f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80207f6:	4694      	mov	ip, r2
 80207f8:	4463      	add	r3, ip
 80207fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80207fc:	2300      	movs	r3, #0
 80207fe:	9214      	str	r2, [sp, #80]	@ 0x50
 8020800:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020802:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020804:	2401      	movs	r4, #1
 8020806:	2b09      	cmp	r3, #9
 8020808:	d867      	bhi.n	80208da <_dtoa_r+0x29a>
 802080a:	2b05      	cmp	r3, #5
 802080c:	dd02      	ble.n	8020814 <_dtoa_r+0x1d4>
 802080e:	2400      	movs	r4, #0
 8020810:	3b04      	subs	r3, #4
 8020812:	9322      	str	r3, [sp, #136]	@ 0x88
 8020814:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020816:	1e98      	subs	r0, r3, #2
 8020818:	2803      	cmp	r0, #3
 802081a:	d867      	bhi.n	80208ec <_dtoa_r+0x2ac>
 802081c:	f7df fcae 	bl	800017c <__gnu_thumb1_case_uqi>
 8020820:	5b383a2b 	.word	0x5b383a2b
 8020824:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020826:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020828:	18f6      	adds	r6, r6, r3
 802082a:	4b68      	ldr	r3, [pc, #416]	@ (80209cc <_dtoa_r+0x38c>)
 802082c:	18f2      	adds	r2, r6, r3
 802082e:	2a20      	cmp	r2, #32
 8020830:	dd0f      	ble.n	8020852 <_dtoa_r+0x212>
 8020832:	2340      	movs	r3, #64	@ 0x40
 8020834:	1a9b      	subs	r3, r3, r2
 8020836:	409f      	lsls	r7, r3
 8020838:	4b65      	ldr	r3, [pc, #404]	@ (80209d0 <_dtoa_r+0x390>)
 802083a:	0038      	movs	r0, r7
 802083c:	18f3      	adds	r3, r6, r3
 802083e:	40dc      	lsrs	r4, r3
 8020840:	4320      	orrs	r0, r4
 8020842:	f7e2 fdeb 	bl	800341c <__aeabi_ui2d>
 8020846:	2201      	movs	r2, #1
 8020848:	4b62      	ldr	r3, [pc, #392]	@ (80209d4 <_dtoa_r+0x394>)
 802084a:	1e77      	subs	r7, r6, #1
 802084c:	18cb      	adds	r3, r1, r3
 802084e:	9218      	str	r2, [sp, #96]	@ 0x60
 8020850:	e776      	b.n	8020740 <_dtoa_r+0x100>
 8020852:	2320      	movs	r3, #32
 8020854:	0020      	movs	r0, r4
 8020856:	1a9b      	subs	r3, r3, r2
 8020858:	4098      	lsls	r0, r3
 802085a:	e7f2      	b.n	8020842 <_dtoa_r+0x202>
 802085c:	9015      	str	r0, [sp, #84]	@ 0x54
 802085e:	e7ba      	b.n	80207d6 <_dtoa_r+0x196>
 8020860:	920d      	str	r2, [sp, #52]	@ 0x34
 8020862:	e7c3      	b.n	80207ec <_dtoa_r+0x1ac>
 8020864:	9b06      	ldr	r3, [sp, #24]
 8020866:	9a04      	ldr	r2, [sp, #16]
 8020868:	1a9b      	subs	r3, r3, r2
 802086a:	9306      	str	r3, [sp, #24]
 802086c:	4253      	negs	r3, r2
 802086e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020870:	2300      	movs	r3, #0
 8020872:	9314      	str	r3, [sp, #80]	@ 0x50
 8020874:	e7c5      	b.n	8020802 <_dtoa_r+0x1c2>
 8020876:	2300      	movs	r3, #0
 8020878:	9310      	str	r3, [sp, #64]	@ 0x40
 802087a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802087c:	930e      	str	r3, [sp, #56]	@ 0x38
 802087e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020880:	2b00      	cmp	r3, #0
 8020882:	dc13      	bgt.n	80208ac <_dtoa_r+0x26c>
 8020884:	2301      	movs	r3, #1
 8020886:	001a      	movs	r2, r3
 8020888:	930e      	str	r3, [sp, #56]	@ 0x38
 802088a:	9309      	str	r3, [sp, #36]	@ 0x24
 802088c:	9223      	str	r2, [sp, #140]	@ 0x8c
 802088e:	e00d      	b.n	80208ac <_dtoa_r+0x26c>
 8020890:	2301      	movs	r3, #1
 8020892:	e7f1      	b.n	8020878 <_dtoa_r+0x238>
 8020894:	2300      	movs	r3, #0
 8020896:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020898:	9310      	str	r3, [sp, #64]	@ 0x40
 802089a:	4694      	mov	ip, r2
 802089c:	9b04      	ldr	r3, [sp, #16]
 802089e:	4463      	add	r3, ip
 80208a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80208a2:	3301      	adds	r3, #1
 80208a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	dc00      	bgt.n	80208ac <_dtoa_r+0x26c>
 80208aa:	2301      	movs	r3, #1
 80208ac:	9a03      	ldr	r2, [sp, #12]
 80208ae:	2100      	movs	r1, #0
 80208b0:	69d0      	ldr	r0, [r2, #28]
 80208b2:	2204      	movs	r2, #4
 80208b4:	0015      	movs	r5, r2
 80208b6:	3514      	adds	r5, #20
 80208b8:	429d      	cmp	r5, r3
 80208ba:	d91b      	bls.n	80208f4 <_dtoa_r+0x2b4>
 80208bc:	6041      	str	r1, [r0, #4]
 80208be:	9803      	ldr	r0, [sp, #12]
 80208c0:	f001 f924 	bl	8021b0c <_Balloc>
 80208c4:	9008      	str	r0, [sp, #32]
 80208c6:	2800      	cmp	r0, #0
 80208c8:	d117      	bne.n	80208fa <_dtoa_r+0x2ba>
 80208ca:	21b0      	movs	r1, #176	@ 0xb0
 80208cc:	4b42      	ldr	r3, [pc, #264]	@ (80209d8 <_dtoa_r+0x398>)
 80208ce:	482e      	ldr	r0, [pc, #184]	@ (8020988 <_dtoa_r+0x348>)
 80208d0:	9a08      	ldr	r2, [sp, #32]
 80208d2:	31ff      	adds	r1, #255	@ 0xff
 80208d4:	e6c9      	b.n	802066a <_dtoa_r+0x2a>
 80208d6:	2301      	movs	r3, #1
 80208d8:	e7dd      	b.n	8020896 <_dtoa_r+0x256>
 80208da:	2300      	movs	r3, #0
 80208dc:	9410      	str	r4, [sp, #64]	@ 0x40
 80208de:	9322      	str	r3, [sp, #136]	@ 0x88
 80208e0:	3b01      	subs	r3, #1
 80208e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80208e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80208e6:	2200      	movs	r2, #0
 80208e8:	3313      	adds	r3, #19
 80208ea:	e7cf      	b.n	802088c <_dtoa_r+0x24c>
 80208ec:	2301      	movs	r3, #1
 80208ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80208f0:	3b02      	subs	r3, #2
 80208f2:	e7f6      	b.n	80208e2 <_dtoa_r+0x2a2>
 80208f4:	3101      	adds	r1, #1
 80208f6:	0052      	lsls	r2, r2, #1
 80208f8:	e7dc      	b.n	80208b4 <_dtoa_r+0x274>
 80208fa:	9b03      	ldr	r3, [sp, #12]
 80208fc:	9a08      	ldr	r2, [sp, #32]
 80208fe:	69db      	ldr	r3, [r3, #28]
 8020900:	601a      	str	r2, [r3, #0]
 8020902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020904:	2b0e      	cmp	r3, #14
 8020906:	d900      	bls.n	802090a <_dtoa_r+0x2ca>
 8020908:	e0d9      	b.n	8020abe <_dtoa_r+0x47e>
 802090a:	2c00      	cmp	r4, #0
 802090c:	d100      	bne.n	8020910 <_dtoa_r+0x2d0>
 802090e:	e0d6      	b.n	8020abe <_dtoa_r+0x47e>
 8020910:	9b04      	ldr	r3, [sp, #16]
 8020912:	2b00      	cmp	r3, #0
 8020914:	dd64      	ble.n	80209e0 <_dtoa_r+0x3a0>
 8020916:	210f      	movs	r1, #15
 8020918:	9a04      	ldr	r2, [sp, #16]
 802091a:	4b2b      	ldr	r3, [pc, #172]	@ (80209c8 <_dtoa_r+0x388>)
 802091c:	400a      	ands	r2, r1
 802091e:	00d2      	lsls	r2, r2, #3
 8020920:	189b      	adds	r3, r3, r2
 8020922:	681e      	ldr	r6, [r3, #0]
 8020924:	685f      	ldr	r7, [r3, #4]
 8020926:	9b04      	ldr	r3, [sp, #16]
 8020928:	2402      	movs	r4, #2
 802092a:	111d      	asrs	r5, r3, #4
 802092c:	05db      	lsls	r3, r3, #23
 802092e:	d50a      	bpl.n	8020946 <_dtoa_r+0x306>
 8020930:	4b2a      	ldr	r3, [pc, #168]	@ (80209dc <_dtoa_r+0x39c>)
 8020932:	400d      	ands	r5, r1
 8020934:	6a1a      	ldr	r2, [r3, #32]
 8020936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020938:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802093a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802093c:	f7e1 fa3a 	bl	8001db4 <__aeabi_ddiv>
 8020940:	900a      	str	r0, [sp, #40]	@ 0x28
 8020942:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020944:	3401      	adds	r4, #1
 8020946:	4b25      	ldr	r3, [pc, #148]	@ (80209dc <_dtoa_r+0x39c>)
 8020948:	930c      	str	r3, [sp, #48]	@ 0x30
 802094a:	2d00      	cmp	r5, #0
 802094c:	d108      	bne.n	8020960 <_dtoa_r+0x320>
 802094e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020952:	0032      	movs	r2, r6
 8020954:	003b      	movs	r3, r7
 8020956:	f7e1 fa2d 	bl	8001db4 <__aeabi_ddiv>
 802095a:	900a      	str	r0, [sp, #40]	@ 0x28
 802095c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802095e:	e05a      	b.n	8020a16 <_dtoa_r+0x3d6>
 8020960:	2301      	movs	r3, #1
 8020962:	421d      	tst	r5, r3
 8020964:	d009      	beq.n	802097a <_dtoa_r+0x33a>
 8020966:	18e4      	adds	r4, r4, r3
 8020968:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802096a:	0030      	movs	r0, r6
 802096c:	681a      	ldr	r2, [r3, #0]
 802096e:	685b      	ldr	r3, [r3, #4]
 8020970:	0039      	movs	r1, r7
 8020972:	f7e1 fe63 	bl	800263c <__aeabi_dmul>
 8020976:	0006      	movs	r6, r0
 8020978:	000f      	movs	r7, r1
 802097a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802097c:	106d      	asrs	r5, r5, #1
 802097e:	3308      	adds	r3, #8
 8020980:	e7e2      	b.n	8020948 <_dtoa_r+0x308>
 8020982:	46c0      	nop			@ (mov r8, r8)
 8020984:	08025eea 	.word	0x08025eea
 8020988:	08025f01 	.word	0x08025f01
 802098c:	7ff00000 	.word	0x7ff00000
 8020990:	0000270f 	.word	0x0000270f
 8020994:	08025ee6 	.word	0x08025ee6
 8020998:	08025ee9 	.word	0x08025ee9
 802099c:	08025eb2 	.word	0x08025eb2
 80209a0:	08025eb1 	.word	0x08025eb1
 80209a4:	3ff00000 	.word	0x3ff00000
 80209a8:	fffffc01 	.word	0xfffffc01
 80209ac:	3ff80000 	.word	0x3ff80000
 80209b0:	636f4361 	.word	0x636f4361
 80209b4:	3fd287a7 	.word	0x3fd287a7
 80209b8:	8b60c8b3 	.word	0x8b60c8b3
 80209bc:	3fc68a28 	.word	0x3fc68a28
 80209c0:	509f79fb 	.word	0x509f79fb
 80209c4:	3fd34413 	.word	0x3fd34413
 80209c8:	08026058 	.word	0x08026058
 80209cc:	00000432 	.word	0x00000432
 80209d0:	00000412 	.word	0x00000412
 80209d4:	fe100000 	.word	0xfe100000
 80209d8:	08025f59 	.word	0x08025f59
 80209dc:	08026030 	.word	0x08026030
 80209e0:	9b04      	ldr	r3, [sp, #16]
 80209e2:	2402      	movs	r4, #2
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	d016      	beq.n	8020a16 <_dtoa_r+0x3d6>
 80209e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80209ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80209ec:	220f      	movs	r2, #15
 80209ee:	425d      	negs	r5, r3
 80209f0:	402a      	ands	r2, r5
 80209f2:	4bd7      	ldr	r3, [pc, #860]	@ (8020d50 <_dtoa_r+0x710>)
 80209f4:	00d2      	lsls	r2, r2, #3
 80209f6:	189b      	adds	r3, r3, r2
 80209f8:	681a      	ldr	r2, [r3, #0]
 80209fa:	685b      	ldr	r3, [r3, #4]
 80209fc:	f7e1 fe1e 	bl	800263c <__aeabi_dmul>
 8020a00:	2701      	movs	r7, #1
 8020a02:	2300      	movs	r3, #0
 8020a04:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a06:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a08:	4ed2      	ldr	r6, [pc, #840]	@ (8020d54 <_dtoa_r+0x714>)
 8020a0a:	112d      	asrs	r5, r5, #4
 8020a0c:	2d00      	cmp	r5, #0
 8020a0e:	d000      	beq.n	8020a12 <_dtoa_r+0x3d2>
 8020a10:	e0ba      	b.n	8020b88 <_dtoa_r+0x548>
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d1a1      	bne.n	802095a <_dtoa_r+0x31a>
 8020a16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020a18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020a1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d100      	bne.n	8020a22 <_dtoa_r+0x3e2>
 8020a20:	e0bd      	b.n	8020b9e <_dtoa_r+0x55e>
 8020a22:	2200      	movs	r2, #0
 8020a24:	0030      	movs	r0, r6
 8020a26:	0039      	movs	r1, r7
 8020a28:	4bcb      	ldr	r3, [pc, #812]	@ (8020d58 <_dtoa_r+0x718>)
 8020a2a:	f7df fd47 	bl	80004bc <__aeabi_dcmplt>
 8020a2e:	2800      	cmp	r0, #0
 8020a30:	d100      	bne.n	8020a34 <_dtoa_r+0x3f4>
 8020a32:	e0b4      	b.n	8020b9e <_dtoa_r+0x55e>
 8020a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d100      	bne.n	8020a3c <_dtoa_r+0x3fc>
 8020a3a:	e0b0      	b.n	8020b9e <_dtoa_r+0x55e>
 8020a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	dd39      	ble.n	8020ab6 <_dtoa_r+0x476>
 8020a42:	9b04      	ldr	r3, [sp, #16]
 8020a44:	2200      	movs	r2, #0
 8020a46:	3b01      	subs	r3, #1
 8020a48:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a4a:	0030      	movs	r0, r6
 8020a4c:	4bc3      	ldr	r3, [pc, #780]	@ (8020d5c <_dtoa_r+0x71c>)
 8020a4e:	0039      	movs	r1, r7
 8020a50:	f7e1 fdf4 	bl	800263c <__aeabi_dmul>
 8020a54:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a5a:	3401      	adds	r4, #1
 8020a5c:	0020      	movs	r0, r4
 8020a5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a60:	f7e2 fcae 	bl	80033c0 <__aeabi_i2d>
 8020a64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a68:	f7e1 fde8 	bl	800263c <__aeabi_dmul>
 8020a6c:	4bbc      	ldr	r3, [pc, #752]	@ (8020d60 <_dtoa_r+0x720>)
 8020a6e:	2200      	movs	r2, #0
 8020a70:	f7e0 fe3c 	bl	80016ec <__aeabi_dadd>
 8020a74:	4bbb      	ldr	r3, [pc, #748]	@ (8020d64 <_dtoa_r+0x724>)
 8020a76:	0006      	movs	r6, r0
 8020a78:	18cf      	adds	r7, r1, r3
 8020a7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d000      	beq.n	8020a82 <_dtoa_r+0x442>
 8020a80:	e091      	b.n	8020ba6 <_dtoa_r+0x566>
 8020a82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a86:	2200      	movs	r2, #0
 8020a88:	4bb7      	ldr	r3, [pc, #732]	@ (8020d68 <_dtoa_r+0x728>)
 8020a8a:	f7e2 f89f 	bl	8002bcc <__aeabi_dsub>
 8020a8e:	0032      	movs	r2, r6
 8020a90:	003b      	movs	r3, r7
 8020a92:	0004      	movs	r4, r0
 8020a94:	000d      	movs	r5, r1
 8020a96:	f7df fd25 	bl	80004e4 <__aeabi_dcmpgt>
 8020a9a:	2800      	cmp	r0, #0
 8020a9c:	d000      	beq.n	8020aa0 <_dtoa_r+0x460>
 8020a9e:	e29d      	b.n	8020fdc <_dtoa_r+0x99c>
 8020aa0:	2180      	movs	r1, #128	@ 0x80
 8020aa2:	0609      	lsls	r1, r1, #24
 8020aa4:	187b      	adds	r3, r7, r1
 8020aa6:	0032      	movs	r2, r6
 8020aa8:	0020      	movs	r0, r4
 8020aaa:	0029      	movs	r1, r5
 8020aac:	f7df fd06 	bl	80004bc <__aeabi_dcmplt>
 8020ab0:	2800      	cmp	r0, #0
 8020ab2:	d000      	beq.n	8020ab6 <_dtoa_r+0x476>
 8020ab4:	e130      	b.n	8020d18 <_dtoa_r+0x6d8>
 8020ab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020ab8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8020abc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020abe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	da00      	bge.n	8020ac6 <_dtoa_r+0x486>
 8020ac4:	e177      	b.n	8020db6 <_dtoa_r+0x776>
 8020ac6:	9a04      	ldr	r2, [sp, #16]
 8020ac8:	2a0e      	cmp	r2, #14
 8020aca:	dd00      	ble.n	8020ace <_dtoa_r+0x48e>
 8020acc:	e173      	b.n	8020db6 <_dtoa_r+0x776>
 8020ace:	4ba0      	ldr	r3, [pc, #640]	@ (8020d50 <_dtoa_r+0x710>)
 8020ad0:	00d2      	lsls	r2, r2, #3
 8020ad2:	189b      	adds	r3, r3, r2
 8020ad4:	685c      	ldr	r4, [r3, #4]
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	9306      	str	r3, [sp, #24]
 8020ada:	9407      	str	r4, [sp, #28]
 8020adc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	da03      	bge.n	8020aea <_dtoa_r+0x4aa>
 8020ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	dc00      	bgt.n	8020aea <_dtoa_r+0x4aa>
 8020ae8:	e106      	b.n	8020cf8 <_dtoa_r+0x6b8>
 8020aea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020aec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020af0:	9d08      	ldr	r5, [sp, #32]
 8020af2:	3b01      	subs	r3, #1
 8020af4:	195b      	adds	r3, r3, r5
 8020af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8020af8:	9a06      	ldr	r2, [sp, #24]
 8020afa:	9b07      	ldr	r3, [sp, #28]
 8020afc:	0030      	movs	r0, r6
 8020afe:	0039      	movs	r1, r7
 8020b00:	f7e1 f958 	bl	8001db4 <__aeabi_ddiv>
 8020b04:	f7e2 fc20 	bl	8003348 <__aeabi_d2iz>
 8020b08:	9009      	str	r0, [sp, #36]	@ 0x24
 8020b0a:	f7e2 fc59 	bl	80033c0 <__aeabi_i2d>
 8020b0e:	9a06      	ldr	r2, [sp, #24]
 8020b10:	9b07      	ldr	r3, [sp, #28]
 8020b12:	f7e1 fd93 	bl	800263c <__aeabi_dmul>
 8020b16:	0002      	movs	r2, r0
 8020b18:	000b      	movs	r3, r1
 8020b1a:	0030      	movs	r0, r6
 8020b1c:	0039      	movs	r1, r7
 8020b1e:	f7e2 f855 	bl	8002bcc <__aeabi_dsub>
 8020b22:	002b      	movs	r3, r5
 8020b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020b26:	3501      	adds	r5, #1
 8020b28:	3230      	adds	r2, #48	@ 0x30
 8020b2a:	701a      	strb	r2, [r3, #0]
 8020b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b2e:	002c      	movs	r4, r5
 8020b30:	429a      	cmp	r2, r3
 8020b32:	d000      	beq.n	8020b36 <_dtoa_r+0x4f6>
 8020b34:	e131      	b.n	8020d9a <_dtoa_r+0x75a>
 8020b36:	0002      	movs	r2, r0
 8020b38:	000b      	movs	r3, r1
 8020b3a:	f7e0 fdd7 	bl	80016ec <__aeabi_dadd>
 8020b3e:	9a06      	ldr	r2, [sp, #24]
 8020b40:	9b07      	ldr	r3, [sp, #28]
 8020b42:	0006      	movs	r6, r0
 8020b44:	000f      	movs	r7, r1
 8020b46:	f7df fccd 	bl	80004e4 <__aeabi_dcmpgt>
 8020b4a:	2800      	cmp	r0, #0
 8020b4c:	d000      	beq.n	8020b50 <_dtoa_r+0x510>
 8020b4e:	e10f      	b.n	8020d70 <_dtoa_r+0x730>
 8020b50:	9a06      	ldr	r2, [sp, #24]
 8020b52:	9b07      	ldr	r3, [sp, #28]
 8020b54:	0030      	movs	r0, r6
 8020b56:	0039      	movs	r1, r7
 8020b58:	f7df fcaa 	bl	80004b0 <__aeabi_dcmpeq>
 8020b5c:	2800      	cmp	r0, #0
 8020b5e:	d003      	beq.n	8020b68 <_dtoa_r+0x528>
 8020b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b62:	07dd      	lsls	r5, r3, #31
 8020b64:	d500      	bpl.n	8020b68 <_dtoa_r+0x528>
 8020b66:	e103      	b.n	8020d70 <_dtoa_r+0x730>
 8020b68:	9905      	ldr	r1, [sp, #20]
 8020b6a:	9803      	ldr	r0, [sp, #12]
 8020b6c:	f001 f812 	bl	8021b94 <_Bfree>
 8020b70:	2300      	movs	r3, #0
 8020b72:	7023      	strb	r3, [r4, #0]
 8020b74:	9b04      	ldr	r3, [sp, #16]
 8020b76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020b78:	3301      	adds	r3, #1
 8020b7a:	6013      	str	r3, [r2, #0]
 8020b7c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d100      	bne.n	8020b84 <_dtoa_r+0x544>
 8020b82:	e5a7      	b.n	80206d4 <_dtoa_r+0x94>
 8020b84:	601c      	str	r4, [r3, #0]
 8020b86:	e5a5      	b.n	80206d4 <_dtoa_r+0x94>
 8020b88:	423d      	tst	r5, r7
 8020b8a:	d005      	beq.n	8020b98 <_dtoa_r+0x558>
 8020b8c:	6832      	ldr	r2, [r6, #0]
 8020b8e:	6873      	ldr	r3, [r6, #4]
 8020b90:	f7e1 fd54 	bl	800263c <__aeabi_dmul>
 8020b94:	003b      	movs	r3, r7
 8020b96:	3401      	adds	r4, #1
 8020b98:	106d      	asrs	r5, r5, #1
 8020b9a:	3608      	adds	r6, #8
 8020b9c:	e736      	b.n	8020a0c <_dtoa_r+0x3cc>
 8020b9e:	9b04      	ldr	r3, [sp, #16]
 8020ba0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ba4:	e75a      	b.n	8020a5c <_dtoa_r+0x41c>
 8020ba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020ba8:	4b69      	ldr	r3, [pc, #420]	@ (8020d50 <_dtoa_r+0x710>)
 8020baa:	3a01      	subs	r2, #1
 8020bac:	00d2      	lsls	r2, r2, #3
 8020bae:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020bb0:	189b      	adds	r3, r3, r2
 8020bb2:	681a      	ldr	r2, [r3, #0]
 8020bb4:	685b      	ldr	r3, [r3, #4]
 8020bb6:	2900      	cmp	r1, #0
 8020bb8:	d04c      	beq.n	8020c54 <_dtoa_r+0x614>
 8020bba:	2000      	movs	r0, #0
 8020bbc:	496b      	ldr	r1, [pc, #428]	@ (8020d6c <_dtoa_r+0x72c>)
 8020bbe:	f7e1 f8f9 	bl	8001db4 <__aeabi_ddiv>
 8020bc2:	0032      	movs	r2, r6
 8020bc4:	003b      	movs	r3, r7
 8020bc6:	f7e2 f801 	bl	8002bcc <__aeabi_dsub>
 8020bca:	9a08      	ldr	r2, [sp, #32]
 8020bcc:	0006      	movs	r6, r0
 8020bce:	4694      	mov	ip, r2
 8020bd0:	000f      	movs	r7, r1
 8020bd2:	9b08      	ldr	r3, [sp, #32]
 8020bd4:	9316      	str	r3, [sp, #88]	@ 0x58
 8020bd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020bd8:	4463      	add	r3, ip
 8020bda:	9311      	str	r3, [sp, #68]	@ 0x44
 8020bdc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020bde:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020be0:	f7e2 fbb2 	bl	8003348 <__aeabi_d2iz>
 8020be4:	0005      	movs	r5, r0
 8020be6:	f7e2 fbeb 	bl	80033c0 <__aeabi_i2d>
 8020bea:	0002      	movs	r2, r0
 8020bec:	000b      	movs	r3, r1
 8020bee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020bf2:	f7e1 ffeb 	bl	8002bcc <__aeabi_dsub>
 8020bf6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020bf8:	3530      	adds	r5, #48	@ 0x30
 8020bfa:	1c5c      	adds	r4, r3, #1
 8020bfc:	701d      	strb	r5, [r3, #0]
 8020bfe:	0032      	movs	r2, r6
 8020c00:	003b      	movs	r3, r7
 8020c02:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c06:	f7df fc59 	bl	80004bc <__aeabi_dcmplt>
 8020c0a:	2800      	cmp	r0, #0
 8020c0c:	d16a      	bne.n	8020ce4 <_dtoa_r+0x6a4>
 8020c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020c10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020c12:	2000      	movs	r0, #0
 8020c14:	4950      	ldr	r1, [pc, #320]	@ (8020d58 <_dtoa_r+0x718>)
 8020c16:	f7e1 ffd9 	bl	8002bcc <__aeabi_dsub>
 8020c1a:	0032      	movs	r2, r6
 8020c1c:	003b      	movs	r3, r7
 8020c1e:	f7df fc4d 	bl	80004bc <__aeabi_dcmplt>
 8020c22:	2800      	cmp	r0, #0
 8020c24:	d000      	beq.n	8020c28 <_dtoa_r+0x5e8>
 8020c26:	e0a5      	b.n	8020d74 <_dtoa_r+0x734>
 8020c28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c2a:	42a3      	cmp	r3, r4
 8020c2c:	d100      	bne.n	8020c30 <_dtoa_r+0x5f0>
 8020c2e:	e742      	b.n	8020ab6 <_dtoa_r+0x476>
 8020c30:	2200      	movs	r2, #0
 8020c32:	0030      	movs	r0, r6
 8020c34:	0039      	movs	r1, r7
 8020c36:	4b49      	ldr	r3, [pc, #292]	@ (8020d5c <_dtoa_r+0x71c>)
 8020c38:	f7e1 fd00 	bl	800263c <__aeabi_dmul>
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	0006      	movs	r6, r0
 8020c40:	000f      	movs	r7, r1
 8020c42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c46:	4b45      	ldr	r3, [pc, #276]	@ (8020d5c <_dtoa_r+0x71c>)
 8020c48:	f7e1 fcf8 	bl	800263c <__aeabi_dmul>
 8020c4c:	9416      	str	r4, [sp, #88]	@ 0x58
 8020c4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c50:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c52:	e7c3      	b.n	8020bdc <_dtoa_r+0x59c>
 8020c54:	0030      	movs	r0, r6
 8020c56:	0039      	movs	r1, r7
 8020c58:	f7e1 fcf0 	bl	800263c <__aeabi_dmul>
 8020c5c:	9d08      	ldr	r5, [sp, #32]
 8020c5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020c60:	002b      	movs	r3, r5
 8020c62:	4694      	mov	ip, r2
 8020c64:	9016      	str	r0, [sp, #88]	@ 0x58
 8020c66:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020c68:	4463      	add	r3, ip
 8020c6a:	9319      	str	r3, [sp, #100]	@ 0x64
 8020c6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c70:	f7e2 fb6a 	bl	8003348 <__aeabi_d2iz>
 8020c74:	0004      	movs	r4, r0
 8020c76:	f7e2 fba3 	bl	80033c0 <__aeabi_i2d>
 8020c7a:	000b      	movs	r3, r1
 8020c7c:	0002      	movs	r2, r0
 8020c7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c82:	f7e1 ffa3 	bl	8002bcc <__aeabi_dsub>
 8020c86:	3430      	adds	r4, #48	@ 0x30
 8020c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c8a:	702c      	strb	r4, [r5, #0]
 8020c8c:	3501      	adds	r5, #1
 8020c8e:	0006      	movs	r6, r0
 8020c90:	000f      	movs	r7, r1
 8020c92:	42ab      	cmp	r3, r5
 8020c94:	d129      	bne.n	8020cea <_dtoa_r+0x6aa>
 8020c96:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020c98:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020c9a:	9b08      	ldr	r3, [sp, #32]
 8020c9c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020c9e:	469c      	mov	ip, r3
 8020ca0:	2200      	movs	r2, #0
 8020ca2:	4b32      	ldr	r3, [pc, #200]	@ (8020d6c <_dtoa_r+0x72c>)
 8020ca4:	4464      	add	r4, ip
 8020ca6:	f7e0 fd21 	bl	80016ec <__aeabi_dadd>
 8020caa:	0002      	movs	r2, r0
 8020cac:	000b      	movs	r3, r1
 8020cae:	0030      	movs	r0, r6
 8020cb0:	0039      	movs	r1, r7
 8020cb2:	f7df fc17 	bl	80004e4 <__aeabi_dcmpgt>
 8020cb6:	2800      	cmp	r0, #0
 8020cb8:	d15c      	bne.n	8020d74 <_dtoa_r+0x734>
 8020cba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020cbc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020cbe:	2000      	movs	r0, #0
 8020cc0:	492a      	ldr	r1, [pc, #168]	@ (8020d6c <_dtoa_r+0x72c>)
 8020cc2:	f7e1 ff83 	bl	8002bcc <__aeabi_dsub>
 8020cc6:	0002      	movs	r2, r0
 8020cc8:	000b      	movs	r3, r1
 8020cca:	0030      	movs	r0, r6
 8020ccc:	0039      	movs	r1, r7
 8020cce:	f7df fbf5 	bl	80004bc <__aeabi_dcmplt>
 8020cd2:	2800      	cmp	r0, #0
 8020cd4:	d100      	bne.n	8020cd8 <_dtoa_r+0x698>
 8020cd6:	e6ee      	b.n	8020ab6 <_dtoa_r+0x476>
 8020cd8:	0023      	movs	r3, r4
 8020cda:	3c01      	subs	r4, #1
 8020cdc:	7822      	ldrb	r2, [r4, #0]
 8020cde:	2a30      	cmp	r2, #48	@ 0x30
 8020ce0:	d0fa      	beq.n	8020cd8 <_dtoa_r+0x698>
 8020ce2:	001c      	movs	r4, r3
 8020ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020ce6:	9304      	str	r3, [sp, #16]
 8020ce8:	e73e      	b.n	8020b68 <_dtoa_r+0x528>
 8020cea:	2200      	movs	r2, #0
 8020cec:	4b1b      	ldr	r3, [pc, #108]	@ (8020d5c <_dtoa_r+0x71c>)
 8020cee:	f7e1 fca5 	bl	800263c <__aeabi_dmul>
 8020cf2:	900a      	str	r0, [sp, #40]	@ 0x28
 8020cf4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020cf6:	e7b9      	b.n	8020c6c <_dtoa_r+0x62c>
 8020cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	d10c      	bne.n	8020d18 <_dtoa_r+0x6d8>
 8020cfe:	9806      	ldr	r0, [sp, #24]
 8020d00:	9907      	ldr	r1, [sp, #28]
 8020d02:	2200      	movs	r2, #0
 8020d04:	4b18      	ldr	r3, [pc, #96]	@ (8020d68 <_dtoa_r+0x728>)
 8020d06:	f7e1 fc99 	bl	800263c <__aeabi_dmul>
 8020d0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d0e:	f7df fbf3 	bl	80004f8 <__aeabi_dcmpge>
 8020d12:	2800      	cmp	r0, #0
 8020d14:	d100      	bne.n	8020d18 <_dtoa_r+0x6d8>
 8020d16:	e164      	b.n	8020fe2 <_dtoa_r+0x9a2>
 8020d18:	2600      	movs	r6, #0
 8020d1a:	0037      	movs	r7, r6
 8020d1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d1e:	9c08      	ldr	r4, [sp, #32]
 8020d20:	43db      	mvns	r3, r3
 8020d22:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d24:	2300      	movs	r3, #0
 8020d26:	9304      	str	r3, [sp, #16]
 8020d28:	0031      	movs	r1, r6
 8020d2a:	9803      	ldr	r0, [sp, #12]
 8020d2c:	f000 ff32 	bl	8021b94 <_Bfree>
 8020d30:	2f00      	cmp	r7, #0
 8020d32:	d0d7      	beq.n	8020ce4 <_dtoa_r+0x6a4>
 8020d34:	9b04      	ldr	r3, [sp, #16]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d005      	beq.n	8020d46 <_dtoa_r+0x706>
 8020d3a:	42bb      	cmp	r3, r7
 8020d3c:	d003      	beq.n	8020d46 <_dtoa_r+0x706>
 8020d3e:	0019      	movs	r1, r3
 8020d40:	9803      	ldr	r0, [sp, #12]
 8020d42:	f000 ff27 	bl	8021b94 <_Bfree>
 8020d46:	0039      	movs	r1, r7
 8020d48:	9803      	ldr	r0, [sp, #12]
 8020d4a:	f000 ff23 	bl	8021b94 <_Bfree>
 8020d4e:	e7c9      	b.n	8020ce4 <_dtoa_r+0x6a4>
 8020d50:	08026058 	.word	0x08026058
 8020d54:	08026030 	.word	0x08026030
 8020d58:	3ff00000 	.word	0x3ff00000
 8020d5c:	40240000 	.word	0x40240000
 8020d60:	401c0000 	.word	0x401c0000
 8020d64:	fcc00000 	.word	0xfcc00000
 8020d68:	40140000 	.word	0x40140000
 8020d6c:	3fe00000 	.word	0x3fe00000
 8020d70:	9b04      	ldr	r3, [sp, #16]
 8020d72:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d74:	0023      	movs	r3, r4
 8020d76:	001c      	movs	r4, r3
 8020d78:	3b01      	subs	r3, #1
 8020d7a:	781a      	ldrb	r2, [r3, #0]
 8020d7c:	2a39      	cmp	r2, #57	@ 0x39
 8020d7e:	d108      	bne.n	8020d92 <_dtoa_r+0x752>
 8020d80:	9a08      	ldr	r2, [sp, #32]
 8020d82:	429a      	cmp	r2, r3
 8020d84:	d1f7      	bne.n	8020d76 <_dtoa_r+0x736>
 8020d86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020d88:	9908      	ldr	r1, [sp, #32]
 8020d8a:	3201      	adds	r2, #1
 8020d8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8020d8e:	2230      	movs	r2, #48	@ 0x30
 8020d90:	700a      	strb	r2, [r1, #0]
 8020d92:	781a      	ldrb	r2, [r3, #0]
 8020d94:	3201      	adds	r2, #1
 8020d96:	701a      	strb	r2, [r3, #0]
 8020d98:	e7a4      	b.n	8020ce4 <_dtoa_r+0x6a4>
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	4bc6      	ldr	r3, [pc, #792]	@ (80210b8 <_dtoa_r+0xa78>)
 8020d9e:	f7e1 fc4d 	bl	800263c <__aeabi_dmul>
 8020da2:	2200      	movs	r2, #0
 8020da4:	2300      	movs	r3, #0
 8020da6:	0006      	movs	r6, r0
 8020da8:	000f      	movs	r7, r1
 8020daa:	f7df fb81 	bl	80004b0 <__aeabi_dcmpeq>
 8020dae:	2800      	cmp	r0, #0
 8020db0:	d100      	bne.n	8020db4 <_dtoa_r+0x774>
 8020db2:	e6a1      	b.n	8020af8 <_dtoa_r+0x4b8>
 8020db4:	e6d8      	b.n	8020b68 <_dtoa_r+0x528>
 8020db6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020db8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020dba:	9c06      	ldr	r4, [sp, #24]
 8020dbc:	2f00      	cmp	r7, #0
 8020dbe:	d014      	beq.n	8020dea <_dtoa_r+0x7aa>
 8020dc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020dc2:	2a01      	cmp	r2, #1
 8020dc4:	dd00      	ble.n	8020dc8 <_dtoa_r+0x788>
 8020dc6:	e0c8      	b.n	8020f5a <_dtoa_r+0x91a>
 8020dc8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020dca:	2a00      	cmp	r2, #0
 8020dcc:	d100      	bne.n	8020dd0 <_dtoa_r+0x790>
 8020dce:	e0be      	b.n	8020f4e <_dtoa_r+0x90e>
 8020dd0:	4aba      	ldr	r2, [pc, #744]	@ (80210bc <_dtoa_r+0xa7c>)
 8020dd2:	189b      	adds	r3, r3, r2
 8020dd4:	9a06      	ldr	r2, [sp, #24]
 8020dd6:	2101      	movs	r1, #1
 8020dd8:	18d2      	adds	r2, r2, r3
 8020dda:	9206      	str	r2, [sp, #24]
 8020ddc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020dde:	9803      	ldr	r0, [sp, #12]
 8020de0:	18d3      	adds	r3, r2, r3
 8020de2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020de4:	f000 ffda 	bl	8021d9c <__i2b>
 8020de8:	0007      	movs	r7, r0
 8020dea:	2c00      	cmp	r4, #0
 8020dec:	d00e      	beq.n	8020e0c <_dtoa_r+0x7cc>
 8020dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	dd0b      	ble.n	8020e0c <_dtoa_r+0x7cc>
 8020df4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020df6:	0023      	movs	r3, r4
 8020df8:	4294      	cmp	r4, r2
 8020dfa:	dd00      	ble.n	8020dfe <_dtoa_r+0x7be>
 8020dfc:	0013      	movs	r3, r2
 8020dfe:	9a06      	ldr	r2, [sp, #24]
 8020e00:	1ae4      	subs	r4, r4, r3
 8020e02:	1ad2      	subs	r2, r2, r3
 8020e04:	9206      	str	r2, [sp, #24]
 8020e06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020e08:	1ad3      	subs	r3, r2, r3
 8020e0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d01f      	beq.n	8020e52 <_dtoa_r+0x812>
 8020e12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d100      	bne.n	8020e1a <_dtoa_r+0x7da>
 8020e18:	e0b5      	b.n	8020f86 <_dtoa_r+0x946>
 8020e1a:	2d00      	cmp	r5, #0
 8020e1c:	d010      	beq.n	8020e40 <_dtoa_r+0x800>
 8020e1e:	0039      	movs	r1, r7
 8020e20:	002a      	movs	r2, r5
 8020e22:	9803      	ldr	r0, [sp, #12]
 8020e24:	f001 f884 	bl	8021f30 <__pow5mult>
 8020e28:	9a05      	ldr	r2, [sp, #20]
 8020e2a:	0001      	movs	r1, r0
 8020e2c:	0007      	movs	r7, r0
 8020e2e:	9803      	ldr	r0, [sp, #12]
 8020e30:	f000 ffcc 	bl	8021dcc <__multiply>
 8020e34:	0006      	movs	r6, r0
 8020e36:	9905      	ldr	r1, [sp, #20]
 8020e38:	9803      	ldr	r0, [sp, #12]
 8020e3a:	f000 feab 	bl	8021b94 <_Bfree>
 8020e3e:	9605      	str	r6, [sp, #20]
 8020e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e42:	1b5a      	subs	r2, r3, r5
 8020e44:	42ab      	cmp	r3, r5
 8020e46:	d004      	beq.n	8020e52 <_dtoa_r+0x812>
 8020e48:	9905      	ldr	r1, [sp, #20]
 8020e4a:	9803      	ldr	r0, [sp, #12]
 8020e4c:	f001 f870 	bl	8021f30 <__pow5mult>
 8020e50:	9005      	str	r0, [sp, #20]
 8020e52:	2101      	movs	r1, #1
 8020e54:	9803      	ldr	r0, [sp, #12]
 8020e56:	f000 ffa1 	bl	8021d9c <__i2b>
 8020e5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020e5c:	0006      	movs	r6, r0
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d100      	bne.n	8020e64 <_dtoa_r+0x824>
 8020e62:	e1bc      	b.n	80211de <_dtoa_r+0xb9e>
 8020e64:	001a      	movs	r2, r3
 8020e66:	0001      	movs	r1, r0
 8020e68:	9803      	ldr	r0, [sp, #12]
 8020e6a:	f001 f861 	bl	8021f30 <__pow5mult>
 8020e6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e70:	0006      	movs	r6, r0
 8020e72:	2500      	movs	r5, #0
 8020e74:	2b01      	cmp	r3, #1
 8020e76:	dc16      	bgt.n	8020ea6 <_dtoa_r+0x866>
 8020e78:	2500      	movs	r5, #0
 8020e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020e7c:	42ab      	cmp	r3, r5
 8020e7e:	d10e      	bne.n	8020e9e <_dtoa_r+0x85e>
 8020e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e82:	031b      	lsls	r3, r3, #12
 8020e84:	42ab      	cmp	r3, r5
 8020e86:	d10a      	bne.n	8020e9e <_dtoa_r+0x85e>
 8020e88:	4b8d      	ldr	r3, [pc, #564]	@ (80210c0 <_dtoa_r+0xa80>)
 8020e8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020e8c:	4213      	tst	r3, r2
 8020e8e:	d006      	beq.n	8020e9e <_dtoa_r+0x85e>
 8020e90:	9b06      	ldr	r3, [sp, #24]
 8020e92:	3501      	adds	r5, #1
 8020e94:	3301      	adds	r3, #1
 8020e96:	9306      	str	r3, [sp, #24]
 8020e98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e9a:	3301      	adds	r3, #1
 8020e9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ea0:	2001      	movs	r0, #1
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d008      	beq.n	8020eb8 <_dtoa_r+0x878>
 8020ea6:	6933      	ldr	r3, [r6, #16]
 8020ea8:	3303      	adds	r3, #3
 8020eaa:	009b      	lsls	r3, r3, #2
 8020eac:	18f3      	adds	r3, r6, r3
 8020eae:	6858      	ldr	r0, [r3, #4]
 8020eb0:	f000 ff24 	bl	8021cfc <__hi0bits>
 8020eb4:	2320      	movs	r3, #32
 8020eb6:	1a18      	subs	r0, r3, r0
 8020eb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020eba:	1818      	adds	r0, r3, r0
 8020ebc:	0002      	movs	r2, r0
 8020ebe:	231f      	movs	r3, #31
 8020ec0:	401a      	ands	r2, r3
 8020ec2:	4218      	tst	r0, r3
 8020ec4:	d065      	beq.n	8020f92 <_dtoa_r+0x952>
 8020ec6:	3301      	adds	r3, #1
 8020ec8:	1a9b      	subs	r3, r3, r2
 8020eca:	2b04      	cmp	r3, #4
 8020ecc:	dd5d      	ble.n	8020f8a <_dtoa_r+0x94a>
 8020ece:	231c      	movs	r3, #28
 8020ed0:	1a9b      	subs	r3, r3, r2
 8020ed2:	9a06      	ldr	r2, [sp, #24]
 8020ed4:	18e4      	adds	r4, r4, r3
 8020ed6:	18d2      	adds	r2, r2, r3
 8020ed8:	9206      	str	r2, [sp, #24]
 8020eda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020edc:	18d3      	adds	r3, r2, r3
 8020ede:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ee0:	9b06      	ldr	r3, [sp, #24]
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	dd05      	ble.n	8020ef2 <_dtoa_r+0x8b2>
 8020ee6:	001a      	movs	r2, r3
 8020ee8:	9905      	ldr	r1, [sp, #20]
 8020eea:	9803      	ldr	r0, [sp, #12]
 8020eec:	f001 f87c 	bl	8021fe8 <__lshift>
 8020ef0:	9005      	str	r0, [sp, #20]
 8020ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	dd05      	ble.n	8020f04 <_dtoa_r+0x8c4>
 8020ef8:	0031      	movs	r1, r6
 8020efa:	001a      	movs	r2, r3
 8020efc:	9803      	ldr	r0, [sp, #12]
 8020efe:	f001 f873 	bl	8021fe8 <__lshift>
 8020f02:	0006      	movs	r6, r0
 8020f04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d045      	beq.n	8020f96 <_dtoa_r+0x956>
 8020f0a:	0031      	movs	r1, r6
 8020f0c:	9805      	ldr	r0, [sp, #20]
 8020f0e:	f001 f8d7 	bl	80220c0 <__mcmp>
 8020f12:	2800      	cmp	r0, #0
 8020f14:	da3f      	bge.n	8020f96 <_dtoa_r+0x956>
 8020f16:	9b04      	ldr	r3, [sp, #16]
 8020f18:	220a      	movs	r2, #10
 8020f1a:	3b01      	subs	r3, #1
 8020f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f1e:	9905      	ldr	r1, [sp, #20]
 8020f20:	2300      	movs	r3, #0
 8020f22:	9803      	ldr	r0, [sp, #12]
 8020f24:	f000 fe5a 	bl	8021bdc <__multadd>
 8020f28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f2a:	9005      	str	r0, [sp, #20]
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d100      	bne.n	8020f32 <_dtoa_r+0x8f2>
 8020f30:	e15c      	b.n	80211ec <_dtoa_r+0xbac>
 8020f32:	2300      	movs	r3, #0
 8020f34:	0039      	movs	r1, r7
 8020f36:	220a      	movs	r2, #10
 8020f38:	9803      	ldr	r0, [sp, #12]
 8020f3a:	f000 fe4f 	bl	8021bdc <__multadd>
 8020f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f40:	0007      	movs	r7, r0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	dc55      	bgt.n	8020ff2 <_dtoa_r+0x9b2>
 8020f46:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020f48:	2b02      	cmp	r3, #2
 8020f4a:	dc2d      	bgt.n	8020fa8 <_dtoa_r+0x968>
 8020f4c:	e051      	b.n	8020ff2 <_dtoa_r+0x9b2>
 8020f4e:	2336      	movs	r3, #54	@ 0x36
 8020f50:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020f52:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020f54:	9c06      	ldr	r4, [sp, #24]
 8020f56:	1a9b      	subs	r3, r3, r2
 8020f58:	e73c      	b.n	8020dd4 <_dtoa_r+0x794>
 8020f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f5c:	1e5d      	subs	r5, r3, #1
 8020f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f60:	42ab      	cmp	r3, r5
 8020f62:	db08      	blt.n	8020f76 <_dtoa_r+0x936>
 8020f64:	1b5d      	subs	r5, r3, r5
 8020f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f68:	9c06      	ldr	r4, [sp, #24]
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	db00      	blt.n	8020f70 <_dtoa_r+0x930>
 8020f6e:	e731      	b.n	8020dd4 <_dtoa_r+0x794>
 8020f70:	1ae4      	subs	r4, r4, r3
 8020f72:	2300      	movs	r3, #0
 8020f74:	e72e      	b.n	8020dd4 <_dtoa_r+0x794>
 8020f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020f7a:	1aeb      	subs	r3, r5, r3
 8020f7c:	18d3      	adds	r3, r2, r3
 8020f7e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020f80:	9314      	str	r3, [sp, #80]	@ 0x50
 8020f82:	2500      	movs	r5, #0
 8020f84:	e7ef      	b.n	8020f66 <_dtoa_r+0x926>
 8020f86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020f88:	e75e      	b.n	8020e48 <_dtoa_r+0x808>
 8020f8a:	2b04      	cmp	r3, #4
 8020f8c:	d0a8      	beq.n	8020ee0 <_dtoa_r+0x8a0>
 8020f8e:	331c      	adds	r3, #28
 8020f90:	e79f      	b.n	8020ed2 <_dtoa_r+0x892>
 8020f92:	0013      	movs	r3, r2
 8020f94:	e7fb      	b.n	8020f8e <_dtoa_r+0x94e>
 8020f96:	9b04      	ldr	r3, [sp, #16]
 8020f98:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	dc23      	bgt.n	8020fea <_dtoa_r+0x9aa>
 8020fa2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020fa4:	2b02      	cmp	r3, #2
 8020fa6:	dd20      	ble.n	8020fea <_dtoa_r+0x9aa>
 8020fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020faa:	2b00      	cmp	r3, #0
 8020fac:	d000      	beq.n	8020fb0 <_dtoa_r+0x970>
 8020fae:	e6b5      	b.n	8020d1c <_dtoa_r+0x6dc>
 8020fb0:	0031      	movs	r1, r6
 8020fb2:	2205      	movs	r2, #5
 8020fb4:	9803      	ldr	r0, [sp, #12]
 8020fb6:	f000 fe11 	bl	8021bdc <__multadd>
 8020fba:	0006      	movs	r6, r0
 8020fbc:	0001      	movs	r1, r0
 8020fbe:	9805      	ldr	r0, [sp, #20]
 8020fc0:	f001 f87e 	bl	80220c0 <__mcmp>
 8020fc4:	2800      	cmp	r0, #0
 8020fc6:	dc00      	bgt.n	8020fca <_dtoa_r+0x98a>
 8020fc8:	e6a8      	b.n	8020d1c <_dtoa_r+0x6dc>
 8020fca:	9b08      	ldr	r3, [sp, #32]
 8020fcc:	9a08      	ldr	r2, [sp, #32]
 8020fce:	1c5c      	adds	r4, r3, #1
 8020fd0:	2331      	movs	r3, #49	@ 0x31
 8020fd2:	7013      	strb	r3, [r2, #0]
 8020fd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020fd6:	3301      	adds	r3, #1
 8020fd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fda:	e6a3      	b.n	8020d24 <_dtoa_r+0x6e4>
 8020fdc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020fde:	0037      	movs	r7, r6
 8020fe0:	e7f3      	b.n	8020fca <_dtoa_r+0x98a>
 8020fe2:	9b04      	ldr	r3, [sp, #16]
 8020fe4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020fe6:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fe8:	e7f9      	b.n	8020fde <_dtoa_r+0x99e>
 8020fea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020fec:	2b00      	cmp	r3, #0
 8020fee:	d100      	bne.n	8020ff2 <_dtoa_r+0x9b2>
 8020ff0:	e100      	b.n	80211f4 <_dtoa_r+0xbb4>
 8020ff2:	2c00      	cmp	r4, #0
 8020ff4:	dd05      	ble.n	8021002 <_dtoa_r+0x9c2>
 8020ff6:	0039      	movs	r1, r7
 8020ff8:	0022      	movs	r2, r4
 8020ffa:	9803      	ldr	r0, [sp, #12]
 8020ffc:	f000 fff4 	bl	8021fe8 <__lshift>
 8021000:	0007      	movs	r7, r0
 8021002:	0038      	movs	r0, r7
 8021004:	2d00      	cmp	r5, #0
 8021006:	d018      	beq.n	802103a <_dtoa_r+0x9fa>
 8021008:	6879      	ldr	r1, [r7, #4]
 802100a:	9803      	ldr	r0, [sp, #12]
 802100c:	f000 fd7e 	bl	8021b0c <_Balloc>
 8021010:	1e04      	subs	r4, r0, #0
 8021012:	d105      	bne.n	8021020 <_dtoa_r+0x9e0>
 8021014:	0022      	movs	r2, r4
 8021016:	4b2b      	ldr	r3, [pc, #172]	@ (80210c4 <_dtoa_r+0xa84>)
 8021018:	482b      	ldr	r0, [pc, #172]	@ (80210c8 <_dtoa_r+0xa88>)
 802101a:	492c      	ldr	r1, [pc, #176]	@ (80210cc <_dtoa_r+0xa8c>)
 802101c:	f7ff fb25 	bl	802066a <_dtoa_r+0x2a>
 8021020:	0039      	movs	r1, r7
 8021022:	693a      	ldr	r2, [r7, #16]
 8021024:	310c      	adds	r1, #12
 8021026:	3202      	adds	r2, #2
 8021028:	0092      	lsls	r2, r2, #2
 802102a:	300c      	adds	r0, #12
 802102c:	f7ff fa6a 	bl	8020504 <memcpy>
 8021030:	2201      	movs	r2, #1
 8021032:	0021      	movs	r1, r4
 8021034:	9803      	ldr	r0, [sp, #12]
 8021036:	f000 ffd7 	bl	8021fe8 <__lshift>
 802103a:	9b08      	ldr	r3, [sp, #32]
 802103c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802103e:	9306      	str	r3, [sp, #24]
 8021040:	3b01      	subs	r3, #1
 8021042:	189b      	adds	r3, r3, r2
 8021044:	2201      	movs	r2, #1
 8021046:	9704      	str	r7, [sp, #16]
 8021048:	0007      	movs	r7, r0
 802104a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802104c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802104e:	4013      	ands	r3, r2
 8021050:	930e      	str	r3, [sp, #56]	@ 0x38
 8021052:	0031      	movs	r1, r6
 8021054:	9805      	ldr	r0, [sp, #20]
 8021056:	f7ff fa65 	bl	8020524 <quorem>
 802105a:	9904      	ldr	r1, [sp, #16]
 802105c:	0005      	movs	r5, r0
 802105e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021060:	9805      	ldr	r0, [sp, #20]
 8021062:	f001 f82d 	bl	80220c0 <__mcmp>
 8021066:	003a      	movs	r2, r7
 8021068:	900d      	str	r0, [sp, #52]	@ 0x34
 802106a:	0031      	movs	r1, r6
 802106c:	9803      	ldr	r0, [sp, #12]
 802106e:	f001 f843 	bl	80220f8 <__mdiff>
 8021072:	2201      	movs	r2, #1
 8021074:	68c3      	ldr	r3, [r0, #12]
 8021076:	0004      	movs	r4, r0
 8021078:	3530      	adds	r5, #48	@ 0x30
 802107a:	9209      	str	r2, [sp, #36]	@ 0x24
 802107c:	2b00      	cmp	r3, #0
 802107e:	d104      	bne.n	802108a <_dtoa_r+0xa4a>
 8021080:	0001      	movs	r1, r0
 8021082:	9805      	ldr	r0, [sp, #20]
 8021084:	f001 f81c 	bl	80220c0 <__mcmp>
 8021088:	9009      	str	r0, [sp, #36]	@ 0x24
 802108a:	0021      	movs	r1, r4
 802108c:	9803      	ldr	r0, [sp, #12]
 802108e:	f000 fd81 	bl	8021b94 <_Bfree>
 8021092:	9b06      	ldr	r3, [sp, #24]
 8021094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021096:	1c5c      	adds	r4, r3, #1
 8021098:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802109a:	4313      	orrs	r3, r2
 802109c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802109e:	4313      	orrs	r3, r2
 80210a0:	d116      	bne.n	80210d0 <_dtoa_r+0xa90>
 80210a2:	2d39      	cmp	r5, #57	@ 0x39
 80210a4:	d02f      	beq.n	8021106 <_dtoa_r+0xac6>
 80210a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	dd01      	ble.n	80210b0 <_dtoa_r+0xa70>
 80210ac:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80210ae:	3531      	adds	r5, #49	@ 0x31
 80210b0:	9b06      	ldr	r3, [sp, #24]
 80210b2:	701d      	strb	r5, [r3, #0]
 80210b4:	e638      	b.n	8020d28 <_dtoa_r+0x6e8>
 80210b6:	46c0      	nop			@ (mov r8, r8)
 80210b8:	40240000 	.word	0x40240000
 80210bc:	00000433 	.word	0x00000433
 80210c0:	7ff00000 	.word	0x7ff00000
 80210c4:	08025f59 	.word	0x08025f59
 80210c8:	08025f01 	.word	0x08025f01
 80210cc:	000002ef 	.word	0x000002ef
 80210d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	db04      	blt.n	80210e0 <_dtoa_r+0xaa0>
 80210d6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80210d8:	4313      	orrs	r3, r2
 80210da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80210dc:	4313      	orrs	r3, r2
 80210de:	d11e      	bne.n	802111e <_dtoa_r+0xade>
 80210e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	dde4      	ble.n	80210b0 <_dtoa_r+0xa70>
 80210e6:	9905      	ldr	r1, [sp, #20]
 80210e8:	2201      	movs	r2, #1
 80210ea:	9803      	ldr	r0, [sp, #12]
 80210ec:	f000 ff7c 	bl	8021fe8 <__lshift>
 80210f0:	0031      	movs	r1, r6
 80210f2:	9005      	str	r0, [sp, #20]
 80210f4:	f000 ffe4 	bl	80220c0 <__mcmp>
 80210f8:	2800      	cmp	r0, #0
 80210fa:	dc02      	bgt.n	8021102 <_dtoa_r+0xac2>
 80210fc:	d1d8      	bne.n	80210b0 <_dtoa_r+0xa70>
 80210fe:	07eb      	lsls	r3, r5, #31
 8021100:	d5d6      	bpl.n	80210b0 <_dtoa_r+0xa70>
 8021102:	2d39      	cmp	r5, #57	@ 0x39
 8021104:	d1d2      	bne.n	80210ac <_dtoa_r+0xa6c>
 8021106:	2339      	movs	r3, #57	@ 0x39
 8021108:	9a06      	ldr	r2, [sp, #24]
 802110a:	7013      	strb	r3, [r2, #0]
 802110c:	0023      	movs	r3, r4
 802110e:	001c      	movs	r4, r3
 8021110:	3b01      	subs	r3, #1
 8021112:	781a      	ldrb	r2, [r3, #0]
 8021114:	2a39      	cmp	r2, #57	@ 0x39
 8021116:	d04f      	beq.n	80211b8 <_dtoa_r+0xb78>
 8021118:	3201      	adds	r2, #1
 802111a:	701a      	strb	r2, [r3, #0]
 802111c:	e604      	b.n	8020d28 <_dtoa_r+0x6e8>
 802111e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021120:	2b00      	cmp	r3, #0
 8021122:	dd03      	ble.n	802112c <_dtoa_r+0xaec>
 8021124:	2d39      	cmp	r5, #57	@ 0x39
 8021126:	d0ee      	beq.n	8021106 <_dtoa_r+0xac6>
 8021128:	3501      	adds	r5, #1
 802112a:	e7c1      	b.n	80210b0 <_dtoa_r+0xa70>
 802112c:	9b06      	ldr	r3, [sp, #24]
 802112e:	9a06      	ldr	r2, [sp, #24]
 8021130:	701d      	strb	r5, [r3, #0]
 8021132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021134:	4293      	cmp	r3, r2
 8021136:	d02a      	beq.n	802118e <_dtoa_r+0xb4e>
 8021138:	2300      	movs	r3, #0
 802113a:	220a      	movs	r2, #10
 802113c:	9905      	ldr	r1, [sp, #20]
 802113e:	9803      	ldr	r0, [sp, #12]
 8021140:	f000 fd4c 	bl	8021bdc <__multadd>
 8021144:	9b04      	ldr	r3, [sp, #16]
 8021146:	9005      	str	r0, [sp, #20]
 8021148:	42bb      	cmp	r3, r7
 802114a:	d109      	bne.n	8021160 <_dtoa_r+0xb20>
 802114c:	2300      	movs	r3, #0
 802114e:	220a      	movs	r2, #10
 8021150:	9904      	ldr	r1, [sp, #16]
 8021152:	9803      	ldr	r0, [sp, #12]
 8021154:	f000 fd42 	bl	8021bdc <__multadd>
 8021158:	9004      	str	r0, [sp, #16]
 802115a:	0007      	movs	r7, r0
 802115c:	9406      	str	r4, [sp, #24]
 802115e:	e778      	b.n	8021052 <_dtoa_r+0xa12>
 8021160:	9904      	ldr	r1, [sp, #16]
 8021162:	2300      	movs	r3, #0
 8021164:	220a      	movs	r2, #10
 8021166:	9803      	ldr	r0, [sp, #12]
 8021168:	f000 fd38 	bl	8021bdc <__multadd>
 802116c:	2300      	movs	r3, #0
 802116e:	9004      	str	r0, [sp, #16]
 8021170:	220a      	movs	r2, #10
 8021172:	0039      	movs	r1, r7
 8021174:	9803      	ldr	r0, [sp, #12]
 8021176:	f000 fd31 	bl	8021bdc <__multadd>
 802117a:	e7ee      	b.n	802115a <_dtoa_r+0xb1a>
 802117c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802117e:	2401      	movs	r4, #1
 8021180:	2b00      	cmp	r3, #0
 8021182:	dd00      	ble.n	8021186 <_dtoa_r+0xb46>
 8021184:	001c      	movs	r4, r3
 8021186:	9b08      	ldr	r3, [sp, #32]
 8021188:	191c      	adds	r4, r3, r4
 802118a:	2300      	movs	r3, #0
 802118c:	9304      	str	r3, [sp, #16]
 802118e:	9905      	ldr	r1, [sp, #20]
 8021190:	2201      	movs	r2, #1
 8021192:	9803      	ldr	r0, [sp, #12]
 8021194:	f000 ff28 	bl	8021fe8 <__lshift>
 8021198:	0031      	movs	r1, r6
 802119a:	9005      	str	r0, [sp, #20]
 802119c:	f000 ff90 	bl	80220c0 <__mcmp>
 80211a0:	2800      	cmp	r0, #0
 80211a2:	dcb3      	bgt.n	802110c <_dtoa_r+0xacc>
 80211a4:	d101      	bne.n	80211aa <_dtoa_r+0xb6a>
 80211a6:	07ed      	lsls	r5, r5, #31
 80211a8:	d4b0      	bmi.n	802110c <_dtoa_r+0xacc>
 80211aa:	0023      	movs	r3, r4
 80211ac:	001c      	movs	r4, r3
 80211ae:	3b01      	subs	r3, #1
 80211b0:	781a      	ldrb	r2, [r3, #0]
 80211b2:	2a30      	cmp	r2, #48	@ 0x30
 80211b4:	d0fa      	beq.n	80211ac <_dtoa_r+0xb6c>
 80211b6:	e5b7      	b.n	8020d28 <_dtoa_r+0x6e8>
 80211b8:	9a08      	ldr	r2, [sp, #32]
 80211ba:	429a      	cmp	r2, r3
 80211bc:	d1a7      	bne.n	802110e <_dtoa_r+0xace>
 80211be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211c0:	3301      	adds	r3, #1
 80211c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80211c4:	2331      	movs	r3, #49	@ 0x31
 80211c6:	7013      	strb	r3, [r2, #0]
 80211c8:	e5ae      	b.n	8020d28 <_dtoa_r+0x6e8>
 80211ca:	4b15      	ldr	r3, [pc, #84]	@ (8021220 <_dtoa_r+0xbe0>)
 80211cc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80211ce:	9308      	str	r3, [sp, #32]
 80211d0:	4b14      	ldr	r3, [pc, #80]	@ (8021224 <_dtoa_r+0xbe4>)
 80211d2:	2a00      	cmp	r2, #0
 80211d4:	d001      	beq.n	80211da <_dtoa_r+0xb9a>
 80211d6:	f7ff fa7b 	bl	80206d0 <_dtoa_r+0x90>
 80211da:	f7ff fa7b 	bl	80206d4 <_dtoa_r+0x94>
 80211de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80211e0:	2b01      	cmp	r3, #1
 80211e2:	dc00      	bgt.n	80211e6 <_dtoa_r+0xba6>
 80211e4:	e648      	b.n	8020e78 <_dtoa_r+0x838>
 80211e6:	2001      	movs	r0, #1
 80211e8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80211ea:	e665      	b.n	8020eb8 <_dtoa_r+0x878>
 80211ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	dc00      	bgt.n	80211f4 <_dtoa_r+0xbb4>
 80211f2:	e6d6      	b.n	8020fa2 <_dtoa_r+0x962>
 80211f4:	2400      	movs	r4, #0
 80211f6:	0031      	movs	r1, r6
 80211f8:	9805      	ldr	r0, [sp, #20]
 80211fa:	f7ff f993 	bl	8020524 <quorem>
 80211fe:	9b08      	ldr	r3, [sp, #32]
 8021200:	3030      	adds	r0, #48	@ 0x30
 8021202:	5518      	strb	r0, [r3, r4]
 8021204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021206:	3401      	adds	r4, #1
 8021208:	0005      	movs	r5, r0
 802120a:	429c      	cmp	r4, r3
 802120c:	dab6      	bge.n	802117c <_dtoa_r+0xb3c>
 802120e:	2300      	movs	r3, #0
 8021210:	220a      	movs	r2, #10
 8021212:	9905      	ldr	r1, [sp, #20]
 8021214:	9803      	ldr	r0, [sp, #12]
 8021216:	f000 fce1 	bl	8021bdc <__multadd>
 802121a:	9005      	str	r0, [sp, #20]
 802121c:	e7eb      	b.n	80211f6 <_dtoa_r+0xbb6>
 802121e:	46c0      	nop			@ (mov r8, r8)
 8021220:	08025edd 	.word	0x08025edd
 8021224:	08025ee5 	.word	0x08025ee5

08021228 <_free_r>:
 8021228:	b570      	push	{r4, r5, r6, lr}
 802122a:	0005      	movs	r5, r0
 802122c:	1e0c      	subs	r4, r1, #0
 802122e:	d010      	beq.n	8021252 <_free_r+0x2a>
 8021230:	3c04      	subs	r4, #4
 8021232:	6823      	ldr	r3, [r4, #0]
 8021234:	2b00      	cmp	r3, #0
 8021236:	da00      	bge.n	802123a <_free_r+0x12>
 8021238:	18e4      	adds	r4, r4, r3
 802123a:	0028      	movs	r0, r5
 802123c:	f000 fc56 	bl	8021aec <__malloc_lock>
 8021240:	4a1d      	ldr	r2, [pc, #116]	@ (80212b8 <_free_r+0x90>)
 8021242:	6813      	ldr	r3, [r2, #0]
 8021244:	2b00      	cmp	r3, #0
 8021246:	d105      	bne.n	8021254 <_free_r+0x2c>
 8021248:	6063      	str	r3, [r4, #4]
 802124a:	6014      	str	r4, [r2, #0]
 802124c:	0028      	movs	r0, r5
 802124e:	f000 fc55 	bl	8021afc <__malloc_unlock>
 8021252:	bd70      	pop	{r4, r5, r6, pc}
 8021254:	42a3      	cmp	r3, r4
 8021256:	d908      	bls.n	802126a <_free_r+0x42>
 8021258:	6820      	ldr	r0, [r4, #0]
 802125a:	1821      	adds	r1, r4, r0
 802125c:	428b      	cmp	r3, r1
 802125e:	d1f3      	bne.n	8021248 <_free_r+0x20>
 8021260:	6819      	ldr	r1, [r3, #0]
 8021262:	685b      	ldr	r3, [r3, #4]
 8021264:	1809      	adds	r1, r1, r0
 8021266:	6021      	str	r1, [r4, #0]
 8021268:	e7ee      	b.n	8021248 <_free_r+0x20>
 802126a:	001a      	movs	r2, r3
 802126c:	685b      	ldr	r3, [r3, #4]
 802126e:	2b00      	cmp	r3, #0
 8021270:	d001      	beq.n	8021276 <_free_r+0x4e>
 8021272:	42a3      	cmp	r3, r4
 8021274:	d9f9      	bls.n	802126a <_free_r+0x42>
 8021276:	6811      	ldr	r1, [r2, #0]
 8021278:	1850      	adds	r0, r2, r1
 802127a:	42a0      	cmp	r0, r4
 802127c:	d10b      	bne.n	8021296 <_free_r+0x6e>
 802127e:	6820      	ldr	r0, [r4, #0]
 8021280:	1809      	adds	r1, r1, r0
 8021282:	1850      	adds	r0, r2, r1
 8021284:	6011      	str	r1, [r2, #0]
 8021286:	4283      	cmp	r3, r0
 8021288:	d1e0      	bne.n	802124c <_free_r+0x24>
 802128a:	6818      	ldr	r0, [r3, #0]
 802128c:	685b      	ldr	r3, [r3, #4]
 802128e:	1841      	adds	r1, r0, r1
 8021290:	6011      	str	r1, [r2, #0]
 8021292:	6053      	str	r3, [r2, #4]
 8021294:	e7da      	b.n	802124c <_free_r+0x24>
 8021296:	42a0      	cmp	r0, r4
 8021298:	d902      	bls.n	80212a0 <_free_r+0x78>
 802129a:	230c      	movs	r3, #12
 802129c:	602b      	str	r3, [r5, #0]
 802129e:	e7d5      	b.n	802124c <_free_r+0x24>
 80212a0:	6820      	ldr	r0, [r4, #0]
 80212a2:	1821      	adds	r1, r4, r0
 80212a4:	428b      	cmp	r3, r1
 80212a6:	d103      	bne.n	80212b0 <_free_r+0x88>
 80212a8:	6819      	ldr	r1, [r3, #0]
 80212aa:	685b      	ldr	r3, [r3, #4]
 80212ac:	1809      	adds	r1, r1, r0
 80212ae:	6021      	str	r1, [r4, #0]
 80212b0:	6063      	str	r3, [r4, #4]
 80212b2:	6054      	str	r4, [r2, #4]
 80212b4:	e7ca      	b.n	802124c <_free_r+0x24>
 80212b6:	46c0      	nop			@ (mov r8, r8)
 80212b8:	200037c8 	.word	0x200037c8

080212bc <rshift>:
 80212bc:	0002      	movs	r2, r0
 80212be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212c0:	6904      	ldr	r4, [r0, #16]
 80212c2:	b085      	sub	sp, #20
 80212c4:	3214      	adds	r2, #20
 80212c6:	114b      	asrs	r3, r1, #5
 80212c8:	0016      	movs	r6, r2
 80212ca:	9302      	str	r3, [sp, #8]
 80212cc:	429c      	cmp	r4, r3
 80212ce:	dd31      	ble.n	8021334 <rshift+0x78>
 80212d0:	261f      	movs	r6, #31
 80212d2:	000f      	movs	r7, r1
 80212d4:	009b      	lsls	r3, r3, #2
 80212d6:	00a5      	lsls	r5, r4, #2
 80212d8:	18d3      	adds	r3, r2, r3
 80212da:	4037      	ands	r7, r6
 80212dc:	1955      	adds	r5, r2, r5
 80212de:	9300      	str	r3, [sp, #0]
 80212e0:	9701      	str	r7, [sp, #4]
 80212e2:	4231      	tst	r1, r6
 80212e4:	d10d      	bne.n	8021302 <rshift+0x46>
 80212e6:	0016      	movs	r6, r2
 80212e8:	0019      	movs	r1, r3
 80212ea:	428d      	cmp	r5, r1
 80212ec:	d836      	bhi.n	802135c <rshift+0xa0>
 80212ee:	9b00      	ldr	r3, [sp, #0]
 80212f0:	2600      	movs	r6, #0
 80212f2:	3b03      	subs	r3, #3
 80212f4:	429d      	cmp	r5, r3
 80212f6:	d302      	bcc.n	80212fe <rshift+0x42>
 80212f8:	9b02      	ldr	r3, [sp, #8]
 80212fa:	1ae4      	subs	r4, r4, r3
 80212fc:	00a6      	lsls	r6, r4, #2
 80212fe:	1996      	adds	r6, r2, r6
 8021300:	e018      	b.n	8021334 <rshift+0x78>
 8021302:	2120      	movs	r1, #32
 8021304:	9e01      	ldr	r6, [sp, #4]
 8021306:	9f01      	ldr	r7, [sp, #4]
 8021308:	1b89      	subs	r1, r1, r6
 802130a:	9e00      	ldr	r6, [sp, #0]
 802130c:	9103      	str	r1, [sp, #12]
 802130e:	ce02      	ldmia	r6!, {r1}
 8021310:	4694      	mov	ip, r2
 8021312:	40f9      	lsrs	r1, r7
 8021314:	42b5      	cmp	r5, r6
 8021316:	d816      	bhi.n	8021346 <rshift+0x8a>
 8021318:	9b00      	ldr	r3, [sp, #0]
 802131a:	2600      	movs	r6, #0
 802131c:	3301      	adds	r3, #1
 802131e:	429d      	cmp	r5, r3
 8021320:	d303      	bcc.n	802132a <rshift+0x6e>
 8021322:	9b02      	ldr	r3, [sp, #8]
 8021324:	1ae4      	subs	r4, r4, r3
 8021326:	00a6      	lsls	r6, r4, #2
 8021328:	3e04      	subs	r6, #4
 802132a:	1996      	adds	r6, r2, r6
 802132c:	6031      	str	r1, [r6, #0]
 802132e:	2900      	cmp	r1, #0
 8021330:	d000      	beq.n	8021334 <rshift+0x78>
 8021332:	3604      	adds	r6, #4
 8021334:	1ab1      	subs	r1, r6, r2
 8021336:	1089      	asrs	r1, r1, #2
 8021338:	6101      	str	r1, [r0, #16]
 802133a:	4296      	cmp	r6, r2
 802133c:	d101      	bne.n	8021342 <rshift+0x86>
 802133e:	2300      	movs	r3, #0
 8021340:	6143      	str	r3, [r0, #20]
 8021342:	b005      	add	sp, #20
 8021344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021346:	6837      	ldr	r7, [r6, #0]
 8021348:	9b03      	ldr	r3, [sp, #12]
 802134a:	409f      	lsls	r7, r3
 802134c:	430f      	orrs	r7, r1
 802134e:	4661      	mov	r1, ip
 8021350:	c180      	stmia	r1!, {r7}
 8021352:	468c      	mov	ip, r1
 8021354:	9b01      	ldr	r3, [sp, #4]
 8021356:	ce02      	ldmia	r6!, {r1}
 8021358:	40d9      	lsrs	r1, r3
 802135a:	e7db      	b.n	8021314 <rshift+0x58>
 802135c:	c980      	ldmia	r1!, {r7}
 802135e:	c680      	stmia	r6!, {r7}
 8021360:	e7c3      	b.n	80212ea <rshift+0x2e>

08021362 <__hexdig_fun>:
 8021362:	0002      	movs	r2, r0
 8021364:	3a30      	subs	r2, #48	@ 0x30
 8021366:	0003      	movs	r3, r0
 8021368:	2a09      	cmp	r2, #9
 802136a:	d802      	bhi.n	8021372 <__hexdig_fun+0x10>
 802136c:	3b20      	subs	r3, #32
 802136e:	b2d8      	uxtb	r0, r3
 8021370:	4770      	bx	lr
 8021372:	0002      	movs	r2, r0
 8021374:	3a61      	subs	r2, #97	@ 0x61
 8021376:	2a05      	cmp	r2, #5
 8021378:	d801      	bhi.n	802137e <__hexdig_fun+0x1c>
 802137a:	3b47      	subs	r3, #71	@ 0x47
 802137c:	e7f7      	b.n	802136e <__hexdig_fun+0xc>
 802137e:	001a      	movs	r2, r3
 8021380:	3a41      	subs	r2, #65	@ 0x41
 8021382:	2000      	movs	r0, #0
 8021384:	2a05      	cmp	r2, #5
 8021386:	d8f3      	bhi.n	8021370 <__hexdig_fun+0xe>
 8021388:	3b27      	subs	r3, #39	@ 0x27
 802138a:	e7f0      	b.n	802136e <__hexdig_fun+0xc>

0802138c <__gethex>:
 802138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802138e:	b089      	sub	sp, #36	@ 0x24
 8021390:	9307      	str	r3, [sp, #28]
 8021392:	680b      	ldr	r3, [r1, #0]
 8021394:	9201      	str	r2, [sp, #4]
 8021396:	9003      	str	r0, [sp, #12]
 8021398:	9106      	str	r1, [sp, #24]
 802139a:	1c9a      	adds	r2, r3, #2
 802139c:	0011      	movs	r1, r2
 802139e:	3201      	adds	r2, #1
 80213a0:	1e50      	subs	r0, r2, #1
 80213a2:	7800      	ldrb	r0, [r0, #0]
 80213a4:	2830      	cmp	r0, #48	@ 0x30
 80213a6:	d0f9      	beq.n	802139c <__gethex+0x10>
 80213a8:	1acb      	subs	r3, r1, r3
 80213aa:	3b02      	subs	r3, #2
 80213ac:	9305      	str	r3, [sp, #20]
 80213ae:	9100      	str	r1, [sp, #0]
 80213b0:	f7ff ffd7 	bl	8021362 <__hexdig_fun>
 80213b4:	2300      	movs	r3, #0
 80213b6:	001d      	movs	r5, r3
 80213b8:	9302      	str	r3, [sp, #8]
 80213ba:	4298      	cmp	r0, r3
 80213bc:	d11e      	bne.n	80213fc <__gethex+0x70>
 80213be:	2201      	movs	r2, #1
 80213c0:	49a6      	ldr	r1, [pc, #664]	@ (802165c <__gethex+0x2d0>)
 80213c2:	9800      	ldr	r0, [sp, #0]
 80213c4:	f7fe ffd8 	bl	8020378 <strncmp>
 80213c8:	0007      	movs	r7, r0
 80213ca:	42a8      	cmp	r0, r5
 80213cc:	d000      	beq.n	80213d0 <__gethex+0x44>
 80213ce:	e06a      	b.n	80214a6 <__gethex+0x11a>
 80213d0:	9b00      	ldr	r3, [sp, #0]
 80213d2:	7858      	ldrb	r0, [r3, #1]
 80213d4:	1c5c      	adds	r4, r3, #1
 80213d6:	f7ff ffc4 	bl	8021362 <__hexdig_fun>
 80213da:	2301      	movs	r3, #1
 80213dc:	9302      	str	r3, [sp, #8]
 80213de:	42a8      	cmp	r0, r5
 80213e0:	d02f      	beq.n	8021442 <__gethex+0xb6>
 80213e2:	9400      	str	r4, [sp, #0]
 80213e4:	9b00      	ldr	r3, [sp, #0]
 80213e6:	7818      	ldrb	r0, [r3, #0]
 80213e8:	2830      	cmp	r0, #48	@ 0x30
 80213ea:	d009      	beq.n	8021400 <__gethex+0x74>
 80213ec:	f7ff ffb9 	bl	8021362 <__hexdig_fun>
 80213f0:	4242      	negs	r2, r0
 80213f2:	4142      	adcs	r2, r0
 80213f4:	2301      	movs	r3, #1
 80213f6:	0025      	movs	r5, r4
 80213f8:	9202      	str	r2, [sp, #8]
 80213fa:	9305      	str	r3, [sp, #20]
 80213fc:	9c00      	ldr	r4, [sp, #0]
 80213fe:	e004      	b.n	802140a <__gethex+0x7e>
 8021400:	9b00      	ldr	r3, [sp, #0]
 8021402:	3301      	adds	r3, #1
 8021404:	9300      	str	r3, [sp, #0]
 8021406:	e7ed      	b.n	80213e4 <__gethex+0x58>
 8021408:	3401      	adds	r4, #1
 802140a:	7820      	ldrb	r0, [r4, #0]
 802140c:	f7ff ffa9 	bl	8021362 <__hexdig_fun>
 8021410:	1e07      	subs	r7, r0, #0
 8021412:	d1f9      	bne.n	8021408 <__gethex+0x7c>
 8021414:	2201      	movs	r2, #1
 8021416:	0020      	movs	r0, r4
 8021418:	4990      	ldr	r1, [pc, #576]	@ (802165c <__gethex+0x2d0>)
 802141a:	f7fe ffad 	bl	8020378 <strncmp>
 802141e:	2800      	cmp	r0, #0
 8021420:	d10d      	bne.n	802143e <__gethex+0xb2>
 8021422:	2d00      	cmp	r5, #0
 8021424:	d106      	bne.n	8021434 <__gethex+0xa8>
 8021426:	3401      	adds	r4, #1
 8021428:	0025      	movs	r5, r4
 802142a:	7820      	ldrb	r0, [r4, #0]
 802142c:	f7ff ff99 	bl	8021362 <__hexdig_fun>
 8021430:	2800      	cmp	r0, #0
 8021432:	d102      	bne.n	802143a <__gethex+0xae>
 8021434:	1b2d      	subs	r5, r5, r4
 8021436:	00af      	lsls	r7, r5, #2
 8021438:	e003      	b.n	8021442 <__gethex+0xb6>
 802143a:	3401      	adds	r4, #1
 802143c:	e7f5      	b.n	802142a <__gethex+0x9e>
 802143e:	2d00      	cmp	r5, #0
 8021440:	d1f8      	bne.n	8021434 <__gethex+0xa8>
 8021442:	2220      	movs	r2, #32
 8021444:	7823      	ldrb	r3, [r4, #0]
 8021446:	0026      	movs	r6, r4
 8021448:	4393      	bics	r3, r2
 802144a:	2b50      	cmp	r3, #80	@ 0x50
 802144c:	d11d      	bne.n	802148a <__gethex+0xfe>
 802144e:	7863      	ldrb	r3, [r4, #1]
 8021450:	2b2b      	cmp	r3, #43	@ 0x2b
 8021452:	d02d      	beq.n	80214b0 <__gethex+0x124>
 8021454:	2b2d      	cmp	r3, #45	@ 0x2d
 8021456:	d02f      	beq.n	80214b8 <__gethex+0x12c>
 8021458:	2300      	movs	r3, #0
 802145a:	1c66      	adds	r6, r4, #1
 802145c:	9304      	str	r3, [sp, #16]
 802145e:	7830      	ldrb	r0, [r6, #0]
 8021460:	f7ff ff7f 	bl	8021362 <__hexdig_fun>
 8021464:	1e43      	subs	r3, r0, #1
 8021466:	b2db      	uxtb	r3, r3
 8021468:	0005      	movs	r5, r0
 802146a:	2b18      	cmp	r3, #24
 802146c:	d82a      	bhi.n	80214c4 <__gethex+0x138>
 802146e:	7870      	ldrb	r0, [r6, #1]
 8021470:	f7ff ff77 	bl	8021362 <__hexdig_fun>
 8021474:	1e43      	subs	r3, r0, #1
 8021476:	b2db      	uxtb	r3, r3
 8021478:	3601      	adds	r6, #1
 802147a:	3d10      	subs	r5, #16
 802147c:	2b18      	cmp	r3, #24
 802147e:	d91d      	bls.n	80214bc <__gethex+0x130>
 8021480:	9b04      	ldr	r3, [sp, #16]
 8021482:	2b00      	cmp	r3, #0
 8021484:	d000      	beq.n	8021488 <__gethex+0xfc>
 8021486:	426d      	negs	r5, r5
 8021488:	197f      	adds	r7, r7, r5
 802148a:	9b06      	ldr	r3, [sp, #24]
 802148c:	601e      	str	r6, [r3, #0]
 802148e:	9b02      	ldr	r3, [sp, #8]
 8021490:	2b00      	cmp	r3, #0
 8021492:	d019      	beq.n	80214c8 <__gethex+0x13c>
 8021494:	9b05      	ldr	r3, [sp, #20]
 8021496:	2606      	movs	r6, #6
 8021498:	425a      	negs	r2, r3
 802149a:	4153      	adcs	r3, r2
 802149c:	425b      	negs	r3, r3
 802149e:	401e      	ands	r6, r3
 80214a0:	0030      	movs	r0, r6
 80214a2:	b009      	add	sp, #36	@ 0x24
 80214a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214a6:	2301      	movs	r3, #1
 80214a8:	2700      	movs	r7, #0
 80214aa:	9c00      	ldr	r4, [sp, #0]
 80214ac:	9302      	str	r3, [sp, #8]
 80214ae:	e7c8      	b.n	8021442 <__gethex+0xb6>
 80214b0:	2300      	movs	r3, #0
 80214b2:	9304      	str	r3, [sp, #16]
 80214b4:	1ca6      	adds	r6, r4, #2
 80214b6:	e7d2      	b.n	802145e <__gethex+0xd2>
 80214b8:	2301      	movs	r3, #1
 80214ba:	e7fa      	b.n	80214b2 <__gethex+0x126>
 80214bc:	230a      	movs	r3, #10
 80214be:	435d      	muls	r5, r3
 80214c0:	182d      	adds	r5, r5, r0
 80214c2:	e7d4      	b.n	802146e <__gethex+0xe2>
 80214c4:	0026      	movs	r6, r4
 80214c6:	e7e0      	b.n	802148a <__gethex+0xfe>
 80214c8:	9b00      	ldr	r3, [sp, #0]
 80214ca:	9902      	ldr	r1, [sp, #8]
 80214cc:	1ae3      	subs	r3, r4, r3
 80214ce:	3b01      	subs	r3, #1
 80214d0:	2b07      	cmp	r3, #7
 80214d2:	dc0a      	bgt.n	80214ea <__gethex+0x15e>
 80214d4:	9803      	ldr	r0, [sp, #12]
 80214d6:	f000 fb19 	bl	8021b0c <_Balloc>
 80214da:	1e05      	subs	r5, r0, #0
 80214dc:	d108      	bne.n	80214f0 <__gethex+0x164>
 80214de:	002a      	movs	r2, r5
 80214e0:	21e4      	movs	r1, #228	@ 0xe4
 80214e2:	4b5f      	ldr	r3, [pc, #380]	@ (8021660 <__gethex+0x2d4>)
 80214e4:	485f      	ldr	r0, [pc, #380]	@ (8021664 <__gethex+0x2d8>)
 80214e6:	f001 fbf1 	bl	8022ccc <__assert_func>
 80214ea:	3101      	adds	r1, #1
 80214ec:	105b      	asrs	r3, r3, #1
 80214ee:	e7ef      	b.n	80214d0 <__gethex+0x144>
 80214f0:	0003      	movs	r3, r0
 80214f2:	3314      	adds	r3, #20
 80214f4:	9302      	str	r3, [sp, #8]
 80214f6:	9305      	str	r3, [sp, #20]
 80214f8:	2300      	movs	r3, #0
 80214fa:	001e      	movs	r6, r3
 80214fc:	9304      	str	r3, [sp, #16]
 80214fe:	9b00      	ldr	r3, [sp, #0]
 8021500:	42a3      	cmp	r3, r4
 8021502:	d338      	bcc.n	8021576 <__gethex+0x1ea>
 8021504:	9c05      	ldr	r4, [sp, #20]
 8021506:	9b02      	ldr	r3, [sp, #8]
 8021508:	c440      	stmia	r4!, {r6}
 802150a:	1ae4      	subs	r4, r4, r3
 802150c:	10a4      	asrs	r4, r4, #2
 802150e:	0030      	movs	r0, r6
 8021510:	612c      	str	r4, [r5, #16]
 8021512:	f000 fbf3 	bl	8021cfc <__hi0bits>
 8021516:	9b01      	ldr	r3, [sp, #4]
 8021518:	0164      	lsls	r4, r4, #5
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	1a26      	subs	r6, r4, r0
 802151e:	9300      	str	r3, [sp, #0]
 8021520:	429e      	cmp	r6, r3
 8021522:	dd52      	ble.n	80215ca <__gethex+0x23e>
 8021524:	1af6      	subs	r6, r6, r3
 8021526:	0031      	movs	r1, r6
 8021528:	0028      	movs	r0, r5
 802152a:	f000 ff96 	bl	802245a <__any_on>
 802152e:	1e04      	subs	r4, r0, #0
 8021530:	d00f      	beq.n	8021552 <__gethex+0x1c6>
 8021532:	2401      	movs	r4, #1
 8021534:	231f      	movs	r3, #31
 8021536:	0020      	movs	r0, r4
 8021538:	1e72      	subs	r2, r6, #1
 802153a:	4013      	ands	r3, r2
 802153c:	4098      	lsls	r0, r3
 802153e:	0003      	movs	r3, r0
 8021540:	1151      	asrs	r1, r2, #5
 8021542:	9802      	ldr	r0, [sp, #8]
 8021544:	0089      	lsls	r1, r1, #2
 8021546:	5809      	ldr	r1, [r1, r0]
 8021548:	4219      	tst	r1, r3
 802154a:	d002      	beq.n	8021552 <__gethex+0x1c6>
 802154c:	42a2      	cmp	r2, r4
 802154e:	dc34      	bgt.n	80215ba <__gethex+0x22e>
 8021550:	2402      	movs	r4, #2
 8021552:	0031      	movs	r1, r6
 8021554:	0028      	movs	r0, r5
 8021556:	f7ff feb1 	bl	80212bc <rshift>
 802155a:	19bf      	adds	r7, r7, r6
 802155c:	9b01      	ldr	r3, [sp, #4]
 802155e:	689b      	ldr	r3, [r3, #8]
 8021560:	42bb      	cmp	r3, r7
 8021562:	da42      	bge.n	80215ea <__gethex+0x25e>
 8021564:	0029      	movs	r1, r5
 8021566:	9803      	ldr	r0, [sp, #12]
 8021568:	f000 fb14 	bl	8021b94 <_Bfree>
 802156c:	2300      	movs	r3, #0
 802156e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021570:	26a3      	movs	r6, #163	@ 0xa3
 8021572:	6013      	str	r3, [r2, #0]
 8021574:	e794      	b.n	80214a0 <__gethex+0x114>
 8021576:	3c01      	subs	r4, #1
 8021578:	7823      	ldrb	r3, [r4, #0]
 802157a:	2b2e      	cmp	r3, #46	@ 0x2e
 802157c:	d012      	beq.n	80215a4 <__gethex+0x218>
 802157e:	9b04      	ldr	r3, [sp, #16]
 8021580:	2b20      	cmp	r3, #32
 8021582:	d104      	bne.n	802158e <__gethex+0x202>
 8021584:	9b05      	ldr	r3, [sp, #20]
 8021586:	c340      	stmia	r3!, {r6}
 8021588:	2600      	movs	r6, #0
 802158a:	9305      	str	r3, [sp, #20]
 802158c:	9604      	str	r6, [sp, #16]
 802158e:	7820      	ldrb	r0, [r4, #0]
 8021590:	f7ff fee7 	bl	8021362 <__hexdig_fun>
 8021594:	230f      	movs	r3, #15
 8021596:	4018      	ands	r0, r3
 8021598:	9b04      	ldr	r3, [sp, #16]
 802159a:	4098      	lsls	r0, r3
 802159c:	3304      	adds	r3, #4
 802159e:	4306      	orrs	r6, r0
 80215a0:	9304      	str	r3, [sp, #16]
 80215a2:	e7ac      	b.n	80214fe <__gethex+0x172>
 80215a4:	9b00      	ldr	r3, [sp, #0]
 80215a6:	42a3      	cmp	r3, r4
 80215a8:	d8e9      	bhi.n	802157e <__gethex+0x1f2>
 80215aa:	2201      	movs	r2, #1
 80215ac:	0020      	movs	r0, r4
 80215ae:	492b      	ldr	r1, [pc, #172]	@ (802165c <__gethex+0x2d0>)
 80215b0:	f7fe fee2 	bl	8020378 <strncmp>
 80215b4:	2800      	cmp	r0, #0
 80215b6:	d1e2      	bne.n	802157e <__gethex+0x1f2>
 80215b8:	e7a1      	b.n	80214fe <__gethex+0x172>
 80215ba:	0028      	movs	r0, r5
 80215bc:	1eb1      	subs	r1, r6, #2
 80215be:	f000 ff4c 	bl	802245a <__any_on>
 80215c2:	2800      	cmp	r0, #0
 80215c4:	d0c4      	beq.n	8021550 <__gethex+0x1c4>
 80215c6:	2403      	movs	r4, #3
 80215c8:	e7c3      	b.n	8021552 <__gethex+0x1c6>
 80215ca:	9b00      	ldr	r3, [sp, #0]
 80215cc:	2400      	movs	r4, #0
 80215ce:	429e      	cmp	r6, r3
 80215d0:	dac4      	bge.n	802155c <__gethex+0x1d0>
 80215d2:	1b9e      	subs	r6, r3, r6
 80215d4:	0029      	movs	r1, r5
 80215d6:	0032      	movs	r2, r6
 80215d8:	9803      	ldr	r0, [sp, #12]
 80215da:	f000 fd05 	bl	8021fe8 <__lshift>
 80215de:	0003      	movs	r3, r0
 80215e0:	3314      	adds	r3, #20
 80215e2:	0005      	movs	r5, r0
 80215e4:	1bbf      	subs	r7, r7, r6
 80215e6:	9302      	str	r3, [sp, #8]
 80215e8:	e7b8      	b.n	802155c <__gethex+0x1d0>
 80215ea:	9b01      	ldr	r3, [sp, #4]
 80215ec:	685e      	ldr	r6, [r3, #4]
 80215ee:	42be      	cmp	r6, r7
 80215f0:	dd6f      	ble.n	80216d2 <__gethex+0x346>
 80215f2:	9b00      	ldr	r3, [sp, #0]
 80215f4:	1bf6      	subs	r6, r6, r7
 80215f6:	42b3      	cmp	r3, r6
 80215f8:	dc36      	bgt.n	8021668 <__gethex+0x2dc>
 80215fa:	9b01      	ldr	r3, [sp, #4]
 80215fc:	68db      	ldr	r3, [r3, #12]
 80215fe:	2b02      	cmp	r3, #2
 8021600:	d024      	beq.n	802164c <__gethex+0x2c0>
 8021602:	2b03      	cmp	r3, #3
 8021604:	d026      	beq.n	8021654 <__gethex+0x2c8>
 8021606:	2b01      	cmp	r3, #1
 8021608:	d117      	bne.n	802163a <__gethex+0x2ae>
 802160a:	9b00      	ldr	r3, [sp, #0]
 802160c:	42b3      	cmp	r3, r6
 802160e:	d114      	bne.n	802163a <__gethex+0x2ae>
 8021610:	2b01      	cmp	r3, #1
 8021612:	d10b      	bne.n	802162c <__gethex+0x2a0>
 8021614:	9b01      	ldr	r3, [sp, #4]
 8021616:	9a07      	ldr	r2, [sp, #28]
 8021618:	685b      	ldr	r3, [r3, #4]
 802161a:	2662      	movs	r6, #98	@ 0x62
 802161c:	6013      	str	r3, [r2, #0]
 802161e:	2301      	movs	r3, #1
 8021620:	9a02      	ldr	r2, [sp, #8]
 8021622:	612b      	str	r3, [r5, #16]
 8021624:	6013      	str	r3, [r2, #0]
 8021626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021628:	601d      	str	r5, [r3, #0]
 802162a:	e739      	b.n	80214a0 <__gethex+0x114>
 802162c:	9900      	ldr	r1, [sp, #0]
 802162e:	0028      	movs	r0, r5
 8021630:	3901      	subs	r1, #1
 8021632:	f000 ff12 	bl	802245a <__any_on>
 8021636:	2800      	cmp	r0, #0
 8021638:	d1ec      	bne.n	8021614 <__gethex+0x288>
 802163a:	0029      	movs	r1, r5
 802163c:	9803      	ldr	r0, [sp, #12]
 802163e:	f000 faa9 	bl	8021b94 <_Bfree>
 8021642:	2300      	movs	r3, #0
 8021644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021646:	2650      	movs	r6, #80	@ 0x50
 8021648:	6013      	str	r3, [r2, #0]
 802164a:	e729      	b.n	80214a0 <__gethex+0x114>
 802164c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802164e:	2b00      	cmp	r3, #0
 8021650:	d1f3      	bne.n	802163a <__gethex+0x2ae>
 8021652:	e7df      	b.n	8021614 <__gethex+0x288>
 8021654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021656:	2b00      	cmp	r3, #0
 8021658:	d1dc      	bne.n	8021614 <__gethex+0x288>
 802165a:	e7ee      	b.n	802163a <__gethex+0x2ae>
 802165c:	08025d48 	.word	0x08025d48
 8021660:	08025f59 	.word	0x08025f59
 8021664:	08025f6a 	.word	0x08025f6a
 8021668:	1e77      	subs	r7, r6, #1
 802166a:	2c00      	cmp	r4, #0
 802166c:	d12f      	bne.n	80216ce <__gethex+0x342>
 802166e:	2f00      	cmp	r7, #0
 8021670:	d004      	beq.n	802167c <__gethex+0x2f0>
 8021672:	0039      	movs	r1, r7
 8021674:	0028      	movs	r0, r5
 8021676:	f000 fef0 	bl	802245a <__any_on>
 802167a:	0004      	movs	r4, r0
 802167c:	231f      	movs	r3, #31
 802167e:	117a      	asrs	r2, r7, #5
 8021680:	401f      	ands	r7, r3
 8021682:	3b1e      	subs	r3, #30
 8021684:	40bb      	lsls	r3, r7
 8021686:	9902      	ldr	r1, [sp, #8]
 8021688:	0092      	lsls	r2, r2, #2
 802168a:	5852      	ldr	r2, [r2, r1]
 802168c:	421a      	tst	r2, r3
 802168e:	d001      	beq.n	8021694 <__gethex+0x308>
 8021690:	2302      	movs	r3, #2
 8021692:	431c      	orrs	r4, r3
 8021694:	9b00      	ldr	r3, [sp, #0]
 8021696:	0031      	movs	r1, r6
 8021698:	1b9b      	subs	r3, r3, r6
 802169a:	2602      	movs	r6, #2
 802169c:	0028      	movs	r0, r5
 802169e:	9300      	str	r3, [sp, #0]
 80216a0:	f7ff fe0c 	bl	80212bc <rshift>
 80216a4:	9b01      	ldr	r3, [sp, #4]
 80216a6:	685f      	ldr	r7, [r3, #4]
 80216a8:	2c00      	cmp	r4, #0
 80216aa:	d03f      	beq.n	802172c <__gethex+0x3a0>
 80216ac:	9b01      	ldr	r3, [sp, #4]
 80216ae:	68db      	ldr	r3, [r3, #12]
 80216b0:	2b02      	cmp	r3, #2
 80216b2:	d010      	beq.n	80216d6 <__gethex+0x34a>
 80216b4:	2b03      	cmp	r3, #3
 80216b6:	d012      	beq.n	80216de <__gethex+0x352>
 80216b8:	2b01      	cmp	r3, #1
 80216ba:	d106      	bne.n	80216ca <__gethex+0x33e>
 80216bc:	07a2      	lsls	r2, r4, #30
 80216be:	d504      	bpl.n	80216ca <__gethex+0x33e>
 80216c0:	9a02      	ldr	r2, [sp, #8]
 80216c2:	6812      	ldr	r2, [r2, #0]
 80216c4:	4314      	orrs	r4, r2
 80216c6:	421c      	tst	r4, r3
 80216c8:	d10c      	bne.n	80216e4 <__gethex+0x358>
 80216ca:	2310      	movs	r3, #16
 80216cc:	e02d      	b.n	802172a <__gethex+0x39e>
 80216ce:	2401      	movs	r4, #1
 80216d0:	e7d4      	b.n	802167c <__gethex+0x2f0>
 80216d2:	2601      	movs	r6, #1
 80216d4:	e7e8      	b.n	80216a8 <__gethex+0x31c>
 80216d6:	2301      	movs	r3, #1
 80216d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80216da:	1a9b      	subs	r3, r3, r2
 80216dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	d0f2      	beq.n	80216ca <__gethex+0x33e>
 80216e4:	692b      	ldr	r3, [r5, #16]
 80216e6:	2000      	movs	r0, #0
 80216e8:	9302      	str	r3, [sp, #8]
 80216ea:	009b      	lsls	r3, r3, #2
 80216ec:	9304      	str	r3, [sp, #16]
 80216ee:	002b      	movs	r3, r5
 80216f0:	9a04      	ldr	r2, [sp, #16]
 80216f2:	3314      	adds	r3, #20
 80216f4:	1899      	adds	r1, r3, r2
 80216f6:	681a      	ldr	r2, [r3, #0]
 80216f8:	1c54      	adds	r4, r2, #1
 80216fa:	d01c      	beq.n	8021736 <__gethex+0x3aa>
 80216fc:	3201      	adds	r2, #1
 80216fe:	601a      	str	r2, [r3, #0]
 8021700:	002b      	movs	r3, r5
 8021702:	3314      	adds	r3, #20
 8021704:	2e02      	cmp	r6, #2
 8021706:	d13f      	bne.n	8021788 <__gethex+0x3fc>
 8021708:	9a01      	ldr	r2, [sp, #4]
 802170a:	9900      	ldr	r1, [sp, #0]
 802170c:	6812      	ldr	r2, [r2, #0]
 802170e:	3a01      	subs	r2, #1
 8021710:	428a      	cmp	r2, r1
 8021712:	d109      	bne.n	8021728 <__gethex+0x39c>
 8021714:	000a      	movs	r2, r1
 8021716:	201f      	movs	r0, #31
 8021718:	4010      	ands	r0, r2
 802171a:	2201      	movs	r2, #1
 802171c:	4082      	lsls	r2, r0
 802171e:	1149      	asrs	r1, r1, #5
 8021720:	0089      	lsls	r1, r1, #2
 8021722:	58cb      	ldr	r3, [r1, r3]
 8021724:	4213      	tst	r3, r2
 8021726:	d13d      	bne.n	80217a4 <__gethex+0x418>
 8021728:	2320      	movs	r3, #32
 802172a:	431e      	orrs	r6, r3
 802172c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802172e:	601d      	str	r5, [r3, #0]
 8021730:	9b07      	ldr	r3, [sp, #28]
 8021732:	601f      	str	r7, [r3, #0]
 8021734:	e6b4      	b.n	80214a0 <__gethex+0x114>
 8021736:	c301      	stmia	r3!, {r0}
 8021738:	4299      	cmp	r1, r3
 802173a:	d8dc      	bhi.n	80216f6 <__gethex+0x36a>
 802173c:	68ab      	ldr	r3, [r5, #8]
 802173e:	9a02      	ldr	r2, [sp, #8]
 8021740:	429a      	cmp	r2, r3
 8021742:	db18      	blt.n	8021776 <__gethex+0x3ea>
 8021744:	6869      	ldr	r1, [r5, #4]
 8021746:	9803      	ldr	r0, [sp, #12]
 8021748:	3101      	adds	r1, #1
 802174a:	f000 f9df 	bl	8021b0c <_Balloc>
 802174e:	1e04      	subs	r4, r0, #0
 8021750:	d104      	bne.n	802175c <__gethex+0x3d0>
 8021752:	0022      	movs	r2, r4
 8021754:	2184      	movs	r1, #132	@ 0x84
 8021756:	4b1d      	ldr	r3, [pc, #116]	@ (80217cc <__gethex+0x440>)
 8021758:	481d      	ldr	r0, [pc, #116]	@ (80217d0 <__gethex+0x444>)
 802175a:	e6c4      	b.n	80214e6 <__gethex+0x15a>
 802175c:	0029      	movs	r1, r5
 802175e:	692a      	ldr	r2, [r5, #16]
 8021760:	310c      	adds	r1, #12
 8021762:	3202      	adds	r2, #2
 8021764:	0092      	lsls	r2, r2, #2
 8021766:	300c      	adds	r0, #12
 8021768:	f7fe fecc 	bl	8020504 <memcpy>
 802176c:	0029      	movs	r1, r5
 802176e:	9803      	ldr	r0, [sp, #12]
 8021770:	f000 fa10 	bl	8021b94 <_Bfree>
 8021774:	0025      	movs	r5, r4
 8021776:	692b      	ldr	r3, [r5, #16]
 8021778:	1c5a      	adds	r2, r3, #1
 802177a:	612a      	str	r2, [r5, #16]
 802177c:	2201      	movs	r2, #1
 802177e:	3304      	adds	r3, #4
 8021780:	009b      	lsls	r3, r3, #2
 8021782:	18eb      	adds	r3, r5, r3
 8021784:	605a      	str	r2, [r3, #4]
 8021786:	e7bb      	b.n	8021700 <__gethex+0x374>
 8021788:	692a      	ldr	r2, [r5, #16]
 802178a:	9902      	ldr	r1, [sp, #8]
 802178c:	428a      	cmp	r2, r1
 802178e:	dd0b      	ble.n	80217a8 <__gethex+0x41c>
 8021790:	2101      	movs	r1, #1
 8021792:	0028      	movs	r0, r5
 8021794:	f7ff fd92 	bl	80212bc <rshift>
 8021798:	9b01      	ldr	r3, [sp, #4]
 802179a:	3701      	adds	r7, #1
 802179c:	689b      	ldr	r3, [r3, #8]
 802179e:	42bb      	cmp	r3, r7
 80217a0:	da00      	bge.n	80217a4 <__gethex+0x418>
 80217a2:	e6df      	b.n	8021564 <__gethex+0x1d8>
 80217a4:	2601      	movs	r6, #1
 80217a6:	e7bf      	b.n	8021728 <__gethex+0x39c>
 80217a8:	221f      	movs	r2, #31
 80217aa:	9c00      	ldr	r4, [sp, #0]
 80217ac:	9900      	ldr	r1, [sp, #0]
 80217ae:	4014      	ands	r4, r2
 80217b0:	4211      	tst	r1, r2
 80217b2:	d0f7      	beq.n	80217a4 <__gethex+0x418>
 80217b4:	9a04      	ldr	r2, [sp, #16]
 80217b6:	189b      	adds	r3, r3, r2
 80217b8:	3b04      	subs	r3, #4
 80217ba:	6818      	ldr	r0, [r3, #0]
 80217bc:	f000 fa9e 	bl	8021cfc <__hi0bits>
 80217c0:	2320      	movs	r3, #32
 80217c2:	1b1b      	subs	r3, r3, r4
 80217c4:	4298      	cmp	r0, r3
 80217c6:	dbe3      	blt.n	8021790 <__gethex+0x404>
 80217c8:	e7ec      	b.n	80217a4 <__gethex+0x418>
 80217ca:	46c0      	nop			@ (mov r8, r8)
 80217cc:	08025f59 	.word	0x08025f59
 80217d0:	08025f6a 	.word	0x08025f6a

080217d4 <L_shift>:
 80217d4:	2308      	movs	r3, #8
 80217d6:	b570      	push	{r4, r5, r6, lr}
 80217d8:	2520      	movs	r5, #32
 80217da:	1a9a      	subs	r2, r3, r2
 80217dc:	0092      	lsls	r2, r2, #2
 80217de:	1aad      	subs	r5, r5, r2
 80217e0:	6843      	ldr	r3, [r0, #4]
 80217e2:	6804      	ldr	r4, [r0, #0]
 80217e4:	001e      	movs	r6, r3
 80217e6:	40ae      	lsls	r6, r5
 80217e8:	40d3      	lsrs	r3, r2
 80217ea:	4334      	orrs	r4, r6
 80217ec:	6004      	str	r4, [r0, #0]
 80217ee:	6043      	str	r3, [r0, #4]
 80217f0:	3004      	adds	r0, #4
 80217f2:	4288      	cmp	r0, r1
 80217f4:	d3f4      	bcc.n	80217e0 <L_shift+0xc>
 80217f6:	bd70      	pop	{r4, r5, r6, pc}

080217f8 <__match>:
 80217f8:	b530      	push	{r4, r5, lr}
 80217fa:	6803      	ldr	r3, [r0, #0]
 80217fc:	780c      	ldrb	r4, [r1, #0]
 80217fe:	3301      	adds	r3, #1
 8021800:	2c00      	cmp	r4, #0
 8021802:	d102      	bne.n	802180a <__match+0x12>
 8021804:	6003      	str	r3, [r0, #0]
 8021806:	2001      	movs	r0, #1
 8021808:	bd30      	pop	{r4, r5, pc}
 802180a:	781a      	ldrb	r2, [r3, #0]
 802180c:	0015      	movs	r5, r2
 802180e:	3d41      	subs	r5, #65	@ 0x41
 8021810:	2d19      	cmp	r5, #25
 8021812:	d800      	bhi.n	8021816 <__match+0x1e>
 8021814:	3220      	adds	r2, #32
 8021816:	3101      	adds	r1, #1
 8021818:	42a2      	cmp	r2, r4
 802181a:	d0ef      	beq.n	80217fc <__match+0x4>
 802181c:	2000      	movs	r0, #0
 802181e:	e7f3      	b.n	8021808 <__match+0x10>

08021820 <__hexnan>:
 8021820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021822:	680b      	ldr	r3, [r1, #0]
 8021824:	b08b      	sub	sp, #44	@ 0x2c
 8021826:	9201      	str	r2, [sp, #4]
 8021828:	9901      	ldr	r1, [sp, #4]
 802182a:	115a      	asrs	r2, r3, #5
 802182c:	0092      	lsls	r2, r2, #2
 802182e:	188a      	adds	r2, r1, r2
 8021830:	9202      	str	r2, [sp, #8]
 8021832:	0019      	movs	r1, r3
 8021834:	221f      	movs	r2, #31
 8021836:	4011      	ands	r1, r2
 8021838:	9008      	str	r0, [sp, #32]
 802183a:	9106      	str	r1, [sp, #24]
 802183c:	4213      	tst	r3, r2
 802183e:	d002      	beq.n	8021846 <__hexnan+0x26>
 8021840:	9b02      	ldr	r3, [sp, #8]
 8021842:	3304      	adds	r3, #4
 8021844:	9302      	str	r3, [sp, #8]
 8021846:	9b02      	ldr	r3, [sp, #8]
 8021848:	2500      	movs	r5, #0
 802184a:	1f1f      	subs	r7, r3, #4
 802184c:	003e      	movs	r6, r7
 802184e:	003c      	movs	r4, r7
 8021850:	9b08      	ldr	r3, [sp, #32]
 8021852:	603d      	str	r5, [r7, #0]
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	9507      	str	r5, [sp, #28]
 8021858:	9305      	str	r3, [sp, #20]
 802185a:	9503      	str	r5, [sp, #12]
 802185c:	9b05      	ldr	r3, [sp, #20]
 802185e:	3301      	adds	r3, #1
 8021860:	9309      	str	r3, [sp, #36]	@ 0x24
 8021862:	9b05      	ldr	r3, [sp, #20]
 8021864:	785b      	ldrb	r3, [r3, #1]
 8021866:	9304      	str	r3, [sp, #16]
 8021868:	2b00      	cmp	r3, #0
 802186a:	d028      	beq.n	80218be <__hexnan+0x9e>
 802186c:	9804      	ldr	r0, [sp, #16]
 802186e:	f7ff fd78 	bl	8021362 <__hexdig_fun>
 8021872:	2800      	cmp	r0, #0
 8021874:	d155      	bne.n	8021922 <__hexnan+0x102>
 8021876:	9b04      	ldr	r3, [sp, #16]
 8021878:	2b20      	cmp	r3, #32
 802187a:	d819      	bhi.n	80218b0 <__hexnan+0x90>
 802187c:	9b03      	ldr	r3, [sp, #12]
 802187e:	9a07      	ldr	r2, [sp, #28]
 8021880:	4293      	cmp	r3, r2
 8021882:	dd12      	ble.n	80218aa <__hexnan+0x8a>
 8021884:	42b4      	cmp	r4, r6
 8021886:	d206      	bcs.n	8021896 <__hexnan+0x76>
 8021888:	2d07      	cmp	r5, #7
 802188a:	dc04      	bgt.n	8021896 <__hexnan+0x76>
 802188c:	002a      	movs	r2, r5
 802188e:	0031      	movs	r1, r6
 8021890:	0020      	movs	r0, r4
 8021892:	f7ff ff9f 	bl	80217d4 <L_shift>
 8021896:	9b01      	ldr	r3, [sp, #4]
 8021898:	2508      	movs	r5, #8
 802189a:	429c      	cmp	r4, r3
 802189c:	d905      	bls.n	80218aa <__hexnan+0x8a>
 802189e:	1f26      	subs	r6, r4, #4
 80218a0:	2500      	movs	r5, #0
 80218a2:	0034      	movs	r4, r6
 80218a4:	9b03      	ldr	r3, [sp, #12]
 80218a6:	6035      	str	r5, [r6, #0]
 80218a8:	9307      	str	r3, [sp, #28]
 80218aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218ac:	9305      	str	r3, [sp, #20]
 80218ae:	e7d5      	b.n	802185c <__hexnan+0x3c>
 80218b0:	9b04      	ldr	r3, [sp, #16]
 80218b2:	2b29      	cmp	r3, #41	@ 0x29
 80218b4:	d15a      	bne.n	802196c <__hexnan+0x14c>
 80218b6:	9b05      	ldr	r3, [sp, #20]
 80218b8:	9a08      	ldr	r2, [sp, #32]
 80218ba:	3302      	adds	r3, #2
 80218bc:	6013      	str	r3, [r2, #0]
 80218be:	9b03      	ldr	r3, [sp, #12]
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d053      	beq.n	802196c <__hexnan+0x14c>
 80218c4:	42b4      	cmp	r4, r6
 80218c6:	d206      	bcs.n	80218d6 <__hexnan+0xb6>
 80218c8:	2d07      	cmp	r5, #7
 80218ca:	dc04      	bgt.n	80218d6 <__hexnan+0xb6>
 80218cc:	002a      	movs	r2, r5
 80218ce:	0031      	movs	r1, r6
 80218d0:	0020      	movs	r0, r4
 80218d2:	f7ff ff7f 	bl	80217d4 <L_shift>
 80218d6:	9b01      	ldr	r3, [sp, #4]
 80218d8:	429c      	cmp	r4, r3
 80218da:	d936      	bls.n	802194a <__hexnan+0x12a>
 80218dc:	001a      	movs	r2, r3
 80218de:	0023      	movs	r3, r4
 80218e0:	cb02      	ldmia	r3!, {r1}
 80218e2:	c202      	stmia	r2!, {r1}
 80218e4:	429f      	cmp	r7, r3
 80218e6:	d2fb      	bcs.n	80218e0 <__hexnan+0xc0>
 80218e8:	9b02      	ldr	r3, [sp, #8]
 80218ea:	1c61      	adds	r1, r4, #1
 80218ec:	1eda      	subs	r2, r3, #3
 80218ee:	2304      	movs	r3, #4
 80218f0:	4291      	cmp	r1, r2
 80218f2:	d805      	bhi.n	8021900 <__hexnan+0xe0>
 80218f4:	9b02      	ldr	r3, [sp, #8]
 80218f6:	3b04      	subs	r3, #4
 80218f8:	1b1b      	subs	r3, r3, r4
 80218fa:	089b      	lsrs	r3, r3, #2
 80218fc:	3301      	adds	r3, #1
 80218fe:	009b      	lsls	r3, r3, #2
 8021900:	9a01      	ldr	r2, [sp, #4]
 8021902:	18d3      	adds	r3, r2, r3
 8021904:	2200      	movs	r2, #0
 8021906:	c304      	stmia	r3!, {r2}
 8021908:	429f      	cmp	r7, r3
 802190a:	d2fc      	bcs.n	8021906 <__hexnan+0xe6>
 802190c:	683b      	ldr	r3, [r7, #0]
 802190e:	2b00      	cmp	r3, #0
 8021910:	d104      	bne.n	802191c <__hexnan+0xfc>
 8021912:	9b01      	ldr	r3, [sp, #4]
 8021914:	429f      	cmp	r7, r3
 8021916:	d127      	bne.n	8021968 <__hexnan+0x148>
 8021918:	2301      	movs	r3, #1
 802191a:	603b      	str	r3, [r7, #0]
 802191c:	2005      	movs	r0, #5
 802191e:	b00b      	add	sp, #44	@ 0x2c
 8021920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021922:	9b03      	ldr	r3, [sp, #12]
 8021924:	3501      	adds	r5, #1
 8021926:	3301      	adds	r3, #1
 8021928:	9303      	str	r3, [sp, #12]
 802192a:	2d08      	cmp	r5, #8
 802192c:	dd06      	ble.n	802193c <__hexnan+0x11c>
 802192e:	9b01      	ldr	r3, [sp, #4]
 8021930:	429c      	cmp	r4, r3
 8021932:	d9ba      	bls.n	80218aa <__hexnan+0x8a>
 8021934:	2300      	movs	r3, #0
 8021936:	2501      	movs	r5, #1
 8021938:	3c04      	subs	r4, #4
 802193a:	6023      	str	r3, [r4, #0]
 802193c:	220f      	movs	r2, #15
 802193e:	6823      	ldr	r3, [r4, #0]
 8021940:	4010      	ands	r0, r2
 8021942:	011b      	lsls	r3, r3, #4
 8021944:	4303      	orrs	r3, r0
 8021946:	6023      	str	r3, [r4, #0]
 8021948:	e7af      	b.n	80218aa <__hexnan+0x8a>
 802194a:	9b06      	ldr	r3, [sp, #24]
 802194c:	2b00      	cmp	r3, #0
 802194e:	d0dd      	beq.n	802190c <__hexnan+0xec>
 8021950:	2320      	movs	r3, #32
 8021952:	9a06      	ldr	r2, [sp, #24]
 8021954:	9902      	ldr	r1, [sp, #8]
 8021956:	1a9b      	subs	r3, r3, r2
 8021958:	2201      	movs	r2, #1
 802195a:	4252      	negs	r2, r2
 802195c:	40da      	lsrs	r2, r3
 802195e:	3904      	subs	r1, #4
 8021960:	680b      	ldr	r3, [r1, #0]
 8021962:	4013      	ands	r3, r2
 8021964:	600b      	str	r3, [r1, #0]
 8021966:	e7d1      	b.n	802190c <__hexnan+0xec>
 8021968:	3f04      	subs	r7, #4
 802196a:	e7cf      	b.n	802190c <__hexnan+0xec>
 802196c:	2004      	movs	r0, #4
 802196e:	e7d6      	b.n	802191e <__hexnan+0xfe>

08021970 <malloc>:
 8021970:	b510      	push	{r4, lr}
 8021972:	4b03      	ldr	r3, [pc, #12]	@ (8021980 <malloc+0x10>)
 8021974:	0001      	movs	r1, r0
 8021976:	6818      	ldr	r0, [r3, #0]
 8021978:	f000 f826 	bl	80219c8 <_malloc_r>
 802197c:	bd10      	pop	{r4, pc}
 802197e:	46c0      	nop			@ (mov r8, r8)
 8021980:	200003d0 	.word	0x200003d0

08021984 <sbrk_aligned>:
 8021984:	b570      	push	{r4, r5, r6, lr}
 8021986:	4e0f      	ldr	r6, [pc, #60]	@ (80219c4 <sbrk_aligned+0x40>)
 8021988:	000d      	movs	r5, r1
 802198a:	6831      	ldr	r1, [r6, #0]
 802198c:	0004      	movs	r4, r0
 802198e:	2900      	cmp	r1, #0
 8021990:	d102      	bne.n	8021998 <sbrk_aligned+0x14>
 8021992:	f001 f989 	bl	8022ca8 <_sbrk_r>
 8021996:	6030      	str	r0, [r6, #0]
 8021998:	0029      	movs	r1, r5
 802199a:	0020      	movs	r0, r4
 802199c:	f001 f984 	bl	8022ca8 <_sbrk_r>
 80219a0:	1c43      	adds	r3, r0, #1
 80219a2:	d103      	bne.n	80219ac <sbrk_aligned+0x28>
 80219a4:	2501      	movs	r5, #1
 80219a6:	426d      	negs	r5, r5
 80219a8:	0028      	movs	r0, r5
 80219aa:	bd70      	pop	{r4, r5, r6, pc}
 80219ac:	2303      	movs	r3, #3
 80219ae:	1cc5      	adds	r5, r0, #3
 80219b0:	439d      	bics	r5, r3
 80219b2:	42a8      	cmp	r0, r5
 80219b4:	d0f8      	beq.n	80219a8 <sbrk_aligned+0x24>
 80219b6:	1a29      	subs	r1, r5, r0
 80219b8:	0020      	movs	r0, r4
 80219ba:	f001 f975 	bl	8022ca8 <_sbrk_r>
 80219be:	3001      	adds	r0, #1
 80219c0:	d1f2      	bne.n	80219a8 <sbrk_aligned+0x24>
 80219c2:	e7ef      	b.n	80219a4 <sbrk_aligned+0x20>
 80219c4:	200037c4 	.word	0x200037c4

080219c8 <_malloc_r>:
 80219c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219ca:	2203      	movs	r2, #3
 80219cc:	1ccb      	adds	r3, r1, #3
 80219ce:	4393      	bics	r3, r2
 80219d0:	3308      	adds	r3, #8
 80219d2:	0005      	movs	r5, r0
 80219d4:	001f      	movs	r7, r3
 80219d6:	2b0c      	cmp	r3, #12
 80219d8:	d234      	bcs.n	8021a44 <_malloc_r+0x7c>
 80219da:	270c      	movs	r7, #12
 80219dc:	42b9      	cmp	r1, r7
 80219de:	d833      	bhi.n	8021a48 <_malloc_r+0x80>
 80219e0:	0028      	movs	r0, r5
 80219e2:	f000 f883 	bl	8021aec <__malloc_lock>
 80219e6:	4e37      	ldr	r6, [pc, #220]	@ (8021ac4 <_malloc_r+0xfc>)
 80219e8:	6833      	ldr	r3, [r6, #0]
 80219ea:	001c      	movs	r4, r3
 80219ec:	2c00      	cmp	r4, #0
 80219ee:	d12f      	bne.n	8021a50 <_malloc_r+0x88>
 80219f0:	0039      	movs	r1, r7
 80219f2:	0028      	movs	r0, r5
 80219f4:	f7ff ffc6 	bl	8021984 <sbrk_aligned>
 80219f8:	0004      	movs	r4, r0
 80219fa:	1c43      	adds	r3, r0, #1
 80219fc:	d15f      	bne.n	8021abe <_malloc_r+0xf6>
 80219fe:	6834      	ldr	r4, [r6, #0]
 8021a00:	9400      	str	r4, [sp, #0]
 8021a02:	9b00      	ldr	r3, [sp, #0]
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d14a      	bne.n	8021a9e <_malloc_r+0xd6>
 8021a08:	2c00      	cmp	r4, #0
 8021a0a:	d052      	beq.n	8021ab2 <_malloc_r+0xea>
 8021a0c:	6823      	ldr	r3, [r4, #0]
 8021a0e:	0028      	movs	r0, r5
 8021a10:	18e3      	adds	r3, r4, r3
 8021a12:	9900      	ldr	r1, [sp, #0]
 8021a14:	9301      	str	r3, [sp, #4]
 8021a16:	f001 f947 	bl	8022ca8 <_sbrk_r>
 8021a1a:	9b01      	ldr	r3, [sp, #4]
 8021a1c:	4283      	cmp	r3, r0
 8021a1e:	d148      	bne.n	8021ab2 <_malloc_r+0xea>
 8021a20:	6823      	ldr	r3, [r4, #0]
 8021a22:	0028      	movs	r0, r5
 8021a24:	1aff      	subs	r7, r7, r3
 8021a26:	0039      	movs	r1, r7
 8021a28:	f7ff ffac 	bl	8021984 <sbrk_aligned>
 8021a2c:	3001      	adds	r0, #1
 8021a2e:	d040      	beq.n	8021ab2 <_malloc_r+0xea>
 8021a30:	6823      	ldr	r3, [r4, #0]
 8021a32:	19db      	adds	r3, r3, r7
 8021a34:	6023      	str	r3, [r4, #0]
 8021a36:	6833      	ldr	r3, [r6, #0]
 8021a38:	685a      	ldr	r2, [r3, #4]
 8021a3a:	2a00      	cmp	r2, #0
 8021a3c:	d133      	bne.n	8021aa6 <_malloc_r+0xde>
 8021a3e:	9b00      	ldr	r3, [sp, #0]
 8021a40:	6033      	str	r3, [r6, #0]
 8021a42:	e019      	b.n	8021a78 <_malloc_r+0xb0>
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	dac9      	bge.n	80219dc <_malloc_r+0x14>
 8021a48:	230c      	movs	r3, #12
 8021a4a:	602b      	str	r3, [r5, #0]
 8021a4c:	2000      	movs	r0, #0
 8021a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a50:	6821      	ldr	r1, [r4, #0]
 8021a52:	1bc9      	subs	r1, r1, r7
 8021a54:	d420      	bmi.n	8021a98 <_malloc_r+0xd0>
 8021a56:	290b      	cmp	r1, #11
 8021a58:	d90a      	bls.n	8021a70 <_malloc_r+0xa8>
 8021a5a:	19e2      	adds	r2, r4, r7
 8021a5c:	6027      	str	r7, [r4, #0]
 8021a5e:	42a3      	cmp	r3, r4
 8021a60:	d104      	bne.n	8021a6c <_malloc_r+0xa4>
 8021a62:	6032      	str	r2, [r6, #0]
 8021a64:	6863      	ldr	r3, [r4, #4]
 8021a66:	6011      	str	r1, [r2, #0]
 8021a68:	6053      	str	r3, [r2, #4]
 8021a6a:	e005      	b.n	8021a78 <_malloc_r+0xb0>
 8021a6c:	605a      	str	r2, [r3, #4]
 8021a6e:	e7f9      	b.n	8021a64 <_malloc_r+0x9c>
 8021a70:	6862      	ldr	r2, [r4, #4]
 8021a72:	42a3      	cmp	r3, r4
 8021a74:	d10e      	bne.n	8021a94 <_malloc_r+0xcc>
 8021a76:	6032      	str	r2, [r6, #0]
 8021a78:	0028      	movs	r0, r5
 8021a7a:	f000 f83f 	bl	8021afc <__malloc_unlock>
 8021a7e:	0020      	movs	r0, r4
 8021a80:	2207      	movs	r2, #7
 8021a82:	300b      	adds	r0, #11
 8021a84:	1d23      	adds	r3, r4, #4
 8021a86:	4390      	bics	r0, r2
 8021a88:	1ac2      	subs	r2, r0, r3
 8021a8a:	4298      	cmp	r0, r3
 8021a8c:	d0df      	beq.n	8021a4e <_malloc_r+0x86>
 8021a8e:	1a1b      	subs	r3, r3, r0
 8021a90:	50a3      	str	r3, [r4, r2]
 8021a92:	e7dc      	b.n	8021a4e <_malloc_r+0x86>
 8021a94:	605a      	str	r2, [r3, #4]
 8021a96:	e7ef      	b.n	8021a78 <_malloc_r+0xb0>
 8021a98:	0023      	movs	r3, r4
 8021a9a:	6864      	ldr	r4, [r4, #4]
 8021a9c:	e7a6      	b.n	80219ec <_malloc_r+0x24>
 8021a9e:	9c00      	ldr	r4, [sp, #0]
 8021aa0:	6863      	ldr	r3, [r4, #4]
 8021aa2:	9300      	str	r3, [sp, #0]
 8021aa4:	e7ad      	b.n	8021a02 <_malloc_r+0x3a>
 8021aa6:	001a      	movs	r2, r3
 8021aa8:	685b      	ldr	r3, [r3, #4]
 8021aaa:	42a3      	cmp	r3, r4
 8021aac:	d1fb      	bne.n	8021aa6 <_malloc_r+0xde>
 8021aae:	2300      	movs	r3, #0
 8021ab0:	e7da      	b.n	8021a68 <_malloc_r+0xa0>
 8021ab2:	230c      	movs	r3, #12
 8021ab4:	0028      	movs	r0, r5
 8021ab6:	602b      	str	r3, [r5, #0]
 8021ab8:	f000 f820 	bl	8021afc <__malloc_unlock>
 8021abc:	e7c6      	b.n	8021a4c <_malloc_r+0x84>
 8021abe:	6007      	str	r7, [r0, #0]
 8021ac0:	e7da      	b.n	8021a78 <_malloc_r+0xb0>
 8021ac2:	46c0      	nop			@ (mov r8, r8)
 8021ac4:	200037c8 	.word	0x200037c8

08021ac8 <__ascii_mbtowc>:
 8021ac8:	b082      	sub	sp, #8
 8021aca:	2900      	cmp	r1, #0
 8021acc:	d100      	bne.n	8021ad0 <__ascii_mbtowc+0x8>
 8021ace:	a901      	add	r1, sp, #4
 8021ad0:	1e10      	subs	r0, r2, #0
 8021ad2:	d006      	beq.n	8021ae2 <__ascii_mbtowc+0x1a>
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d006      	beq.n	8021ae6 <__ascii_mbtowc+0x1e>
 8021ad8:	7813      	ldrb	r3, [r2, #0]
 8021ada:	600b      	str	r3, [r1, #0]
 8021adc:	7810      	ldrb	r0, [r2, #0]
 8021ade:	1e43      	subs	r3, r0, #1
 8021ae0:	4198      	sbcs	r0, r3
 8021ae2:	b002      	add	sp, #8
 8021ae4:	4770      	bx	lr
 8021ae6:	2002      	movs	r0, #2
 8021ae8:	4240      	negs	r0, r0
 8021aea:	e7fa      	b.n	8021ae2 <__ascii_mbtowc+0x1a>

08021aec <__malloc_lock>:
 8021aec:	b510      	push	{r4, lr}
 8021aee:	4802      	ldr	r0, [pc, #8]	@ (8021af8 <__malloc_lock+0xc>)
 8021af0:	f7fe fcfb 	bl	80204ea <__retarget_lock_acquire_recursive>
 8021af4:	bd10      	pop	{r4, pc}
 8021af6:	46c0      	nop			@ (mov r8, r8)
 8021af8:	200037c0 	.word	0x200037c0

08021afc <__malloc_unlock>:
 8021afc:	b510      	push	{r4, lr}
 8021afe:	4802      	ldr	r0, [pc, #8]	@ (8021b08 <__malloc_unlock+0xc>)
 8021b00:	f7fe fcf4 	bl	80204ec <__retarget_lock_release_recursive>
 8021b04:	bd10      	pop	{r4, pc}
 8021b06:	46c0      	nop			@ (mov r8, r8)
 8021b08:	200037c0 	.word	0x200037c0

08021b0c <_Balloc>:
 8021b0c:	b570      	push	{r4, r5, r6, lr}
 8021b0e:	69c5      	ldr	r5, [r0, #28]
 8021b10:	0006      	movs	r6, r0
 8021b12:	000c      	movs	r4, r1
 8021b14:	2d00      	cmp	r5, #0
 8021b16:	d10e      	bne.n	8021b36 <_Balloc+0x2a>
 8021b18:	2010      	movs	r0, #16
 8021b1a:	f7ff ff29 	bl	8021970 <malloc>
 8021b1e:	1e02      	subs	r2, r0, #0
 8021b20:	61f0      	str	r0, [r6, #28]
 8021b22:	d104      	bne.n	8021b2e <_Balloc+0x22>
 8021b24:	216b      	movs	r1, #107	@ 0x6b
 8021b26:	4b19      	ldr	r3, [pc, #100]	@ (8021b8c <_Balloc+0x80>)
 8021b28:	4819      	ldr	r0, [pc, #100]	@ (8021b90 <_Balloc+0x84>)
 8021b2a:	f001 f8cf 	bl	8022ccc <__assert_func>
 8021b2e:	6045      	str	r5, [r0, #4]
 8021b30:	6085      	str	r5, [r0, #8]
 8021b32:	6005      	str	r5, [r0, #0]
 8021b34:	60c5      	str	r5, [r0, #12]
 8021b36:	69f5      	ldr	r5, [r6, #28]
 8021b38:	68eb      	ldr	r3, [r5, #12]
 8021b3a:	2b00      	cmp	r3, #0
 8021b3c:	d013      	beq.n	8021b66 <_Balloc+0x5a>
 8021b3e:	69f3      	ldr	r3, [r6, #28]
 8021b40:	00a2      	lsls	r2, r4, #2
 8021b42:	68db      	ldr	r3, [r3, #12]
 8021b44:	189b      	adds	r3, r3, r2
 8021b46:	6818      	ldr	r0, [r3, #0]
 8021b48:	2800      	cmp	r0, #0
 8021b4a:	d118      	bne.n	8021b7e <_Balloc+0x72>
 8021b4c:	2101      	movs	r1, #1
 8021b4e:	000d      	movs	r5, r1
 8021b50:	40a5      	lsls	r5, r4
 8021b52:	1d6a      	adds	r2, r5, #5
 8021b54:	0030      	movs	r0, r6
 8021b56:	0092      	lsls	r2, r2, #2
 8021b58:	f001 f8d6 	bl	8022d08 <_calloc_r>
 8021b5c:	2800      	cmp	r0, #0
 8021b5e:	d00c      	beq.n	8021b7a <_Balloc+0x6e>
 8021b60:	6044      	str	r4, [r0, #4]
 8021b62:	6085      	str	r5, [r0, #8]
 8021b64:	e00d      	b.n	8021b82 <_Balloc+0x76>
 8021b66:	2221      	movs	r2, #33	@ 0x21
 8021b68:	2104      	movs	r1, #4
 8021b6a:	0030      	movs	r0, r6
 8021b6c:	f001 f8cc 	bl	8022d08 <_calloc_r>
 8021b70:	69f3      	ldr	r3, [r6, #28]
 8021b72:	60e8      	str	r0, [r5, #12]
 8021b74:	68db      	ldr	r3, [r3, #12]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d1e1      	bne.n	8021b3e <_Balloc+0x32>
 8021b7a:	2000      	movs	r0, #0
 8021b7c:	bd70      	pop	{r4, r5, r6, pc}
 8021b7e:	6802      	ldr	r2, [r0, #0]
 8021b80:	601a      	str	r2, [r3, #0]
 8021b82:	2300      	movs	r3, #0
 8021b84:	6103      	str	r3, [r0, #16]
 8021b86:	60c3      	str	r3, [r0, #12]
 8021b88:	e7f8      	b.n	8021b7c <_Balloc+0x70>
 8021b8a:	46c0      	nop			@ (mov r8, r8)
 8021b8c:	08025eea 	.word	0x08025eea
 8021b90:	08025fca 	.word	0x08025fca

08021b94 <_Bfree>:
 8021b94:	b570      	push	{r4, r5, r6, lr}
 8021b96:	69c6      	ldr	r6, [r0, #28]
 8021b98:	0005      	movs	r5, r0
 8021b9a:	000c      	movs	r4, r1
 8021b9c:	2e00      	cmp	r6, #0
 8021b9e:	d10e      	bne.n	8021bbe <_Bfree+0x2a>
 8021ba0:	2010      	movs	r0, #16
 8021ba2:	f7ff fee5 	bl	8021970 <malloc>
 8021ba6:	1e02      	subs	r2, r0, #0
 8021ba8:	61e8      	str	r0, [r5, #28]
 8021baa:	d104      	bne.n	8021bb6 <_Bfree+0x22>
 8021bac:	218f      	movs	r1, #143	@ 0x8f
 8021bae:	4b09      	ldr	r3, [pc, #36]	@ (8021bd4 <_Bfree+0x40>)
 8021bb0:	4809      	ldr	r0, [pc, #36]	@ (8021bd8 <_Bfree+0x44>)
 8021bb2:	f001 f88b 	bl	8022ccc <__assert_func>
 8021bb6:	6046      	str	r6, [r0, #4]
 8021bb8:	6086      	str	r6, [r0, #8]
 8021bba:	6006      	str	r6, [r0, #0]
 8021bbc:	60c6      	str	r6, [r0, #12]
 8021bbe:	2c00      	cmp	r4, #0
 8021bc0:	d007      	beq.n	8021bd2 <_Bfree+0x3e>
 8021bc2:	69eb      	ldr	r3, [r5, #28]
 8021bc4:	6862      	ldr	r2, [r4, #4]
 8021bc6:	68db      	ldr	r3, [r3, #12]
 8021bc8:	0092      	lsls	r2, r2, #2
 8021bca:	189b      	adds	r3, r3, r2
 8021bcc:	681a      	ldr	r2, [r3, #0]
 8021bce:	6022      	str	r2, [r4, #0]
 8021bd0:	601c      	str	r4, [r3, #0]
 8021bd2:	bd70      	pop	{r4, r5, r6, pc}
 8021bd4:	08025eea 	.word	0x08025eea
 8021bd8:	08025fca 	.word	0x08025fca

08021bdc <__multadd>:
 8021bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021bde:	000f      	movs	r7, r1
 8021be0:	9001      	str	r0, [sp, #4]
 8021be2:	000c      	movs	r4, r1
 8021be4:	001e      	movs	r6, r3
 8021be6:	2000      	movs	r0, #0
 8021be8:	690d      	ldr	r5, [r1, #16]
 8021bea:	3714      	adds	r7, #20
 8021bec:	683b      	ldr	r3, [r7, #0]
 8021bee:	3001      	adds	r0, #1
 8021bf0:	b299      	uxth	r1, r3
 8021bf2:	4351      	muls	r1, r2
 8021bf4:	0c1b      	lsrs	r3, r3, #16
 8021bf6:	4353      	muls	r3, r2
 8021bf8:	1989      	adds	r1, r1, r6
 8021bfa:	0c0e      	lsrs	r6, r1, #16
 8021bfc:	199b      	adds	r3, r3, r6
 8021bfe:	0c1e      	lsrs	r6, r3, #16
 8021c00:	b289      	uxth	r1, r1
 8021c02:	041b      	lsls	r3, r3, #16
 8021c04:	185b      	adds	r3, r3, r1
 8021c06:	c708      	stmia	r7!, {r3}
 8021c08:	4285      	cmp	r5, r0
 8021c0a:	dcef      	bgt.n	8021bec <__multadd+0x10>
 8021c0c:	2e00      	cmp	r6, #0
 8021c0e:	d022      	beq.n	8021c56 <__multadd+0x7a>
 8021c10:	68a3      	ldr	r3, [r4, #8]
 8021c12:	42ab      	cmp	r3, r5
 8021c14:	dc19      	bgt.n	8021c4a <__multadd+0x6e>
 8021c16:	6861      	ldr	r1, [r4, #4]
 8021c18:	9801      	ldr	r0, [sp, #4]
 8021c1a:	3101      	adds	r1, #1
 8021c1c:	f7ff ff76 	bl	8021b0c <_Balloc>
 8021c20:	1e07      	subs	r7, r0, #0
 8021c22:	d105      	bne.n	8021c30 <__multadd+0x54>
 8021c24:	003a      	movs	r2, r7
 8021c26:	21ba      	movs	r1, #186	@ 0xba
 8021c28:	4b0c      	ldr	r3, [pc, #48]	@ (8021c5c <__multadd+0x80>)
 8021c2a:	480d      	ldr	r0, [pc, #52]	@ (8021c60 <__multadd+0x84>)
 8021c2c:	f001 f84e 	bl	8022ccc <__assert_func>
 8021c30:	0021      	movs	r1, r4
 8021c32:	6922      	ldr	r2, [r4, #16]
 8021c34:	310c      	adds	r1, #12
 8021c36:	3202      	adds	r2, #2
 8021c38:	0092      	lsls	r2, r2, #2
 8021c3a:	300c      	adds	r0, #12
 8021c3c:	f7fe fc62 	bl	8020504 <memcpy>
 8021c40:	0021      	movs	r1, r4
 8021c42:	9801      	ldr	r0, [sp, #4]
 8021c44:	f7ff ffa6 	bl	8021b94 <_Bfree>
 8021c48:	003c      	movs	r4, r7
 8021c4a:	1d2b      	adds	r3, r5, #4
 8021c4c:	009b      	lsls	r3, r3, #2
 8021c4e:	18e3      	adds	r3, r4, r3
 8021c50:	3501      	adds	r5, #1
 8021c52:	605e      	str	r6, [r3, #4]
 8021c54:	6125      	str	r5, [r4, #16]
 8021c56:	0020      	movs	r0, r4
 8021c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021c5a:	46c0      	nop			@ (mov r8, r8)
 8021c5c:	08025f59 	.word	0x08025f59
 8021c60:	08025fca 	.word	0x08025fca

08021c64 <__s2b>:
 8021c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c66:	0007      	movs	r7, r0
 8021c68:	0018      	movs	r0, r3
 8021c6a:	000c      	movs	r4, r1
 8021c6c:	3008      	adds	r0, #8
 8021c6e:	2109      	movs	r1, #9
 8021c70:	9301      	str	r3, [sp, #4]
 8021c72:	0015      	movs	r5, r2
 8021c74:	f7de fb20 	bl	80002b8 <__divsi3>
 8021c78:	2301      	movs	r3, #1
 8021c7a:	2100      	movs	r1, #0
 8021c7c:	4283      	cmp	r3, r0
 8021c7e:	db0a      	blt.n	8021c96 <__s2b+0x32>
 8021c80:	0038      	movs	r0, r7
 8021c82:	f7ff ff43 	bl	8021b0c <_Balloc>
 8021c86:	1e01      	subs	r1, r0, #0
 8021c88:	d108      	bne.n	8021c9c <__s2b+0x38>
 8021c8a:	000a      	movs	r2, r1
 8021c8c:	4b19      	ldr	r3, [pc, #100]	@ (8021cf4 <__s2b+0x90>)
 8021c8e:	481a      	ldr	r0, [pc, #104]	@ (8021cf8 <__s2b+0x94>)
 8021c90:	31d3      	adds	r1, #211	@ 0xd3
 8021c92:	f001 f81b 	bl	8022ccc <__assert_func>
 8021c96:	005b      	lsls	r3, r3, #1
 8021c98:	3101      	adds	r1, #1
 8021c9a:	e7ef      	b.n	8021c7c <__s2b+0x18>
 8021c9c:	9b08      	ldr	r3, [sp, #32]
 8021c9e:	6143      	str	r3, [r0, #20]
 8021ca0:	2301      	movs	r3, #1
 8021ca2:	6103      	str	r3, [r0, #16]
 8021ca4:	2d09      	cmp	r5, #9
 8021ca6:	dd18      	ble.n	8021cda <__s2b+0x76>
 8021ca8:	0023      	movs	r3, r4
 8021caa:	3309      	adds	r3, #9
 8021cac:	001e      	movs	r6, r3
 8021cae:	9300      	str	r3, [sp, #0]
 8021cb0:	1964      	adds	r4, r4, r5
 8021cb2:	7833      	ldrb	r3, [r6, #0]
 8021cb4:	220a      	movs	r2, #10
 8021cb6:	0038      	movs	r0, r7
 8021cb8:	3b30      	subs	r3, #48	@ 0x30
 8021cba:	f7ff ff8f 	bl	8021bdc <__multadd>
 8021cbe:	3601      	adds	r6, #1
 8021cc0:	0001      	movs	r1, r0
 8021cc2:	42a6      	cmp	r6, r4
 8021cc4:	d1f5      	bne.n	8021cb2 <__s2b+0x4e>
 8021cc6:	002c      	movs	r4, r5
 8021cc8:	9b00      	ldr	r3, [sp, #0]
 8021cca:	3c08      	subs	r4, #8
 8021ccc:	191c      	adds	r4, r3, r4
 8021cce:	002e      	movs	r6, r5
 8021cd0:	9b01      	ldr	r3, [sp, #4]
 8021cd2:	429e      	cmp	r6, r3
 8021cd4:	db04      	blt.n	8021ce0 <__s2b+0x7c>
 8021cd6:	0008      	movs	r0, r1
 8021cd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021cda:	2509      	movs	r5, #9
 8021cdc:	340a      	adds	r4, #10
 8021cde:	e7f6      	b.n	8021cce <__s2b+0x6a>
 8021ce0:	1b63      	subs	r3, r4, r5
 8021ce2:	5d9b      	ldrb	r3, [r3, r6]
 8021ce4:	220a      	movs	r2, #10
 8021ce6:	0038      	movs	r0, r7
 8021ce8:	3b30      	subs	r3, #48	@ 0x30
 8021cea:	f7ff ff77 	bl	8021bdc <__multadd>
 8021cee:	3601      	adds	r6, #1
 8021cf0:	0001      	movs	r1, r0
 8021cf2:	e7ed      	b.n	8021cd0 <__s2b+0x6c>
 8021cf4:	08025f59 	.word	0x08025f59
 8021cf8:	08025fca 	.word	0x08025fca

08021cfc <__hi0bits>:
 8021cfc:	2280      	movs	r2, #128	@ 0x80
 8021cfe:	0003      	movs	r3, r0
 8021d00:	0252      	lsls	r2, r2, #9
 8021d02:	2000      	movs	r0, #0
 8021d04:	4293      	cmp	r3, r2
 8021d06:	d201      	bcs.n	8021d0c <__hi0bits+0x10>
 8021d08:	041b      	lsls	r3, r3, #16
 8021d0a:	3010      	adds	r0, #16
 8021d0c:	2280      	movs	r2, #128	@ 0x80
 8021d0e:	0452      	lsls	r2, r2, #17
 8021d10:	4293      	cmp	r3, r2
 8021d12:	d201      	bcs.n	8021d18 <__hi0bits+0x1c>
 8021d14:	3008      	adds	r0, #8
 8021d16:	021b      	lsls	r3, r3, #8
 8021d18:	2280      	movs	r2, #128	@ 0x80
 8021d1a:	0552      	lsls	r2, r2, #21
 8021d1c:	4293      	cmp	r3, r2
 8021d1e:	d201      	bcs.n	8021d24 <__hi0bits+0x28>
 8021d20:	3004      	adds	r0, #4
 8021d22:	011b      	lsls	r3, r3, #4
 8021d24:	2280      	movs	r2, #128	@ 0x80
 8021d26:	05d2      	lsls	r2, r2, #23
 8021d28:	4293      	cmp	r3, r2
 8021d2a:	d201      	bcs.n	8021d30 <__hi0bits+0x34>
 8021d2c:	3002      	adds	r0, #2
 8021d2e:	009b      	lsls	r3, r3, #2
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	db03      	blt.n	8021d3c <__hi0bits+0x40>
 8021d34:	3001      	adds	r0, #1
 8021d36:	4213      	tst	r3, r2
 8021d38:	d100      	bne.n	8021d3c <__hi0bits+0x40>
 8021d3a:	2020      	movs	r0, #32
 8021d3c:	4770      	bx	lr

08021d3e <__lo0bits>:
 8021d3e:	6803      	ldr	r3, [r0, #0]
 8021d40:	0001      	movs	r1, r0
 8021d42:	2207      	movs	r2, #7
 8021d44:	0018      	movs	r0, r3
 8021d46:	4010      	ands	r0, r2
 8021d48:	4213      	tst	r3, r2
 8021d4a:	d00d      	beq.n	8021d68 <__lo0bits+0x2a>
 8021d4c:	3a06      	subs	r2, #6
 8021d4e:	2000      	movs	r0, #0
 8021d50:	4213      	tst	r3, r2
 8021d52:	d105      	bne.n	8021d60 <__lo0bits+0x22>
 8021d54:	3002      	adds	r0, #2
 8021d56:	4203      	tst	r3, r0
 8021d58:	d003      	beq.n	8021d62 <__lo0bits+0x24>
 8021d5a:	40d3      	lsrs	r3, r2
 8021d5c:	0010      	movs	r0, r2
 8021d5e:	600b      	str	r3, [r1, #0]
 8021d60:	4770      	bx	lr
 8021d62:	089b      	lsrs	r3, r3, #2
 8021d64:	600b      	str	r3, [r1, #0]
 8021d66:	e7fb      	b.n	8021d60 <__lo0bits+0x22>
 8021d68:	b29a      	uxth	r2, r3
 8021d6a:	2a00      	cmp	r2, #0
 8021d6c:	d101      	bne.n	8021d72 <__lo0bits+0x34>
 8021d6e:	2010      	movs	r0, #16
 8021d70:	0c1b      	lsrs	r3, r3, #16
 8021d72:	b2da      	uxtb	r2, r3
 8021d74:	2a00      	cmp	r2, #0
 8021d76:	d101      	bne.n	8021d7c <__lo0bits+0x3e>
 8021d78:	3008      	adds	r0, #8
 8021d7a:	0a1b      	lsrs	r3, r3, #8
 8021d7c:	071a      	lsls	r2, r3, #28
 8021d7e:	d101      	bne.n	8021d84 <__lo0bits+0x46>
 8021d80:	3004      	adds	r0, #4
 8021d82:	091b      	lsrs	r3, r3, #4
 8021d84:	079a      	lsls	r2, r3, #30
 8021d86:	d101      	bne.n	8021d8c <__lo0bits+0x4e>
 8021d88:	3002      	adds	r0, #2
 8021d8a:	089b      	lsrs	r3, r3, #2
 8021d8c:	07da      	lsls	r2, r3, #31
 8021d8e:	d4e9      	bmi.n	8021d64 <__lo0bits+0x26>
 8021d90:	3001      	adds	r0, #1
 8021d92:	085b      	lsrs	r3, r3, #1
 8021d94:	d1e6      	bne.n	8021d64 <__lo0bits+0x26>
 8021d96:	2020      	movs	r0, #32
 8021d98:	e7e2      	b.n	8021d60 <__lo0bits+0x22>
	...

08021d9c <__i2b>:
 8021d9c:	b510      	push	{r4, lr}
 8021d9e:	000c      	movs	r4, r1
 8021da0:	2101      	movs	r1, #1
 8021da2:	f7ff feb3 	bl	8021b0c <_Balloc>
 8021da6:	2800      	cmp	r0, #0
 8021da8:	d107      	bne.n	8021dba <__i2b+0x1e>
 8021daa:	2146      	movs	r1, #70	@ 0x46
 8021dac:	4c05      	ldr	r4, [pc, #20]	@ (8021dc4 <__i2b+0x28>)
 8021dae:	0002      	movs	r2, r0
 8021db0:	4b05      	ldr	r3, [pc, #20]	@ (8021dc8 <__i2b+0x2c>)
 8021db2:	0020      	movs	r0, r4
 8021db4:	31ff      	adds	r1, #255	@ 0xff
 8021db6:	f000 ff89 	bl	8022ccc <__assert_func>
 8021dba:	2301      	movs	r3, #1
 8021dbc:	6144      	str	r4, [r0, #20]
 8021dbe:	6103      	str	r3, [r0, #16]
 8021dc0:	bd10      	pop	{r4, pc}
 8021dc2:	46c0      	nop			@ (mov r8, r8)
 8021dc4:	08025fca 	.word	0x08025fca
 8021dc8:	08025f59 	.word	0x08025f59

08021dcc <__multiply>:
 8021dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dce:	0014      	movs	r4, r2
 8021dd0:	690a      	ldr	r2, [r1, #16]
 8021dd2:	6923      	ldr	r3, [r4, #16]
 8021dd4:	000d      	movs	r5, r1
 8021dd6:	b08b      	sub	sp, #44	@ 0x2c
 8021dd8:	429a      	cmp	r2, r3
 8021dda:	db02      	blt.n	8021de2 <__multiply+0x16>
 8021ddc:	0023      	movs	r3, r4
 8021dde:	000c      	movs	r4, r1
 8021de0:	001d      	movs	r5, r3
 8021de2:	6927      	ldr	r7, [r4, #16]
 8021de4:	692e      	ldr	r6, [r5, #16]
 8021de6:	6861      	ldr	r1, [r4, #4]
 8021de8:	19bb      	adds	r3, r7, r6
 8021dea:	9303      	str	r3, [sp, #12]
 8021dec:	68a3      	ldr	r3, [r4, #8]
 8021dee:	19ba      	adds	r2, r7, r6
 8021df0:	4293      	cmp	r3, r2
 8021df2:	da00      	bge.n	8021df6 <__multiply+0x2a>
 8021df4:	3101      	adds	r1, #1
 8021df6:	f7ff fe89 	bl	8021b0c <_Balloc>
 8021dfa:	9002      	str	r0, [sp, #8]
 8021dfc:	2800      	cmp	r0, #0
 8021dfe:	d106      	bne.n	8021e0e <__multiply+0x42>
 8021e00:	21b1      	movs	r1, #177	@ 0xb1
 8021e02:	4b49      	ldr	r3, [pc, #292]	@ (8021f28 <__multiply+0x15c>)
 8021e04:	4849      	ldr	r0, [pc, #292]	@ (8021f2c <__multiply+0x160>)
 8021e06:	9a02      	ldr	r2, [sp, #8]
 8021e08:	0049      	lsls	r1, r1, #1
 8021e0a:	f000 ff5f 	bl	8022ccc <__assert_func>
 8021e0e:	9b02      	ldr	r3, [sp, #8]
 8021e10:	2200      	movs	r2, #0
 8021e12:	3314      	adds	r3, #20
 8021e14:	469c      	mov	ip, r3
 8021e16:	19bb      	adds	r3, r7, r6
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	4463      	add	r3, ip
 8021e1c:	9304      	str	r3, [sp, #16]
 8021e1e:	4663      	mov	r3, ip
 8021e20:	9904      	ldr	r1, [sp, #16]
 8021e22:	428b      	cmp	r3, r1
 8021e24:	d32a      	bcc.n	8021e7c <__multiply+0xb0>
 8021e26:	0023      	movs	r3, r4
 8021e28:	00bf      	lsls	r7, r7, #2
 8021e2a:	3314      	adds	r3, #20
 8021e2c:	3514      	adds	r5, #20
 8021e2e:	9308      	str	r3, [sp, #32]
 8021e30:	00b6      	lsls	r6, r6, #2
 8021e32:	19db      	adds	r3, r3, r7
 8021e34:	9305      	str	r3, [sp, #20]
 8021e36:	19ab      	adds	r3, r5, r6
 8021e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e3a:	2304      	movs	r3, #4
 8021e3c:	9306      	str	r3, [sp, #24]
 8021e3e:	0023      	movs	r3, r4
 8021e40:	9a05      	ldr	r2, [sp, #20]
 8021e42:	3315      	adds	r3, #21
 8021e44:	9501      	str	r5, [sp, #4]
 8021e46:	429a      	cmp	r2, r3
 8021e48:	d305      	bcc.n	8021e56 <__multiply+0x8a>
 8021e4a:	1b13      	subs	r3, r2, r4
 8021e4c:	3b15      	subs	r3, #21
 8021e4e:	089b      	lsrs	r3, r3, #2
 8021e50:	3301      	adds	r3, #1
 8021e52:	009b      	lsls	r3, r3, #2
 8021e54:	9306      	str	r3, [sp, #24]
 8021e56:	9b01      	ldr	r3, [sp, #4]
 8021e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021e5a:	4293      	cmp	r3, r2
 8021e5c:	d310      	bcc.n	8021e80 <__multiply+0xb4>
 8021e5e:	9b03      	ldr	r3, [sp, #12]
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	dd05      	ble.n	8021e70 <__multiply+0xa4>
 8021e64:	9b04      	ldr	r3, [sp, #16]
 8021e66:	3b04      	subs	r3, #4
 8021e68:	9304      	str	r3, [sp, #16]
 8021e6a:	681b      	ldr	r3, [r3, #0]
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	d056      	beq.n	8021f1e <__multiply+0x152>
 8021e70:	9b02      	ldr	r3, [sp, #8]
 8021e72:	9a03      	ldr	r2, [sp, #12]
 8021e74:	0018      	movs	r0, r3
 8021e76:	611a      	str	r2, [r3, #16]
 8021e78:	b00b      	add	sp, #44	@ 0x2c
 8021e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e7c:	c304      	stmia	r3!, {r2}
 8021e7e:	e7cf      	b.n	8021e20 <__multiply+0x54>
 8021e80:	9b01      	ldr	r3, [sp, #4]
 8021e82:	6818      	ldr	r0, [r3, #0]
 8021e84:	b280      	uxth	r0, r0
 8021e86:	2800      	cmp	r0, #0
 8021e88:	d01e      	beq.n	8021ec8 <__multiply+0xfc>
 8021e8a:	4667      	mov	r7, ip
 8021e8c:	2500      	movs	r5, #0
 8021e8e:	9e08      	ldr	r6, [sp, #32]
 8021e90:	ce02      	ldmia	r6!, {r1}
 8021e92:	683b      	ldr	r3, [r7, #0]
 8021e94:	9307      	str	r3, [sp, #28]
 8021e96:	b28b      	uxth	r3, r1
 8021e98:	4343      	muls	r3, r0
 8021e9a:	001a      	movs	r2, r3
 8021e9c:	466b      	mov	r3, sp
 8021e9e:	0c09      	lsrs	r1, r1, #16
 8021ea0:	8b9b      	ldrh	r3, [r3, #28]
 8021ea2:	4341      	muls	r1, r0
 8021ea4:	18d3      	adds	r3, r2, r3
 8021ea6:	9a07      	ldr	r2, [sp, #28]
 8021ea8:	195b      	adds	r3, r3, r5
 8021eaa:	0c12      	lsrs	r2, r2, #16
 8021eac:	1889      	adds	r1, r1, r2
 8021eae:	0c1a      	lsrs	r2, r3, #16
 8021eb0:	188a      	adds	r2, r1, r2
 8021eb2:	b29b      	uxth	r3, r3
 8021eb4:	0c15      	lsrs	r5, r2, #16
 8021eb6:	0412      	lsls	r2, r2, #16
 8021eb8:	431a      	orrs	r2, r3
 8021eba:	9b05      	ldr	r3, [sp, #20]
 8021ebc:	c704      	stmia	r7!, {r2}
 8021ebe:	42b3      	cmp	r3, r6
 8021ec0:	d8e6      	bhi.n	8021e90 <__multiply+0xc4>
 8021ec2:	4663      	mov	r3, ip
 8021ec4:	9a06      	ldr	r2, [sp, #24]
 8021ec6:	509d      	str	r5, [r3, r2]
 8021ec8:	9b01      	ldr	r3, [sp, #4]
 8021eca:	6818      	ldr	r0, [r3, #0]
 8021ecc:	0c00      	lsrs	r0, r0, #16
 8021ece:	d020      	beq.n	8021f12 <__multiply+0x146>
 8021ed0:	4663      	mov	r3, ip
 8021ed2:	0025      	movs	r5, r4
 8021ed4:	4661      	mov	r1, ip
 8021ed6:	2700      	movs	r7, #0
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	3514      	adds	r5, #20
 8021edc:	682a      	ldr	r2, [r5, #0]
 8021ede:	680e      	ldr	r6, [r1, #0]
 8021ee0:	b292      	uxth	r2, r2
 8021ee2:	4342      	muls	r2, r0
 8021ee4:	0c36      	lsrs	r6, r6, #16
 8021ee6:	1992      	adds	r2, r2, r6
 8021ee8:	19d2      	adds	r2, r2, r7
 8021eea:	0416      	lsls	r6, r2, #16
 8021eec:	b29b      	uxth	r3, r3
 8021eee:	431e      	orrs	r6, r3
 8021ef0:	600e      	str	r6, [r1, #0]
 8021ef2:	cd40      	ldmia	r5!, {r6}
 8021ef4:	684b      	ldr	r3, [r1, #4]
 8021ef6:	0c36      	lsrs	r6, r6, #16
 8021ef8:	4346      	muls	r6, r0
 8021efa:	b29b      	uxth	r3, r3
 8021efc:	0c12      	lsrs	r2, r2, #16
 8021efe:	18f3      	adds	r3, r6, r3
 8021f00:	189b      	adds	r3, r3, r2
 8021f02:	9a05      	ldr	r2, [sp, #20]
 8021f04:	0c1f      	lsrs	r7, r3, #16
 8021f06:	3104      	adds	r1, #4
 8021f08:	42aa      	cmp	r2, r5
 8021f0a:	d8e7      	bhi.n	8021edc <__multiply+0x110>
 8021f0c:	4662      	mov	r2, ip
 8021f0e:	9906      	ldr	r1, [sp, #24]
 8021f10:	5053      	str	r3, [r2, r1]
 8021f12:	9b01      	ldr	r3, [sp, #4]
 8021f14:	3304      	adds	r3, #4
 8021f16:	9301      	str	r3, [sp, #4]
 8021f18:	2304      	movs	r3, #4
 8021f1a:	449c      	add	ip, r3
 8021f1c:	e79b      	b.n	8021e56 <__multiply+0x8a>
 8021f1e:	9b03      	ldr	r3, [sp, #12]
 8021f20:	3b01      	subs	r3, #1
 8021f22:	9303      	str	r3, [sp, #12]
 8021f24:	e79b      	b.n	8021e5e <__multiply+0x92>
 8021f26:	46c0      	nop			@ (mov r8, r8)
 8021f28:	08025f59 	.word	0x08025f59
 8021f2c:	08025fca 	.word	0x08025fca

08021f30 <__pow5mult>:
 8021f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f32:	2303      	movs	r3, #3
 8021f34:	0015      	movs	r5, r2
 8021f36:	0007      	movs	r7, r0
 8021f38:	000e      	movs	r6, r1
 8021f3a:	401a      	ands	r2, r3
 8021f3c:	421d      	tst	r5, r3
 8021f3e:	d008      	beq.n	8021f52 <__pow5mult+0x22>
 8021f40:	4925      	ldr	r1, [pc, #148]	@ (8021fd8 <__pow5mult+0xa8>)
 8021f42:	3a01      	subs	r2, #1
 8021f44:	0092      	lsls	r2, r2, #2
 8021f46:	5852      	ldr	r2, [r2, r1]
 8021f48:	2300      	movs	r3, #0
 8021f4a:	0031      	movs	r1, r6
 8021f4c:	f7ff fe46 	bl	8021bdc <__multadd>
 8021f50:	0006      	movs	r6, r0
 8021f52:	10ad      	asrs	r5, r5, #2
 8021f54:	d03d      	beq.n	8021fd2 <__pow5mult+0xa2>
 8021f56:	69fc      	ldr	r4, [r7, #28]
 8021f58:	2c00      	cmp	r4, #0
 8021f5a:	d10f      	bne.n	8021f7c <__pow5mult+0x4c>
 8021f5c:	2010      	movs	r0, #16
 8021f5e:	f7ff fd07 	bl	8021970 <malloc>
 8021f62:	1e02      	subs	r2, r0, #0
 8021f64:	61f8      	str	r0, [r7, #28]
 8021f66:	d105      	bne.n	8021f74 <__pow5mult+0x44>
 8021f68:	21b4      	movs	r1, #180	@ 0xb4
 8021f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8021fdc <__pow5mult+0xac>)
 8021f6c:	481c      	ldr	r0, [pc, #112]	@ (8021fe0 <__pow5mult+0xb0>)
 8021f6e:	31ff      	adds	r1, #255	@ 0xff
 8021f70:	f000 feac 	bl	8022ccc <__assert_func>
 8021f74:	6044      	str	r4, [r0, #4]
 8021f76:	6084      	str	r4, [r0, #8]
 8021f78:	6004      	str	r4, [r0, #0]
 8021f7a:	60c4      	str	r4, [r0, #12]
 8021f7c:	69fb      	ldr	r3, [r7, #28]
 8021f7e:	689c      	ldr	r4, [r3, #8]
 8021f80:	9301      	str	r3, [sp, #4]
 8021f82:	2c00      	cmp	r4, #0
 8021f84:	d108      	bne.n	8021f98 <__pow5mult+0x68>
 8021f86:	0038      	movs	r0, r7
 8021f88:	4916      	ldr	r1, [pc, #88]	@ (8021fe4 <__pow5mult+0xb4>)
 8021f8a:	f7ff ff07 	bl	8021d9c <__i2b>
 8021f8e:	9b01      	ldr	r3, [sp, #4]
 8021f90:	0004      	movs	r4, r0
 8021f92:	6098      	str	r0, [r3, #8]
 8021f94:	2300      	movs	r3, #0
 8021f96:	6003      	str	r3, [r0, #0]
 8021f98:	2301      	movs	r3, #1
 8021f9a:	421d      	tst	r5, r3
 8021f9c:	d00a      	beq.n	8021fb4 <__pow5mult+0x84>
 8021f9e:	0031      	movs	r1, r6
 8021fa0:	0022      	movs	r2, r4
 8021fa2:	0038      	movs	r0, r7
 8021fa4:	f7ff ff12 	bl	8021dcc <__multiply>
 8021fa8:	0031      	movs	r1, r6
 8021faa:	9001      	str	r0, [sp, #4]
 8021fac:	0038      	movs	r0, r7
 8021fae:	f7ff fdf1 	bl	8021b94 <_Bfree>
 8021fb2:	9e01      	ldr	r6, [sp, #4]
 8021fb4:	106d      	asrs	r5, r5, #1
 8021fb6:	d00c      	beq.n	8021fd2 <__pow5mult+0xa2>
 8021fb8:	6820      	ldr	r0, [r4, #0]
 8021fba:	2800      	cmp	r0, #0
 8021fbc:	d107      	bne.n	8021fce <__pow5mult+0x9e>
 8021fbe:	0022      	movs	r2, r4
 8021fc0:	0021      	movs	r1, r4
 8021fc2:	0038      	movs	r0, r7
 8021fc4:	f7ff ff02 	bl	8021dcc <__multiply>
 8021fc8:	2300      	movs	r3, #0
 8021fca:	6020      	str	r0, [r4, #0]
 8021fcc:	6003      	str	r3, [r0, #0]
 8021fce:	0004      	movs	r4, r0
 8021fd0:	e7e2      	b.n	8021f98 <__pow5mult+0x68>
 8021fd2:	0030      	movs	r0, r6
 8021fd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021fd6:	46c0      	nop			@ (mov r8, r8)
 8021fd8:	08026024 	.word	0x08026024
 8021fdc:	08025eea 	.word	0x08025eea
 8021fe0:	08025fca 	.word	0x08025fca
 8021fe4:	00000271 	.word	0x00000271

08021fe8 <__lshift>:
 8021fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fea:	000c      	movs	r4, r1
 8021fec:	0016      	movs	r6, r2
 8021fee:	6923      	ldr	r3, [r4, #16]
 8021ff0:	1157      	asrs	r7, r2, #5
 8021ff2:	b085      	sub	sp, #20
 8021ff4:	18fb      	adds	r3, r7, r3
 8021ff6:	9301      	str	r3, [sp, #4]
 8021ff8:	3301      	adds	r3, #1
 8021ffa:	9300      	str	r3, [sp, #0]
 8021ffc:	6849      	ldr	r1, [r1, #4]
 8021ffe:	68a3      	ldr	r3, [r4, #8]
 8022000:	9002      	str	r0, [sp, #8]
 8022002:	9a00      	ldr	r2, [sp, #0]
 8022004:	4293      	cmp	r3, r2
 8022006:	db10      	blt.n	802202a <__lshift+0x42>
 8022008:	9802      	ldr	r0, [sp, #8]
 802200a:	f7ff fd7f 	bl	8021b0c <_Balloc>
 802200e:	2300      	movs	r3, #0
 8022010:	0001      	movs	r1, r0
 8022012:	0005      	movs	r5, r0
 8022014:	001a      	movs	r2, r3
 8022016:	3114      	adds	r1, #20
 8022018:	4298      	cmp	r0, r3
 802201a:	d10c      	bne.n	8022036 <__lshift+0x4e>
 802201c:	21ef      	movs	r1, #239	@ 0xef
 802201e:	002a      	movs	r2, r5
 8022020:	4b25      	ldr	r3, [pc, #148]	@ (80220b8 <__lshift+0xd0>)
 8022022:	4826      	ldr	r0, [pc, #152]	@ (80220bc <__lshift+0xd4>)
 8022024:	0049      	lsls	r1, r1, #1
 8022026:	f000 fe51 	bl	8022ccc <__assert_func>
 802202a:	3101      	adds	r1, #1
 802202c:	005b      	lsls	r3, r3, #1
 802202e:	e7e8      	b.n	8022002 <__lshift+0x1a>
 8022030:	0098      	lsls	r0, r3, #2
 8022032:	500a      	str	r2, [r1, r0]
 8022034:	3301      	adds	r3, #1
 8022036:	42bb      	cmp	r3, r7
 8022038:	dbfa      	blt.n	8022030 <__lshift+0x48>
 802203a:	43fb      	mvns	r3, r7
 802203c:	17db      	asrs	r3, r3, #31
 802203e:	401f      	ands	r7, r3
 8022040:	00bf      	lsls	r7, r7, #2
 8022042:	0023      	movs	r3, r4
 8022044:	201f      	movs	r0, #31
 8022046:	19c9      	adds	r1, r1, r7
 8022048:	0037      	movs	r7, r6
 802204a:	6922      	ldr	r2, [r4, #16]
 802204c:	3314      	adds	r3, #20
 802204e:	0092      	lsls	r2, r2, #2
 8022050:	189a      	adds	r2, r3, r2
 8022052:	4007      	ands	r7, r0
 8022054:	4206      	tst	r6, r0
 8022056:	d029      	beq.n	80220ac <__lshift+0xc4>
 8022058:	3001      	adds	r0, #1
 802205a:	1bc0      	subs	r0, r0, r7
 802205c:	9003      	str	r0, [sp, #12]
 802205e:	468c      	mov	ip, r1
 8022060:	2000      	movs	r0, #0
 8022062:	681e      	ldr	r6, [r3, #0]
 8022064:	40be      	lsls	r6, r7
 8022066:	4306      	orrs	r6, r0
 8022068:	4660      	mov	r0, ip
 802206a:	c040      	stmia	r0!, {r6}
 802206c:	4684      	mov	ip, r0
 802206e:	9e03      	ldr	r6, [sp, #12]
 8022070:	cb01      	ldmia	r3!, {r0}
 8022072:	40f0      	lsrs	r0, r6
 8022074:	429a      	cmp	r2, r3
 8022076:	d8f4      	bhi.n	8022062 <__lshift+0x7a>
 8022078:	0026      	movs	r6, r4
 802207a:	3615      	adds	r6, #21
 802207c:	2304      	movs	r3, #4
 802207e:	42b2      	cmp	r2, r6
 8022080:	d304      	bcc.n	802208c <__lshift+0xa4>
 8022082:	1b13      	subs	r3, r2, r4
 8022084:	3b15      	subs	r3, #21
 8022086:	089b      	lsrs	r3, r3, #2
 8022088:	3301      	adds	r3, #1
 802208a:	009b      	lsls	r3, r3, #2
 802208c:	50c8      	str	r0, [r1, r3]
 802208e:	2800      	cmp	r0, #0
 8022090:	d002      	beq.n	8022098 <__lshift+0xb0>
 8022092:	9b01      	ldr	r3, [sp, #4]
 8022094:	3302      	adds	r3, #2
 8022096:	9300      	str	r3, [sp, #0]
 8022098:	9b00      	ldr	r3, [sp, #0]
 802209a:	9802      	ldr	r0, [sp, #8]
 802209c:	3b01      	subs	r3, #1
 802209e:	0021      	movs	r1, r4
 80220a0:	612b      	str	r3, [r5, #16]
 80220a2:	f7ff fd77 	bl	8021b94 <_Bfree>
 80220a6:	0028      	movs	r0, r5
 80220a8:	b005      	add	sp, #20
 80220aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220ac:	cb01      	ldmia	r3!, {r0}
 80220ae:	c101      	stmia	r1!, {r0}
 80220b0:	429a      	cmp	r2, r3
 80220b2:	d8fb      	bhi.n	80220ac <__lshift+0xc4>
 80220b4:	e7f0      	b.n	8022098 <__lshift+0xb0>
 80220b6:	46c0      	nop			@ (mov r8, r8)
 80220b8:	08025f59 	.word	0x08025f59
 80220bc:	08025fca 	.word	0x08025fca

080220c0 <__mcmp>:
 80220c0:	b530      	push	{r4, r5, lr}
 80220c2:	690b      	ldr	r3, [r1, #16]
 80220c4:	6904      	ldr	r4, [r0, #16]
 80220c6:	0002      	movs	r2, r0
 80220c8:	1ae0      	subs	r0, r4, r3
 80220ca:	429c      	cmp	r4, r3
 80220cc:	d10f      	bne.n	80220ee <__mcmp+0x2e>
 80220ce:	3214      	adds	r2, #20
 80220d0:	009b      	lsls	r3, r3, #2
 80220d2:	3114      	adds	r1, #20
 80220d4:	0014      	movs	r4, r2
 80220d6:	18c9      	adds	r1, r1, r3
 80220d8:	18d2      	adds	r2, r2, r3
 80220da:	3a04      	subs	r2, #4
 80220dc:	3904      	subs	r1, #4
 80220de:	6815      	ldr	r5, [r2, #0]
 80220e0:	680b      	ldr	r3, [r1, #0]
 80220e2:	429d      	cmp	r5, r3
 80220e4:	d004      	beq.n	80220f0 <__mcmp+0x30>
 80220e6:	2001      	movs	r0, #1
 80220e8:	429d      	cmp	r5, r3
 80220ea:	d200      	bcs.n	80220ee <__mcmp+0x2e>
 80220ec:	3802      	subs	r0, #2
 80220ee:	bd30      	pop	{r4, r5, pc}
 80220f0:	4294      	cmp	r4, r2
 80220f2:	d3f2      	bcc.n	80220da <__mcmp+0x1a>
 80220f4:	e7fb      	b.n	80220ee <__mcmp+0x2e>
	...

080220f8 <__mdiff>:
 80220f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220fa:	000c      	movs	r4, r1
 80220fc:	b087      	sub	sp, #28
 80220fe:	9000      	str	r0, [sp, #0]
 8022100:	0011      	movs	r1, r2
 8022102:	0020      	movs	r0, r4
 8022104:	0017      	movs	r7, r2
 8022106:	f7ff ffdb 	bl	80220c0 <__mcmp>
 802210a:	1e05      	subs	r5, r0, #0
 802210c:	d110      	bne.n	8022130 <__mdiff+0x38>
 802210e:	0001      	movs	r1, r0
 8022110:	9800      	ldr	r0, [sp, #0]
 8022112:	f7ff fcfb 	bl	8021b0c <_Balloc>
 8022116:	1e02      	subs	r2, r0, #0
 8022118:	d104      	bne.n	8022124 <__mdiff+0x2c>
 802211a:	4b40      	ldr	r3, [pc, #256]	@ (802221c <__mdiff+0x124>)
 802211c:	4840      	ldr	r0, [pc, #256]	@ (8022220 <__mdiff+0x128>)
 802211e:	4941      	ldr	r1, [pc, #260]	@ (8022224 <__mdiff+0x12c>)
 8022120:	f000 fdd4 	bl	8022ccc <__assert_func>
 8022124:	2301      	movs	r3, #1
 8022126:	6145      	str	r5, [r0, #20]
 8022128:	6103      	str	r3, [r0, #16]
 802212a:	0010      	movs	r0, r2
 802212c:	b007      	add	sp, #28
 802212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022130:	2600      	movs	r6, #0
 8022132:	42b0      	cmp	r0, r6
 8022134:	da03      	bge.n	802213e <__mdiff+0x46>
 8022136:	0023      	movs	r3, r4
 8022138:	003c      	movs	r4, r7
 802213a:	001f      	movs	r7, r3
 802213c:	3601      	adds	r6, #1
 802213e:	6861      	ldr	r1, [r4, #4]
 8022140:	9800      	ldr	r0, [sp, #0]
 8022142:	f7ff fce3 	bl	8021b0c <_Balloc>
 8022146:	1e02      	subs	r2, r0, #0
 8022148:	d103      	bne.n	8022152 <__mdiff+0x5a>
 802214a:	4b34      	ldr	r3, [pc, #208]	@ (802221c <__mdiff+0x124>)
 802214c:	4834      	ldr	r0, [pc, #208]	@ (8022220 <__mdiff+0x128>)
 802214e:	4936      	ldr	r1, [pc, #216]	@ (8022228 <__mdiff+0x130>)
 8022150:	e7e6      	b.n	8022120 <__mdiff+0x28>
 8022152:	6923      	ldr	r3, [r4, #16]
 8022154:	3414      	adds	r4, #20
 8022156:	9300      	str	r3, [sp, #0]
 8022158:	009b      	lsls	r3, r3, #2
 802215a:	18e3      	adds	r3, r4, r3
 802215c:	0021      	movs	r1, r4
 802215e:	9401      	str	r4, [sp, #4]
 8022160:	003c      	movs	r4, r7
 8022162:	9302      	str	r3, [sp, #8]
 8022164:	693b      	ldr	r3, [r7, #16]
 8022166:	3414      	adds	r4, #20
 8022168:	009b      	lsls	r3, r3, #2
 802216a:	18e3      	adds	r3, r4, r3
 802216c:	9303      	str	r3, [sp, #12]
 802216e:	0003      	movs	r3, r0
 8022170:	60c6      	str	r6, [r0, #12]
 8022172:	468c      	mov	ip, r1
 8022174:	2000      	movs	r0, #0
 8022176:	3314      	adds	r3, #20
 8022178:	9304      	str	r3, [sp, #16]
 802217a:	9305      	str	r3, [sp, #20]
 802217c:	4663      	mov	r3, ip
 802217e:	cb20      	ldmia	r3!, {r5}
 8022180:	b2a9      	uxth	r1, r5
 8022182:	000e      	movs	r6, r1
 8022184:	469c      	mov	ip, r3
 8022186:	cc08      	ldmia	r4!, {r3}
 8022188:	0c2d      	lsrs	r5, r5, #16
 802218a:	b299      	uxth	r1, r3
 802218c:	1a71      	subs	r1, r6, r1
 802218e:	1809      	adds	r1, r1, r0
 8022190:	0c1b      	lsrs	r3, r3, #16
 8022192:	1408      	asrs	r0, r1, #16
 8022194:	1aeb      	subs	r3, r5, r3
 8022196:	181b      	adds	r3, r3, r0
 8022198:	1418      	asrs	r0, r3, #16
 802219a:	b289      	uxth	r1, r1
 802219c:	041b      	lsls	r3, r3, #16
 802219e:	4319      	orrs	r1, r3
 80221a0:	9b05      	ldr	r3, [sp, #20]
 80221a2:	c302      	stmia	r3!, {r1}
 80221a4:	9305      	str	r3, [sp, #20]
 80221a6:	9b03      	ldr	r3, [sp, #12]
 80221a8:	42a3      	cmp	r3, r4
 80221aa:	d8e7      	bhi.n	802217c <__mdiff+0x84>
 80221ac:	0039      	movs	r1, r7
 80221ae:	9c03      	ldr	r4, [sp, #12]
 80221b0:	3115      	adds	r1, #21
 80221b2:	2304      	movs	r3, #4
 80221b4:	428c      	cmp	r4, r1
 80221b6:	d304      	bcc.n	80221c2 <__mdiff+0xca>
 80221b8:	1be3      	subs	r3, r4, r7
 80221ba:	3b15      	subs	r3, #21
 80221bc:	089b      	lsrs	r3, r3, #2
 80221be:	3301      	adds	r3, #1
 80221c0:	009b      	lsls	r3, r3, #2
 80221c2:	9901      	ldr	r1, [sp, #4]
 80221c4:	18cd      	adds	r5, r1, r3
 80221c6:	9904      	ldr	r1, [sp, #16]
 80221c8:	002e      	movs	r6, r5
 80221ca:	18cb      	adds	r3, r1, r3
 80221cc:	001f      	movs	r7, r3
 80221ce:	9902      	ldr	r1, [sp, #8]
 80221d0:	428e      	cmp	r6, r1
 80221d2:	d311      	bcc.n	80221f8 <__mdiff+0x100>
 80221d4:	9c02      	ldr	r4, [sp, #8]
 80221d6:	1ee9      	subs	r1, r5, #3
 80221d8:	2000      	movs	r0, #0
 80221da:	428c      	cmp	r4, r1
 80221dc:	d304      	bcc.n	80221e8 <__mdiff+0xf0>
 80221de:	0021      	movs	r1, r4
 80221e0:	3103      	adds	r1, #3
 80221e2:	1b49      	subs	r1, r1, r5
 80221e4:	0889      	lsrs	r1, r1, #2
 80221e6:	0088      	lsls	r0, r1, #2
 80221e8:	181b      	adds	r3, r3, r0
 80221ea:	3b04      	subs	r3, #4
 80221ec:	6819      	ldr	r1, [r3, #0]
 80221ee:	2900      	cmp	r1, #0
 80221f0:	d010      	beq.n	8022214 <__mdiff+0x11c>
 80221f2:	9b00      	ldr	r3, [sp, #0]
 80221f4:	6113      	str	r3, [r2, #16]
 80221f6:	e798      	b.n	802212a <__mdiff+0x32>
 80221f8:	4684      	mov	ip, r0
 80221fa:	ce02      	ldmia	r6!, {r1}
 80221fc:	b288      	uxth	r0, r1
 80221fe:	4460      	add	r0, ip
 8022200:	1400      	asrs	r0, r0, #16
 8022202:	0c0c      	lsrs	r4, r1, #16
 8022204:	1904      	adds	r4, r0, r4
 8022206:	4461      	add	r1, ip
 8022208:	1420      	asrs	r0, r4, #16
 802220a:	b289      	uxth	r1, r1
 802220c:	0424      	lsls	r4, r4, #16
 802220e:	4321      	orrs	r1, r4
 8022210:	c702      	stmia	r7!, {r1}
 8022212:	e7dc      	b.n	80221ce <__mdiff+0xd6>
 8022214:	9900      	ldr	r1, [sp, #0]
 8022216:	3901      	subs	r1, #1
 8022218:	9100      	str	r1, [sp, #0]
 802221a:	e7e6      	b.n	80221ea <__mdiff+0xf2>
 802221c:	08025f59 	.word	0x08025f59
 8022220:	08025fca 	.word	0x08025fca
 8022224:	00000237 	.word	0x00000237
 8022228:	00000245 	.word	0x00000245

0802222c <__ulp>:
 802222c:	b510      	push	{r4, lr}
 802222e:	2400      	movs	r4, #0
 8022230:	4b0c      	ldr	r3, [pc, #48]	@ (8022264 <__ulp+0x38>)
 8022232:	4a0d      	ldr	r2, [pc, #52]	@ (8022268 <__ulp+0x3c>)
 8022234:	400b      	ands	r3, r1
 8022236:	189b      	adds	r3, r3, r2
 8022238:	42a3      	cmp	r3, r4
 802223a:	dc06      	bgt.n	802224a <__ulp+0x1e>
 802223c:	425b      	negs	r3, r3
 802223e:	151a      	asrs	r2, r3, #20
 8022240:	2a13      	cmp	r2, #19
 8022242:	dc05      	bgt.n	8022250 <__ulp+0x24>
 8022244:	2380      	movs	r3, #128	@ 0x80
 8022246:	031b      	lsls	r3, r3, #12
 8022248:	4113      	asrs	r3, r2
 802224a:	0019      	movs	r1, r3
 802224c:	0020      	movs	r0, r4
 802224e:	bd10      	pop	{r4, pc}
 8022250:	3a14      	subs	r2, #20
 8022252:	2401      	movs	r4, #1
 8022254:	2a1e      	cmp	r2, #30
 8022256:	dc02      	bgt.n	802225e <__ulp+0x32>
 8022258:	2480      	movs	r4, #128	@ 0x80
 802225a:	0624      	lsls	r4, r4, #24
 802225c:	40d4      	lsrs	r4, r2
 802225e:	2300      	movs	r3, #0
 8022260:	e7f3      	b.n	802224a <__ulp+0x1e>
 8022262:	46c0      	nop			@ (mov r8, r8)
 8022264:	7ff00000 	.word	0x7ff00000
 8022268:	fcc00000 	.word	0xfcc00000

0802226c <__b2d>:
 802226c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802226e:	0006      	movs	r6, r0
 8022270:	6903      	ldr	r3, [r0, #16]
 8022272:	3614      	adds	r6, #20
 8022274:	009b      	lsls	r3, r3, #2
 8022276:	18f3      	adds	r3, r6, r3
 8022278:	1f1d      	subs	r5, r3, #4
 802227a:	682c      	ldr	r4, [r5, #0]
 802227c:	000f      	movs	r7, r1
 802227e:	0020      	movs	r0, r4
 8022280:	9301      	str	r3, [sp, #4]
 8022282:	f7ff fd3b 	bl	8021cfc <__hi0bits>
 8022286:	2220      	movs	r2, #32
 8022288:	1a12      	subs	r2, r2, r0
 802228a:	603a      	str	r2, [r7, #0]
 802228c:	0003      	movs	r3, r0
 802228e:	4a1c      	ldr	r2, [pc, #112]	@ (8022300 <__b2d+0x94>)
 8022290:	280a      	cmp	r0, #10
 8022292:	dc15      	bgt.n	80222c0 <__b2d+0x54>
 8022294:	210b      	movs	r1, #11
 8022296:	0027      	movs	r7, r4
 8022298:	1a09      	subs	r1, r1, r0
 802229a:	40cf      	lsrs	r7, r1
 802229c:	433a      	orrs	r2, r7
 802229e:	468c      	mov	ip, r1
 80222a0:	0011      	movs	r1, r2
 80222a2:	2200      	movs	r2, #0
 80222a4:	42ae      	cmp	r6, r5
 80222a6:	d202      	bcs.n	80222ae <__b2d+0x42>
 80222a8:	9a01      	ldr	r2, [sp, #4]
 80222aa:	3a08      	subs	r2, #8
 80222ac:	6812      	ldr	r2, [r2, #0]
 80222ae:	3315      	adds	r3, #21
 80222b0:	409c      	lsls	r4, r3
 80222b2:	4663      	mov	r3, ip
 80222b4:	0027      	movs	r7, r4
 80222b6:	40da      	lsrs	r2, r3
 80222b8:	4317      	orrs	r7, r2
 80222ba:	0038      	movs	r0, r7
 80222bc:	b003      	add	sp, #12
 80222be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222c0:	2700      	movs	r7, #0
 80222c2:	42ae      	cmp	r6, r5
 80222c4:	d202      	bcs.n	80222cc <__b2d+0x60>
 80222c6:	9d01      	ldr	r5, [sp, #4]
 80222c8:	3d08      	subs	r5, #8
 80222ca:	682f      	ldr	r7, [r5, #0]
 80222cc:	210b      	movs	r1, #11
 80222ce:	4249      	negs	r1, r1
 80222d0:	468c      	mov	ip, r1
 80222d2:	449c      	add	ip, r3
 80222d4:	2b0b      	cmp	r3, #11
 80222d6:	d010      	beq.n	80222fa <__b2d+0x8e>
 80222d8:	4661      	mov	r1, ip
 80222da:	2320      	movs	r3, #32
 80222dc:	408c      	lsls	r4, r1
 80222de:	1a5b      	subs	r3, r3, r1
 80222e0:	0039      	movs	r1, r7
 80222e2:	40d9      	lsrs	r1, r3
 80222e4:	430c      	orrs	r4, r1
 80222e6:	4322      	orrs	r2, r4
 80222e8:	0011      	movs	r1, r2
 80222ea:	2200      	movs	r2, #0
 80222ec:	42b5      	cmp	r5, r6
 80222ee:	d901      	bls.n	80222f4 <__b2d+0x88>
 80222f0:	3d04      	subs	r5, #4
 80222f2:	682a      	ldr	r2, [r5, #0]
 80222f4:	4664      	mov	r4, ip
 80222f6:	40a7      	lsls	r7, r4
 80222f8:	e7dd      	b.n	80222b6 <__b2d+0x4a>
 80222fa:	4322      	orrs	r2, r4
 80222fc:	0011      	movs	r1, r2
 80222fe:	e7dc      	b.n	80222ba <__b2d+0x4e>
 8022300:	3ff00000 	.word	0x3ff00000

08022304 <__d2b>:
 8022304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022306:	2101      	movs	r1, #1
 8022308:	0016      	movs	r6, r2
 802230a:	001f      	movs	r7, r3
 802230c:	f7ff fbfe 	bl	8021b0c <_Balloc>
 8022310:	1e04      	subs	r4, r0, #0
 8022312:	d105      	bne.n	8022320 <__d2b+0x1c>
 8022314:	0022      	movs	r2, r4
 8022316:	4b25      	ldr	r3, [pc, #148]	@ (80223ac <__d2b+0xa8>)
 8022318:	4825      	ldr	r0, [pc, #148]	@ (80223b0 <__d2b+0xac>)
 802231a:	4926      	ldr	r1, [pc, #152]	@ (80223b4 <__d2b+0xb0>)
 802231c:	f000 fcd6 	bl	8022ccc <__assert_func>
 8022320:	033b      	lsls	r3, r7, #12
 8022322:	007d      	lsls	r5, r7, #1
 8022324:	0b1b      	lsrs	r3, r3, #12
 8022326:	0d6d      	lsrs	r5, r5, #21
 8022328:	d002      	beq.n	8022330 <__d2b+0x2c>
 802232a:	2280      	movs	r2, #128	@ 0x80
 802232c:	0352      	lsls	r2, r2, #13
 802232e:	4313      	orrs	r3, r2
 8022330:	9301      	str	r3, [sp, #4]
 8022332:	2e00      	cmp	r6, #0
 8022334:	d025      	beq.n	8022382 <__d2b+0x7e>
 8022336:	4668      	mov	r0, sp
 8022338:	9600      	str	r6, [sp, #0]
 802233a:	f7ff fd00 	bl	8021d3e <__lo0bits>
 802233e:	9b01      	ldr	r3, [sp, #4]
 8022340:	9900      	ldr	r1, [sp, #0]
 8022342:	2800      	cmp	r0, #0
 8022344:	d01b      	beq.n	802237e <__d2b+0x7a>
 8022346:	2220      	movs	r2, #32
 8022348:	001e      	movs	r6, r3
 802234a:	1a12      	subs	r2, r2, r0
 802234c:	4096      	lsls	r6, r2
 802234e:	0032      	movs	r2, r6
 8022350:	40c3      	lsrs	r3, r0
 8022352:	430a      	orrs	r2, r1
 8022354:	6162      	str	r2, [r4, #20]
 8022356:	9301      	str	r3, [sp, #4]
 8022358:	9e01      	ldr	r6, [sp, #4]
 802235a:	61a6      	str	r6, [r4, #24]
 802235c:	1e73      	subs	r3, r6, #1
 802235e:	419e      	sbcs	r6, r3
 8022360:	3601      	adds	r6, #1
 8022362:	6126      	str	r6, [r4, #16]
 8022364:	2d00      	cmp	r5, #0
 8022366:	d014      	beq.n	8022392 <__d2b+0x8e>
 8022368:	2635      	movs	r6, #53	@ 0x35
 802236a:	4b13      	ldr	r3, [pc, #76]	@ (80223b8 <__d2b+0xb4>)
 802236c:	18ed      	adds	r5, r5, r3
 802236e:	9b08      	ldr	r3, [sp, #32]
 8022370:	182d      	adds	r5, r5, r0
 8022372:	601d      	str	r5, [r3, #0]
 8022374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022376:	1a36      	subs	r6, r6, r0
 8022378:	601e      	str	r6, [r3, #0]
 802237a:	0020      	movs	r0, r4
 802237c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802237e:	6161      	str	r1, [r4, #20]
 8022380:	e7ea      	b.n	8022358 <__d2b+0x54>
 8022382:	a801      	add	r0, sp, #4
 8022384:	f7ff fcdb 	bl	8021d3e <__lo0bits>
 8022388:	9b01      	ldr	r3, [sp, #4]
 802238a:	2601      	movs	r6, #1
 802238c:	6163      	str	r3, [r4, #20]
 802238e:	3020      	adds	r0, #32
 8022390:	e7e7      	b.n	8022362 <__d2b+0x5e>
 8022392:	4b0a      	ldr	r3, [pc, #40]	@ (80223bc <__d2b+0xb8>)
 8022394:	18c0      	adds	r0, r0, r3
 8022396:	9b08      	ldr	r3, [sp, #32]
 8022398:	6018      	str	r0, [r3, #0]
 802239a:	4b09      	ldr	r3, [pc, #36]	@ (80223c0 <__d2b+0xbc>)
 802239c:	18f3      	adds	r3, r6, r3
 802239e:	009b      	lsls	r3, r3, #2
 80223a0:	18e3      	adds	r3, r4, r3
 80223a2:	6958      	ldr	r0, [r3, #20]
 80223a4:	f7ff fcaa 	bl	8021cfc <__hi0bits>
 80223a8:	0176      	lsls	r6, r6, #5
 80223aa:	e7e3      	b.n	8022374 <__d2b+0x70>
 80223ac:	08025f59 	.word	0x08025f59
 80223b0:	08025fca 	.word	0x08025fca
 80223b4:	0000030f 	.word	0x0000030f
 80223b8:	fffffbcd 	.word	0xfffffbcd
 80223bc:	fffffbce 	.word	0xfffffbce
 80223c0:	3fffffff 	.word	0x3fffffff

080223c4 <__ratio>:
 80223c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223c6:	b087      	sub	sp, #28
 80223c8:	000f      	movs	r7, r1
 80223ca:	a904      	add	r1, sp, #16
 80223cc:	0006      	movs	r6, r0
 80223ce:	f7ff ff4d 	bl	802226c <__b2d>
 80223d2:	9000      	str	r0, [sp, #0]
 80223d4:	9101      	str	r1, [sp, #4]
 80223d6:	9b00      	ldr	r3, [sp, #0]
 80223d8:	9c01      	ldr	r4, [sp, #4]
 80223da:	0038      	movs	r0, r7
 80223dc:	a905      	add	r1, sp, #20
 80223de:	9302      	str	r3, [sp, #8]
 80223e0:	9403      	str	r4, [sp, #12]
 80223e2:	f7ff ff43 	bl	802226c <__b2d>
 80223e6:	000d      	movs	r5, r1
 80223e8:	0002      	movs	r2, r0
 80223ea:	000b      	movs	r3, r1
 80223ec:	6930      	ldr	r0, [r6, #16]
 80223ee:	6939      	ldr	r1, [r7, #16]
 80223f0:	9e04      	ldr	r6, [sp, #16]
 80223f2:	1a40      	subs	r0, r0, r1
 80223f4:	9905      	ldr	r1, [sp, #20]
 80223f6:	0140      	lsls	r0, r0, #5
 80223f8:	1a71      	subs	r1, r6, r1
 80223fa:	1841      	adds	r1, r0, r1
 80223fc:	0508      	lsls	r0, r1, #20
 80223fe:	2900      	cmp	r1, #0
 8022400:	dd08      	ble.n	8022414 <__ratio+0x50>
 8022402:	9901      	ldr	r1, [sp, #4]
 8022404:	1841      	adds	r1, r0, r1
 8022406:	9103      	str	r1, [sp, #12]
 8022408:	9802      	ldr	r0, [sp, #8]
 802240a:	9903      	ldr	r1, [sp, #12]
 802240c:	f7df fcd2 	bl	8001db4 <__aeabi_ddiv>
 8022410:	b007      	add	sp, #28
 8022412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022414:	1a2b      	subs	r3, r5, r0
 8022416:	e7f7      	b.n	8022408 <__ratio+0x44>

08022418 <__copybits>:
 8022418:	b570      	push	{r4, r5, r6, lr}
 802241a:	0014      	movs	r4, r2
 802241c:	0005      	movs	r5, r0
 802241e:	3901      	subs	r1, #1
 8022420:	6913      	ldr	r3, [r2, #16]
 8022422:	1149      	asrs	r1, r1, #5
 8022424:	3101      	adds	r1, #1
 8022426:	0089      	lsls	r1, r1, #2
 8022428:	3414      	adds	r4, #20
 802242a:	009b      	lsls	r3, r3, #2
 802242c:	1841      	adds	r1, r0, r1
 802242e:	18e3      	adds	r3, r4, r3
 8022430:	42a3      	cmp	r3, r4
 8022432:	d80d      	bhi.n	8022450 <__copybits+0x38>
 8022434:	0014      	movs	r4, r2
 8022436:	3411      	adds	r4, #17
 8022438:	2500      	movs	r5, #0
 802243a:	429c      	cmp	r4, r3
 802243c:	d803      	bhi.n	8022446 <__copybits+0x2e>
 802243e:	1a9b      	subs	r3, r3, r2
 8022440:	3b11      	subs	r3, #17
 8022442:	089b      	lsrs	r3, r3, #2
 8022444:	009d      	lsls	r5, r3, #2
 8022446:	2300      	movs	r3, #0
 8022448:	1940      	adds	r0, r0, r5
 802244a:	4281      	cmp	r1, r0
 802244c:	d803      	bhi.n	8022456 <__copybits+0x3e>
 802244e:	bd70      	pop	{r4, r5, r6, pc}
 8022450:	cc40      	ldmia	r4!, {r6}
 8022452:	c540      	stmia	r5!, {r6}
 8022454:	e7ec      	b.n	8022430 <__copybits+0x18>
 8022456:	c008      	stmia	r0!, {r3}
 8022458:	e7f7      	b.n	802244a <__copybits+0x32>

0802245a <__any_on>:
 802245a:	0002      	movs	r2, r0
 802245c:	6900      	ldr	r0, [r0, #16]
 802245e:	b510      	push	{r4, lr}
 8022460:	3214      	adds	r2, #20
 8022462:	114b      	asrs	r3, r1, #5
 8022464:	4298      	cmp	r0, r3
 8022466:	db13      	blt.n	8022490 <__any_on+0x36>
 8022468:	dd0c      	ble.n	8022484 <__any_on+0x2a>
 802246a:	241f      	movs	r4, #31
 802246c:	0008      	movs	r0, r1
 802246e:	4020      	ands	r0, r4
 8022470:	4221      	tst	r1, r4
 8022472:	d007      	beq.n	8022484 <__any_on+0x2a>
 8022474:	0099      	lsls	r1, r3, #2
 8022476:	588c      	ldr	r4, [r1, r2]
 8022478:	0021      	movs	r1, r4
 802247a:	40c1      	lsrs	r1, r0
 802247c:	4081      	lsls	r1, r0
 802247e:	2001      	movs	r0, #1
 8022480:	428c      	cmp	r4, r1
 8022482:	d104      	bne.n	802248e <__any_on+0x34>
 8022484:	009b      	lsls	r3, r3, #2
 8022486:	18d3      	adds	r3, r2, r3
 8022488:	4293      	cmp	r3, r2
 802248a:	d803      	bhi.n	8022494 <__any_on+0x3a>
 802248c:	2000      	movs	r0, #0
 802248e:	bd10      	pop	{r4, pc}
 8022490:	0003      	movs	r3, r0
 8022492:	e7f7      	b.n	8022484 <__any_on+0x2a>
 8022494:	3b04      	subs	r3, #4
 8022496:	6819      	ldr	r1, [r3, #0]
 8022498:	2900      	cmp	r1, #0
 802249a:	d0f5      	beq.n	8022488 <__any_on+0x2e>
 802249c:	2001      	movs	r0, #1
 802249e:	e7f6      	b.n	802248e <__any_on+0x34>

080224a0 <__ascii_wctomb>:
 80224a0:	0003      	movs	r3, r0
 80224a2:	1e08      	subs	r0, r1, #0
 80224a4:	d005      	beq.n	80224b2 <__ascii_wctomb+0x12>
 80224a6:	2aff      	cmp	r2, #255	@ 0xff
 80224a8:	d904      	bls.n	80224b4 <__ascii_wctomb+0x14>
 80224aa:	228a      	movs	r2, #138	@ 0x8a
 80224ac:	2001      	movs	r0, #1
 80224ae:	601a      	str	r2, [r3, #0]
 80224b0:	4240      	negs	r0, r0
 80224b2:	4770      	bx	lr
 80224b4:	2001      	movs	r0, #1
 80224b6:	700a      	strb	r2, [r1, #0]
 80224b8:	e7fb      	b.n	80224b2 <__ascii_wctomb+0x12>
	...

080224bc <__ssputs_r>:
 80224bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224be:	688e      	ldr	r6, [r1, #8]
 80224c0:	b085      	sub	sp, #20
 80224c2:	001f      	movs	r7, r3
 80224c4:	000c      	movs	r4, r1
 80224c6:	680b      	ldr	r3, [r1, #0]
 80224c8:	9002      	str	r0, [sp, #8]
 80224ca:	9203      	str	r2, [sp, #12]
 80224cc:	42be      	cmp	r6, r7
 80224ce:	d830      	bhi.n	8022532 <__ssputs_r+0x76>
 80224d0:	210c      	movs	r1, #12
 80224d2:	5e62      	ldrsh	r2, [r4, r1]
 80224d4:	2190      	movs	r1, #144	@ 0x90
 80224d6:	00c9      	lsls	r1, r1, #3
 80224d8:	420a      	tst	r2, r1
 80224da:	d028      	beq.n	802252e <__ssputs_r+0x72>
 80224dc:	2003      	movs	r0, #3
 80224de:	6921      	ldr	r1, [r4, #16]
 80224e0:	1a5b      	subs	r3, r3, r1
 80224e2:	9301      	str	r3, [sp, #4]
 80224e4:	6963      	ldr	r3, [r4, #20]
 80224e6:	4343      	muls	r3, r0
 80224e8:	9801      	ldr	r0, [sp, #4]
 80224ea:	0fdd      	lsrs	r5, r3, #31
 80224ec:	18ed      	adds	r5, r5, r3
 80224ee:	1c7b      	adds	r3, r7, #1
 80224f0:	181b      	adds	r3, r3, r0
 80224f2:	106d      	asrs	r5, r5, #1
 80224f4:	42ab      	cmp	r3, r5
 80224f6:	d900      	bls.n	80224fa <__ssputs_r+0x3e>
 80224f8:	001d      	movs	r5, r3
 80224fa:	0552      	lsls	r2, r2, #21
 80224fc:	d528      	bpl.n	8022550 <__ssputs_r+0x94>
 80224fe:	0029      	movs	r1, r5
 8022500:	9802      	ldr	r0, [sp, #8]
 8022502:	f7ff fa61 	bl	80219c8 <_malloc_r>
 8022506:	1e06      	subs	r6, r0, #0
 8022508:	d02c      	beq.n	8022564 <__ssputs_r+0xa8>
 802250a:	9a01      	ldr	r2, [sp, #4]
 802250c:	6921      	ldr	r1, [r4, #16]
 802250e:	f7fd fff9 	bl	8020504 <memcpy>
 8022512:	89a2      	ldrh	r2, [r4, #12]
 8022514:	4b18      	ldr	r3, [pc, #96]	@ (8022578 <__ssputs_r+0xbc>)
 8022516:	401a      	ands	r2, r3
 8022518:	2380      	movs	r3, #128	@ 0x80
 802251a:	4313      	orrs	r3, r2
 802251c:	81a3      	strh	r3, [r4, #12]
 802251e:	9b01      	ldr	r3, [sp, #4]
 8022520:	6126      	str	r6, [r4, #16]
 8022522:	18f6      	adds	r6, r6, r3
 8022524:	6026      	str	r6, [r4, #0]
 8022526:	003e      	movs	r6, r7
 8022528:	6165      	str	r5, [r4, #20]
 802252a:	1aed      	subs	r5, r5, r3
 802252c:	60a5      	str	r5, [r4, #8]
 802252e:	42be      	cmp	r6, r7
 8022530:	d900      	bls.n	8022534 <__ssputs_r+0x78>
 8022532:	003e      	movs	r6, r7
 8022534:	0032      	movs	r2, r6
 8022536:	9903      	ldr	r1, [sp, #12]
 8022538:	6820      	ldr	r0, [r4, #0]
 802253a:	f000 fb7e 	bl	8022c3a <memmove>
 802253e:	2000      	movs	r0, #0
 8022540:	68a3      	ldr	r3, [r4, #8]
 8022542:	1b9b      	subs	r3, r3, r6
 8022544:	60a3      	str	r3, [r4, #8]
 8022546:	6823      	ldr	r3, [r4, #0]
 8022548:	199b      	adds	r3, r3, r6
 802254a:	6023      	str	r3, [r4, #0]
 802254c:	b005      	add	sp, #20
 802254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022550:	002a      	movs	r2, r5
 8022552:	9802      	ldr	r0, [sp, #8]
 8022554:	f000 fc05 	bl	8022d62 <_realloc_r>
 8022558:	1e06      	subs	r6, r0, #0
 802255a:	d1e0      	bne.n	802251e <__ssputs_r+0x62>
 802255c:	6921      	ldr	r1, [r4, #16]
 802255e:	9802      	ldr	r0, [sp, #8]
 8022560:	f7fe fe62 	bl	8021228 <_free_r>
 8022564:	230c      	movs	r3, #12
 8022566:	2001      	movs	r0, #1
 8022568:	9a02      	ldr	r2, [sp, #8]
 802256a:	4240      	negs	r0, r0
 802256c:	6013      	str	r3, [r2, #0]
 802256e:	89a2      	ldrh	r2, [r4, #12]
 8022570:	3334      	adds	r3, #52	@ 0x34
 8022572:	4313      	orrs	r3, r2
 8022574:	81a3      	strh	r3, [r4, #12]
 8022576:	e7e9      	b.n	802254c <__ssputs_r+0x90>
 8022578:	fffffb7f 	.word	0xfffffb7f

0802257c <_svfiprintf_r>:
 802257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802257e:	b0a1      	sub	sp, #132	@ 0x84
 8022580:	9003      	str	r0, [sp, #12]
 8022582:	001d      	movs	r5, r3
 8022584:	898b      	ldrh	r3, [r1, #12]
 8022586:	000f      	movs	r7, r1
 8022588:	0016      	movs	r6, r2
 802258a:	061b      	lsls	r3, r3, #24
 802258c:	d511      	bpl.n	80225b2 <_svfiprintf_r+0x36>
 802258e:	690b      	ldr	r3, [r1, #16]
 8022590:	2b00      	cmp	r3, #0
 8022592:	d10e      	bne.n	80225b2 <_svfiprintf_r+0x36>
 8022594:	2140      	movs	r1, #64	@ 0x40
 8022596:	f7ff fa17 	bl	80219c8 <_malloc_r>
 802259a:	6038      	str	r0, [r7, #0]
 802259c:	6138      	str	r0, [r7, #16]
 802259e:	2800      	cmp	r0, #0
 80225a0:	d105      	bne.n	80225ae <_svfiprintf_r+0x32>
 80225a2:	230c      	movs	r3, #12
 80225a4:	9a03      	ldr	r2, [sp, #12]
 80225a6:	6013      	str	r3, [r2, #0]
 80225a8:	2001      	movs	r0, #1
 80225aa:	4240      	negs	r0, r0
 80225ac:	e0cf      	b.n	802274e <_svfiprintf_r+0x1d2>
 80225ae:	2340      	movs	r3, #64	@ 0x40
 80225b0:	617b      	str	r3, [r7, #20]
 80225b2:	2300      	movs	r3, #0
 80225b4:	ac08      	add	r4, sp, #32
 80225b6:	6163      	str	r3, [r4, #20]
 80225b8:	3320      	adds	r3, #32
 80225ba:	7663      	strb	r3, [r4, #25]
 80225bc:	3310      	adds	r3, #16
 80225be:	76a3      	strb	r3, [r4, #26]
 80225c0:	9507      	str	r5, [sp, #28]
 80225c2:	0035      	movs	r5, r6
 80225c4:	782b      	ldrb	r3, [r5, #0]
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d001      	beq.n	80225ce <_svfiprintf_r+0x52>
 80225ca:	2b25      	cmp	r3, #37	@ 0x25
 80225cc:	d148      	bne.n	8022660 <_svfiprintf_r+0xe4>
 80225ce:	1bab      	subs	r3, r5, r6
 80225d0:	9305      	str	r3, [sp, #20]
 80225d2:	42b5      	cmp	r5, r6
 80225d4:	d00b      	beq.n	80225ee <_svfiprintf_r+0x72>
 80225d6:	0032      	movs	r2, r6
 80225d8:	0039      	movs	r1, r7
 80225da:	9803      	ldr	r0, [sp, #12]
 80225dc:	f7ff ff6e 	bl	80224bc <__ssputs_r>
 80225e0:	3001      	adds	r0, #1
 80225e2:	d100      	bne.n	80225e6 <_svfiprintf_r+0x6a>
 80225e4:	e0ae      	b.n	8022744 <_svfiprintf_r+0x1c8>
 80225e6:	6963      	ldr	r3, [r4, #20]
 80225e8:	9a05      	ldr	r2, [sp, #20]
 80225ea:	189b      	adds	r3, r3, r2
 80225ec:	6163      	str	r3, [r4, #20]
 80225ee:	782b      	ldrb	r3, [r5, #0]
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d100      	bne.n	80225f6 <_svfiprintf_r+0x7a>
 80225f4:	e0a6      	b.n	8022744 <_svfiprintf_r+0x1c8>
 80225f6:	2201      	movs	r2, #1
 80225f8:	2300      	movs	r3, #0
 80225fa:	4252      	negs	r2, r2
 80225fc:	6062      	str	r2, [r4, #4]
 80225fe:	a904      	add	r1, sp, #16
 8022600:	3254      	adds	r2, #84	@ 0x54
 8022602:	1852      	adds	r2, r2, r1
 8022604:	1c6e      	adds	r6, r5, #1
 8022606:	6023      	str	r3, [r4, #0]
 8022608:	60e3      	str	r3, [r4, #12]
 802260a:	60a3      	str	r3, [r4, #8]
 802260c:	7013      	strb	r3, [r2, #0]
 802260e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022610:	4b54      	ldr	r3, [pc, #336]	@ (8022764 <_svfiprintf_r+0x1e8>)
 8022612:	2205      	movs	r2, #5
 8022614:	0018      	movs	r0, r3
 8022616:	7831      	ldrb	r1, [r6, #0]
 8022618:	9305      	str	r3, [sp, #20]
 802261a:	f7fd ff68 	bl	80204ee <memchr>
 802261e:	1c75      	adds	r5, r6, #1
 8022620:	2800      	cmp	r0, #0
 8022622:	d11f      	bne.n	8022664 <_svfiprintf_r+0xe8>
 8022624:	6822      	ldr	r2, [r4, #0]
 8022626:	06d3      	lsls	r3, r2, #27
 8022628:	d504      	bpl.n	8022634 <_svfiprintf_r+0xb8>
 802262a:	2353      	movs	r3, #83	@ 0x53
 802262c:	a904      	add	r1, sp, #16
 802262e:	185b      	adds	r3, r3, r1
 8022630:	2120      	movs	r1, #32
 8022632:	7019      	strb	r1, [r3, #0]
 8022634:	0713      	lsls	r3, r2, #28
 8022636:	d504      	bpl.n	8022642 <_svfiprintf_r+0xc6>
 8022638:	2353      	movs	r3, #83	@ 0x53
 802263a:	a904      	add	r1, sp, #16
 802263c:	185b      	adds	r3, r3, r1
 802263e:	212b      	movs	r1, #43	@ 0x2b
 8022640:	7019      	strb	r1, [r3, #0]
 8022642:	7833      	ldrb	r3, [r6, #0]
 8022644:	2b2a      	cmp	r3, #42	@ 0x2a
 8022646:	d016      	beq.n	8022676 <_svfiprintf_r+0xfa>
 8022648:	0035      	movs	r5, r6
 802264a:	2100      	movs	r1, #0
 802264c:	200a      	movs	r0, #10
 802264e:	68e3      	ldr	r3, [r4, #12]
 8022650:	782a      	ldrb	r2, [r5, #0]
 8022652:	1c6e      	adds	r6, r5, #1
 8022654:	3a30      	subs	r2, #48	@ 0x30
 8022656:	2a09      	cmp	r2, #9
 8022658:	d950      	bls.n	80226fc <_svfiprintf_r+0x180>
 802265a:	2900      	cmp	r1, #0
 802265c:	d111      	bne.n	8022682 <_svfiprintf_r+0x106>
 802265e:	e017      	b.n	8022690 <_svfiprintf_r+0x114>
 8022660:	3501      	adds	r5, #1
 8022662:	e7af      	b.n	80225c4 <_svfiprintf_r+0x48>
 8022664:	9b05      	ldr	r3, [sp, #20]
 8022666:	6822      	ldr	r2, [r4, #0]
 8022668:	1ac0      	subs	r0, r0, r3
 802266a:	2301      	movs	r3, #1
 802266c:	4083      	lsls	r3, r0
 802266e:	4313      	orrs	r3, r2
 8022670:	002e      	movs	r6, r5
 8022672:	6023      	str	r3, [r4, #0]
 8022674:	e7cc      	b.n	8022610 <_svfiprintf_r+0x94>
 8022676:	9b07      	ldr	r3, [sp, #28]
 8022678:	1d19      	adds	r1, r3, #4
 802267a:	681b      	ldr	r3, [r3, #0]
 802267c:	9107      	str	r1, [sp, #28]
 802267e:	2b00      	cmp	r3, #0
 8022680:	db01      	blt.n	8022686 <_svfiprintf_r+0x10a>
 8022682:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022684:	e004      	b.n	8022690 <_svfiprintf_r+0x114>
 8022686:	425b      	negs	r3, r3
 8022688:	60e3      	str	r3, [r4, #12]
 802268a:	2302      	movs	r3, #2
 802268c:	4313      	orrs	r3, r2
 802268e:	6023      	str	r3, [r4, #0]
 8022690:	782b      	ldrb	r3, [r5, #0]
 8022692:	2b2e      	cmp	r3, #46	@ 0x2e
 8022694:	d10c      	bne.n	80226b0 <_svfiprintf_r+0x134>
 8022696:	786b      	ldrb	r3, [r5, #1]
 8022698:	2b2a      	cmp	r3, #42	@ 0x2a
 802269a:	d134      	bne.n	8022706 <_svfiprintf_r+0x18a>
 802269c:	9b07      	ldr	r3, [sp, #28]
 802269e:	3502      	adds	r5, #2
 80226a0:	1d1a      	adds	r2, r3, #4
 80226a2:	681b      	ldr	r3, [r3, #0]
 80226a4:	9207      	str	r2, [sp, #28]
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	da01      	bge.n	80226ae <_svfiprintf_r+0x132>
 80226aa:	2301      	movs	r3, #1
 80226ac:	425b      	negs	r3, r3
 80226ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80226b0:	4e2d      	ldr	r6, [pc, #180]	@ (8022768 <_svfiprintf_r+0x1ec>)
 80226b2:	2203      	movs	r2, #3
 80226b4:	0030      	movs	r0, r6
 80226b6:	7829      	ldrb	r1, [r5, #0]
 80226b8:	f7fd ff19 	bl	80204ee <memchr>
 80226bc:	2800      	cmp	r0, #0
 80226be:	d006      	beq.n	80226ce <_svfiprintf_r+0x152>
 80226c0:	2340      	movs	r3, #64	@ 0x40
 80226c2:	1b80      	subs	r0, r0, r6
 80226c4:	4083      	lsls	r3, r0
 80226c6:	6822      	ldr	r2, [r4, #0]
 80226c8:	3501      	adds	r5, #1
 80226ca:	4313      	orrs	r3, r2
 80226cc:	6023      	str	r3, [r4, #0]
 80226ce:	7829      	ldrb	r1, [r5, #0]
 80226d0:	2206      	movs	r2, #6
 80226d2:	4826      	ldr	r0, [pc, #152]	@ (802276c <_svfiprintf_r+0x1f0>)
 80226d4:	1c6e      	adds	r6, r5, #1
 80226d6:	7621      	strb	r1, [r4, #24]
 80226d8:	f7fd ff09 	bl	80204ee <memchr>
 80226dc:	2800      	cmp	r0, #0
 80226de:	d038      	beq.n	8022752 <_svfiprintf_r+0x1d6>
 80226e0:	4b23      	ldr	r3, [pc, #140]	@ (8022770 <_svfiprintf_r+0x1f4>)
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d122      	bne.n	802272c <_svfiprintf_r+0x1b0>
 80226e6:	2207      	movs	r2, #7
 80226e8:	9b07      	ldr	r3, [sp, #28]
 80226ea:	3307      	adds	r3, #7
 80226ec:	4393      	bics	r3, r2
 80226ee:	3308      	adds	r3, #8
 80226f0:	9307      	str	r3, [sp, #28]
 80226f2:	6963      	ldr	r3, [r4, #20]
 80226f4:	9a04      	ldr	r2, [sp, #16]
 80226f6:	189b      	adds	r3, r3, r2
 80226f8:	6163      	str	r3, [r4, #20]
 80226fa:	e762      	b.n	80225c2 <_svfiprintf_r+0x46>
 80226fc:	4343      	muls	r3, r0
 80226fe:	0035      	movs	r5, r6
 8022700:	2101      	movs	r1, #1
 8022702:	189b      	adds	r3, r3, r2
 8022704:	e7a4      	b.n	8022650 <_svfiprintf_r+0xd4>
 8022706:	2300      	movs	r3, #0
 8022708:	200a      	movs	r0, #10
 802270a:	0019      	movs	r1, r3
 802270c:	3501      	adds	r5, #1
 802270e:	6063      	str	r3, [r4, #4]
 8022710:	782a      	ldrb	r2, [r5, #0]
 8022712:	1c6e      	adds	r6, r5, #1
 8022714:	3a30      	subs	r2, #48	@ 0x30
 8022716:	2a09      	cmp	r2, #9
 8022718:	d903      	bls.n	8022722 <_svfiprintf_r+0x1a6>
 802271a:	2b00      	cmp	r3, #0
 802271c:	d0c8      	beq.n	80226b0 <_svfiprintf_r+0x134>
 802271e:	9109      	str	r1, [sp, #36]	@ 0x24
 8022720:	e7c6      	b.n	80226b0 <_svfiprintf_r+0x134>
 8022722:	4341      	muls	r1, r0
 8022724:	0035      	movs	r5, r6
 8022726:	2301      	movs	r3, #1
 8022728:	1889      	adds	r1, r1, r2
 802272a:	e7f1      	b.n	8022710 <_svfiprintf_r+0x194>
 802272c:	aa07      	add	r2, sp, #28
 802272e:	9200      	str	r2, [sp, #0]
 8022730:	0021      	movs	r1, r4
 8022732:	003a      	movs	r2, r7
 8022734:	4b0f      	ldr	r3, [pc, #60]	@ (8022774 <_svfiprintf_r+0x1f8>)
 8022736:	9803      	ldr	r0, [sp, #12]
 8022738:	f7fc ffd4 	bl	801f6e4 <_printf_float>
 802273c:	9004      	str	r0, [sp, #16]
 802273e:	9b04      	ldr	r3, [sp, #16]
 8022740:	3301      	adds	r3, #1
 8022742:	d1d6      	bne.n	80226f2 <_svfiprintf_r+0x176>
 8022744:	89bb      	ldrh	r3, [r7, #12]
 8022746:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022748:	065b      	lsls	r3, r3, #25
 802274a:	d500      	bpl.n	802274e <_svfiprintf_r+0x1d2>
 802274c:	e72c      	b.n	80225a8 <_svfiprintf_r+0x2c>
 802274e:	b021      	add	sp, #132	@ 0x84
 8022750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022752:	aa07      	add	r2, sp, #28
 8022754:	9200      	str	r2, [sp, #0]
 8022756:	0021      	movs	r1, r4
 8022758:	003a      	movs	r2, r7
 802275a:	4b06      	ldr	r3, [pc, #24]	@ (8022774 <_svfiprintf_r+0x1f8>)
 802275c:	9803      	ldr	r0, [sp, #12]
 802275e:	f7fd fa6f 	bl	801fc40 <_printf_i>
 8022762:	e7eb      	b.n	802273c <_svfiprintf_r+0x1c0>
 8022764:	08026120 	.word	0x08026120
 8022768:	08026126 	.word	0x08026126
 802276c:	0802612a 	.word	0x0802612a
 8022770:	0801f6e5 	.word	0x0801f6e5
 8022774:	080224bd 	.word	0x080224bd

08022778 <__sfputc_r>:
 8022778:	6893      	ldr	r3, [r2, #8]
 802277a:	b510      	push	{r4, lr}
 802277c:	3b01      	subs	r3, #1
 802277e:	6093      	str	r3, [r2, #8]
 8022780:	2b00      	cmp	r3, #0
 8022782:	da04      	bge.n	802278e <__sfputc_r+0x16>
 8022784:	6994      	ldr	r4, [r2, #24]
 8022786:	42a3      	cmp	r3, r4
 8022788:	db07      	blt.n	802279a <__sfputc_r+0x22>
 802278a:	290a      	cmp	r1, #10
 802278c:	d005      	beq.n	802279a <__sfputc_r+0x22>
 802278e:	6813      	ldr	r3, [r2, #0]
 8022790:	1c58      	adds	r0, r3, #1
 8022792:	6010      	str	r0, [r2, #0]
 8022794:	7019      	strb	r1, [r3, #0]
 8022796:	0008      	movs	r0, r1
 8022798:	bd10      	pop	{r4, pc}
 802279a:	f7fd fd37 	bl	802020c <__swbuf_r>
 802279e:	0001      	movs	r1, r0
 80227a0:	e7f9      	b.n	8022796 <__sfputc_r+0x1e>

080227a2 <__sfputs_r>:
 80227a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227a4:	0006      	movs	r6, r0
 80227a6:	000f      	movs	r7, r1
 80227a8:	0014      	movs	r4, r2
 80227aa:	18d5      	adds	r5, r2, r3
 80227ac:	42ac      	cmp	r4, r5
 80227ae:	d101      	bne.n	80227b4 <__sfputs_r+0x12>
 80227b0:	2000      	movs	r0, #0
 80227b2:	e007      	b.n	80227c4 <__sfputs_r+0x22>
 80227b4:	7821      	ldrb	r1, [r4, #0]
 80227b6:	003a      	movs	r2, r7
 80227b8:	0030      	movs	r0, r6
 80227ba:	f7ff ffdd 	bl	8022778 <__sfputc_r>
 80227be:	3401      	adds	r4, #1
 80227c0:	1c43      	adds	r3, r0, #1
 80227c2:	d1f3      	bne.n	80227ac <__sfputs_r+0xa>
 80227c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227c8 <_vfiprintf_r>:
 80227c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227ca:	b0a1      	sub	sp, #132	@ 0x84
 80227cc:	000f      	movs	r7, r1
 80227ce:	0015      	movs	r5, r2
 80227d0:	001e      	movs	r6, r3
 80227d2:	9003      	str	r0, [sp, #12]
 80227d4:	2800      	cmp	r0, #0
 80227d6:	d004      	beq.n	80227e2 <_vfiprintf_r+0x1a>
 80227d8:	6a03      	ldr	r3, [r0, #32]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d101      	bne.n	80227e2 <_vfiprintf_r+0x1a>
 80227de:	f7fd fbcd 	bl	801ff7c <__sinit>
 80227e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80227e4:	07db      	lsls	r3, r3, #31
 80227e6:	d405      	bmi.n	80227f4 <_vfiprintf_r+0x2c>
 80227e8:	89bb      	ldrh	r3, [r7, #12]
 80227ea:	059b      	lsls	r3, r3, #22
 80227ec:	d402      	bmi.n	80227f4 <_vfiprintf_r+0x2c>
 80227ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80227f0:	f7fd fe7b 	bl	80204ea <__retarget_lock_acquire_recursive>
 80227f4:	89bb      	ldrh	r3, [r7, #12]
 80227f6:	071b      	lsls	r3, r3, #28
 80227f8:	d502      	bpl.n	8022800 <_vfiprintf_r+0x38>
 80227fa:	693b      	ldr	r3, [r7, #16]
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d113      	bne.n	8022828 <_vfiprintf_r+0x60>
 8022800:	0039      	movs	r1, r7
 8022802:	9803      	ldr	r0, [sp, #12]
 8022804:	f7fd fd44 	bl	8020290 <__swsetup_r>
 8022808:	2800      	cmp	r0, #0
 802280a:	d00d      	beq.n	8022828 <_vfiprintf_r+0x60>
 802280c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802280e:	07db      	lsls	r3, r3, #31
 8022810:	d503      	bpl.n	802281a <_vfiprintf_r+0x52>
 8022812:	2001      	movs	r0, #1
 8022814:	4240      	negs	r0, r0
 8022816:	b021      	add	sp, #132	@ 0x84
 8022818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802281a:	89bb      	ldrh	r3, [r7, #12]
 802281c:	059b      	lsls	r3, r3, #22
 802281e:	d4f8      	bmi.n	8022812 <_vfiprintf_r+0x4a>
 8022820:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022822:	f7fd fe63 	bl	80204ec <__retarget_lock_release_recursive>
 8022826:	e7f4      	b.n	8022812 <_vfiprintf_r+0x4a>
 8022828:	2300      	movs	r3, #0
 802282a:	ac08      	add	r4, sp, #32
 802282c:	6163      	str	r3, [r4, #20]
 802282e:	3320      	adds	r3, #32
 8022830:	7663      	strb	r3, [r4, #25]
 8022832:	3310      	adds	r3, #16
 8022834:	76a3      	strb	r3, [r4, #26]
 8022836:	9607      	str	r6, [sp, #28]
 8022838:	002e      	movs	r6, r5
 802283a:	7833      	ldrb	r3, [r6, #0]
 802283c:	2b00      	cmp	r3, #0
 802283e:	d001      	beq.n	8022844 <_vfiprintf_r+0x7c>
 8022840:	2b25      	cmp	r3, #37	@ 0x25
 8022842:	d148      	bne.n	80228d6 <_vfiprintf_r+0x10e>
 8022844:	1b73      	subs	r3, r6, r5
 8022846:	9305      	str	r3, [sp, #20]
 8022848:	42ae      	cmp	r6, r5
 802284a:	d00b      	beq.n	8022864 <_vfiprintf_r+0x9c>
 802284c:	002a      	movs	r2, r5
 802284e:	0039      	movs	r1, r7
 8022850:	9803      	ldr	r0, [sp, #12]
 8022852:	f7ff ffa6 	bl	80227a2 <__sfputs_r>
 8022856:	3001      	adds	r0, #1
 8022858:	d100      	bne.n	802285c <_vfiprintf_r+0x94>
 802285a:	e0ae      	b.n	80229ba <_vfiprintf_r+0x1f2>
 802285c:	6963      	ldr	r3, [r4, #20]
 802285e:	9a05      	ldr	r2, [sp, #20]
 8022860:	189b      	adds	r3, r3, r2
 8022862:	6163      	str	r3, [r4, #20]
 8022864:	7833      	ldrb	r3, [r6, #0]
 8022866:	2b00      	cmp	r3, #0
 8022868:	d100      	bne.n	802286c <_vfiprintf_r+0xa4>
 802286a:	e0a6      	b.n	80229ba <_vfiprintf_r+0x1f2>
 802286c:	2201      	movs	r2, #1
 802286e:	2300      	movs	r3, #0
 8022870:	4252      	negs	r2, r2
 8022872:	6062      	str	r2, [r4, #4]
 8022874:	a904      	add	r1, sp, #16
 8022876:	3254      	adds	r2, #84	@ 0x54
 8022878:	1852      	adds	r2, r2, r1
 802287a:	1c75      	adds	r5, r6, #1
 802287c:	6023      	str	r3, [r4, #0]
 802287e:	60e3      	str	r3, [r4, #12]
 8022880:	60a3      	str	r3, [r4, #8]
 8022882:	7013      	strb	r3, [r2, #0]
 8022884:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022886:	4b59      	ldr	r3, [pc, #356]	@ (80229ec <_vfiprintf_r+0x224>)
 8022888:	2205      	movs	r2, #5
 802288a:	0018      	movs	r0, r3
 802288c:	7829      	ldrb	r1, [r5, #0]
 802288e:	9305      	str	r3, [sp, #20]
 8022890:	f7fd fe2d 	bl	80204ee <memchr>
 8022894:	1c6e      	adds	r6, r5, #1
 8022896:	2800      	cmp	r0, #0
 8022898:	d11f      	bne.n	80228da <_vfiprintf_r+0x112>
 802289a:	6822      	ldr	r2, [r4, #0]
 802289c:	06d3      	lsls	r3, r2, #27
 802289e:	d504      	bpl.n	80228aa <_vfiprintf_r+0xe2>
 80228a0:	2353      	movs	r3, #83	@ 0x53
 80228a2:	a904      	add	r1, sp, #16
 80228a4:	185b      	adds	r3, r3, r1
 80228a6:	2120      	movs	r1, #32
 80228a8:	7019      	strb	r1, [r3, #0]
 80228aa:	0713      	lsls	r3, r2, #28
 80228ac:	d504      	bpl.n	80228b8 <_vfiprintf_r+0xf0>
 80228ae:	2353      	movs	r3, #83	@ 0x53
 80228b0:	a904      	add	r1, sp, #16
 80228b2:	185b      	adds	r3, r3, r1
 80228b4:	212b      	movs	r1, #43	@ 0x2b
 80228b6:	7019      	strb	r1, [r3, #0]
 80228b8:	782b      	ldrb	r3, [r5, #0]
 80228ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80228bc:	d016      	beq.n	80228ec <_vfiprintf_r+0x124>
 80228be:	002e      	movs	r6, r5
 80228c0:	2100      	movs	r1, #0
 80228c2:	200a      	movs	r0, #10
 80228c4:	68e3      	ldr	r3, [r4, #12]
 80228c6:	7832      	ldrb	r2, [r6, #0]
 80228c8:	1c75      	adds	r5, r6, #1
 80228ca:	3a30      	subs	r2, #48	@ 0x30
 80228cc:	2a09      	cmp	r2, #9
 80228ce:	d950      	bls.n	8022972 <_vfiprintf_r+0x1aa>
 80228d0:	2900      	cmp	r1, #0
 80228d2:	d111      	bne.n	80228f8 <_vfiprintf_r+0x130>
 80228d4:	e017      	b.n	8022906 <_vfiprintf_r+0x13e>
 80228d6:	3601      	adds	r6, #1
 80228d8:	e7af      	b.n	802283a <_vfiprintf_r+0x72>
 80228da:	9b05      	ldr	r3, [sp, #20]
 80228dc:	6822      	ldr	r2, [r4, #0]
 80228de:	1ac0      	subs	r0, r0, r3
 80228e0:	2301      	movs	r3, #1
 80228e2:	4083      	lsls	r3, r0
 80228e4:	4313      	orrs	r3, r2
 80228e6:	0035      	movs	r5, r6
 80228e8:	6023      	str	r3, [r4, #0]
 80228ea:	e7cc      	b.n	8022886 <_vfiprintf_r+0xbe>
 80228ec:	9b07      	ldr	r3, [sp, #28]
 80228ee:	1d19      	adds	r1, r3, #4
 80228f0:	681b      	ldr	r3, [r3, #0]
 80228f2:	9107      	str	r1, [sp, #28]
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	db01      	blt.n	80228fc <_vfiprintf_r+0x134>
 80228f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80228fa:	e004      	b.n	8022906 <_vfiprintf_r+0x13e>
 80228fc:	425b      	negs	r3, r3
 80228fe:	60e3      	str	r3, [r4, #12]
 8022900:	2302      	movs	r3, #2
 8022902:	4313      	orrs	r3, r2
 8022904:	6023      	str	r3, [r4, #0]
 8022906:	7833      	ldrb	r3, [r6, #0]
 8022908:	2b2e      	cmp	r3, #46	@ 0x2e
 802290a:	d10c      	bne.n	8022926 <_vfiprintf_r+0x15e>
 802290c:	7873      	ldrb	r3, [r6, #1]
 802290e:	2b2a      	cmp	r3, #42	@ 0x2a
 8022910:	d134      	bne.n	802297c <_vfiprintf_r+0x1b4>
 8022912:	9b07      	ldr	r3, [sp, #28]
 8022914:	3602      	adds	r6, #2
 8022916:	1d1a      	adds	r2, r3, #4
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	9207      	str	r2, [sp, #28]
 802291c:	2b00      	cmp	r3, #0
 802291e:	da01      	bge.n	8022924 <_vfiprintf_r+0x15c>
 8022920:	2301      	movs	r3, #1
 8022922:	425b      	negs	r3, r3
 8022924:	9309      	str	r3, [sp, #36]	@ 0x24
 8022926:	4d32      	ldr	r5, [pc, #200]	@ (80229f0 <_vfiprintf_r+0x228>)
 8022928:	2203      	movs	r2, #3
 802292a:	0028      	movs	r0, r5
 802292c:	7831      	ldrb	r1, [r6, #0]
 802292e:	f7fd fdde 	bl	80204ee <memchr>
 8022932:	2800      	cmp	r0, #0
 8022934:	d006      	beq.n	8022944 <_vfiprintf_r+0x17c>
 8022936:	2340      	movs	r3, #64	@ 0x40
 8022938:	1b40      	subs	r0, r0, r5
 802293a:	4083      	lsls	r3, r0
 802293c:	6822      	ldr	r2, [r4, #0]
 802293e:	3601      	adds	r6, #1
 8022940:	4313      	orrs	r3, r2
 8022942:	6023      	str	r3, [r4, #0]
 8022944:	7831      	ldrb	r1, [r6, #0]
 8022946:	2206      	movs	r2, #6
 8022948:	482a      	ldr	r0, [pc, #168]	@ (80229f4 <_vfiprintf_r+0x22c>)
 802294a:	1c75      	adds	r5, r6, #1
 802294c:	7621      	strb	r1, [r4, #24]
 802294e:	f7fd fdce 	bl	80204ee <memchr>
 8022952:	2800      	cmp	r0, #0
 8022954:	d040      	beq.n	80229d8 <_vfiprintf_r+0x210>
 8022956:	4b28      	ldr	r3, [pc, #160]	@ (80229f8 <_vfiprintf_r+0x230>)
 8022958:	2b00      	cmp	r3, #0
 802295a:	d122      	bne.n	80229a2 <_vfiprintf_r+0x1da>
 802295c:	2207      	movs	r2, #7
 802295e:	9b07      	ldr	r3, [sp, #28]
 8022960:	3307      	adds	r3, #7
 8022962:	4393      	bics	r3, r2
 8022964:	3308      	adds	r3, #8
 8022966:	9307      	str	r3, [sp, #28]
 8022968:	6963      	ldr	r3, [r4, #20]
 802296a:	9a04      	ldr	r2, [sp, #16]
 802296c:	189b      	adds	r3, r3, r2
 802296e:	6163      	str	r3, [r4, #20]
 8022970:	e762      	b.n	8022838 <_vfiprintf_r+0x70>
 8022972:	4343      	muls	r3, r0
 8022974:	002e      	movs	r6, r5
 8022976:	2101      	movs	r1, #1
 8022978:	189b      	adds	r3, r3, r2
 802297a:	e7a4      	b.n	80228c6 <_vfiprintf_r+0xfe>
 802297c:	2300      	movs	r3, #0
 802297e:	200a      	movs	r0, #10
 8022980:	0019      	movs	r1, r3
 8022982:	3601      	adds	r6, #1
 8022984:	6063      	str	r3, [r4, #4]
 8022986:	7832      	ldrb	r2, [r6, #0]
 8022988:	1c75      	adds	r5, r6, #1
 802298a:	3a30      	subs	r2, #48	@ 0x30
 802298c:	2a09      	cmp	r2, #9
 802298e:	d903      	bls.n	8022998 <_vfiprintf_r+0x1d0>
 8022990:	2b00      	cmp	r3, #0
 8022992:	d0c8      	beq.n	8022926 <_vfiprintf_r+0x15e>
 8022994:	9109      	str	r1, [sp, #36]	@ 0x24
 8022996:	e7c6      	b.n	8022926 <_vfiprintf_r+0x15e>
 8022998:	4341      	muls	r1, r0
 802299a:	002e      	movs	r6, r5
 802299c:	2301      	movs	r3, #1
 802299e:	1889      	adds	r1, r1, r2
 80229a0:	e7f1      	b.n	8022986 <_vfiprintf_r+0x1be>
 80229a2:	aa07      	add	r2, sp, #28
 80229a4:	9200      	str	r2, [sp, #0]
 80229a6:	0021      	movs	r1, r4
 80229a8:	003a      	movs	r2, r7
 80229aa:	4b14      	ldr	r3, [pc, #80]	@ (80229fc <_vfiprintf_r+0x234>)
 80229ac:	9803      	ldr	r0, [sp, #12]
 80229ae:	f7fc fe99 	bl	801f6e4 <_printf_float>
 80229b2:	9004      	str	r0, [sp, #16]
 80229b4:	9b04      	ldr	r3, [sp, #16]
 80229b6:	3301      	adds	r3, #1
 80229b8:	d1d6      	bne.n	8022968 <_vfiprintf_r+0x1a0>
 80229ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80229bc:	07db      	lsls	r3, r3, #31
 80229be:	d405      	bmi.n	80229cc <_vfiprintf_r+0x204>
 80229c0:	89bb      	ldrh	r3, [r7, #12]
 80229c2:	059b      	lsls	r3, r3, #22
 80229c4:	d402      	bmi.n	80229cc <_vfiprintf_r+0x204>
 80229c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80229c8:	f7fd fd90 	bl	80204ec <__retarget_lock_release_recursive>
 80229cc:	89bb      	ldrh	r3, [r7, #12]
 80229ce:	065b      	lsls	r3, r3, #25
 80229d0:	d500      	bpl.n	80229d4 <_vfiprintf_r+0x20c>
 80229d2:	e71e      	b.n	8022812 <_vfiprintf_r+0x4a>
 80229d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80229d6:	e71e      	b.n	8022816 <_vfiprintf_r+0x4e>
 80229d8:	aa07      	add	r2, sp, #28
 80229da:	9200      	str	r2, [sp, #0]
 80229dc:	0021      	movs	r1, r4
 80229de:	003a      	movs	r2, r7
 80229e0:	4b06      	ldr	r3, [pc, #24]	@ (80229fc <_vfiprintf_r+0x234>)
 80229e2:	9803      	ldr	r0, [sp, #12]
 80229e4:	f7fd f92c 	bl	801fc40 <_printf_i>
 80229e8:	e7e3      	b.n	80229b2 <_vfiprintf_r+0x1ea>
 80229ea:	46c0      	nop			@ (mov r8, r8)
 80229ec:	08026120 	.word	0x08026120
 80229f0:	08026126 	.word	0x08026126
 80229f4:	0802612a 	.word	0x0802612a
 80229f8:	0801f6e5 	.word	0x0801f6e5
 80229fc:	080227a3 	.word	0x080227a3

08022a00 <__sflush_r>:
 8022a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022a02:	220c      	movs	r2, #12
 8022a04:	5e8b      	ldrsh	r3, [r1, r2]
 8022a06:	0005      	movs	r5, r0
 8022a08:	000c      	movs	r4, r1
 8022a0a:	071a      	lsls	r2, r3, #28
 8022a0c:	d456      	bmi.n	8022abc <__sflush_r+0xbc>
 8022a0e:	684a      	ldr	r2, [r1, #4]
 8022a10:	2a00      	cmp	r2, #0
 8022a12:	dc02      	bgt.n	8022a1a <__sflush_r+0x1a>
 8022a14:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8022a16:	2a00      	cmp	r2, #0
 8022a18:	dd4e      	ble.n	8022ab8 <__sflush_r+0xb8>
 8022a1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022a1c:	2f00      	cmp	r7, #0
 8022a1e:	d04b      	beq.n	8022ab8 <__sflush_r+0xb8>
 8022a20:	2200      	movs	r2, #0
 8022a22:	2080      	movs	r0, #128	@ 0x80
 8022a24:	682e      	ldr	r6, [r5, #0]
 8022a26:	602a      	str	r2, [r5, #0]
 8022a28:	001a      	movs	r2, r3
 8022a2a:	0140      	lsls	r0, r0, #5
 8022a2c:	6a21      	ldr	r1, [r4, #32]
 8022a2e:	4002      	ands	r2, r0
 8022a30:	4203      	tst	r3, r0
 8022a32:	d033      	beq.n	8022a9c <__sflush_r+0x9c>
 8022a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022a36:	89a3      	ldrh	r3, [r4, #12]
 8022a38:	075b      	lsls	r3, r3, #29
 8022a3a:	d506      	bpl.n	8022a4a <__sflush_r+0x4a>
 8022a3c:	6863      	ldr	r3, [r4, #4]
 8022a3e:	1ad2      	subs	r2, r2, r3
 8022a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022a42:	2b00      	cmp	r3, #0
 8022a44:	d001      	beq.n	8022a4a <__sflush_r+0x4a>
 8022a46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022a48:	1ad2      	subs	r2, r2, r3
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	0028      	movs	r0, r5
 8022a4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022a50:	6a21      	ldr	r1, [r4, #32]
 8022a52:	47b8      	blx	r7
 8022a54:	89a2      	ldrh	r2, [r4, #12]
 8022a56:	1c43      	adds	r3, r0, #1
 8022a58:	d106      	bne.n	8022a68 <__sflush_r+0x68>
 8022a5a:	6829      	ldr	r1, [r5, #0]
 8022a5c:	291d      	cmp	r1, #29
 8022a5e:	d846      	bhi.n	8022aee <__sflush_r+0xee>
 8022a60:	4b29      	ldr	r3, [pc, #164]	@ (8022b08 <__sflush_r+0x108>)
 8022a62:	410b      	asrs	r3, r1
 8022a64:	07db      	lsls	r3, r3, #31
 8022a66:	d442      	bmi.n	8022aee <__sflush_r+0xee>
 8022a68:	2300      	movs	r3, #0
 8022a6a:	6063      	str	r3, [r4, #4]
 8022a6c:	6923      	ldr	r3, [r4, #16]
 8022a6e:	6023      	str	r3, [r4, #0]
 8022a70:	04d2      	lsls	r2, r2, #19
 8022a72:	d505      	bpl.n	8022a80 <__sflush_r+0x80>
 8022a74:	1c43      	adds	r3, r0, #1
 8022a76:	d102      	bne.n	8022a7e <__sflush_r+0x7e>
 8022a78:	682b      	ldr	r3, [r5, #0]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d100      	bne.n	8022a80 <__sflush_r+0x80>
 8022a7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022a82:	602e      	str	r6, [r5, #0]
 8022a84:	2900      	cmp	r1, #0
 8022a86:	d017      	beq.n	8022ab8 <__sflush_r+0xb8>
 8022a88:	0023      	movs	r3, r4
 8022a8a:	3344      	adds	r3, #68	@ 0x44
 8022a8c:	4299      	cmp	r1, r3
 8022a8e:	d002      	beq.n	8022a96 <__sflush_r+0x96>
 8022a90:	0028      	movs	r0, r5
 8022a92:	f7fe fbc9 	bl	8021228 <_free_r>
 8022a96:	2300      	movs	r3, #0
 8022a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8022a9a:	e00d      	b.n	8022ab8 <__sflush_r+0xb8>
 8022a9c:	2301      	movs	r3, #1
 8022a9e:	0028      	movs	r0, r5
 8022aa0:	47b8      	blx	r7
 8022aa2:	0002      	movs	r2, r0
 8022aa4:	1c43      	adds	r3, r0, #1
 8022aa6:	d1c6      	bne.n	8022a36 <__sflush_r+0x36>
 8022aa8:	682b      	ldr	r3, [r5, #0]
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d0c3      	beq.n	8022a36 <__sflush_r+0x36>
 8022aae:	2b1d      	cmp	r3, #29
 8022ab0:	d001      	beq.n	8022ab6 <__sflush_r+0xb6>
 8022ab2:	2b16      	cmp	r3, #22
 8022ab4:	d11a      	bne.n	8022aec <__sflush_r+0xec>
 8022ab6:	602e      	str	r6, [r5, #0]
 8022ab8:	2000      	movs	r0, #0
 8022aba:	e01e      	b.n	8022afa <__sflush_r+0xfa>
 8022abc:	690e      	ldr	r6, [r1, #16]
 8022abe:	2e00      	cmp	r6, #0
 8022ac0:	d0fa      	beq.n	8022ab8 <__sflush_r+0xb8>
 8022ac2:	680f      	ldr	r7, [r1, #0]
 8022ac4:	600e      	str	r6, [r1, #0]
 8022ac6:	1bba      	subs	r2, r7, r6
 8022ac8:	9201      	str	r2, [sp, #4]
 8022aca:	2200      	movs	r2, #0
 8022acc:	079b      	lsls	r3, r3, #30
 8022ace:	d100      	bne.n	8022ad2 <__sflush_r+0xd2>
 8022ad0:	694a      	ldr	r2, [r1, #20]
 8022ad2:	60a2      	str	r2, [r4, #8]
 8022ad4:	9b01      	ldr	r3, [sp, #4]
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	ddee      	ble.n	8022ab8 <__sflush_r+0xb8>
 8022ada:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022adc:	0032      	movs	r2, r6
 8022ade:	001f      	movs	r7, r3
 8022ae0:	0028      	movs	r0, r5
 8022ae2:	9b01      	ldr	r3, [sp, #4]
 8022ae4:	6a21      	ldr	r1, [r4, #32]
 8022ae6:	47b8      	blx	r7
 8022ae8:	2800      	cmp	r0, #0
 8022aea:	dc07      	bgt.n	8022afc <__sflush_r+0xfc>
 8022aec:	89a2      	ldrh	r2, [r4, #12]
 8022aee:	2340      	movs	r3, #64	@ 0x40
 8022af0:	2001      	movs	r0, #1
 8022af2:	4313      	orrs	r3, r2
 8022af4:	b21b      	sxth	r3, r3
 8022af6:	81a3      	strh	r3, [r4, #12]
 8022af8:	4240      	negs	r0, r0
 8022afa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022afc:	9b01      	ldr	r3, [sp, #4]
 8022afe:	1836      	adds	r6, r6, r0
 8022b00:	1a1b      	subs	r3, r3, r0
 8022b02:	9301      	str	r3, [sp, #4]
 8022b04:	e7e6      	b.n	8022ad4 <__sflush_r+0xd4>
 8022b06:	46c0      	nop			@ (mov r8, r8)
 8022b08:	dfbffffe 	.word	0xdfbffffe

08022b0c <_fflush_r>:
 8022b0c:	690b      	ldr	r3, [r1, #16]
 8022b0e:	b570      	push	{r4, r5, r6, lr}
 8022b10:	0005      	movs	r5, r0
 8022b12:	000c      	movs	r4, r1
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d102      	bne.n	8022b1e <_fflush_r+0x12>
 8022b18:	2500      	movs	r5, #0
 8022b1a:	0028      	movs	r0, r5
 8022b1c:	bd70      	pop	{r4, r5, r6, pc}
 8022b1e:	2800      	cmp	r0, #0
 8022b20:	d004      	beq.n	8022b2c <_fflush_r+0x20>
 8022b22:	6a03      	ldr	r3, [r0, #32]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d101      	bne.n	8022b2c <_fflush_r+0x20>
 8022b28:	f7fd fa28 	bl	801ff7c <__sinit>
 8022b2c:	220c      	movs	r2, #12
 8022b2e:	5ea3      	ldrsh	r3, [r4, r2]
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d0f1      	beq.n	8022b18 <_fflush_r+0xc>
 8022b34:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022b36:	07d2      	lsls	r2, r2, #31
 8022b38:	d404      	bmi.n	8022b44 <_fflush_r+0x38>
 8022b3a:	059b      	lsls	r3, r3, #22
 8022b3c:	d402      	bmi.n	8022b44 <_fflush_r+0x38>
 8022b3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b40:	f7fd fcd3 	bl	80204ea <__retarget_lock_acquire_recursive>
 8022b44:	0028      	movs	r0, r5
 8022b46:	0021      	movs	r1, r4
 8022b48:	f7ff ff5a 	bl	8022a00 <__sflush_r>
 8022b4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022b4e:	0005      	movs	r5, r0
 8022b50:	07db      	lsls	r3, r3, #31
 8022b52:	d4e2      	bmi.n	8022b1a <_fflush_r+0xe>
 8022b54:	89a3      	ldrh	r3, [r4, #12]
 8022b56:	059b      	lsls	r3, r3, #22
 8022b58:	d4df      	bmi.n	8022b1a <_fflush_r+0xe>
 8022b5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b5c:	f7fd fcc6 	bl	80204ec <__retarget_lock_release_recursive>
 8022b60:	e7db      	b.n	8022b1a <_fflush_r+0xe>
	...

08022b64 <__swhatbuf_r>:
 8022b64:	b570      	push	{r4, r5, r6, lr}
 8022b66:	000e      	movs	r6, r1
 8022b68:	001d      	movs	r5, r3
 8022b6a:	230e      	movs	r3, #14
 8022b6c:	5ec9      	ldrsh	r1, [r1, r3]
 8022b6e:	0014      	movs	r4, r2
 8022b70:	b096      	sub	sp, #88	@ 0x58
 8022b72:	2900      	cmp	r1, #0
 8022b74:	da0c      	bge.n	8022b90 <__swhatbuf_r+0x2c>
 8022b76:	89b2      	ldrh	r2, [r6, #12]
 8022b78:	2380      	movs	r3, #128	@ 0x80
 8022b7a:	0011      	movs	r1, r2
 8022b7c:	4019      	ands	r1, r3
 8022b7e:	421a      	tst	r2, r3
 8022b80:	d114      	bne.n	8022bac <__swhatbuf_r+0x48>
 8022b82:	2380      	movs	r3, #128	@ 0x80
 8022b84:	00db      	lsls	r3, r3, #3
 8022b86:	2000      	movs	r0, #0
 8022b88:	6029      	str	r1, [r5, #0]
 8022b8a:	6023      	str	r3, [r4, #0]
 8022b8c:	b016      	add	sp, #88	@ 0x58
 8022b8e:	bd70      	pop	{r4, r5, r6, pc}
 8022b90:	466a      	mov	r2, sp
 8022b92:	f000 f865 	bl	8022c60 <_fstat_r>
 8022b96:	2800      	cmp	r0, #0
 8022b98:	dbed      	blt.n	8022b76 <__swhatbuf_r+0x12>
 8022b9a:	23f0      	movs	r3, #240	@ 0xf0
 8022b9c:	9901      	ldr	r1, [sp, #4]
 8022b9e:	021b      	lsls	r3, r3, #8
 8022ba0:	4019      	ands	r1, r3
 8022ba2:	4b04      	ldr	r3, [pc, #16]	@ (8022bb4 <__swhatbuf_r+0x50>)
 8022ba4:	18c9      	adds	r1, r1, r3
 8022ba6:	424b      	negs	r3, r1
 8022ba8:	4159      	adcs	r1, r3
 8022baa:	e7ea      	b.n	8022b82 <__swhatbuf_r+0x1e>
 8022bac:	2100      	movs	r1, #0
 8022bae:	2340      	movs	r3, #64	@ 0x40
 8022bb0:	e7e9      	b.n	8022b86 <__swhatbuf_r+0x22>
 8022bb2:	46c0      	nop			@ (mov r8, r8)
 8022bb4:	ffffe000 	.word	0xffffe000

08022bb8 <__smakebuf_r>:
 8022bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bba:	2602      	movs	r6, #2
 8022bbc:	898b      	ldrh	r3, [r1, #12]
 8022bbe:	0005      	movs	r5, r0
 8022bc0:	000c      	movs	r4, r1
 8022bc2:	b085      	sub	sp, #20
 8022bc4:	4233      	tst	r3, r6
 8022bc6:	d007      	beq.n	8022bd8 <__smakebuf_r+0x20>
 8022bc8:	0023      	movs	r3, r4
 8022bca:	3347      	adds	r3, #71	@ 0x47
 8022bcc:	6023      	str	r3, [r4, #0]
 8022bce:	6123      	str	r3, [r4, #16]
 8022bd0:	2301      	movs	r3, #1
 8022bd2:	6163      	str	r3, [r4, #20]
 8022bd4:	b005      	add	sp, #20
 8022bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022bd8:	ab03      	add	r3, sp, #12
 8022bda:	aa02      	add	r2, sp, #8
 8022bdc:	f7ff ffc2 	bl	8022b64 <__swhatbuf_r>
 8022be0:	9f02      	ldr	r7, [sp, #8]
 8022be2:	9001      	str	r0, [sp, #4]
 8022be4:	0039      	movs	r1, r7
 8022be6:	0028      	movs	r0, r5
 8022be8:	f7fe feee 	bl	80219c8 <_malloc_r>
 8022bec:	2800      	cmp	r0, #0
 8022bee:	d108      	bne.n	8022c02 <__smakebuf_r+0x4a>
 8022bf0:	220c      	movs	r2, #12
 8022bf2:	5ea3      	ldrsh	r3, [r4, r2]
 8022bf4:	059a      	lsls	r2, r3, #22
 8022bf6:	d4ed      	bmi.n	8022bd4 <__smakebuf_r+0x1c>
 8022bf8:	2203      	movs	r2, #3
 8022bfa:	4393      	bics	r3, r2
 8022bfc:	431e      	orrs	r6, r3
 8022bfe:	81a6      	strh	r6, [r4, #12]
 8022c00:	e7e2      	b.n	8022bc8 <__smakebuf_r+0x10>
 8022c02:	2380      	movs	r3, #128	@ 0x80
 8022c04:	89a2      	ldrh	r2, [r4, #12]
 8022c06:	6020      	str	r0, [r4, #0]
 8022c08:	4313      	orrs	r3, r2
 8022c0a:	81a3      	strh	r3, [r4, #12]
 8022c0c:	9b03      	ldr	r3, [sp, #12]
 8022c0e:	6120      	str	r0, [r4, #16]
 8022c10:	6167      	str	r7, [r4, #20]
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d00c      	beq.n	8022c30 <__smakebuf_r+0x78>
 8022c16:	0028      	movs	r0, r5
 8022c18:	230e      	movs	r3, #14
 8022c1a:	5ee1      	ldrsh	r1, [r4, r3]
 8022c1c:	f000 f832 	bl	8022c84 <_isatty_r>
 8022c20:	2800      	cmp	r0, #0
 8022c22:	d005      	beq.n	8022c30 <__smakebuf_r+0x78>
 8022c24:	2303      	movs	r3, #3
 8022c26:	89a2      	ldrh	r2, [r4, #12]
 8022c28:	439a      	bics	r2, r3
 8022c2a:	3b02      	subs	r3, #2
 8022c2c:	4313      	orrs	r3, r2
 8022c2e:	81a3      	strh	r3, [r4, #12]
 8022c30:	89a3      	ldrh	r3, [r4, #12]
 8022c32:	9a01      	ldr	r2, [sp, #4]
 8022c34:	4313      	orrs	r3, r2
 8022c36:	81a3      	strh	r3, [r4, #12]
 8022c38:	e7cc      	b.n	8022bd4 <__smakebuf_r+0x1c>

08022c3a <memmove>:
 8022c3a:	b510      	push	{r4, lr}
 8022c3c:	4288      	cmp	r0, r1
 8022c3e:	d806      	bhi.n	8022c4e <memmove+0x14>
 8022c40:	2300      	movs	r3, #0
 8022c42:	429a      	cmp	r2, r3
 8022c44:	d008      	beq.n	8022c58 <memmove+0x1e>
 8022c46:	5ccc      	ldrb	r4, [r1, r3]
 8022c48:	54c4      	strb	r4, [r0, r3]
 8022c4a:	3301      	adds	r3, #1
 8022c4c:	e7f9      	b.n	8022c42 <memmove+0x8>
 8022c4e:	188b      	adds	r3, r1, r2
 8022c50:	4298      	cmp	r0, r3
 8022c52:	d2f5      	bcs.n	8022c40 <memmove+0x6>
 8022c54:	3a01      	subs	r2, #1
 8022c56:	d200      	bcs.n	8022c5a <memmove+0x20>
 8022c58:	bd10      	pop	{r4, pc}
 8022c5a:	5c8b      	ldrb	r3, [r1, r2]
 8022c5c:	5483      	strb	r3, [r0, r2]
 8022c5e:	e7f9      	b.n	8022c54 <memmove+0x1a>

08022c60 <_fstat_r>:
 8022c60:	2300      	movs	r3, #0
 8022c62:	b570      	push	{r4, r5, r6, lr}
 8022c64:	4d06      	ldr	r5, [pc, #24]	@ (8022c80 <_fstat_r+0x20>)
 8022c66:	0004      	movs	r4, r0
 8022c68:	0008      	movs	r0, r1
 8022c6a:	0011      	movs	r1, r2
 8022c6c:	602b      	str	r3, [r5, #0]
 8022c6e:	f7eb f87d 	bl	800dd6c <_fstat>
 8022c72:	1c43      	adds	r3, r0, #1
 8022c74:	d103      	bne.n	8022c7e <_fstat_r+0x1e>
 8022c76:	682b      	ldr	r3, [r5, #0]
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	d000      	beq.n	8022c7e <_fstat_r+0x1e>
 8022c7c:	6023      	str	r3, [r4, #0]
 8022c7e:	bd70      	pop	{r4, r5, r6, pc}
 8022c80:	200037bc 	.word	0x200037bc

08022c84 <_isatty_r>:
 8022c84:	2300      	movs	r3, #0
 8022c86:	b570      	push	{r4, r5, r6, lr}
 8022c88:	4d06      	ldr	r5, [pc, #24]	@ (8022ca4 <_isatty_r+0x20>)
 8022c8a:	0004      	movs	r4, r0
 8022c8c:	0008      	movs	r0, r1
 8022c8e:	602b      	str	r3, [r5, #0]
 8022c90:	f7eb f87a 	bl	800dd88 <_isatty>
 8022c94:	1c43      	adds	r3, r0, #1
 8022c96:	d103      	bne.n	8022ca0 <_isatty_r+0x1c>
 8022c98:	682b      	ldr	r3, [r5, #0]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d000      	beq.n	8022ca0 <_isatty_r+0x1c>
 8022c9e:	6023      	str	r3, [r4, #0]
 8022ca0:	bd70      	pop	{r4, r5, r6, pc}
 8022ca2:	46c0      	nop			@ (mov r8, r8)
 8022ca4:	200037bc 	.word	0x200037bc

08022ca8 <_sbrk_r>:
 8022ca8:	2300      	movs	r3, #0
 8022caa:	b570      	push	{r4, r5, r6, lr}
 8022cac:	4d06      	ldr	r5, [pc, #24]	@ (8022cc8 <_sbrk_r+0x20>)
 8022cae:	0004      	movs	r4, r0
 8022cb0:	0008      	movs	r0, r1
 8022cb2:	602b      	str	r3, [r5, #0]
 8022cb4:	f7eb f87c 	bl	800ddb0 <_sbrk>
 8022cb8:	1c43      	adds	r3, r0, #1
 8022cba:	d103      	bne.n	8022cc4 <_sbrk_r+0x1c>
 8022cbc:	682b      	ldr	r3, [r5, #0]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d000      	beq.n	8022cc4 <_sbrk_r+0x1c>
 8022cc2:	6023      	str	r3, [r4, #0]
 8022cc4:	bd70      	pop	{r4, r5, r6, pc}
 8022cc6:	46c0      	nop			@ (mov r8, r8)
 8022cc8:	200037bc 	.word	0x200037bc

08022ccc <__assert_func>:
 8022ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022cce:	0014      	movs	r4, r2
 8022cd0:	001a      	movs	r2, r3
 8022cd2:	4b09      	ldr	r3, [pc, #36]	@ (8022cf8 <__assert_func+0x2c>)
 8022cd4:	0005      	movs	r5, r0
 8022cd6:	681b      	ldr	r3, [r3, #0]
 8022cd8:	000e      	movs	r6, r1
 8022cda:	68d8      	ldr	r0, [r3, #12]
 8022cdc:	4b07      	ldr	r3, [pc, #28]	@ (8022cfc <__assert_func+0x30>)
 8022cde:	2c00      	cmp	r4, #0
 8022ce0:	d101      	bne.n	8022ce6 <__assert_func+0x1a>
 8022ce2:	4b07      	ldr	r3, [pc, #28]	@ (8022d00 <__assert_func+0x34>)
 8022ce4:	001c      	movs	r4, r3
 8022ce6:	4907      	ldr	r1, [pc, #28]	@ (8022d04 <__assert_func+0x38>)
 8022ce8:	9301      	str	r3, [sp, #4]
 8022cea:	9402      	str	r4, [sp, #8]
 8022cec:	002b      	movs	r3, r5
 8022cee:	9600      	str	r6, [sp, #0]
 8022cf0:	f000 f866 	bl	8022dc0 <fiprintf>
 8022cf4:	f000 f874 	bl	8022de0 <abort>
 8022cf8:	200003d0 	.word	0x200003d0
 8022cfc:	08026131 	.word	0x08026131
 8022d00:	0802616c 	.word	0x0802616c
 8022d04:	0802613e 	.word	0x0802613e

08022d08 <_calloc_r>:
 8022d08:	b570      	push	{r4, r5, r6, lr}
 8022d0a:	0c0b      	lsrs	r3, r1, #16
 8022d0c:	0c15      	lsrs	r5, r2, #16
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d11e      	bne.n	8022d50 <_calloc_r+0x48>
 8022d12:	2d00      	cmp	r5, #0
 8022d14:	d10c      	bne.n	8022d30 <_calloc_r+0x28>
 8022d16:	b289      	uxth	r1, r1
 8022d18:	b294      	uxth	r4, r2
 8022d1a:	434c      	muls	r4, r1
 8022d1c:	0021      	movs	r1, r4
 8022d1e:	f7fe fe53 	bl	80219c8 <_malloc_r>
 8022d22:	1e05      	subs	r5, r0, #0
 8022d24:	d01a      	beq.n	8022d5c <_calloc_r+0x54>
 8022d26:	0022      	movs	r2, r4
 8022d28:	2100      	movs	r1, #0
 8022d2a:	f7fd fb0f 	bl	802034c <memset>
 8022d2e:	e016      	b.n	8022d5e <_calloc_r+0x56>
 8022d30:	1c2b      	adds	r3, r5, #0
 8022d32:	1c0c      	adds	r4, r1, #0
 8022d34:	b289      	uxth	r1, r1
 8022d36:	b292      	uxth	r2, r2
 8022d38:	434a      	muls	r2, r1
 8022d3a:	b29b      	uxth	r3, r3
 8022d3c:	b2a1      	uxth	r1, r4
 8022d3e:	4359      	muls	r1, r3
 8022d40:	0c14      	lsrs	r4, r2, #16
 8022d42:	190c      	adds	r4, r1, r4
 8022d44:	0c23      	lsrs	r3, r4, #16
 8022d46:	d107      	bne.n	8022d58 <_calloc_r+0x50>
 8022d48:	0424      	lsls	r4, r4, #16
 8022d4a:	b292      	uxth	r2, r2
 8022d4c:	4314      	orrs	r4, r2
 8022d4e:	e7e5      	b.n	8022d1c <_calloc_r+0x14>
 8022d50:	2d00      	cmp	r5, #0
 8022d52:	d101      	bne.n	8022d58 <_calloc_r+0x50>
 8022d54:	1c14      	adds	r4, r2, #0
 8022d56:	e7ed      	b.n	8022d34 <_calloc_r+0x2c>
 8022d58:	230c      	movs	r3, #12
 8022d5a:	6003      	str	r3, [r0, #0]
 8022d5c:	2500      	movs	r5, #0
 8022d5e:	0028      	movs	r0, r5
 8022d60:	bd70      	pop	{r4, r5, r6, pc}

08022d62 <_realloc_r>:
 8022d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d64:	0006      	movs	r6, r0
 8022d66:	000c      	movs	r4, r1
 8022d68:	0015      	movs	r5, r2
 8022d6a:	2900      	cmp	r1, #0
 8022d6c:	d105      	bne.n	8022d7a <_realloc_r+0x18>
 8022d6e:	0011      	movs	r1, r2
 8022d70:	f7fe fe2a 	bl	80219c8 <_malloc_r>
 8022d74:	0004      	movs	r4, r0
 8022d76:	0020      	movs	r0, r4
 8022d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022d7a:	2a00      	cmp	r2, #0
 8022d7c:	d103      	bne.n	8022d86 <_realloc_r+0x24>
 8022d7e:	f7fe fa53 	bl	8021228 <_free_r>
 8022d82:	2400      	movs	r4, #0
 8022d84:	e7f7      	b.n	8022d76 <_realloc_r+0x14>
 8022d86:	f000 f832 	bl	8022dee <_malloc_usable_size_r>
 8022d8a:	0007      	movs	r7, r0
 8022d8c:	4285      	cmp	r5, r0
 8022d8e:	d802      	bhi.n	8022d96 <_realloc_r+0x34>
 8022d90:	0843      	lsrs	r3, r0, #1
 8022d92:	42ab      	cmp	r3, r5
 8022d94:	d3ef      	bcc.n	8022d76 <_realloc_r+0x14>
 8022d96:	0029      	movs	r1, r5
 8022d98:	0030      	movs	r0, r6
 8022d9a:	f7fe fe15 	bl	80219c8 <_malloc_r>
 8022d9e:	9001      	str	r0, [sp, #4]
 8022da0:	2800      	cmp	r0, #0
 8022da2:	d0ee      	beq.n	8022d82 <_realloc_r+0x20>
 8022da4:	002a      	movs	r2, r5
 8022da6:	42bd      	cmp	r5, r7
 8022da8:	d900      	bls.n	8022dac <_realloc_r+0x4a>
 8022daa:	003a      	movs	r2, r7
 8022dac:	0021      	movs	r1, r4
 8022dae:	9801      	ldr	r0, [sp, #4]
 8022db0:	f7fd fba8 	bl	8020504 <memcpy>
 8022db4:	0021      	movs	r1, r4
 8022db6:	0030      	movs	r0, r6
 8022db8:	f7fe fa36 	bl	8021228 <_free_r>
 8022dbc:	9c01      	ldr	r4, [sp, #4]
 8022dbe:	e7da      	b.n	8022d76 <_realloc_r+0x14>

08022dc0 <fiprintf>:
 8022dc0:	b40e      	push	{r1, r2, r3}
 8022dc2:	b517      	push	{r0, r1, r2, r4, lr}
 8022dc4:	4c05      	ldr	r4, [pc, #20]	@ (8022ddc <fiprintf+0x1c>)
 8022dc6:	ab05      	add	r3, sp, #20
 8022dc8:	cb04      	ldmia	r3!, {r2}
 8022dca:	0001      	movs	r1, r0
 8022dcc:	6820      	ldr	r0, [r4, #0]
 8022dce:	9301      	str	r3, [sp, #4]
 8022dd0:	f7ff fcfa 	bl	80227c8 <_vfiprintf_r>
 8022dd4:	bc1e      	pop	{r1, r2, r3, r4}
 8022dd6:	bc08      	pop	{r3}
 8022dd8:	b003      	add	sp, #12
 8022dda:	4718      	bx	r3
 8022ddc:	200003d0 	.word	0x200003d0

08022de0 <abort>:
 8022de0:	2006      	movs	r0, #6
 8022de2:	b510      	push	{r4, lr}
 8022de4:	f000 f834 	bl	8022e50 <raise>
 8022de8:	2001      	movs	r0, #1
 8022dea:	f7ea ff8b 	bl	800dd04 <_exit>

08022dee <_malloc_usable_size_r>:
 8022dee:	1f0b      	subs	r3, r1, #4
 8022df0:	681b      	ldr	r3, [r3, #0]
 8022df2:	1f18      	subs	r0, r3, #4
 8022df4:	2b00      	cmp	r3, #0
 8022df6:	da01      	bge.n	8022dfc <_malloc_usable_size_r+0xe>
 8022df8:	580b      	ldr	r3, [r1, r0]
 8022dfa:	18c0      	adds	r0, r0, r3
 8022dfc:	4770      	bx	lr

08022dfe <_raise_r>:
 8022dfe:	b570      	push	{r4, r5, r6, lr}
 8022e00:	0004      	movs	r4, r0
 8022e02:	000d      	movs	r5, r1
 8022e04:	291f      	cmp	r1, #31
 8022e06:	d904      	bls.n	8022e12 <_raise_r+0x14>
 8022e08:	2316      	movs	r3, #22
 8022e0a:	6003      	str	r3, [r0, #0]
 8022e0c:	2001      	movs	r0, #1
 8022e0e:	4240      	negs	r0, r0
 8022e10:	bd70      	pop	{r4, r5, r6, pc}
 8022e12:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	d004      	beq.n	8022e22 <_raise_r+0x24>
 8022e18:	008a      	lsls	r2, r1, #2
 8022e1a:	189b      	adds	r3, r3, r2
 8022e1c:	681a      	ldr	r2, [r3, #0]
 8022e1e:	2a00      	cmp	r2, #0
 8022e20:	d108      	bne.n	8022e34 <_raise_r+0x36>
 8022e22:	0020      	movs	r0, r4
 8022e24:	f000 f830 	bl	8022e88 <_getpid_r>
 8022e28:	002a      	movs	r2, r5
 8022e2a:	0001      	movs	r1, r0
 8022e2c:	0020      	movs	r0, r4
 8022e2e:	f000 f819 	bl	8022e64 <_kill_r>
 8022e32:	e7ed      	b.n	8022e10 <_raise_r+0x12>
 8022e34:	2a01      	cmp	r2, #1
 8022e36:	d009      	beq.n	8022e4c <_raise_r+0x4e>
 8022e38:	1c51      	adds	r1, r2, #1
 8022e3a:	d103      	bne.n	8022e44 <_raise_r+0x46>
 8022e3c:	2316      	movs	r3, #22
 8022e3e:	6003      	str	r3, [r0, #0]
 8022e40:	2001      	movs	r0, #1
 8022e42:	e7e5      	b.n	8022e10 <_raise_r+0x12>
 8022e44:	2100      	movs	r1, #0
 8022e46:	0028      	movs	r0, r5
 8022e48:	6019      	str	r1, [r3, #0]
 8022e4a:	4790      	blx	r2
 8022e4c:	2000      	movs	r0, #0
 8022e4e:	e7df      	b.n	8022e10 <_raise_r+0x12>

08022e50 <raise>:
 8022e50:	b510      	push	{r4, lr}
 8022e52:	4b03      	ldr	r3, [pc, #12]	@ (8022e60 <raise+0x10>)
 8022e54:	0001      	movs	r1, r0
 8022e56:	6818      	ldr	r0, [r3, #0]
 8022e58:	f7ff ffd1 	bl	8022dfe <_raise_r>
 8022e5c:	bd10      	pop	{r4, pc}
 8022e5e:	46c0      	nop			@ (mov r8, r8)
 8022e60:	200003d0 	.word	0x200003d0

08022e64 <_kill_r>:
 8022e64:	2300      	movs	r3, #0
 8022e66:	b570      	push	{r4, r5, r6, lr}
 8022e68:	4d06      	ldr	r5, [pc, #24]	@ (8022e84 <_kill_r+0x20>)
 8022e6a:	0004      	movs	r4, r0
 8022e6c:	0008      	movs	r0, r1
 8022e6e:	0011      	movs	r1, r2
 8022e70:	602b      	str	r3, [r5, #0]
 8022e72:	f7ea ff37 	bl	800dce4 <_kill>
 8022e76:	1c43      	adds	r3, r0, #1
 8022e78:	d103      	bne.n	8022e82 <_kill_r+0x1e>
 8022e7a:	682b      	ldr	r3, [r5, #0]
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d000      	beq.n	8022e82 <_kill_r+0x1e>
 8022e80:	6023      	str	r3, [r4, #0]
 8022e82:	bd70      	pop	{r4, r5, r6, pc}
 8022e84:	200037bc 	.word	0x200037bc

08022e88 <_getpid_r>:
 8022e88:	b510      	push	{r4, lr}
 8022e8a:	f7ea ff25 	bl	800dcd8 <_getpid>
 8022e8e:	bd10      	pop	{r4, pc}

08022e90 <expf>:
 8022e90:	b570      	push	{r4, r5, r6, lr}
 8022e92:	1c04      	adds	r4, r0, #0
 8022e94:	f000 f8e6 	bl	8023064 <__ieee754_expf>
 8022e98:	1c05      	adds	r5, r0, #0
 8022e9a:	1c20      	adds	r0, r4, #0
 8022e9c:	f000 f83c 	bl	8022f18 <finitef>
 8022ea0:	2800      	cmp	r0, #0
 8022ea2:	d00b      	beq.n	8022ebc <expf+0x2c>
 8022ea4:	490c      	ldr	r1, [pc, #48]	@ (8022ed8 <expf+0x48>)
 8022ea6:	1c20      	adds	r0, r4, #0
 8022ea8:	f7dd fb56 	bl	8000558 <__aeabi_fcmpgt>
 8022eac:	2800      	cmp	r0, #0
 8022eae:	d007      	beq.n	8022ec0 <expf+0x30>
 8022eb0:	f7fd faf0 	bl	8020494 <__errno>
 8022eb4:	25ff      	movs	r5, #255	@ 0xff
 8022eb6:	2322      	movs	r3, #34	@ 0x22
 8022eb8:	05ed      	lsls	r5, r5, #23
 8022eba:	6003      	str	r3, [r0, #0]
 8022ebc:	1c28      	adds	r0, r5, #0
 8022ebe:	bd70      	pop	{r4, r5, r6, pc}
 8022ec0:	4906      	ldr	r1, [pc, #24]	@ (8022edc <expf+0x4c>)
 8022ec2:	1c20      	adds	r0, r4, #0
 8022ec4:	f7dd fb34 	bl	8000530 <__aeabi_fcmplt>
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	d0f7      	beq.n	8022ebc <expf+0x2c>
 8022ecc:	f7fd fae2 	bl	8020494 <__errno>
 8022ed0:	2322      	movs	r3, #34	@ 0x22
 8022ed2:	2500      	movs	r5, #0
 8022ed4:	6003      	str	r3, [r0, #0]
 8022ed6:	e7f1      	b.n	8022ebc <expf+0x2c>
 8022ed8:	42b17217 	.word	0x42b17217
 8022edc:	c2cff1b5 	.word	0xc2cff1b5

08022ee0 <sqrtf>:
 8022ee0:	b570      	push	{r4, r5, r6, lr}
 8022ee2:	1c05      	adds	r5, r0, #0
 8022ee4:	f000 f822 	bl	8022f2c <__ieee754_sqrtf>
 8022ee8:	1c29      	adds	r1, r5, #0
 8022eea:	1c04      	adds	r4, r0, #0
 8022eec:	1c28      	adds	r0, r5, #0
 8022eee:	f7de fb39 	bl	8001564 <__aeabi_fcmpun>
 8022ef2:	2800      	cmp	r0, #0
 8022ef4:	d10e      	bne.n	8022f14 <sqrtf+0x34>
 8022ef6:	2100      	movs	r1, #0
 8022ef8:	1c28      	adds	r0, r5, #0
 8022efa:	f7dd fb19 	bl	8000530 <__aeabi_fcmplt>
 8022efe:	2800      	cmp	r0, #0
 8022f00:	d008      	beq.n	8022f14 <sqrtf+0x34>
 8022f02:	f7fd fac7 	bl	8020494 <__errno>
 8022f06:	2321      	movs	r3, #33	@ 0x21
 8022f08:	2100      	movs	r1, #0
 8022f0a:	6003      	str	r3, [r0, #0]
 8022f0c:	1c08      	adds	r0, r1, #0
 8022f0e:	f7dd fe61 	bl	8000bd4 <__aeabi_fdiv>
 8022f12:	1c04      	adds	r4, r0, #0
 8022f14:	1c20      	adds	r0, r4, #0
 8022f16:	bd70      	pop	{r4, r5, r6, pc}

08022f18 <finitef>:
 8022f18:	22ff      	movs	r2, #255	@ 0xff
 8022f1a:	0043      	lsls	r3, r0, #1
 8022f1c:	085b      	lsrs	r3, r3, #1
 8022f1e:	2001      	movs	r0, #1
 8022f20:	05d2      	lsls	r2, r2, #23
 8022f22:	4293      	cmp	r3, r2
 8022f24:	db00      	blt.n	8022f28 <finitef+0x10>
 8022f26:	2000      	movs	r0, #0
 8022f28:	4770      	bx	lr
	...

08022f2c <__ieee754_sqrtf>:
 8022f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022f2e:	0003      	movs	r3, r0
 8022f30:	0042      	lsls	r2, r0, #1
 8022f32:	1c04      	adds	r4, r0, #0
 8022f34:	20ff      	movs	r0, #255	@ 0xff
 8022f36:	0852      	lsrs	r2, r2, #1
 8022f38:	05c0      	lsls	r0, r0, #23
 8022f3a:	4282      	cmp	r2, r0
 8022f3c:	d30a      	bcc.n	8022f54 <__ieee754_sqrtf+0x28>
 8022f3e:	1c21      	adds	r1, r4, #0
 8022f40:	1c20      	adds	r0, r4, #0
 8022f42:	f7de f82d 	bl	8000fa0 <__aeabi_fmul>
 8022f46:	1c01      	adds	r1, r0, #0
 8022f48:	1c20      	adds	r0, r4, #0
 8022f4a:	f7dd fcb9 	bl	80008c0 <__aeabi_fadd>
 8022f4e:	1c04      	adds	r4, r0, #0
 8022f50:	1c20      	adds	r0, r4, #0
 8022f52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022f54:	2a00      	cmp	r2, #0
 8022f56:	d0fb      	beq.n	8022f50 <__ieee754_sqrtf+0x24>
 8022f58:	2c00      	cmp	r4, #0
 8022f5a:	da07      	bge.n	8022f6c <__ieee754_sqrtf+0x40>
 8022f5c:	1c21      	adds	r1, r4, #0
 8022f5e:	1c20      	adds	r0, r4, #0
 8022f60:	f7de f95c 	bl	800121c <__aeabi_fsub>
 8022f64:	1c01      	adds	r1, r0, #0
 8022f66:	f7dd fe35 	bl	8000bd4 <__aeabi_fdiv>
 8022f6a:	e7f0      	b.n	8022f4e <__ieee754_sqrtf+0x22>
 8022f6c:	0022      	movs	r2, r4
 8022f6e:	15e1      	asrs	r1, r4, #23
 8022f70:	4002      	ands	r2, r0
 8022f72:	4204      	tst	r4, r0
 8022f74:	d046      	beq.n	8023004 <__ieee754_sqrtf+0xd8>
 8022f76:	2280      	movs	r2, #128	@ 0x80
 8022f78:	000f      	movs	r7, r1
 8022f7a:	025b      	lsls	r3, r3, #9
 8022f7c:	0a5b      	lsrs	r3, r3, #9
 8022f7e:	0412      	lsls	r2, r2, #16
 8022f80:	3f7f      	subs	r7, #127	@ 0x7f
 8022f82:	4313      	orrs	r3, r2
 8022f84:	07c9      	lsls	r1, r1, #31
 8022f86:	d400      	bmi.n	8022f8a <__ieee754_sqrtf+0x5e>
 8022f88:	005b      	lsls	r3, r3, #1
 8022f8a:	2400      	movs	r4, #0
 8022f8c:	2180      	movs	r1, #128	@ 0x80
 8022f8e:	2019      	movs	r0, #25
 8022f90:	0026      	movs	r6, r4
 8022f92:	107f      	asrs	r7, r7, #1
 8022f94:	005b      	lsls	r3, r3, #1
 8022f96:	0449      	lsls	r1, r1, #17
 8022f98:	1875      	adds	r5, r6, r1
 8022f9a:	001a      	movs	r2, r3
 8022f9c:	429d      	cmp	r5, r3
 8022f9e:	dc02      	bgt.n	8022fa6 <__ieee754_sqrtf+0x7a>
 8022fa0:	186e      	adds	r6, r5, r1
 8022fa2:	1b5a      	subs	r2, r3, r5
 8022fa4:	1864      	adds	r4, r4, r1
 8022fa6:	3801      	subs	r0, #1
 8022fa8:	0053      	lsls	r3, r2, #1
 8022faa:	0849      	lsrs	r1, r1, #1
 8022fac:	2800      	cmp	r0, #0
 8022fae:	d1f3      	bne.n	8022f98 <__ieee754_sqrtf+0x6c>
 8022fb0:	2a00      	cmp	r2, #0
 8022fb2:	d019      	beq.n	8022fe8 <__ieee754_sqrtf+0xbc>
 8022fb4:	4d17      	ldr	r5, [pc, #92]	@ (8023014 <__ieee754_sqrtf+0xe8>)
 8022fb6:	4e18      	ldr	r6, [pc, #96]	@ (8023018 <__ieee754_sqrtf+0xec>)
 8022fb8:	6828      	ldr	r0, [r5, #0]
 8022fba:	6831      	ldr	r1, [r6, #0]
 8022fbc:	682b      	ldr	r3, [r5, #0]
 8022fbe:	9301      	str	r3, [sp, #4]
 8022fc0:	f7de f92c 	bl	800121c <__aeabi_fsub>
 8022fc4:	1c01      	adds	r1, r0, #0
 8022fc6:	9801      	ldr	r0, [sp, #4]
 8022fc8:	f7dd fabc 	bl	8000544 <__aeabi_fcmple>
 8022fcc:	2800      	cmp	r0, #0
 8022fce:	d00b      	beq.n	8022fe8 <__ieee754_sqrtf+0xbc>
 8022fd0:	6828      	ldr	r0, [r5, #0]
 8022fd2:	6831      	ldr	r1, [r6, #0]
 8022fd4:	f7dd fc74 	bl	80008c0 <__aeabi_fadd>
 8022fd8:	682d      	ldr	r5, [r5, #0]
 8022fda:	1c01      	adds	r1, r0, #0
 8022fdc:	1c28      	adds	r0, r5, #0
 8022fde:	f7dd faa7 	bl	8000530 <__aeabi_fcmplt>
 8022fe2:	2800      	cmp	r0, #0
 8022fe4:	d011      	beq.n	802300a <__ieee754_sqrtf+0xde>
 8022fe6:	3402      	adds	r4, #2
 8022fe8:	23fc      	movs	r3, #252	@ 0xfc
 8022fea:	1064      	asrs	r4, r4, #1
 8022fec:	059b      	lsls	r3, r3, #22
 8022fee:	18e3      	adds	r3, r4, r3
 8022ff0:	05fc      	lsls	r4, r7, #23
 8022ff2:	18e4      	adds	r4, r4, r3
 8022ff4:	e7ac      	b.n	8022f50 <__ieee754_sqrtf+0x24>
 8022ff6:	005b      	lsls	r3, r3, #1
 8022ff8:	3201      	adds	r2, #1
 8022ffa:	4203      	tst	r3, r0
 8022ffc:	d0fb      	beq.n	8022ff6 <__ieee754_sqrtf+0xca>
 8022ffe:	3a01      	subs	r2, #1
 8023000:	1a89      	subs	r1, r1, r2
 8023002:	e7b8      	b.n	8022f76 <__ieee754_sqrtf+0x4a>
 8023004:	2080      	movs	r0, #128	@ 0x80
 8023006:	0400      	lsls	r0, r0, #16
 8023008:	e7f7      	b.n	8022ffa <__ieee754_sqrtf+0xce>
 802300a:	2301      	movs	r3, #1
 802300c:	3401      	adds	r4, #1
 802300e:	439c      	bics	r4, r3
 8023010:	e7ea      	b.n	8022fe8 <__ieee754_sqrtf+0xbc>
 8023012:	46c0      	nop			@ (mov r8, r8)
 8023014:	20000424 	.word	0x20000424
 8023018:	20000420 	.word	0x20000420

0802301c <roundf>:
 802301c:	0dc3      	lsrs	r3, r0, #23
 802301e:	b2db      	uxtb	r3, r3
 8023020:	3b7f      	subs	r3, #127	@ 0x7f
 8023022:	0002      	movs	r2, r0
 8023024:	b510      	push	{r4, lr}
 8023026:	2b16      	cmp	r3, #22
 8023028:	dc13      	bgt.n	8023052 <roundf+0x36>
 802302a:	2b00      	cmp	r3, #0
 802302c:	da07      	bge.n	802303e <roundf+0x22>
 802302e:	0fc2      	lsrs	r2, r0, #31
 8023030:	07d0      	lsls	r0, r2, #31
 8023032:	3301      	adds	r3, #1
 8023034:	d102      	bne.n	802303c <roundf+0x20>
 8023036:	23fe      	movs	r3, #254	@ 0xfe
 8023038:	059b      	lsls	r3, r3, #22
 802303a:	4318      	orrs	r0, r3
 802303c:	bd10      	pop	{r4, pc}
 802303e:	4908      	ldr	r1, [pc, #32]	@ (8023060 <roundf+0x44>)
 8023040:	4119      	asrs	r1, r3
 8023042:	4208      	tst	r0, r1
 8023044:	d0fa      	beq.n	802303c <roundf+0x20>
 8023046:	2080      	movs	r0, #128	@ 0x80
 8023048:	03c0      	lsls	r0, r0, #15
 802304a:	4118      	asrs	r0, r3
 802304c:	1880      	adds	r0, r0, r2
 802304e:	4388      	bics	r0, r1
 8023050:	e7f4      	b.n	802303c <roundf+0x20>
 8023052:	2b80      	cmp	r3, #128	@ 0x80
 8023054:	d1f2      	bne.n	802303c <roundf+0x20>
 8023056:	1c01      	adds	r1, r0, #0
 8023058:	f7dd fc32 	bl	80008c0 <__aeabi_fadd>
 802305c:	e7ee      	b.n	802303c <roundf+0x20>
 802305e:	46c0      	nop			@ (mov r8, r8)
 8023060:	007fffff 	.word	0x007fffff

08023064 <__ieee754_expf>:
 8023064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023066:	21ff      	movs	r1, #255	@ 0xff
 8023068:	0043      	lsls	r3, r0, #1
 802306a:	1c04      	adds	r4, r0, #0
 802306c:	085b      	lsrs	r3, r3, #1
 802306e:	05c9      	lsls	r1, r1, #23
 8023070:	428b      	cmp	r3, r1
 8023072:	d904      	bls.n	802307e <__ieee754_expf+0x1a>
 8023074:	1c01      	adds	r1, r0, #0
 8023076:	1c20      	adds	r0, r4, #0
 8023078:	f7dd fc22 	bl	80008c0 <__aeabi_fadd>
 802307c:	e00d      	b.n	802309a <__ieee754_expf+0x36>
 802307e:	0fc6      	lsrs	r6, r0, #31
 8023080:	428b      	cmp	r3, r1
 8023082:	d104      	bne.n	802308e <__ieee754_expf+0x2a>
 8023084:	2e00      	cmp	r6, #0
 8023086:	d000      	beq.n	802308a <__ieee754_expf+0x26>
 8023088:	e0ba      	b.n	8023200 <__ieee754_expf+0x19c>
 802308a:	1c20      	adds	r0, r4, #0
 802308c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802308e:	495d      	ldr	r1, [pc, #372]	@ (8023204 <__ieee754_expf+0x1a0>)
 8023090:	4288      	cmp	r0, r1
 8023092:	dd04      	ble.n	802309e <__ieee754_expf+0x3a>
 8023094:	2000      	movs	r0, #0
 8023096:	f000 f8f1 	bl	802327c <__math_oflowf>
 802309a:	1c04      	adds	r4, r0, #0
 802309c:	e7f5      	b.n	802308a <__ieee754_expf+0x26>
 802309e:	2800      	cmp	r0, #0
 80230a0:	da06      	bge.n	80230b0 <__ieee754_expf+0x4c>
 80230a2:	4a59      	ldr	r2, [pc, #356]	@ (8023208 <__ieee754_expf+0x1a4>)
 80230a4:	4293      	cmp	r3, r2
 80230a6:	d903      	bls.n	80230b0 <__ieee754_expf+0x4c>
 80230a8:	2000      	movs	r0, #0
 80230aa:	f000 f8e1 	bl	8023270 <__math_uflowf>
 80230ae:	e7f4      	b.n	802309a <__ieee754_expf+0x36>
 80230b0:	4a56      	ldr	r2, [pc, #344]	@ (802320c <__ieee754_expf+0x1a8>)
 80230b2:	4293      	cmp	r3, r2
 80230b4:	d96e      	bls.n	8023194 <__ieee754_expf+0x130>
 80230b6:	4a56      	ldr	r2, [pc, #344]	@ (8023210 <__ieee754_expf+0x1ac>)
 80230b8:	00b5      	lsls	r5, r6, #2
 80230ba:	4293      	cmp	r3, r2
 80230bc:	d84e      	bhi.n	802315c <__ieee754_expf+0xf8>
 80230be:	4b55      	ldr	r3, [pc, #340]	@ (8023214 <__ieee754_expf+0x1b0>)
 80230c0:	1c20      	adds	r0, r4, #0
 80230c2:	5959      	ldr	r1, [r3, r5]
 80230c4:	f7de f8aa 	bl	800121c <__aeabi_fsub>
 80230c8:	4b53      	ldr	r3, [pc, #332]	@ (8023218 <__ieee754_expf+0x1b4>)
 80230ca:	1c07      	adds	r7, r0, #0
 80230cc:	595b      	ldr	r3, [r3, r5]
 80230ce:	2501      	movs	r5, #1
 80230d0:	1bad      	subs	r5, r5, r6
 80230d2:	9300      	str	r3, [sp, #0]
 80230d4:	1bad      	subs	r5, r5, r6
 80230d6:	9900      	ldr	r1, [sp, #0]
 80230d8:	1c38      	adds	r0, r7, #0
 80230da:	f7de f89f 	bl	800121c <__aeabi_fsub>
 80230de:	1c04      	adds	r4, r0, #0
 80230e0:	1c21      	adds	r1, r4, #0
 80230e2:	1c20      	adds	r0, r4, #0
 80230e4:	f7dd ff5c 	bl	8000fa0 <__aeabi_fmul>
 80230e8:	494c      	ldr	r1, [pc, #304]	@ (802321c <__ieee754_expf+0x1b8>)
 80230ea:	1c06      	adds	r6, r0, #0
 80230ec:	f7dd ff58 	bl	8000fa0 <__aeabi_fmul>
 80230f0:	494b      	ldr	r1, [pc, #300]	@ (8023220 <__ieee754_expf+0x1bc>)
 80230f2:	f7de f893 	bl	800121c <__aeabi_fsub>
 80230f6:	1c31      	adds	r1, r6, #0
 80230f8:	f7dd ff52 	bl	8000fa0 <__aeabi_fmul>
 80230fc:	4949      	ldr	r1, [pc, #292]	@ (8023224 <__ieee754_expf+0x1c0>)
 80230fe:	f7dd fbdf 	bl	80008c0 <__aeabi_fadd>
 8023102:	1c31      	adds	r1, r6, #0
 8023104:	f7dd ff4c 	bl	8000fa0 <__aeabi_fmul>
 8023108:	4947      	ldr	r1, [pc, #284]	@ (8023228 <__ieee754_expf+0x1c4>)
 802310a:	f7de f887 	bl	800121c <__aeabi_fsub>
 802310e:	1c31      	adds	r1, r6, #0
 8023110:	f7dd ff46 	bl	8000fa0 <__aeabi_fmul>
 8023114:	4945      	ldr	r1, [pc, #276]	@ (802322c <__ieee754_expf+0x1c8>)
 8023116:	f7dd fbd3 	bl	80008c0 <__aeabi_fadd>
 802311a:	1c31      	adds	r1, r6, #0
 802311c:	f7dd ff40 	bl	8000fa0 <__aeabi_fmul>
 8023120:	1c01      	adds	r1, r0, #0
 8023122:	1c20      	adds	r0, r4, #0
 8023124:	f7de f87a 	bl	800121c <__aeabi_fsub>
 8023128:	1c01      	adds	r1, r0, #0
 802312a:	1c06      	adds	r6, r0, #0
 802312c:	1c20      	adds	r0, r4, #0
 802312e:	f7dd ff37 	bl	8000fa0 <__aeabi_fmul>
 8023132:	9001      	str	r0, [sp, #4]
 8023134:	2d00      	cmp	r5, #0
 8023136:	d140      	bne.n	80231ba <__ieee754_expf+0x156>
 8023138:	2180      	movs	r1, #128	@ 0x80
 802313a:	1c30      	adds	r0, r6, #0
 802313c:	05c9      	lsls	r1, r1, #23
 802313e:	f7de f86d 	bl	800121c <__aeabi_fsub>
 8023142:	1c01      	adds	r1, r0, #0
 8023144:	9801      	ldr	r0, [sp, #4]
 8023146:	f7dd fd45 	bl	8000bd4 <__aeabi_fdiv>
 802314a:	1c21      	adds	r1, r4, #0
 802314c:	f7de f866 	bl	800121c <__aeabi_fsub>
 8023150:	1c01      	adds	r1, r0, #0
 8023152:	20fe      	movs	r0, #254	@ 0xfe
 8023154:	0580      	lsls	r0, r0, #22
 8023156:	f7de f861 	bl	800121c <__aeabi_fsub>
 802315a:	e79e      	b.n	802309a <__ieee754_expf+0x36>
 802315c:	4934      	ldr	r1, [pc, #208]	@ (8023230 <__ieee754_expf+0x1cc>)
 802315e:	1c20      	adds	r0, r4, #0
 8023160:	f7dd ff1e 	bl	8000fa0 <__aeabi_fmul>
 8023164:	4b33      	ldr	r3, [pc, #204]	@ (8023234 <__ieee754_expf+0x1d0>)
 8023166:	5959      	ldr	r1, [r3, r5]
 8023168:	f7dd fbaa 	bl	80008c0 <__aeabi_fadd>
 802316c:	f7de fa10 	bl	8001590 <__aeabi_f2iz>
 8023170:	0005      	movs	r5, r0
 8023172:	f7de fa2d 	bl	80015d0 <__aeabi_i2f>
 8023176:	4930      	ldr	r1, [pc, #192]	@ (8023238 <__ieee754_expf+0x1d4>)
 8023178:	1c06      	adds	r6, r0, #0
 802317a:	f7dd ff11 	bl	8000fa0 <__aeabi_fmul>
 802317e:	1c01      	adds	r1, r0, #0
 8023180:	1c20      	adds	r0, r4, #0
 8023182:	f7de f84b 	bl	800121c <__aeabi_fsub>
 8023186:	492d      	ldr	r1, [pc, #180]	@ (802323c <__ieee754_expf+0x1d8>)
 8023188:	1c07      	adds	r7, r0, #0
 802318a:	1c30      	adds	r0, r6, #0
 802318c:	f7dd ff08 	bl	8000fa0 <__aeabi_fmul>
 8023190:	9000      	str	r0, [sp, #0]
 8023192:	e7a0      	b.n	80230d6 <__ieee754_expf+0x72>
 8023194:	22d0      	movs	r2, #208	@ 0xd0
 8023196:	0592      	lsls	r2, r2, #22
 8023198:	4293      	cmp	r3, r2
 802319a:	d20c      	bcs.n	80231b6 <__ieee754_expf+0x152>
 802319c:	4928      	ldr	r1, [pc, #160]	@ (8023240 <__ieee754_expf+0x1dc>)
 802319e:	1c20      	adds	r0, r4, #0
 80231a0:	f7dd fb8e 	bl	80008c0 <__aeabi_fadd>
 80231a4:	21fe      	movs	r1, #254	@ 0xfe
 80231a6:	0589      	lsls	r1, r1, #22
 80231a8:	f7dd f9d6 	bl	8000558 <__aeabi_fcmpgt>
 80231ac:	1e05      	subs	r5, r0, #0
 80231ae:	d097      	beq.n	80230e0 <__ieee754_expf+0x7c>
 80231b0:	21fe      	movs	r1, #254	@ 0xfe
 80231b2:	0589      	lsls	r1, r1, #22
 80231b4:	e75f      	b.n	8023076 <__ieee754_expf+0x12>
 80231b6:	2500      	movs	r5, #0
 80231b8:	e792      	b.n	80230e0 <__ieee754_expf+0x7c>
 80231ba:	2080      	movs	r0, #128	@ 0x80
 80231bc:	1c31      	adds	r1, r6, #0
 80231be:	05c0      	lsls	r0, r0, #23
 80231c0:	f7de f82c 	bl	800121c <__aeabi_fsub>
 80231c4:	1c01      	adds	r1, r0, #0
 80231c6:	9801      	ldr	r0, [sp, #4]
 80231c8:	f7dd fd04 	bl	8000bd4 <__aeabi_fdiv>
 80231cc:	1c01      	adds	r1, r0, #0
 80231ce:	9800      	ldr	r0, [sp, #0]
 80231d0:	f7de f824 	bl	800121c <__aeabi_fsub>
 80231d4:	1c39      	adds	r1, r7, #0
 80231d6:	f7de f821 	bl	800121c <__aeabi_fsub>
 80231da:	1c01      	adds	r1, r0, #0
 80231dc:	20fe      	movs	r0, #254	@ 0xfe
 80231de:	0580      	lsls	r0, r0, #22
 80231e0:	f7de f81c 	bl	800121c <__aeabi_fsub>
 80231e4:	002b      	movs	r3, r5
 80231e6:	337d      	adds	r3, #125	@ 0x7d
 80231e8:	db02      	blt.n	80231f0 <__ieee754_expf+0x18c>
 80231ea:	05ec      	lsls	r4, r5, #23
 80231ec:	1824      	adds	r4, r4, r0
 80231ee:	e74c      	b.n	802308a <__ieee754_expf+0x26>
 80231f0:	21d8      	movs	r1, #216	@ 0xd8
 80231f2:	3564      	adds	r5, #100	@ 0x64
 80231f4:	05ed      	lsls	r5, r5, #23
 80231f6:	1828      	adds	r0, r5, r0
 80231f8:	0509      	lsls	r1, r1, #20
 80231fa:	f7dd fed1 	bl	8000fa0 <__aeabi_fmul>
 80231fe:	e74c      	b.n	802309a <__ieee754_expf+0x36>
 8023200:	2400      	movs	r4, #0
 8023202:	e742      	b.n	802308a <__ieee754_expf+0x26>
 8023204:	42b17217 	.word	0x42b17217
 8023208:	42cff1b5 	.word	0x42cff1b5
 802320c:	3eb17218 	.word	0x3eb17218
 8023210:	3f851591 	.word	0x3f851591
 8023214:	08026178 	.word	0x08026178
 8023218:	08026170 	.word	0x08026170
 802321c:	3331bb4c 	.word	0x3331bb4c
 8023220:	35ddea0e 	.word	0x35ddea0e
 8023224:	388ab355 	.word	0x388ab355
 8023228:	3b360b61 	.word	0x3b360b61
 802322c:	3e2aaaab 	.word	0x3e2aaaab
 8023230:	3fb8aa3b 	.word	0x3fb8aa3b
 8023234:	08026180 	.word	0x08026180
 8023238:	3f317180 	.word	0x3f317180
 802323c:	3717f7d1 	.word	0x3717f7d1
 8023240:	7149f2ca 	.word	0x7149f2ca

08023244 <with_errnof>:
 8023244:	b570      	push	{r4, r5, r6, lr}
 8023246:	000d      	movs	r5, r1
 8023248:	1c04      	adds	r4, r0, #0
 802324a:	f7fd f923 	bl	8020494 <__errno>
 802324e:	6005      	str	r5, [r0, #0]
 8023250:	1c20      	adds	r0, r4, #0
 8023252:	bd70      	pop	{r4, r5, r6, pc}

08023254 <xflowf>:
 8023254:	b510      	push	{r4, lr}
 8023256:	1c0b      	adds	r3, r1, #0
 8023258:	2800      	cmp	r0, #0
 802325a:	d002      	beq.n	8023262 <xflowf+0xe>
 802325c:	2380      	movs	r3, #128	@ 0x80
 802325e:	061b      	lsls	r3, r3, #24
 8023260:	18cb      	adds	r3, r1, r3
 8023262:	1c18      	adds	r0, r3, #0
 8023264:	f7dd fe9c 	bl	8000fa0 <__aeabi_fmul>
 8023268:	2122      	movs	r1, #34	@ 0x22
 802326a:	f7ff ffeb 	bl	8023244 <with_errnof>
 802326e:	bd10      	pop	{r4, pc}

08023270 <__math_uflowf>:
 8023270:	2180      	movs	r1, #128	@ 0x80
 8023272:	b510      	push	{r4, lr}
 8023274:	0549      	lsls	r1, r1, #21
 8023276:	f7ff ffed 	bl	8023254 <xflowf>
 802327a:	bd10      	pop	{r4, pc}

0802327c <__math_oflowf>:
 802327c:	21e0      	movs	r1, #224	@ 0xe0
 802327e:	b510      	push	{r4, lr}
 8023280:	05c9      	lsls	r1, r1, #23
 8023282:	f7ff ffe7 	bl	8023254 <xflowf>
 8023286:	bd10      	pop	{r4, pc}

08023288 <_init>:
 8023288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802328a:	46c0      	nop			@ (mov r8, r8)
 802328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802328e:	bc08      	pop	{r3}
 8023290:	469e      	mov	lr, r3
 8023292:	4770      	bx	lr

08023294 <_fini>:
 8023294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023296:	46c0      	nop			@ (mov r8, r8)
 8023298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802329a:	bc08      	pop	{r3}
 802329c:	469e      	mov	lr, r3
 802329e:	4770      	bx	lr
