
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023024  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ed0  080230e8  080230e8  000240e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025fb8  08025fb8  00027424  2**0
                  CONTENTS
  4 .ARM          00000008  08025fb8  08025fb8  00026fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025fc0  08025fc0  00027424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025fc0  08025fc0  00026fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025fc4  08025fc4  00026fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08025fc8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000338c  20000424  080263ec  00027424  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200037b0  080263ec  000277b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033f93  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009366  00000000  00000000  0005b3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  00064748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001faa  00000000  00000000  000671f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229b2  00000000  00000000  000691a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041860  00000000  00000000  0008bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0546  00000000  00000000  000cd3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016d8fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adfc  00000000  00000000  0016d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001787a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00178815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080230cc 	.word	0x080230cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	080230cc 	.word	0x080230cc

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080251cc 	.word	0x080251cc
 8000e0c:	0802520c 	.word	0x0802520c
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025248 	.word	0x08025248
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fb72 	bl	800fd4c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fbc9 	bl	800fe1c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fb7c 	bl	800fda8 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c faf8 	bl	800fd4c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fb27 	bl	800fdc4 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fb0b 	bl	800fda8 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000028 	.word	0x20000028

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fa92 	bl	800ece0 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a20 	.word	0x20000a20

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fdb6 	bl	8006348 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fe13 	bl	800640c <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000574 	.word	0x20000574
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000578 	.word	0x20000578

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a2c 	.word	0x20000a2c
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a38 	.word	0x20000a38
 8003884:	20000a3c 	.word	0x20000a3c

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a40 	.word	0x20000a40
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a60 	.word	0x20000a60
 80038f0:	20000a64 	.word	0x20000a64

080038f4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <ESP_GetHT+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <ESP_GetHT+0x24>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	2000056c 	.word	0x2000056c
 8003918:	20000570 	.word	0x20000570

0800391c <setHIDS>:
void setHIDS(float temp, float humid){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <setHIDS+0x20>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <setHIDS+0x24>)
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	2000056c 	.word	0x2000056c
 8003940:	20000570 	.word	0x20000570

08003944 <setVOC>:
void setVOC(uint16_t voc){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	0002      	movs	r2, r0
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <setVOC+0x1c>)
 8003952:	1dba      	adds	r2, r7, #6
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	801a      	strh	r2, [r3, #0]
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	2000057c 	.word	0x2000057c

08003964 <setMic>:
void setMic(float dB){
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <setMic+0x18>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	20000580 	.word	0x20000580

08003980 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe1a 	bl	80015d0 <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	490d      	ldr	r1, [pc, #52]	@ (80039d4 <setPMsen50+0x54>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd f917 	bl	8000bd4 <__aeabi_fdiv>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <setPMsen50+0x58>)
 80039ac:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fe0c 	bl	80015d0 <__aeabi_i2f>
 80039b8:	1c03      	adds	r3, r0, #0
 80039ba:	4906      	ldr	r1, [pc, #24]	@ (80039d4 <setPMsen50+0x54>)
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7fd f909 	bl	8000bd4 <__aeabi_fdiv>
 80039c2:	1c03      	adds	r3, r0, #0
 80039c4:	1c1a      	adds	r2, r3, #0
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <setPMsen50+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	41200000 	.word	0x41200000
 80039d8:	20000584 	.word	0x20000584
 80039dc:	20000588 	.word	0x20000588

080039e0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0005      	movs	r5, r0
 80039e8:	000c      	movs	r4, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c2a      	adds	r2, r5, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fd fde0 	bl	80015d0 <__aeabi_i2f>
 8003a10:	1c03      	adds	r3, r0, #0
 8003a12:	491d      	ldr	r1, [pc, #116]	@ (8003a88 <setPMs+0xa8>)
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7fd f8dd 	bl	8000bd4 <__aeabi_fdiv>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	1c1a      	adds	r2, r3, #0
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <setPMs+0xac>)
 8003a20:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fd fdd2 	bl	80015d0 <__aeabi_i2f>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <setPMs+0xa8>)
 8003a30:	1c18      	adds	r0, r3, #0
 8003a32:	f7fd f8cf 	bl	8000bd4 <__aeabi_fdiv>
 8003a36:	1c03      	adds	r3, r0, #0
 8003a38:	1c1a      	adds	r2, r3, #0
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <setPMs+0xb0>)
 8003a3c:	601a      	str	r2, [r3, #0]
  VOCIndex = voc / 10.0f;
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fd fdc4 	bl	80015d0 <__aeabi_i2f>
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	490f      	ldr	r1, [pc, #60]	@ (8003a88 <setPMs+0xa8>)
 8003a4c:	1c18      	adds	r0, r3, #0
 8003a4e:	f7fd f8c1 	bl	8000bd4 <__aeabi_fdiv>
 8003a52:	1c03      	adds	r3, r0, #0
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	f7fc fde1 	bl	800061c <__aeabi_f2uiz>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <setPMs+0xb4>)
 8003a60:	801a      	strh	r2, [r3, #0]
  airNOx = nox / 10.0f;
 8003a62:	003b      	movs	r3, r7
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fd fdb2 	bl	80015d0 <__aeabi_i2f>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	4906      	ldr	r1, [pc, #24]	@ (8003a88 <setPMs+0xa8>)
 8003a70:	1c18      	adds	r0, r3, #0
 8003a72:	f7fd f8af 	bl	8000bd4 <__aeabi_fdiv>
 8003a76:	1c03      	adds	r3, r0, #0
 8003a78:	1c1a      	adds	r2, r3, #0
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <setPMs+0xb8>)
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	41200000 	.word	0x41200000
 8003a8c:	20000584 	.word	0x20000584
 8003a90:	20000588 	.word	0x20000588
 8003a94:	2000057c 	.word	0x2000057c
 8003a98:	2000058c 	.word	0x2000058c

08003a9c <SetConfigMode>:

void SetConfigMode(){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <SetConfigMode+0x18>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003aa6:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <SetConfigMode+0x1c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	2000054f 	.word	0x2000054f
 8003ab8:	200001f3 	.word	0x200001f3

08003abc <GetReconfigMode>:

bool GetReconfigMode() {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003ac0:	4b02      	ldr	r3, [pc, #8]	@ (8003acc <GetReconfigMode+0x10>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	2000054f 	.word	0x2000054f

08003ad0 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003ad4:	f00b f94e 	bl	800ed74 <HAL_GetUIDw0>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <ESP_GetUID+0x28>)
 8003adc:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003ade:	f00b f953 	bl	800ed88 <HAL_GetUIDw1>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <ESP_GetUID+0x28>)
 8003ae6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003ae8:	f00b f958 	bl	800ed9c <HAL_GetUIDw2>
 8003aec:	0002      	movs	r2, r0
 8003aee:	4b02      	ldr	r3, [pc, #8]	@ (8003af8 <ESP_GetUID+0x28>)
 8003af0:	609a      	str	r2, [r3, #8]
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000558 	.word	0x20000558

08003afc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003b04:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <ESP_Init+0x2c>)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <ESP_Init+0x30>)
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003b10:	f7ff ffde 	bl	8003ad0 <ESP_GetUID>
  beurs = checkEEprom();
 8003b14:	f7ff fe82 	bl	800381c <checkEEprom>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <ESP_Init+0x34>)
 8003b1e:	701a      	strb	r2, [r3, #0]
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000444 	.word	0x20000444
 8003b2c:	20000030 	.word	0x20000030
 8003b30:	20000552 	.word	0x20000552

08003b34 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	000a      	movs	r2, r1
 8003b3e:	1cbb      	adds	r3, r7, #2
 8003b40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b42:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <ESP_Send+0x54>)
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	250f      	movs	r5, #15
 8003b48:	197c      	adds	r4, r7, r5
 8003b4a:	1cbb      	adds	r3, r7, #2
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0019      	movs	r1, r3
 8003b52:	f013 fbef 	bl	8017334 <HAL_UART_Transmit_DMA>
 8003b56:	0003      	movs	r3, r0
 8003b58:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b5a:	197b      	adds	r3, r7, r5
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b62:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <ESP_Send+0x58>)
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <ESP_Send+0x5c>)
 8003b66:	0019      	movs	r1, r3
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f00a fc73 	bl	800e454 <CreateLine>
    return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e006      	b.n	8003b80 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a07      	ldr	r2, [pc, #28]	@ (8003b94 <ESP_Send+0x60>)
 8003b76:	4908      	ldr	r1, [pc, #32]	@ (8003b98 <ESP_Send+0x64>)
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f00a fc6b 	bl	800e454 <CreateLine>
#endif
  return true;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b004      	add	sp, #16
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	20000444 	.word	0x20000444
 8003b8c:	080230e8 	.word	0x080230e8
 8003b90:	08023108 	.word	0x08023108
 8003b94:	0802310c 	.word	0x0802310c
 8003b98:	0802311c 	.word	0x0802311c

08003b9c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	000a      	movs	r2, r1
 8003ba6:	1cbb      	adds	r3, r7, #2
 8003ba8:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003baa:	4b56      	ldr	r3, [pc, #344]	@ (8003d04 <ESP_Receive+0x168>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003bb0:	260f      	movs	r6, #15
 8003bb2:	19bb      	adds	r3, r7, r6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003bb8:	4b53      	ldr	r3, [pc, #332]	@ (8003d08 <ESP_Receive+0x16c>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	250e      	movs	r5, #14
 8003bbe:	197c      	adds	r4, r7, r5
 8003bc0:	1cbb      	adds	r3, r7, #2
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	f013 fc44 	bl	8017454 <HAL_UART_Receive_DMA>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003bd0:	002c      	movs	r4, r5
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d100      	bne.n	8003bdc <ESP_Receive+0x40>
 8003bda:	e08e      	b.n	8003cfa <ESP_Receive+0x15e>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8003d08 <ESP_Receive+0x16c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2284      	movs	r2, #132	@ 0x84
 8003be2:	589b      	ldr	r3, [r3, r2]
 8003be4:	4a49      	ldr	r2, [pc, #292]	@ (8003d0c <ESP_Receive+0x170>)
 8003be6:	494a      	ldr	r1, [pc, #296]	@ (8003d10 <ESP_Receive+0x174>)
 8003be8:	2001      	movs	r0, #1
 8003bea:	f00a fc33 	bl	800e454 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d008      	beq.n	8003c0a <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003bf8:	4a46      	ldr	r2, [pc, #280]	@ (8003d14 <ESP_Receive+0x178>)
 8003bfa:	4b45      	ldr	r3, [pc, #276]	@ (8003d10 <ESP_Receive+0x174>)
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f00a fc28 	bl	800e454 <CreateLine>
      reset = true;
 8003c04:	19bb      	adds	r3, r7, r6
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003c0a:	230e      	movs	r3, #14
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d005      	beq.n	8003c22 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003c16:	4a40      	ldr	r2, [pc, #256]	@ (8003d18 <ESP_Receive+0x17c>)
 8003c18:	4b3d      	ldr	r3, [pc, #244]	@ (8003d10 <ESP_Receive+0x174>)
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f00a fc19 	bl	800e454 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c22:	230e      	movs	r3, #14
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d005      	beq.n	8003c3a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d1c <ESP_Receive+0x180>)
 8003c30:	4b37      	ldr	r3, [pc, #220]	@ (8003d10 <ESP_Receive+0x174>)
 8003c32:	0019      	movs	r1, r3
 8003c34:	2001      	movs	r0, #1
 8003c36:	f00a fc0d 	bl	800e454 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c3a:	230e      	movs	r3, #14
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	4013      	ands	r3, r2
 8003c44:	d005      	beq.n	8003c52 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c46:	4a36      	ldr	r2, [pc, #216]	@ (8003d20 <ESP_Receive+0x184>)
 8003c48:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <ESP_Receive+0x174>)
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f00a fc01 	bl	800e454 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c52:	230e      	movs	r3, #14
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d005      	beq.n	8003c6a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c5e:	4a31      	ldr	r2, [pc, #196]	@ (8003d24 <ESP_Receive+0x188>)
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <ESP_Receive+0x174>)
 8003c62:	0019      	movs	r1, r3
 8003c64:	2001      	movs	r0, #1
 8003c66:	f00a fbf5 	bl	800e454 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c6a:	230e      	movs	r3, #14
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2220      	movs	r2, #32
 8003c72:	4013      	ands	r3, r2
 8003c74:	d005      	beq.n	8003c82 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c76:	4a2c      	ldr	r2, [pc, #176]	@ (8003d28 <ESP_Receive+0x18c>)
 8003c78:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <ESP_Receive+0x174>)
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f00a fbe9 	bl	800e454 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c82:	230e      	movs	r3, #14
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2240      	movs	r2, #64	@ 0x40
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d005      	beq.n	8003c9a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c8e:	4a27      	ldr	r2, [pc, #156]	@ (8003d2c <ESP_Receive+0x190>)
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <ESP_Receive+0x174>)
 8003c92:	0019      	movs	r1, r3
 8003c94:	2001      	movs	r0, #1
 8003c96:	f00a fbdd 	bl	800e454 <CreateLine>
    }
#endif
    if (reset) {
 8003c9a:	230f      	movs	r3, #15
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d025      	beq.n	8003cf0 <ESP_Receive+0x154>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 0;
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	2200      	movs	r2, #0
 8003caa:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	05db      	lsls	r3, r3, #23
 8003cb0:	22fa      	movs	r2, #250	@ 0xfa
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	05db      	lsls	r3, r3, #23
 8003cba:	22fa      	movs	r2, #250	@ 0xfa
 8003cbc:	0112      	lsls	r2, r2, #4
 8003cbe:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 0;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <ESP_Receive+0x194>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <ESP_Receive+0x194>)
 8003cc8:	22fa      	movs	r2, #250	@ 0xfa
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8003cce:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <ESP_Receive+0x194>)
 8003cd0:	22fa      	movs	r2, #250	@ 0xfa
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003cd6:	4b17      	ldr	r3, [pc, #92]	@ (8003d34 <ESP_Receive+0x198>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2101      	movs	r1, #1
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f00c fa90 	bl	8010202 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003ce2:	23fa      	movs	r3, #250	@ 0xfa
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f00b f804 	bl	800ecf4 <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003cec:	f00b fcc1 	bl	800f672 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <ESP_Receive+0x168>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
    return false;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <ESP_Receive+0x160>
  }
  return true;
 8003cfa:	2301      	movs	r3, #1
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b005      	add	sp, #20
 8003d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d04:	20000448 	.word	0x20000448
 8003d08:	20000444 	.word	0x20000444
 8003d0c:	08023120 	.word	0x08023120
 8003d10:	08023108 	.word	0x08023108
 8003d14:	08023150 	.word	0x08023150
 8003d18:	08023174 	.word	0x08023174
 8003d1c:	08023198 	.word	0x08023198
 8003d20:	080231bc 	.word	0x080231bc
 8003d24:	080231e0 	.word	0x080231e0
 8003d28:	0802320c 	.word	0x0802320c
 8003d2c:	0802323c 	.word	0x0802323c
 8003d30:	40000400 	.word	0x40000400
 8003d34:	50000400 	.word	0x50000400

08003d38 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_UART_ErrorCallback+0x34>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10c      	bne.n	8003d64 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2284      	movs	r2, #132	@ 0x84
 8003d4e:	589b      	ldr	r3, [r3, r2]
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d007      	beq.n	8003d64 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2284      	movs	r2, #132	@ 0x84
 8003d58:	589b      	ldr	r3, [r3, r2]
 8003d5a:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <HAL_UART_ErrorCallback+0x38>)
 8003d5c:	4905      	ldr	r1, [pc, #20]	@ (8003d74 <HAL_UART_ErrorCallback+0x3c>)
 8003d5e:	2003      	movs	r0, #3
 8003d60:	f00a fb78 	bl	800e454 <CreateLine>
    }
  }
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000444 	.word	0x20000444
 8003d70:	0802326c 	.word	0x0802326c
 8003d74:	0802311c 	.word	0x0802311c

08003d78 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e010      	b.n	8003daa <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1898      	adds	r0, r3, r2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	18d3      	adds	r3, r2, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <uint8ArrayToString+0x44>)
 8003d9e:	0019      	movs	r1, r3
 8003da0:	f01c f8b2 	bl	801ff08 <siprintf>
  for (int i = 0; i < 12; i++)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b0b      	cmp	r3, #11
 8003dae:	ddeb      	ble.n	8003d88 <uint8ArrayToString+0x10>
  }
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	08023298 	.word	0x08023298

08003dc0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	b089      	sub	sp, #36	@ 0x24
 8003dc4:	af04      	add	r7, sp, #16
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003dcc:	4bd8      	ldr	r3, [pc, #864]	@ (8004130 <CreateMessage+0x370>)
 8003dce:	48d9      	ldr	r0, [pc, #868]	@ (8004134 <CreateMessage+0x374>)
 8003dd0:	220c      	movs	r2, #12
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	f7ff fc90 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003dd8:	4bd7      	ldr	r3, [pc, #860]	@ (8004138 <CreateMessage+0x378>)
 8003dda:	48d8      	ldr	r0, [pc, #864]	@ (800413c <CreateMessage+0x37c>)
 8003ddc:	220c      	movs	r2, #12
 8003dde:	0019      	movs	r1, r3
 8003de0:	f7ff fc8a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003de4:	4bd6      	ldr	r3, [pc, #856]	@ (8004140 <CreateMessage+0x380>)
 8003de6:	48d7      	ldr	r0, [pc, #860]	@ (8004144 <CreateMessage+0x384>)
 8003de8:	220c      	movs	r2, #12
 8003dea:	0019      	movs	r1, r3
 8003dec:	f7ff fc84 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003df0:	4bd5      	ldr	r3, [pc, #852]	@ (8004148 <CreateMessage+0x388>)
 8003df2:	48d6      	ldr	r0, [pc, #856]	@ (800414c <CreateMessage+0x38c>)
 8003df4:	220c      	movs	r2, #12
 8003df6:	0019      	movs	r1, r3
 8003df8:	f7ff fc7e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dfc:	4bd4      	ldr	r3, [pc, #848]	@ (8004150 <CreateMessage+0x390>)
 8003dfe:	48d5      	ldr	r0, [pc, #852]	@ (8004154 <CreateMessage+0x394>)
 8003e00:	220c      	movs	r2, #12
 8003e02:	0019      	movs	r1, r3
 8003e04:	f7ff fc78 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003e08:	4bd3      	ldr	r3, [pc, #844]	@ (8004158 <CreateMessage+0x398>)
 8003e0a:	48d4      	ldr	r0, [pc, #848]	@ (800415c <CreateMessage+0x39c>)
 8003e0c:	220c      	movs	r2, #12
 8003e0e:	0019      	movs	r1, r3
 8003e10:	f7ff fc72 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003e14:	4bd2      	ldr	r3, [pc, #840]	@ (8004160 <CreateMessage+0x3a0>)
 8003e16:	48d3      	ldr	r0, [pc, #844]	@ (8004164 <CreateMessage+0x3a4>)
 8003e18:	220c      	movs	r2, #12
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	f7ff fc6c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003e20:	4bd1      	ldr	r3, [pc, #836]	@ (8004168 <CreateMessage+0x3a8>)
 8003e22:	48d2      	ldr	r0, [pc, #840]	@ (800416c <CreateMessage+0x3ac>)
 8003e24:	220c      	movs	r2, #12
 8003e26:	0019      	movs	r1, r3
 8003e28:	f7ff fc66 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003e2c:	4bd0      	ldr	r3, [pc, #832]	@ (8004170 <CreateMessage+0x3b0>)
 8003e2e:	48d1      	ldr	r0, [pc, #836]	@ (8004174 <CreateMessage+0x3b4>)
 8003e30:	220c      	movs	r2, #12
 8003e32:	0019      	movs	r1, r3
 8003e34:	f7ff fc60 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e38:	f7ff fd26 	bl	8003888 <checkName>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d006      	beq.n	8003e4e <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e40:	4bcd      	ldr	r3, [pc, #820]	@ (8004178 <CreateMessage+0x3b8>)
 8003e42:	48ce      	ldr	r0, [pc, #824]	@ (800417c <CreateMessage+0x3bc>)
 8003e44:	221e      	movs	r2, #30
 8003e46:	0019      	movs	r1, r3
 8003e48:	f7ff fc56 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e4c:	e005      	b.n	8003e5a <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e4e:	4bca      	ldr	r3, [pc, #808]	@ (8004178 <CreateMessage+0x3b8>)
 8003e50:	4acb      	ldr	r2, [pc, #812]	@ (8004180 <CreateMessage+0x3c0>)
 8003e52:	6811      	ldr	r1, [r2, #0]
 8003e54:	6019      	str	r1, [r3, #0]
 8003e56:	7912      	ldrb	r2, [r2, #4]
 8003e58:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
//  Debug("sensorid voor opensensmaps nox: %d", noxConfig);
  setCharges();
 8003e5a:	f7ff fcbb 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e5e:	2390      	movs	r3, #144	@ 0x90
 8003e60:	00da      	lsls	r2, r3, #3
 8003e62:	4bc8      	ldr	r3, [pc, #800]	@ (8004184 <CreateMessage+0x3c4>)
 8003e64:	2100      	movs	r1, #0
 8003e66:	0018      	movs	r0, r3
 8003e68:	f01c f992 	bl	8020190 <memset>
  uint16_t index = 0;
 8003e6c:	260e      	movs	r6, #14
 8003e6e:	19bb      	adds	r3, r7, r6
 8003e70:	2200      	movs	r2, #0
 8003e72:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e74:	19bb      	adds	r3, r7, r6
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	4bc2      	ldr	r3, [pc, #776]	@ (8004184 <CreateMessage+0x3c4>)
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	4ac2      	ldr	r2, [pc, #776]	@ (8004188 <CreateMessage+0x3c8>)
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f01c f841 	bl	801ff08 <siprintf>
  index = strlen(message);
 8003e86:	4bbf      	ldr	r3, [pc, #764]	@ (8004184 <CreateMessage+0x3c4>)
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fc f96f 	bl	800016c <strlen>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	19bb      	adds	r3, r7, r6
 8003e92:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e94:	4aa6      	ldr	r2, [pc, #664]	@ (8004130 <CreateMessage+0x370>)
 8003e96:	4bbd      	ldr	r3, [pc, #756]	@ (800418c <CreateMessage+0x3cc>)
 8003e98:	0011      	movs	r1, r2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff ff6c 	bl	8003d78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003ea0:	19bb      	adds	r3, r7, r6
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	4bb7      	ldr	r3, [pc, #732]	@ (8004184 <CreateMessage+0x3c4>)
 8003ea6:	18d4      	adds	r4, r2, r3
 8003ea8:	4bb9      	ldr	r3, [pc, #740]	@ (8004190 <CreateMessage+0x3d0>)
 8003eaa:	689d      	ldr	r5, [r3, #8]
 8003eac:	4bb9      	ldr	r3, [pc, #740]	@ (8004194 <CreateMessage+0x3d4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	1c18      	adds	r0, r3, #0
 8003eb2:	f7ff fad7 	bl	8003464 <__aeabi_f2d>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	000b      	movs	r3, r1
 8003eba:	48af      	ldr	r0, [pc, #700]	@ (8004178 <CreateMessage+0x3b8>)
 8003ebc:	49b6      	ldr	r1, [pc, #728]	@ (8004198 <CreateMessage+0x3d8>)
 8003ebe:	9202      	str	r2, [sp, #8]
 8003ec0:	9303      	str	r3, [sp, #12]
 8003ec2:	4bb2      	ldr	r3, [pc, #712]	@ (800418c <CreateMessage+0x3cc>)
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	002a      	movs	r2, r5
 8003eca:	0020      	movs	r0, r4
 8003ecc:	f01c f81c 	bl	801ff08 <siprintf>
  index = strlen(message);
 8003ed0:	4bac      	ldr	r3, [pc, #688]	@ (8004184 <CreateMessage+0x3c4>)
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fc f94a 	bl	800016c <strlen>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	19bb      	adds	r3, r7, r6
 8003edc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003ede:	4a96      	ldr	r2, [pc, #600]	@ (8004138 <CreateMessage+0x378>)
 8003ee0:	4baa      	ldr	r3, [pc, #680]	@ (800418c <CreateMessage+0x3cc>)
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff ff47 	bl	8003d78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003eea:	19bb      	adds	r3, r7, r6
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	4ba5      	ldr	r3, [pc, #660]	@ (8004184 <CreateMessage+0x3c4>)
 8003ef0:	18d4      	adds	r4, r2, r3
 8003ef2:	4ba7      	ldr	r3, [pc, #668]	@ (8004190 <CreateMessage+0x3d0>)
 8003ef4:	689d      	ldr	r5, [r3, #8]
 8003ef6:	4ba9      	ldr	r3, [pc, #676]	@ (800419c <CreateMessage+0x3dc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1c18      	adds	r0, r3, #0
 8003efc:	f7ff fab2 	bl	8003464 <__aeabi_f2d>
 8003f00:	0002      	movs	r2, r0
 8003f02:	000b      	movs	r3, r1
 8003f04:	489c      	ldr	r0, [pc, #624]	@ (8004178 <CreateMessage+0x3b8>)
 8003f06:	49a6      	ldr	r1, [pc, #664]	@ (80041a0 <CreateMessage+0x3e0>)
 8003f08:	9202      	str	r2, [sp, #8]
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	4b9f      	ldr	r3, [pc, #636]	@ (800418c <CreateMessage+0x3cc>)
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	0003      	movs	r3, r0
 8003f12:	002a      	movs	r2, r5
 8003f14:	0020      	movs	r0, r4
 8003f16:	f01b fff7 	bl	801ff08 <siprintf>
  index = strlen(message);
 8003f1a:	4b9a      	ldr	r3, [pc, #616]	@ (8004184 <CreateMessage+0x3c4>)
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fc f925 	bl	800016c <strlen>
 8003f22:	0002      	movs	r2, r0
 8003f24:	19bb      	adds	r3, r7, r6
 8003f26:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003f28:	4a85      	ldr	r2, [pc, #532]	@ (8004140 <CreateMessage+0x380>)
 8003f2a:	4b98      	ldr	r3, [pc, #608]	@ (800418c <CreateMessage+0x3cc>)
 8003f2c:	0011      	movs	r1, r2
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7ff ff22 	bl	8003d78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003f34:	19bb      	adds	r3, r7, r6
 8003f36:	881a      	ldrh	r2, [r3, #0]
 8003f38:	4b92      	ldr	r3, [pc, #584]	@ (8004184 <CreateMessage+0x3c4>)
 8003f3a:	18d4      	adds	r4, r2, r3
 8003f3c:	4b94      	ldr	r3, [pc, #592]	@ (8004190 <CreateMessage+0x3d0>)
 8003f3e:	689d      	ldr	r5, [r3, #8]
 8003f40:	4b98      	ldr	r3, [pc, #608]	@ (80041a4 <CreateMessage+0x3e4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	1c18      	adds	r0, r3, #0
 8003f46:	f7ff fa8d 	bl	8003464 <__aeabi_f2d>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	000b      	movs	r3, r1
 8003f4e:	488a      	ldr	r0, [pc, #552]	@ (8004178 <CreateMessage+0x3b8>)
 8003f50:	4995      	ldr	r1, [pc, #596]	@ (80041a8 <CreateMessage+0x3e8>)
 8003f52:	9202      	str	r2, [sp, #8]
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	4b8d      	ldr	r3, [pc, #564]	@ (800418c <CreateMessage+0x3cc>)
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	002a      	movs	r2, r5
 8003f5e:	0020      	movs	r0, r4
 8003f60:	f01b ffd2 	bl	801ff08 <siprintf>
  index = strlen(message);
 8003f64:	4b87      	ldr	r3, [pc, #540]	@ (8004184 <CreateMessage+0x3c4>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc f900 	bl	800016c <strlen>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	19bb      	adds	r3, r7, r6
 8003f70:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f72:	4a75      	ldr	r2, [pc, #468]	@ (8004148 <CreateMessage+0x388>)
 8003f74:	4b85      	ldr	r3, [pc, #532]	@ (800418c <CreateMessage+0x3cc>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fefd 	bl	8003d78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003f7e:	19bb      	adds	r3, r7, r6
 8003f80:	881a      	ldrh	r2, [r3, #0]
 8003f82:	4b80      	ldr	r3, [pc, #512]	@ (8004184 <CreateMessage+0x3c4>)
 8003f84:	18d0      	adds	r0, r2, r3
 8003f86:	4b82      	ldr	r3, [pc, #520]	@ (8004190 <CreateMessage+0x3d0>)
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	4b88      	ldr	r3, [pc, #544]	@ (80041ac <CreateMessage+0x3ec>)
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	4c7a      	ldr	r4, [pc, #488]	@ (8004178 <CreateMessage+0x3b8>)
 8003f90:	4987      	ldr	r1, [pc, #540]	@ (80041b0 <CreateMessage+0x3f0>)
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	4b7d      	ldr	r3, [pc, #500]	@ (800418c <CreateMessage+0x3cc>)
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	0023      	movs	r3, r4
 8003f9a:	f01b ffb5 	bl	801ff08 <siprintf>
  index = strlen(message);
 8003f9e:	4b79      	ldr	r3, [pc, #484]	@ (8004184 <CreateMessage+0x3c4>)
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fc f8e3 	bl	800016c <strlen>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	19bb      	adds	r3, r7, r6
 8003faa:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003fac:	1dfb      	adds	r3, r7, #7
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4053      	eors	r3, r2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d100      	bne.n	8003fbc <CreateMessage+0x1fc>
 8003fba:	e10f      	b.n	80041dc <CreateMessage+0x41c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003fbc:	4a64      	ldr	r2, [pc, #400]	@ (8004150 <CreateMessage+0x390>)
 8003fbe:	4b73      	ldr	r3, [pc, #460]	@ (800418c <CreateMessage+0x3cc>)
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff fed8 	bl	8003d78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003fc8:	19bb      	adds	r3, r7, r6
 8003fca:	881a      	ldrh	r2, [r3, #0]
 8003fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8004184 <CreateMessage+0x3c4>)
 8003fce:	18d4      	adds	r4, r2, r3
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004190 <CreateMessage+0x3d0>)
 8003fd2:	689d      	ldr	r5, [r3, #8]
 8003fd4:	4b77      	ldr	r3, [pc, #476]	@ (80041b4 <CreateMessage+0x3f4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	1c18      	adds	r0, r3, #0
 8003fda:	f7ff fa43 	bl	8003464 <__aeabi_f2d>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	000b      	movs	r3, r1
 8003fe2:	4865      	ldr	r0, [pc, #404]	@ (8004178 <CreateMessage+0x3b8>)
 8003fe4:	4974      	ldr	r1, [pc, #464]	@ (80041b8 <CreateMessage+0x3f8>)
 8003fe6:	9202      	str	r2, [sp, #8]
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	4b68      	ldr	r3, [pc, #416]	@ (800418c <CreateMessage+0x3cc>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	0003      	movs	r3, r0
 8003ff0:	002a      	movs	r2, r5
 8003ff2:	0020      	movs	r0, r4
 8003ff4:	f01b ff88 	bl	801ff08 <siprintf>
    index = strlen(message);
 8003ff8:	4b62      	ldr	r3, [pc, #392]	@ (8004184 <CreateMessage+0x3c4>)
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7fc f8b6 	bl	800016c <strlen>
 8004000:	0002      	movs	r2, r0
 8004002:	19bb      	adds	r3, r7, r6
 8004004:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8004006:	4a54      	ldr	r2, [pc, #336]	@ (8004158 <CreateMessage+0x398>)
 8004008:	4b60      	ldr	r3, [pc, #384]	@ (800418c <CreateMessage+0x3cc>)
 800400a:	0011      	movs	r1, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f7ff feb3 	bl	8003d78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004012:	19bb      	adds	r3, r7, r6
 8004014:	881a      	ldrh	r2, [r3, #0]
 8004016:	4b5b      	ldr	r3, [pc, #364]	@ (8004184 <CreateMessage+0x3c4>)
 8004018:	18d4      	adds	r4, r2, r3
 800401a:	4b5d      	ldr	r3, [pc, #372]	@ (8004190 <CreateMessage+0x3d0>)
 800401c:	689d      	ldr	r5, [r3, #8]
 800401e:	4b67      	ldr	r3, [pc, #412]	@ (80041bc <CreateMessage+0x3fc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	1c18      	adds	r0, r3, #0
 8004024:	f7ff fa1e 	bl	8003464 <__aeabi_f2d>
 8004028:	0002      	movs	r2, r0
 800402a:	000b      	movs	r3, r1
 800402c:	4852      	ldr	r0, [pc, #328]	@ (8004178 <CreateMessage+0x3b8>)
 800402e:	4964      	ldr	r1, [pc, #400]	@ (80041c0 <CreateMessage+0x400>)
 8004030:	9202      	str	r2, [sp, #8]
 8004032:	9303      	str	r3, [sp, #12]
 8004034:	4b55      	ldr	r3, [pc, #340]	@ (800418c <CreateMessage+0x3cc>)
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	0003      	movs	r3, r0
 800403a:	002a      	movs	r2, r5
 800403c:	0020      	movs	r0, r4
 800403e:	f01b ff63 	bl	801ff08 <siprintf>
    index = strlen(message);
 8004042:	4b50      	ldr	r3, [pc, #320]	@ (8004184 <CreateMessage+0x3c4>)
 8004044:	0018      	movs	r0, r3
 8004046:	f7fc f891 	bl	800016c <strlen>
 800404a:	0002      	movs	r2, r0
 800404c:	19bb      	adds	r3, r7, r6
 800404e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 8004050:	4a43      	ldr	r2, [pc, #268]	@ (8004160 <CreateMessage+0x3a0>)
 8004052:	4b4e      	ldr	r3, [pc, #312]	@ (800418c <CreateMessage+0x3cc>)
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff fe8e 	bl	8003d78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 800405c:	19bb      	adds	r3, r7, r6
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	4b48      	ldr	r3, [pc, #288]	@ (8004184 <CreateMessage+0x3c4>)
 8004062:	18d4      	adds	r4, r2, r3
 8004064:	4b4a      	ldr	r3, [pc, #296]	@ (8004190 <CreateMessage+0x3d0>)
 8004066:	689d      	ldr	r5, [r3, #8]
 8004068:	4b56      	ldr	r3, [pc, #344]	@ (80041c4 <CreateMessage+0x404>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1c18      	adds	r0, r3, #0
 800406e:	f7ff f9f9 	bl	8003464 <__aeabi_f2d>
 8004072:	0002      	movs	r2, r0
 8004074:	000b      	movs	r3, r1
 8004076:	4840      	ldr	r0, [pc, #256]	@ (8004178 <CreateMessage+0x3b8>)
 8004078:	4953      	ldr	r1, [pc, #332]	@ (80041c8 <CreateMessage+0x408>)
 800407a:	9202      	str	r2, [sp, #8]
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	4b43      	ldr	r3, [pc, #268]	@ (800418c <CreateMessage+0x3cc>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	0003      	movs	r3, r0
 8004084:	002a      	movs	r2, r5
 8004086:	0020      	movs	r0, r4
 8004088:	f01b ff3e 	bl	801ff08 <siprintf>
    index = strlen(message);
 800408c:	4b3d      	ldr	r3, [pc, #244]	@ (8004184 <CreateMessage+0x3c4>)
 800408e:	0018      	movs	r0, r3
 8004090:	f7fc f86c 	bl	800016c <strlen>
 8004094:	0002      	movs	r2, r0
 8004096:	19bb      	adds	r3, r7, r6
 8004098:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 800409a:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <CreateMessage+0x3a8>)
 800409c:	4b3b      	ldr	r3, [pc, #236]	@ (800418c <CreateMessage+0x3cc>)
 800409e:	0011      	movs	r1, r2
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fe69 	bl	8003d78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 80040a6:	19bb      	adds	r3, r7, r6
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	4b36      	ldr	r3, [pc, #216]	@ (8004184 <CreateMessage+0x3c4>)
 80040ac:	18d4      	adds	r4, r2, r3
 80040ae:	4b38      	ldr	r3, [pc, #224]	@ (8004190 <CreateMessage+0x3d0>)
 80040b0:	689d      	ldr	r5, [r3, #8]
 80040b2:	4b46      	ldr	r3, [pc, #280]	@ (80041cc <CreateMessage+0x40c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1c18      	adds	r0, r3, #0
 80040b8:	f7ff f9d4 	bl	8003464 <__aeabi_f2d>
 80040bc:	0002      	movs	r2, r0
 80040be:	000b      	movs	r3, r1
 80040c0:	482d      	ldr	r0, [pc, #180]	@ (8004178 <CreateMessage+0x3b8>)
 80040c2:	4943      	ldr	r1, [pc, #268]	@ (80041d0 <CreateMessage+0x410>)
 80040c4:	9202      	str	r2, [sp, #8]
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	4b30      	ldr	r3, [pc, #192]	@ (800418c <CreateMessage+0x3cc>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	0003      	movs	r3, r0
 80040ce:	002a      	movs	r2, r5
 80040d0:	0020      	movs	r0, r4
 80040d2:	f01b ff19 	bl	801ff08 <siprintf>
    index = strlen(message);
 80040d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <CreateMessage+0x3c4>)
 80040d8:	0018      	movs	r0, r3
 80040da:	f7fc f847 	bl	800016c <strlen>
 80040de:	0002      	movs	r2, r0
 80040e0:	19bb      	adds	r3, r7, r6
 80040e2:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 80040e4:	4a22      	ldr	r2, [pc, #136]	@ (8004170 <CreateMessage+0x3b0>)
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <CreateMessage+0x3cc>)
 80040e8:	0011      	movs	r1, r2
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7ff fe44 	bl	8003d78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 80040f0:	19bb      	adds	r3, r7, r6
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <CreateMessage+0x3c4>)
 80040f6:	18d4      	adds	r4, r2, r3
 80040f8:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <CreateMessage+0x3d0>)
 80040fa:	689d      	ldr	r5, [r3, #8]
 80040fc:	4b35      	ldr	r3, [pc, #212]	@ (80041d4 <CreateMessage+0x414>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	1c18      	adds	r0, r3, #0
 8004102:	f7ff f9af 	bl	8003464 <__aeabi_f2d>
 8004106:	0002      	movs	r2, r0
 8004108:	000b      	movs	r3, r1
 800410a:	481b      	ldr	r0, [pc, #108]	@ (8004178 <CreateMessage+0x3b8>)
 800410c:	4932      	ldr	r1, [pc, #200]	@ (80041d8 <CreateMessage+0x418>)
 800410e:	9202      	str	r2, [sp, #8]
 8004110:	9303      	str	r3, [sp, #12]
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <CreateMessage+0x3cc>)
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	0003      	movs	r3, r0
 8004118:	002a      	movs	r2, r5
 800411a:	0020      	movs	r0, r4
 800411c:	f01b fef4 	bl	801ff08 <siprintf>
    index = strlen(message);
 8004120:	4b18      	ldr	r3, [pc, #96]	@ (8004184 <CreateMessage+0x3c4>)
 8004122:	0018      	movs	r0, r3
 8004124:	f7fc f822 	bl	800016c <strlen>
 8004128:	0002      	movs	r2, r0
 800412a:	19bb      	adds	r3, r7, r6
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	e07b      	b.n	8004228 <CreateMessage+0x468>
 8004130:	20000a68 	.word	0x20000a68
 8004134:	0808000c 	.word	0x0808000c
 8004138:	20000a74 	.word	0x20000a74
 800413c:	08080018 	.word	0x08080018
 8004140:	20000a80 	.word	0x20000a80
 8004144:	08080048 	.word	0x08080048
 8004148:	20000a8c 	.word	0x20000a8c
 800414c:	08080030 	.word	0x08080030
 8004150:	20000a98 	.word	0x20000a98
 8004154:	0808006c 	.word	0x0808006c
 8004158:	20000aa4 	.word	0x20000aa4
 800415c:	08080078 	.word	0x08080078
 8004160:	20000ab0 	.word	0x20000ab0
 8004164:	08080024 	.word	0x08080024
 8004168:	20000abc 	.word	0x20000abc
 800416c:	08080054 	.word	0x08080054
 8004170:	20000ac8 	.word	0x20000ac8
 8004174:	08080060 	.word	0x08080060
 8004178:	20000ad4 	.word	0x20000ad4
 800417c:	08080090 	.word	0x08080090
 8004180:	080252a8 	.word	0x080252a8
 8004184:	20000590 	.word	0x20000590
 8004188:	080232a0 	.word	0x080232a0
 800418c:	20000af4 	.word	0x20000af4
 8004190:	20000558 	.word	0x20000558
 8004194:	2000056c 	.word	0x2000056c
 8004198:	080232a4 	.word	0x080232a4
 800419c:	20000570 	.word	0x20000570
 80041a0:	080232f8 	.word	0x080232f8
 80041a4:	20000580 	.word	0x20000580
 80041a8:	08023350 	.word	0x08023350
 80041ac:	2000057c 	.word	0x2000057c
 80041b0:	080233ac 	.word	0x080233ac
 80041b4:	20000574 	.word	0x20000574
 80041b8:	08023400 	.word	0x08023400
 80041bc:	20000578 	.word	0x20000578
 80041c0:	08023460 	.word	0x08023460
 80041c4:	2000058c 	.word	0x2000058c
 80041c8:	080234c0 	.word	0x080234c0
 80041cc:	20000584 	.word	0x20000584
 80041d0:	08023518 	.word	0x08023518
 80041d4:	20000588 	.word	0x20000588
 80041d8:	08023574 	.word	0x08023574

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 80041dc:	4a21      	ldr	r2, [pc, #132]	@ (8004264 <CreateMessage+0x4a4>)
 80041de:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <CreateMessage+0x4a8>)
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7ff fdc8 	bl	8003d78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80041e8:	260e      	movs	r6, #14
 80041ea:	19bb      	adds	r3, r7, r6
 80041ec:	881a      	ldrh	r2, [r3, #0]
 80041ee:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <CreateMessage+0x4ac>)
 80041f0:	18d4      	adds	r4, r2, r3
 80041f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <CreateMessage+0x4b0>)
 80041f4:	689d      	ldr	r5, [r3, #8]
 80041f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004274 <CreateMessage+0x4b4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1c18      	adds	r0, r3, #0
 80041fc:	f7ff f932 	bl	8003464 <__aeabi_f2d>
 8004200:	0002      	movs	r2, r0
 8004202:	000b      	movs	r3, r1
 8004204:	481c      	ldr	r0, [pc, #112]	@ (8004278 <CreateMessage+0x4b8>)
 8004206:	491d      	ldr	r1, [pc, #116]	@ (800427c <CreateMessage+0x4bc>)
 8004208:	9202      	str	r2, [sp, #8]
 800420a:	9303      	str	r3, [sp, #12]
 800420c:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <CreateMessage+0x4a8>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	0003      	movs	r3, r0
 8004212:	002a      	movs	r2, r5
 8004214:	0020      	movs	r0, r4
 8004216:	f01b fe77 	bl	801ff08 <siprintf>
    index = strlen(message);
 800421a:	4b14      	ldr	r3, [pc, #80]	@ (800426c <CreateMessage+0x4ac>)
 800421c:	0018      	movs	r0, r3
 800421e:	f7fb ffa5 	bl	800016c <strlen>
 8004222:	0002      	movs	r2, r0
 8004224:	19bb      	adds	r3, r7, r6
 8004226:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 8004228:	230e      	movs	r3, #14
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	4b0f      	ldr	r3, [pc, #60]	@ (800426c <CreateMessage+0x4ac>)
 8004230:	18d3      	adds	r3, r2, r3
 8004232:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <CreateMessage+0x4c0>)
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f01b fe66 	bl	801ff08 <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <CreateMessage+0x4ac>)
 800423e:	0018      	movs	r0, r3
 8004240:	f7fb ff94 	bl	800016c <strlen>
 8004244:	0003      	movs	r3, r0
 8004246:	4a0f      	ldr	r2, [pc, #60]	@ (8004284 <CreateMessage+0x4c4>)
 8004248:	490f      	ldr	r1, [pc, #60]	@ (8004288 <CreateMessage+0x4c8>)
 800424a:	2003      	movs	r0, #3
 800424c:	f00a f902 	bl	800e454 <CreateLine>
  return strlen(message);
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <CreateMessage+0x4ac>)
 8004252:	0018      	movs	r0, r3
 8004254:	f7fb ff8a 	bl	800016c <strlen>
 8004258:	0003      	movs	r3, r0
 800425a:	b29b      	uxth	r3, r3
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b005      	add	sp, #20
 8004262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004264:	20000a98 	.word	0x20000a98
 8004268:	20000af4 	.word	0x20000af4
 800426c:	20000590 	.word	0x20000590
 8004270:	20000558 	.word	0x20000558
 8004274:	20000574 	.word	0x20000574
 8004278:	20000ad4 	.word	0x20000ad4
 800427c:	080235cc 	.word	0x080235cc
 8004280:	08023624 	.word	0x08023624
 8004284:	08023628 	.word	0x08023628
 8004288:	0802311c 	.word	0x0802311c

0800428c <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8004290:	2064      	movs	r0, #100	@ 0x64
 8004292:	f00a fd2f 	bl	800ecf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <StartProg+0x60>)
 8004298:	2200      	movs	r2, #0
 800429a:	2101      	movs	r1, #1
 800429c:	0018      	movs	r0, r3
 800429e:	f00b ffb0 	bl	8010202 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80042a2:	2064      	movs	r0, #100	@ 0x64
 80042a4:	f00a fd26 	bl	800ecf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <StartProg+0x60>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	2102      	movs	r1, #2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f00b ffa7 	bl	8010202 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80042b4:	23fa      	movs	r3, #250	@ 0xfa
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	0018      	movs	r0, r3
 80042ba:	f00a fd1b 	bl	800ecf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <StartProg+0x60>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	2101      	movs	r1, #1
 80042c4:	0018      	movs	r0, r3
 80042c6:	f00b ff9c 	bl	8010202 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80042ca:	23fa      	movs	r3, #250	@ 0xfa
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	0018      	movs	r0, r3
 80042d0:	f00a fd10 	bl	800ecf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <StartProg+0x60>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	2102      	movs	r1, #2
 80042da:	0018      	movs	r0, r3
 80042dc:	f00b ff91 	bl	8010202 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80042e0:	2028      	movs	r0, #40	@ 0x28
 80042e2:	f00a fd07 	bl	800ecf4 <HAL_Delay>
}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	50001c00 	.word	0x50001c00

080042f0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80042f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f2:	b0d9      	sub	sp, #356	@ 0x164
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	0008      	movs	r0, r1
 80042fa:	0011      	movs	r1, r2
 80042fc:	4ba4      	ldr	r3, [pc, #656]	@ (8004590 <ParseBuffer+0x2a0>)
 80042fe:	24b0      	movs	r4, #176	@ 0xb0
 8004300:	0064      	lsls	r4, r4, #1
 8004302:	191b      	adds	r3, r3, r4
 8004304:	19db      	adds	r3, r3, r7
 8004306:	1c02      	adds	r2, r0, #0
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	4ba2      	ldr	r3, [pc, #648]	@ (8004594 <ParseBuffer+0x2a4>)
 800430c:	191b      	adds	r3, r3, r4
 800430e:	19db      	adds	r3, r3, r7
 8004310:	1c0a      	adds	r2, r1, #0
 8004312:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004314:	2380      	movs	r3, #128	@ 0x80
 8004316:	005a      	lsls	r2, r3, #1
 8004318:	2348      	movs	r3, #72	@ 0x48
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2100      	movs	r1, #0
 800431e:	0018      	movs	r0, r3
 8004320:	f01b ff36 	bl	8020190 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004324:	2360      	movs	r3, #96	@ 0x60
 8004326:	33ff      	adds	r3, #255	@ 0xff
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	2203      	movs	r2, #3
 800432c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800432e:	23ae      	movs	r3, #174	@ 0xae
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	2200      	movs	r2, #0
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	e013      	b.n	8004362 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800433a:	20ae      	movs	r0, #174	@ 0xae
 800433c:	0040      	lsls	r0, r0, #1
 800433e:	183b      	adds	r3, r7, r0
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	18d2      	adds	r2, r2, r3
 8004346:	183b      	adds	r3, r7, r0
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	7811      	ldrb	r1, [r2, #0]
 800434c:	4a92      	ldr	r2, [pc, #584]	@ (8004598 <ParseBuffer+0x2a8>)
 800434e:	24b0      	movs	r4, #176	@ 0xb0
 8004350:	0064      	lsls	r4, r4, #1
 8004352:	1912      	adds	r2, r2, r4
 8004354:	19d2      	adds	r2, r2, r7
 8004356:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004358:	183b      	adds	r3, r7, r0
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	183b      	adds	r3, r7, r0
 800435e:	3201      	adds	r2, #1
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	23ae      	movs	r3, #174	@ 0xae
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	18fa      	adds	r2, r7, r3
 8004368:	4b89      	ldr	r3, [pc, #548]	@ (8004590 <ParseBuffer+0x2a0>)
 800436a:	21b0      	movs	r1, #176	@ 0xb0
 800436c:	0049      	lsls	r1, r1, #1
 800436e:	185b      	adds	r3, r3, r1
 8004370:	19db      	adds	r3, r3, r7
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d3df      	bcc.n	800433a <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800437a:	4b85      	ldr	r3, [pc, #532]	@ (8004590 <ParseBuffer+0x2a0>)
 800437c:	185b      	adds	r3, r3, r1
 800437e:	19db      	adds	r3, r3, r7
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	4a85      	ldr	r2, [pc, #532]	@ (8004598 <ParseBuffer+0x2a8>)
 8004384:	1852      	adds	r2, r2, r1
 8004386:	19d2      	adds	r2, r2, r7
 8004388:	2100      	movs	r1, #0
 800438a:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 800438c:	f00a f8dc 	bl	800e548 <GetVerboseLevel>
 8004390:	0003      	movs	r3, r0
 8004392:	2b03      	cmp	r3, #3
 8004394:	d106      	bne.n	80043a4 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 8004396:	2348      	movs	r3, #72	@ 0x48
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	4a80      	ldr	r2, [pc, #512]	@ (800459c <ParseBuffer+0x2ac>)
 800439c:	4980      	ldr	r1, [pc, #512]	@ (80045a0 <ParseBuffer+0x2b0>)
 800439e:	2003      	movs	r0, #3
 80043a0:	f00a f858 	bl	800e454 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	26ac      	movs	r6, #172	@ 0xac
 80043a8:	0076      	lsls	r6, r6, #1
 80043aa:	19ba      	adds	r2, r7, r6
 80043ac:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80043ae:	4b7d      	ldr	r3, [pc, #500]	@ (80045a4 <ParseBuffer+0x2b4>)
 80043b0:	25b0      	movs	r5, #176	@ 0xb0
 80043b2:	006d      	lsls	r5, r5, #1
 80043b4:	195b      	adds	r3, r3, r5
 80043b6:	19db      	adds	r3, r3, r7
 80043b8:	4a7b      	ldr	r2, [pc, #492]	@ (80045a8 <ParseBuffer+0x2b8>)
 80043ba:	8811      	ldrh	r1, [r2, #0]
 80043bc:	8019      	strh	r1, [r3, #0]
 80043be:	7892      	ldrb	r2, [r2, #2]
 80043c0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80043c2:	4b7a      	ldr	r3, [pc, #488]	@ (80045ac <ParseBuffer+0x2bc>)
 80043c4:	195b      	adds	r3, r3, r5
 80043c6:	19db      	adds	r3, r3, r7
 80043c8:	4a79      	ldr	r2, [pc, #484]	@ (80045b0 <ParseBuffer+0x2c0>)
 80043ca:	6811      	ldr	r1, [r2, #0]
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	8892      	ldrh	r2, [r2, #4]
 80043d0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80043d2:	4b78      	ldr	r3, [pc, #480]	@ (80045b4 <ParseBuffer+0x2c4>)
 80043d4:	195b      	adds	r3, r3, r5
 80043d6:	19db      	adds	r3, r3, r7
 80043d8:	4a77      	ldr	r2, [pc, #476]	@ (80045b8 <ParseBuffer+0x2c8>)
 80043da:	6811      	ldr	r1, [r2, #0]
 80043dc:	6019      	str	r1, [r3, #0]
 80043de:	7912      	ldrb	r2, [r2, #4]
 80043e0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80043e2:	4b76      	ldr	r3, [pc, #472]	@ (80045bc <ParseBuffer+0x2cc>)
 80043e4:	195b      	adds	r3, r3, r5
 80043e6:	19db      	adds	r3, r3, r7
 80043e8:	4a75      	ldr	r2, [pc, #468]	@ (80045c0 <ParseBuffer+0x2d0>)
 80043ea:	6811      	ldr	r1, [r2, #0]
 80043ec:	6019      	str	r1, [r3, #0]
 80043ee:	8892      	ldrh	r2, [r2, #4]
 80043f0:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80043f2:	4b74      	ldr	r3, [pc, #464]	@ (80045c4 <ParseBuffer+0x2d4>)
 80043f4:	195b      	adds	r3, r3, r5
 80043f6:	19db      	adds	r3, r3, r7
 80043f8:	223e      	movs	r2, #62	@ 0x3e
 80043fa:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043fc:	4b72      	ldr	r3, [pc, #456]	@ (80045c8 <ParseBuffer+0x2d8>)
 80043fe:	195b      	adds	r3, r3, r5
 8004400:	19db      	adds	r3, r3, r7
 8004402:	4a72      	ldr	r2, [pc, #456]	@ (80045cc <ParseBuffer+0x2dc>)
 8004404:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004406:	c313      	stmia	r3!, {r0, r1, r4}
 8004408:	8811      	ldrh	r1, [r2, #0]
 800440a:	8019      	strh	r1, [r3, #0]
 800440c:	7892      	ldrb	r2, [r2, #2]
 800440e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004410:	4b6f      	ldr	r3, [pc, #444]	@ (80045d0 <ParseBuffer+0x2e0>)
 8004412:	195b      	adds	r3, r3, r5
 8004414:	19db      	adds	r3, r3, r7
 8004416:	4a6f      	ldr	r2, [pc, #444]	@ (80045d4 <ParseBuffer+0x2e4>)
 8004418:	ca13      	ldmia	r2!, {r0, r1, r4}
 800441a:	c313      	stmia	r3!, {r0, r1, r4}
 800441c:	8812      	ldrh	r2, [r2, #0]
 800441e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004420:	4b5c      	ldr	r3, [pc, #368]	@ (8004594 <ParseBuffer+0x2a4>)
 8004422:	195b      	adds	r3, r3, r5
 8004424:	19db      	adds	r3, r3, r7
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 800442c:	2344      	movs	r3, #68	@ 0x44
 800442e:	18fa      	adds	r2, r7, r3
 8004430:	2348      	movs	r3, #72	@ 0x48
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	0011      	movs	r1, r2
 8004436:	0018      	movs	r0, r3
 8004438:	f01b fee5 	bl	8020206 <strstr>
 800443c:	0003      	movs	r3, r0
 800443e:	19ba      	adds	r2, r7, r6
 8004440:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004442:	4b54      	ldr	r3, [pc, #336]	@ (8004594 <ParseBuffer+0x2a4>)
 8004444:	22b0      	movs	r2, #176	@ 0xb0
 8004446:	0052      	lsls	r2, r2, #1
 8004448:	189b      	adds	r3, r3, r2
 800444a:	19db      	adds	r3, r3, r7
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10c      	bne.n	800446c <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004452:	232c      	movs	r3, #44	@ 0x2c
 8004454:	18fa      	adds	r2, r7, r3
 8004456:	2348      	movs	r3, #72	@ 0x48
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	0011      	movs	r1, r2
 800445c:	0018      	movs	r0, r3
 800445e:	f01b fed2 	bl	8020206 <strstr>
 8004462:	0003      	movs	r3, r0
 8004464:	22ac      	movs	r2, #172	@ 0xac
 8004466:	0052      	lsls	r2, r2, #1
 8004468:	18ba      	adds	r2, r7, r2
 800446a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800446c:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <ParseBuffer+0x2a4>)
 800446e:	22b0      	movs	r2, #176	@ 0xb0
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	189b      	adds	r3, r3, r2
 8004474:	19db      	adds	r3, r3, r7
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d10c      	bne.n	8004496 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 800447c:	2328      	movs	r3, #40	@ 0x28
 800447e:	18fa      	adds	r2, r7, r3
 8004480:	2348      	movs	r3, #72	@ 0x48
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	0011      	movs	r1, r2
 8004486:	0018      	movs	r0, r3
 8004488:	f01b febd 	bl	8020206 <strstr>
 800448c:	0003      	movs	r3, r0
 800448e:	22ac      	movs	r2, #172	@ 0xac
 8004490:	0052      	lsls	r2, r2, #1
 8004492:	18ba      	adds	r2, r7, r2
 8004494:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004496:	4b3f      	ldr	r3, [pc, #252]	@ (8004594 <ParseBuffer+0x2a4>)
 8004498:	22b0      	movs	r2, #176	@ 0xb0
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	189b      	adds	r3, r3, r2
 800449e:	19db      	adds	r3, r3, r7
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d10c      	bne.n	80044c0 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80044a6:	2308      	movs	r3, #8
 80044a8:	18fa      	adds	r2, r7, r3
 80044aa:	2348      	movs	r3, #72	@ 0x48
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	0011      	movs	r1, r2
 80044b0:	0018      	movs	r0, r3
 80044b2:	f01b fea8 	bl	8020206 <strstr>
 80044b6:	0003      	movs	r3, r0
 80044b8:	22ac      	movs	r2, #172	@ 0xac
 80044ba:	0052      	lsls	r2, r2, #1
 80044bc:	18ba      	adds	r2, r7, r2
 80044be:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80044c0:	233c      	movs	r3, #60	@ 0x3c
 80044c2:	18fa      	adds	r2, r7, r3
 80044c4:	2448      	movs	r4, #72	@ 0x48
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	0011      	movs	r1, r2
 80044ca:	0018      	movs	r0, r3
 80044cc:	f01b fe9b 	bl	8020206 <strstr>
 80044d0:	0003      	movs	r3, r0
 80044d2:	22aa      	movs	r2, #170	@ 0xaa
 80044d4:	0052      	lsls	r2, r2, #1
 80044d6:	18ba      	adds	r2, r7, r2
 80044d8:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80044da:	2318      	movs	r3, #24
 80044dc:	18fa      	adds	r2, r7, r3
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	0011      	movs	r1, r2
 80044e2:	0018      	movs	r0, r3
 80044e4:	f01b fe8f 	bl	8020206 <strstr>
 80044e8:	0003      	movs	r3, r0
 80044ea:	22a8      	movs	r2, #168	@ 0xa8
 80044ec:	0052      	lsls	r2, r2, #1
 80044ee:	18ba      	adds	r2, r7, r2
 80044f0:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80044f2:	4a39      	ldr	r2, [pc, #228]	@ (80045d8 <ParseBuffer+0x2e8>)
 80044f4:	193b      	adds	r3, r7, r4
 80044f6:	0011      	movs	r1, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	f01b fe84 	bl	8020206 <strstr>
 80044fe:	0003      	movs	r3, r0
 8004500:	22a6      	movs	r2, #166	@ 0xa6
 8004502:	0052      	lsls	r2, r2, #1
 8004504:	18ba      	adds	r2, r7, r2
 8004506:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004508:	2334      	movs	r3, #52	@ 0x34
 800450a:	18fa      	adds	r2, r7, r3
 800450c:	193b      	adds	r3, r7, r4
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f01b fe78 	bl	8020206 <strstr>
 8004516:	0003      	movs	r3, r0
 8004518:	22a4      	movs	r2, #164	@ 0xa4
 800451a:	0052      	lsls	r2, r2, #1
 800451c:	18ba      	adds	r2, r7, r2
 800451e:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <ParseBuffer+0x2a0>)
 8004522:	21b0      	movs	r1, #176	@ 0xb0
 8004524:	0049      	lsls	r1, r1, #1
 8004526:	185b      	adds	r3, r3, r1
 8004528:	19db      	adds	r3, r3, r7
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d800      	bhi.n	8004532 <ParseBuffer+0x242>
 8004530:	e0c1      	b.n	80046b6 <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004532:	22ac      	movs	r2, #172	@ 0xac
 8004534:	0052      	lsls	r2, r2, #1
 8004536:	18bb      	adds	r3, r7, r2
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d054      	beq.n	80045e8 <ParseBuffer+0x2f8>
 800453e:	18bb      	adds	r3, r7, r2
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b4f      	cmp	r3, #79	@ 0x4f
 8004546:	d14f      	bne.n	80045e8 <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004548:	2360      	movs	r3, #96	@ 0x60
 800454a:	33ff      	adds	r3, #255	@ 0xff
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004552:	4b22      	ldr	r3, [pc, #136]	@ (80045dc <ParseBuffer+0x2ec>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b12      	cmp	r3, #18
 8004558:	d146      	bne.n	80045e8 <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <ParseBuffer+0x2a0>)
 800455c:	185b      	adds	r3, r3, r1
 800455e:	19db      	adds	r3, r3, r7
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	2b2b      	cmp	r3, #43	@ 0x2b
 8004564:	d10b      	bne.n	800457e <ParseBuffer+0x28e>
 8004566:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <ParseBuffer+0x2a8>)
 8004568:	185b      	adds	r3, r3, r1
 800456a:	19db      	adds	r3, r3, r7
 800456c:	2221      	movs	r2, #33	@ 0x21
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	2b32      	cmp	r3, #50	@ 0x32
 8004572:	d104      	bne.n	800457e <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004574:	193b      	adds	r3, r7, r4
 8004576:	0018      	movs	r0, r3
 8004578:	f002 f908 	bl	800678c <ParseTime>
 800457c:	e034      	b.n	80045e8 <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 800457e:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <ParseBuffer+0x2f0>)
 8004580:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <ParseBuffer+0x2f4>)
 8004582:	0019      	movs	r1, r3
 8004584:	2001      	movs	r0, #1
 8004586:	f009 ff65 	bl	800e454 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800458a:	2306      	movs	r3, #6
 800458c:	e097      	b.n	80046be <ParseBuffer+0x3ce>
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	fffffea2 	.word	0xfffffea2
 8004594:	fffffea1 	.word	0xfffffea1
 8004598:	fffffee8 	.word	0xfffffee8
 800459c:	08023640 	.word	0x08023640
 80045a0:	0802311c 	.word	0x0802311c
 80045a4:	fffffee4 	.word	0xfffffee4
 80045a8:	0802366c 	.word	0x0802366c
 80045ac:	fffffedc 	.word	0xfffffedc
 80045b0:	08023670 	.word	0x08023670
 80045b4:	fffffed4 	.word	0xfffffed4
 80045b8:	08023678 	.word	0x08023678
 80045bc:	fffffecc 	.word	0xfffffecc
 80045c0:	08023680 	.word	0x08023680
 80045c4:	fffffec8 	.word	0xfffffec8
 80045c8:	fffffeb8 	.word	0xfffffeb8
 80045cc:	08023688 	.word	0x08023688
 80045d0:	fffffea8 	.word	0xfffffea8
 80045d4:	08023698 	.word	0x08023698
 80045d8:	08025288 	.word	0x08025288
 80045dc:	20000a26 	.word	0x20000a26
 80045e0:	08023658 	.word	0x08023658
 80045e4:	08023108 	.word	0x08023108
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80045e8:	22ac      	movs	r2, #172	@ 0xac
 80045ea:	0052      	lsls	r2, r2, #1
 80045ec:	18bb      	adds	r3, r7, r2
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <ParseBuffer+0x318>
 80045f4:	18bb      	adds	r3, r7, r2
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b72      	cmp	r3, #114	@ 0x72
 80045fc:	d104      	bne.n	8004608 <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045fe:	2360      	movs	r3, #96	@ 0x60
 8004600:	33ff      	adds	r3, #255	@ 0xff
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2202      	movs	r2, #2
 8004606:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004608:	22ac      	movs	r2, #172	@ 0xac
 800460a:	0052      	lsls	r2, r2, #1
 800460c:	18bb      	adds	r3, r7, r2
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <ParseBuffer+0x338>
 8004614:	18bb      	adds	r3, r7, r2
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b3e      	cmp	r3, #62	@ 0x3e
 800461c:	d104      	bne.n	8004628 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 800461e:	2360      	movs	r3, #96	@ 0x60
 8004620:	33ff      	adds	r3, #255	@ 0xff
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2205      	movs	r2, #5
 8004626:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004628:	22ac      	movs	r2, #172	@ 0xac
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	18bb      	adds	r3, r7, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <ParseBuffer+0x358>
 8004634:	18bb      	adds	r3, r7, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b2b      	cmp	r3, #43	@ 0x2b
 800463c:	d104      	bne.n	8004648 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 800463e:	2360      	movs	r3, #96	@ 0x60
 8004640:	33ff      	adds	r3, #255	@ 0xff
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	220b      	movs	r2, #11
 8004646:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004648:	22aa      	movs	r2, #170	@ 0xaa
 800464a:	0052      	lsls	r2, r2, #1
 800464c:	18bb      	adds	r3, r7, r2
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <ParseBuffer+0x36e>
 8004654:	18bb      	adds	r3, r7, r2
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b45      	cmp	r3, #69	@ 0x45
 800465c:	d00a      	beq.n	8004674 <ParseBuffer+0x384>
 800465e:	22a4      	movs	r2, #164	@ 0xa4
 8004660:	0052      	lsls	r2, r2, #1
 8004662:	18bb      	adds	r3, r7, r2
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <ParseBuffer+0x38e>
 800466a:	18bb      	adds	r3, r7, r2
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b46      	cmp	r3, #70	@ 0x46
 8004672:	d104      	bne.n	800467e <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004674:	2360      	movs	r3, #96	@ 0x60
 8004676:	33ff      	adds	r3, #255	@ 0xff
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800467e:	22a8      	movs	r2, #168	@ 0xa8
 8004680:	0052      	lsls	r2, r2, #1
 8004682:	18bb      	adds	r3, r7, r2
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <ParseBuffer+0x3aa>
 800468a:	18bb      	adds	r3, r7, r2
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b57      	cmp	r3, #87	@ 0x57
 8004692:	d102      	bne.n	800469a <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <ParseBuffer+0x3d8>)
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800469a:	22a6      	movs	r2, #166	@ 0xa6
 800469c:	0052      	lsls	r2, r2, #1
 800469e:	18bb      	adds	r3, r7, r2
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <ParseBuffer+0x3c6>
 80046a6:	18bb      	adds	r3, r7, r2
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b32      	cmp	r3, #50	@ 0x32
 80046ae:	d102      	bne.n	80046b6 <ParseBuffer+0x3c6>
      beurs = true;
 80046b0:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <ParseBuffer+0x3dc>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80046b6:	2360      	movs	r3, #96	@ 0x60
 80046b8:	33ff      	adds	r3, #255	@ 0xff
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	781b      	ldrb	r3, [r3, #0]

}
 80046be:	0018      	movs	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b059      	add	sp, #356	@ 0x164
 80046c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	20000550 	.word	0x20000550
 80046cc:	20000552 	.word	0x20000552

080046d0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <PollAwake+0x34>)
 80046d8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fb fd45 	bl	800016c <strlen>
 80046e2:	0003      	movs	r3, r0
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff fa22 	bl	8003b34 <ESP_Send>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <PollAwake+0x28>
    return true;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <PollAwake+0x2a>
  }
  else{
    return false;
 80046f8:	2300      	movs	r3, #0
  }
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	080236a8 	.word	0x080236a8

08004708 <RFPower>:
bool RFPower(){
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <RFPower+0x34>)
 8004710:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f7fb fd29 	bl	800016c <strlen>
 800471a:	0003      	movs	r3, r0
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f7ff fa06 	bl	8003b34 <ESP_Send>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <RFPower+0x28>
    return true;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <RFPower+0x2a>
  }
  else{
    return false;
 8004730:	2300      	movs	r3, #0
  }
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	080236b0 	.word	0x080236b0

08004740 <CheckRFPower>:
bool CheckRFPower(){
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <CheckRFPower+0x34>)
 8004748:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0003      	movs	r3, r0
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0011      	movs	r1, r2
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff f9ea 	bl	8003b34 <ESP_Send>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d001      	beq.n	8004768 <CheckRFPower+0x28>
    return true;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004768:	2300      	movs	r3, #0
  }
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	080236c0 	.word	0x080236c0

08004778 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <ATRestore+0x34>)
 8004780:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fb fcf1 	bl	800016c <strlen>
 800478a:	0003      	movs	r3, r0
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff f9ce 	bl	8003b34 <ESP_Send>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <ATRestore+0x28>
    return true;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <ATRestore+0x2a>
  }
  else{
    return false;
 80047a0:	2300      	movs	r3, #0
  }
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	080236d0 	.word	0x080236d0

080047b0 <CWINIT>:
bool CWINIT(){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <CWINIT+0x34>)
 80047b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7fb fcd5 	bl	800016c <strlen>
 80047c2:	0003      	movs	r3, r0
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff f9b2 	bl	8003b34 <ESP_Send>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <CWINIT+0x28>
    return true;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <CWINIT+0x2a>
  }
  else{
    return false;
 80047d8:	2300      	movs	r3, #0
  }
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	080236e0 	.word	0x080236e0

080047e8 <CWMODE1>:
bool CWMODE1(){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80047ee:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <CWMODE1+0x34>)
 80047f0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f7fb fcb9 	bl	800016c <strlen>
 80047fa:	0003      	movs	r3, r0
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff f996 	bl	8003b34 <ESP_Send>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d001      	beq.n	8004810 <CWMODE1+0x28>
    return true;
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004810:	2300      	movs	r3, #0
  }
}
 8004812:	0018      	movs	r0, r3
 8004814:	46bd      	mov	sp, r7
 8004816:	b002      	add	sp, #8
 8004818:	bd80      	pop	{r7, pc}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	080236f0 	.word	0x080236f0

08004820 <CWMODE2>:
bool CWMODE2(){
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <CWMODE2+0x34>)
 8004828:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f7fb fc9d 	bl	800016c <strlen>
 8004832:	0003      	movs	r3, r0
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff f97a 	bl	8003b34 <ESP_Send>
 8004840:	1e03      	subs	r3, r0, #0
 8004842:	d001      	beq.n	8004848 <CWMODE2+0x28>
    return true;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004848:	2300      	movs	r3, #0
  }
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b002      	add	sp, #8
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	08023700 	.word	0x08023700

08004858 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800485e:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <CWAUTOCONN+0x34>)
 8004860:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f7fb fc81 	bl	800016c <strlen>
 800486a:	0003      	movs	r3, r0
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0011      	movs	r1, r2
 8004872:	0018      	movs	r0, r3
 8004874:	f7ff f95e 	bl	8003b34 <ESP_Send>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d001      	beq.n	8004880 <CWAUTOCONN+0x28>
    return true;
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004880:	2300      	movs	r3, #0
  }
}
 8004882:	0018      	movs	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	b002      	add	sp, #8
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	08023710 	.word	0x08023710

08004890 <CWJAP>:
bool CWJAP(){
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	46c6      	mov	lr, r8
 8004894:	b500      	push	{lr}
 8004896:	b0a2      	sub	sp, #136	@ 0x88
 8004898:	af00      	add	r7, sp, #0
 800489a:	466b      	mov	r3, sp
 800489c:	4698      	mov	r8, r3
  beursTest = true;
 800489e:	4b39      	ldr	r3, [pc, #228]	@ (8004984 <CWJAP+0xf4>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80048a4:	2618      	movs	r6, #24
 80048a6:	19bb      	adds	r3, r7, r6
 80048a8:	2264      	movs	r2, #100	@ 0x64
 80048aa:	2100      	movs	r1, #0
 80048ac:	0018      	movs	r0, r3
 80048ae:	f01b fc6f 	bl	8020190 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80048b2:	4b35      	ldr	r3, [pc, #212]	@ (8004988 <CWJAP+0xf8>)
 80048b4:	4a35      	ldr	r2, [pc, #212]	@ (800498c <CWJAP+0xfc>)
 80048b6:	4936      	ldr	r1, [pc, #216]	@ (8004990 <CWJAP+0x100>)
 80048b8:	19b8      	adds	r0, r7, r6
 80048ba:	f01b fb25 	bl	801ff08 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80048be:	19bb      	adds	r3, r7, r6
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fb fc53 	bl	800016c <strlen>
 80048c6:	0002      	movs	r2, r0
 80048c8:	216f      	movs	r1, #111	@ 0x6f
 80048ca:	0030      	movs	r0, r6
 80048cc:	180b      	adds	r3, r1, r0
 80048ce:	19db      	adds	r3, r3, r7
 80048d0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80048d2:	180b      	adds	r3, r1, r0
 80048d4:	19db      	adds	r3, r3, r7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	2180      	movs	r1, #128	@ 0x80
 80048de:	1879      	adds	r1, r7, r1
 80048e0:	600a      	str	r2, [r1, #0]
 80048e2:	001a      	movs	r2, r3
 80048e4:	60ba      	str	r2, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	60fa      	str	r2, [r7, #12]
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	0002      	movs	r2, r0
 80048f0:	0f52      	lsrs	r2, r2, #29
 80048f2:	000e      	movs	r6, r1
 80048f4:	00f6      	lsls	r6, r6, #3
 80048f6:	617e      	str	r6, [r7, #20]
 80048f8:	697e      	ldr	r6, [r7, #20]
 80048fa:	4316      	orrs	r6, r2
 80048fc:	617e      	str	r6, [r7, #20]
 80048fe:	0002      	movs	r2, r0
 8004900:	00d2      	lsls	r2, r2, #3
 8004902:	613a      	str	r2, [r7, #16]
 8004904:	001a      	movs	r2, r3
 8004906:	603a      	str	r2, [r7, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	6838      	ldr	r0, [r7, #0]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	0002      	movs	r2, r0
 8004912:	0f52      	lsrs	r2, r2, #29
 8004914:	000e      	movs	r6, r1
 8004916:	00f5      	lsls	r5, r6, #3
 8004918:	4315      	orrs	r5, r2
 800491a:	0002      	movs	r2, r0
 800491c:	00d4      	lsls	r4, r2, #3
 800491e:	3307      	adds	r3, #7
 8004920:	08db      	lsrs	r3, r3, #3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	466a      	mov	r2, sp
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	469d      	mov	sp, r3
 800492a:	466b      	mov	r3, sp
 800492c:	3300      	adds	r3, #0
 800492e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004930:	246f      	movs	r4, #111	@ 0x6f
 8004932:	2518      	movs	r5, #24
 8004934:	1963      	adds	r3, r4, r5
 8004936:	19db      	adds	r3, r3, r7
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	001a      	movs	r2, r3
 800493e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004940:	2100      	movs	r1, #0
 8004942:	0018      	movs	r0, r3
 8004944:	f01b fc24 	bl	8020190 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004948:	1963      	adds	r3, r4, r5
 800494a:	19db      	adds	r3, r3, r7
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	1979      	adds	r1, r7, r5
 8004950:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004952:	0018      	movs	r0, r3
 8004954:	f01b fc43 	bl	80201de <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004958:	1963      	adds	r3, r4, r5
 800495a:	19db      	adds	r3, r3, r7
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b29a      	uxth	r2, r3
 8004960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004962:	0011      	movs	r1, r2
 8004964:	0018      	movs	r0, r3
 8004966:	f7ff f8e5 	bl	8003b34 <ESP_Send>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d001      	beq.n	8004972 <CWJAP+0xe2>
    return true;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <CWJAP+0xe4>
  }
  else{
    return false;
 8004972:	2300      	movs	r3, #0
 8004974:	46c5      	mov	sp, r8
  }
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b022      	add	sp, #136	@ 0x88
 800497c:	bc80      	pop	{r7}
 800497e:	46b8      	mov	r8, r7
 8004980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	20000551 	.word	0x20000551
 8004988:	08025294 	.word	0x08025294
 800498c:	08025288 	.word	0x08025288
 8004990:	08023724 	.word	0x08023724

08004994 <CWMODE3>:
bool CWMODE3(){
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800499a:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <CWMODE3+0x34>)
 800499c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fb fbe3 	bl	800016c <strlen>
 80049a6:	0003      	movs	r3, r0
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7ff f8c0 	bl	8003b34 <ESP_Send>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d001      	beq.n	80049bc <CWMODE3+0x28>
    return true;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <CWMODE3+0x2a>
  }
  else{
    return false;
 80049bc:	2300      	movs	r3, #0
  }
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	0802373c 	.word	0x0802373c

080049cc <CWSTATE>:
bool CWSTATE(){
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80049d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <CWSTATE+0x34>)
 80049d4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fb fbc7 	bl	800016c <strlen>
 80049de:	0003      	movs	r3, r0
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0011      	movs	r1, r2
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7ff f8a4 	bl	8003b34 <ESP_Send>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d001      	beq.n	80049f4 <CWSTATE+0x28>
    return true;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <CWSTATE+0x2a>
  }
  else{
    return false;
 80049f4:	2300      	movs	r3, #0
  }
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	0802374c 	.word	0x0802374c

08004a04 <CWSAP>:
bool CWSAP(){
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <CWSAP+0x34>)
 8004a0c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f7fb fbab 	bl	800016c <strlen>
 8004a16:	0003      	movs	r3, r0
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0011      	movs	r1, r2
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7ff f888 	bl	8003b34 <ESP_Send>
 8004a24:	1e03      	subs	r3, r0, #0
 8004a26:	d001      	beq.n	8004a2c <CWSAP+0x28>
    return true;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <CWSAP+0x2a>
  }
  else{
    return false;
 8004a2c:	2300      	movs	r3, #0
  }
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b002      	add	sp, #8
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	0802375c 	.word	0x0802375c

08004a3c <CIPMUX>:
bool CIPMUX(){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004a42:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <CIPMUX+0x34>)
 8004a44:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fb fb8f 	bl	800016c <strlen>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0011      	movs	r1, r2
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7ff f86c 	bl	8003b34 <ESP_Send>
 8004a5c:	1e03      	subs	r3, r0, #0
 8004a5e:	d001      	beq.n	8004a64 <CIPMUX+0x28>
    return true;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a64:	2300      	movs	r3, #0
  }
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	08023780 	.word	0x08023780

08004a74 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <WEBSERVER+0x34>)
 8004a7c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fb fb73 	bl	800016c <strlen>
 8004a86:	0003      	movs	r3, r0
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0011      	movs	r1, r2
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff f850 	bl	8003b34 <ESP_Send>
 8004a94:	1e03      	subs	r3, r0, #0
 8004a96:	d001      	beq.n	8004a9c <WEBSERVER+0x28>
    return true;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a9c:	2300      	movs	r3, #0
  }
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b002      	add	sp, #8
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	08023790 	.word	0x08023790

08004aac <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b0c5      	sub	sp, #276	@ 0x114
 8004ab0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	005a      	lsls	r2, r3, #1
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	2100      	movs	r1, #0
 8004aba:	0018      	movs	r0, r3
 8004abc:	f01b fb68 	bl	8020190 <memset>
  uint16_t length = CreateMessage(beurs);
 8004ac0:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <HTTPCPOST+0xa0>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	1dfc      	adds	r4, r7, #7
 8004ac6:	34ff      	adds	r4, #255	@ 0xff
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff f979 	bl	8003dc0 <CreateMessage>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <HTTPCPOST+0xa0>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004ada:	1dfb      	adds	r3, r7, #7
 8004adc:	33ff      	adds	r3, #255	@ 0xff
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <HTTPCPOST+0xa4>)
 8004ae2:	491c      	ldr	r1, [pc, #112]	@ (8004b54 <HTTPCPOST+0xa8>)
 8004ae4:	1d38      	adds	r0, r7, #4
 8004ae6:	f01b fa0f 	bl	801ff08 <siprintf>
 8004aea:	e016      	b.n	8004b1a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <HTTPCPOST+0xac>)
 8004aee:	481b      	ldr	r0, [pc, #108]	@ (8004b5c <HTTPCPOST+0xb0>)
 8004af0:	220c      	movs	r2, #12
 8004af2:	0019      	movs	r1, r3
 8004af4:	f7fe fe00 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004af8:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <HTTPCPOST+0xac>)
 8004afa:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HTTPCPOST+0xb4>)
 8004afc:	0011      	movs	r1, r2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7ff f93a 	bl	8003d78 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004b04:	1dfb      	adds	r3, r7, #7
 8004b06:	33ff      	adds	r3, #255	@ 0xff
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	4c15      	ldr	r4, [pc, #84]	@ (8004b60 <HTTPCPOST+0xb4>)
 8004b0c:	4a15      	ldr	r2, [pc, #84]	@ (8004b64 <HTTPCPOST+0xb8>)
 8004b0e:	4916      	ldr	r1, [pc, #88]	@ (8004b68 <HTTPCPOST+0xbc>)
 8004b10:	1d38      	adds	r0, r7, #4
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	0023      	movs	r3, r4
 8004b16:	f01b f9f7 	bl	801ff08 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fb fb25 	bl	800016c <strlen>
 8004b22:	0002      	movs	r2, r0
 8004b24:	1d7b      	adds	r3, r7, #5
 8004b26:	33ff      	adds	r3, #255	@ 0xff
 8004b28:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004b2a:	1d7b      	adds	r3, r7, #5
 8004b2c:	33ff      	adds	r3, #255	@ 0xff
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	0011      	movs	r1, r2
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7fe fffd 	bl	8003b34 <ESP_Send>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <HTTPCPOST+0x96>
    return true;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004b42:	2300      	movs	r3, #0
  }
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b043      	add	sp, #268	@ 0x10c
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	20000552 	.word	0x20000552
 8004b50:	080252b0 	.word	0x080252b0
 8004b54:	080237a8 	.word	0x080237a8
 8004b58:	20000b10 	.word	0x20000b10
 8004b5c:	08080000 	.word	0x08080000
 8004b60:	20000b1c 	.word	0x20000b1c
 8004b64:	080252ec 	.word	0x080252ec
 8004b68:	080237e0 	.word	0x080237e0

08004b6c <SENDDATA>:

bool SENDDATA(){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <SENDDATA+0x34>)
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7fb faf9 	bl	800016c <strlen>
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b80:	1dbb      	adds	r3, r7, #6
 8004b82:	881a      	ldrh	r2, [r3, #0]
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <SENDDATA+0x34>)
 8004b86:	0011      	movs	r1, r2
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fe ffd3 	bl	8003b34 <ESP_Send>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d001      	beq.n	8004b96 <SENDDATA+0x2a>
    return true;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b96:	2300      	movs	r3, #0
  }
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000590 	.word	0x20000590

08004ba4 <SLEEP>:

bool SLEEP(){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004baa:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <SLEEP+0x34>)
 8004bac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fb fadb 	bl	800016c <strlen>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0011      	movs	r1, r2
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7fe ffb8 	bl	8003b34 <ESP_Send>
 8004bc4:	1e03      	subs	r3, r0, #0
 8004bc6:	d001      	beq.n	8004bcc <SLEEP+0x28>
    return true;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <SLEEP+0x2a>
  }
  else{
    return false;
 8004bcc:	2300      	movs	r3, #0
  }
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	08023820 	.word	0x08023820

08004bdc <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004be2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c18 <CIPSNTPCFG+0x3c>)
 8004be4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7fb fabf 	bl	800016c <strlen>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0011      	movs	r1, r2
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fe ff9c 	bl	8003b34 <ESP_Send>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d006      	beq.n	8004c0e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004c00:	23fa      	movs	r3, #250	@ 0xfa
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f00a f875 	bl	800ecf4 <HAL_Delay>
    return true;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004c0e:	2300      	movs	r3, #0
  }
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	08023830 	.word	0x08023830

08004c1c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <CIPSNTPTIME+0x34>)
 8004c24:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fb fa9f 	bl	800016c <strlen>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0011      	movs	r1, r2
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7fe ff7c 	bl	8003b34 <ESP_Send>
 8004c3c:	1e03      	subs	r3, r0, #0
 8004c3e:	d001      	beq.n	8004c44 <CIPSNTPTIME+0x28>
    return true;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004c44:	2300      	movs	r3, #0
  }
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	08023880 	.word	0x08023880

08004c54 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <CIPSNTPINTV+0x34>)
 8004c5c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fb fa83 	bl	800016c <strlen>
 8004c66:	0003      	movs	r3, r0
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0011      	movs	r1, r2
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7fe ff60 	bl	8003b34 <ESP_Send>
 8004c74:	1e03      	subs	r3, r0, #0
 8004c76:	d001      	beq.n	8004c7c <CIPSNTPINTV+0x28>
    return true;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c7c:	2300      	movs	r3, #0
  }
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b002      	add	sp, #8
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	08023894 	.word	0x08023894

08004c8c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c8c:	b5b0      	push	{r4, r5, r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	0002      	movs	r2, r0
 8004c94:	1dfb      	adds	r3, r7, #7
 8004c96:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c98:	4b6c      	ldr	r3, [pc, #432]	@ (8004e4c <DMA_ProcessBuffer+0x1c0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	200e      	movs	r0, #14
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	2180      	movs	r1, #128	@ 0x80
 8004ca6:	0049      	lsls	r1, r1, #1
 8004ca8:	1a8a      	subs	r2, r1, r2
 8004caa:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004cac:	230d      	movs	r3, #13
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004cb4:	183b      	adds	r3, r7, r0
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d903      	bls.n	8004cc8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004cc0:	183b      	adds	r3, r7, r0
 8004cc2:	2280      	movs	r2, #128	@ 0x80
 8004cc4:	0052      	lsls	r2, r2, #1
 8004cc6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004cc8:	4b61      	ldr	r3, [pc, #388]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	001a      	movs	r2, r3
 8004cd0:	230e      	movs	r3, #14
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d131      	bne.n	8004d3e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004cda:	4b5e      	ldr	r3, [pc, #376]	@ (8004e54 <DMA_ProcessBuffer+0x1c8>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b14      	cmp	r3, #20
 8004ce0:	d91b      	bls.n	8004d1a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e54 <DMA_ProcessBuffer+0x1c8>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e58 <DMA_ProcessBuffer+0x1cc>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <DMA_ProcessBuffer+0x74>
 8004cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e5c <DMA_ProcessBuffer+0x1d0>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004cf8:	230d      	movs	r3, #13
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004d00:	4b55      	ldr	r3, [pc, #340]	@ (8004e58 <DMA_ProcessBuffer+0x1cc>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d103      	bne.n	8004d10 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004d08:	4b55      	ldr	r3, [pc, #340]	@ (8004e60 <DMA_ProcessBuffer+0x1d4>)
 8004d0a:	220b      	movs	r2, #11
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e016      	b.n	8004d3e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004d10:	230d      	movs	r3, #13
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2206      	movs	r2, #6
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e011      	b.n	8004d3e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e54 <DMA_ProcessBuffer+0x1c8>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4b4c      	ldr	r3, [pc, #304]	@ (8004e54 <DMA_ProcessBuffer+0x1c8>)
 8004d24:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004d26:	f009 ffdb 	bl	800ece0 <HAL_GetTick>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	33f5      	adds	r3, #245	@ 0xf5
 8004d2e:	33ff      	adds	r3, #255	@ 0xff
 8004d30:	001a      	movs	r2, r3
 8004d32:	4b4c      	ldr	r3, [pc, #304]	@ (8004e64 <DMA_ProcessBuffer+0x1d8>)
 8004d34:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004d36:	230d      	movs	r3, #13
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004d3e:	4b44      	ldr	r3, [pc, #272]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	001a      	movs	r2, r3
 8004d46:	210e      	movs	r1, #14
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <DMA_ProcessBuffer+0xc6>
 8004d50:	e075      	b.n	8004e3e <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004d52:	4b40      	ldr	r3, [pc, #256]	@ (8004e54 <DMA_ProcessBuffer+0x1c8>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004d58:	4b43      	ldr	r3, [pc, #268]	@ (8004e68 <DMA_ProcessBuffer+0x1dc>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d109      	bne.n	8004d7c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e68 <DMA_ProcessBuffer+0x1dc>)
 8004d70:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d72:	230d      	movs	r3, #13
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	220a      	movs	r2, #10
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e060      	b.n	8004e3e <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e68 <DMA_ProcessBuffer+0x1dc>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	001a      	movs	r2, r3
 8004d84:	210e      	movs	r1, #14
 8004d86:	187b      	adds	r3, r7, r1
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	4b34      	ldr	r3, [pc, #208]	@ (8004e68 <DMA_ProcessBuffer+0x1dc>)
 8004d96:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d98:	230d      	movs	r3, #13
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	220a      	movs	r2, #10
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e04d      	b.n	8004e3e <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004da2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	001a      	movs	r2, r3
 8004daa:	210e      	movs	r1, #14
 8004dac:	187b      	adds	r3, r7, r1
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d917      	bls.n	8004de4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004db4:	4b26      	ldr	r3, [pc, #152]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	001a      	movs	r2, r3
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <DMA_ProcessBuffer+0x1e0>)
 8004dbe:	18d0      	adds	r0, r2, r3
 8004dc0:	4b23      	ldr	r3, [pc, #140]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	b299      	uxth	r1, r3
 8004dd0:	230d      	movs	r3, #13
 8004dd2:	18fc      	adds	r4, r7, r3
 8004dd4:	1dfb      	adds	r3, r7, #7
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	001a      	movs	r2, r3
 8004dda:	f7ff fa89 	bl	80042f0 <ParseBuffer>
 8004dde:	0003      	movs	r3, r0
 8004de0:	7023      	strb	r3, [r4, #0]
 8004de2:	e026      	b.n	8004e32 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004de4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	001a      	movs	r2, r3
 8004dec:	4b1f      	ldr	r3, [pc, #124]	@ (8004e6c <DMA_ProcessBuffer+0x1e0>)
 8004dee:	18d0      	adds	r0, r2, r3
 8004df0:	4b17      	ldr	r3, [pc, #92]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	001a      	movs	r2, r3
 8004df8:	2380      	movs	r3, #128	@ 0x80
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	b299      	uxth	r1, r3
 8004e00:	250d      	movs	r5, #13
 8004e02:	197c      	adds	r4, r7, r5
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	001a      	movs	r2, r3
 8004e0a:	f7ff fa71 	bl	80042f0 <ParseBuffer>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004e12:	210e      	movs	r1, #14
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004e1c:	197c      	adds	r4, r7, r5
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	8819      	ldrh	r1, [r3, #0]
 8004e26:	4b11      	ldr	r3, [pc, #68]	@ (8004e6c <DMA_ProcessBuffer+0x1e0>)
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7ff fa61 	bl	80042f0 <ParseBuffer>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004e32:	230e      	movs	r3, #14
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <DMA_ProcessBuffer+0x1c4>)
 8004e3c:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004e3e:	230d      	movs	r3, #13
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	781b      	ldrb	r3, [r3, #0]
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b004      	add	sp, #16
 8004e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4c:	200022f4 	.word	0x200022f4
 8004e50:	20000b35 	.word	0x20000b35
 8004e54:	20000a24 	.word	0x20000a24
 8004e58:	20000a26 	.word	0x20000a26
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000030 	.word	0x20000030
 8004e64:	20000a20 	.word	0x20000a20
 8004e68:	20000b36 	.word	0x20000b36
 8004e6c:	2000044c 	.word	0x2000044c

08004e70 <clearDMABuffer>:

void clearDMABuffer(){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	005a      	lsls	r2, r3, #1
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <clearDMABuffer+0x18>)
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f01b f987 	bl	8020190 <memset>
}
 8004e82:	46c0      	nop			@ (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	2000044c 	.word	0x2000044c

08004e8c <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	0002      	movs	r2, r0
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	1dbb      	adds	r3, r7, #6
 8004e9a:	1c0a      	adds	r2, r1, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e9e:	210f      	movs	r1, #15
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	1dfa      	adds	r2, r7, #7
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	4251      	negs	r1, r2
 8004eb6:	414a      	adcs	r2, r1
 8004eb8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004eba:	1dbb      	adds	r3, r7, #6
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004ec2:	230f      	movs	r3, #15
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	1dfa      	adds	r2, r7, #7
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	3a02      	subs	r2, #2
 8004ecc:	4251      	negs	r1, r2
 8004ece:	414a      	adcs	r2, r1
 8004ed0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004ed2:	1dbb      	adds	r3, r7, #6
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d107      	bne.n	8004eea <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004eda:	230f      	movs	r3, #15
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	1dfa      	adds	r2, r7, #7
 8004ee0:	7812      	ldrb	r2, [r2, #0]
 8004ee2:	3a05      	subs	r2, #5
 8004ee4:	4251      	negs	r1, r2
 8004ee6:	414a      	adcs	r2, r1
 8004ee8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004eea:	1dbb      	adds	r3, r7, #6
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d107      	bne.n	8004f02 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004ef2:	230f      	movs	r3, #15
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	1dfa      	adds	r2, r7, #7
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	3a0b      	subs	r2, #11
 8004efc:	4251      	negs	r1, r2
 8004efe:	414a      	adcs	r2, r1
 8004f00:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004f02:	230f      	movs	r3, #15
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	781b      	ldrb	r3, [r3, #0]
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b004      	add	sp, #16
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	0002      	movs	r2, r0
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004f1c:	230f      	movs	r3, #15
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b14      	cmp	r3, #20
 8004f2a:	d900      	bls.n	8004f2e <AT_Send+0x1e>
 8004f2c:	e198      	b.n	8005260 <AT_Send+0x350>
 8004f2e:	009a      	lsls	r2, r3, #2
 8004f30:	4bcf      	ldr	r3, [pc, #828]	@ (8005270 <AT_Send+0x360>)
 8004f32:	18d3      	adds	r3, r2, r3
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004f38:	4bce      	ldr	r3, [pc, #824]	@ (8005274 <AT_Send+0x364>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f009 fa33 	bl	800e3a8 <TimestampIsReached>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d100      	bne.n	8004f48 <AT_Send+0x38>
 8004f46:	e18a      	b.n	800525e <AT_Send+0x34e>
//    Debug("AT_WAKEUP");
    ATCommandSend = PollAwake();
 8004f48:	230f      	movs	r3, #15
 8004f4a:	18fc      	adds	r4, r7, r3
 8004f4c:	f7ff fbc0 	bl	80046d0 <PollAwake>
 8004f50:	0003      	movs	r3, r0
 8004f52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f54:	f009 fec4 	bl	800ece0 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	3332      	adds	r3, #50	@ 0x32
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	4bc5      	ldr	r3, [pc, #788]	@ (8005274 <AT_Send+0x364>)
 8004f60:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f62:	e17c      	b.n	800525e <AT_Send+0x34e>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f64:	4ac4      	ldr	r2, [pc, #784]	@ (8005278 <AT_Send+0x368>)
 8004f66:	4bc5      	ldr	r3, [pc, #788]	@ (800527c <AT_Send+0x36c>)
 8004f68:	0019      	movs	r1, r3
 8004f6a:	2003      	movs	r0, #3
 8004f6c:	f009 fa72 	bl	800e454 <CreateLine>
    ATCommandSend = RFPower();
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fc      	adds	r4, r7, r3
 8004f74:	f7ff fbc8 	bl	8004708 <RFPower>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f7c:	f009 feb0 	bl	800ece0 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	330a      	adds	r3, #10
 8004f84:	001a      	movs	r2, r3
 8004f86:	4bbb      	ldr	r3, [pc, #748]	@ (8005274 <AT_Send+0x364>)
 8004f88:	601a      	str	r2, [r3, #0]
    break;
 8004f8a:	e169      	b.n	8005260 <AT_Send+0x350>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f8c:	4abc      	ldr	r2, [pc, #752]	@ (8005280 <AT_Send+0x370>)
 8004f8e:	4bbb      	ldr	r3, [pc, #748]	@ (800527c <AT_Send+0x36c>)
 8004f90:	0019      	movs	r1, r3
 8004f92:	2003      	movs	r0, #3
 8004f94:	f009 fa5e 	bl	800e454 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f98:	230f      	movs	r3, #15
 8004f9a:	18fc      	adds	r4, r7, r3
 8004f9c:	f7ff fbd0 	bl	8004740 <CheckRFPower>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fa4:	f009 fe9c 	bl	800ece0 <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	330a      	adds	r3, #10
 8004fac:	001a      	movs	r2, r3
 8004fae:	4bb1      	ldr	r3, [pc, #708]	@ (8005274 <AT_Send+0x364>)
 8004fb0:	601a      	str	r2, [r3, #0]
    break;
 8004fb2:	e155      	b.n	8005260 <AT_Send+0x350>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004fb4:	4ab3      	ldr	r2, [pc, #716]	@ (8005284 <AT_Send+0x374>)
 8004fb6:	4bb1      	ldr	r3, [pc, #708]	@ (800527c <AT_Send+0x36c>)
 8004fb8:	0019      	movs	r1, r3
 8004fba:	2003      	movs	r0, #3
 8004fbc:	f009 fa4a 	bl	800e454 <CreateLine>
    ATCommandSend = ATRestore();
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fc      	adds	r4, r7, r3
 8004fc4:	f7ff fbd8 	bl	8004778 <ATRestore>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004fcc:	f009 fe88 	bl	800ece0 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	3332      	adds	r3, #50	@ 0x32
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	4ba7      	ldr	r3, [pc, #668]	@ (8005274 <AT_Send+0x364>)
 8004fd8:	601a      	str	r2, [r3, #0]
    break;
 8004fda:	e141      	b.n	8005260 <AT_Send+0x350>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004fdc:	4aaa      	ldr	r2, [pc, #680]	@ (8005288 <AT_Send+0x378>)
 8004fde:	4ba7      	ldr	r3, [pc, #668]	@ (800527c <AT_Send+0x36c>)
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	f009 fa36 	bl	800e454 <CreateLine>
    ATCommandSend = CWINIT();
 8004fe8:	230f      	movs	r3, #15
 8004fea:	18fc      	adds	r4, r7, r3
 8004fec:	f7ff fbe0 	bl	80047b0 <CWINIT>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ff4:	f009 fe74 	bl	800ece0 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	33f5      	adds	r3, #245	@ 0xf5
 8004ffc:	33ff      	adds	r3, #255	@ 0xff
 8004ffe:	001a      	movs	r2, r3
 8005000:	4b9c      	ldr	r3, [pc, #624]	@ (8005274 <AT_Send+0x364>)
 8005002:	601a      	str	r2, [r3, #0]
    break;
 8005004:	e12c      	b.n	8005260 <AT_Send+0x350>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8005006:	4aa1      	ldr	r2, [pc, #644]	@ (800528c <AT_Send+0x37c>)
 8005008:	4b9c      	ldr	r3, [pc, #624]	@ (800527c <AT_Send+0x36c>)
 800500a:	0019      	movs	r1, r3
 800500c:	2003      	movs	r0, #3
 800500e:	f009 fa21 	bl	800e454 <CreateLine>
    ATCommandSend = CWSTATE();
 8005012:	230f      	movs	r3, #15
 8005014:	18fc      	adds	r4, r7, r3
 8005016:	f7ff fcd9 	bl	80049cc <CWSTATE>
 800501a:	0003      	movs	r3, r0
 800501c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800501e:	f009 fe5f 	bl	800ece0 <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	33f5      	adds	r3, #245	@ 0xf5
 8005026:	33ff      	adds	r3, #255	@ 0xff
 8005028:	001a      	movs	r2, r3
 800502a:	4b92      	ldr	r3, [pc, #584]	@ (8005274 <AT_Send+0x364>)
 800502c:	601a      	str	r2, [r3, #0]
    break;
 800502e:	e117      	b.n	8005260 <AT_Send+0x350>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8005030:	4a97      	ldr	r2, [pc, #604]	@ (8005290 <AT_Send+0x380>)
 8005032:	4b92      	ldr	r3, [pc, #584]	@ (800527c <AT_Send+0x36c>)
 8005034:	0019      	movs	r1, r3
 8005036:	2003      	movs	r0, #3
 8005038:	f009 fa0c 	bl	800e454 <CreateLine>
    ATCommandSend = CWMODE1();
 800503c:	230f      	movs	r3, #15
 800503e:	18fc      	adds	r4, r7, r3
 8005040:	f7ff fbd2 	bl	80047e8 <CWMODE1>
 8005044:	0003      	movs	r3, r0
 8005046:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005048:	f009 fe4a 	bl	800ece0 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	330a      	adds	r3, #10
 8005050:	001a      	movs	r2, r3
 8005052:	4b88      	ldr	r3, [pc, #544]	@ (8005274 <AT_Send+0x364>)
 8005054:	601a      	str	r2, [r3, #0]
    break;
 8005056:	e103      	b.n	8005260 <AT_Send+0x350>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005058:	4a8d      	ldr	r2, [pc, #564]	@ (8005290 <AT_Send+0x380>)
 800505a:	4b88      	ldr	r3, [pc, #544]	@ (800527c <AT_Send+0x36c>)
 800505c:	0019      	movs	r1, r3
 800505e:	2003      	movs	r0, #3
 8005060:	f009 f9f8 	bl	800e454 <CreateLine>
    ATCommandSend = CWMODE2();
 8005064:	230f      	movs	r3, #15
 8005066:	18fc      	adds	r4, r7, r3
 8005068:	f7ff fbda 	bl	8004820 <CWMODE2>
 800506c:	0003      	movs	r3, r0
 800506e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005070:	f009 fe36 	bl	800ece0 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	330a      	adds	r3, #10
 8005078:	001a      	movs	r2, r3
 800507a:	4b7e      	ldr	r3, [pc, #504]	@ (8005274 <AT_Send+0x364>)
 800507c:	601a      	str	r2, [r3, #0]
    break;
 800507e:	e0ef      	b.n	8005260 <AT_Send+0x350>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005080:	4a84      	ldr	r2, [pc, #528]	@ (8005294 <AT_Send+0x384>)
 8005082:	4b7e      	ldr	r3, [pc, #504]	@ (800527c <AT_Send+0x36c>)
 8005084:	0019      	movs	r1, r3
 8005086:	2003      	movs	r0, #3
 8005088:	f009 f9e4 	bl	800e454 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800508c:	230f      	movs	r3, #15
 800508e:	18fc      	adds	r4, r7, r3
 8005090:	f7ff fbe2 	bl	8004858 <CWAUTOCONN>
 8005094:	0003      	movs	r3, r0
 8005096:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005098:	f009 fe22 	bl	800ece0 <HAL_GetTick>
 800509c:	0003      	movs	r3, r0
 800509e:	330a      	adds	r3, #10
 80050a0:	001a      	movs	r2, r3
 80050a2:	4b74      	ldr	r3, [pc, #464]	@ (8005274 <AT_Send+0x364>)
 80050a4:	601a      	str	r2, [r3, #0]
    break;
 80050a6:	e0db      	b.n	8005260 <AT_Send+0x350>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80050a8:	4a7b      	ldr	r2, [pc, #492]	@ (8005298 <AT_Send+0x388>)
 80050aa:	4b74      	ldr	r3, [pc, #464]	@ (800527c <AT_Send+0x36c>)
 80050ac:	0019      	movs	r1, r3
 80050ae:	2003      	movs	r0, #3
 80050b0:	f009 f9d0 	bl	800e454 <CreateLine>
    ATCommandSend = CWJAP();
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fc      	adds	r4, r7, r3
 80050b8:	f7ff fbea 	bl	8004890 <CWJAP>
 80050bc:	0003      	movs	r3, r0
 80050be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80050c0:	f009 fe0e 	bl	800ece0 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	3332      	adds	r3, #50	@ 0x32
 80050c8:	001a      	movs	r2, r3
 80050ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005274 <AT_Send+0x364>)
 80050cc:	601a      	str	r2, [r3, #0]
    break;
 80050ce:	e0c7      	b.n	8005260 <AT_Send+0x350>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80050d0:	4a72      	ldr	r2, [pc, #456]	@ (800529c <AT_Send+0x38c>)
 80050d2:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <AT_Send+0x36c>)
 80050d4:	0019      	movs	r1, r3
 80050d6:	2003      	movs	r0, #3
 80050d8:	f009 f9bc 	bl	800e454 <CreateLine>
    ATCommandSend = CWMODE3();
 80050dc:	230f      	movs	r3, #15
 80050de:	18fc      	adds	r4, r7, r3
 80050e0:	f7ff fc58 	bl	8004994 <CWMODE3>
 80050e4:	0003      	movs	r3, r0
 80050e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050e8:	f009 fdfa 	bl	800ece0 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	330a      	adds	r3, #10
 80050f0:	001a      	movs	r2, r3
 80050f2:	4b60      	ldr	r3, [pc, #384]	@ (8005274 <AT_Send+0x364>)
 80050f4:	601a      	str	r2, [r3, #0]
    break;
 80050f6:	e0b3      	b.n	8005260 <AT_Send+0x350>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050f8:	4a69      	ldr	r2, [pc, #420]	@ (80052a0 <AT_Send+0x390>)
 80050fa:	4b60      	ldr	r3, [pc, #384]	@ (800527c <AT_Send+0x36c>)
 80050fc:	0019      	movs	r1, r3
 80050fe:	2003      	movs	r0, #3
 8005100:	f009 f9a8 	bl	800e454 <CreateLine>
    ATCommandSend = CWSAP();
 8005104:	230f      	movs	r3, #15
 8005106:	18fc      	adds	r4, r7, r3
 8005108:	f7ff fc7c 	bl	8004a04 <CWSAP>
 800510c:	0003      	movs	r3, r0
 800510e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005110:	f009 fde6 	bl	800ece0 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	330a      	adds	r3, #10
 8005118:	001a      	movs	r2, r3
 800511a:	4b56      	ldr	r3, [pc, #344]	@ (8005274 <AT_Send+0x364>)
 800511c:	601a      	str	r2, [r3, #0]
    break;
 800511e:	e09f      	b.n	8005260 <AT_Send+0x350>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8005120:	4a60      	ldr	r2, [pc, #384]	@ (80052a4 <AT_Send+0x394>)
 8005122:	4b56      	ldr	r3, [pc, #344]	@ (800527c <AT_Send+0x36c>)
 8005124:	0019      	movs	r1, r3
 8005126:	2003      	movs	r0, #3
 8005128:	f009 f994 	bl	800e454 <CreateLine>
    ATCommandSend = CIPMUX();
 800512c:	230f      	movs	r3, #15
 800512e:	18fc      	adds	r4, r7, r3
 8005130:	f7ff fc84 	bl	8004a3c <CIPMUX>
 8005134:	0003      	movs	r3, r0
 8005136:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005138:	f009 fdd2 	bl	800ece0 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	330a      	adds	r3, #10
 8005140:	001a      	movs	r2, r3
 8005142:	4b4c      	ldr	r3, [pc, #304]	@ (8005274 <AT_Send+0x364>)
 8005144:	601a      	str	r2, [r3, #0]
    break;
 8005146:	e08b      	b.n	8005260 <AT_Send+0x350>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8005148:	4a57      	ldr	r2, [pc, #348]	@ (80052a8 <AT_Send+0x398>)
 800514a:	4b4c      	ldr	r3, [pc, #304]	@ (800527c <AT_Send+0x36c>)
 800514c:	0019      	movs	r1, r3
 800514e:	2003      	movs	r0, #3
 8005150:	f009 f980 	bl	800e454 <CreateLine>
    ATCommandSend = WEBSERVER();
 8005154:	230f      	movs	r3, #15
 8005156:	18fc      	adds	r4, r7, r3
 8005158:	f7ff fc8c 	bl	8004a74 <WEBSERVER>
 800515c:	0003      	movs	r3, r0
 800515e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005160:	f009 fdbe 	bl	800ece0 <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	330a      	adds	r3, #10
 8005168:	001a      	movs	r2, r3
 800516a:	4b42      	ldr	r3, [pc, #264]	@ (8005274 <AT_Send+0x364>)
 800516c:	601a      	str	r2, [r3, #0]
    break;
 800516e:	e077      	b.n	8005260 <AT_Send+0x350>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005170:	230f      	movs	r3, #15
 8005172:	18fc      	adds	r4, r7, r3
 8005174:	f7ff fc9a 	bl	8004aac <HTTPCPOST>
 8005178:	0003      	movs	r3, r0
 800517a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800517c:	f009 fdb0 	bl	800ece0 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	33f5      	adds	r3, #245	@ 0xf5
 8005184:	33ff      	adds	r3, #255	@ 0xff
 8005186:	001a      	movs	r2, r3
 8005188:	4b3a      	ldr	r3, [pc, #232]	@ (8005274 <AT_Send+0x364>)
 800518a:	601a      	str	r2, [r3, #0]
    break;
 800518c:	e068      	b.n	8005260 <AT_Send+0x350>

  case AT_SENDDATA:
    Debug("Send the data");
 800518e:	4a47      	ldr	r2, [pc, #284]	@ (80052ac <AT_Send+0x39c>)
 8005190:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <AT_Send+0x36c>)
 8005192:	0019      	movs	r1, r3
 8005194:	2003      	movs	r0, #3
 8005196:	f009 f95d 	bl	800e454 <CreateLine>
    ATCommandSend = SENDDATA();
 800519a:	230f      	movs	r3, #15
 800519c:	18fc      	adds	r4, r7, r3
 800519e:	f7ff fce5 	bl	8004b6c <SENDDATA>
 80051a2:	0003      	movs	r3, r0
 80051a4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80051a6:	f009 fd9b 	bl	800ece0 <HAL_GetTick>
 80051aa:	0003      	movs	r3, r0
 80051ac:	33f5      	adds	r3, #245	@ 0xf5
 80051ae:	33ff      	adds	r3, #255	@ 0xff
 80051b0:	001a      	movs	r2, r3
 80051b2:	4b30      	ldr	r3, [pc, #192]	@ (8005274 <AT_Send+0x364>)
 80051b4:	601a      	str	r2, [r3, #0]
    break;
 80051b6:	e053      	b.n	8005260 <AT_Send+0x350>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80051b8:	4a3d      	ldr	r2, [pc, #244]	@ (80052b0 <AT_Send+0x3a0>)
 80051ba:	4b30      	ldr	r3, [pc, #192]	@ (800527c <AT_Send+0x36c>)
 80051bc:	0019      	movs	r1, r3
 80051be:	2003      	movs	r0, #3
 80051c0:	f009 f948 	bl	800e454 <CreateLine>
    ATCommandSend = SLEEP();
 80051c4:	230f      	movs	r3, #15
 80051c6:	18fc      	adds	r4, r7, r3
 80051c8:	f7ff fcec 	bl	8004ba4 <SLEEP>
 80051cc:	0003      	movs	r3, r0
 80051ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051d0:	f009 fd86 	bl	800ece0 <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	330a      	adds	r3, #10
 80051d8:	001a      	movs	r2, r3
 80051da:	4b26      	ldr	r3, [pc, #152]	@ (8005274 <AT_Send+0x364>)
 80051dc:	601a      	str	r2, [r3, #0]
    break;
 80051de:	e03f      	b.n	8005260 <AT_Send+0x350>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80051e0:	4a34      	ldr	r2, [pc, #208]	@ (80052b4 <AT_Send+0x3a4>)
 80051e2:	4b26      	ldr	r3, [pc, #152]	@ (800527c <AT_Send+0x36c>)
 80051e4:	0019      	movs	r1, r3
 80051e6:	2003      	movs	r0, #3
 80051e8:	f009 f934 	bl	800e454 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80051ec:	230f      	movs	r3, #15
 80051ee:	18fc      	adds	r4, r7, r3
 80051f0:	f7ff fcf4 	bl	8004bdc <CIPSNTPCFG>
 80051f4:	0003      	movs	r3, r0
 80051f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051f8:	f009 fd72 	bl	800ece0 <HAL_GetTick>
 80051fc:	0003      	movs	r3, r0
 80051fe:	330a      	adds	r3, #10
 8005200:	001a      	movs	r2, r3
 8005202:	4b1c      	ldr	r3, [pc, #112]	@ (8005274 <AT_Send+0x364>)
 8005204:	601a      	str	r2, [r3, #0]
    break;
 8005206:	e02b      	b.n	8005260 <AT_Send+0x350>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005208:	4a2b      	ldr	r2, [pc, #172]	@ (80052b8 <AT_Send+0x3a8>)
 800520a:	4b1c      	ldr	r3, [pc, #112]	@ (800527c <AT_Send+0x36c>)
 800520c:	0019      	movs	r1, r3
 800520e:	2003      	movs	r0, #3
 8005210:	f009 f920 	bl	800e454 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005214:	230f      	movs	r3, #15
 8005216:	18fc      	adds	r4, r7, r3
 8005218:	f7ff fd00 	bl	8004c1c <CIPSNTPTIME>
 800521c:	0003      	movs	r3, r0
 800521e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005220:	f009 fd5e 	bl	800ece0 <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	33f5      	adds	r3, #245	@ 0xf5
 8005228:	33ff      	adds	r3, #255	@ 0xff
 800522a:	001a      	movs	r2, r3
 800522c:	4b11      	ldr	r3, [pc, #68]	@ (8005274 <AT_Send+0x364>)
 800522e:	601a      	str	r2, [r3, #0]
    break;
 8005230:	e016      	b.n	8005260 <AT_Send+0x350>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8005232:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <AT_Send+0x3ac>)
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <AT_Send+0x36c>)
 8005236:	0019      	movs	r1, r3
 8005238:	2003      	movs	r0, #3
 800523a:	f009 f90b 	bl	800e454 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800523e:	230f      	movs	r3, #15
 8005240:	18fc      	adds	r4, r7, r3
 8005242:	f7ff fd07 	bl	8004c54 <CIPSNTPINTV>
 8005246:	0003      	movs	r3, r0
 8005248:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800524a:	f009 fd49 	bl	800ece0 <HAL_GetTick>
 800524e:	0003      	movs	r3, r0
 8005250:	330a      	adds	r3, #10
 8005252:	001a      	movs	r2, r3
 8005254:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <AT_Send+0x364>)
 8005256:	601a      	str	r2, [r3, #0]
    break;
 8005258:	e002      	b.n	8005260 <AT_Send+0x350>
  case AT_END:
    break;
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	e000      	b.n	8005260 <AT_Send+0x350>
  break;
 800525e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005260:	230f      	movs	r3, #15
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	781b      	ldrb	r3, [r3, #0]
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b005      	add	sp, #20
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	08025314 	.word	0x08025314
 8005274:	20000a20 	.word	0x20000a20
 8005278:	080238ac 	.word	0x080238ac
 800527c:	0802311c 	.word	0x0802311c
 8005280:	080238c0 	.word	0x080238c0
 8005284:	080238d4 	.word	0x080238d4
 8005288:	080238e4 	.word	0x080238e4
 800528c:	080238f8 	.word	0x080238f8
 8005290:	08023910 	.word	0x08023910
 8005294:	08023928 	.word	0x08023928
 8005298:	08023940 	.word	0x08023940
 800529c:	08023954 	.word	0x08023954
 80052a0:	08023970 	.word	0x08023970
 80052a4:	0802398c 	.word	0x0802398c
 80052a8:	080239a8 	.word	0x080239a8
 80052ac:	080239c4 	.word	0x080239c4
 80052b0:	080239d4 	.word	0x080239d4
 80052b4:	080239f8 	.word	0x080239f8
 80052b8:	08023a0c 	.word	0x08023a0c
 80052bc:	08023a24 	.word	0x08023a24

080052c0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80052c6:	1dfb      	adds	r3, r7, #7
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80052cc:	4b80      	ldr	r3, [pc, #512]	@ (80054d0 <ESP_WakeTest+0x210>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d900      	bls.n	80052d6 <ESP_WakeTest+0x16>
 80052d4:	e0df      	b.n	8005496 <ESP_WakeTest+0x1d6>
 80052d6:	009a      	lsls	r2, r3, #2
 80052d8:	4b7e      	ldr	r3, [pc, #504]	@ (80054d4 <ESP_WakeTest+0x214>)
 80052da:	18d3      	adds	r3, r2, r3
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 80052e0:	4b7d      	ldr	r3, [pc, #500]	@ (80054d8 <ESP_WakeTest+0x218>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4053      	eors	r3, r2
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d036      	beq.n	800535c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	487a      	ldr	r0, [pc, #488]	@ (80054dc <ESP_WakeTest+0x21c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	0019      	movs	r1, r3
 80052f8:	f00a ff83 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052fc:	2032      	movs	r0, #50	@ 0x32
 80052fe:	f009 fcf9 	bl	800ecf4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	4875      	ldr	r0, [pc, #468]	@ (80054dc <ESP_WakeTest+0x21c>)
 8005308:	2201      	movs	r2, #1
 800530a:	0019      	movs	r1, r3
 800530c:	f00a ff79 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005310:	200a      	movs	r0, #10
 8005312:	f009 fcef 	bl	800ecf4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005316:	4b72      	ldr	r3, [pc, #456]	@ (80054e0 <ESP_WakeTest+0x220>)
 8005318:	2200      	movs	r2, #0
 800531a:	2101      	movs	r1, #1
 800531c:	0018      	movs	r0, r3
 800531e:	f00a ff70 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005322:	200a      	movs	r0, #10
 8005324:	f009 fce6 	bl	800ecf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005328:	4b6d      	ldr	r3, [pc, #436]	@ (80054e0 <ESP_WakeTest+0x220>)
 800532a:	2201      	movs	r2, #1
 800532c:	2102      	movs	r1, #2
 800532e:	0018      	movs	r0, r3
 8005330:	f00a ff67 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005334:	200a      	movs	r0, #10
 8005336:	f009 fcdd 	bl	800ecf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800533a:	4b69      	ldr	r3, [pc, #420]	@ (80054e0 <ESP_WakeTest+0x220>)
 800533c:	2201      	movs	r2, #1
 800533e:	2101      	movs	r1, #1
 8005340:	0018      	movs	r0, r3
 8005342:	f00a ff5e 	bl	8010202 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005346:	f009 fccb 	bl	800ece0 <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	22af      	movs	r2, #175	@ 0xaf
 800534e:	0092      	lsls	r2, r2, #2
 8005350:	189a      	adds	r2, r3, r2
 8005352:	4b64      	ldr	r3, [pc, #400]	@ (80054e4 <ESP_WakeTest+0x224>)
 8005354:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005356:	4b60      	ldr	r3, [pc, #384]	@ (80054d8 <ESP_WakeTest+0x218>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	005a      	lsls	r2, r3, #1
 8005360:	4b61      	ldr	r3, [pc, #388]	@ (80054e8 <ESP_WakeTest+0x228>)
 8005362:	0011      	movs	r1, r2
 8005364:	0018      	movs	r0, r3
 8005366:	f7fe fc19 	bl	8003b9c <ESP_Receive>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d100      	bne.n	8005370 <ESP_WakeTest+0xb0>
 800536e:	e0a5      	b.n	80054bc <ESP_WakeTest+0x1fc>
        TestState = ESP_TEST_SEND;
 8005370:	4b57      	ldr	r3, [pc, #348]	@ (80054d0 <ESP_WakeTest+0x210>)
 8005372:	2201      	movs	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005376:	e0a1      	b.n	80054bc <ESP_WakeTest+0x1fc>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 8005378:	4b5a      	ldr	r3, [pc, #360]	@ (80054e4 <ESP_WakeTest+0x224>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	0018      	movs	r0, r3
 800537e:	f009 f813 	bl	800e3a8 <TimestampIsReached>
 8005382:	1e03      	subs	r3, r0, #0
 8005384:	d100      	bne.n	8005388 <ESP_WakeTest+0xc8>
 8005386:	e09b      	b.n	80054c0 <ESP_WakeTest+0x200>
        ATSend = AT_Send(ATCommand);
 8005388:	4b58      	ldr	r3, [pc, #352]	@ (80054ec <ESP_WakeTest+0x22c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	1dfc      	adds	r4, r7, #7
 800538e:	0018      	movs	r0, r3
 8005390:	f7ff fdbe 	bl	8004f10 <AT_Send>
 8005394:	0003      	movs	r3, r0
 8005396:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005398:	1dfb      	adds	r3, r7, #7
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d100      	bne.n	80053a2 <ESP_WakeTest+0xe2>
 80053a0:	e08e      	b.n	80054c0 <ESP_WakeTest+0x200>
          TestState = ESP_TEST_RECEIVE;
 80053a2:	4b4b      	ldr	r3, [pc, #300]	@ (80054d0 <ESP_WakeTest+0x210>)
 80053a4:	2202      	movs	r2, #2
 80053a6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053a8:	e08a      	b.n	80054c0 <ESP_WakeTest+0x200>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 80053aa:	4b4e      	ldr	r3, [pc, #312]	@ (80054e4 <ESP_WakeTest+0x224>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f008 fffa 	bl	800e3a8 <TimestampIsReached>
 80053b4:	1e03      	subs	r3, r0, #0
 80053b6:	d100      	bne.n	80053ba <ESP_WakeTest+0xfa>
 80053b8:	e084      	b.n	80054c4 <ESP_WakeTest+0x204>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80053ba:	4b4d      	ldr	r3, [pc, #308]	@ (80054f0 <ESP_WakeTest+0x230>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	0018      	movs	r0, r3
 80053c0:	f7ff fc64 	bl	8004c8c <DMA_ProcessBuffer>
 80053c4:	0003      	movs	r3, r0
 80053c6:	001a      	movs	r2, r3
 80053c8:	4b4a      	ldr	r3, [pc, #296]	@ (80054f4 <ESP_WakeTest+0x234>)
 80053ca:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80053cc:	4b49      	ldr	r3, [pc, #292]	@ (80054f4 <ESP_WakeTest+0x234>)
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	4b47      	ldr	r3, [pc, #284]	@ (80054f0 <ESP_WakeTest+0x230>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	1dbc      	adds	r4, r7, #6
 80053d6:	0019      	movs	r1, r3
 80053d8:	0010      	movs	r0, r2
 80053da:	f7ff fd57 	bl	8004e8c <ATCompare>
 80053de:	0003      	movs	r3, r0
 80053e0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80053e2:	4b44      	ldr	r3, [pc, #272]	@ (80054f4 <ESP_WakeTest+0x234>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d102      	bne.n	80053f0 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80053ea:	4b39      	ldr	r3, [pc, #228]	@ (80054d0 <ESP_WakeTest+0x210>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053f0:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <ESP_WakeTest+0x234>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b07      	cmp	r3, #7
 80053f6:	d104      	bne.n	8005402 <ESP_WakeTest+0x142>
          StartProg();
 80053f8:	f7fe ff48 	bl	800428c <StartProg>
          TestState = ESP_TEST_BOOT;
 80053fc:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <ESP_WakeTest+0x210>)
 80053fe:	2205      	movs	r2, #5
 8005400:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005402:	4b3c      	ldr	r3, [pc, #240]	@ (80054f4 <ESP_WakeTest+0x234>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d109      	bne.n	800541e <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800540a:	f009 fc69 	bl	800ece0 <HAL_GetTick>
 800540e:	0003      	movs	r3, r0
 8005410:	3332      	adds	r3, #50	@ 0x32
 8005412:	001a      	movs	r2, r3
 8005414:	4b33      	ldr	r3, [pc, #204]	@ (80054e4 <ESP_WakeTest+0x224>)
 8005416:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005418:	4b2d      	ldr	r3, [pc, #180]	@ (80054d0 <ESP_WakeTest+0x210>)
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800541e:	1dbb      	adds	r3, r7, #6
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d04e      	beq.n	80054c4 <ESP_WakeTest+0x204>
          TestState = ESP_TEST_VALIDATE;
 8005426:	4b2a      	ldr	r3, [pc, #168]	@ (80054d0 <ESP_WakeTest+0x210>)
 8005428:	2203      	movs	r2, #3
 800542a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800542c:	e04a      	b.n	80054c4 <ESP_WakeTest+0x204>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800542e:	4b32      	ldr	r3, [pc, #200]	@ (80054f8 <ESP_WakeTest+0x238>)
 8005430:	22fa      	movs	r2, #250	@ 0xfa
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8005436:	f007 fe93 	bl	800d160 <Calculate_LED_ON>
 800543a:	0003      	movs	r3, r0
 800543c:	001a      	movs	r2, r3
 800543e:	4b2e      	ldr	r3, [pc, #184]	@ (80054f8 <ESP_WakeTest+0x238>)
 8005440:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005442:	4b2d      	ldr	r3, [pc, #180]	@ (80054f8 <ESP_WakeTest+0x238>)
 8005444:	22fa      	movs	r2, #250	@ 0xfa
 8005446:	0112      	lsls	r2, r2, #4
 8005448:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800544a:	4b21      	ldr	r3, [pc, #132]	@ (80054d0 <ESP_WakeTest+0x210>)
 800544c:	2204      	movs	r2, #4
 800544e:	701a      	strb	r2, [r3, #0]

      break;
 8005450:	e039      	b.n	80054c6 <ESP_WakeTest+0x206>

    case ESP_TEST_DEINIT:
      Debug("TestState: ESP_TEST_DEINIT");
 8005452:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <ESP_WakeTest+0x23c>)
 8005454:	4b2a      	ldr	r3, [pc, #168]	@ (8005500 <ESP_WakeTest+0x240>)
 8005456:	0019      	movs	r1, r3
 8005458:	2003      	movs	r0, #3
 800545a:	f008 fffb 	bl	800e454 <CreateLine>
      testRound = false;
 800545e:	4b29      	ldr	r3, [pc, #164]	@ (8005504 <ESP_WakeTest+0x244>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005464:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <ESP_WakeTest+0x218>)
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800546a:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <ESP_WakeTest+0x220>)
 800546c:	2200      	movs	r2, #0
 800546e:	2101      	movs	r1, #1
 8005470:	0018      	movs	r0, r3
 8005472:	f00a fec6 	bl	8010202 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4818      	ldr	r0, [pc, #96]	@ (80054dc <ESP_WakeTest+0x21c>)
 800547c:	2200      	movs	r2, #0
 800547e:	0019      	movs	r1, r3
 8005480:	f00a febf 	bl	8010202 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005484:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <ESP_WakeTest+0x220>)
 8005486:	2200      	movs	r2, #0
 8005488:	2102      	movs	r1, #2
 800548a:	0018      	movs	r0, r3
 800548c:	f00a feb9 	bl	8010202 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005490:	f002 ffdc 	bl	800844c <SetESPMeasurementDone>
      break;
 8005494:	e017      	b.n	80054c6 <ESP_WakeTest+0x206>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 8005496:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <ESP_WakeTest+0x210>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
      break;
 800549c:	e013      	b.n	80054c6 <ESP_WakeTest+0x206>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 800549e:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <ESP_WakeTest+0x238>)
 80054a0:	22fa      	movs	r2, #250	@ 0xfa
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80054a6:	4b14      	ldr	r3, [pc, #80]	@ (80054f8 <ESP_WakeTest+0x238>)
 80054a8:	22fa      	movs	r2, #250	@ 0xfa
 80054aa:	0112      	lsls	r2, r2, #4
 80054ac:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 80054ae:	f007 fe57 	bl	800d160 <Calculate_LED_ON>
 80054b2:	0003      	movs	r3, r0
 80054b4:	001a      	movs	r2, r3
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <ESP_WakeTest+0x238>)
 80054b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80054ba:	e004      	b.n	80054c6 <ESP_WakeTest+0x206>
      break;
 80054bc:	46c0      	nop			@ (mov r8, r8)
 80054be:	e002      	b.n	80054c6 <ESP_WakeTest+0x206>
      break;
 80054c0:	46c0      	nop			@ (mov r8, r8)
 80054c2:	e000      	b.n	80054c6 <ESP_WakeTest+0x206>
      break;
 80054c4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b003      	add	sp, #12
 80054cc:	bd90      	pop	{r4, r7, pc}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	20000a28 	.word	0x20000a28
 80054d4:	08025368 	.word	0x08025368
 80054d8:	2000054c 	.word	0x2000054c
 80054dc:	50000800 	.word	0x50000800
 80054e0:	50001c00 	.word	0x50001c00
 80054e4:	20000a20 	.word	0x20000a20
 80054e8:	2000044c 	.word	0x2000044c
 80054ec:	20000a26 	.word	0x20000a26
 80054f0:	20000a25 	.word	0x20000a25
 80054f4:	20000031 	.word	0x20000031
 80054f8:	40000400 	.word	0x40000400
 80054fc:	08023a44 	.word	0x08023a44
 8005500:	0802311c 	.word	0x0802311c
 8005504:	20000000 	.word	0x20000000

08005508 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005508:	b5b0      	push	{r4, r5, r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800550e:	1dfb      	adds	r3, r7, #7
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8005514:	4be2      	ldr	r3, [pc, #904]	@ (80058a0 <ESP_Upkeep+0x398>)
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	4be2      	ldr	r3, [pc, #904]	@ (80058a4 <ESP_Upkeep+0x39c>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d024      	beq.n	800556a <ESP_Upkeep+0x62>
 8005520:	f009 f812 	bl	800e548 <GetVerboseLevel>
 8005524:	0003      	movs	r3, r0
 8005526:	2b03      	cmp	r3, #3
 8005528:	d11f      	bne.n	800556a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 800552a:	4bdd      	ldr	r3, [pc, #884]	@ (80058a0 <ESP_Upkeep+0x398>)
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	4bdd      	ldr	r3, [pc, #884]	@ (80058a4 <ESP_Upkeep+0x39c>)
 8005530:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005532:	4bdc      	ldr	r3, [pc, #880]	@ (80058a4 <ESP_Upkeep+0x39c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d103      	bne.n	8005542 <ESP_Upkeep+0x3a>
 800553a:	4bdb      	ldr	r3, [pc, #876]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b0e      	cmp	r3, #14
 8005540:	d013      	beq.n	800556a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005542:	4bd8      	ldr	r3, [pc, #864]	@ (80058a4 <ESP_Upkeep+0x39c>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	001d      	movs	r5, r3
 8005548:	4bd7      	ldr	r3, [pc, #860]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	0018      	movs	r0, r3
 800554e:	4bd7      	ldr	r3, [pc, #860]	@ (80058ac <ESP_Upkeep+0x3a4>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	001c      	movs	r4, r3
 8005554:	4bd6      	ldr	r3, [pc, #856]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	4ad6      	ldr	r2, [pc, #856]	@ (80058b4 <ESP_Upkeep+0x3ac>)
 800555a:	49d7      	ldr	r1, [pc, #860]	@ (80058b8 <ESP_Upkeep+0x3b0>)
 800555c:	9302      	str	r3, [sp, #8]
 800555e:	9401      	str	r4, [sp, #4]
 8005560:	9000      	str	r0, [sp, #0]
 8005562:	002b      	movs	r3, r5
 8005564:	2003      	movs	r0, #3
 8005566:	f008 ff75 	bl	800e454 <CreateLine>
    }
  }
  switch (EspState) {
 800556a:	4bcd      	ldr	r3, [pc, #820]	@ (80058a0 <ESP_Upkeep+0x398>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b0f      	cmp	r3, #15
 8005570:	d901      	bls.n	8005576 <ESP_Upkeep+0x6e>
 8005572:	f000 fc1d 	bl	8005db0 <ESP_Upkeep+0x8a8>
 8005576:	009a      	lsls	r2, r3, #2
 8005578:	4bd0      	ldr	r3, [pc, #832]	@ (80058bc <ESP_Upkeep+0x3b4>)
 800557a:	18d3      	adds	r3, r2, r3
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005580:	4bc7      	ldr	r3, [pc, #796]	@ (80058a0 <ESP_Upkeep+0x398>)
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
      break;
 8005586:	f000 fc2c 	bl	8005de2 <ESP_Upkeep+0x8da>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      DisableConnectedDevices();
 800558a:	f003 f9bf 	bl	800890c <DisableConnectedDevices>
      SetESPIndicator();
 800558e:	f007 ff7d 	bl	800d48c <SetESPIndicator>
      if(!EspTurnedOn){
 8005592:	4bcb      	ldr	r3, [pc, #812]	@ (80058c0 <ESP_Upkeep+0x3b8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	4053      	eors	r3, r2
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d036      	beq.n	800560e <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	48c7      	ldr	r0, [pc, #796]	@ (80058c4 <ESP_Upkeep+0x3bc>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	0019      	movs	r1, r3
 80055aa:	f00a fe2a 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80055ae:	2001      	movs	r0, #1
 80055b0:	f009 fba0 	bl	800ecf4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80055b4:	2380      	movs	r3, #128	@ 0x80
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	48c2      	ldr	r0, [pc, #776]	@ (80058c4 <ESP_Upkeep+0x3bc>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	0019      	movs	r1, r3
 80055be:	f00a fe20 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80055c2:	2001      	movs	r0, #1
 80055c4:	f009 fb96 	bl	800ecf4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055c8:	4bbf      	ldr	r3, [pc, #764]	@ (80058c8 <ESP_Upkeep+0x3c0>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	2101      	movs	r1, #1
 80055ce:	0018      	movs	r0, r3
 80055d0:	f00a fe17 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80055d4:	2001      	movs	r0, #1
 80055d6:	f009 fb8d 	bl	800ecf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80055da:	4bbb      	ldr	r3, [pc, #748]	@ (80058c8 <ESP_Upkeep+0x3c0>)
 80055dc:	2201      	movs	r2, #1
 80055de:	2102      	movs	r1, #2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f00a fe0e 	bl	8010202 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80055e6:	2001      	movs	r0, #1
 80055e8:	f009 fb84 	bl	800ecf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80055ec:	4bb6      	ldr	r3, [pc, #728]	@ (80058c8 <ESP_Upkeep+0x3c0>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	2101      	movs	r1, #1
 80055f2:	0018      	movs	r0, r3
 80055f4:	f00a fe05 	bl	8010202 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055f8:	f009 fb72 	bl	800ece0 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	22af      	movs	r2, #175	@ 0xaf
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	189a      	adds	r2, r3, r2
 8005604:	4bb1      	ldr	r3, [pc, #708]	@ (80058cc <ESP_Upkeep+0x3c4>)
 8005606:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005608:	4bad      	ldr	r3, [pc, #692]	@ (80058c0 <ESP_Upkeep+0x3b8>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	005a      	lsls	r2, r3, #1
 8005612:	4baf      	ldr	r3, [pc, #700]	@ (80058d0 <ESP_Upkeep+0x3c8>)
 8005614:	0011      	movs	r1, r2
 8005616:	0018      	movs	r0, r3
 8005618:	f7fe fac0 	bl	8003b9c <ESP_Receive>
 800561c:	1e03      	subs	r3, r0, #0
 800561e:	d101      	bne.n	8005624 <ESP_Upkeep+0x11c>
 8005620:	f000 fbd2 	bl	8005dc8 <ESP_Upkeep+0x8c0>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005624:	4b9e      	ldr	r3, [pc, #632]	@ (80058a0 <ESP_Upkeep+0x398>)
 8005626:	220f      	movs	r2, #15
 8005628:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800562a:	f009 fb59 	bl	800ece0 <HAL_GetTick>
 800562e:	0003      	movs	r3, r0
 8005630:	22fa      	movs	r2, #250	@ 0xfa
 8005632:	00d2      	lsls	r2, r2, #3
 8005634:	189a      	adds	r2, r3, r2
 8005636:	4ba7      	ldr	r3, [pc, #668]	@ (80058d4 <ESP_Upkeep+0x3cc>)
 8005638:	601a      	str	r2, [r3, #0]
      }
      break;
 800563a:	f000 fbc5 	bl	8005dc8 <ESP_Upkeep+0x8c0>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800563e:	2001      	movs	r0, #1
 8005640:	f7ff fb24 	bl	8004c8c <DMA_ProcessBuffer>
 8005644:	0003      	movs	r3, r0
 8005646:	001a      	movs	r2, r3
 8005648:	4ba3      	ldr	r3, [pc, #652]	@ (80058d8 <ESP_Upkeep+0x3d0>)
 800564a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800564c:	4ba2      	ldr	r3, [pc, #648]	@ (80058d8 <ESP_Upkeep+0x3d0>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	1dbc      	adds	r4, r7, #6
 8005652:	2101      	movs	r1, #1
 8005654:	0018      	movs	r0, r3
 8005656:	f7ff fc19 	bl	8004e8c <ATCompare>
 800565a:	0003      	movs	r3, r0
 800565c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800565e:	1dbb      	adds	r3, r7, #6
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <ESP_Upkeep+0x170>
 8005666:	4b9b      	ldr	r3, [pc, #620]	@ (80058d4 <ESP_Upkeep+0x3cc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	0018      	movs	r0, r3
 800566c:	f008 fe9c 	bl	800e3a8 <TimestampIsReached>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d101      	bne.n	8005678 <ESP_Upkeep+0x170>
 8005674:	f000 fbaa 	bl	8005dcc <ESP_Upkeep+0x8c4>
          EspState = ESP_STATE_MODE_SELECT;
 8005678:	4b89      	ldr	r3, [pc, #548]	@ (80058a0 <ESP_Upkeep+0x398>)
 800567a:	220b      	movs	r2, #11
 800567c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800567e:	f000 fba5 	bl	8005dcc <ESP_Upkeep+0x8c4>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005682:	4b96      	ldr	r3, [pc, #600]	@ (80058dc <ESP_Upkeep+0x3d4>)
 8005684:	2209      	movs	r2, #9
 8005686:	2114      	movs	r1, #20
 8005688:	0018      	movs	r0, r3
 800568a:	f01a fd81 	bl	8020190 <memset>
      if(!InitIsDone || WifiReset){
 800568e:	4b94      	ldr	r3, [pc, #592]	@ (80058e0 <ESP_Upkeep+0x3d8>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2201      	movs	r2, #1
 8005694:	4053      	eors	r3, r2
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d103      	bne.n	80056a4 <ESP_Upkeep+0x19c>
 800569c:	4b91      	ldr	r3, [pc, #580]	@ (80058e4 <ESP_Upkeep+0x3dc>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01a      	beq.n	80056da <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 80056a4:	4b8d      	ldr	r3, [pc, #564]	@ (80058dc <ESP_Upkeep+0x3d4>)
 80056a6:	4a90      	ldr	r2, [pc, #576]	@ (80058e8 <ESP_Upkeep+0x3e0>)
 80056a8:	6811      	ldr	r1, [r2, #0]
 80056aa:	6019      	str	r1, [r3, #0]
 80056ac:	8891      	ldrh	r1, [r2, #4]
 80056ae:	8099      	strh	r1, [r3, #4]
 80056b0:	7992      	ldrb	r2, [r2, #6]
 80056b2:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80056b4:	4b7a      	ldr	r3, [pc, #488]	@ (80058a0 <ESP_Upkeep+0x398>)
 80056b6:	2204      	movs	r2, #4
 80056b8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056ba:	4b8c      	ldr	r3, [pc, #560]	@ (80058ec <ESP_Upkeep+0x3e4>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80056c0:	4b7a      	ldr	r3, [pc, #488]	@ (80058ac <ESP_Upkeep+0x3a4>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056c6:	4b89      	ldr	r3, [pc, #548]	@ (80058ec <ESP_Upkeep+0x3e4>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	001a      	movs	r2, r3
 80056cc:	4b83      	ldr	r3, [pc, #524]	@ (80058dc <ESP_Upkeep+0x3d4>)
 80056ce:	5c9a      	ldrb	r2, [r3, r2]
 80056d0:	4b75      	ldr	r3, [pc, #468]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 80056d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056d4:	4b76      	ldr	r3, [pc, #472]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80056da:	4b81      	ldr	r3, [pc, #516]	@ (80058e0 <ESP_Upkeep+0x3d8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01f      	beq.n	8005722 <ESP_Upkeep+0x21a>
 80056e2:	4b83      	ldr	r3, [pc, #524]	@ (80058f0 <ESP_Upkeep+0x3e8>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4053      	eors	r3, r2
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d018      	beq.n	8005722 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80056f0:	4b7a      	ldr	r3, [pc, #488]	@ (80058dc <ESP_Upkeep+0x3d4>)
 80056f2:	4a80      	ldr	r2, [pc, #512]	@ (80058f4 <ESP_Upkeep+0x3ec>)
 80056f4:	6811      	ldr	r1, [r2, #0]
 80056f6:	6019      	str	r1, [r3, #0]
 80056f8:	8892      	ldrh	r2, [r2, #4]
 80056fa:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80056fc:	4b68      	ldr	r3, [pc, #416]	@ (80058a0 <ESP_Upkeep+0x398>)
 80056fe:	2204      	movs	r2, #4
 8005700:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005702:	4b7a      	ldr	r3, [pc, #488]	@ (80058ec <ESP_Upkeep+0x3e4>)
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005708:	4b68      	ldr	r3, [pc, #416]	@ (80058ac <ESP_Upkeep+0x3a4>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800570e:	4b77      	ldr	r3, [pc, #476]	@ (80058ec <ESP_Upkeep+0x3e4>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	001a      	movs	r2, r3
 8005714:	4b71      	ldr	r3, [pc, #452]	@ (80058dc <ESP_Upkeep+0x3d4>)
 8005716:	5c9a      	ldrb	r2, [r3, r2]
 8005718:	4b63      	ldr	r3, [pc, #396]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 800571a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800571c:	4b64      	ldr	r3, [pc, #400]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005722:	4b6f      	ldr	r3, [pc, #444]	@ (80058e0 <ESP_Upkeep+0x3d8>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d021      	beq.n	800576e <ESP_Upkeep+0x266>
 800572a:	4b71      	ldr	r3, [pc, #452]	@ (80058f0 <ESP_Upkeep+0x3e8>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01d      	beq.n	800576e <ESP_Upkeep+0x266>
 8005732:	4b71      	ldr	r3, [pc, #452]	@ (80058f8 <ESP_Upkeep+0x3f0>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2201      	movs	r2, #1
 8005738:	4053      	eors	r3, r2
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005740:	4b6e      	ldr	r3, [pc, #440]	@ (80058fc <ESP_Upkeep+0x3f4>)
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	4b65      	ldr	r3, [pc, #404]	@ (80058dc <ESP_Upkeep+0x3d4>)
 8005746:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005748:	4b55      	ldr	r3, [pc, #340]	@ (80058a0 <ESP_Upkeep+0x398>)
 800574a:	2204      	movs	r2, #4
 800574c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800574e:	4b67      	ldr	r3, [pc, #412]	@ (80058ec <ESP_Upkeep+0x3e4>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005754:	4b55      	ldr	r3, [pc, #340]	@ (80058ac <ESP_Upkeep+0x3a4>)
 8005756:	2204      	movs	r2, #4
 8005758:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800575a:	4b64      	ldr	r3, [pc, #400]	@ (80058ec <ESP_Upkeep+0x3e4>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	001a      	movs	r2, r3
 8005760:	4b5e      	ldr	r3, [pc, #376]	@ (80058dc <ESP_Upkeep+0x3d4>)
 8005762:	5c9a      	ldrb	r2, [r3, r2]
 8005764:	4b50      	ldr	r3, [pc, #320]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 8005766:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005768:	4b51      	ldr	r3, [pc, #324]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800576e:	4b5c      	ldr	r3, [pc, #368]	@ (80058e0 <ESP_Upkeep+0x3d8>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02c      	beq.n	80057d0 <ESP_Upkeep+0x2c8>
 8005776:	4b5e      	ldr	r3, [pc, #376]	@ (80058f0 <ESP_Upkeep+0x3e8>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d028      	beq.n	80057d0 <ESP_Upkeep+0x2c8>
 800577e:	4b5e      	ldr	r3, [pc, #376]	@ (80058f8 <ESP_Upkeep+0x3f0>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d024      	beq.n	80057d0 <ESP_Upkeep+0x2c8>
 8005786:	4b5e      	ldr	r3, [pc, #376]	@ (8005900 <ESP_Upkeep+0x3f8>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2201      	movs	r2, #1
 800578c:	4053      	eors	r3, r2
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01d      	beq.n	80057d0 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005794:	4b51      	ldr	r3, [pc, #324]	@ (80058dc <ESP_Upkeep+0x3d4>)
 8005796:	4a5b      	ldr	r2, [pc, #364]	@ (8005904 <ESP_Upkeep+0x3fc>)
 8005798:	8811      	ldrh	r1, [r2, #0]
 800579a:	8019      	strh	r1, [r3, #0]
 800579c:	7892      	ldrb	r2, [r2, #2]
 800579e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80057a0:	4b3f      	ldr	r3, [pc, #252]	@ (80058a0 <ESP_Upkeep+0x398>)
 80057a2:	2204      	movs	r2, #4
 80057a4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057a6:	4b51      	ldr	r3, [pc, #324]	@ (80058ec <ESP_Upkeep+0x3e4>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80057ac:	4b3f      	ldr	r3, [pc, #252]	@ (80058ac <ESP_Upkeep+0x3a4>)
 80057ae:	2202      	movs	r2, #2
 80057b0:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80057b2:	f009 fa95 	bl	800ece0 <HAL_GetTick>
 80057b6:	0002      	movs	r2, r0
 80057b8:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <ESP_Upkeep+0x400>)
 80057ba:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057bc:	4b4b      	ldr	r3, [pc, #300]	@ (80058ec <ESP_Upkeep+0x3e4>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	001a      	movs	r2, r3
 80057c2:	4b46      	ldr	r3, [pc, #280]	@ (80058dc <ESP_Upkeep+0x3d4>)
 80057c4:	5c9a      	ldrb	r2, [r3, r2]
 80057c6:	4b38      	ldr	r3, [pc, #224]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 80057c8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057ca:	4b39      	ldr	r3, [pc, #228]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80057d0:	4b43      	ldr	r3, [pc, #268]	@ (80058e0 <ESP_Upkeep+0x3d8>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d027      	beq.n	8005828 <ESP_Upkeep+0x320>
 80057d8:	4b45      	ldr	r3, [pc, #276]	@ (80058f0 <ESP_Upkeep+0x3e8>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d023      	beq.n	8005828 <ESP_Upkeep+0x320>
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <ESP_Upkeep+0x3f0>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01f      	beq.n	8005828 <ESP_Upkeep+0x320>
 80057e8:	4b45      	ldr	r3, [pc, #276]	@ (8005900 <ESP_Upkeep+0x3f8>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01b      	beq.n	8005828 <ESP_Upkeep+0x320>
//        Debug("mode select is get time");
        memcpy(ATCommandArray, AT_SNTP, 4);
 80057f0:	4b46      	ldr	r3, [pc, #280]	@ (800590c <ESP_Upkeep+0x404>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b39      	ldr	r3, [pc, #228]	@ (80058dc <ESP_Upkeep+0x3d4>)
 80057f6:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057f8:	4b29      	ldr	r3, [pc, #164]	@ (80058a0 <ESP_Upkeep+0x398>)
 80057fa:	2204      	movs	r2, #4
 80057fc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057fe:	4b3b      	ldr	r3, [pc, #236]	@ (80058ec <ESP_Upkeep+0x3e4>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005804:	4b29      	ldr	r3, [pc, #164]	@ (80058ac <ESP_Upkeep+0x3a4>)
 8005806:	2205      	movs	r2, #5
 8005808:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800580a:	f009 fa69 	bl	800ece0 <HAL_GetTick>
 800580e:	0002      	movs	r2, r0
 8005810:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <ESP_Upkeep+0x400>)
 8005812:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005814:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <ESP_Upkeep+0x3e4>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	001a      	movs	r2, r3
 800581a:	4b30      	ldr	r3, [pc, #192]	@ (80058dc <ESP_Upkeep+0x3d4>)
 800581c:	5c9a      	ldrb	r2, [r3, r2]
 800581e:	4b22      	ldr	r3, [pc, #136]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 8005820:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005822:	4b23      	ldr	r3, [pc, #140]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005828:	4b39      	ldr	r3, [pc, #228]	@ (8005910 <ESP_Upkeep+0x408>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d100      	bne.n	8005832 <ESP_Upkeep+0x32a>
 8005830:	e2ce      	b.n	8005dd0 <ESP_Upkeep+0x8c8>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005832:	4b2a      	ldr	r3, [pc, #168]	@ (80058dc <ESP_Upkeep+0x3d4>)
 8005834:	4a37      	ldr	r2, [pc, #220]	@ (8005914 <ESP_Upkeep+0x40c>)
 8005836:	6811      	ldr	r1, [r2, #0]
 8005838:	6019      	str	r1, [r3, #0]
 800583a:	7912      	ldrb	r2, [r2, #4]
 800583c:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800583e:	4a36      	ldr	r2, [pc, #216]	@ (8005918 <ESP_Upkeep+0x410>)
 8005840:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <ESP_Upkeep+0x3b0>)
 8005842:	0019      	movs	r1, r3
 8005844:	2003      	movs	r0, #3
 8005846:	f008 fe05 	bl	800e454 <CreateLine>
        DisableConnectedDevices();
 800584a:	f003 f85f 	bl	800890c <DisableConnectedDevices>
        usblog = false;
 800584e:	4b33      	ldr	r3, [pc, #204]	@ (800591c <ESP_Upkeep+0x414>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005854:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <ESP_Upkeep+0x398>)
 8005856:	2204      	movs	r2, #4
 8005858:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800585a:	4b24      	ldr	r3, [pc, #144]	@ (80058ec <ESP_Upkeep+0x3e4>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <ESP_Upkeep+0x3a4>)
 8005862:	2203      	movs	r2, #3
 8005864:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005866:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <ESP_Upkeep+0x3e4>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	001a      	movs	r2, r3
 800586c:	4b1b      	ldr	r3, [pc, #108]	@ (80058dc <ESP_Upkeep+0x3d4>)
 800586e:	5c9a      	ldrb	r2, [r3, r2]
 8005870:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 8005872:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005874:	4b0e      	ldr	r3, [pc, #56]	@ (80058b0 <ESP_Upkeep+0x3a8>)
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
      }
    break;
 800587a:	e2a9      	b.n	8005dd0 <ESP_Upkeep+0x8c8>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800587c:	4b0a      	ldr	r3, [pc, #40]	@ (80058a8 <ESP_Upkeep+0x3a0>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	1dfc      	adds	r4, r7, #7
 8005882:	0018      	movs	r0, r3
 8005884:	f7ff fb44 	bl	8004f10 <AT_Send>
 8005888:	0003      	movs	r3, r0
 800588a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800588c:	1dfb      	adds	r3, r7, #7
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d100      	bne.n	8005896 <ESP_Upkeep+0x38e>
 8005894:	e29e      	b.n	8005dd4 <ESP_Upkeep+0x8cc>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005896:	4b02      	ldr	r3, [pc, #8]	@ (80058a0 <ESP_Upkeep+0x398>)
 8005898:	2203      	movs	r2, #3
 800589a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800589c:	e29a      	b.n	8005dd4 <ESP_Upkeep+0x8cc>
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	20000030 	.word	0x20000030
 80058a4:	20000002 	.word	0x20000002
 80058a8:	20000a26 	.word	0x20000a26
 80058ac:	20000a27 	.word	0x20000a27
 80058b0:	20000a25 	.word	0x20000a25
 80058b4:	08023a60 	.word	0x08023a60
 80058b8:	0802311c 	.word	0x0802311c
 80058bc:	08025380 	.word	0x08025380
 80058c0:	2000054c 	.word	0x2000054c
 80058c4:	50000800 	.word	0x50000800
 80058c8:	50001c00 	.word	0x50001c00
 80058cc:	20000a20 	.word	0x20000a20
 80058d0:	2000044c 	.word	0x2000044c
 80058d4:	20000b38 	.word	0x20000b38
 80058d8:	20000032 	.word	0x20000032
 80058dc:	20000a10 	.word	0x20000a10
 80058e0:	2000054d 	.word	0x2000054d
 80058e4:	2000054e 	.word	0x2000054e
 80058e8:	20000004 	.word	0x20000004
 80058ec:	20000a1a 	.word	0x20000a1a
 80058f0:	20000550 	.word	0x20000550
 80058f4:	20000014 	.word	0x20000014
 80058f8:	20000551 	.word	0x20000551
 80058fc:	20000010 	.word	0x20000010
 8005900:	20000001 	.word	0x20000001
 8005904:	2000000c 	.word	0x2000000c
 8005908:	20000564 	.word	0x20000564
 800590c:	20000024 	.word	0x20000024
 8005910:	2000054f 	.word	0x2000054f
 8005914:	2000001c 	.word	0x2000001c
 8005918:	08023a8c 	.word	0x08023a8c
 800591c:	200001f3 	.word	0x200001f3

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005920:	4bc2      	ldr	r3, [pc, #776]	@ (8005c2c <ESP_Upkeep+0x724>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	0018      	movs	r0, r3
 8005926:	f008 fd3f 	bl	800e3a8 <TimestampIsReached>
 800592a:	1e03      	subs	r3, r0, #0
 800592c:	d100      	bne.n	8005930 <ESP_Upkeep+0x428>
 800592e:	e253      	b.n	8005dd8 <ESP_Upkeep+0x8d0>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005930:	4bbf      	ldr	r3, [pc, #764]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff f9a9 	bl	8004c8c <DMA_ProcessBuffer>
 800593a:	0003      	movs	r3, r0
 800593c:	001a      	movs	r2, r3
 800593e:	4bbd      	ldr	r3, [pc, #756]	@ (8005c34 <ESP_Upkeep+0x72c>)
 8005940:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005942:	4bbc      	ldr	r3, [pc, #752]	@ (8005c34 <ESP_Upkeep+0x72c>)
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	4bba      	ldr	r3, [pc, #744]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	1d7c      	adds	r4, r7, #5
 800594c:	0019      	movs	r1, r3
 800594e:	0010      	movs	r0, r2
 8005950:	f7ff fa9c 	bl	8004e8c <ATCompare>
 8005954:	0003      	movs	r3, r0
 8005956:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005958:	4bb6      	ldr	r3, [pc, #728]	@ (8005c34 <ESP_Upkeep+0x72c>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d138      	bne.n	80059d2 <ESP_Upkeep+0x4ca>
          if(ATCommand == AT_SENDDATA){
 8005960:	4bb5      	ldr	r3, [pc, #724]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d108      	bne.n	800597a <ESP_Upkeep+0x472>
            ATCommand = AT_HTTPCPOST;
 8005968:	4bb3      	ldr	r3, [pc, #716]	@ (8005c38 <ESP_Upkeep+0x730>)
 800596a:	220e      	movs	r2, #14
 800596c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800596e:	4bb0      	ldr	r3, [pc, #704]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005970:	2202      	movs	r2, #2
 8005972:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005974:	4bb1      	ldr	r3, [pc, #708]	@ (8005c3c <ESP_Upkeep+0x734>)
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800597a:	4bb1      	ldr	r3, [pc, #708]	@ (8005c40 <ESP_Upkeep+0x738>)
 800597c:	2204      	movs	r2, #4
 800597e:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005980:	4bb0      	ldr	r3, [pc, #704]	@ (8005c44 <ESP_Upkeep+0x73c>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	4bae      	ldr	r3, [pc, #696]	@ (8005c44 <ESP_Upkeep+0x73c>)
 800598a:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 800598c:	4bad      	ldr	r3, [pc, #692]	@ (8005c44 <ESP_Upkeep+0x73c>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d91e      	bls.n	80059d2 <ESP_Upkeep+0x4ca>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005994:	f009 f9a4 	bl	800ece0 <HAL_GetTick>
 8005998:	0003      	movs	r3, r0
 800599a:	4aab      	ldr	r2, [pc, #684]	@ (8005c48 <ESP_Upkeep+0x740>)
 800599c:	189a      	adds	r2, r3, r2
 800599e:	4ba3      	ldr	r3, [pc, #652]	@ (8005c2c <ESP_Upkeep+0x724>)
 80059a0:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059a2:	4baa      	ldr	r3, [pc, #680]	@ (8005c4c <ESP_Upkeep+0x744>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059a8:	f7ff fa62 	bl	8004e70 <clearDMABuffer>
            stop = HAL_GetTick();
 80059ac:	f009 f998 	bl	800ece0 <HAL_GetTick>
 80059b0:	0002      	movs	r2, r0
 80059b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005c50 <ESP_Upkeep+0x748>)
 80059b4:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80059b6:	4ba6      	ldr	r3, [pc, #664]	@ (8005c50 <ESP_Upkeep+0x748>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4ba6      	ldr	r3, [pc, #664]	@ (8005c54 <ESP_Upkeep+0x74c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	4aa5      	ldr	r2, [pc, #660]	@ (8005c58 <ESP_Upkeep+0x750>)
 80059c2:	49a6      	ldr	r1, [pc, #664]	@ (8005c5c <ESP_Upkeep+0x754>)
 80059c4:	2001      	movs	r0, #1
 80059c6:	f008 fd45 	bl	800e454 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80059ca:	4b9d      	ldr	r3, [pc, #628]	@ (8005c40 <ESP_Upkeep+0x738>)
 80059cc:	220d      	movs	r2, #13
 80059ce:	701a      	strb	r2, [r3, #0]
            break;
 80059d0:	e207      	b.n	8005de2 <ESP_Upkeep+0x8da>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80059d2:	4b98      	ldr	r3, [pc, #608]	@ (8005c34 <ESP_Upkeep+0x72c>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d106      	bne.n	80059e8 <ESP_Upkeep+0x4e0>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059da:	f009 f981 	bl	800ece0 <HAL_GetTick>
 80059de:	0003      	movs	r3, r0
 80059e0:	330a      	adds	r3, #10
 80059e2:	001a      	movs	r2, r3
 80059e4:	4b91      	ldr	r3, [pc, #580]	@ (8005c2c <ESP_Upkeep+0x724>)
 80059e6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80059e8:	4b92      	ldr	r3, [pc, #584]	@ (8005c34 <ESP_Upkeep+0x72c>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b0a      	cmp	r3, #10
 80059ee:	d106      	bne.n	80059fe <ESP_Upkeep+0x4f6>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059f0:	f009 f976 	bl	800ece0 <HAL_GetTick>
 80059f4:	0003      	movs	r3, r0
 80059f6:	330a      	adds	r3, #10
 80059f8:	001a      	movs	r2, r3
 80059fa:	4b8c      	ldr	r3, [pc, #560]	@ (8005c2c <ESP_Upkeep+0x724>)
 80059fc:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005c34 <ESP_Upkeep+0x72c>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d14b      	bne.n	8005a9e <ESP_Upkeep+0x596>
          timeoutcntr++;
 8005a06:	4b96      	ldr	r3, [pc, #600]	@ (8005c60 <ESP_Upkeep+0x758>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	4b94      	ldr	r3, [pc, #592]	@ (8005c60 <ESP_Upkeep+0x758>)
 8005a10:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005a12:	4a94      	ldr	r2, [pc, #592]	@ (8005c64 <ESP_Upkeep+0x75c>)
 8005a14:	4b91      	ldr	r3, [pc, #580]	@ (8005c5c <ESP_Upkeep+0x754>)
 8005a16:	0019      	movs	r1, r3
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f008 fd1b 	bl	800e454 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005a1e:	4b90      	ldr	r3, [pc, #576]	@ (8005c60 <ESP_Upkeep+0x758>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d924      	bls.n	8005a70 <ESP_Upkeep+0x568>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005a26:	f009 f95b 	bl	800ece0 <HAL_GetTick>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8005c68 <ESP_Upkeep+0x760>)
 8005a2e:	189a      	adds	r2, r3, r2
 8005a30:	4b7e      	ldr	r3, [pc, #504]	@ (8005c2c <ESP_Upkeep+0x724>)
 8005a32:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005a34:	4b85      	ldr	r3, [pc, #532]	@ (8005c4c <ESP_Upkeep+0x744>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005a3a:	f7ff fa19 	bl	8004e70 <clearDMABuffer>
            stop = HAL_GetTick();
 8005a3e:	f009 f94f 	bl	800ece0 <HAL_GetTick>
 8005a42:	0002      	movs	r2, r0
 8005a44:	4b82      	ldr	r3, [pc, #520]	@ (8005c50 <ESP_Upkeep+0x748>)
 8005a46:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005a48:	4b81      	ldr	r3, [pc, #516]	@ (8005c50 <ESP_Upkeep+0x748>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b81      	ldr	r3, [pc, #516]	@ (8005c54 <ESP_Upkeep+0x74c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	4a86      	ldr	r2, [pc, #536]	@ (8005c6c <ESP_Upkeep+0x764>)
 8005a54:	4981      	ldr	r1, [pc, #516]	@ (8005c5c <ESP_Upkeep+0x754>)
 8005a56:	2001      	movs	r0, #1
 8005a58:	f008 fcfc 	bl	800e454 <CreateLine>
            // TODO hier gaat iets fout, de verzending herstart niet meer
            // in log alleen nog D [01039053] EspState: 4 ATcmd: 20 Mode: 2 ATExp: 0
            EspState = ESP_STATE_DEINIT;
 8005a5c:	4b78      	ldr	r3, [pc, #480]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005a5e:	220d      	movs	r2, #13
 8005a60:	701a      	strb	r2, [r3, #0]
             ATCommand = AT_END;
 8005a62:	4b75      	ldr	r3, [pc, #468]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005a64:	2214      	movs	r2, #20
 8005a66:	701a      	strb	r2, [r3, #0]
             // mogelijke oplossing door deze regel te verwijderen
             ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a68:	4b71      	ldr	r3, [pc, #452]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
             break;
 8005a6e:	e1b8      	b.n	8005de2 <ESP_Upkeep+0x8da>
          }
          if(ATCommand != AT_SENDDATA){
 8005a70:	4b71      	ldr	r3, [pc, #452]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b0f      	cmp	r3, #15
 8005a76:	d003      	beq.n	8005a80 <ESP_Upkeep+0x578>
            EspState = ESP_STATE_SEND;
 8005a78:	4b71      	ldr	r3, [pc, #452]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e00e      	b.n	8005a9e <ESP_Upkeep+0x596>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a80:	4b6d      	ldr	r3, [pc, #436]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005a82:	220e      	movs	r2, #14
 8005a84:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a86:	4b6d      	ldr	r3, [pc, #436]	@ (8005c3c <ESP_Upkeep+0x734>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8005c3c <ESP_Upkeep+0x734>)
 8005a90:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a92:	4b67      	ldr	r3, [pc, #412]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005a94:	2202      	movs	r2, #2
 8005a96:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a98:	4b69      	ldr	r3, [pc, #420]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a9e:	1d7b      	adds	r3, r7, #5
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d100      	bne.n	8005aa8 <ESP_Upkeep+0x5a0>
 8005aa6:	e197      	b.n	8005dd8 <ESP_Upkeep+0x8d0>
          EspState = ESP_STATE_NEXT_AT;
 8005aa8:	4b65      	ldr	r3, [pc, #404]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005aaa:	2205      	movs	r2, #5
 8005aac:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005aae:	e193      	b.n	8005dd8 <ESP_Upkeep+0x8d0>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005ab0:	4b62      	ldr	r3, [pc, #392]	@ (8005c3c <ESP_Upkeep+0x734>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b60      	ldr	r3, [pc, #384]	@ (8005c3c <ESP_Upkeep+0x734>)
 8005aba:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005abc:	4b5f      	ldr	r3, [pc, #380]	@ (8005c3c <ESP_Upkeep+0x734>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8005c70 <ESP_Upkeep+0x768>)
 8005ac4:	5c9a      	ldrb	r2, [r3, r2]
 8005ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005ac8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005aca:	4b5b      	ldr	r3, [pc, #364]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d102      	bne.n	8005ad8 <ESP_Upkeep+0x5d0>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005ad2:	4b57      	ldr	r3, [pc, #348]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005ad8:	4b57      	ldr	r3, [pc, #348]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b0e      	cmp	r3, #14
 8005ade:	d102      	bne.n	8005ae6 <ESP_Upkeep+0x5de>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005ae0:	4b53      	ldr	r3, [pc, #332]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005ae6:	4b54      	ldr	r3, [pc, #336]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b0e      	cmp	r3, #14
 8005aec:	d006      	beq.n	8005afc <ESP_Upkeep+0x5f4>
 8005aee:	4b52      	ldr	r3, [pc, #328]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d002      	beq.n	8005afc <ESP_Upkeep+0x5f4>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005af6:	4b4e      	ldr	r3, [pc, #312]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005afc:	4b4e      	ldr	r3, [pc, #312]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b11      	cmp	r3, #17
 8005b02:	d102      	bne.n	8005b0a <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005b04:	4b4a      	ldr	r3, [pc, #296]	@ (8005c30 <ESP_Upkeep+0x728>)
 8005b06:	2205      	movs	r2, #5
 8005b08:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005b10:	4b49      	ldr	r3, [pc, #292]	@ (8005c38 <ESP_Upkeep+0x730>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b14      	cmp	r3, #20
 8005b16:	d000      	beq.n	8005b1a <ESP_Upkeep+0x612>
 8005b18:	e160      	b.n	8005ddc <ESP_Upkeep+0x8d4>
        if(Mode == AT_MODE_SEND){
 8005b1a:	4b56      	ldr	r3, [pc, #344]	@ (8005c74 <ESP_Upkeep+0x76c>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d122      	bne.n	8005b68 <ESP_Upkeep+0x660>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b22:	f009 f8dd 	bl	800ece0 <HAL_GetTick>
 8005b26:	0003      	movs	r3, r0
 8005b28:	4a47      	ldr	r2, [pc, #284]	@ (8005c48 <ESP_Upkeep+0x740>)
 8005b2a:	189a      	adds	r2, r3, r2
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c2c <ESP_Upkeep+0x724>)
 8005b2e:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005b30:	f7ff f99e 	bl	8004e70 <clearDMABuffer>
          stop = HAL_GetTick();
 8005b34:	f009 f8d4 	bl	800ece0 <HAL_GetTick>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	4b45      	ldr	r3, [pc, #276]	@ (8005c50 <ESP_Upkeep+0x748>)
 8005b3c:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005b3e:	4b44      	ldr	r3, [pc, #272]	@ (8005c50 <ESP_Upkeep+0x748>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b44      	ldr	r3, [pc, #272]	@ (8005c54 <ESP_Upkeep+0x74c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	4a4b      	ldr	r2, [pc, #300]	@ (8005c78 <ESP_Upkeep+0x770>)
 8005b4a:	494c      	ldr	r1, [pc, #304]	@ (8005c7c <ESP_Upkeep+0x774>)
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f008 fc81 	bl	800e454 <CreateLine>
          ResetdBAmax();
 8005b52:	f002 fef9 	bl	8008948 <ResetdBAmax>
          showTime();
 8005b56:	f000 fcdd 	bl	8006514 <showTime>
          ESPTransmitDone = true;
 8005b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c4c <ESP_Upkeep+0x744>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b60:	4b37      	ldr	r3, [pc, #220]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005b62:	220d      	movs	r2, #13
 8005b64:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b66:	e139      	b.n	8005ddc <ESP_Upkeep+0x8d4>
        else if (Mode == AT_MODE_GETTIME) {
 8005b68:	4b42      	ldr	r3, [pc, #264]	@ (8005c74 <ESP_Upkeep+0x76c>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d12c      	bne.n	8005bca <ESP_Upkeep+0x6c2>
            setTime = false;
 8005b70:	4b43      	ldr	r3, [pc, #268]	@ (8005c80 <ESP_Upkeep+0x778>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b76:	f009 f8b3 	bl	800ece0 <HAL_GetTick>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	4a41      	ldr	r2, [pc, #260]	@ (8005c84 <ESP_Upkeep+0x77c>)
 8005b7e:	189a      	adds	r2, r3, r2
 8005b80:	4b41      	ldr	r3, [pc, #260]	@ (8005c88 <ESP_Upkeep+0x780>)
 8005b82:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b84:	4b40      	ldr	r3, [pc, #256]	@ (8005c88 <ESP_Upkeep+0x780>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a40      	ldr	r2, [pc, #256]	@ (8005c8c <ESP_Upkeep+0x784>)
 8005b8a:	493c      	ldr	r1, [pc, #240]	@ (8005c7c <ESP_Upkeep+0x774>)
 8005b8c:	2002      	movs	r0, #2
 8005b8e:	f008 fc61 	bl	800e454 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b92:	4b3f      	ldr	r3, [pc, #252]	@ (8005c90 <ESP_Upkeep+0x788>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b25      	ldr	r3, [pc, #148]	@ (8005c2c <ESP_Upkeep+0x724>)
 8005b98:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b9a:	f7ff f969 	bl	8004e70 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b9e:	f009 f89f 	bl	800ece0 <HAL_GetTick>
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c50 <ESP_Upkeep+0x748>)
 8005ba6:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005ba8:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <ESP_Upkeep+0x748>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b29      	ldr	r3, [pc, #164]	@ (8005c54 <ESP_Upkeep+0x74c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	4a38      	ldr	r2, [pc, #224]	@ (8005c94 <ESP_Upkeep+0x78c>)
 8005bb4:	4931      	ldr	r1, [pc, #196]	@ (8005c7c <ESP_Upkeep+0x774>)
 8005bb6:	2002      	movs	r0, #2
 8005bb8:	f008 fc4c 	bl	800e454 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005bbc:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005bbe:	220d      	movs	r2, #13
 8005bc0:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c74 <ESP_Upkeep+0x76c>)
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	701a      	strb	r2, [r3, #0]
    break;
 8005bc8:	e108      	b.n	8005ddc <ESP_Upkeep+0x8d4>
          EspState = ESP_STATE_RESET;
 8005bca:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005bcc:	2209      	movs	r2, #9
 8005bce:	701a      	strb	r2, [r3, #0]
    break;
 8005bd0:	e104      	b.n	8005ddc <ESP_Upkeep+0x8d4>

    case ESP_STATE_DEINIT:
//      Debug("ESP_STATE_DEINIT entered");
      EspTurnedOn = false;
 8005bd2:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <ESP_Upkeep+0x790>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005bd8:	4b30      	ldr	r3, [pc, #192]	@ (8005c9c <ESP_Upkeep+0x794>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2101      	movs	r1, #1
 8005bde:	0018      	movs	r0, r3
 8005be0:	f00a fb0f 	bl	8010202 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005be4:	2001      	movs	r0, #1
 8005be6:	f009 f885 	bl	800ecf4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005bea:	2380      	movs	r3, #128	@ 0x80
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	482c      	ldr	r0, [pc, #176]	@ (8005ca0 <ESP_Upkeep+0x798>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	f00a fb05 	bl	8010202 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	f009 f87b 	bl	800ecf4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005bfe:	4b27      	ldr	r3, [pc, #156]	@ (8005c9c <ESP_Upkeep+0x794>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	2102      	movs	r1, #2
 8005c04:	0018      	movs	r0, r3
 8005c06:	f00a fafc 	bl	8010202 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <ESP_Upkeep+0x738>)
 8005c0c:	2209      	movs	r2, #9
 8005c0e:	701a      	strb	r2, [r3, #0]
//      Debug("EspState changed to ESP_STATE_RESET;");

//      if (usbPluggedIn) {
        EnabledConnectedDevices();
 8005c10:	f002 fe52 	bl	80088b8 <EnabledConnectedDevices>
//      }
      HAL_Delay(1);
 8005c14:	2001      	movs	r0, #1
 8005c16:	f009 f86d 	bl	800ecf4 <HAL_Delay>
      ResetESPIndicator();
 8005c1a:	f007 fc4f 	bl	800d4bc <ResetESPIndicator>
      errorcntr = 0;
 8005c1e:	4b09      	ldr	r3, [pc, #36]	@ (8005c44 <ESP_Upkeep+0x73c>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005c24:	4b0e      	ldr	r3, [pc, #56]	@ (8005c60 <ESP_Upkeep+0x758>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
      break;
 8005c2a:	e0da      	b.n	8005de2 <ESP_Upkeep+0x8da>
 8005c2c:	20000a20 	.word	0x20000a20
 8005c30:	20000a25 	.word	0x20000a25
 8005c34:	20000032 	.word	0x20000032
 8005c38:	20000a26 	.word	0x20000a26
 8005c3c:	20000a1a 	.word	0x20000a1a
 8005c40:	20000030 	.word	0x20000030
 8005c44:	20000a1b 	.word	0x20000a1b
 8005c48:	0003a980 	.word	0x0003a980
 8005c4c:	20000554 	.word	0x20000554
 8005c50:	20000568 	.word	0x20000568
 8005c54:	20000564 	.word	0x20000564
 8005c58:	08023abc 	.word	0x08023abc
 8005c5c:	08023108 	.word	0x08023108
 8005c60:	20000a1c 	.word	0x20000a1c
 8005c64:	08023af0 	.word	0x08023af0
 8005c68:	0000c350 	.word	0x0000c350
 8005c6c:	08023b2c 	.word	0x08023b2c
 8005c70:	20000a10 	.word	0x20000a10
 8005c74:	20000a27 	.word	0x20000a27
 8005c78:	08023b5c 	.word	0x08023b5c
 8005c7c:	08023b74 	.word	0x08023b74
 8005c80:	20000001 	.word	0x20000001
 8005c84:	047e7c4f 	.word	0x047e7c4f
 8005c88:	20000028 	.word	0x20000028
 8005c8c:	08023b78 	.word	0x08023b78
 8005c90:	2000002c 	.word	0x2000002c
 8005c94:	08023bbc 	.word	0x08023bbc
 8005c98:	2000054c 	.word	0x2000054c
 8005c9c:	50001c00 	.word	0x50001c00
 8005ca0:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005ca4:	4b52      	ldr	r3, [pc, #328]	@ (8005df0 <ESP_Upkeep+0x8e8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f008 fb7d 	bl	800e3a8 <TimestampIsReached>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d103      	bne.n	8005cba <ESP_Upkeep+0x7b2>
 8005cb2:	4b50      	ldr	r3, [pc, #320]	@ (8005df4 <ESP_Upkeep+0x8ec>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d038      	beq.n	8005d2c <ESP_Upkeep+0x824>
//        Debug("ESPTimeStamp reached in ESP_STATE_RESET Mode=%d", Mode);
        ESPTransmitDone = false;
 8005cba:	4b4f      	ldr	r3, [pc, #316]	@ (8005df8 <ESP_Upkeep+0x8f0>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <ESP_Upkeep+0x7cc>
          InitIsDone = true;
 8005cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e00 <ESP_Upkeep+0x8f8>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005cce:	4b4d      	ldr	r3, [pc, #308]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005cd0:	220b      	movs	r2, #11
 8005cd2:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005cd4:	4b49      	ldr	r3, [pc, #292]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d108      	bne.n	8005cee <ESP_Upkeep+0x7e6>
          ConnectionMade = true;
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005e08 <ESP_Upkeep+0x900>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8005e0c <ESP_Upkeep+0x904>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005ce8:	4b46      	ldr	r3, [pc, #280]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005cea:	220b      	movs	r2, #11
 8005cec:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005cee:	4b43      	ldr	r3, [pc, #268]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d102      	bne.n	8005cfc <ESP_Upkeep+0x7f4>
          EspState = ESP_STATE_INIT;
 8005cf6:	4b43      	ldr	r3, [pc, #268]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d108      	bne.n	8005d16 <ESP_Upkeep+0x80e>
          EspState = ESP_STATE_CONFIG;
 8005d04:	4b3f      	ldr	r3, [pc, #252]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005d06:	220e      	movs	r2, #14
 8005d08:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005d0a:	4a41      	ldr	r2, [pc, #260]	@ (8005e10 <ESP_Upkeep+0x908>)
 8005d0c:	4b41      	ldr	r3, [pc, #260]	@ (8005e14 <ESP_Upkeep+0x90c>)
 8005d0e:	0019      	movs	r1, r3
 8005d10:	2002      	movs	r0, #2
 8005d12:	f008 fb9f 	bl	800e454 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005d16:	4b39      	ldr	r3, [pc, #228]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d126      	bne.n	8005d6c <ESP_Upkeep+0x864>
          EspState = ESP_STATE_MODE_SELECT;
 8005d1e:	4b39      	ldr	r3, [pc, #228]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005d20:	220b      	movs	r2, #11
 8005d22:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005d24:	4b3c      	ldr	r3, [pc, #240]	@ (8005e18 <ESP_Upkeep+0x910>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005d2a:	e01f      	b.n	8005d6c <ESP_Upkeep+0x864>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e1c <ESP_Upkeep+0x914>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f008 fb39 	bl	800e3a8 <TimestampIsReached>
 8005d36:	1e03      	subs	r3, r0, #0
 8005d38:	d052      	beq.n	8005de0 <ESP_Upkeep+0x8d8>
        if(Mode == AT_MODE_SEND ) {
 8005d3a:	4b30      	ldr	r3, [pc, #192]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d14e      	bne.n	8005de0 <ESP_Upkeep+0x8d8>
            Mode = AT_MODE_GETTIME;
 8005d42:	4b2e      	ldr	r3, [pc, #184]	@ (8005dfc <ESP_Upkeep+0x8f4>)
 8005d44:	2205      	movs	r2, #5
 8005d46:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005d48:	4b2e      	ldr	r3, [pc, #184]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005d4e:	4b28      	ldr	r3, [pc, #160]	@ (8005df0 <ESP_Upkeep+0x8e8>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b33      	ldr	r3, [pc, #204]	@ (8005e20 <ESP_Upkeep+0x918>)
 8005d54:	601a      	str	r2, [r3, #0]
         Debug("savedESPTimeStamp: %d", savedESPTimeStamp);
 8005d56:	4b32      	ldr	r3, [pc, #200]	@ (8005e20 <ESP_Upkeep+0x918>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a32      	ldr	r2, [pc, #200]	@ (8005e24 <ESP_Upkeep+0x91c>)
 8005d5c:	4932      	ldr	r1, [pc, #200]	@ (8005e28 <ESP_Upkeep+0x920>)
 8005d5e:	2003      	movs	r0, #3
 8005d60:	f008 fb78 	bl	800e454 <CreateLine>
         setTime = true;
 8005d64:	4b31      	ldr	r3, [pc, #196]	@ (8005e2c <ESP_Upkeep+0x924>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005d6a:	e039      	b.n	8005de0 <ESP_Upkeep+0x8d8>
 8005d6c:	e038      	b.n	8005de0 <ESP_Upkeep+0x8d8>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d6e:	4b30      	ldr	r3, [pc, #192]	@ (8005e30 <ESP_Upkeep+0x928>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	4053      	eors	r3, r2
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <ESP_Upkeep+0x886>
        Info("Do nothing until reset");
 8005d7c:	4a24      	ldr	r2, [pc, #144]	@ (8005e10 <ESP_Upkeep+0x908>)
 8005d7e:	4b25      	ldr	r3, [pc, #148]	@ (8005e14 <ESP_Upkeep+0x90c>)
 8005d80:	0019      	movs	r1, r3
 8005d82:	2002      	movs	r0, #2
 8005d84:	f008 fb66 	bl	800e454 <CreateLine>
        msgdone = true;
 8005d88:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <ESP_Upkeep+0x928>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d8e:	f016 ffe7 	bl	801cd60 <GetUsbRxPointer>
 8005d92:	0003      	movs	r3, r0
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 f8c5 	bl	8005f24 <Process_PC_Config>
      break;
 8005d9a:	e022      	b.n	8005de2 <ESP_Upkeep+0x8da>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d9c:	4a25      	ldr	r2, [pc, #148]	@ (8005e34 <ESP_Upkeep+0x92c>)
 8005d9e:	4b26      	ldr	r3, [pc, #152]	@ (8005e38 <ESP_Upkeep+0x930>)
 8005da0:	0019      	movs	r1, r3
 8005da2:	2001      	movs	r0, #1
 8005da4:	f008 fb56 	bl	800e454 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005da8:	4b16      	ldr	r3, [pc, #88]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005daa:	2202      	movs	r2, #2
 8005dac:	701a      	strb	r2, [r3, #0]
      break;
 8005dae:	e018      	b.n	8005de2 <ESP_Upkeep+0x8da>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005db0:	4a22      	ldr	r2, [pc, #136]	@ (8005e3c <ESP_Upkeep+0x934>)
 8005db2:	4b21      	ldr	r3, [pc, #132]	@ (8005e38 <ESP_Upkeep+0x930>)
 8005db4:	0019      	movs	r1, r3
 8005db6:	2001      	movs	r0, #1
 8005db8:	f008 fb4c 	bl	800e454 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005dbe:	2207      	movs	r2, #7
 8005dc0:	701a      	strb	r2, [r3, #0]
      break;
 8005dc2:	e00e      	b.n	8005de2 <ESP_Upkeep+0x8da>
      break;
 8005dc4:	46c0      	nop			@ (mov r8, r8)
 8005dc6:	e00c      	b.n	8005de2 <ESP_Upkeep+0x8da>
      break;
 8005dc8:	46c0      	nop			@ (mov r8, r8)
 8005dca:	e00a      	b.n	8005de2 <ESP_Upkeep+0x8da>
        break;
 8005dcc:	46c0      	nop			@ (mov r8, r8)
 8005dce:	e008      	b.n	8005de2 <ESP_Upkeep+0x8da>
    break;
 8005dd0:	46c0      	nop			@ (mov r8, r8)
 8005dd2:	e006      	b.n	8005de2 <ESP_Upkeep+0x8da>
    break;
 8005dd4:	46c0      	nop			@ (mov r8, r8)
 8005dd6:	e004      	b.n	8005de2 <ESP_Upkeep+0x8da>
      break;
 8005dd8:	46c0      	nop			@ (mov r8, r8)
 8005dda:	e002      	b.n	8005de2 <ESP_Upkeep+0x8da>
    break;
 8005ddc:	46c0      	nop			@ (mov r8, r8)
 8005dde:	e000      	b.n	8005de2 <ESP_Upkeep+0x8da>
      break;
 8005de0:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005de2:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <ESP_Upkeep+0x8fc>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
}
 8005de6:	0018      	movs	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b002      	add	sp, #8
 8005dec:	bdb0      	pop	{r4, r5, r7, pc}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	20000a20 	.word	0x20000a20
 8005df4:	2000054f 	.word	0x2000054f
 8005df8:	20000554 	.word	0x20000554
 8005dfc:	20000a27 	.word	0x20000a27
 8005e00:	2000054d 	.word	0x2000054d
 8005e04:	20000030 	.word	0x20000030
 8005e08:	20000550 	.word	0x20000550
 8005e0c:	20000552 	.word	0x20000552
 8005e10:	08023bdc 	.word	0x08023bdc
 8005e14:	08023b74 	.word	0x08023b74
 8005e18:	20000551 	.word	0x20000551
 8005e1c:	20000028 	.word	0x20000028
 8005e20:	2000002c 	.word	0x2000002c
 8005e24:	08023bf4 	.word	0x08023bf4
 8005e28:	0802311c 	.word	0x0802311c
 8005e2c:	20000001 	.word	0x20000001
 8005e30:	20000553 	.word	0x20000553
 8005e34:	08023c0c 	.word	0x08023c0c
 8005e38:	08023108 	.word	0x08023108
 8005e3c:	08023c20 	.word	0x08023c20

08005e40 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005e48:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <I2CSensors_Init+0x30>)
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005e4e:	4a09      	ldr	r2, [pc, #36]	@ (8005e74 <I2CSensors_Init+0x34>)
 8005e50:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <I2CSensors_Init+0x38>)
 8005e52:	0011      	movs	r1, r2
 8005e54:	0018      	movs	r0, r3
 8005e56:	f008 fc61 	bl	800e71c <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005e5a:	4a06      	ldr	r2, [pc, #24]	@ (8005e74 <I2CSensors_Init+0x34>)
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <I2CSensors_Init+0x38>)
 8005e5e:	0011      	movs	r1, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	f005 fc39 	bl	800b6d8 <SGP_Init>
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b002      	add	sp, #8
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	20000b3c 	.word	0x20000b3c
 8005e74:	08005ed1 	.word	0x08005ed1
 8005e78:	08005e7d 	.word	0x08005e7d

08005e7c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e7c:	b5b0      	push	{r4, r5, r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6039      	str	r1, [r7, #0]
 8005e84:	0011      	movs	r1, r2
 8005e86:	1dfb      	adds	r3, r7, #7
 8005e88:	1c02      	adds	r2, r0, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	1c0a      	adds	r2, r1, #0
 8005e90:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e92:	4b0e      	ldr	r3, [pc, #56]	@ (8005ecc <ReadI2C+0x50>)
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	1dfb      	adds	r3, r7, #7
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	18db      	adds	r3, r3, r3
 8005e9e:	b299      	uxth	r1, r3
 8005ea0:	1dbb      	adds	r3, r7, #6
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	250f      	movs	r5, #15
 8005ea8:	197c      	adds	r4, r7, r5
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	f00a fd8e 	bl	80109cc <HAL_I2C_Master_Receive_DMA>
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005eb4:	197b      	adds	r3, r7, r5
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <ReadI2C+0x44>
        return false;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e000      	b.n	8005ec2 <ReadI2C+0x46>
    }
    return true;
 8005ec0:	2301      	movs	r3, #1
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b004      	add	sp, #16
 8005ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	20000b3c 	.word	0x20000b3c

08005ed0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005ed0:	b5b0      	push	{r4, r5, r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6039      	str	r1, [r7, #0]
 8005ed8:	0011      	movs	r1, r2
 8005eda:	1dfb      	adds	r3, r7, #7
 8005edc:	1c02      	adds	r2, r0, #0
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	1dbb      	adds	r3, r7, #6
 8005ee2:	1c0a      	adds	r2, r1, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <WriteI2C+0x50>)
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	1dfb      	adds	r3, r7, #7
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	18db      	adds	r3, r3, r3
 8005ef2:	b299      	uxth	r1, r3
 8005ef4:	1dbb      	adds	r3, r7, #6
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	250f      	movs	r5, #15
 8005efc:	197c      	adds	r4, r7, r5
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	f00a fc5e 	bl	80107c0 <HAL_I2C_Master_Transmit_DMA>
 8005f04:	0003      	movs	r3, r0
 8005f06:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005f08:	197b      	adds	r3, r7, r5
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <WriteI2C+0x44>
        return false;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <WriteI2C+0x46>
    }
    return true;
 8005f14:	2301      	movs	r3, #1
}
 8005f16:	0018      	movs	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	20000b3c 	.word	0x20000b3c

08005f24 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b0c3      	sub	sp, #268	@ 0x10c
 8005f28:	af3e      	add	r7, sp, #248	@ 0xf8
 8005f2a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005f2c:	f016 ff38 	bl	801cda0 <GetUsbRxDataSize>
 8005f30:	0003      	movs	r3, r0
 8005f32:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d971      	bls.n	800601e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2123      	movs	r1, #35	@ 0x23
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f01a f92e 	bl	80201a0 <strchr>
 8005f44:	0003      	movs	r3, r0
 8005f46:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d065      	beq.n	800601a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	785a      	ldrb	r2, [r3, #1]
 8005f52:	4b34      	ldr	r3, [pc, #208]	@ (8006024 <Process_PC_Config+0x100>)
 8005f54:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	789a      	ldrb	r2, [r3, #2]
 8005f5a:	4b32      	ldr	r3, [pc, #200]	@ (8006024 <Process_PC_Config+0x100>)
 8005f5c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005f5e:	4b31      	ldr	r3, [pc, #196]	@ (8006024 <Process_PC_Config+0x100>)
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	3305      	adds	r3, #5
 8005f64:	001a      	movs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d351      	bcc.n	8006010 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	1cd9      	adds	r1, r3, #3
 8005f70:	4b2c      	ldr	r3, [pc, #176]	@ (8006024 <Process_PC_Config+0x100>)
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	001a      	movs	r2, r3
 8005f76:	4b2c      	ldr	r3, [pc, #176]	@ (8006028 <Process_PC_Config+0x104>)
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f01a f9e5 	bl	8020348 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f7e:	4b29      	ldr	r3, [pc, #164]	@ (8006024 <Process_PC_Config+0x100>)
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	3303      	adds	r3, #3
 8005f84:	001a      	movs	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	189b      	adds	r3, r3, r2
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	b21a      	sxth	r2, r3
 8005f90:	4b24      	ldr	r3, [pc, #144]	@ (8006024 <Process_PC_Config+0x100>)
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	3304      	adds	r3, #4
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	18cb      	adds	r3, r1, r3
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b21b      	sxth	r3, r3
 8005fa2:	b299      	uxth	r1, r3
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <Process_PC_Config+0x100>)
 8005fa6:	2381      	movs	r3, #129	@ 0x81
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005fac:	4a1d      	ldr	r2, [pc, #116]	@ (8006024 <Process_PC_Config+0x100>)
 8005fae:	2381      	movs	r3, #129	@ 0x81
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	5ad4      	ldrh	r4, [r2, r3]
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006024 <Process_PC_Config+0x100>)
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	0011      	movs	r1, r2
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f000 f975 	bl	80062b0 <CRC16_ARC>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	429c      	cmp	r4, r3
 8005fca:	d007      	beq.n	8005fdc <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005fcc:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <Process_PC_Config+0x100>)
 8005fce:	785a      	ldrb	r2, [r3, #1]
 8005fd0:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <Process_PC_Config+0x104>)
 8005fd2:	0019      	movs	r1, r3
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	f000 f919 	bl	800620c <Create_Message>
 8005fda:	e016      	b.n	800600a <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005fdc:	4c11      	ldr	r4, [pc, #68]	@ (8006024 <Process_PC_Config+0x100>)
 8005fde:	466b      	mov	r3, sp
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	0023      	movs	r3, r4
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	22f4      	movs	r2, #244	@ 0xf4
 8005fe8:	0019      	movs	r1, r3
 8005fea:	f01a f9ad 	bl	8020348 <memcpy>
 8005fee:	6820      	ldr	r0, [r4, #0]
 8005ff0:	6861      	ldr	r1, [r4, #4]
 8005ff2:	68a2      	ldr	r2, [r4, #8]
 8005ff4:	68e3      	ldr	r3, [r4, #12]
 8005ff6:	f000 f819 	bl	800602c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <Process_PC_Config+0x100>)
 8005ffc:	7818      	ldrb	r0, [r3, #0]
 8005ffe:	4b09      	ldr	r3, [pc, #36]	@ (8006024 <Process_PC_Config+0x100>)
 8006000:	785a      	ldrb	r2, [r3, #1]
 8006002:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <Process_PC_Config+0x104>)
 8006004:	0019      	movs	r1, r3
 8006006:	f000 f901 	bl	800620c <Create_Message>
                }
                ResetUsbRxDataSize();
 800600a:	f016 feb1 	bl	801cd70 <ResetUsbRxDataSize>
                return;
 800600e:	e006      	b.n	800601e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	0018      	movs	r0, r3
 8006014:	f016 fece 	bl	801cdb4 <GetUsbRxNextChunk>
 8006018:	e001      	b.n	800601e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 800601a:	f016 fea9 	bl	801cd70 <ResetUsbRxDataSize>
        }
    }
}
 800601e:	46bd      	mov	sp, r7
 8006020:	b005      	add	sp, #20
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	20000b40 	.word	0x20000b40
 8006028:	20000b42 	.word	0x20000b42

0800602c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b5b0      	push	{r4, r5, r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	2518      	movs	r5, #24
 8006036:	197c      	adds	r4, r7, r5
 8006038:	6020      	str	r0, [r4, #0]
 800603a:	6061      	str	r1, [r4, #4]
 800603c:	60a2      	str	r2, [r4, #8]
 800603e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006040:	197b      	adds	r3, r7, r5
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2bfe      	cmp	r3, #254	@ 0xfe
 8006046:	d100      	bne.n	800604a <ProcessCmd+0x1e>
 8006048:	e09c      	b.n	8006184 <ProcessCmd+0x158>
 800604a:	dd00      	ble.n	800604e <ProcessCmd+0x22>
 800604c:	e0bc      	b.n	80061c8 <ProcessCmd+0x19c>
 800604e:	2b0c      	cmp	r3, #12
 8006050:	dc0a      	bgt.n	8006068 <ProcessCmd+0x3c>
 8006052:	2b00      	cmp	r3, #0
 8006054:	da00      	bge.n	8006058 <ProcessCmd+0x2c>
 8006056:	e0b7      	b.n	80061c8 <ProcessCmd+0x19c>
 8006058:	2b0c      	cmp	r3, #12
 800605a:	d900      	bls.n	800605e <ProcessCmd+0x32>
 800605c:	e0b4      	b.n	80061c8 <ProcessCmd+0x19c>
 800605e:	009a      	lsls	r2, r3, #2
 8006060:	4b5d      	ldr	r3, [pc, #372]	@ (80061d8 <ProcessCmd+0x1ac>)
 8006062:	18d3      	adds	r3, r2, r3
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	469f      	mov	pc, r3
 8006068:	2bfd      	cmp	r3, #253	@ 0xfd
 800606a:	d100      	bne.n	800606e <ProcessCmd+0x42>
 800606c:	e084      	b.n	8006178 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800606e:	e0ab      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006070:	2118      	movs	r1, #24
 8006072:	187b      	adds	r3, r7, r1
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	001a      	movs	r2, r3
 8006078:	187b      	adds	r3, r7, r1
 800607a:	1c99      	adds	r1, r3, #2
 800607c:	4857      	ldr	r0, [pc, #348]	@ (80061dc <ProcessCmd+0x1b0>)
 800607e:	230c      	movs	r3, #12
 8006080:	f7fd fb1e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006084:	e0a0      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006086:	2118      	movs	r1, #24
 8006088:	187b      	adds	r3, r7, r1
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	001a      	movs	r2, r3
 800608e:	187b      	adds	r3, r7, r1
 8006090:	1c99      	adds	r1, r3, #2
 8006092:	4853      	ldr	r0, [pc, #332]	@ (80061e0 <ProcessCmd+0x1b4>)
 8006094:	230c      	movs	r3, #12
 8006096:	f7fd fb13 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800609a:	e095      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800609c:	2118      	movs	r1, #24
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	001a      	movs	r2, r3
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	1c99      	adds	r1, r3, #2
 80060a8:	484e      	ldr	r0, [pc, #312]	@ (80061e4 <ProcessCmd+0x1b8>)
 80060aa:	230c      	movs	r3, #12
 80060ac:	f7fd fb08 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b0:	e08a      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060b2:	2118      	movs	r1, #24
 80060b4:	187b      	adds	r3, r7, r1
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	001a      	movs	r2, r3
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	1c99      	adds	r1, r3, #2
 80060be:	484a      	ldr	r0, [pc, #296]	@ (80061e8 <ProcessCmd+0x1bc>)
 80060c0:	230c      	movs	r3, #12
 80060c2:	f7fd fafd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060c6:	e07f      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060c8:	2118      	movs	r1, #24
 80060ca:	187b      	adds	r3, r7, r1
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	001a      	movs	r2, r3
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	1c99      	adds	r1, r3, #2
 80060d4:	4845      	ldr	r0, [pc, #276]	@ (80061ec <ProcessCmd+0x1c0>)
 80060d6:	230c      	movs	r3, #12
 80060d8:	f7fd faf2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060dc:	e074      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060de:	2118      	movs	r1, #24
 80060e0:	187b      	adds	r3, r7, r1
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	001a      	movs	r2, r3
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	1c99      	adds	r1, r3, #2
 80060ea:	4841      	ldr	r0, [pc, #260]	@ (80061f0 <ProcessCmd+0x1c4>)
 80060ec:	230c      	movs	r3, #12
 80060ee:	f7fd fae7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060f2:	e069      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060f4:	2118      	movs	r1, #24
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	001a      	movs	r2, r3
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	1c99      	adds	r1, r3, #2
 8006100:	483c      	ldr	r0, [pc, #240]	@ (80061f4 <ProcessCmd+0x1c8>)
 8006102:	230c      	movs	r3, #12
 8006104:	f7fd fadc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006108:	e05e      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800610a:	2118      	movs	r1, #24
 800610c:	187b      	adds	r3, r7, r1
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	001a      	movs	r2, r3
 8006112:	187b      	adds	r3, r7, r1
 8006114:	1c99      	adds	r1, r3, #2
 8006116:	4838      	ldr	r0, [pc, #224]	@ (80061f8 <ProcessCmd+0x1cc>)
 8006118:	231e      	movs	r3, #30
 800611a:	f7fd fad1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800611e:	e053      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006120:	2118      	movs	r1, #24
 8006122:	187b      	adds	r3, r7, r1
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	001a      	movs	r2, r3
 8006128:	187b      	adds	r3, r7, r1
 800612a:	1c99      	adds	r1, r3, #2
 800612c:	4833      	ldr	r0, [pc, #204]	@ (80061fc <ProcessCmd+0x1d0>)
 800612e:	230c      	movs	r3, #12
 8006130:	f7fd fac6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006134:	e048      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006136:	2118      	movs	r1, #24
 8006138:	187b      	adds	r3, r7, r1
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	001a      	movs	r2, r3
 800613e:	187b      	adds	r3, r7, r1
 8006140:	1c99      	adds	r1, r3, #2
 8006142:	482f      	ldr	r0, [pc, #188]	@ (8006200 <ProcessCmd+0x1d4>)
 8006144:	230c      	movs	r3, #12
 8006146:	f7fd fabb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800614a:	e03d      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800614c:	2118      	movs	r1, #24
 800614e:	187b      	adds	r3, r7, r1
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	001a      	movs	r2, r3
 8006154:	187b      	adds	r3, r7, r1
 8006156:	1c99      	adds	r1, r3, #2
 8006158:	482a      	ldr	r0, [pc, #168]	@ (8006204 <ProcessCmd+0x1d8>)
 800615a:	230c      	movs	r3, #12
 800615c:	f7fd fab0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006160:	e032      	b.n	80061c8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006162:	2118      	movs	r1, #24
 8006164:	187b      	adds	r3, r7, r1
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	001a      	movs	r2, r3
 800616a:	187b      	adds	r3, r7, r1
 800616c:	1c99      	adds	r1, r3, #2
 800616e:	4826      	ldr	r0, [pc, #152]	@ (8006208 <ProcessCmd+0x1dc>)
 8006170:	230c      	movs	r3, #12
 8006172:	f7fd faa5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006176:	e027      	b.n	80061c8 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006178:	4b18      	ldr	r3, [pc, #96]	@ (80061dc <ProcessCmd+0x1b0>)
 800617a:	21ba      	movs	r1, #186	@ 0xba
 800617c:	0018      	movs	r0, r3
 800617e:	f7fd fae4 	bl	800374a <ClearEEprom>
        break;
 8006182:	e021      	b.n	80061c8 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006184:	2118      	movs	r1, #24
 8006186:	187b      	adds	r3, r7, r1
 8006188:	789b      	ldrb	r3, [r3, #2]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	b21a      	sxth	r2, r3
 800618e:	187b      	adds	r3, r7, r1
 8006190:	78db      	ldrb	r3, [r3, #3]
 8006192:	b21b      	sxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b21a      	sxth	r2, r3
 8006198:	1dbb      	adds	r3, r7, #6
 800619a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800619c:	1dbb      	adds	r3, r7, #6
 800619e:	881a      	ldrh	r2, [r3, #0]
 80061a0:	23c0      	movs	r3, #192	@ 0xc0
 80061a2:	015b      	lsls	r3, r3, #5
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d207      	bcs.n	80061b8 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 80061a8:	1dbb      	adds	r3, r7, #6
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	4a0b      	ldr	r2, [pc, #44]	@ (80061dc <ProcessCmd+0x1b0>)
 80061ae:	0019      	movs	r1, r3
 80061b0:	0010      	movs	r0, r2
 80061b2:	f7fd faca 	bl	800374a <ClearEEprom>
            break;
 80061b6:	e006      	b.n	80061c6 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80061b8:	23c0      	movs	r3, #192	@ 0xc0
 80061ba:	015b      	lsls	r3, r3, #5
 80061bc:	4a07      	ldr	r2, [pc, #28]	@ (80061dc <ProcessCmd+0x1b0>)
 80061be:	0019      	movs	r1, r3
 80061c0:	0010      	movs	r0, r2
 80061c2:	f7fd fac2 	bl	800374a <ClearEEprom>
            break;
 80061c6:	46c0      	nop			@ (mov r8, r8)
}
 80061c8:	46c0      	nop			@ (mov r8, r8)
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b002      	add	sp, #8
 80061ce:	bcb0      	pop	{r4, r5, r7}
 80061d0:	bc08      	pop	{r3}
 80061d2:	b004      	add	sp, #16
 80061d4:	4718      	bx	r3
 80061d6:	46c0      	nop			@ (mov r8, r8)
 80061d8:	080253c0 	.word	0x080253c0
 80061dc:	08080000 	.word	0x08080000
 80061e0:	0808000c 	.word	0x0808000c
 80061e4:	08080018 	.word	0x08080018
 80061e8:	08080024 	.word	0x08080024
 80061ec:	08080030 	.word	0x08080030
 80061f0:	0808003c 	.word	0x0808003c
 80061f4:	08080048 	.word	0x08080048
 80061f8:	08080090 	.word	0x08080090
 80061fc:	08080078 	.word	0x08080078
 8006200:	0808006c 	.word	0x0808006c
 8006204:	08080060 	.word	0x08080060
 8006208:	08080054 	.word	0x08080054

0800620c <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 800620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6039      	str	r1, [r7, #0]
 8006214:	0011      	movs	r1, r2
 8006216:	1dfb      	adds	r3, r7, #7
 8006218:	1c02      	adds	r2, r0, #0
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	1dbb      	adds	r3, r7, #6
 800621e:	1c0a      	adds	r2, r1, #0
 8006220:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8006222:	2223      	movs	r2, #35	@ 0x23
 8006224:	4b20      	ldr	r3, [pc, #128]	@ (80062a8 <Create_Message+0x9c>)
 8006226:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8006228:	4b1f      	ldr	r3, [pc, #124]	@ (80062a8 <Create_Message+0x9c>)
 800622a:	1dfa      	adds	r2, r7, #7
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006230:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <Create_Message+0x9c>)
 8006232:	1dba      	adds	r2, r7, #6
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006238:	1dbb      	adds	r3, r7, #6
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <Create_Message+0xa0>)
 8006240:	0018      	movs	r0, r3
 8006242:	f01a f881 	bl	8020348 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8006246:	1dbb      	adds	r3, r7, #6
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	b29a      	uxth	r2, r3
 800624c:	250e      	movs	r5, #14
 800624e:	197b      	adds	r3, r7, r5
 8006250:	3203      	adds	r2, #3
 8006252:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006254:	260c      	movs	r6, #12
 8006256:	19bc      	adds	r4, r7, r6
 8006258:	197b      	adds	r3, r7, r5
 800625a:	881a      	ldrh	r2, [r3, #0]
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <Create_Message+0x9c>)
 800625e:	0011      	movs	r1, r2
 8006260:	0018      	movs	r0, r3
 8006262:	f000 f825 	bl	80062b0 <CRC16_ARC>
 8006266:	0003      	movs	r3, r0
 8006268:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800626a:	0030      	movs	r0, r6
 800626c:	183b      	adds	r3, r7, r0
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	b29a      	uxth	r2, r3
 8006274:	197b      	adds	r3, r7, r5
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b2d1      	uxtb	r1, r2
 800627a:	4a0b      	ldr	r2, [pc, #44]	@ (80062a8 <Create_Message+0x9c>)
 800627c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800627e:	197b      	adds	r3, r7, r5
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	183a      	adds	r2, r7, r0
 8006286:	8812      	ldrh	r2, [r2, #0]
 8006288:	b2d1      	uxtb	r1, r2
 800628a:	4a07      	ldr	r2, [pc, #28]	@ (80062a8 <Create_Message+0x9c>)
 800628c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800628e:	197b      	adds	r3, r7, r5
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	3302      	adds	r3, #2
 8006294:	b29a      	uxth	r2, r3
 8006296:	4b04      	ldr	r3, [pc, #16]	@ (80062a8 <Create_Message+0x9c>)
 8006298:	0011      	movs	r1, r2
 800629a:	0018      	movs	r0, r3
 800629c:	f016 fd26 	bl	801ccec <CDC_Transmit_FS>
}
 80062a0:	46c0      	nop			@ (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b005      	add	sp, #20
 80062a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a8:	20000c44 	.word	0x20000c44
 80062ac:	20000c47 	.word	0x20000c47

080062b0 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	000a      	movs	r2, r1
 80062ba:	1cbb      	adds	r3, r7, #2
 80062bc:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80062be:	2316      	movs	r3, #22
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2200      	movs	r2, #0
 80062c4:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	e02e      	b.n	800632a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	0019      	movs	r1, r3
 80062d6:	2216      	movs	r2, #22
 80062d8:	18bb      	adds	r3, r7, r2
 80062da:	18ba      	adds	r2, r7, r2
 80062dc:	8812      	ldrh	r2, [r2, #0]
 80062de:	404a      	eors	r2, r1
 80062e0:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e01a      	b.n	800631e <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80062e8:	2116      	movs	r1, #22
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	4013      	ands	r3, r2
 80062f2:	d00b      	beq.n	800630c <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	187a      	adds	r2, r7, r1
 80062f8:	8812      	ldrh	r2, [r2, #0]
 80062fa:	0852      	lsrs	r2, r2, #1
 80062fc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80062fe:	187b      	adds	r3, r7, r1
 8006300:	187a      	adds	r2, r7, r1
 8006302:	8812      	ldrh	r2, [r2, #0]
 8006304:	490f      	ldr	r1, [pc, #60]	@ (8006344 <CRC16_ARC+0x94>)
 8006306:	404a      	eors	r2, r1
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e005      	b.n	8006318 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 800630c:	2216      	movs	r2, #22
 800630e:	18bb      	adds	r3, r7, r2
 8006310:	18ba      	adds	r2, r7, r2
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	0852      	lsrs	r2, r2, #1
 8006316:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b07      	cmp	r3, #7
 8006322:	dde1      	ble.n	80062e8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	3301      	adds	r3, #1
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	1cbb      	adds	r3, r7, #2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	dbcb      	blt.n	80062cc <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8006334:	2316      	movs	r3, #22
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	881b      	ldrh	r3, [r3, #0]
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b006      	add	sp, #24
 8006340:	bd80      	pop	{r7, pc}
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	ffffa001 	.word	0xffffa001

08006348 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 800634c:	4b26      	ldr	r3, [pc, #152]	@ (80063e8 <ReadBatteryVoltage+0xa0>)
 800634e:	4a27      	ldr	r2, [pc, #156]	@ (80063ec <ReadBatteryVoltage+0xa4>)
 8006350:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006352:	4b25      	ldr	r3, [pc, #148]	@ (80063e8 <ReadBatteryVoltage+0xa0>)
 8006354:	2280      	movs	r2, #128	@ 0x80
 8006356:	0152      	lsls	r2, r2, #5
 8006358:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800635a:	4a23      	ldr	r2, [pc, #140]	@ (80063e8 <ReadBatteryVoltage+0xa0>)
 800635c:	4b24      	ldr	r3, [pc, #144]	@ (80063f0 <ReadBatteryVoltage+0xa8>)
 800635e:	0011      	movs	r1, r2
 8006360:	0018      	movs	r0, r3
 8006362:	f008 ff95 	bl	800f290 <HAL_ADC_ConfigChannel>
 8006366:	1e03      	subs	r3, r0, #0
 8006368:	d001      	beq.n	800636e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800636a:	f001 ffc9 	bl	8008300 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800636e:	4b20      	ldr	r3, [pc, #128]	@ (80063f0 <ReadBatteryVoltage+0xa8>)
 8006370:	0018      	movs	r0, r3
 8006372:	f008 fe91 	bl	800f098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006376:	4b1e      	ldr	r3, [pc, #120]	@ (80063f0 <ReadBatteryVoltage+0xa8>)
 8006378:	2101      	movs	r1, #1
 800637a:	0018      	movs	r0, r3
 800637c:	f008 fee0 	bl	800f140 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006380:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <ReadBatteryVoltage+0xa8>)
 8006382:	0018      	movs	r0, r3
 8006384:	f008 ff78 	bl	800f278 <HAL_ADC_GetValue>
 8006388:	0002      	movs	r2, r0
 800638a:	4b1a      	ldr	r3, [pc, #104]	@ (80063f4 <ReadBatteryVoltage+0xac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4353      	muls	r3, r2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4919      	ldr	r1, [pc, #100]	@ (80063f8 <ReadBatteryVoltage+0xb0>)
 8006394:	0018      	movs	r0, r3
 8006396:	f7f9 ff05 	bl	80001a4 <__udivsi3>
 800639a:	0003      	movs	r3, r0
 800639c:	001a      	movs	r2, r3
 800639e:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <ReadBatteryVoltage+0xb4>)
 80063a0:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 80063a2:	4b16      	ldr	r3, [pc, #88]	@ (80063fc <ReadBatteryVoltage+0xb4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7fb f95e 	bl	8001668 <__aeabi_ui2f>
 80063ac:	1c03      	adds	r3, r0, #0
 80063ae:	4914      	ldr	r1, [pc, #80]	@ (8006400 <ReadBatteryVoltage+0xb8>)
 80063b0:	1c18      	adds	r0, r3, #0
 80063b2:	f7fa fc0f 	bl	8000bd4 <__aeabi_fdiv>
 80063b6:	1c03      	adds	r3, r0, #0
 80063b8:	1c1a      	adds	r2, r3, #0
 80063ba:	4b12      	ldr	r3, [pc, #72]	@ (8006404 <ReadBatteryVoltage+0xbc>)
 80063bc:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <ReadBatteryVoltage+0xa0>)
 80063c0:	4a0a      	ldr	r2, [pc, #40]	@ (80063ec <ReadBatteryVoltage+0xa4>)
 80063c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80063c4:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <ReadBatteryVoltage+0xa0>)
 80063c6:	4a10      	ldr	r2, [pc, #64]	@ (8006408 <ReadBatteryVoltage+0xc0>)
 80063c8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063ca:	4a07      	ldr	r2, [pc, #28]	@ (80063e8 <ReadBatteryVoltage+0xa0>)
 80063cc:	4b08      	ldr	r3, [pc, #32]	@ (80063f0 <ReadBatteryVoltage+0xa8>)
 80063ce:	0011      	movs	r1, r2
 80063d0:	0018      	movs	r0, r3
 80063d2:	f008 ff5d 	bl	800f290 <HAL_ADC_ConfigChannel>
 80063d6:	1e03      	subs	r3, r0, #0
 80063d8:	d001      	beq.n	80063de <ReadBatteryVoltage+0x96>
    Error_Handler();
 80063da:	f001 ff91 	bl	8008300 <Error_Handler>
  }
  return trueValue;
 80063de:	4b09      	ldr	r3, [pc, #36]	@ (8006404 <ReadBatteryVoltage+0xbc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 }
 80063e2:	1c18      	adds	r0, r3, #0
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000d4c 	.word	0x20000d4c
 80063ec:	38004000 	.word	0x38004000
 80063f0:	20000d88 	.word	0x20000d88
 80063f4:	20000034 	.word	0x20000034
 80063f8:	00000fff 	.word	0x00000fff
 80063fc:	20000d54 	.word	0x20000d54
 8006400:	447a0000 	.word	0x447a0000
 8006404:	20000d58 	.word	0x20000d58
 8006408:	00001001 	.word	0x00001001

0800640c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006410:	4b21      	ldr	r3, [pc, #132]	@ (8006498 <ReadSolarVoltage+0x8c>)
 8006412:	4a22      	ldr	r2, [pc, #136]	@ (800649c <ReadSolarVoltage+0x90>)
 8006414:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006416:	4b20      	ldr	r3, [pc, #128]	@ (8006498 <ReadSolarVoltage+0x8c>)
 8006418:	2280      	movs	r2, #128	@ 0x80
 800641a:	0152      	lsls	r2, r2, #5
 800641c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800641e:	4a1e      	ldr	r2, [pc, #120]	@ (8006498 <ReadSolarVoltage+0x8c>)
 8006420:	4b1f      	ldr	r3, [pc, #124]	@ (80064a0 <ReadSolarVoltage+0x94>)
 8006422:	0011      	movs	r1, r2
 8006424:	0018      	movs	r0, r3
 8006426:	f008 ff33 	bl	800f290 <HAL_ADC_ConfigChannel>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d001      	beq.n	8006432 <ReadSolarVoltage+0x26>
    Error_Handler();
 800642e:	f001 ff67 	bl	8008300 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006432:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <ReadSolarVoltage+0x94>)
 8006434:	0018      	movs	r0, r3
 8006436:	f008 fe2f 	bl	800f098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800643a:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <ReadSolarVoltage+0x94>)
 800643c:	2101      	movs	r1, #1
 800643e:	0018      	movs	r0, r3
 8006440:	f008 fe7e 	bl	800f140 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006444:	4b16      	ldr	r3, [pc, #88]	@ (80064a0 <ReadSolarVoltage+0x94>)
 8006446:	0018      	movs	r0, r3
 8006448:	f008 ff16 	bl	800f278 <HAL_ADC_GetValue>
 800644c:	0002      	movs	r2, r0
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <ReadSolarVoltage+0x98>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	435a      	muls	r2, r3
 8006454:	0013      	movs	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	189b      	adds	r3, r3, r2
 800645a:	4913      	ldr	r1, [pc, #76]	@ (80064a8 <ReadSolarVoltage+0x9c>)
 800645c:	0018      	movs	r0, r3
 800645e:	f7f9 fea1 	bl	80001a4 <__udivsi3>
 8006462:	0003      	movs	r3, r0
 8006464:	001a      	movs	r2, r3
 8006466:	4b11      	ldr	r3, [pc, #68]	@ (80064ac <ReadSolarVoltage+0xa0>)
 8006468:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800646a:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <ReadSolarVoltage+0x8c>)
 800646c:	4a0b      	ldr	r2, [pc, #44]	@ (800649c <ReadSolarVoltage+0x90>)
 800646e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006470:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <ReadSolarVoltage+0x8c>)
 8006472:	4a0f      	ldr	r2, [pc, #60]	@ (80064b0 <ReadSolarVoltage+0xa4>)
 8006474:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006476:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <ReadSolarVoltage+0x8c>)
 8006478:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <ReadSolarVoltage+0x94>)
 800647a:	0011      	movs	r1, r2
 800647c:	0018      	movs	r0, r3
 800647e:	f008 ff07 	bl	800f290 <HAL_ADC_ConfigChannel>
 8006482:	1e03      	subs	r3, r0, #0
 8006484:	d001      	beq.n	800648a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006486:	f001 ff3b 	bl	8008300 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800648a:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <ReadSolarVoltage+0xa0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 }
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	46c0      	nop			@ (mov r8, r8)
 8006498:	20000d4c 	.word	0x20000d4c
 800649c:	3c008000 	.word	0x3c008000
 80064a0:	20000d88 	.word	0x20000d88
 80064a4:	20000034 	.word	0x20000034
 80064a8:	00000fff 	.word	0x00000fff
 80064ac:	20000d5c 	.word	0x20000d5c
 80064b0:	00001001 	.word	0x00001001

080064b4 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80064b8:	23a0      	movs	r3, #160	@ 0xa0
 80064ba:	05db      	lsls	r3, r3, #23
 80064bc:	2180      	movs	r1, #128	@ 0x80
 80064be:	0018      	movs	r0, r3
 80064c0:	f009 fe82 	bl	80101c8 <HAL_GPIO_ReadPin>
 80064c4:	0003      	movs	r3, r0
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	4193      	sbcs	r3, r2
 80064ca:	b2db      	uxtb	r3, r3
}
 80064cc:	0018      	movs	r0, r3
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80064d2:	b580      	push	{r7, lr}
 80064d4:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80064d6:	2380      	movs	r3, #128	@ 0x80
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	23a0      	movs	r3, #160	@ 0xa0
 80064dc:	05db      	lsls	r3, r3, #23
 80064de:	0011      	movs	r1, r2
 80064e0:	0018      	movs	r0, r3
 80064e2:	f009 fe71 	bl	80101c8 <HAL_GPIO_ReadPin>
 80064e6:	0003      	movs	r3, r0
 80064e8:	1e5a      	subs	r2, r3, #1
 80064ea:	4193      	sbcs	r3, r2
 80064ec:	b2db      	uxtb	r3, r3
}
 80064ee:	0018      	movs	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <UserButton_Pressed+0x1c>)
 80064fa:	2104      	movs	r1, #4
 80064fc:	0018      	movs	r0, r3
 80064fe:	f009 fe63 	bl	80101c8 <HAL_GPIO_ReadPin>
 8006502:	0003      	movs	r3, r0
 8006504:	425a      	negs	r2, r3
 8006506:	4153      	adcs	r3, r2
 8006508:	b2db      	uxtb	r3, r3
}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	50000c00 	.word	0x50000c00

08006514 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006516:	46d6      	mov	lr, sl
 8006518:	464f      	mov	r7, r9
 800651a:	4646      	mov	r6, r8
 800651c:	b5c0      	push	{r6, r7, lr}
 800651e:	b08e      	sub	sp, #56	@ 0x38
 8006520:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006522:	4b21      	ldr	r3, [pc, #132]	@ (80065a8 <showTime+0x94>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d036      	beq.n	8006598 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800652a:	003a      	movs	r2, r7
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	0011      	movs	r1, r2
 8006530:	0018      	movs	r0, r3
 8006532:	f000 fa2b 	bl	800698c <RTC_GetTime>
  UpdateSystemUptime();
 8006536:	f000 f83f 	bl	80065b8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800653a:	003b      	movs	r3, r7
 800653c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800653e:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006540:	003b      	movs	r3, r7
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006546:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <showTime+0x98>)
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800654c:	003b      	movs	r3, r7
 800654e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006550:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006556:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800655c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006562:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006564:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <showTime+0x9c>)
 8006566:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006568:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800656a:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <showTime+0x9c>)
 800656c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800656e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006570:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <showTime+0x9c>)
 8006572:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006574:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006576:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <showTime+0x9c>)
 8006578:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800657a:	480e      	ldr	r0, [pc, #56]	@ (80065b4 <showTime+0xa0>)
 800657c:	9306      	str	r3, [sp, #24]
 800657e:	4643      	mov	r3, r8
 8006580:	9305      	str	r3, [sp, #20]
 8006582:	4663      	mov	r3, ip
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	9603      	str	r6, [sp, #12]
 8006588:	9502      	str	r5, [sp, #8]
 800658a:	9401      	str	r4, [sp, #4]
 800658c:	9100      	str	r1, [sp, #0]
 800658e:	4653      	mov	r3, sl
 8006590:	4649      	mov	r1, r9
 8006592:	f019 fc49 	bl	801fe28 <iprintf>
 8006596:	e000      	b.n	800659a <showTime+0x86>
    return;
 8006598:	46c0      	nop			@ (mov r8, r8)
}
 800659a:	46bd      	mov	sp, r7
 800659c:	b006      	add	sp, #24
 800659e:	bce0      	pop	{r5, r6, r7}
 80065a0:	46ba      	mov	sl, r7
 80065a2:	46b1      	mov	r9, r6
 80065a4:	46a8      	mov	r8, r5
 80065a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a8:	20000d6c 	.word	0x20000d6c
 80065ac:	20000054 	.word	0x20000054
 80065b0:	20000d60 	.word	0x20000d60
 80065b4:	08023c9c 	.word	0x08023c9c

080065b8 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80065be:	003a      	movs	r2, r7
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 f9e1 	bl	800698c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80065ca:	1d3a      	adds	r2, r7, #4
 80065cc:	003b      	movs	r3, r7
 80065ce:	0011      	movs	r1, r2
 80065d0:	0018      	movs	r0, r3
 80065d2:	f000 fba1 	bl	8006d18 <makeTime>
 80065d6:	0002      	movs	r2, r0
 80065d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006654 <UpdateSystemUptime+0x9c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	213c      	movs	r1, #60	@ 0x3c
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7f9 fe61 	bl	80002b0 <__aeabi_uidivmod>
 80065ee:	000b      	movs	r3, r1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b19      	ldr	r3, [pc, #100]	@ (8006658 <UpdateSystemUptime+0xa0>)
 80065f4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	213c      	movs	r1, #60	@ 0x3c
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7f9 fdd2 	bl	80001a4 <__udivsi3>
 8006600:	0003      	movs	r3, r0
 8006602:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	213c      	movs	r1, #60	@ 0x3c
 8006608:	0018      	movs	r0, r3
 800660a:	f7f9 fe51 	bl	80002b0 <__aeabi_uidivmod>
 800660e:	000b      	movs	r3, r1
 8006610:	b2da      	uxtb	r2, r3
 8006612:	4b11      	ldr	r3, [pc, #68]	@ (8006658 <UpdateSystemUptime+0xa0>)
 8006614:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	213c      	movs	r1, #60	@ 0x3c
 800661a:	0018      	movs	r0, r3
 800661c:	f7f9 fdc2 	bl	80001a4 <__udivsi3>
 8006620:	0003      	movs	r3, r0
 8006622:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2118      	movs	r1, #24
 8006628:	0018      	movs	r0, r3
 800662a:	f7f9 fe41 	bl	80002b0 <__aeabi_uidivmod>
 800662e:	000b      	movs	r3, r1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b09      	ldr	r3, [pc, #36]	@ (8006658 <UpdateSystemUptime+0xa0>)
 8006634:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2118      	movs	r1, #24
 800663a:	0018      	movs	r0, r3
 800663c:	f7f9 fdb2 	bl	80001a4 <__udivsi3>
 8006640:	0003      	movs	r3, r0
 8006642:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	b29a      	uxth	r2, r3
 8006648:	4b03      	ldr	r3, [pc, #12]	@ (8006658 <UpdateSystemUptime+0xa0>)
 800664a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800664c:	46c0      	nop			@ (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	b008      	add	sp, #32
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000d6c 	.word	0x20000d6c
 8006658:	20000d60 	.word	0x20000d60

0800665c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	0008      	movs	r0, r1
 8006666:	0011      	movs	r1, r2
 8006668:	1cfb      	adds	r3, r7, #3
 800666a:	1c02      	adds	r2, r0, #0
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	1cbb      	adds	r3, r7, #2
 8006670:	1c0a      	adds	r2, r1, #0
 8006672:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006674:	230e      	movs	r3, #14
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800667c:	230f      	movs	r3, #15
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	1cfa      	adds	r2, r7, #3
 8006682:	7812      	ldrb	r2, [r2, #0]
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e015      	b.n	80066b4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006688:	200f      	movs	r0, #15
 800668a:	183b      	adds	r3, r7, r0
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	18d2      	adds	r2, r2, r3
 8006692:	240e      	movs	r4, #14
 8006694:	193b      	adds	r3, r7, r4
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	7811      	ldrb	r1, [r2, #0]
 800669a:	2208      	movs	r2, #8
 800669c:	18ba      	adds	r2, r7, r2
 800669e:	54d1      	strb	r1, [r2, r3]
    pos++;
 80066a0:	193b      	adds	r3, r7, r4
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	193b      	adds	r3, r7, r4
 80066a6:	3201      	adds	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80066aa:	183b      	adds	r3, r7, r0
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	3201      	adds	r2, #1
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	200f      	movs	r0, #15
 80066b6:	183a      	adds	r2, r7, r0
 80066b8:	1cbb      	adds	r3, r7, #2
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d9e2      	bls.n	8006688 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80066c2:	230e      	movs	r3, #14
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2208      	movs	r2, #8
 80066ca:	18ba      	adds	r2, r7, r2
 80066cc:	2100      	movs	r1, #0
 80066ce:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80066d0:	1cfb      	adds	r3, r7, #3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b13      	cmp	r3, #19
 80066d6:	d849      	bhi.n	800676c <aBuff2int+0x110>
    if (start == 17) { //month
 80066d8:	1cfb      	adds	r3, r7, #3
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b11      	cmp	r3, #17
 80066de:	d122      	bne.n	8006726 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80066e0:	183b      	adds	r3, r7, r0
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	e018      	b.n	800671a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80066e8:	240f      	movs	r4, #15
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	4b25      	ldr	r3, [pc, #148]	@ (8006784 <aBuff2int+0x128>)
 80066f0:	0092      	lsls	r2, r2, #2
 80066f2:	58d2      	ldr	r2, [r2, r3]
 80066f4:	2308      	movs	r3, #8
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	0011      	movs	r1, r2
 80066fa:	0018      	movs	r0, r3
 80066fc:	f7f9 fd2c 	bl	8000158 <strcmp>
 8006700:	1e03      	subs	r3, r0, #0
 8006702:	d104      	bne.n	800670e <aBuff2int+0xb2>
          return i+1;
 8006704:	193b      	adds	r3, r7, r4
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e035      	b.n	800677a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800670e:	210f      	movs	r1, #15
 8006710:	187b      	adds	r3, r7, r1
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	187b      	adds	r3, r7, r1
 8006716:	3201      	adds	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	230f      	movs	r3, #15
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b0b      	cmp	r3, #11
 8006722:	d9e1      	bls.n	80066e8 <aBuff2int+0x8c>
 8006724:	e022      	b.n	800676c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006726:	230f      	movs	r3, #15
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e018      	b.n	8006762 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006730:	240f      	movs	r4, #15
 8006732:	193b      	adds	r3, r7, r4
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	4b14      	ldr	r3, [pc, #80]	@ (8006788 <aBuff2int+0x12c>)
 8006738:	0092      	lsls	r2, r2, #2
 800673a:	58d2      	ldr	r2, [r2, r3]
 800673c:	2308      	movs	r3, #8
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f7f9 fd08 	bl	8000158 <strcmp>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d104      	bne.n	8006756 <aBuff2int+0xfa>
          return i+1;
 800674c:	193b      	adds	r3, r7, r4
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	e011      	b.n	800677a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006756:	210f      	movs	r1, #15
 8006758:	187b      	adds	r3, r7, r1
 800675a:	781a      	ldrb	r2, [r3, #0]
 800675c:	187b      	adds	r3, r7, r1
 800675e:	3201      	adds	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	230f      	movs	r3, #15
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b06      	cmp	r3, #6
 800676a:	d9e1      	bls.n	8006730 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800676c:	2308      	movs	r3, #8
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	0018      	movs	r0, r3
 8006772:	f017 ff7e 	bl	801e672 <atoi>
 8006776:	0003      	movs	r3, r0
 8006778:	b2db      	uxtb	r3, r3
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b005      	add	sp, #20
 8006780:	bd90      	pop	{r4, r7, pc}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	20000054 	.word	0x20000054
 8006788:	20000038 	.word	0x20000038

0800678c <ParseTime>:

void ParseTime(char* buffer) {
 800678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678e:	b08b      	sub	sp, #44	@ 0x2c
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006794:	2408      	movs	r4, #8
 8006796:	193a      	adds	r2, r7, r4
 8006798:	260c      	movs	r6, #12
 800679a:	19bb      	adds	r3, r7, r6
 800679c:	0011      	movs	r1, r2
 800679e:	0018      	movs	r0, r3
 80067a0:	f000 f8f4 	bl	800698c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2219      	movs	r2, #25
 80067a8:	2118      	movs	r1, #24
 80067aa:	0018      	movs	r0, r3
 80067ac:	f7ff ff56 	bl	800665c <aBuff2int>
 80067b0:	0003      	movs	r3, r0
 80067b2:	001a      	movs	r2, r3
 80067b4:	19bb      	adds	r3, r7, r6
 80067b6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	221c      	movs	r2, #28
 80067bc:	211b      	movs	r1, #27
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff ff4c 	bl	800665c <aBuff2int>
 80067c4:	0003      	movs	r3, r0
 80067c6:	001a      	movs	r2, r3
 80067c8:	19bb      	adds	r3, r7, r6
 80067ca:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	221f      	movs	r2, #31
 80067d0:	211e      	movs	r1, #30
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7ff ff42 	bl	800665c <aBuff2int>
 80067d8:	0003      	movs	r3, r0
 80067da:	001a      	movs	r2, r3
 80067dc:	19bb      	adds	r3, r7, r6
 80067de:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2224      	movs	r2, #36	@ 0x24
 80067e4:	2123      	movs	r1, #35	@ 0x23
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7ff ff38 	bl	800665c <aBuff2int>
 80067ec:	0003      	movs	r3, r0
 80067ee:	001a      	movs	r2, r3
 80067f0:	0025      	movs	r5, r4
 80067f2:	197b      	adds	r3, r7, r5
 80067f4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2213      	movs	r2, #19
 80067fa:	2111      	movs	r1, #17
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff ff2d 	bl	800665c <aBuff2int>
 8006802:	0003      	movs	r3, r0
 8006804:	001a      	movs	r2, r3
 8006806:	197b      	adds	r3, r7, r5
 8006808:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2216      	movs	r2, #22
 800680e:	2115      	movs	r1, #21
 8006810:	0018      	movs	r0, r3
 8006812:	f7ff ff23 	bl	800665c <aBuff2int>
 8006816:	0003      	movs	r3, r0
 8006818:	001a      	movs	r2, r3
 800681a:	197b      	adds	r3, r7, r5
 800681c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	220f      	movs	r2, #15
 8006822:	210d      	movs	r1, #13
 8006824:	0018      	movs	r0, r3
 8006826:	f7ff ff19 	bl	800665c <aBuff2int>
 800682a:	0003      	movs	r3, r0
 800682c:	001a      	movs	r2, r3
 800682e:	197b      	adds	r3, r7, r5
 8006830:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006832:	19bb      	adds	r3, r7, r6
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	001c      	movs	r4, r3
 8006838:	19bb      	adds	r3, r7, r6
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	0018      	movs	r0, r3
 800683e:	19bb      	adds	r3, r7, r6
 8006840:	789b      	ldrb	r3, [r3, #2]
 8006842:	4a1c      	ldr	r2, [pc, #112]	@ (80068b4 <ParseTime+0x128>)
 8006844:	491c      	ldr	r1, [pc, #112]	@ (80068b8 <ParseTime+0x12c>)
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	9000      	str	r0, [sp, #0]
 800684a:	0023      	movs	r3, r4
 800684c:	2003      	movs	r0, #3
 800684e:	f007 fe01 	bl	800e454 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006852:	197b      	adds	r3, r7, r5
 8006854:	789b      	ldrb	r3, [r3, #2]
 8006856:	001c      	movs	r4, r3
 8006858:	197b      	adds	r3, r7, r5
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	0018      	movs	r0, r3
 800685e:	197b      	adds	r3, r7, r5
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <ParseTime+0x130>)
 8006864:	4914      	ldr	r1, [pc, #80]	@ (80068b8 <ParseTime+0x12c>)
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	9000      	str	r0, [sp, #0]
 800686a:	0023      	movs	r3, r4
 800686c:	2003      	movs	r0, #3
 800686e:	f007 fdf1 	bl	800e454 <CreateLine>
  RTC_SetTime(&currentTime);
 8006872:	19bb      	adds	r3, r7, r6
 8006874:	0018      	movs	r0, r3
 8006876:	f000 f825 	bl	80068c4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800687a:	197b      	adds	r3, r7, r5
 800687c:	0018      	movs	r0, r3
 800687e:	f000 f847 	bl	8006910 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006882:	197b      	adds	r3, r7, r5
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d101      	bne.n	800688e <ParseTime+0x102>
    reset_fanCleaningDone();
 800688a:	f002 fc8b 	bl	80091a4 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 800688e:	4b0c      	ldr	r3, [pc, #48]	@ (80068c0 <ParseTime+0x134>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006896:	230c      	movs	r3, #12
 8006898:	18fa      	adds	r2, r7, r3
 800689a:	2308      	movs	r3, #8
 800689c:	18fb      	adds	r3, r7, r3
 800689e:	0011      	movs	r1, r2
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 fa39 	bl	8006d18 <makeTime>
 80068a6:	0002      	movs	r2, r0
 80068a8:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <ParseTime+0x134>)
 80068aa:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 80068ac:	46c0      	nop			@ (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b009      	add	sp, #36	@ 0x24
 80068b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b4:	08023cf4 	.word	0x08023cf4
 80068b8:	08023d2c 	.word	0x08023d2c
 80068bc:	08023d30 	.word	0x08023d30
 80068c0:	20000d6c 	.word	0x20000d6c

080068c4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80068de:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <RTC_SetTime+0x40>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	0018      	movs	r0, r3
 80068e8:	f00f fb1a 	bl	8015f20 <HAL_RTC_SetTime>
 80068ec:	1e03      	subs	r3, r0, #0
 80068ee:	d005      	beq.n	80068fc <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80068f0:	4a05      	ldr	r2, [pc, #20]	@ (8006908 <RTC_SetTime+0x44>)
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <RTC_SetTime+0x48>)
 80068f4:	0019      	movs	r1, r3
 80068f6:	2001      	movs	r0, #1
 80068f8:	f007 fdac 	bl	800e454 <CreateLine>
    }
}
 80068fc:	46c0      	nop			@ (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b002      	add	sp, #8
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000d68 	.word	0x20000d68
 8006908:	08023d64 	.word	0x08023d64
 800690c:	08023d80 	.word	0x08023d80

08006910 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006918:	4b16      	ldr	r3, [pc, #88]	@ (8006974 <RTC_SetDate+0x64>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	0018      	movs	r0, r3
 8006922:	f00f fc05 	bl	8016130 <HAL_RTC_SetDate>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d005      	beq.n	8006936 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 800692a:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <RTC_SetDate+0x68>)
 800692c:	4b13      	ldr	r3, [pc, #76]	@ (800697c <RTC_SetDate+0x6c>)
 800692e:	0019      	movs	r1, r3
 8006930:	2001      	movs	r0, #1
 8006932:	f007 fd8f 	bl	800e454 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <RTC_SetDate+0x64>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2101      	movs	r1, #1
 800693c:	0018      	movs	r0, r3
 800693e:	f00f ff3d 	bl	80167bc <HAL_RTCEx_BKUPRead>
 8006942:	0003      	movs	r3, r0
 8006944:	4a0e      	ldr	r2, [pc, #56]	@ (8006980 <RTC_SetDate+0x70>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d010      	beq.n	800696c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800694a:	4a0e      	ldr	r2, [pc, #56]	@ (8006984 <RTC_SetDate+0x74>)
 800694c:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <RTC_SetDate+0x78>)
 800694e:	0019      	movs	r1, r3
 8006950:	2003      	movs	r0, #3
 8006952:	f007 fd7f 	bl	800e454 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006956:	f00e fa63 	bl	8014e20 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800695a:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <RTC_SetDate+0x64>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a08      	ldr	r2, [pc, #32]	@ (8006980 <RTC_SetDate+0x70>)
 8006960:	2101      	movs	r1, #1
 8006962:	0018      	movs	r0, r3
 8006964:	f00f ff12 	bl	801678c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006968:	f00e fa68 	bl	8014e3c <HAL_PWR_DisableBkUpAccess>
    }
}
 800696c:	46c0      	nop			@ (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	b002      	add	sp, #8
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000d68 	.word	0x20000d68
 8006978:	08023d84 	.word	0x08023d84
 800697c:	08023d80 	.word	0x08023d80
 8006980:	0000bebe 	.word	0x0000bebe
 8006984:	08023da0 	.word	0x08023da0
 8006988:	08023d2c 	.word	0x08023d2c

0800698c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006996:	250f      	movs	r5, #15
 8006998:	197b      	adds	r3, r7, r5
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800699e:	230e      	movs	r3, #14
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 80069a6:	260c      	movs	r6, #12
 80069a8:	19bc      	adds	r4, r7, r6
 80069aa:	f006 fdff 	bl	800d5ac <powerCheck>
 80069ae:	0003      	movs	r3, r0
 80069b0:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80069b2:	19bb      	adds	r3, r7, r6
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80069ba:	197b      	adds	r3, r7, r5
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	197b      	adds	r3, r7, r5
 80069c0:	3201      	adds	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80069c4:	230d      	movs	r3, #13
 80069c6:	18fb      	adds	r3, r7, r3
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e039      	b.n	8006a42 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80069ce:	4b23      	ldr	r3, [pc, #140]	@ (8006a5c <RTC_GetTime+0xd0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	0018      	movs	r0, r3
 80069d8:	f00f fb4c 	bl	8016074 <HAL_RTC_GetTime>
 80069dc:	1e03      	subs	r3, r0, #0
 80069de:	d005      	beq.n	80069ec <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80069e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <RTC_GetTime+0xd4>)
 80069e2:	4b20      	ldr	r3, [pc, #128]	@ (8006a64 <RTC_GetTime+0xd8>)
 80069e4:	0019      	movs	r1, r3
 80069e6:	2001      	movs	r0, #1
 80069e8:	f007 fd34 	bl	800e454 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80069ec:	4b1b      	ldr	r3, [pc, #108]	@ (8006a5c <RTC_GetTime+0xd0>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	0018      	movs	r0, r3
 80069f6:	f00f fc2f 	bl	8016258 <HAL_RTC_GetDate>
 80069fa:	1e03      	subs	r3, r0, #0
 80069fc:	d005      	beq.n	8006a0a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80069fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <RTC_GetTime+0xdc>)
 8006a00:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <RTC_GetTime+0xd8>)
 8006a02:	0019      	movs	r1, r3
 8006a04:	2001      	movs	r0, #1
 8006a06:	f007 fd25 	bl	800e454 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d110      	bne.n	8006a36 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	210e      	movs	r1, #14
 8006a1a:	187a      	adds	r2, r7, r1
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d018      	beq.n	8006a54 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7812      	ldrb	r2, [r2, #0]
 8006a28:	701a      	strb	r2, [r3, #0]
        t++;
 8006a2a:	210f      	movs	r1, #15
 8006a2c:	187b      	adds	r3, r7, r1
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	3201      	adds	r2, #1
 8006a34:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8006a36:	210d      	movs	r1, #13
 8006a38:	187b      	adds	r3, r7, r1
 8006a3a:	781a      	ldrb	r2, [r3, #0]
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	3201      	adds	r2, #1
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	230d      	movs	r3, #13
 8006a44:	18fa      	adds	r2, r7, r3
 8006a46:	230f      	movs	r3, #15
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d3bd      	bcc.n	80069ce <RTC_GetTime+0x42>
 8006a52:	e000      	b.n	8006a56 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006a54:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b005      	add	sp, #20
 8006a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5c:	20000d68 	.word	0x20000d68
 8006a60:	08023db8 	.word	0x08023db8
 8006a64:	08023d80 	.word	0x08023d80
 8006a68:	08023dd4 	.word	0x08023dd4

08006a6c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a72:	003a      	movs	r2, r7
 8006a74:	1d3b      	adds	r3, r7, #4
 8006a76:	0011      	movs	r1, r2
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7ff ff87 	bl	800698c <RTC_GetTime>
  return currentDate.WeekDay;
 8006a7e:	003b      	movs	r3, r7
 8006a80:	781b      	ldrb	r3, [r3, #0]
}
 8006a82:	0018      	movs	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b006      	add	sp, #24
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a90:	003a      	movs	r2, r7
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	0011      	movs	r1, r2
 8006a96:	0018      	movs	r0, r3
 8006a98:	f7ff ff78 	bl	800698c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a9c:	1d3a      	adds	r2, r7, #4
 8006a9e:	003b      	movs	r3, r7
 8006aa0:	0011      	movs	r1, r2
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 f938 	bl	8006d18 <makeTime>
 8006aa8:	0003      	movs	r3, r0
}
 8006aaa:	0018      	movs	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b006      	add	sp, #24
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	b08d      	sub	sp, #52	@ 0x34
 8006ab8:	af04      	add	r7, sp, #16
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006abe:	240c      	movs	r4, #12
 8006ac0:	193a      	adds	r2, r7, r4
 8006ac2:	2508      	movs	r5, #8
 8006ac4:	1979      	adds	r1, r7, r5
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 f9ef 	bl	8006eac <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006ace:	002a      	movs	r2, r5
 8006ad0:	18bb      	adds	r3, r7, r2
 8006ad2:	789b      	ldrb	r3, [r3, #2]
 8006ad4:	001e      	movs	r6, r3
 8006ad6:	18bb      	adds	r3, r7, r2
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	469c      	mov	ip, r3
 8006adc:	18bb      	adds	r3, r7, r2
 8006ade:	78db      	ldrb	r3, [r3, #3]
 8006ae0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006ae2:	0021      	movs	r1, r4
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006ae8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aee:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006af0:	187b      	adds	r3, r7, r1
 8006af2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006af4:	4906      	ldr	r1, [pc, #24]	@ (8006b10 <getUTCfromPosixTime+0x5c>)
 8006af6:	6838      	ldr	r0, [r7, #0]
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	9502      	str	r5, [sp, #8]
 8006afc:	9401      	str	r4, [sp, #4]
 8006afe:	9200      	str	r2, [sp, #0]
 8006b00:	4663      	mov	r3, ip
 8006b02:	0032      	movs	r2, r6
 8006b04:	f019 fa00 	bl	801ff08 <siprintf>
}
 8006b08:	46c0      	nop			@ (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b009      	add	sp, #36	@ 0x24
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	08023df0 	.word	0x08023df0

08006b14 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b1c:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <RTC_SetWakeUpTimer+0x4c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f00f fd97 	bl	8016654 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006b26:	4b0e      	ldr	r3, [pc, #56]	@ (8006b60 <RTC_SetWakeUpTimer+0x4c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	22ff      	movs	r2, #255	@ 0xff
 8006b30:	401a      	ands	r2, r3
 8006b32:	4b0b      	ldr	r3, [pc, #44]	@ (8006b60 <RTC_SetWakeUpTimer+0x4c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	490a      	ldr	r1, [pc, #40]	@ (8006b64 <RTC_SetWakeUpTimer+0x50>)
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <RTC_SetWakeUpTimer+0x54>)
 8006b40:	2280      	movs	r2, #128	@ 0x80
 8006b42:	0352      	lsls	r2, r2, #13
 8006b44:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006b46:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <RTC_SetWakeUpTimer+0x4c>)
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	2204      	movs	r2, #4
 8006b50:	0019      	movs	r1, r3
 8006b52:	f00f fca7 	bl	80164a4 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	20000d68 	.word	0x20000d68
 8006b64:	fffffb7f 	.word	0xfffffb7f
 8006b68:	40010400 	.word	0x40010400

08006b6c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b70:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba4 <Enter_Standby_Mode+0x38>)
 8006b72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <Enter_Standby_Mode+0x3c>)
 8006b74:	0019      	movs	r1, r3
 8006b76:	2003      	movs	r0, #3
 8006b78:	f007 fc6c 	bl	800e454 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b7c:	2064      	movs	r0, #100	@ 0x64
 8006b7e:	f008 f8b9 	bl	800ecf4 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b82:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <Enter_Standby_Mode+0x40>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	0018      	movs	r0, r3
 8006b88:	f00f fd64 	bl	8016654 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006b8c:	f008 f8d6 	bl	800ed3c <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006b90:	f00e f9c0 	bl	8014f14 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006b94:	f001 fa6e 	bl	8008074 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006b98:	f008 f8de 	bl	800ed58 <HAL_ResumeTick>
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	46c0      	nop			@ (mov r8, r8)
 8006ba4:	08023e44 	.word	0x08023e44
 8006ba8:	08023d2c 	.word	0x08023d2c
 8006bac:	20000d68 	.word	0x20000d68

08006bb0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	1dbb      	adds	r3, r7, #6
 8006bba:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006bbc:	4b43      	ldr	r3, [pc, #268]	@ (8006ccc <Enter_Stop_Mode+0x11c>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006bc4:	f002 fac2 	bl	800914c <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006bc8:	f7ff fbbe 	bl	8006348 <ReadBatteryVoltage>
 8006bcc:	1c03      	adds	r3, r0, #0
 8006bce:	1c18      	adds	r0, r3, #0
 8006bd0:	f7fc fc48 	bl	8003464 <__aeabi_f2d>
 8006bd4:	0002      	movs	r2, r0
 8006bd6:	000b      	movs	r3, r1
 8006bd8:	483d      	ldr	r0, [pc, #244]	@ (8006cd0 <Enter_Stop_Mode+0x120>)
 8006bda:	493e      	ldr	r1, [pc, #248]	@ (8006cd4 <Enter_Stop_Mode+0x124>)
 8006bdc:	9200      	str	r2, [sp, #0]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	0002      	movs	r2, r0
 8006be2:	2002      	movs	r0, #2
 8006be4:	f007 fc36 	bl	800e454 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006be8:	1dbb      	adds	r3, r7, #6
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	4a3a      	ldr	r2, [pc, #232]	@ (8006cd8 <Enter_Stop_Mode+0x128>)
 8006bee:	493b      	ldr	r1, [pc, #236]	@ (8006cdc <Enter_Stop_Mode+0x12c>)
 8006bf0:	2003      	movs	r0, #3
 8006bf2:	f007 fc2f 	bl	800e454 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006bf6:	f7ff ff48 	bl	8006a8a <getPosixTime>
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	1dbb      	adds	r3, r7, #6
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	18d3      	adds	r3, r2, r3
 8006c02:	4a37      	ldr	r2, [pc, #220]	@ (8006ce0 <Enter_Stop_Mode+0x130>)
 8006c04:	0011      	movs	r1, r2
 8006c06:	0018      	movs	r0, r3
 8006c08:	f7ff ff54 	bl	8006ab4 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006c0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ce0 <Enter_Stop_Mode+0x130>)
 8006c0e:	4a35      	ldr	r2, [pc, #212]	@ (8006ce4 <Enter_Stop_Mode+0x134>)
 8006c10:	4930      	ldr	r1, [pc, #192]	@ (8006cd4 <Enter_Stop_Mode+0x124>)
 8006c12:	2002      	movs	r0, #2
 8006c14:	f007 fc1e 	bl	800e454 <CreateLine>
  HAL_Delay(100);
 8006c18:	2064      	movs	r0, #100	@ 0x64
 8006c1a:	f008 f86b 	bl	800ecf4 <HAL_Delay>
  HAL_SuspendTick();
 8006c1e:	f008 f88d 	bl	800ed3c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006c22:	1dbb      	adds	r3, r7, #6
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f7ff ff74 	bl	8006b14 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	2001      	movs	r0, #1
 8006c30:	f00e f914 	bl	8014e5c <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006c34:	f001 fa1e 	bl	8008074 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006c38:	1dbb      	adds	r3, r7, #6
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f002 fa13 	bl	8009068 <sen5x_enable>
 8006c42:	1e03      	subs	r3, r0, #0
 8006c44:	d01c      	beq.n	8006c80 <Enter_Stop_Mode+0xd0>
    showTime();
 8006c46:	f7ff fc65 	bl	8006514 <showTime>
    set_light_on_state();
 8006c4a:	f002 ff07 	bl	8009a5c <set_light_on_state>
    if (!userToggle) {
 8006c4e:	4b26      	ldr	r3, [pc, #152]	@ (8006ce8 <Enter_Stop_Mode+0x138>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2201      	movs	r2, #1
 8006c54:	4053      	eors	r3, r2
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d011      	beq.n	8006c80 <Enter_Stop_Mode+0xd0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006c5c:	201c      	movs	r0, #28
 8006c5e:	f7ff ff59 	bl	8006b14 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c62:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd8 <Enter_Stop_Mode+0x128>)
 8006c64:	491d      	ldr	r1, [pc, #116]	@ (8006cdc <Enter_Stop_Mode+0x12c>)
 8006c66:	231c      	movs	r3, #28
 8006c68:	2003      	movs	r0, #3
 8006c6a:	f007 fbf3 	bl	800e454 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c6e:	2101      	movs	r1, #1
 8006c70:	2001      	movs	r0, #1
 8006c72:	f00e f8f3 	bl	8014e5c <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c76:	f001 f9fd 	bl	8008074 <SystemClock_Config>
//      setsen5xReadTimer(2000);
      setsen5xReadTimer(0);
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f002 f9d2 	bl	8009024 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c80:	f008 f86a 	bl	800ed58 <HAL_ResumeTick>
  showTime();
 8006c84:	f7ff fc46 	bl	8006514 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c88:	f001 fe7a 	bl	8008980 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c8c:	f004 fd1a 	bl	800b6c4 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c90:	2000      	movs	r0, #0
 8006c92:	f002 f9d9 	bl	8009048 <setsen5xSamplecounter>
//  setESPTimeStamp(3000);
  setESPTimeStamp(2500);
 8006c96:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <Enter_Stop_Mode+0x13c>)
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7fc fd89 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f004 fcfe 	bl	800b6a0 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f007 fd99 	bl	800e7dc <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006caa:	2000      	movs	r0, #0
 8006cac:	f001 fe56 	bl	800895c <setMICTimeStamp>
  ESPTransmitDone = false;
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <Enter_Stop_Mode+0x140>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006cb6:	f008 f813 	bl	800ece0 <HAL_GetTick>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf4 <Enter_Stop_Mode+0x144>)
 8006cbe:	189a      	adds	r2, r3, r2
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <Enter_Stop_Mode+0x148>)
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	46c0      	nop			@ (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20001059 	.word	0x20001059
 8006cd0:	08023e68 	.word	0x08023e68
 8006cd4:	08023e80 	.word	0x08023e80
 8006cd8:	08023e84 	.word	0x08023e84
 8006cdc:	08023d2c 	.word	0x08023d2c
 8006ce0:	20000d70 	.word	0x20000d70
 8006ce4:	08023ea8 	.word	0x08023ea8
 8006ce8:	20001ff6 	.word	0x20001ff6
 8006cec:	000009c4 	.word	0x000009c4
 8006cf0:	20000554 	.word	0x20000554
 8006cf4:	000008fc 	.word	0x000008fc
 8006cf8:	20000fb8 	.word	0x20000fb8

08006cfc <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006d04:	4b03      	ldr	r3, [pc, #12]	@ (8006d14 <InitClock+0x18>)
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	46c0      	nop			@ (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b002      	add	sp, #8
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	20000d68 	.word	0x20000d68

08006d18 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	78db      	ldrb	r3, [r3, #3]
 8006d26:	001a      	movs	r2, r3
 8006d28:	0013      	movs	r3, r2
 8006d2a:	025b      	lsls	r3, r3, #9
 8006d2c:	189b      	adds	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	189b      	adds	r3, r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	189b      	adds	r3, r3, r2
 8006d36:	011a      	lsls	r2, r3, #4
 8006d38:	1ad2      	subs	r2, r2, r3
 8006d3a:	01d3      	lsls	r3, r2, #7
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e028      	b.n	8006d98 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a53      	ldr	r2, [pc, #332]	@ (8006e98 <makeTime+0x180>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	db21      	blt.n	8006d92 <makeTime+0x7a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a52      	ldr	r2, [pc, #328]	@ (8006e9c <makeTime+0x184>)
 8006d52:	4694      	mov	ip, r2
 8006d54:	4463      	add	r3, ip
 8006d56:	001a      	movs	r2, r3
 8006d58:	2303      	movs	r3, #3
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d119      	bne.n	8006d92 <makeTime+0x7a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4a4e      	ldr	r2, [pc, #312]	@ (8006e9c <makeTime+0x184>)
 8006d62:	4694      	mov	ip, r2
 8006d64:	4463      	add	r3, ip
 8006d66:	2164      	movs	r1, #100	@ 0x64
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7f9 fb8b 	bl	8000484 <__aeabi_idivmod>
 8006d6e:	1e0b      	subs	r3, r1, #0
 8006d70:	d10a      	bne.n	8006d88 <makeTime+0x70>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a49      	ldr	r2, [pc, #292]	@ (8006e9c <makeTime+0x184>)
 8006d76:	4694      	mov	ip, r2
 8006d78:	4463      	add	r3, ip
 8006d7a:	22c8      	movs	r2, #200	@ 0xc8
 8006d7c:	0051      	lsls	r1, r2, #1
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7f9 fb80 	bl	8000484 <__aeabi_idivmod>
 8006d84:	1e0b      	subs	r3, r1, #0
 8006d86:	d104      	bne.n	8006d92 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a45      	ldr	r2, [pc, #276]	@ (8006ea0 <makeTime+0x188>)
 8006d8c:	4694      	mov	ip, r2
 8006d8e:	4463      	add	r3, ip
 8006d90:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	001a      	movs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	dbd0      	blt.n	8006d46 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006da4:	2301      	movs	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e03c      	b.n	8006e24 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d125      	bne.n	8006dfc <makeTime+0xe4>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	4a39      	ldr	r2, [pc, #228]	@ (8006e9c <makeTime+0x184>)
 8006db6:	4694      	mov	ip, r2
 8006db8:	4463      	add	r3, ip
 8006dba:	001a      	movs	r2, r3
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d11c      	bne.n	8006dfc <makeTime+0xe4>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	78db      	ldrb	r3, [r3, #3]
 8006dc6:	4a35      	ldr	r2, [pc, #212]	@ (8006e9c <makeTime+0x184>)
 8006dc8:	4694      	mov	ip, r2
 8006dca:	4463      	add	r3, ip
 8006dcc:	2164      	movs	r1, #100	@ 0x64
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7f9 fb58 	bl	8000484 <__aeabi_idivmod>
 8006dd4:	1e0b      	subs	r3, r1, #0
 8006dd6:	d10b      	bne.n	8006df0 <makeTime+0xd8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	78db      	ldrb	r3, [r3, #3]
 8006ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8006e9c <makeTime+0x184>)
 8006dde:	4694      	mov	ip, r2
 8006de0:	4463      	add	r3, ip
 8006de2:	22c8      	movs	r2, #200	@ 0xc8
 8006de4:	0051      	lsls	r1, r2, #1
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7f9 fb4c 	bl	8000484 <__aeabi_idivmod>
 8006dec:	1e0b      	subs	r3, r1, #0
 8006dee:	d105      	bne.n	8006dfc <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea4 <makeTime+0x18c>)
 8006df4:	4694      	mov	ip, r2
 8006df6:	4463      	add	r3, ip
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	e010      	b.n	8006e1e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	4a29      	ldr	r2, [pc, #164]	@ (8006ea8 <makeTime+0x190>)
 8006e02:	5cd3      	ldrb	r3, [r2, r3]
 8006e04:	001a      	movs	r2, r3
 8006e06:	0013      	movs	r3, r2
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	011a      	lsls	r2, r3, #4
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	0113      	lsls	r3, r2, #4
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	01db      	lsls	r3, r3, #7
 8006e16:	001a      	movs	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	001a      	movs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	dbbc      	blt.n	8006daa <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	789b      	ldrb	r3, [r3, #2]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	001a      	movs	r2, r3
 8006e38:	0013      	movs	r3, r2
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	189b      	adds	r3, r3, r2
 8006e3e:	011a      	lsls	r2, r3, #4
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	0113      	lsls	r3, r2, #4
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	01db      	lsls	r3, r3, #7
 8006e48:	001a      	movs	r2, r3
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	189b      	adds	r3, r3, r2
 8006e4e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	001a      	movs	r2, r3
 8006e56:	0013      	movs	r3, r2
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	011a      	lsls	r2, r3, #4
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	0113      	lsls	r3, r2, #4
 8006e62:	001a      	movs	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	001a      	movs	r2, r3
 8006e70:	0013      	movs	r3, r2
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	001a      	movs	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	189b      	adds	r3, r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	001a      	movs	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	189b      	adds	r3, r3, r2
 8006e8a:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
}
 8006e8e:	0018      	movs	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b004      	add	sp, #16
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	46c0      	nop			@ (mov r8, r8)
 8006e98:	fffff84f 	.word	0xfffff84f
 8006e9c:	000007b2 	.word	0x000007b2
 8006ea0:	00015180 	.word	0x00015180
 8006ea4:	00263b80 	.word	0x00263b80
 8006ea8:	080253f4 	.word	0x080253f4

08006eac <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b089      	sub	sp, #36	@ 0x24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	213c      	movs	r1, #60	@ 0x3c
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7f9 f9f5 	bl	80002b0 <__aeabi_uidivmod>
 8006ec6:	000b      	movs	r3, r1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	213c      	movs	r1, #60	@ 0x3c
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f7f9 f966 	bl	80001a4 <__udivsi3>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	213c      	movs	r1, #60	@ 0x3c
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7f9 f9e5 	bl	80002b0 <__aeabi_uidivmod>
 8006ee6:	000b      	movs	r3, r1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	213c      	movs	r1, #60	@ 0x3c
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7f9 f956 	bl	80001a4 <__udivsi3>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2118      	movs	r1, #24
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7f9 f9d5 	bl	80002b0 <__aeabi_uidivmod>
 8006f06:	000b      	movs	r3, r1
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2118      	movs	r1, #24
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7f9 f946 	bl	80001a4 <__udivsi3>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	2107      	movs	r1, #7
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7f9 f9c4 	bl	80002b0 <__aeabi_uidivmod>
 8006f28:	000b      	movs	r3, r1
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006f34:	231f      	movs	r3, #31
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f40:	e005      	b.n	8006f4e <breakPosixTime+0xa2>
    year++;
 8006f42:	211f      	movs	r1, #31
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	781a      	ldrb	r2, [r3, #0]
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	3201      	adds	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f4e:	241f      	movs	r4, #31
 8006f50:	193b      	adds	r3, r7, r4
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	4a64      	ldr	r2, [pc, #400]	@ (80070e8 <breakPosixTime+0x23c>)
 8006f56:	4694      	mov	ip, r2
 8006f58:	4463      	add	r3, ip
 8006f5a:	001a      	movs	r2, r3
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d119      	bne.n	8006f96 <breakPosixTime+0xea>
 8006f62:	193b      	adds	r3, r7, r4
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	4a60      	ldr	r2, [pc, #384]	@ (80070e8 <breakPosixTime+0x23c>)
 8006f68:	4694      	mov	ip, r2
 8006f6a:	4463      	add	r3, ip
 8006f6c:	2164      	movs	r1, #100	@ 0x64
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7f9 fa88 	bl	8000484 <__aeabi_idivmod>
 8006f74:	1e0b      	subs	r3, r1, #0
 8006f76:	d10b      	bne.n	8006f90 <breakPosixTime+0xe4>
 8006f78:	193b      	adds	r3, r7, r4
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80070e8 <breakPosixTime+0x23c>)
 8006f7e:	4694      	mov	ip, r2
 8006f80:	4463      	add	r3, ip
 8006f82:	22c8      	movs	r2, #200	@ 0xc8
 8006f84:	0051      	lsls	r1, r2, #1
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7f9 fa7c 	bl	8000484 <__aeabi_idivmod>
 8006f8c:	1e0b      	subs	r3, r1, #0
 8006f8e:	d102      	bne.n	8006f96 <breakPosixTime+0xea>
 8006f90:	23b7      	movs	r3, #183	@ 0xb7
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	e001      	b.n	8006f9a <breakPosixTime+0xee>
 8006f96:	236e      	movs	r3, #110	@ 0x6e
 8006f98:	33ff      	adds	r3, #255	@ 0xff
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	18d3      	adds	r3, r2, r3
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d9cc      	bls.n	8006f42 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	241f      	movs	r4, #31
 8006fac:	193a      	adds	r2, r7, r4
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006fb2:	193b      	adds	r3, r7, r4
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	4a4c      	ldr	r2, [pc, #304]	@ (80070e8 <breakPosixTime+0x23c>)
 8006fb8:	4694      	mov	ip, r2
 8006fba:	4463      	add	r3, ip
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d119      	bne.n	8006ff8 <breakPosixTime+0x14c>
 8006fc4:	193b      	adds	r3, r7, r4
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4a47      	ldr	r2, [pc, #284]	@ (80070e8 <breakPosixTime+0x23c>)
 8006fca:	4694      	mov	ip, r2
 8006fcc:	4463      	add	r3, ip
 8006fce:	2164      	movs	r1, #100	@ 0x64
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f7f9 fa57 	bl	8000484 <__aeabi_idivmod>
 8006fd6:	1e0b      	subs	r3, r1, #0
 8006fd8:	d10b      	bne.n	8006ff2 <breakPosixTime+0x146>
 8006fda:	193b      	adds	r3, r7, r4
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4a42      	ldr	r2, [pc, #264]	@ (80070e8 <breakPosixTime+0x23c>)
 8006fe0:	4694      	mov	ip, r2
 8006fe2:	4463      	add	r3, ip
 8006fe4:	22c8      	movs	r2, #200	@ 0xc8
 8006fe6:	0051      	lsls	r1, r2, #1
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7f9 fa4b 	bl	8000484 <__aeabi_idivmod>
 8006fee:	1e0b      	subs	r3, r1, #0
 8006ff0:	d102      	bne.n	8006ff8 <breakPosixTime+0x14c>
 8006ff2:	23b7      	movs	r3, #183	@ 0xb7
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	e001      	b.n	8006ffc <breakPosixTime+0x150>
 8006ff8:	236e      	movs	r3, #110	@ 0x6e
 8006ffa:	33ff      	adds	r3, #255	@ 0xff
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	61bb      	str	r3, [r7, #24]

  days=0;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
  month=0;
 800700e:	211e      	movs	r1, #30
 8007010:	187b      	adds	r3, r7, r1
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007016:	231d      	movs	r3, #29
 8007018:	18fb      	adds	r3, r7, r3
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800701e:	187b      	adds	r3, r7, r1
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e048      	b.n	80070b8 <breakPosixTime+0x20c>
    if (month==1) { // february
 8007026:	231e      	movs	r3, #30
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d12a      	bne.n	8007086 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8007030:	241f      	movs	r4, #31
 8007032:	193b      	adds	r3, r7, r4
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	4a2c      	ldr	r2, [pc, #176]	@ (80070e8 <breakPosixTime+0x23c>)
 8007038:	4694      	mov	ip, r2
 800703a:	4463      	add	r3, ip
 800703c:	001a      	movs	r2, r3
 800703e:	2303      	movs	r3, #3
 8007040:	4013      	ands	r3, r2
 8007042:	d11b      	bne.n	800707c <breakPosixTime+0x1d0>
 8007044:	193b      	adds	r3, r7, r4
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	4a27      	ldr	r2, [pc, #156]	@ (80070e8 <breakPosixTime+0x23c>)
 800704a:	4694      	mov	ip, r2
 800704c:	4463      	add	r3, ip
 800704e:	2164      	movs	r1, #100	@ 0x64
 8007050:	0018      	movs	r0, r3
 8007052:	f7f9 fa17 	bl	8000484 <__aeabi_idivmod>
 8007056:	1e0b      	subs	r3, r1, #0
 8007058:	d10b      	bne.n	8007072 <breakPosixTime+0x1c6>
 800705a:	193b      	adds	r3, r7, r4
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4a22      	ldr	r2, [pc, #136]	@ (80070e8 <breakPosixTime+0x23c>)
 8007060:	4694      	mov	ip, r2
 8007062:	4463      	add	r3, ip
 8007064:	22c8      	movs	r2, #200	@ 0xc8
 8007066:	0051      	lsls	r1, r2, #1
 8007068:	0018      	movs	r0, r3
 800706a:	f7f9 fa0b 	bl	8000484 <__aeabi_idivmod>
 800706e:	1e0b      	subs	r3, r1, #0
 8007070:	d104      	bne.n	800707c <breakPosixTime+0x1d0>
        monthLength=29;
 8007072:	231d      	movs	r3, #29
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	221d      	movs	r2, #29
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e00c      	b.n	8007096 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800707c:	231d      	movs	r3, #29
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	221c      	movs	r2, #28
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	e007      	b.n	8007096 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007086:	231e      	movs	r3, #30
 8007088:	18fb      	adds	r3, r7, r3
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	231d      	movs	r3, #29
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	4916      	ldr	r1, [pc, #88]	@ (80070ec <breakPosixTime+0x240>)
 8007092:	5c8a      	ldrb	r2, [r1, r2]
 8007094:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007096:	211d      	movs	r1, #29
 8007098:	187b      	adds	r3, r7, r1
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d310      	bcc.n	80070c4 <breakPosixTime+0x218>
      time -= monthLength;
 80070a2:	187b      	adds	r3, r7, r1
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 80070ac:	211e      	movs	r1, #30
 80070ae:	187b      	adds	r3, r7, r1
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	187b      	adds	r3, r7, r1
 80070b4:	3201      	adds	r2, #1
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	231e      	movs	r3, #30
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b0b      	cmp	r3, #11
 80070c0:	d9b1      	bls.n	8007026 <breakPosixTime+0x17a>
 80070c2:	e000      	b.n	80070c6 <breakPosixTime+0x21a>
    } else {
        break;
 80070c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 80070c6:	231e      	movs	r3, #30
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	3301      	adds	r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 80070e0:	46c0      	nop			@ (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b009      	add	sp, #36	@ 0x24
 80070e6:	bd90      	pop	{r4, r7, pc}
 80070e8:	000007b2 	.word	0x000007b2
 80070ec:	080253f4 	.word	0x080253f4

080070f0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070f6:	003b      	movs	r3, r7
 80070f8:	0018      	movs	r0, r3
 80070fa:	2308      	movs	r3, #8
 80070fc:	001a      	movs	r2, r3
 80070fe:	2100      	movs	r1, #0
 8007100:	f019 f846 	bl	8020190 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007104:	4b30      	ldr	r3, [pc, #192]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007106:	4a31      	ldr	r2, [pc, #196]	@ (80071cc <MX_ADC_Init+0xdc>)
 8007108:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800710a:	4b2f      	ldr	r3, [pc, #188]	@ (80071c8 <MX_ADC_Init+0xd8>)
 800710c:	2200      	movs	r2, #0
 800710e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007110:	4b2d      	ldr	r3, [pc, #180]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007112:	22c0      	movs	r2, #192	@ 0xc0
 8007114:	0612      	lsls	r2, r2, #24
 8007116:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007118:	4b2b      	ldr	r3, [pc, #172]	@ (80071c8 <MX_ADC_Init+0xd8>)
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800711e:	4b2a      	ldr	r3, [pc, #168]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007120:	2200      	movs	r2, #0
 8007122:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007124:	4b28      	ldr	r3, [pc, #160]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007126:	2201      	movs	r2, #1
 8007128:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800712a:	4b27      	ldr	r3, [pc, #156]	@ (80071c8 <MX_ADC_Init+0xd8>)
 800712c:	2200      	movs	r2, #0
 800712e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007130:	4b25      	ldr	r3, [pc, #148]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007132:	2220      	movs	r2, #32
 8007134:	2100      	movs	r1, #0
 8007136:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007138:	4b23      	ldr	r3, [pc, #140]	@ (80071c8 <MX_ADC_Init+0xd8>)
 800713a:	2221      	movs	r2, #33	@ 0x21
 800713c:	2101      	movs	r1, #1
 800713e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007140:	4b21      	ldr	r3, [pc, #132]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007142:	2200      	movs	r2, #0
 8007144:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007146:	4b20      	ldr	r3, [pc, #128]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007148:	22c2      	movs	r2, #194	@ 0xc2
 800714a:	32ff      	adds	r2, #255	@ 0xff
 800714c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800714e:	4b1e      	ldr	r3, [pc, #120]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007150:	222c      	movs	r2, #44	@ 0x2c
 8007152:	2100      	movs	r1, #0
 8007154:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007156:	4b1c      	ldr	r3, [pc, #112]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007158:	2204      	movs	r2, #4
 800715a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800715c:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <MX_ADC_Init+0xd8>)
 800715e:	2200      	movs	r2, #0
 8007160:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007162:	4b19      	ldr	r3, [pc, #100]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007164:	2200      	movs	r2, #0
 8007166:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007168:	4b17      	ldr	r3, [pc, #92]	@ (80071c8 <MX_ADC_Init+0xd8>)
 800716a:	2200      	movs	r2, #0
 800716c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800716e:	4b16      	ldr	r3, [pc, #88]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007170:	2200      	movs	r2, #0
 8007172:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007174:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007176:	0018      	movs	r0, r3
 8007178:	f007 fe1a 	bl	800edb0 <HAL_ADC_Init>
 800717c:	1e03      	subs	r3, r0, #0
 800717e:	d001      	beq.n	8007184 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007180:	f001 f8be 	bl	8008300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007184:	003b      	movs	r3, r7
 8007186:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <MX_ADC_Init+0xe0>)
 8007188:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800718a:	003b      	movs	r3, r7
 800718c:	2280      	movs	r2, #128	@ 0x80
 800718e:	0152      	lsls	r2, r2, #5
 8007190:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007192:	003a      	movs	r2, r7
 8007194:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <MX_ADC_Init+0xd8>)
 8007196:	0011      	movs	r1, r2
 8007198:	0018      	movs	r0, r3
 800719a:	f008 f879 	bl	800f290 <HAL_ADC_ConfigChannel>
 800719e:	1e03      	subs	r3, r0, #0
 80071a0:	d001      	beq.n	80071a6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80071a2:	f001 f8ad 	bl	8008300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80071a6:	003b      	movs	r3, r7
 80071a8:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <MX_ADC_Init+0xe4>)
 80071aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80071ac:	003a      	movs	r2, r7
 80071ae:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <MX_ADC_Init+0xd8>)
 80071b0:	0011      	movs	r1, r2
 80071b2:	0018      	movs	r0, r3
 80071b4:	f008 f86c 	bl	800f290 <HAL_ADC_ConfigChannel>
 80071b8:	1e03      	subs	r3, r0, #0
 80071ba:	d001      	beq.n	80071c0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80071bc:	f001 f8a0 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80071c0:	46c0      	nop			@ (mov r8, r8)
 80071c2:	46bd      	mov	sp, r7
 80071c4:	b002      	add	sp, #8
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000d88 	.word	0x20000d88
 80071cc:	40012400 	.word	0x40012400
 80071d0:	38004000 	.word	0x38004000
 80071d4:	3c008000 	.word	0x3c008000

080071d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b089      	sub	sp, #36	@ 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e0:	240c      	movs	r4, #12
 80071e2:	193b      	adds	r3, r7, r4
 80071e4:	0018      	movs	r0, r3
 80071e6:	2314      	movs	r3, #20
 80071e8:	001a      	movs	r2, r3
 80071ea:	2100      	movs	r1, #0
 80071ec:	f018 ffd0 	bl	8020190 <memset>
  if(adcHandle->Instance==ADC1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a14      	ldr	r2, [pc, #80]	@ (8007248 <HAL_ADC_MspInit+0x70>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d121      	bne.n	800723e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80071fa:	4b14      	ldr	r3, [pc, #80]	@ (800724c <HAL_ADC_MspInit+0x74>)
 80071fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071fe:	4b13      	ldr	r3, [pc, #76]	@ (800724c <HAL_ADC_MspInit+0x74>)
 8007200:	2180      	movs	r1, #128	@ 0x80
 8007202:	0089      	lsls	r1, r1, #2
 8007204:	430a      	orrs	r2, r1
 8007206:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007208:	4b10      	ldr	r3, [pc, #64]	@ (800724c <HAL_ADC_MspInit+0x74>)
 800720a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720c:	4b0f      	ldr	r3, [pc, #60]	@ (800724c <HAL_ADC_MspInit+0x74>)
 800720e:	2104      	movs	r1, #4
 8007210:	430a      	orrs	r2, r1
 8007212:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007214:	4b0d      	ldr	r3, [pc, #52]	@ (800724c <HAL_ADC_MspInit+0x74>)
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	2204      	movs	r2, #4
 800721a:	4013      	ands	r3, r2
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007220:	193b      	adds	r3, r7, r4
 8007222:	2230      	movs	r2, #48	@ 0x30
 8007224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007226:	193b      	adds	r3, r7, r4
 8007228:	2203      	movs	r2, #3
 800722a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722c:	193b      	adds	r3, r7, r4
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007232:	193b      	adds	r3, r7, r4
 8007234:	4a06      	ldr	r2, [pc, #24]	@ (8007250 <HAL_ADC_MspInit+0x78>)
 8007236:	0019      	movs	r1, r3
 8007238:	0010      	movs	r0, r2
 800723a:	f008 fe47 	bl	800fecc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800723e:	46c0      	nop			@ (mov r8, r8)
 8007240:	46bd      	mov	sp, r7
 8007242:	b009      	add	sp, #36	@ 0x24
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	40012400 	.word	0x40012400
 800724c:	40021000 	.word	0x40021000
 8007250:	50000800 	.word	0x50000800

08007254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800725a:	4b10      	ldr	r3, [pc, #64]	@ (800729c <MX_DMA_Init+0x48>)
 800725c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800725e:	4b0f      	ldr	r3, [pc, #60]	@ (800729c <MX_DMA_Init+0x48>)
 8007260:	2101      	movs	r1, #1
 8007262:	430a      	orrs	r2, r1
 8007264:	631a      	str	r2, [r3, #48]	@ 0x30
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <MX_DMA_Init+0x48>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726a:	2201      	movs	r2, #1
 800726c:	4013      	ands	r3, r2
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007272:	2200      	movs	r2, #0
 8007274:	2100      	movs	r1, #0
 8007276:	200a      	movs	r0, #10
 8007278:	f008 f9d6 	bl	800f628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800727c:	200a      	movs	r0, #10
 800727e:	f008 f9e8 	bl	800f652 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007282:	2200      	movs	r2, #0
 8007284:	2103      	movs	r1, #3
 8007286:	200b      	movs	r0, #11
 8007288:	f008 f9ce 	bl	800f628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800728c:	200b      	movs	r0, #11
 800728e:	f008 f9e0 	bl	800f652 <HAL_NVIC_EnableIRQ>

}
 8007292:	46c0      	nop			@ (mov r8, r8)
 8007294:	46bd      	mov	sp, r7
 8007296:	b002      	add	sp, #8
 8007298:	bd80      	pop	{r7, pc}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	40021000 	.word	0x40021000

080072a0 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80072b0:	d901      	bls.n	80072b6 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80072b2:	237f      	movs	r3, #127	@ 0x7f
 80072b4:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80072b6:	2017      	movs	r0, #23
 80072b8:	183b      	adds	r3, r7, r0
 80072ba:	490d      	ldr	r1, [pc, #52]	@ (80072f0 <accessLUT10log10+0x50>)
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	188a      	adds	r2, r1, r2
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80072c4:	0001      	movs	r1, r0
 80072c6:	187b      	adds	r3, r7, r1
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2206      	movs	r2, #6
 80072cc:	4113      	asrs	r3, r2
 80072ce:	001a      	movs	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80072d4:	187b      	adds	r3, r7, r1
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2106      	movs	r1, #6
 80072de:	408b      	lsls	r3, r1
 80072e0:	1ad2      	subs	r2, r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b006      	add	sp, #24
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	46c0      	nop			@ (mov r8, r8)
 80072f0:	08025400 	.word	0x08025400

080072f4 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80072f4:	b5b0      	push	{r4, r5, r7, lr}
 80072f6:	b090      	sub	sp, #64	@ 0x40
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6138      	str	r0, [r7, #16]
 80072fc:	6179      	str	r1, [r7, #20]
 80072fe:	60fa      	str	r2, [r7, #12]
 8007300:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8007302:	2308      	movs	r3, #8
 8007304:	001a      	movs	r2, r3
 8007306:	3a20      	subs	r2, #32
 8007308:	2a00      	cmp	r2, #0
 800730a:	db03      	blt.n	8007314 <efficient10log10+0x20>
 800730c:	2101      	movs	r1, #1
 800730e:	4091      	lsls	r1, r2
 8007310:	000d      	movs	r5, r1
 8007312:	e008      	b.n	8007326 <efficient10log10+0x32>
 8007314:	2220      	movs	r2, #32
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	2101      	movs	r1, #1
 800731a:	40d1      	lsrs	r1, r2
 800731c:	000a      	movs	r2, r1
 800731e:	2100      	movs	r1, #0
 8007320:	4099      	lsls	r1, r3
 8007322:	000d      	movs	r5, r1
 8007324:	4315      	orrs	r5, r2
 8007326:	2201      	movs	r2, #1
 8007328:	409a      	lsls	r2, r3
 800732a:	0014      	movs	r4, r2
 800732c:	2201      	movs	r2, #1
 800732e:	4252      	negs	r2, r2
 8007330:	17d3      	asrs	r3, r2, #31
 8007332:	1912      	adds	r2, r2, r4
 8007334:	416b      	adcs	r3, r5
 8007336:	633a      	str	r2, [r7, #48]	@ 0x30
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800733a:	2336      	movs	r3, #54	@ 0x36
 800733c:	2208      	movs	r2, #8
 800733e:	189b      	adds	r3, r3, r2
 8007340:	19db      	adds	r3, r3, r7
 8007342:	2200      	movs	r2, #0
 8007344:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007346:	e017      	b.n	8007378 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	07db      	lsls	r3, r3, #31
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	0852      	lsrs	r2, r2, #1
 8007350:	603a      	str	r2, [r7, #0]
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	431a      	orrs	r2, r3
 8007356:	603a      	str	r2, [r7, #0]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	687c      	ldr	r4, [r7, #4]
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	617c      	str	r4, [r7, #20]
        bShift++;
 8007366:	2136      	movs	r1, #54	@ 0x36
 8007368:	2008      	movs	r0, #8
 800736a:	180b      	adds	r3, r1, r0
 800736c:	19db      	adds	r3, r3, r7
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	180b      	adds	r3, r1, r0
 8007372:	19db      	adds	r3, r3, r7
 8007374:	3201      	adds	r2, #1
 8007376:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	429a      	cmp	r2, r3
 800737e:	d8e3      	bhi.n	8007348 <efficient10log10+0x54>
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007384:	429a      	cmp	r2, r3
 8007386:	d103      	bne.n	8007390 <efficient10log10+0x9c>
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	429a      	cmp	r2, r3
 800738e:	d8db      	bhi.n	8007348 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	2308      	movs	r3, #8
 8007394:	3b01      	subs	r3, #1
 8007396:	2101      	movs	r1, #1
 8007398:	4099      	lsls	r1, r3
 800739a:	000b      	movs	r3, r1
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80073a8:	231c      	movs	r3, #28
 80073aa:	2408      	movs	r4, #8
 80073ac:	191b      	adds	r3, r3, r4
 80073ae:	19da      	adds	r2, r3, r7
 80073b0:	2320      	movs	r3, #32
 80073b2:	191b      	adds	r3, r3, r4
 80073b4:	19d9      	adds	r1, r3, r7
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	0018      	movs	r0, r3
 80073ba:	f7ff ff71 	bl	80072a0 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80073be:	2215      	movs	r2, #21
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80073c4:	2036      	movs	r0, #54	@ 0x36
 80073c6:	1902      	adds	r2, r0, r4
 80073c8:	19d2      	adds	r2, r2, r7
 80073ca:	8812      	ldrh	r2, [r2, #0]
 80073cc:	2103      	movs	r1, #3
 80073ce:	434a      	muls	r2, r1
 80073d0:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80073d2:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80073d4:	0021      	movs	r1, r4
 80073d6:	1843      	adds	r3, r0, r1
 80073d8:	19db      	adds	r3, r3, r7
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	2201      	movs	r2, #1
 80073de:	4353      	muls	r3, r2
 80073e0:	2203      	movs	r2, #3
 80073e2:	4113      	asrs	r3, r2
 80073e4:	001a      	movs	r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80073ea:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80073ec:	2314      	movs	r3, #20
 80073ee:	185b      	adds	r3, r3, r1
 80073f0:	19da      	adds	r2, r3, r7
 80073f2:	2318      	movs	r3, #24
 80073f4:	185b      	adds	r3, r3, r1
 80073f6:	19db      	adds	r3, r3, r7
 80073f8:	0011      	movs	r1, r2
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 f80a 	bl	8007414 <correctIntFracNumber>
    integerPart[0] = intPart;
 8007400:	6a3a      	ldr	r2, [r7, #32]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	601a      	str	r2, [r3, #0]
}
 800740c:	46c0      	nop			@ (mov r8, r8)
 800740e:	46bd      	mov	sp, r7
 8007410:	b010      	add	sp, #64	@ 0x40
 8007412:	bdb0      	pop	{r4, r5, r7, pc}

08007414 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800741e:	e00a      	b.n	8007436 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3b0a      	subs	r3, #10
 8007430:	001a      	movs	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b09      	cmp	r3, #9
 800743c:	dcf0      	bgt.n	8007420 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800743e:	e00a      	b.n	8007456 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	1e5a      	subs	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330a      	adds	r3, #10
 8007450:	001a      	movs	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3309      	adds	r3, #9
 800745c:	dbf0      	blt.n	8007440 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	da0f      	bge.n	8007486 <correctIntFracNumber+0x72>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	dd0b      	ble.n	8007486 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3b0a      	subs	r3, #10
 800747e:	001a      	movs	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007484:	e012      	b.n	80074ac <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dd0e      	ble.n	80074ac <correctIntFracNumber+0x98>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da0a      	bge.n	80074ac <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	1e5a      	subs	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	330a      	adds	r3, #10
 80074a6:	001a      	movs	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	601a      	str	r2, [r3, #0]
}
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b08b      	sub	sp, #44	@ 0x2c
 80074b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ba:	2414      	movs	r4, #20
 80074bc:	193b      	adds	r3, r7, r4
 80074be:	0018      	movs	r0, r3
 80074c0:	2314      	movs	r3, #20
 80074c2:	001a      	movs	r2, r3
 80074c4:	2100      	movs	r1, #0
 80074c6:	f018 fe63 	bl	8020190 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ca:	4b8a      	ldr	r3, [pc, #552]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ce:	4b89      	ldr	r3, [pc, #548]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074d0:	2104      	movs	r1, #4
 80074d2:	430a      	orrs	r2, r1
 80074d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074d6:	4b87      	ldr	r3, [pc, #540]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	2204      	movs	r2, #4
 80074dc:	4013      	ands	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80074e2:	4b84      	ldr	r3, [pc, #528]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e6:	4b83      	ldr	r3, [pc, #524]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074e8:	2180      	movs	r1, #128	@ 0x80
 80074ea:	430a      	orrs	r2, r1
 80074ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074ee:	4b81      	ldr	r3, [pc, #516]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f2:	2280      	movs	r2, #128	@ 0x80
 80074f4:	4013      	ands	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074fa:	4b7e      	ldr	r3, [pc, #504]	@ (80076f4 <MX_GPIO_Init+0x240>)
 80074fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fe:	4b7d      	ldr	r3, [pc, #500]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007500:	2101      	movs	r1, #1
 8007502:	430a      	orrs	r2, r1
 8007504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007506:	4b7b      	ldr	r3, [pc, #492]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750a:	2201      	movs	r2, #1
 800750c:	4013      	ands	r3, r2
 800750e:	60bb      	str	r3, [r7, #8]
 8007510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007512:	4b78      	ldr	r3, [pc, #480]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007516:	4b77      	ldr	r3, [pc, #476]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007518:	2102      	movs	r1, #2
 800751a:	430a      	orrs	r2, r1
 800751c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800751e:	4b75      	ldr	r3, [pc, #468]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	2202      	movs	r2, #2
 8007524:	4013      	ands	r3, r2
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800752a:	4b72      	ldr	r3, [pc, #456]	@ (80076f4 <MX_GPIO_Init+0x240>)
 800752c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752e:	4b71      	ldr	r3, [pc, #452]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007530:	2108      	movs	r1, #8
 8007532:	430a      	orrs	r2, r1
 8007534:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007536:	4b6f      	ldr	r3, [pc, #444]	@ (80076f4 <MX_GPIO_Init+0x240>)
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	2208      	movs	r2, #8
 800753c:	4013      	ands	r3, r2
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007542:	4b6d      	ldr	r3, [pc, #436]	@ (80076f8 <MX_GPIO_Init+0x244>)
 8007544:	2201      	movs	r2, #1
 8007546:	2101      	movs	r1, #1
 8007548:	0018      	movs	r0, r3
 800754a:	f008 fe5a 	bl	8010202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800754e:	4b6a      	ldr	r3, [pc, #424]	@ (80076f8 <MX_GPIO_Init+0x244>)
 8007550:	2200      	movs	r2, #0
 8007552:	2102      	movs	r1, #2
 8007554:	0018      	movs	r0, r3
 8007556:	f008 fe54 	bl	8010202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800755a:	4968      	ldr	r1, [pc, #416]	@ (80076fc <MX_GPIO_Init+0x248>)
 800755c:	4b68      	ldr	r3, [pc, #416]	@ (8007700 <MX_GPIO_Init+0x24c>)
 800755e:	2201      	movs	r2, #1
 8007560:	0018      	movs	r0, r3
 8007562:	f008 fe4e 	bl	8010202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007566:	2380      	movs	r3, #128	@ 0x80
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	4866      	ldr	r0, [pc, #408]	@ (8007704 <MX_GPIO_Init+0x250>)
 800756c:	2201      	movs	r2, #1
 800756e:	0019      	movs	r1, r3
 8007570:	f008 fe47 	bl	8010202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007574:	2380      	movs	r3, #128	@ 0x80
 8007576:	015b      	lsls	r3, r3, #5
 8007578:	4862      	ldr	r0, [pc, #392]	@ (8007704 <MX_GPIO_Init+0x250>)
 800757a:	2200      	movs	r2, #0
 800757c:	0019      	movs	r1, r3
 800757e:	f008 fe40 	bl	8010202 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007582:	193b      	adds	r3, r7, r4
 8007584:	4a60      	ldr	r2, [pc, #384]	@ (8007708 <MX_GPIO_Init+0x254>)
 8007586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007588:	193b      	adds	r3, r7, r4
 800758a:	2203      	movs	r2, #3
 800758c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758e:	193b      	adds	r3, r7, r4
 8007590:	2200      	movs	r2, #0
 8007592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007594:	193b      	adds	r3, r7, r4
 8007596:	4a5b      	ldr	r2, [pc, #364]	@ (8007704 <MX_GPIO_Init+0x250>)
 8007598:	0019      	movs	r1, r3
 800759a:	0010      	movs	r0, r2
 800759c:	f008 fc96 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80075a0:	193b      	adds	r3, r7, r4
 80075a2:	2203      	movs	r2, #3
 80075a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075a6:	193b      	adds	r3, r7, r4
 80075a8:	2201      	movs	r2, #1
 80075aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	2200      	movs	r2, #0
 80075b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	2200      	movs	r2, #0
 80075b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80075b8:	193b      	adds	r3, r7, r4
 80075ba:	4a4f      	ldr	r2, [pc, #316]	@ (80076f8 <MX_GPIO_Init+0x244>)
 80075bc:	0019      	movs	r1, r3
 80075be:	0010      	movs	r0, r2
 80075c0:	f008 fc84 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80075c4:	193b      	adds	r3, r7, r4
 80075c6:	2270      	movs	r2, #112	@ 0x70
 80075c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075ca:	193b      	adds	r3, r7, r4
 80075cc:	2203      	movs	r2, #3
 80075ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d0:	193b      	adds	r3, r7, r4
 80075d2:	2200      	movs	r2, #0
 80075d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d6:	193a      	adds	r2, r7, r4
 80075d8:	23a0      	movs	r3, #160	@ 0xa0
 80075da:	05db      	lsls	r3, r3, #23
 80075dc:	0011      	movs	r1, r2
 80075de:	0018      	movs	r0, r3
 80075e0:	f008 fc74 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	22c0      	movs	r2, #192	@ 0xc0
 80075e8:	0052      	lsls	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	2200      	movs	r2, #0
 80075f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f8:	193a      	adds	r2, r7, r4
 80075fa:	23a0      	movs	r3, #160	@ 0xa0
 80075fc:	05db      	lsls	r3, r3, #23
 80075fe:	0011      	movs	r1, r2
 8007600:	0018      	movs	r0, r3
 8007602:	f008 fc63 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007606:	193b      	adds	r3, r7, r4
 8007608:	4a3c      	ldr	r2, [pc, #240]	@ (80076fc <MX_GPIO_Init+0x248>)
 800760a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800760c:	193b      	adds	r3, r7, r4
 800760e:	2201      	movs	r2, #1
 8007610:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007612:	193b      	adds	r3, r7, r4
 8007614:	2200      	movs	r2, #0
 8007616:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007618:	193b      	adds	r3, r7, r4
 800761a:	2200      	movs	r2, #0
 800761c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800761e:	193b      	adds	r3, r7, r4
 8007620:	4a37      	ldr	r2, [pc, #220]	@ (8007700 <MX_GPIO_Init+0x24c>)
 8007622:	0019      	movs	r1, r3
 8007624:	0010      	movs	r0, r2
 8007626:	f008 fc51 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800762a:	193b      	adds	r3, r7, r4
 800762c:	4a37      	ldr	r2, [pc, #220]	@ (800770c <MX_GPIO_Init+0x258>)
 800762e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007630:	193b      	adds	r3, r7, r4
 8007632:	2203      	movs	r2, #3
 8007634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007636:	193b      	adds	r3, r7, r4
 8007638:	2200      	movs	r2, #0
 800763a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800763c:	193b      	adds	r3, r7, r4
 800763e:	4a30      	ldr	r2, [pc, #192]	@ (8007700 <MX_GPIO_Init+0x24c>)
 8007640:	0019      	movs	r1, r3
 8007642:	0010      	movs	r0, r2
 8007644:	f008 fc42 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007648:	0021      	movs	r1, r4
 800764a:	187b      	adds	r3, r7, r1
 800764c:	2280      	movs	r2, #128	@ 0x80
 800764e:	0092      	lsls	r2, r2, #2
 8007650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007652:	000c      	movs	r4, r1
 8007654:	193b      	adds	r3, r7, r4
 8007656:	2200      	movs	r2, #0
 8007658:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765a:	193b      	adds	r3, r7, r4
 800765c:	2200      	movs	r2, #0
 800765e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007660:	193b      	adds	r3, r7, r4
 8007662:	4a28      	ldr	r2, [pc, #160]	@ (8007704 <MX_GPIO_Init+0x250>)
 8007664:	0019      	movs	r1, r3
 8007666:	0010      	movs	r0, r2
 8007668:	f008 fc30 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800766c:	193b      	adds	r3, r7, r4
 800766e:	2280      	movs	r2, #128	@ 0x80
 8007670:	0212      	lsls	r2, r2, #8
 8007672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007674:	193b      	adds	r3, r7, r4
 8007676:	2288      	movs	r2, #136	@ 0x88
 8007678:	0352      	lsls	r2, r2, #13
 800767a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800767c:	193b      	adds	r3, r7, r4
 800767e:	2200      	movs	r2, #0
 8007680:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007682:	193a      	adds	r2, r7, r4
 8007684:	23a0      	movs	r3, #160	@ 0xa0
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	0011      	movs	r1, r2
 800768a:	0018      	movs	r0, r3
 800768c:	f008 fc1e 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007690:	0021      	movs	r1, r4
 8007692:	187b      	adds	r3, r7, r1
 8007694:	22c0      	movs	r2, #192	@ 0xc0
 8007696:	0152      	lsls	r2, r2, #5
 8007698:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800769a:	000c      	movs	r4, r1
 800769c:	193b      	adds	r3, r7, r4
 800769e:	2201      	movs	r2, #1
 80076a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a2:	193b      	adds	r3, r7, r4
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a8:	193b      	adds	r3, r7, r4
 80076aa:	2200      	movs	r2, #0
 80076ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076ae:	193b      	adds	r3, r7, r4
 80076b0:	4a14      	ldr	r2, [pc, #80]	@ (8007704 <MX_GPIO_Init+0x250>)
 80076b2:	0019      	movs	r1, r3
 80076b4:	0010      	movs	r0, r2
 80076b6:	f008 fc09 	bl	800fecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80076ba:	0021      	movs	r1, r4
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	2204      	movs	r2, #4
 80076c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076c2:	187b      	adds	r3, r7, r1
 80076c4:	2200      	movs	r2, #0
 80076c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076c8:	187b      	adds	r3, r7, r1
 80076ca:	2201      	movs	r2, #1
 80076cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80076ce:	187b      	adds	r3, r7, r1
 80076d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007710 <MX_GPIO_Init+0x25c>)
 80076d2:	0019      	movs	r1, r3
 80076d4:	0010      	movs	r0, r2
 80076d6:	f008 fbf9 	bl	800fecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	2007      	movs	r0, #7
 80076e0:	f007 ffa2 	bl	800f628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80076e4:	2007      	movs	r0, #7
 80076e6:	f007 ffb4 	bl	800f652 <HAL_NVIC_EnableIRQ>

}
 80076ea:	46c0      	nop			@ (mov r8, r8)
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b00b      	add	sp, #44	@ 0x2c
 80076f0:	bd90      	pop	{r4, r7, pc}
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	40021000 	.word	0x40021000
 80076f8:	50001c00 	.word	0x50001c00
 80076fc:	00000301 	.word	0x00000301
 8007700:	50000400 	.word	0x50000400
 8007704:	50000800 	.word	0x50000800
 8007708:	0000200c 	.word	0x0000200c
 800770c:	0000403e 	.word	0x0000403e
 8007710:	50000c00 	.word	0x50000c00

08007714 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2100      	movs	r1, #0
 8007722:	0018      	movs	r0, r3
 8007724:	f00f f948 	bl	80169b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2108      	movs	r1, #8
 800772c:	0018      	movs	r0, r3
 800772e:	f00f f943 	bl	80169b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	210c      	movs	r1, #12
 8007736:	0018      	movs	r0, r3
 8007738:	f00f f93e 	bl	80169b8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800773c:	2380      	movs	r3, #128	@ 0x80
 800773e:	05db      	lsls	r3, r3, #23
 8007740:	22fa      	movs	r2, #250	@ 0xfa
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007746:	2380      	movs	r3, #128	@ 0x80
 8007748:	05db      	lsls	r3, r3, #23
 800774a:	22fa      	movs	r2, #250	@ 0xfa
 800774c:	0112      	lsls	r2, r2, #4
 800774e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007750:	2380      	movs	r3, #128	@ 0x80
 8007752:	05db      	lsls	r3, r3, #23
 8007754:	22fa      	movs	r2, #250	@ 0xfa
 8007756:	0112      	lsls	r2, r2, #4
 8007758:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800775a:	2380      	movs	r3, #128	@ 0x80
 800775c:	05db      	lsls	r3, r3, #23
 800775e:	22fa      	movs	r2, #250	@ 0xfa
 8007760:	0112      	lsls	r2, r2, #4
 8007762:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2100      	movs	r1, #0
 8007768:	0018      	movs	r0, r3
 800776a:	f00f f925 	bl	80169b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2104      	movs	r1, #4
 8007772:	0018      	movs	r0, r3
 8007774:	f00f f920 	bl	80169b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2108      	movs	r1, #8
 800777c:	0018      	movs	r0, r3
 800777e:	f00f f91b 	bl	80169b8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007782:	4b0a      	ldr	r3, [pc, #40]	@ (80077ac <GPIO_InitPWMLEDs+0x98>)
 8007784:	22fa      	movs	r2, #250	@ 0xfa
 8007786:	0112      	lsls	r2, r2, #4
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800778a:	4b08      	ldr	r3, [pc, #32]	@ (80077ac <GPIO_InitPWMLEDs+0x98>)
 800778c:	22fa      	movs	r2, #250	@ 0xfa
 800778e:	0112      	lsls	r2, r2, #4
 8007790:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007792:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <GPIO_InitPWMLEDs+0x98>)
 8007794:	22fa      	movs	r2, #250	@ 0xfa
 8007796:	0112      	lsls	r2, r2, #4
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800779a:	4b04      	ldr	r3, [pc, #16]	@ (80077ac <GPIO_InitPWMLEDs+0x98>)
 800779c:	22fa      	movs	r2, #250	@ 0xfa
 800779e:	0112      	lsls	r2, r2, #4
 80077a0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	46bd      	mov	sp, r7
 80077a6:	b002      	add	sp, #8
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	46c0      	nop			@ (mov r8, r8)
 80077ac:	40000400 	.word	0x40000400

080077b0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007828 <MX_I2C1_Init+0x78>)
 80077b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80077ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077bc:	4a1b      	ldr	r2, [pc, #108]	@ (800782c <MX_I2C1_Init+0x7c>)
 80077be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80077c0:	4b18      	ldr	r3, [pc, #96]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077cc:	4b15      	ldr	r3, [pc, #84]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077d2:	4b14      	ldr	r3, [pc, #80]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077d8:	4b12      	ldr	r3, [pc, #72]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077da:	2200      	movs	r2, #0
 80077dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077ec:	0018      	movs	r0, r3
 80077ee:	f008 fd41 	bl	8010274 <HAL_I2C_Init>
 80077f2:	1e03      	subs	r3, r0, #0
 80077f4:	d001      	beq.n	80077fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077f6:	f000 fd83 	bl	8008300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007824 <MX_I2C1_Init+0x74>)
 80077fc:	2100      	movs	r1, #0
 80077fe:	0018      	movs	r0, r3
 8007800:	f00b f912 	bl	8012a28 <HAL_I2CEx_ConfigAnalogFilter>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d001      	beq.n	800780c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007808:	f000 fd7a 	bl	8008300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800780c:	4b05      	ldr	r3, [pc, #20]	@ (8007824 <MX_I2C1_Init+0x74>)
 800780e:	2100      	movs	r1, #0
 8007810:	0018      	movs	r0, r3
 8007812:	f00b f955 	bl	8012ac0 <HAL_I2CEx_ConfigDigitalFilter>
 8007816:	1e03      	subs	r3, r0, #0
 8007818:	d001      	beq.n	800781e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800781a:	f000 fd71 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000de4 	.word	0x20000de4
 8007828:	40005400 	.word	0x40005400
 800782c:	00503d58 	.word	0x00503d58

08007830 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007834:	4b1b      	ldr	r3, [pc, #108]	@ (80078a4 <MX_I2C2_Init+0x74>)
 8007836:	4a1c      	ldr	r2, [pc, #112]	@ (80078a8 <MX_I2C2_Init+0x78>)
 8007838:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800783a:	4b1a      	ldr	r3, [pc, #104]	@ (80078a4 <MX_I2C2_Init+0x74>)
 800783c:	4a1b      	ldr	r2, [pc, #108]	@ (80078ac <MX_I2C2_Init+0x7c>)
 800783e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007840:	4b18      	ldr	r3, [pc, #96]	@ (80078a4 <MX_I2C2_Init+0x74>)
 8007842:	2200      	movs	r2, #0
 8007844:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007846:	4b17      	ldr	r3, [pc, #92]	@ (80078a4 <MX_I2C2_Init+0x74>)
 8007848:	2201      	movs	r2, #1
 800784a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800784c:	4b15      	ldr	r3, [pc, #84]	@ (80078a4 <MX_I2C2_Init+0x74>)
 800784e:	2200      	movs	r2, #0
 8007850:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <MX_I2C2_Init+0x74>)
 8007854:	2200      	movs	r2, #0
 8007856:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007858:	4b12      	ldr	r3, [pc, #72]	@ (80078a4 <MX_I2C2_Init+0x74>)
 800785a:	2200      	movs	r2, #0
 800785c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800785e:	4b11      	ldr	r3, [pc, #68]	@ (80078a4 <MX_I2C2_Init+0x74>)
 8007860:	2200      	movs	r2, #0
 8007862:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007864:	4b0f      	ldr	r3, [pc, #60]	@ (80078a4 <MX_I2C2_Init+0x74>)
 8007866:	2200      	movs	r2, #0
 8007868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800786a:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <MX_I2C2_Init+0x74>)
 800786c:	0018      	movs	r0, r3
 800786e:	f008 fd01 	bl	8010274 <HAL_I2C_Init>
 8007872:	1e03      	subs	r3, r0, #0
 8007874:	d001      	beq.n	800787a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007876:	f000 fd43 	bl	8008300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800787a:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <MX_I2C2_Init+0x74>)
 800787c:	2100      	movs	r1, #0
 800787e:	0018      	movs	r0, r3
 8007880:	f00b f8d2 	bl	8012a28 <HAL_I2CEx_ConfigAnalogFilter>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d001      	beq.n	800788c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007888:	f000 fd3a 	bl	8008300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800788c:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <MX_I2C2_Init+0x74>)
 800788e:	2100      	movs	r1, #0
 8007890:	0018      	movs	r0, r3
 8007892:	f00b f915 	bl	8012ac0 <HAL_I2CEx_ConfigDigitalFilter>
 8007896:	1e03      	subs	r3, r0, #0
 8007898:	d001      	beq.n	800789e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800789a:	f000 fd31 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800789e:	46c0      	nop			@ (mov r8, r8)
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000e38 	.word	0x20000e38
 80078a8:	40005800 	.word	0x40005800
 80078ac:	00503d58 	.word	0x00503d58

080078b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b08b      	sub	sp, #44	@ 0x2c
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b8:	2414      	movs	r4, #20
 80078ba:	193b      	adds	r3, r7, r4
 80078bc:	0018      	movs	r0, r3
 80078be:	2314      	movs	r3, #20
 80078c0:	001a      	movs	r2, r3
 80078c2:	2100      	movs	r1, #0
 80078c4:	f018 fc64 	bl	8020190 <memset>
  if(i2cHandle->Instance==I2C1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007a44 <HAL_I2C_MspInit+0x194>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d000      	beq.n	80078d4 <HAL_I2C_MspInit+0x24>
 80078d2:	e083      	b.n	80079dc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078d4:	4b5c      	ldr	r3, [pc, #368]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 80078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d8:	4b5b      	ldr	r3, [pc, #364]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 80078da:	2102      	movs	r1, #2
 80078dc:	430a      	orrs	r2, r1
 80078de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078e0:	4b59      	ldr	r3, [pc, #356]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 80078e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e4:	2202      	movs	r2, #2
 80078e6:	4013      	ands	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078ec:	0021      	movs	r1, r4
 80078ee:	187b      	adds	r3, r7, r1
 80078f0:	22c0      	movs	r2, #192	@ 0xc0
 80078f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078f4:	187b      	adds	r3, r7, r1
 80078f6:	2212      	movs	r2, #18
 80078f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fa:	187b      	adds	r3, r7, r1
 80078fc:	2200      	movs	r2, #0
 80078fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007900:	187b      	adds	r3, r7, r1
 8007902:	2203      	movs	r2, #3
 8007904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007906:	187b      	adds	r3, r7, r1
 8007908:	2201      	movs	r2, #1
 800790a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800790c:	187b      	adds	r3, r7, r1
 800790e:	4a4f      	ldr	r2, [pc, #316]	@ (8007a4c <HAL_I2C_MspInit+0x19c>)
 8007910:	0019      	movs	r1, r3
 8007912:	0010      	movs	r0, r2
 8007914:	f008 fada 	bl	800fecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007918:	4b4b      	ldr	r3, [pc, #300]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 800791a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800791c:	4b4a      	ldr	r3, [pc, #296]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 800791e:	2180      	movs	r1, #128	@ 0x80
 8007920:	0389      	lsls	r1, r1, #14
 8007922:	430a      	orrs	r2, r1
 8007924:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007926:	4b4a      	ldr	r3, [pc, #296]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007928:	4a4a      	ldr	r2, [pc, #296]	@ (8007a54 <HAL_I2C_MspInit+0x1a4>)
 800792a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800792c:	4b48      	ldr	r3, [pc, #288]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 800792e:	2206      	movs	r2, #6
 8007930:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007932:	4b47      	ldr	r3, [pc, #284]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007934:	2200      	movs	r2, #0
 8007936:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007938:	4b45      	ldr	r3, [pc, #276]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 800793a:	2200      	movs	r2, #0
 800793c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800793e:	4b44      	ldr	r3, [pc, #272]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007940:	2280      	movs	r2, #128	@ 0x80
 8007942:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007944:	4b42      	ldr	r3, [pc, #264]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007946:	2200      	movs	r2, #0
 8007948:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800794a:	4b41      	ldr	r3, [pc, #260]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 800794c:	2200      	movs	r2, #0
 800794e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007950:	4b3f      	ldr	r3, [pc, #252]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007952:	2200      	movs	r2, #0
 8007954:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007956:	4b3e      	ldr	r3, [pc, #248]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007958:	2200      	movs	r2, #0
 800795a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800795c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 800795e:	0018      	movs	r0, r3
 8007960:	f007 fe98 	bl	800f694 <HAL_DMA_Init>
 8007964:	1e03      	subs	r3, r0, #0
 8007966:	d001      	beq.n	800796c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007968:	f000 fcca 	bl	8008300 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a38      	ldr	r2, [pc, #224]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007970:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007972:	4b37      	ldr	r3, [pc, #220]	@ (8007a50 <HAL_I2C_MspInit+0x1a0>)
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007978:	4b37      	ldr	r3, [pc, #220]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 800797a:	4a38      	ldr	r2, [pc, #224]	@ (8007a5c <HAL_I2C_MspInit+0x1ac>)
 800797c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800797e:	4b36      	ldr	r3, [pc, #216]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 8007980:	2206      	movs	r2, #6
 8007982:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007984:	4b34      	ldr	r3, [pc, #208]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 8007986:	2210      	movs	r2, #16
 8007988:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800798a:	4b33      	ldr	r3, [pc, #204]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 800798c:	2200      	movs	r2, #0
 800798e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007990:	4b31      	ldr	r3, [pc, #196]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 8007992:	2280      	movs	r2, #128	@ 0x80
 8007994:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007996:	4b30      	ldr	r3, [pc, #192]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 8007998:	2200      	movs	r2, #0
 800799a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800799c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 800799e:	2200      	movs	r2, #0
 80079a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80079a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80079ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 80079b0:	0018      	movs	r0, r3
 80079b2:	f007 fe6f 	bl	800f694 <HAL_DMA_Init>
 80079b6:	1e03      	subs	r3, r0, #0
 80079b8:	d001      	beq.n	80079be <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80079ba:	f000 fca1 	bl	8008300 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a25      	ldr	r2, [pc, #148]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 80079c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80079c4:	4b24      	ldr	r3, [pc, #144]	@ (8007a58 <HAL_I2C_MspInit+0x1a8>)
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80079ca:	2200      	movs	r2, #0
 80079cc:	2100      	movs	r1, #0
 80079ce:	2017      	movs	r0, #23
 80079d0:	f007 fe2a 	bl	800f628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80079d4:	2017      	movs	r0, #23
 80079d6:	f007 fe3c 	bl	800f652 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079da:	e02e      	b.n	8007a3a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a60 <HAL_I2C_MspInit+0x1b0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d129      	bne.n	8007a3a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079e6:	4b18      	ldr	r3, [pc, #96]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 80079e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ea:	4b17      	ldr	r3, [pc, #92]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 80079ec:	2102      	movs	r1, #2
 80079ee:	430a      	orrs	r2, r1
 80079f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079f2:	4b15      	ldr	r3, [pc, #84]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	2202      	movs	r2, #2
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80079fe:	2114      	movs	r1, #20
 8007a00:	187b      	adds	r3, r7, r1
 8007a02:	22c0      	movs	r2, #192	@ 0xc0
 8007a04:	0112      	lsls	r2, r2, #4
 8007a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a08:	187b      	adds	r3, r7, r1
 8007a0a:	2212      	movs	r2, #18
 8007a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0e:	187b      	adds	r3, r7, r1
 8007a10:	2200      	movs	r2, #0
 8007a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	2203      	movs	r2, #3
 8007a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007a1a:	187b      	adds	r3, r7, r1
 8007a1c:	2206      	movs	r2, #6
 8007a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a20:	187b      	adds	r3, r7, r1
 8007a22:	4a0a      	ldr	r2, [pc, #40]	@ (8007a4c <HAL_I2C_MspInit+0x19c>)
 8007a24:	0019      	movs	r1, r3
 8007a26:	0010      	movs	r0, r2
 8007a28:	f008 fa50 	bl	800fecc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 8007a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <HAL_I2C_MspInit+0x198>)
 8007a32:	2180      	movs	r1, #128	@ 0x80
 8007a34:	03c9      	lsls	r1, r1, #15
 8007a36:	430a      	orrs	r2, r1
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b00b      	add	sp, #44	@ 0x2c
 8007a40:	bd90      	pop	{r4, r7, pc}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	40005400 	.word	0x40005400
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	50000400 	.word	0x50000400
 8007a50:	20000e8c 	.word	0x20000e8c
 8007a54:	40020030 	.word	0x40020030
 8007a58:	20000ed4 	.word	0x20000ed4
 8007a5c:	4002001c 	.word	0x4002001c
 8007a60:	40005800 	.word	0x40005800

08007a64 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a68:	4b10      	ldr	r3, [pc, #64]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a6a:	4a11      	ldr	r2, [pc, #68]	@ (8007ab0 <MX_I2S2_Init+0x4c>)
 8007a6c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a70:	22c0      	movs	r2, #192	@ 0xc0
 8007a72:	0092      	lsls	r2, r2, #2
 8007a74:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a7e:	2203      	movs	r2, #3
 8007a80:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a82:	4b0a      	ldr	r3, [pc, #40]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a88:	4b08      	ldr	r3, [pc, #32]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a8a:	22fa      	movs	r2, #250	@ 0xfa
 8007a8c:	0192      	lsls	r2, r2, #6
 8007a8e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a90:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a96:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <MX_I2S2_Init+0x48>)
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f00b f85d 	bl	8012b58 <HAL_I2S_Init>
 8007a9e:	1e03      	subs	r3, r0, #0
 8007aa0:	d001      	beq.n	8007aa6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007aa2:	f000 fc2d 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007aa6:	46c0      	nop			@ (mov r8, r8)
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000f1c 	.word	0x20000f1c
 8007ab0:	40003800 	.word	0x40003800

08007ab4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007ab4:	b590      	push	{r4, r7, lr}
 8007ab6:	b089      	sub	sp, #36	@ 0x24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007abc:	240c      	movs	r4, #12
 8007abe:	193b      	adds	r3, r7, r4
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	2314      	movs	r3, #20
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	f018 fb62 	bl	8020190 <memset>
  if(i2sHandle->Instance==SPI2)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b88 <HAL_I2S_MspInit+0xd4>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d154      	bne.n	8007b80 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b8c <HAL_I2S_MspInit+0xd8>)
 8007ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ada:	4b2c      	ldr	r3, [pc, #176]	@ (8007b8c <HAL_I2S_MspInit+0xd8>)
 8007adc:	2180      	movs	r1, #128	@ 0x80
 8007ade:	01c9      	lsls	r1, r1, #7
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ae4:	4b29      	ldr	r3, [pc, #164]	@ (8007b8c <HAL_I2S_MspInit+0xd8>)
 8007ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae8:	4b28      	ldr	r3, [pc, #160]	@ (8007b8c <HAL_I2S_MspInit+0xd8>)
 8007aea:	2102      	movs	r1, #2
 8007aec:	430a      	orrs	r2, r1
 8007aee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007af0:	4b26      	ldr	r3, [pc, #152]	@ (8007b8c <HAL_I2S_MspInit+0xd8>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	2202      	movs	r2, #2
 8007af6:	4013      	ands	r3, r2
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007afc:	193b      	adds	r3, r7, r4
 8007afe:	22b0      	movs	r2, #176	@ 0xb0
 8007b00:	0212      	lsls	r2, r2, #8
 8007b02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b04:	0021      	movs	r1, r4
 8007b06:	187b      	adds	r3, r7, r1
 8007b08:	2202      	movs	r2, #2
 8007b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	2200      	movs	r2, #0
 8007b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b12:	187b      	adds	r3, r7, r1
 8007b14:	2200      	movs	r2, #0
 8007b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007b18:	187b      	adds	r3, r7, r1
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b1e:	187b      	adds	r3, r7, r1
 8007b20:	4a1b      	ldr	r2, [pc, #108]	@ (8007b90 <HAL_I2S_MspInit+0xdc>)
 8007b22:	0019      	movs	r1, r3
 8007b24:	0010      	movs	r0, r2
 8007b26:	f008 f9d1 	bl	800fecc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <HAL_I2S_MspInit+0xe4>)
 8007b2e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007b30:	4b18      	ldr	r3, [pc, #96]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b32:	2202      	movs	r2, #2
 8007b34:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b36:	4b17      	ldr	r3, [pc, #92]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b3c:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b42:	4b14      	ldr	r3, [pc, #80]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b44:	2280      	movs	r2, #128	@ 0x80
 8007b46:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b48:	4b12      	ldr	r3, [pc, #72]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b4a:	2280      	movs	r2, #128	@ 0x80
 8007b4c:	0052      	lsls	r2, r2, #1
 8007b4e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b50:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b52:	2280      	movs	r2, #128	@ 0x80
 8007b54:	00d2      	lsls	r2, r2, #3
 8007b56:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b58:	4b0e      	ldr	r3, [pc, #56]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b64:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b66:	0018      	movs	r0, r3
 8007b68:	f007 fd94 	bl	800f694 <HAL_DMA_Init>
 8007b6c:	1e03      	subs	r3, r0, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b70:	f000 fbc6 	bl	8008300 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a07      	ldr	r2, [pc, #28]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b7a:	4b06      	ldr	r3, [pc, #24]	@ (8007b94 <HAL_I2S_MspInit+0xe0>)
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b80:	46c0      	nop			@ (mov r8, r8)
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b009      	add	sp, #36	@ 0x24
 8007b86:	bd90      	pop	{r4, r7, pc}
 8007b88:	40003800 	.word	0x40003800
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	50000400 	.word	0x50000400
 8007b94:	20000f58 	.word	0x20000f58
 8007b98:	40020044 	.word	0x40020044

08007b9c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  testDone = true;
 8007ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c1c <SetTestDone+0x80>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8007ba6:	23fa      	movs	r3, #250	@ 0xfa
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	0018      	movs	r0, r3
 8007bac:	f007 f8a2 	bl	800ecf4 <HAL_Delay>
  SetDBLED(false, false, true);
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f005 fb4f 	bl	800d258 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007bba:	4a19      	ldr	r2, [pc, #100]	@ (8007c20 <SetTestDone+0x84>)
 8007bbc:	23fa      	movs	r3, #250	@ 0xfa
 8007bbe:	0119      	lsls	r1, r3, #4
 8007bc0:	23fa      	movs	r3, #250	@ 0xfa
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f005 fb13 	bl	800d1f0 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007bca:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <SetTestDone+0x84>)
 8007bcc:	23fa      	movs	r3, #250	@ 0xfa
 8007bce:	0119      	lsls	r1, r3, #4
 8007bd0:	23fa      	movs	r3, #250	@ 0xfa
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f005 fb89 	bl	800d2ec <SetVocLED>
  HAL_Delay(1000);
 8007bda:	23fa      	movs	r3, #250	@ 0xfa
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f007 f888 	bl	800ecf4 <HAL_Delay>
  SetDBLED(false, false, false);
 8007be4:	2200      	movs	r2, #0
 8007be6:	2100      	movs	r1, #0
 8007be8:	2000      	movs	r0, #0
 8007bea:	f005 fb35 	bl	800d258 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007bee:	23fa      	movs	r3, #250	@ 0xfa
 8007bf0:	011a      	lsls	r2, r3, #4
 8007bf2:	23fa      	movs	r3, #250	@ 0xfa
 8007bf4:	0119      	lsls	r1, r3, #4
 8007bf6:	23fa      	movs	r3, #250	@ 0xfa
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f005 faf8 	bl	800d1f0 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007c00:	23fa      	movs	r3, #250	@ 0xfa
 8007c02:	011a      	lsls	r2, r3, #4
 8007c04:	23fa      	movs	r3, #250	@ 0xfa
 8007c06:	0119      	lsls	r1, r3, #4
 8007c08:	23fa      	movs	r3, #250	@ 0xfa
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f005 fb6d 	bl	800d2ec <SetVocLED>
  InitDone();
 8007c12:	f005 fa41 	bl	800d098 <InitDone>
}
 8007c16:	46c0      	nop			@ (mov r8, r8)
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000fa0 	.word	0x20000fa0
 8007c20:	00000bb8 	.word	0x00000bb8

08007c24 <FlashLEDs>:

void FlashLEDs(){
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007c2a:	1dfb      	adds	r3, r7, #7
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e021      	b.n	8007c76 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007c32:	2201      	movs	r2, #1
 8007c34:	2101      	movs	r1, #1
 8007c36:	2001      	movs	r0, #1
 8007c38:	f005 fb0e 	bl	800d258 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007c3c:	4a12      	ldr	r2, [pc, #72]	@ (8007c88 <FlashLEDs+0x64>)
 8007c3e:	23fa      	movs	r3, #250	@ 0xfa
 8007c40:	0119      	lsls	r1, r3, #4
 8007c42:	23fa      	movs	r3, #250	@ 0xfa
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	0018      	movs	r0, r3
 8007c48:	f005 fad2 	bl	800d1f0 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8007c88 <FlashLEDs+0x64>)
 8007c4e:	23fa      	movs	r3, #250	@ 0xfa
 8007c50:	0119      	lsls	r1, r3, #4
 8007c52:	23fa      	movs	r3, #250	@ 0xfa
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	0018      	movs	r0, r3
 8007c58:	f005 fb48 	bl	800d2ec <SetVocLED>
    HAL_Delay(250);
 8007c5c:	20fa      	movs	r0, #250	@ 0xfa
 8007c5e:	f007 f849 	bl	800ecf4 <HAL_Delay>
    SetLEDsOff();
 8007c62:	f005 fc87 	bl	800d574 <SetLEDsOff>
    HAL_Delay(250);
 8007c66:	20fa      	movs	r0, #250	@ 0xfa
 8007c68:	f007 f844 	bl	800ecf4 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c6c:	1dfb      	adds	r3, r7, #7
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	1dfb      	adds	r3, r7, #7
 8007c72:	3201      	adds	r2, #1
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	1dfb      	adds	r3, r7, #7
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d9d9      	bls.n	8007c32 <FlashLEDs+0xe>
  }
}
 8007c7e:	46c0      	nop			@ (mov r8, r8)
 8007c80:	46c0      	nop			@ (mov r8, r8)
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b002      	add	sp, #8
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	00000bb8 	.word	0x00000bb8

08007c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c90:	f006 ffc0 	bl	800ec14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c94:	f000 f9ee 	bl	8008074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c98:	f7ff fc0c 	bl	80074b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c9c:	f7ff fada 	bl	8007254 <MX_DMA_Init>
  MX_I2C1_Init();
 8007ca0:	f7ff fd86 	bl	80077b0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007ca4:	f7ff fede 	bl	8007a64 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007ca8:	f006 f9e2 	bl	800e070 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007cac:	f7ff fdc0 	bl	8007830 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007cb0:	f005 ffd6 	bl	800dc60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007cb4:	f006 f848 	bl	800dd48 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007cb8:	f006 fa0e 	bl	800e0d8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007cbc:	f7ff fa18 	bl	80070f0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007cc0:	f014 ff74 	bl	801cbac <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007cc4:	f001 f916 	bl	8008ef4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007cc8:	f006 f99c 	bl	800e004 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007ccc:	f006 f8ba 	bl	800de44 <MX_TIM6_Init>
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
//  usbUARTinit(); //serial over USB
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007cd0:	4ac0      	ldr	r2, [pc, #768]	@ (8007fd4 <main+0x348>)
 8007cd2:	4bc1      	ldr	r3, [pc, #772]	@ (8007fd8 <main+0x34c>)
 8007cd4:	0011      	movs	r1, r2
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7ff fd1c 	bl	8007714 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007cdc:	f7fe fc0a 	bl	80064f4 <UserButton_Pressed>
 8007ce0:	1e03      	subs	r3, r0, #0
 8007ce2:	d004      	beq.n	8007cee <main+0x62>
    EnableESPProg();
 8007ce4:	f015 f832 	bl	801cd4c <EnableESPProg>
    ESP_Programming = true;
 8007ce8:	4bbc      	ldr	r3, [pc, #752]	@ (8007fdc <main+0x350>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007cee:	2003      	movs	r0, #3
 8007cf0:	f006 fc1a 	bl	800e528 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007cf4:	49ba      	ldr	r1, [pc, #744]	@ (8007fe0 <main+0x354>)
 8007cf6:	4bbb      	ldr	r3, [pc, #748]	@ (8007fe4 <main+0x358>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f00f fabc 	bl	8017278 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007d00:	4bb9      	ldr	r3, [pc, #740]	@ (8007fe8 <main+0x35c>)
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7fe fffa 	bl	8006cfc <InitClock>
  Debug("Clock init done");
 8007d08:	4ab8      	ldr	r2, [pc, #736]	@ (8007fec <main+0x360>)
 8007d0a:	4bb9      	ldr	r3, [pc, #740]	@ (8007ff0 <main+0x364>)
 8007d0c:	0019      	movs	r1, r3
 8007d0e:	2003      	movs	r0, #3
 8007d10:	f006 fba0 	bl	800e454 <CreateLine>
  BinaryReleaseInfo();
 8007d14:	f006 fc22 	bl	800e55c <BinaryReleaseInfo>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007d18:	4ab6      	ldr	r2, [pc, #728]	@ (8007ff4 <main+0x368>)
 8007d1a:	49b7      	ldr	r1, [pc, #732]	@ (8007ff8 <main+0x36c>)
 8007d1c:	48b7      	ldr	r0, [pc, #732]	@ (8007ffc <main+0x370>)
 8007d1e:	230b      	movs	r3, #11
 8007d20:	f004 fb30 	bl	800c384 <soundInit>
 8007d24:	0003      	movs	r3, r0
 8007d26:	001a      	movs	r2, r3
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4053      	eors	r3, r2
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007d32:	4ab3      	ldr	r2, [pc, #716]	@ (8008000 <main+0x374>)
 8007d34:	4bb3      	ldr	r3, [pc, #716]	@ (8008004 <main+0x378>)
 8007d36:	21f4      	movs	r1, #244	@ 0xf4
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f006 fc43 	bl	800e5c4 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007d3e:	4bb2      	ldr	r3, [pc, #712]	@ (8008008 <main+0x37c>)
 8007d40:	4ab2      	ldr	r2, [pc, #712]	@ (800800c <main+0x380>)
 8007d42:	49ad      	ldr	r1, [pc, #692]	@ (8007ff8 <main+0x36c>)
 8007d44:	48b2      	ldr	r0, [pc, #712]	@ (8008010 <main+0x384>)
 8007d46:	f000 fb8b 	bl	8008460 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8007d4a:	f006 ffc9 	bl	800ece0 <HAL_GetTick>
 8007d4e:	0003      	movs	r3, r0
 8007d50:	4ab0      	ldr	r2, [pc, #704]	@ (8008014 <main+0x388>)
 8007d52:	189a      	adds	r2, r3, r2
 8007d54:	4bb0      	ldr	r3, [pc, #704]	@ (8008018 <main+0x38c>)
 8007d56:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d58:	f7fe fbac 	bl	80064b4 <Check_USB_PowerOn>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	1e5a      	subs	r2, r3, #1
 8007d60:	4193      	sbcs	r3, r2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2201      	movs	r2, #1
 8007d66:	4053      	eors	r3, r2
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	1c1a      	adds	r2, r3, #0
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4013      	ands	r3, r2
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4baa      	ldr	r3, [pc, #680]	@ (800801c <main+0x390>)
 8007d74:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007d76:	4baa      	ldr	r3, [pc, #680]	@ (8008020 <main+0x394>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f006 fb14 	bl	800e3a8 <TimestampIsReached>
 8007d80:	1e03      	subs	r3, r0, #0
 8007d82:	d00e      	beq.n	8007da2 <main+0x116>
      charge = Battery_Upkeep();
 8007d84:	f005 fdf6 	bl	800d974 <Battery_Upkeep>
 8007d88:	0003      	movs	r3, r0
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	4ba5      	ldr	r3, [pc, #660]	@ (8008024 <main+0x398>)
 8007d8e:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007d90:	f006 ffa6 	bl	800ece0 <HAL_GetTick>
 8007d94:	0003      	movs	r3, r0
 8007d96:	4aa4      	ldr	r2, [pc, #656]	@ (8008028 <main+0x39c>)
 8007d98:	189a      	adds	r2, r3, r2
 8007d9a:	4ba1      	ldr	r3, [pc, #644]	@ (8008020 <main+0x394>)
 8007d9c:	601a      	str	r2, [r3, #0]
        showTime();
 8007d9e:	f7fe fbb9 	bl	8006514 <showTime>
    }
    configCheck();
 8007da2:	f005 fc67 	bl	800d674 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007da6:	4ba1      	ldr	r3, [pc, #644]	@ (800802c <main+0x3a0>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007dac:	4b9d      	ldr	r3, [pc, #628]	@ (8008024 <main+0x398>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d003      	beq.n	8007dbc <main+0x130>
 8007db4:	4b9b      	ldr	r3, [pc, #620]	@ (8008024 <main+0x398>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <main+0x13a>
          FlashLEDs();
 8007dbc:	f7ff ff32 	bl	8007c24 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007dc0:	4b9b      	ldr	r3, [pc, #620]	@ (8008030 <main+0x3a4>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007dc6:	4b97      	ldr	r3, [pc, #604]	@ (8008024 <main+0x398>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <main+0x156>
 8007dce:	4b99      	ldr	r3, [pc, #612]	@ (8008034 <main+0x3a8>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b09      	cmp	r3, #9
 8007dd4:	d105      	bne.n	8007de2 <main+0x156>
          batteryEmpty = true;
 8007dd6:	4b98      	ldr	r3, [pc, #608]	@ (8008038 <main+0x3ac>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007ddc:	f7fe fec6 	bl	8006b6c <Enter_Standby_Mode>
 8007de0:	e002      	b.n	8007de8 <main+0x15c>
        }
        else{
          batteryEmpty = false;
 8007de2:	4b95      	ldr	r3, [pc, #596]	@ (8008038 <main+0x3ac>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007de8:	4b94      	ldr	r3, [pc, #592]	@ (800803c <main+0x3b0>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d100      	bne.n	8007df2 <main+0x166>
 8007df0:	e0b0      	b.n	8007f54 <main+0x2c8>
 8007df2:	4b7a      	ldr	r3, [pc, #488]	@ (8007fdc <main+0x350>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2201      	movs	r2, #1
 8007df8:	4053      	eors	r3, r2
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d100      	bne.n	8007e02 <main+0x176>
 8007e00:	e0a8      	b.n	8007f54 <main+0x2c8>
 8007e02:	4b8d      	ldr	r3, [pc, #564]	@ (8008038 <main+0x3ac>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2201      	movs	r2, #1
 8007e08:	4053      	eors	r3, r2
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d100      	bne.n	8007e12 <main+0x186>
 8007e10:	e0a0      	b.n	8007f54 <main+0x2c8>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007e12:	4b82      	ldr	r3, [pc, #520]	@ (800801c <main+0x390>)
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	4b8a      	ldr	r3, [pc, #552]	@ (8008040 <main+0x3b4>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d026      	beq.n	8007e6c <main+0x1e0>
        Debug("USB power state change detected");
 8007e1e:	4a89      	ldr	r2, [pc, #548]	@ (8008044 <main+0x3b8>)
 8007e20:	4b73      	ldr	r3, [pc, #460]	@ (8007ff0 <main+0x364>)
 8007e22:	0019      	movs	r1, r3
 8007e24:	2003      	movs	r0, #3
 8007e26:	f006 fb15 	bl	800e454 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007e2a:	f000 fab1 	bl	8008390 <IsSGPPresent>
 8007e2e:	1e03      	subs	r3, r0, #0
 8007e30:	d009      	beq.n	8007e46 <main+0x1ba>
 8007e32:	4b83      	ldr	r3, [pc, #524]	@ (8008040 <main+0x3b4>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2201      	movs	r2, #1
 8007e38:	4053      	eors	r3, r2
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <main+0x1ba>
          SetVOCSensorDIS_ENA(true);
 8007e40:	2001      	movs	r0, #1
 8007e42:	f000 faaf 	bl	80083a4 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007e46:	4b80      	ldr	r3, [pc, #512]	@ (8008048 <main+0x3bc>)
 8007e48:	791b      	ldrb	r3, [r3, #4]
 8007e4a:	2b34      	cmp	r3, #52	@ 0x34
 8007e4c:	d003      	beq.n	8007e56 <main+0x1ca>
 8007e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8008048 <main+0x3bc>)
 8007e50:	791b      	ldrb	r3, [r3, #4]
 8007e52:	2b35      	cmp	r3, #53	@ 0x35
 8007e54:	d106      	bne.n	8007e64 <main+0x1d8>
 8007e56:	4b7a      	ldr	r3, [pc, #488]	@ (8008040 <main+0x3b4>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <main+0x1d8>
          SetVOCSensorDIS_ENA(false);
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f000 faa0 	bl	80083a4 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e64:	4b76      	ldr	r3, [pc, #472]	@ (8008040 <main+0x3b4>)
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	4b6c      	ldr	r3, [pc, #432]	@ (800801c <main+0x390>)
 8007e6a:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007e6c:	4b77      	ldr	r3, [pc, #476]	@ (800804c <main+0x3c0>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d00d      	beq.n	8007e90 <main+0x204>
 8007e74:	4b75      	ldr	r3, [pc, #468]	@ (800804c <main+0x3c0>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d009      	beq.n	8007e90 <main+0x204>
 8007e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8008030 <main+0x3a4>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <main+0x204>
        HIDSstate = HIDS_Upkeep();
 8007e84:	f006 fe10 	bl	800eaa8 <HIDS_Upkeep>
 8007e88:	0003      	movs	r3, r0
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	4b70      	ldr	r3, [pc, #448]	@ (8008050 <main+0x3c4>)
 8007e8e:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007e90:	4b6f      	ldr	r3, [pc, #444]	@ (8008050 <main+0x3c4>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d00d      	beq.n	8007eb4 <main+0x228>
 8007e98:	4b6d      	ldr	r3, [pc, #436]	@ (8008050 <main+0x3c4>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d009      	beq.n	8007eb4 <main+0x228>
 8007ea0:	4b63      	ldr	r3, [pc, #396]	@ (8008030 <main+0x3a4>)
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <main+0x228>
        SGPstate = SGP_Upkeep();
 8007ea8:	f004 f8d2 	bl	800c050 <SGP_Upkeep>
 8007eac:	0003      	movs	r3, r0
 8007eae:	001a      	movs	r2, r3
 8007eb0:	4b66      	ldr	r3, [pc, #408]	@ (800804c <main+0x3c0>)
 8007eb2:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8008030 <main+0x3a4>)
 8007eb6:	78db      	ldrb	r3, [r3, #3]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <main+0x23c>
        MICstate = Mic_Upkeep();
 8007ebc:	f000 ff06 	bl	8008ccc <Mic_Upkeep>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	4b63      	ldr	r3, [pc, #396]	@ (8008054 <main+0x3c8>)
 8007ec6:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007ec8:	4b56      	ldr	r3, [pc, #344]	@ (8008024 <main+0x398>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d803      	bhi.n	8007ed8 <main+0x24c>
 8007ed0:	4b56      	ldr	r3, [pc, #344]	@ (800802c <main+0x3a0>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d016      	beq.n	8007f06 <main+0x27a>
 8007ed8:	4b55      	ldr	r3, [pc, #340]	@ (8008030 <main+0x3a4>)
 8007eda:	789b      	ldrb	r3, [r3, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d012      	beq.n	8007f06 <main+0x27a>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007ee0:	f001 f896 	bl	8009010 <sen5x_Get_sen5x_enable_state>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4053      	eors	r3, r2
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d006      	beq.n	8007f00 <main+0x274>
 8007ef2:	4b53      	ldr	r3, [pc, #332]	@ (8008040 <main+0x3b4>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <main+0x274>
          sen5x_enable(0);
 8007efa:	2000      	movs	r0, #0
 8007efc:	f001 f8b4 	bl	8009068 <sen5x_enable>
        }
        sen5x_statemachine();
 8007f00:	f001 fdea 	bl	8009ad8 <sen5x_statemachine>
 8007f04:	e020      	b.n	8007f48 <main+0x2bc>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007f06:	4b47      	ldr	r3, [pc, #284]	@ (8008024 <main+0x398>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d81c      	bhi.n	8007f48 <main+0x2bc>
 8007f0e:	4b47      	ldr	r3, [pc, #284]	@ (800802c <main+0x3a0>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2201      	movs	r2, #1
 8007f14:	4053      	eors	r3, r2
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d015      	beq.n	8007f48 <main+0x2bc>
 8007f1c:	4b44      	ldr	r3, [pc, #272]	@ (8008030 <main+0x3a4>)
 8007f1e:	789b      	ldrb	r3, [r3, #2]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d011      	beq.n	8007f48 <main+0x2bc>
        Info("Battery level insufficient for sen5x operation");
 8007f24:	4a4c      	ldr	r2, [pc, #304]	@ (8008058 <main+0x3cc>)
 8007f26:	4b4d      	ldr	r3, [pc, #308]	@ (800805c <main+0x3d0>)
 8007f28:	0019      	movs	r1, r3
 8007f2a:	2002      	movs	r0, #2
 8007f2c:	f006 fa92 	bl	800e454 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007f30:	4b3f      	ldr	r3, [pc, #252]	@ (8008030 <main+0x3a4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007f36:	4b4a      	ldr	r3, [pc, #296]	@ (8008060 <main+0x3d4>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007f3c:	4b49      	ldr	r3, [pc, #292]	@ (8008064 <main+0x3d8>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <main+0x2bc>
          sen5x_Power_Off();
 8007f44:	f001 f902 	bl	800914c <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007f48:	f7fd fade 	bl	8005508 <ESP_Upkeep>
 8007f4c:	0003      	movs	r3, r0
 8007f4e:	001a      	movs	r2, r3
 8007f50:	4b38      	ldr	r3, [pc, #224]	@ (8008034 <main+0x3a8>)
 8007f52:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f54:	4b39      	ldr	r3, [pc, #228]	@ (800803c <main+0x3b0>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4053      	eors	r3, r2
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00f      	beq.n	8007f82 <main+0x2f6>
 8007f62:	4b1e      	ldr	r3, [pc, #120]	@ (8007fdc <main+0x350>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2201      	movs	r2, #1
 8007f68:	4053      	eors	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <main+0x2f6>
 8007f70:	4b31      	ldr	r3, [pc, #196]	@ (8008038 <main+0x3ac>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	4053      	eors	r3, r2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <main+0x2f6>
      Device_Test();  // for device with startup time
 8007f7e:	f000 fbb5 	bl	80086ec <Device_Test>
    }
    if (!usbPluggedIn) {
 8007f82:	4b2f      	ldr	r3, [pc, #188]	@ (8008040 <main+0x3b4>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2201      	movs	r2, #1
 8007f88:	4053      	eors	r3, r2
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d100      	bne.n	8007f92 <main+0x306>
 8007f90:	e6f1      	b.n	8007d76 <main+0xea>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007f92:	4b35      	ldr	r3, [pc, #212]	@ (8008068 <main+0x3dc>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2201      	movs	r2, #1
 8007f98:	4053      	eors	r3, r2
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d100      	bne.n	8007fa2 <main+0x316>
 8007fa0:	e6e9      	b.n	8007d76 <main+0xea>
 8007fa2:	f000 fc21 	bl	80087e8 <AllDevicesReady>
 8007fa6:	1e03      	subs	r3, r0, #0
 8007fa8:	d100      	bne.n	8007fac <main+0x320>
 8007faa:	e6e4      	b.n	8007d76 <main+0xea>
 8007fac:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <main+0x3e0>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d100      	bne.n	8007fb6 <main+0x32a>
 8007fb4:	e6df      	b.n	8007d76 <main+0xea>
        EnabledConnectedDevices();
 8007fb6:	f000 fc7f 	bl	80088b8 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007fba:	4b2d      	ldr	r3, [pc, #180]	@ (8008070 <main+0x3e4>)
 8007fbc:	789b      	ldrb	r3, [r3, #2]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <main+0x33c>
 8007fc2:	23d7      	movs	r3, #215	@ 0xd7
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	e001      	b.n	8007fcc <main+0x340>
 8007fc8:	23dc      	movs	r3, #220	@ 0xdc
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f7fe fdef 	bl	8006bb0 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007fd2:	e6d0      	b.n	8007d76 <main+0xea>
 8007fd4:	2000204c 	.word	0x2000204c
 8007fd8:	2000200c 	.word	0x2000200c
 8007fdc:	20000fa1 	.word	0x20000fa1
 8007fe0:	20000fa8 	.word	0x20000fa8
 8007fe4:	20002184 	.word	0x20002184
 8007fe8:	20001034 	.word	0x20001034
 8007fec:	08023ec8 	.word	0x08023ec8
 8007ff0:	08023ed8 	.word	0x08023ed8
 8007ff4:	2000208c 	.word	0x2000208c
 8007ff8:	20000f1c 	.word	0x20000f1c
 8007ffc:	20000f58 	.word	0x20000f58
 8008000:	08023edc 	.word	0x08023edc
 8008004:	080254d0 	.word	0x080254d0
 8008008:	2000223c 	.word	0x2000223c
 800800c:	20000d88 	.word	0x20000d88
 8008010:	20000de4 	.word	0x20000de4
 8008014:	000061a8 	.word	0x000061a8
 8008018:	20000fb8 	.word	0x20000fb8
 800801c:	20000fa3 	.word	0x20000fa3
 8008020:	20000fbc 	.word	0x20000fbc
 8008024:	20000fc0 	.word	0x20000fc0
 8008028:	0000c350 	.word	0x0000c350
 800802c:	20000084 	.word	0x20000084
 8008030:	20000fc4 	.word	0x20000fc4
 8008034:	20000fa7 	.word	0x20000fa7
 8008038:	20000fa2 	.word	0x20000fa2
 800803c:	20000fa0 	.word	0x20000fa0
 8008040:	20001ff5 	.word	0x20001ff5
 8008044:	08023ef0 	.word	0x08023ef0
 8008048:	2000105c 	.word	0x2000105c
 800804c:	20000fa4 	.word	0x20000fa4
 8008050:	20000fa5 	.word	0x20000fa5
 8008054:	20000fa6 	.word	0x20000fa6
 8008058:	08023f10 	.word	0x08023f10
 800805c:	08023f40 	.word	0x08023f40
 8008060:	2000105a 	.word	0x2000105a
 8008064:	20001059 	.word	0x20001059
 8008068:	20001ff6 	.word	0x20001ff6
 800806c:	20000554 	.word	0x20000554
 8008070:	20000fc8 	.word	0x20000fc8

08008074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008074:	b590      	push	{r4, r7, lr}
 8008076:	b09d      	sub	sp, #116	@ 0x74
 8008078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800807a:	2438      	movs	r4, #56	@ 0x38
 800807c:	193b      	adds	r3, r7, r4
 800807e:	0018      	movs	r0, r3
 8008080:	2338      	movs	r3, #56	@ 0x38
 8008082:	001a      	movs	r2, r3
 8008084:	2100      	movs	r1, #0
 8008086:	f018 f883 	bl	8020190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800808a:	2324      	movs	r3, #36	@ 0x24
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	0018      	movs	r0, r3
 8008090:	2314      	movs	r3, #20
 8008092:	001a      	movs	r2, r3
 8008094:	2100      	movs	r1, #0
 8008096:	f018 f87b 	bl	8020190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800809a:	003b      	movs	r3, r7
 800809c:	0018      	movs	r0, r3
 800809e:	2324      	movs	r3, #36	@ 0x24
 80080a0:	001a      	movs	r2, r3
 80080a2:	2100      	movs	r1, #0
 80080a4:	f018 f874 	bl	8020190 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080a8:	4b34      	ldr	r3, [pc, #208]	@ (800817c <SystemClock_Config+0x108>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a34      	ldr	r2, [pc, #208]	@ (8008180 <SystemClock_Config+0x10c>)
 80080ae:	401a      	ands	r2, r3
 80080b0:	4b32      	ldr	r3, [pc, #200]	@ (800817c <SystemClock_Config+0x108>)
 80080b2:	2180      	movs	r1, #128	@ 0x80
 80080b4:	0109      	lsls	r1, r1, #4
 80080b6:	430a      	orrs	r2, r1
 80080b8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080ba:	f00c feb1 	bl	8014e20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80080be:	4b31      	ldr	r3, [pc, #196]	@ (8008184 <SystemClock_Config+0x110>)
 80080c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c2:	4a2f      	ldr	r2, [pc, #188]	@ (8008180 <SystemClock_Config+0x10c>)
 80080c4:	401a      	ands	r2, r3
 80080c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <SystemClock_Config+0x110>)
 80080c8:	2180      	movs	r1, #128	@ 0x80
 80080ca:	0149      	lsls	r1, r1, #5
 80080cc:	430a      	orrs	r2, r1
 80080ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80080d0:	193b      	adds	r3, r7, r4
 80080d2:	2226      	movs	r2, #38	@ 0x26
 80080d4:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80080d6:	193b      	adds	r3, r7, r4
 80080d8:	2280      	movs	r2, #128	@ 0x80
 80080da:	0052      	lsls	r2, r2, #1
 80080dc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080de:	0021      	movs	r1, r4
 80080e0:	187b      	adds	r3, r7, r1
 80080e2:	2201      	movs	r2, #1
 80080e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	2210      	movs	r2, #16
 80080ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80080ec:	187b      	adds	r3, r7, r1
 80080ee:	2201      	movs	r2, #1
 80080f0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	0018      	movs	r0, r3
 80080fc:	f00c ff20 	bl	8014f40 <HAL_RCC_OscConfig>
 8008100:	1e03      	subs	r3, r0, #0
 8008102:	d001      	beq.n	8008108 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008104:	f000 f8fc 	bl	8008300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008108:	2124      	movs	r1, #36	@ 0x24
 800810a:	187b      	adds	r3, r7, r1
 800810c:	220f      	movs	r2, #15
 800810e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008110:	187b      	adds	r3, r7, r1
 8008112:	2201      	movs	r2, #1
 8008114:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008116:	187b      	adds	r3, r7, r1
 8008118:	2200      	movs	r2, #0
 800811a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800811c:	187b      	adds	r3, r7, r1
 800811e:	2200      	movs	r2, #0
 8008120:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008122:	187b      	adds	r3, r7, r1
 8008124:	2200      	movs	r2, #0
 8008126:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008128:	187b      	adds	r3, r7, r1
 800812a:	2100      	movs	r1, #0
 800812c:	0018      	movs	r0, r3
 800812e:	f00d fadb 	bl	80156e8 <HAL_RCC_ClockConfig>
 8008132:	1e03      	subs	r3, r0, #0
 8008134:	d001      	beq.n	800813a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008136:	f000 f8e3 	bl	8008300 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800813a:	003b      	movs	r3, r7
 800813c:	226d      	movs	r2, #109	@ 0x6d
 800813e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008140:	003b      	movs	r3, r7
 8008142:	2200      	movs	r2, #0
 8008144:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008146:	003b      	movs	r3, r7
 8008148:	2200      	movs	r2, #0
 800814a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800814c:	003b      	movs	r3, r7
 800814e:	2200      	movs	r2, #0
 8008150:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008152:	003b      	movs	r3, r7
 8008154:	2280      	movs	r2, #128	@ 0x80
 8008156:	0252      	lsls	r2, r2, #9
 8008158:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800815a:	003b      	movs	r3, r7
 800815c:	2280      	movs	r2, #128	@ 0x80
 800815e:	04d2      	lsls	r2, r2, #19
 8008160:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008162:	003b      	movs	r3, r7
 8008164:	0018      	movs	r0, r3
 8008166:	f00d fce3 	bl	8015b30 <HAL_RCCEx_PeriphCLKConfig>
 800816a:	1e03      	subs	r3, r0, #0
 800816c:	d001      	beq.n	8008172 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800816e:	f000 f8c7 	bl	8008300 <Error_Handler>
  }
}
 8008172:	46c0      	nop			@ (mov r8, r8)
 8008174:	46bd      	mov	sp, r7
 8008176:	b01d      	add	sp, #116	@ 0x74
 8008178:	bd90      	pop	{r4, r7, pc}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	40007000 	.word	0x40007000
 8008180:	ffffe7ff 	.word	0xffffe7ff
 8008184:	40021000 	.word	0x40021000

08008188 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800818c:	4b2f      	ldr	r3, [pc, #188]	@ (800824c <check_cli_command+0xc4>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	3b61      	subs	r3, #97	@ 0x61
 8008192:	2b13      	cmp	r3, #19
 8008194:	d830      	bhi.n	80081f8 <check_cli_command+0x70>
 8008196:	009a      	lsls	r2, r3, #2
 8008198:	4b2d      	ldr	r3, [pc, #180]	@ (8008250 <check_cli_command+0xc8>)
 800819a:	18d3      	adds	r3, r2, r3
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80081a0:	4b2c      	ldr	r3, [pc, #176]	@ (8008254 <check_cli_command+0xcc>)
 80081a2:	0018      	movs	r0, r3
 80081a4:	f017 fea6 	bl	801fef4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80081a8:	2003      	movs	r0, #3
 80081aa:	f006 f9bd 	bl	800e528 <SetVerboseLevel>
      break;
 80081ae:	e04a      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80081b0:	f7fb faf4 	bl	800379c <forceNTPupdate>
    break;
 80081b4:	e047      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80081b6:	4b28      	ldr	r3, [pc, #160]	@ (8008258 <check_cli_command+0xd0>)
 80081b8:	0018      	movs	r0, r3
 80081ba:	f017 fe9b 	bl	801fef4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80081be:	2002      	movs	r0, #2
 80081c0:	f006 f9b2 	bl	800e528 <SetVerboseLevel>
      break;
 80081c4:	e03f      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 80081c6:	4b25      	ldr	r3, [pc, #148]	@ (800825c <check_cli_command+0xd4>)
 80081c8:	0018      	movs	r0, r3
 80081ca:	f017 fe93 	bl	801fef4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 80081ce:	2001      	movs	r0, #1
 80081d0:	f006 f9aa 	bl	800e528 <SetVerboseLevel>
      break;
 80081d4:	e037      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80081d6:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <check_cli_command+0xd8>)
 80081d8:	0018      	movs	r0, r3
 80081da:	f017 fe8b 	bl	801fef4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80081de:	2000      	movs	r0, #0
 80081e0:	f006 f9a2 	bl	800e528 <SetVerboseLevel>
      break;
 80081e4:	e02f      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80081e6:	f006 fd7b 	bl	800ece0 <HAL_GetTick>
 80081ea:	0002      	movs	r2, r0
 80081ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <check_cli_command+0xdc>)
 80081ee:	601a      	str	r2, [r3, #0]
      break;
 80081f0:	e029      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80081f2:	f7fe f98f 	bl	8006514 <showTime>
      break;
 80081f6:	e026      	b.n	8008246 <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80081f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008268 <check_cli_command+0xe0>)
 80081fa:	4b1c      	ldr	r3, [pc, #112]	@ (800826c <check_cli_command+0xe4>)
 80081fc:	0019      	movs	r1, r3
 80081fe:	2001      	movs	r0, #1
 8008200:	f006 f928 	bl	800e454 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008204:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <check_cli_command+0xe8>)
 8008206:	0018      	movs	r0, r3
 8008208:	f017 fe74 	bl	801fef4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800820c:	4b19      	ldr	r3, [pc, #100]	@ (8008274 <check_cli_command+0xec>)
 800820e:	0018      	movs	r0, r3
 8008210:	f017 fe70 	bl	801fef4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008214:	4b18      	ldr	r3, [pc, #96]	@ (8008278 <check_cli_command+0xf0>)
 8008216:	0018      	movs	r0, r3
 8008218:	f017 fe6c 	bl	801fef4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800821c:	4b17      	ldr	r3, [pc, #92]	@ (800827c <check_cli_command+0xf4>)
 800821e:	0018      	movs	r0, r3
 8008220:	f017 fe68 	bl	801fef4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008224:	4b16      	ldr	r3, [pc, #88]	@ (8008280 <check_cli_command+0xf8>)
 8008226:	0018      	movs	r0, r3
 8008228:	f017 fe64 	bl	801fef4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800822c:	4b15      	ldr	r3, [pc, #84]	@ (8008284 <check_cli_command+0xfc>)
 800822e:	0018      	movs	r0, r3
 8008230:	f017 fe60 	bl	801fef4 <puts>
      printf("s - Start particle measurement\r\n");
 8008234:	4b14      	ldr	r3, [pc, #80]	@ (8008288 <check_cli_command+0x100>)
 8008236:	0018      	movs	r0, r3
 8008238:	f017 fe5c 	bl	801fef4 <puts>
      printf("t - Show actual systemtime\r\n");
 800823c:	4b13      	ldr	r3, [pc, #76]	@ (800828c <check_cli_command+0x104>)
 800823e:	0018      	movs	r0, r3
 8008240:	f017 fe58 	bl	801fef4 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008244:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20000fa8 	.word	0x20000fa8
 8008250:	08025480 	.word	0x08025480
 8008254:	08023f44 	.word	0x08023f44
 8008258:	08023f60 	.word	0x08023f60
 800825c:	08023f7c 	.word	0x08023f7c
 8008260:	08023f9c 	.word	0x08023f9c
 8008264:	20001070 	.word	0x20001070
 8008268:	08023fb8 	.word	0x08023fb8
 800826c:	08023fe8 	.word	0x08023fe8
 8008270:	08023fec 	.word	0x08023fec
 8008274:	08024004 	.word	0x08024004
 8008278:	08024024 	.word	0x08024024
 800827c:	08024048 	.word	0x08024048
 8008280:	08024068 	.word	0x08024068
 8008284:	0802408c 	.word	0x0802408c
 8008288:	080240ac 	.word	0x080240ac
 800828c:	080240cc 	.word	0x080240cc

08008290 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008298:	4908      	ldr	r1, [pc, #32]	@ (80082bc <HAL_UART_RxCpltCallback+0x2c>)
 800829a:	4b09      	ldr	r3, [pc, #36]	@ (80082c0 <HAL_UART_RxCpltCallback+0x30>)
 800829c:	2201      	movs	r2, #1
 800829e:	0018      	movs	r0, r3
 80082a0:	f00e ffea 	bl	8017278 <HAL_UART_Receive_IT>
  check_cli_command();
 80082a4:	f7ff ff70 	bl	8008188 <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80082a8:	4904      	ldr	r1, [pc, #16]	@ (80082bc <HAL_UART_RxCpltCallback+0x2c>)
 80082aa:	4b05      	ldr	r3, [pc, #20]	@ (80082c0 <HAL_UART_RxCpltCallback+0x30>)
 80082ac:	2201      	movs	r2, #1
 80082ae:	0018      	movs	r0, r3
 80082b0:	f00e ffe2 	bl	8017278 <HAL_UART_Receive_IT>
}
 80082b4:	46c0      	nop			@ (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20000fa8 	.word	0x20000fa8
 80082c0:	20002184 	.word	0x20002184

080082c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	0002      	movs	r2, r0
 80082cc:	1dbb      	adds	r3, r7, #6
 80082ce:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 80082d0:	1dbb      	adds	r3, r7, #6
 80082d2:	881a      	ldrh	r2, [r3, #0]
 80082d4:	2380      	movs	r3, #128	@ 0x80
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	429a      	cmp	r2, r3
 80082da:	d10b      	bne.n	80082f4 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 80082dc:	f005 fb5e 	bl	800d99c <setuserToggle>
    if (GetPMSensorPresence()) {
 80082e0:	f000 f84c 	bl	800837c <GetPMSensorPresence>
 80082e4:	1e03      	subs	r3, r0, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 80082e8:	4b04      	ldr	r3, [pc, #16]	@ (80082fc <HAL_GPIO_EXTI_Callback+0x38>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 80082ee:	2064      	movs	r0, #100	@ 0x64
 80082f0:	f000 fe98 	bl	8009024 <setsen5xReadTimer>
    }

  }
}
 80082f4:	46c0      	nop			@ (mov r8, r8)
 80082f6:	46bd      	mov	sp, r7
 80082f8:	b002      	add	sp, #8
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000fc4 	.word	0x20000fc4

08008300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008304:	b672      	cpsid	i
}
 8008306:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008308:	4a05      	ldr	r2, [pc, #20]	@ (8008320 <Error_Handler+0x20>)
 800830a:	4b06      	ldr	r3, [pc, #24]	@ (8008324 <Error_Handler+0x24>)
 800830c:	0019      	movs	r1, r3
 800830e:	2001      	movs	r0, #1
 8008310:	f006 f8a0 	bl	800e454 <CreateLine>
    HAL_Delay(2500);
 8008314:	4b04      	ldr	r3, [pc, #16]	@ (8008328 <Error_Handler+0x28>)
 8008316:	0018      	movs	r0, r3
 8008318:	f006 fcec 	bl	800ecf4 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800831c:	46c0      	nop			@ (mov r8, r8)
 800831e:	e7f3      	b.n	8008308 <Error_Handler+0x8>
 8008320:	080240e8 	.word	0x080240e8
 8008324:	08023fe8 	.word	0x08023fe8
 8008328:	000009c4 	.word	0x000009c4

0800832c <testInit>:
};
*/
EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008330:	4b10      	ldr	r3, [pc, #64]	@ (8008374 <testInit+0x48>)
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008336:	4b0f      	ldr	r3, [pc, #60]	@ (8008374 <testInit+0x48>)
 8008338:	2200      	movs	r2, #0
 800833a:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 800833c:	4b0d      	ldr	r3, [pc, #52]	@ (8008374 <testInit+0x48>)
 800833e:	2200      	movs	r2, #0
 8008340:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8008342:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <testInit+0x48>)
 8008344:	2200      	movs	r2, #0
 8008346:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008348:	4b0a      	ldr	r3, [pc, #40]	@ (8008374 <testInit+0x48>)
 800834a:	2200      	movs	r2, #0
 800834c:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 800834e:	4b09      	ldr	r3, [pc, #36]	@ (8008374 <testInit+0x48>)
 8008350:	2200      	movs	r2, #0
 8008352:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008354:	4b08      	ldr	r3, [pc, #32]	@ (8008378 <testInit+0x4c>)
 8008356:	2201      	movs	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800835a:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <testInit+0x4c>)
 800835c:	2201      	movs	r2, #1
 800835e:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008360:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <testInit+0x4c>)
 8008362:	2201      	movs	r2, #1
 8008364:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 8008366:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <testInit+0x4c>)
 8008368:	2201      	movs	r2, #1
 800836a:	70da      	strb	r2, [r3, #3]
}
 800836c:	46c0      	nop			@ (mov r8, r8)
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	46c0      	nop			@ (mov r8, r8)
 8008374:	20000fc8 	.word	0x20000fc8
 8008378:	20000fc4 	.word	0x20000fc4

0800837c <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008380:	4b02      	ldr	r3, [pc, #8]	@ (800838c <GetPMSensorPresence+0x10>)
 8008382:	789b      	ldrb	r3, [r3, #2]
}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	20000fc8 	.word	0x20000fc8

08008390 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 8008394:	4b02      	ldr	r3, [pc, #8]	@ (80083a0 <IsSGPPresent+0x10>)
 8008396:	785b      	ldrb	r3, [r3, #1]
}
 8008398:	0018      	movs	r0, r3
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	20000fc8 	.word	0x20000fc8

080083a4 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	0002      	movs	r2, r0
 80083ac:	1dfb      	adds	r3, r7, #7
 80083ae:	701a      	strb	r2, [r3, #0]
  SensorProbe.SGP_Enabled = setting;
 80083b0:	4b0b      	ldr	r3, [pc, #44]	@ (80083e0 <SetVOCSensorDIS_ENA+0x3c>)
 80083b2:	1dfa      	adds	r2, r7, #7
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	715a      	strb	r2, [r3, #5]
//  SensorProbe.VOC_Present = setting;
  Sensor.VOC_measurementEnabled = setting;
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <SetVOCSensorDIS_ENA+0x40>)
 80083ba:	1dfa      	adds	r2, r7, #7
 80083bc:	7812      	ldrb	r2, [r2, #0]
 80083be:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 80083c0:	1dfb      	adds	r3, r7, #7
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <SetVOCSensorDIS_ENA+0x28>
 80083c8:	4b07      	ldr	r3, [pc, #28]	@ (80083e8 <SetVOCSensorDIS_ENA+0x44>)
 80083ca:	e000      	b.n	80083ce <SetVOCSensorDIS_ENA+0x2a>
 80083cc:	4b07      	ldr	r3, [pc, #28]	@ (80083ec <SetVOCSensorDIS_ENA+0x48>)
 80083ce:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <SetVOCSensorDIS_ENA+0x4c>)
 80083d0:	4908      	ldr	r1, [pc, #32]	@ (80083f4 <SetVOCSensorDIS_ENA+0x50>)
 80083d2:	2003      	movs	r0, #3
 80083d4:	f006 f83e 	bl	800e454 <CreateLine>
}
 80083d8:	46c0      	nop			@ (mov r8, r8)
 80083da:	46bd      	mov	sp, r7
 80083dc:	b002      	add	sp, #8
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000fc8 	.word	0x20000fc8
 80083e4:	20000fc4 	.word	0x20000fc4
 80083e8:	08024114 	.word	0x08024114
 80083ec:	0802411c 	.word	0x0802411c
 80083f0:	08024128 	.word	0x08024128
 80083f4:	0802413c 	.word	0x0802413c

080083f8 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 80083fc:	4b02      	ldr	r3, [pc, #8]	@ (8008408 <IsPMSensorEnabled+0x10>)
 80083fe:	789b      	ldrb	r3, [r3, #2]
}
 8008400:	0018      	movs	r0, r3
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	46c0      	nop			@ (mov r8, r8)
 8008408:	20000fc4 	.word	0x20000fc4

0800840c <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	0002      	movs	r2, r0
 8008414:	1dfb      	adds	r3, r7, #7
 8008416:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = setting;
 8008418:	4b03      	ldr	r3, [pc, #12]	@ (8008428 <SetVOCSensorStatus+0x1c>)
 800841a:	1dfa      	adds	r2, r7, #7
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	705a      	strb	r2, [r3, #1]
}
 8008420:	46c0      	nop			@ (mov r8, r8)
 8008422:	46bd      	mov	sp, r7
 8008424:	b002      	add	sp, #8
 8008426:	bd80      	pop	{r7, pc}
 8008428:	20000fc4 	.word	0x20000fc4

0800842c <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	0002      	movs	r2, r0
 8008434:	1dfb      	adds	r3, r7, #7
 8008436:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008438:	4b03      	ldr	r3, [pc, #12]	@ (8008448 <SetPMSensorStatus+0x1c>)
 800843a:	1dfa      	adds	r2, r7, #7
 800843c:	7812      	ldrb	r2, [r2, #0]
 800843e:	709a      	strb	r2, [r3, #2]
}
 8008440:	46c0      	nop			@ (mov r8, r8)
 8008442:	46bd      	mov	sp, r7
 8008444:	b002      	add	sp, #8
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000fc4 	.word	0x20000fc4

0800844c <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008450:	4b02      	ldr	r3, [pc, #8]	@ (800845c <SetESPMeasurementDone+0x10>)
 8008452:	2201      	movs	r2, #1
 8008454:	711a      	strb	r2, [r3, #4]
}
 8008456:	46c0      	nop			@ (mov r8, r8)
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000fc8 	.word	0x20000fc8

08008460 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
  testInit();
 800846e:	f7ff ff5d 	bl	800832c <testInit>
  I2CSensors_Init(sensorI2C);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	0018      	movs	r0, r3
 8008476:	f7fd fce3 	bl	8005e40 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800847a:	f006 fa1d 	bl	800e8b8 <HIDS_DeviceConnected>
 800847e:	0003      	movs	r3, r0
 8008480:	001a      	movs	r2, r3
 8008482:	2301      	movs	r3, #1
 8008484:	4053      	eors	r3, r2
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00c      	beq.n	80084a6 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800848c:	4a7f      	ldr	r2, [pc, #508]	@ (800868c <Device_Init+0x22c>)
 800848e:	4b80      	ldr	r3, [pc, #512]	@ (8008690 <Device_Init+0x230>)
 8008490:	0019      	movs	r1, r3
 8008492:	2001      	movs	r0, #1
 8008494:	f005 ffde 	bl	800e454 <CreateLine>
     SensorProbe.HT_Present = false;
 8008498:	4b7e      	ldr	r3, [pc, #504]	@ (8008694 <Device_Init+0x234>)
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800849e:	4b7e      	ldr	r3, [pc, #504]	@ (8008698 <Device_Init+0x238>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
 80084a4:	e008      	b.n	80084b8 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80084a6:	4b7b      	ldr	r3, [pc, #492]	@ (8008694 <Device_Init+0x234>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 80084ac:	4a7b      	ldr	r2, [pc, #492]	@ (800869c <Device_Init+0x23c>)
 80084ae:	4b7c      	ldr	r3, [pc, #496]	@ (80086a0 <Device_Init+0x240>)
 80084b0:	0019      	movs	r1, r3
 80084b2:	2003      	movs	r0, #3
 80084b4:	f005 ffce 	bl	800e454 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 80084b8:	f003 fbc0 	bl	800bc3c <SGP_DeviceConnected>
 80084bc:	0003      	movs	r3, r0
 80084be:	001a      	movs	r2, r3
 80084c0:	2301      	movs	r3, #1
 80084c2:	4053      	eors	r3, r2
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 80084ca:	4b72      	ldr	r3, [pc, #456]	@ (8008694 <Device_Init+0x234>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 80084d0:	4a74      	ldr	r2, [pc, #464]	@ (80086a4 <Device_Init+0x244>)
 80084d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008690 <Device_Init+0x230>)
 80084d4:	0019      	movs	r1, r3
 80084d6:	2001      	movs	r0, #1
 80084d8:	f005 ffbc 	bl	800e454 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 80084dc:	4b6e      	ldr	r3, [pc, #440]	@ (8008698 <Device_Init+0x238>)
 80084de:	2200      	movs	r2, #0
 80084e0:	705a      	strb	r2, [r3, #1]
 80084e2:	e00b      	b.n	80084fc <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 80084e4:	4b6b      	ldr	r3, [pc, #428]	@ (8008694 <Device_Init+0x234>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 80084ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008694 <Device_Init+0x234>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 80084f0:	4a6d      	ldr	r2, [pc, #436]	@ (80086a8 <Device_Init+0x248>)
 80084f2:	4b6b      	ldr	r3, [pc, #428]	@ (80086a0 <Device_Init+0x240>)
 80084f4:	0019      	movs	r1, r3
 80084f6:	2003      	movs	r0, #3
 80084f8:	f005 ffac 	bl	800e454 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 80084fc:	4b65      	ldr	r3, [pc, #404]	@ (8008694 <Device_Init+0x234>)
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <Device_Init+0xb8>
 8008504:	4b63      	ldr	r3, [pc, #396]	@ (8008694 <Device_Init+0x234>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 800850c:	2200      	movs	r2, #0
 800850e:	2101      	movs	r1, #1
 8008510:	2000      	movs	r0, #0
 8008512:	f004 fea1 	bl	800d258 <SetDBLED>
 8008516:	e018      	b.n	800854a <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	2001      	movs	r0, #1
 800851e:	f004 fe9b 	bl	800d258 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008522:	4b62      	ldr	r3, [pc, #392]	@ (80086ac <Device_Init+0x24c>)
 8008524:	2200      	movs	r2, #0
 8008526:	2101      	movs	r1, #1
 8008528:	0018      	movs	r0, r3
 800852a:	f007 fe6a 	bl	8010202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800852e:	2380      	movs	r3, #128	@ 0x80
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	485e      	ldr	r0, [pc, #376]	@ (80086ac <Device_Init+0x24c>)
 8008534:	2201      	movs	r2, #1
 8008536:	0019      	movs	r1, r3
 8008538:	f007 fe63 	bl	8010202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800853c:	2380      	movs	r3, #128	@ 0x80
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	485a      	ldr	r0, [pc, #360]	@ (80086ac <Device_Init+0x24c>)
 8008542:	2201      	movs	r2, #1
 8008544:	0019      	movs	r1, r3
 8008546:	f007 fe5c 	bl	8010202 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800854a:	4b53      	ldr	r3, [pc, #332]	@ (8008698 <Device_Init+0x238>)
 800854c:	78db      	ldrb	r3, [r3, #3]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d028      	beq.n	80085a4 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008552:	4a57      	ldr	r2, [pc, #348]	@ (80086b0 <Device_Init+0x250>)
 8008554:	4b57      	ldr	r3, [pc, #348]	@ (80086b4 <Device_Init+0x254>)
 8008556:	0019      	movs	r1, r3
 8008558:	2002      	movs	r0, #2
 800855a:	f005 ff7b 	bl	800e454 <CreateLine>
    if (!enableMicrophone(true)) {
 800855e:	2001      	movs	r0, #1
 8008560:	f003 ff78 	bl	800c454 <enableMicrophone>
 8008564:	0003      	movs	r3, r0
 8008566:	001a      	movs	r2, r3
 8008568:	2301      	movs	r3, #1
 800856a:	4053      	eors	r3, r2
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00c      	beq.n	800858c <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 8008572:	4a51      	ldr	r2, [pc, #324]	@ (80086b8 <Device_Init+0x258>)
 8008574:	4b46      	ldr	r3, [pc, #280]	@ (8008690 <Device_Init+0x230>)
 8008576:	0019      	movs	r1, r3
 8008578:	2001      	movs	r0, #1
 800857a:	f005 ff6b 	bl	800e454 <CreateLine>
      SensorProbe.MIC_Present = false;
 800857e:	4b45      	ldr	r3, [pc, #276]	@ (8008694 <Device_Init+0x234>)
 8008580:	2200      	movs	r2, #0
 8008582:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008584:	4b44      	ldr	r3, [pc, #272]	@ (8008698 <Device_Init+0x238>)
 8008586:	2200      	movs	r2, #0
 8008588:	70da      	strb	r2, [r3, #3]
 800858a:	e00b      	b.n	80085a4 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 800858c:	4b41      	ldr	r3, [pc, #260]	@ (8008694 <Device_Init+0x234>)
 800858e:	2201      	movs	r2, #1
 8008590:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008592:	4b41      	ldr	r3, [pc, #260]	@ (8008698 <Device_Init+0x238>)
 8008594:	2201      	movs	r2, #1
 8008596:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8008598:	4a48      	ldr	r2, [pc, #288]	@ (80086bc <Device_Init+0x25c>)
 800859a:	4b41      	ldr	r3, [pc, #260]	@ (80086a0 <Device_Init+0x240>)
 800859c:	0019      	movs	r1, r3
 800859e:	2003      	movs	r0, #3
 80085a0:	f005 ff58 	bl	800e454 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80085a4:	f000 fe08 	bl	80091b8 <probe_sen5x>
 80085a8:	1e03      	subs	r3, r0, #0
 80085aa:	d122      	bne.n	80085f2 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 80085ac:	4a44      	ldr	r2, [pc, #272]	@ (80086c0 <Device_Init+0x260>)
 80085ae:	4b3c      	ldr	r3, [pc, #240]	@ (80086a0 <Device_Init+0x240>)
 80085b0:	0019      	movs	r1, r3
 80085b2:	2003      	movs	r0, #3
 80085b4:	f005 ff4e 	bl	800e454 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 80085b8:	4b36      	ldr	r3, [pc, #216]	@ (8008694 <Device_Init+0x234>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 80085be:	4b36      	ldr	r3, [pc, #216]	@ (8008698 <Device_Init+0x238>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 80085c4:	4b3f      	ldr	r3, [pc, #252]	@ (80086c4 <Device_Init+0x264>)
 80085c6:	791b      	ldrb	r3, [r3, #4]
 80085c8:	2b34      	cmp	r3, #52	@ 0x34
 80085ca:	d003      	beq.n	80085d4 <Device_Init+0x174>
 80085cc:	4b3d      	ldr	r3, [pc, #244]	@ (80086c4 <Device_Init+0x264>)
 80085ce:	791b      	ldrb	r3, [r3, #4]
 80085d0:	2b35      	cmp	r3, #53	@ 0x35
 80085d2:	d11c      	bne.n	800860e <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 80085d4:	4a3c      	ldr	r2, [pc, #240]	@ (80086c8 <Device_Init+0x268>)
 80085d6:	4b37      	ldr	r3, [pc, #220]	@ (80086b4 <Device_Init+0x254>)
 80085d8:	0019      	movs	r1, r3
 80085da:	2002      	movs	r0, #2
 80085dc:	f005 ff3a 	bl	800e454 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 80085e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008698 <Device_Init+0x238>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 80085e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008694 <Device_Init+0x234>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 80085ec:	f003 fd0a 	bl	800c004 <SGP_SoftReset>
 80085f0:	e00d      	b.n	800860e <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 80085f2:	f000 fdab 	bl	800914c <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 80085f6:	4a35      	ldr	r2, [pc, #212]	@ (80086cc <Device_Init+0x26c>)
 80085f8:	4b29      	ldr	r3, [pc, #164]	@ (80086a0 <Device_Init+0x240>)
 80085fa:	0019      	movs	r1, r3
 80085fc:	2003      	movs	r0, #3
 80085fe:	f005 ff29 	bl	800e454 <CreateLine>
    SensorProbe.PM_Present = false;
 8008602:	4b24      	ldr	r3, [pc, #144]	@ (8008694 <Device_Init+0x234>)
 8008604:	2200      	movs	r2, #0
 8008606:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008608:	4b23      	ldr	r3, [pc, #140]	@ (8008698 <Device_Init+0x238>)
 800860a:	2200      	movs	r2, #0
 800860c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800860e:	4b21      	ldr	r3, [pc, #132]	@ (8008694 <Device_Init+0x234>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <Device_Init+0x1ba>
 8008616:	4b2e      	ldr	r3, [pc, #184]	@ (80086d0 <Device_Init+0x270>)
 8008618:	e000      	b.n	800861c <Device_Init+0x1bc>
 800861a:	4b2e      	ldr	r3, [pc, #184]	@ (80086d4 <Device_Init+0x274>)
 800861c:	4a2e      	ldr	r2, [pc, #184]	@ (80086d8 <Device_Init+0x278>)
 800861e:	4925      	ldr	r1, [pc, #148]	@ (80086b4 <Device_Init+0x254>)
 8008620:	2002      	movs	r0, #2
 8008622:	f005 ff17 	bl	800e454 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8008626:	4b1b      	ldr	r3, [pc, #108]	@ (8008694 <Device_Init+0x234>)
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <Device_Init+0x1d2>
 800862e:	4b28      	ldr	r3, [pc, #160]	@ (80086d0 <Device_Init+0x270>)
 8008630:	e000      	b.n	8008634 <Device_Init+0x1d4>
 8008632:	4b28      	ldr	r3, [pc, #160]	@ (80086d4 <Device_Init+0x274>)
 8008634:	4a29      	ldr	r2, [pc, #164]	@ (80086dc <Device_Init+0x27c>)
 8008636:	491f      	ldr	r1, [pc, #124]	@ (80086b4 <Device_Init+0x254>)
 8008638:	2002      	movs	r0, #2
 800863a:	f005 ff0b 	bl	800e454 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800863e:	4b15      	ldr	r3, [pc, #84]	@ (8008694 <Device_Init+0x234>)
 8008640:	789b      	ldrb	r3, [r3, #2]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <Device_Init+0x1ea>
 8008646:	4b22      	ldr	r3, [pc, #136]	@ (80086d0 <Device_Init+0x270>)
 8008648:	e000      	b.n	800864c <Device_Init+0x1ec>
 800864a:	4b22      	ldr	r3, [pc, #136]	@ (80086d4 <Device_Init+0x274>)
 800864c:	4a24      	ldr	r2, [pc, #144]	@ (80086e0 <Device_Init+0x280>)
 800864e:	4919      	ldr	r1, [pc, #100]	@ (80086b4 <Device_Init+0x254>)
 8008650:	2002      	movs	r0, #2
 8008652:	f005 feff 	bl	800e454 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8008656:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <Device_Init+0x234>)
 8008658:	78db      	ldrb	r3, [r3, #3]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <Device_Init+0x202>
 800865e:	4b1c      	ldr	r3, [pc, #112]	@ (80086d0 <Device_Init+0x270>)
 8008660:	e000      	b.n	8008664 <Device_Init+0x204>
 8008662:	4b1c      	ldr	r3, [pc, #112]	@ (80086d4 <Device_Init+0x274>)
 8008664:	4a1f      	ldr	r2, [pc, #124]	@ (80086e4 <Device_Init+0x284>)
 8008666:	4913      	ldr	r1, [pc, #76]	@ (80086b4 <Device_Init+0x254>)
 8008668:	2002      	movs	r0, #2
 800866a:	f005 fef3 	bl	800e454 <CreateLine>
  ESP_Init(espUart);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	0018      	movs	r0, r3
 8008672:	f7fb fa43 	bl	8003afc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8008676:	4a1c      	ldr	r2, [pc, #112]	@ (80086e8 <Device_Init+0x288>)
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <Device_Init+0x240>)
 800867a:	0019      	movs	r1, r3
 800867c:	2003      	movs	r0, #3
 800867e:	f005 fee9 	bl	800e454 <CreateLine>
}
 8008682:	46c0      	nop			@ (mov r8, r8)
 8008684:	46bd      	mov	sp, r7
 8008686:	b004      	add	sp, #16
 8008688:	bd80      	pop	{r7, pc}
 800868a:	46c0      	nop			@ (mov r8, r8)
 800868c:	08024140 	.word	0x08024140
 8008690:	08024170 	.word	0x08024170
 8008694:	20000fc8 	.word	0x20000fc8
 8008698:	20000fc4 	.word	0x20000fc4
 800869c:	08024174 	.word	0x08024174
 80086a0:	0802413c 	.word	0x0802413c
 80086a4:	080241a0 	.word	0x080241a0
 80086a8:	080241bc 	.word	0x080241bc
 80086ac:	50000400 	.word	0x50000400
 80086b0:	080241d4 	.word	0x080241d4
 80086b4:	080241f8 	.word	0x080241f8
 80086b8:	080241fc 	.word	0x080241fc
 80086bc:	08024228 	.word	0x08024228
 80086c0:	08024254 	.word	0x08024254
 80086c4:	2000105c 	.word	0x2000105c
 80086c8:	0802426c 	.word	0x0802426c
 80086cc:	080242bc 	.word	0x080242bc
 80086d0:	080242e0 	.word	0x080242e0
 80086d4:	080242e4 	.word	0x080242e4
 80086d8:	080242e8 	.word	0x080242e8
 80086dc:	08024304 	.word	0x08024304
 80086e0:	08024320 	.word	0x08024320
 80086e4:	0802433c 	.word	0x0802433c
 80086e8:	08024358 	.word	0x08024358

080086ec <Device_Test>:

void Device_Test(){
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 80086f0:	4b34      	ldr	r3, [pc, #208]	@ (80087c4 <Device_Test+0xd8>)
 80086f2:	78db      	ldrb	r3, [r3, #3]
 80086f4:	2201      	movs	r2, #1
 80086f6:	4053      	eors	r3, r2
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d027      	beq.n	800874e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 80086fe:	f000 fab5 	bl	8008c6c <MIC_TestMeasurementDone>
 8008702:	1e03      	subs	r3, r0, #0
 8008704:	d011      	beq.n	800872a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 8008706:	4b2f      	ldr	r3, [pc, #188]	@ (80087c4 <Device_Test+0xd8>)
 8008708:	2201      	movs	r2, #1
 800870a:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 800870c:	4b2e      	ldr	r3, [pc, #184]	@ (80087c8 <Device_Test+0xdc>)
 800870e:	2201      	movs	r2, #1
 8008710:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008712:	f004 fd25 	bl	800d160 <Calculate_LED_ON>
 8008716:	0003      	movs	r3, r0
 8008718:	0019      	movs	r1, r3
 800871a:	23fa      	movs	r3, #250	@ 0xfa
 800871c:	011a      	lsls	r2, r3, #4
 800871e:	23fa      	movs	r3, #250	@ 0xfa
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	0018      	movs	r0, r3
 8008724:	f004 fd64 	bl	800d1f0 <SetStatusLED>
 8008728:	e011      	b.n	800874e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800872a:	f003 fe6f 	bl	800c40c <micSettlingComplete>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d00d      	beq.n	800874e <Device_Test+0x62>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 8008732:	4b25      	ldr	r3, [pc, #148]	@ (80087c8 <Device_Test+0xdc>)
 8008734:	2201      	movs	r2, #1
 8008736:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008738:	f004 fd12 	bl	800d160 <Calculate_LED_ON>
 800873c:	0003      	movs	r3, r0
 800873e:	0018      	movs	r0, r3
 8008740:	23fa      	movs	r3, #250	@ 0xfa
 8008742:	011a      	lsls	r2, r3, #4
 8008744:	23fa      	movs	r3, #250	@ 0xfa
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	0019      	movs	r1, r3
 800874a:	f004 fd51 	bl	800d1f0 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800874e:	4b1d      	ldr	r3, [pc, #116]	@ (80087c4 <Device_Test+0xd8>)
 8008750:	791b      	ldrb	r3, [r3, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	4053      	eors	r3, r2
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800875c:	f7fc fdb0 	bl	80052c0 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008760:	4b18      	ldr	r3, [pc, #96]	@ (80087c4 <Device_Test+0xd8>)
 8008762:	791b      	ldrb	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <Device_Test+0x84>
 8008768:	4b16      	ldr	r3, [pc, #88]	@ (80087c4 <Device_Test+0xd8>)
 800876a:	78db      	ldrb	r3, [r3, #3]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <Device_Test+0x92>
 8008770:	4b16      	ldr	r3, [pc, #88]	@ (80087cc <Device_Test+0xe0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	0018      	movs	r0, r3
 8008776:	f005 fe17 	bl	800e3a8 <TimestampIsReached>
 800877a:	1e03      	subs	r3, r0, #0
 800877c:	d01f      	beq.n	80087be <Device_Test+0xd2>
    Info("Test completed");
 800877e:	4a14      	ldr	r2, [pc, #80]	@ (80087d0 <Device_Test+0xe4>)
 8008780:	4b14      	ldr	r3, [pc, #80]	@ (80087d4 <Device_Test+0xe8>)
 8008782:	0019      	movs	r1, r3
 8008784:	2002      	movs	r0, #2
 8008786:	f005 fe65 	bl	800e454 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800878a:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <Device_Test+0xd8>)
 800878c:	791b      	ldrb	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <Device_Test+0xaa>
 8008792:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <Device_Test+0xec>)
 8008794:	e000      	b.n	8008798 <Device_Test+0xac>
 8008796:	4b11      	ldr	r3, [pc, #68]	@ (80087dc <Device_Test+0xf0>)
 8008798:	4a11      	ldr	r2, [pc, #68]	@ (80087e0 <Device_Test+0xf4>)
 800879a:	490e      	ldr	r1, [pc, #56]	@ (80087d4 <Device_Test+0xe8>)
 800879c:	2002      	movs	r0, #2
 800879e:	f005 fe59 	bl	800e454 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80087a2:	4b08      	ldr	r3, [pc, #32]	@ (80087c4 <Device_Test+0xd8>)
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <Device_Test+0xc2>
 80087aa:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <Device_Test+0xec>)
 80087ac:	e000      	b.n	80087b0 <Device_Test+0xc4>
 80087ae:	4b0b      	ldr	r3, [pc, #44]	@ (80087dc <Device_Test+0xf0>)
 80087b0:	4a0c      	ldr	r2, [pc, #48]	@ (80087e4 <Device_Test+0xf8>)
 80087b2:	4908      	ldr	r1, [pc, #32]	@ (80087d4 <Device_Test+0xe8>)
 80087b4:	2002      	movs	r0, #2
 80087b6:	f005 fe4d 	bl	800e454 <CreateLine>
    SetTestDone();
 80087ba:	f7ff f9ef 	bl	8007b9c <SetTestDone>
  }
}
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000fc8 	.word	0x20000fc8
 80087c8:	20000fc4 	.word	0x20000fc4
 80087cc:	20000fb8 	.word	0x20000fb8
 80087d0:	0802437c 	.word	0x0802437c
 80087d4:	080241f8 	.word	0x080241f8
 80087d8:	0802438c 	.word	0x0802438c
 80087dc:	08024394 	.word	0x08024394
 80087e0:	0802439c 	.word	0x0802439c
 80087e4:	080243b0 	.word	0x080243b0

080087e8 <AllDevicesReady>:

bool AllDevicesReady() {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 80087ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008898 <AllDevicesReady+0xb0>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	0018      	movs	r0, r3
 80087f2:	f005 fdd9 	bl	800e3a8 <TimestampIsReached>
 80087f6:	1e03      	subs	r3, r0, #0
 80087f8:	d04a      	beq.n	8008890 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 80087fa:	4b28      	ldr	r3, [pc, #160]	@ (800889c <AllDevicesReady+0xb4>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b06      	cmp	r3, #6
 8008800:	d102      	bne.n	8008808 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008802:	4b27      	ldr	r3, [pc, #156]	@ (80088a0 <AllDevicesReady+0xb8>)
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008808:	4b26      	ldr	r3, [pc, #152]	@ (80088a4 <AllDevicesReady+0xbc>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b07      	cmp	r3, #7
 800880e:	d006      	beq.n	800881e <AllDevicesReady+0x36>
 8008810:	4b25      	ldr	r3, [pc, #148]	@ (80088a8 <AllDevicesReady+0xc0>)
 8008812:	795b      	ldrb	r3, [r3, #5]
 8008814:	2201      	movs	r2, #1
 8008816:	4053      	eors	r3, r2
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 800881e:	4b20      	ldr	r3, [pc, #128]	@ (80088a0 <AllDevicesReady+0xb8>)
 8008820:	2200      	movs	r2, #0
 8008822:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008824:	4b21      	ldr	r3, [pc, #132]	@ (80088ac <AllDevicesReady+0xc4>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d102      	bne.n	8008832 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 800882c:	4b1c      	ldr	r3, [pc, #112]	@ (80088a0 <AllDevicesReady+0xb8>)
 800882e:	2200      	movs	r2, #0
 8008830:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008832:	4b1f      	ldr	r3, [pc, #124]	@ (80088b0 <AllDevicesReady+0xc8>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b03      	cmp	r3, #3
 8008838:	d102      	bne.n	8008840 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 800883a:	4b19      	ldr	r3, [pc, #100]	@ (80088a0 <AllDevicesReady+0xb8>)
 800883c:	2200      	movs	r2, #0
 800883e:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008840:	4b1c      	ldr	r3, [pc, #112]	@ (80088b4 <AllDevicesReady+0xcc>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b09      	cmp	r3, #9
 8008846:	d123      	bne.n	8008890 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008848:	4b15      	ldr	r3, [pc, #84]	@ (80088a0 <AllDevicesReady+0xb8>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2201      	movs	r2, #1
 800884e:	4053      	eors	r3, r2
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d016      	beq.n	8008884 <AllDevicesReady+0x9c>
 8008856:	4b12      	ldr	r3, [pc, #72]	@ (80088a0 <AllDevicesReady+0xb8>)
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2201      	movs	r2, #1
 800885c:	4053      	eors	r3, r2
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00f      	beq.n	8008884 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008864:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <AllDevicesReady+0xb8>)
 8008866:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008868:	2201      	movs	r2, #1
 800886a:	4053      	eors	r3, r2
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d008      	beq.n	8008884 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008872:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <AllDevicesReady+0xb8>)
 8008874:	78db      	ldrb	r3, [r3, #3]
 8008876:	2201      	movs	r2, #1
 8008878:	4053      	eors	r3, r2
 800887a:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <AllDevicesReady+0x9c>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <AllDevicesReady+0x9e>
 8008884:	2300      	movs	r3, #0
 8008886:	1c1a      	adds	r2, r3, #0
 8008888:	2301      	movs	r3, #1
 800888a:	4013      	ands	r3, r2
 800888c:	b2db      	uxtb	r3, r3
 800888e:	e000      	b.n	8008892 <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008890:	2300      	movs	r3, #0
}
 8008892:	0018      	movs	r0, r3
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000fb8 	.word	0x20000fb8
 800889c:	20000fa5 	.word	0x20000fa5
 80088a0:	20000fc4 	.word	0x20000fc4
 80088a4:	20000fa4 	.word	0x20000fa4
 80088a8:	20000fc8 	.word	0x20000fc8
 80088ac:	20000086 	.word	0x20000086
 80088b0:	20000fa6 	.word	0x20000fa6
 80088b4:	20000fa7 	.word	0x20000fa7

080088b8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 80088bc:	4b11      	ldr	r3, [pc, #68]	@ (8008904 <EnabledConnectedDevices+0x4c>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 80088c4:	4b10      	ldr	r3, [pc, #64]	@ (8008908 <EnabledConnectedDevices+0x50>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 80088ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008904 <EnabledConnectedDevices+0x4c>)
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d006      	beq.n	80088e0 <EnabledConnectedDevices+0x28>
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <EnabledConnectedDevices+0x4c>)
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <EnabledConnectedDevices+0x50>)
 80088dc:	2201      	movs	r2, #1
 80088de:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 80088e0:	4b08      	ldr	r3, [pc, #32]	@ (8008904 <EnabledConnectedDevices+0x4c>)
 80088e2:	789b      	ldrb	r3, [r3, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 80088e8:	4b07      	ldr	r3, [pc, #28]	@ (8008908 <EnabledConnectedDevices+0x50>)
 80088ea:	2201      	movs	r2, #1
 80088ec:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 80088ee:	4b05      	ldr	r3, [pc, #20]	@ (8008904 <EnabledConnectedDevices+0x4c>)
 80088f0:	78db      	ldrb	r3, [r3, #3]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 80088f6:	4b04      	ldr	r3, [pc, #16]	@ (8008908 <EnabledConnectedDevices+0x50>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	70da      	strb	r2, [r3, #3]
  }
}
 80088fc:	46c0      	nop			@ (mov r8, r8)
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	46c0      	nop			@ (mov r8, r8)
 8008904:	20000fc8 	.word	0x20000fc8
 8008908:	20000fc4 	.word	0x20000fc4

0800890c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008910:	4a0a      	ldr	r2, [pc, #40]	@ (800893c <DisableConnectedDevices+0x30>)
 8008912:	4b0b      	ldr	r3, [pc, #44]	@ (8008940 <DisableConnectedDevices+0x34>)
 8008914:	0019      	movs	r1, r3
 8008916:	2003      	movs	r0, #3
 8008918:	f005 fd9c 	bl	800e454 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800891c:	4b09      	ldr	r3, [pc, #36]	@ (8008944 <DisableConnectedDevices+0x38>)
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008922:	4b08      	ldr	r3, [pc, #32]	@ (8008944 <DisableConnectedDevices+0x38>)
 8008924:	2200      	movs	r2, #0
 8008926:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008928:	4b06      	ldr	r3, [pc, #24]	@ (8008944 <DisableConnectedDevices+0x38>)
 800892a:	2200      	movs	r2, #0
 800892c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800892e:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <DisableConnectedDevices+0x38>)
 8008930:	2200      	movs	r2, #0
 8008932:	70da      	strb	r2, [r3, #3]
}
 8008934:	46c0      	nop			@ (mov r8, r8)
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	080243c4 	.word	0x080243c4
 8008940:	0802413c 	.word	0x0802413c
 8008944:	20000fc4 	.word	0x20000fc4

08008948 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800894c:	4b02      	ldr	r3, [pc, #8]	@ (8008958 <ResetdBAmax+0x10>)
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
}
 8008952:	46c0      	nop			@ (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20001014 	.word	0x20001014

0800895c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008964:	f006 f9bc 	bl	800ece0 <HAL_GetTick>
 8008968:	0002      	movs	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	18d2      	adds	r2, r2, r3
 800896e:	4b03      	ldr	r3, [pc, #12]	@ (800897c <setMICTimeStamp+0x20>)
 8008970:	601a      	str	r2, [r3, #0]
}
 8008972:	46c0      	nop			@ (mov r8, r8)
 8008974:	46bd      	mov	sp, r7
 8008976:	b002      	add	sp, #8
 8008978:	bd80      	pop	{r7, pc}
 800897a:	46c0      	nop			@ (mov r8, r8)
 800897c:	2000101c 	.word	0x2000101c

08008980 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  counter = 0;
 8008984:	4b05      	ldr	r3, [pc, #20]	@ (800899c <ResetDBACalculator+0x1c>)
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800898a:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <ResetDBACalculator+0x20>)
 800898c:	2201      	movs	r2, #1
 800898e:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008990:	4b04      	ldr	r3, [pc, #16]	@ (80089a4 <ResetDBACalculator+0x24>)
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
}
 8008996:	46c0      	nop			@ (mov r8, r8)
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20001018 	.word	0x20001018
 80089a0:	20000085 	.word	0x20000085
 80089a4:	20001019 	.word	0x20001019

080089a8 <MIC_Print>:

void MIC_Print(void) {
 80089a8:	b5b0      	push	{r4, r5, r7, lr}
 80089aa:	b08a      	sub	sp, #40	@ 0x28
 80089ac:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 80089ae:	4b9d      	ldr	r3, [pc, #628]	@ (8008c24 <MIC_Print+0x27c>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b9d      	ldr	r3, [pc, #628]	@ (8008c28 <MIC_Print+0x280>)
 80089b4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 80089b6:	4b9d      	ldr	r3, [pc, #628]	@ (8008c2c <MIC_Print+0x284>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	001a      	movs	r2, r3
 80089bc:	4b9a      	ldr	r3, [pc, #616]	@ (8008c28 <MIC_Print+0x280>)
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	4b9b      	ldr	r3, [pc, #620]	@ (8008c30 <MIC_Print+0x288>)
 80089c2:	0092      	lsls	r2, r2, #2
 80089c4:	50d1      	str	r1, [r2, r3]
  counter++;
 80089c6:	4b99      	ldr	r3, [pc, #612]	@ (8008c2c <MIC_Print+0x284>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	4b97      	ldr	r3, [pc, #604]	@ (8008c2c <MIC_Print+0x284>)
 80089d0:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 80089d2:	4b96      	ldr	r3, [pc, #600]	@ (8008c2c <MIC_Print+0x284>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d80b      	bhi.n	80089f2 <MIC_Print+0x4a>
 80089da:	4b96      	ldr	r3, [pc, #600]	@ (8008c34 <MIC_Print+0x28c>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2201      	movs	r2, #1
 80089e0:	4053      	eors	r3, r2
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <MIC_Print+0x4a>
    denominator = counter;
 80089e8:	4b90      	ldr	r3, [pc, #576]	@ (8008c2c <MIC_Print+0x284>)
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	4b92      	ldr	r3, [pc, #584]	@ (8008c38 <MIC_Print+0x290>)
 80089ee:	701a      	strb	r2, [r3, #0]
 80089f0:	e005      	b.n	80089fe <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 80089f2:	4b91      	ldr	r3, [pc, #580]	@ (8008c38 <MIC_Print+0x290>)
 80089f4:	220a      	movs	r2, #10
 80089f6:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 80089f8:	4b8e      	ldr	r3, [pc, #568]	@ (8008c34 <MIC_Print+0x28c>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 80089fe:	4b8f      	ldr	r3, [pc, #572]	@ (8008c3c <MIC_Print+0x294>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008a04:	230f      	movs	r3, #15
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e03e      	b.n	8008a8c <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 8008a0e:	240f      	movs	r4, #15
 8008a10:	193b      	adds	r3, r7, r4
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	4b86      	ldr	r3, [pc, #536]	@ (8008c30 <MIC_Print+0x288>)
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	58d2      	ldr	r2, [r2, r3]
 8008a1a:	4b88      	ldr	r3, [pc, #544]	@ (8008c3c <MIC_Print+0x294>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	1c19      	adds	r1, r3, #0
 8008a20:	1c10      	adds	r0, r2, #0
 8008a22:	f7f7 ff4d 	bl	80008c0 <__aeabi_fadd>
 8008a26:	1c03      	adds	r3, r0, #0
 8008a28:	1c1a      	adds	r2, r3, #0
 8008a2a:	4b84      	ldr	r3, [pc, #528]	@ (8008c3c <MIC_Print+0x294>)
 8008a2c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008a2e:	193b      	adds	r3, r7, r4
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	4b7f      	ldr	r3, [pc, #508]	@ (8008c30 <MIC_Print+0x288>)
 8008a34:	0092      	lsls	r2, r2, #2
 8008a36:	58d2      	ldr	r2, [r2, r3]
 8008a38:	4b81      	ldr	r3, [pc, #516]	@ (8008c40 <MIC_Print+0x298>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	1c19      	adds	r1, r3, #0
 8008a3e:	1c10      	adds	r0, r2, #0
 8008a40:	f7f7 fd8a 	bl	8000558 <__aeabi_fcmpgt>
 8008a44:	1e03      	subs	r3, r0, #0
 8008a46:	d006      	beq.n	8008a56 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008a48:	193b      	adds	r3, r7, r4
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	4b78      	ldr	r3, [pc, #480]	@ (8008c30 <MIC_Print+0x288>)
 8008a4e:	0092      	lsls	r2, r2, #2
 8008a50:	58d2      	ldr	r2, [r2, r3]
 8008a52:	4b7b      	ldr	r3, [pc, #492]	@ (8008c40 <MIC_Print+0x298>)
 8008a54:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008a56:	4b79      	ldr	r3, [pc, #484]	@ (8008c3c <MIC_Print+0x294>)
 8008a58:	681c      	ldr	r4, [r3, #0]
 8008a5a:	4b77      	ldr	r3, [pc, #476]	@ (8008c38 <MIC_Print+0x290>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f7f8 fe02 	bl	8001668 <__aeabi_ui2f>
 8008a64:	1c03      	adds	r3, r0, #0
 8008a66:	1c19      	adds	r1, r3, #0
 8008a68:	1c20      	adds	r0, r4, #0
 8008a6a:	f7f8 f8b3 	bl	8000bd4 <__aeabi_fdiv>
 8008a6e:	1c03      	adds	r3, r0, #0
 8008a70:	1c1a      	adds	r2, r3, #0
 8008a72:	4b74      	ldr	r3, [pc, #464]	@ (8008c44 <MIC_Print+0x29c>)
 8008a74:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 8008a76:	4b72      	ldr	r3, [pc, #456]	@ (8008c40 <MIC_Print+0x298>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	1c18      	adds	r0, r3, #0
 8008a7c:	f7fa ff72 	bl	8003964 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008a80:	210f      	movs	r1, #15
 8008a82:	187b      	adds	r3, r7, r1
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	187b      	adds	r3, r7, r1
 8008a88:	3201      	adds	r2, #1
 8008a8a:	701a      	strb	r2, [r3, #0]
 8008a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8008c38 <MIC_Print+0x290>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	220f      	movs	r2, #15
 8008a92:	18ba      	adds	r2, r7, r2
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d3b9      	bcc.n	8008a0e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008a9a:	4b63      	ldr	r3, [pc, #396]	@ (8008c28 <MIC_Print+0x280>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	1c18      	adds	r0, r3, #0
 8008aa0:	f7fa fce0 	bl	8003464 <__aeabi_f2d>
 8008aa4:	6038      	str	r0, [r7, #0]
 8008aa6:	6079      	str	r1, [r7, #4]
 8008aa8:	4b65      	ldr	r3, [pc, #404]	@ (8008c40 <MIC_Print+0x298>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	1c18      	adds	r0, r3, #0
 8008aae:	f7fa fcd9 	bl	8003464 <__aeabi_f2d>
 8008ab2:	0004      	movs	r4, r0
 8008ab4:	000d      	movs	r5, r1
 8008ab6:	4b63      	ldr	r3, [pc, #396]	@ (8008c44 <MIC_Print+0x29c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	1c18      	adds	r0, r3, #0
 8008abc:	f7fa fcd2 	bl	8003464 <__aeabi_f2d>
 8008ac0:	0002      	movs	r2, r0
 8008ac2:	000b      	movs	r3, r1
 8008ac4:	4960      	ldr	r1, [pc, #384]	@ (8008c48 <MIC_Print+0x2a0>)
 8008ac6:	9204      	str	r2, [sp, #16]
 8008ac8:	9305      	str	r3, [sp, #20]
 8008aca:	9402      	str	r4, [sp, #8]
 8008acc:	9503      	str	r5, [sp, #12]
 8008ace:	4b5f      	ldr	r3, [pc, #380]	@ (8008c4c <MIC_Print+0x2a4>)
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	0008      	movs	r0, r1
 8008ad8:	f017 f9a6 	bl	801fe28 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008adc:	4b53      	ldr	r3, [pc, #332]	@ (8008c2c <MIC_Print+0x284>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b0a      	cmp	r3, #10
 8008ae2:	d902      	bls.n	8008aea <MIC_Print+0x142>
    counter = 0;
 8008ae4:	4b51      	ldr	r3, [pc, #324]	@ (8008c2c <MIC_Print+0x284>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008aea:	4b4f      	ldr	r3, [pc, #316]	@ (8008c28 <MIC_Print+0x280>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4958      	ldr	r1, [pc, #352]	@ (8008c50 <MIC_Print+0x2a8>)
 8008af0:	1c18      	adds	r0, r3, #0
 8008af2:	f7f7 fd3b 	bl	800056c <__aeabi_fcmpge>
 8008af6:	1e03      	subs	r3, r0, #0
 8008af8:	d004      	beq.n	8008b04 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008afa:	2201      	movs	r2, #1
 8008afc:	2101      	movs	r1, #1
 8008afe:	2001      	movs	r0, #1
 8008b00:	f004 fbaa 	bl	800d258 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008b04:	4b48      	ldr	r3, [pc, #288]	@ (8008c28 <MIC_Print+0x280>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4952      	ldr	r1, [pc, #328]	@ (8008c54 <MIC_Print+0x2ac>)
 8008b0a:	1c18      	adds	r0, r3, #0
 8008b0c:	f7f7 fd2e 	bl	800056c <__aeabi_fcmpge>
 8008b10:	1e03      	subs	r3, r0, #0
 8008b12:	d00c      	beq.n	8008b2e <MIC_Print+0x186>
 8008b14:	4b44      	ldr	r3, [pc, #272]	@ (8008c28 <MIC_Print+0x280>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	494d      	ldr	r1, [pc, #308]	@ (8008c50 <MIC_Print+0x2a8>)
 8008b1a:	1c18      	adds	r0, r3, #0
 8008b1c:	f7f7 fd08 	bl	8000530 <__aeabi_fcmplt>
 8008b20:	1e03      	subs	r3, r0, #0
 8008b22:	d004      	beq.n	8008b2e <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008b24:	2200      	movs	r2, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	2001      	movs	r0, #1
 8008b2a:	f004 fb95 	bl	800d258 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c28 <MIC_Print+0x280>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4949      	ldr	r1, [pc, #292]	@ (8008c58 <MIC_Print+0x2b0>)
 8008b34:	1c18      	adds	r0, r3, #0
 8008b36:	f7f7 fd19 	bl	800056c <__aeabi_fcmpge>
 8008b3a:	1e03      	subs	r3, r0, #0
 8008b3c:	d00c      	beq.n	8008b58 <MIC_Print+0x1b0>
 8008b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c28 <MIC_Print+0x280>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4944      	ldr	r1, [pc, #272]	@ (8008c54 <MIC_Print+0x2ac>)
 8008b44:	1c18      	adds	r0, r3, #0
 8008b46:	f7f7 fcf3 	bl	8000530 <__aeabi_fcmplt>
 8008b4a:	1e03      	subs	r3, r0, #0
 8008b4c:	d004      	beq.n	8008b58 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2101      	movs	r1, #1
 8008b52:	2001      	movs	r0, #1
 8008b54:	f004 fb80 	bl	800d258 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008b58:	4b33      	ldr	r3, [pc, #204]	@ (8008c28 <MIC_Print+0x280>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	493f      	ldr	r1, [pc, #252]	@ (8008c5c <MIC_Print+0x2b4>)
 8008b5e:	1c18      	adds	r0, r3, #0
 8008b60:	f7f7 fd04 	bl	800056c <__aeabi_fcmpge>
 8008b64:	1e03      	subs	r3, r0, #0
 8008b66:	d00c      	beq.n	8008b82 <MIC_Print+0x1da>
 8008b68:	4b2f      	ldr	r3, [pc, #188]	@ (8008c28 <MIC_Print+0x280>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	493a      	ldr	r1, [pc, #232]	@ (8008c58 <MIC_Print+0x2b0>)
 8008b6e:	1c18      	adds	r0, r3, #0
 8008b70:	f7f7 fcde 	bl	8000530 <__aeabi_fcmplt>
 8008b74:	1e03      	subs	r3, r0, #0
 8008b76:	d004      	beq.n	8008b82 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	f004 fb6b 	bl	800d258 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008b82:	4b29      	ldr	r3, [pc, #164]	@ (8008c28 <MIC_Print+0x280>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4936      	ldr	r1, [pc, #216]	@ (8008c60 <MIC_Print+0x2b8>)
 8008b88:	1c18      	adds	r0, r3, #0
 8008b8a:	f7f7 fcef 	bl	800056c <__aeabi_fcmpge>
 8008b8e:	1e03      	subs	r3, r0, #0
 8008b90:	d00c      	beq.n	8008bac <MIC_Print+0x204>
 8008b92:	4b25      	ldr	r3, [pc, #148]	@ (8008c28 <MIC_Print+0x280>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4931      	ldr	r1, [pc, #196]	@ (8008c5c <MIC_Print+0x2b4>)
 8008b98:	1c18      	adds	r0, r3, #0
 8008b9a:	f7f7 fcc9 	bl	8000530 <__aeabi_fcmplt>
 8008b9e:	1e03      	subs	r3, r0, #0
 8008ba0:	d004      	beq.n	8008bac <MIC_Print+0x204>
    SetDBLED(false, true, true);
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	f004 fb56 	bl	800d258 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008bac:	4b1e      	ldr	r3, [pc, #120]	@ (8008c28 <MIC_Print+0x280>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	492c      	ldr	r1, [pc, #176]	@ (8008c64 <MIC_Print+0x2bc>)
 8008bb2:	1c18      	adds	r0, r3, #0
 8008bb4:	f7f7 fcda 	bl	800056c <__aeabi_fcmpge>
 8008bb8:	1e03      	subs	r3, r0, #0
 8008bba:	d00c      	beq.n	8008bd6 <MIC_Print+0x22e>
 8008bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c28 <MIC_Print+0x280>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4927      	ldr	r1, [pc, #156]	@ (8008c60 <MIC_Print+0x2b8>)
 8008bc2:	1c18      	adds	r0, r3, #0
 8008bc4:	f7f7 fcb4 	bl	8000530 <__aeabi_fcmplt>
 8008bc8:	1e03      	subs	r3, r0, #0
 8008bca:	d004      	beq.n	8008bd6 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008bcc:	2201      	movs	r2, #1
 8008bce:	2100      	movs	r1, #0
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f004 fb41 	bl	800d258 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008bd6:	4b14      	ldr	r3, [pc, #80]	@ (8008c28 <MIC_Print+0x280>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4923      	ldr	r1, [pc, #140]	@ (8008c68 <MIC_Print+0x2c0>)
 8008bdc:	1c18      	adds	r0, r3, #0
 8008bde:	f7f7 fcc5 	bl	800056c <__aeabi_fcmpge>
 8008be2:	1e03      	subs	r3, r0, #0
 8008be4:	d00c      	beq.n	8008c00 <MIC_Print+0x258>
 8008be6:	4b10      	ldr	r3, [pc, #64]	@ (8008c28 <MIC_Print+0x280>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	491e      	ldr	r1, [pc, #120]	@ (8008c64 <MIC_Print+0x2bc>)
 8008bec:	1c18      	adds	r0, r3, #0
 8008bee:	f7f7 fc9f 	bl	8000530 <__aeabi_fcmplt>
 8008bf2:	1e03      	subs	r3, r0, #0
 8008bf4:	d004      	beq.n	8008c00 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	f004 fb2c 	bl	800d258 <SetDBLED>
  }
  if(dBA < 35){//off
 8008c00:	4b09      	ldr	r3, [pc, #36]	@ (8008c28 <MIC_Print+0x280>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4918      	ldr	r1, [pc, #96]	@ (8008c68 <MIC_Print+0x2c0>)
 8008c06:	1c18      	adds	r0, r3, #0
 8008c08:	f7f7 fc92 	bl	8000530 <__aeabi_fcmplt>
 8008c0c:	1e03      	subs	r3, r0, #0
 8008c0e:	d100      	bne.n	8008c12 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008c10:	e004      	b.n	8008c1c <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008c12:	2200      	movs	r2, #0
 8008c14:	2100      	movs	r1, #0
 8008c16:	2000      	movs	r0, #0
 8008c18:	f004 fb1e 	bl	800d258 <SetDBLED>
}
 8008c1c:	46c0      	nop			@ (mov r8, r8)
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b004      	add	sp, #16
 8008c22:	bdb0      	pop	{r4, r5, r7, pc}
 8008c24:	20001010 	.word	0x20001010
 8008c28:	20000fdc 	.word	0x20000fdc
 8008c2c:	20001018 	.word	0x20001018
 8008c30:	20000fe0 	.word	0x20000fe0
 8008c34:	20001019 	.word	0x20001019
 8008c38:	20000085 	.word	0x20000085
 8008c3c:	2000100c 	.word	0x2000100c
 8008c40:	20001014 	.word	0x20001014
 8008c44:	20001008 	.word	0x20001008
 8008c48:	080243d8 	.word	0x080243d8
 8008c4c:	20000fd0 	.word	0x20000fd0
 8008c50:	42b40000 	.word	0x42b40000
 8008c54:	42a00000 	.word	0x42a00000
 8008c58:	428c0000 	.word	0x428c0000
 8008c5c:	42700000 	.word	0x42700000
 8008c60:	42480000 	.word	0x42480000
 8008c64:	42200000 	.word	0x42200000
 8008c68:	420c0000 	.word	0x420c0000

08008c6c <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008c72:	4b11      	ldr	r3, [pc, #68]	@ (8008cb8 <MIC_TestMeasurementDone+0x4c>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4a10      	ldr	r2, [pc, #64]	@ (8008cbc <MIC_TestMeasurementDone+0x50>)
 8008c7a:	4911      	ldr	r1, [pc, #68]	@ (8008cc0 <MIC_TestMeasurementDone+0x54>)
 8008c7c:	2002      	movs	r0, #2
 8008c7e:	f005 fbe9 	bl	800e454 <CreateLine>
  if(DataReady) {
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <MIC_TestMeasurementDone+0x4c>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008c8c:	1dfb      	adds	r3, r7, #7
 8008c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc4 <MIC_TestMeasurementDone+0x58>)
 8008c90:	7812      	ldrb	r2, [r2, #0]
 8008c92:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008c94:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc4 <MIC_TestMeasurementDone+0x58>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8008cc8 <MIC_TestMeasurementDone+0x5c>)
 8008c9c:	4908      	ldr	r1, [pc, #32]	@ (8008cc0 <MIC_TestMeasurementDone+0x54>)
 8008c9e:	2002      	movs	r0, #2
 8008ca0:	f005 fbd8 	bl	800e454 <CreateLine>
    ResetMICIndicator();
 8008ca4:	f004 fbbe 	bl	800d424 <ResetMICIndicator>
    return Check;
 8008ca8:	1dfb      	adds	r3, r7, #7
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	e000      	b.n	8008cb0 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	2000115b 	.word	0x2000115b
 8008cbc:	08024420 	.word	0x08024420
 8008cc0:	0802444c 	.word	0x0802444c
 8008cc4:	2000115c 	.word	0x2000115c
 8008cc8:	08024450 	.word	0x08024450

08008ccc <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008cd2:	4b78      	ldr	r3, [pc, #480]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d100      	bne.n	8008cdc <Mic_Upkeep+0x10>
 8008cda:	e0b8      	b.n	8008e4e <Mic_Upkeep+0x182>
 8008cdc:	dd00      	ble.n	8008ce0 <Mic_Upkeep+0x14>
 8008cde:	e0d3      	b.n	8008e88 <Mic_Upkeep+0x1bc>
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d037      	beq.n	8008d54 <Mic_Upkeep+0x88>
 8008ce4:	dd00      	ble.n	8008ce8 <Mic_Upkeep+0x1c>
 8008ce6:	e0cf      	b.n	8008e88 <Mic_Upkeep+0x1bc>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <Mic_Upkeep+0x26>
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d014      	beq.n	8008d1a <Mic_Upkeep+0x4e>
 8008cf0:	e0ca      	b.n	8008e88 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	f003 fbae 	bl	800c454 <enableMicrophone>
 8008cf8:	0003      	movs	r3, r0
 8008cfa:	001a      	movs	r2, r3
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4053      	eors	r3, r2
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008d06:	4a6c      	ldr	r2, [pc, #432]	@ (8008eb8 <Mic_Upkeep+0x1ec>)
 8008d08:	4b6c      	ldr	r3, [pc, #432]	@ (8008ebc <Mic_Upkeep+0x1f0>)
 8008d0a:	217f      	movs	r1, #127	@ 0x7f
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f005 fc59 	bl	800e5c4 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008d12:	4b68      	ldr	r3, [pc, #416]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008d14:	2201      	movs	r2, #1
 8008d16:	701a      	strb	r2, [r3, #0]
    break;
 8008d18:	e0c5      	b.n	8008ea6 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008d1a:	f003 fb77 	bl	800c40c <micSettlingComplete>
 8008d1e:	1e03      	subs	r3, r0, #0
 8008d20:	d105      	bne.n	8008d2e <Mic_Upkeep+0x62>
 8008d22:	4b67      	ldr	r3, [pc, #412]	@ (8008ec0 <Mic_Upkeep+0x1f4>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d100      	bne.n	8008d2e <Mic_Upkeep+0x62>
 8008d2c:	e0b6      	b.n	8008e9c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008d2e:	f003 fbfb 	bl	800c528 <startSPLcalculation>
 8008d32:	0003      	movs	r3, r0
 8008d34:	001a      	movs	r2, r3
 8008d36:	2301      	movs	r3, #1
 8008d38:	4053      	eors	r3, r2
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008d40:	4a5d      	ldr	r2, [pc, #372]	@ (8008eb8 <Mic_Upkeep+0x1ec>)
 8008d42:	4b5e      	ldr	r3, [pc, #376]	@ (8008ebc <Mic_Upkeep+0x1f0>)
 8008d44:	2188      	movs	r1, #136	@ 0x88
 8008d46:	0018      	movs	r0, r3
 8008d48:	f005 fc3c 	bl	800e5c4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008d4c:	4b59      	ldr	r3, [pc, #356]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008d4e:	2202      	movs	r2, #2
 8008d50:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008d52:	e0a3      	b.n	8008e9c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008d54:	4b5b      	ldr	r3, [pc, #364]	@ (8008ec4 <Mic_Upkeep+0x1f8>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	2101      	movs	r1, #1
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f003 fa38 	bl	800c1d0 <getSoundData>
 8008d60:	1e03      	subs	r3, r0, #0
 8008d62:	d100      	bne.n	8008d66 <Mic_Upkeep+0x9a>
 8008d64:	e09c      	b.n	8008ea0 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008d66:	f003 fb31 	bl	800c3cc <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008d6a:	4b56      	ldr	r3, [pc, #344]	@ (8008ec4 <Mic_Upkeep+0x1f8>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	001a      	movs	r2, r3
 8008d70:	4b54      	ldr	r3, [pc, #336]	@ (8008ec4 <Mic_Upkeep+0x1f8>)
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	4954      	ldr	r1, [pc, #336]	@ (8008ec8 <Mic_Upkeep+0x1fc>)
 8008d76:	0038      	movs	r0, r7
 8008d78:	f017 f8c6 	bl	801ff08 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008d7c:	4b51      	ldr	r3, [pc, #324]	@ (8008ec4 <Mic_Upkeep+0x1f8>)
 8008d7e:	89db      	ldrh	r3, [r3, #14]
 8008d80:	001a      	movs	r2, r3
 8008d82:	4b50      	ldr	r3, [pc, #320]	@ (8008ec4 <Mic_Upkeep+0x1f8>)
 8008d84:	7c1b      	ldrb	r3, [r3, #16]
 8008d86:	4951      	ldr	r1, [pc, #324]	@ (8008ecc <Mic_Upkeep+0x200>)
 8008d88:	4851      	ldr	r0, [pc, #324]	@ (8008ed0 <Mic_Upkeep+0x204>)
 8008d8a:	f017 f8bd 	bl	801ff08 <siprintf>
      dBValue = atof(dBbuffer);
 8008d8e:	003b      	movs	r3, r7
 8008d90:	0018      	movs	r0, r3
 8008d92:	f015 fc69 	bl	801e668 <atof>
 8008d96:	0002      	movs	r2, r0
 8008d98:	000b      	movs	r3, r1
 8008d9a:	0010      	movs	r0, r2
 8008d9c:	0019      	movs	r1, r3
 8008d9e:	f7fa fba9 	bl	80034f4 <__aeabi_d2f>
 8008da2:	1c02      	adds	r2, r0, #0
 8008da4:	4b4b      	ldr	r3, [pc, #300]	@ (8008ed4 <Mic_Upkeep+0x208>)
 8008da6:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008da8:	4b4a      	ldr	r3, [pc, #296]	@ (8008ed4 <Mic_Upkeep+0x208>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	494a      	ldr	r1, [pc, #296]	@ (8008ed8 <Mic_Upkeep+0x20c>)
 8008dae:	1c18      	adds	r0, r3, #0
 8008db0:	f7f8 f8f6 	bl	8000fa0 <__aeabi_fmul>
 8008db4:	1c03      	adds	r3, r0, #0
 8008db6:	1c18      	adds	r0, r3, #0
 8008db8:	f7fa fb54 	bl	8003464 <__aeabi_f2d>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4b47      	ldr	r3, [pc, #284]	@ (8008edc <Mic_Upkeep+0x210>)
 8008dc0:	f7f8 fc94 	bl	80016ec <__aeabi_dadd>
 8008dc4:	0002      	movs	r2, r0
 8008dc6:	000b      	movs	r3, r1
 8008dc8:	0010      	movs	r0, r2
 8008dca:	0019      	movs	r1, r3
 8008dcc:	f7fa fabc 	bl	8003348 <__aeabi_d2iz>
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7fa faf4 	bl	80033c0 <__aeabi_i2d>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4b41      	ldr	r3, [pc, #260]	@ (8008ee0 <Mic_Upkeep+0x214>)
 8008ddc:	f7f8 ffea 	bl	8001db4 <__aeabi_ddiv>
 8008de0:	0002      	movs	r2, r0
 8008de2:	000b      	movs	r3, r1
 8008de4:	0010      	movs	r0, r2
 8008de6:	0019      	movs	r1, r3
 8008de8:	f7fa fb84 	bl	80034f4 <__aeabi_d2f>
 8008dec:	1c02      	adds	r2, r0, #0
 8008dee:	4b39      	ldr	r3, [pc, #228]	@ (8008ed4 <Mic_Upkeep+0x208>)
 8008df0:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008df2:	f7ff fdd9 	bl	80089a8 <MIC_Print>
      if (!startSPLcalculation()) {
 8008df6:	f003 fb97 	bl	800c528 <startSPLcalculation>
 8008dfa:	0003      	movs	r3, r0
 8008dfc:	001a      	movs	r2, r3
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4053      	eors	r3, r2
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e08:	4a2b      	ldr	r2, [pc, #172]	@ (8008eb8 <Mic_Upkeep+0x1ec>)
 8008e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8008ebc <Mic_Upkeep+0x1f0>)
 8008e0c:	2198      	movs	r1, #152	@ 0x98
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f005 fbd8 	bl	800e5c4 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008e14:	2000      	movs	r0, #0
 8008e16:	f003 fb1d 	bl	800c454 <enableMicrophone>
 8008e1a:	0003      	movs	r3, r0
 8008e1c:	001a      	movs	r2, r3
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4053      	eors	r3, r2
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e28:	4a23      	ldr	r2, [pc, #140]	@ (8008eb8 <Mic_Upkeep+0x1ec>)
 8008e2a:	4b24      	ldr	r3, [pc, #144]	@ (8008ebc <Mic_Upkeep+0x1f0>)
 8008e2c:	219b      	movs	r1, #155	@ 0x9b
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f005 fbc8 	bl	800e5c4 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008e34:	f005 ff54 	bl	800ece0 <HAL_GetTick>
 8008e38:	0003      	movs	r3, r0
 8008e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee4 <Mic_Upkeep+0x218>)
 8008e3c:	189a      	adds	r2, r3, r2
 8008e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ee8 <Mic_Upkeep+0x21c>)
 8008e40:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008e42:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008e44:	2203      	movs	r2, #3
 8008e46:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008e48:	f004 faec 	bl	800d424 <ResetMICIndicator>
    }
    break;
 8008e4c:	e028      	b.n	8008ea0 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008e4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ee8 <Mic_Upkeep+0x21c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	0018      	movs	r0, r3
 8008e54:	f005 faa8 	bl	800e3a8 <TimestampIsReached>
 8008e58:	1e03      	subs	r3, r0, #0
 8008e5a:	d023      	beq.n	8008ea4 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	f003 faf9 	bl	800c454 <enableMicrophone>
 8008e62:	0003      	movs	r3, r0
 8008e64:	001a      	movs	r2, r3
 8008e66:	2301      	movs	r3, #1
 8008e68:	4053      	eors	r3, r2
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e70:	4a11      	ldr	r2, [pc, #68]	@ (8008eb8 <Mic_Upkeep+0x1ec>)
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <Mic_Upkeep+0x1f0>)
 8008e74:	21a6      	movs	r1, #166	@ 0xa6
 8008e76:	0018      	movs	r0, r3
 8008e78:	f005 fba4 	bl	800e5c4 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008e82:	f004 fa95 	bl	800d3b0 <SetMICIndicator>
    }
    break;
 8008e86:	e00d      	b.n	8008ea4 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008e88:	4a18      	ldr	r2, [pc, #96]	@ (8008eec <Mic_Upkeep+0x220>)
 8008e8a:	4b19      	ldr	r3, [pc, #100]	@ (8008ef0 <Mic_Upkeep+0x224>)
 8008e8c:	0019      	movs	r1, r3
 8008e8e:	2003      	movs	r0, #3
 8008e90:	f005 fae0 	bl	800e454 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008e94:	4b07      	ldr	r3, [pc, #28]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
    break;
 8008e9a:	e004      	b.n	8008ea6 <Mic_Upkeep+0x1da>
    break;
 8008e9c:	46c0      	nop			@ (mov r8, r8)
 8008e9e:	e002      	b.n	8008ea6 <Mic_Upkeep+0x1da>
    break;
 8008ea0:	46c0      	nop			@ (mov r8, r8)
 8008ea2:	e000      	b.n	8008ea6 <Mic_Upkeep+0x1da>
    break;
 8008ea4:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	@ (8008eb4 <Mic_Upkeep+0x1e8>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
}
 8008eaa:	0018      	movs	r0, r3
 8008eac:	46bd      	mov	sp, r7
 8008eae:	b002      	add	sp, #8
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	46c0      	nop			@ (mov r8, r8)
 8008eb4:	20001032 	.word	0x20001032
 8008eb8:	08024468 	.word	0x08024468
 8008ebc:	080254d8 	.word	0x080254d8
 8008ec0:	2000115b 	.word	0x2000115b
 8008ec4:	20001020 	.word	0x20001020
 8008ec8:	08024484 	.word	0x08024484
 8008ecc:	0802448c 	.word	0x0802448c
 8008ed0:	20000fd0 	.word	0x20000fd0
 8008ed4:	20001010 	.word	0x20001010
 8008ed8:	42c80000 	.word	0x42c80000
 8008edc:	3fe00000 	.word	0x3fe00000
 8008ee0:	40590000 	.word	0x40590000
 8008ee4:	000002f3 	.word	0x000002f3
 8008ee8:	2000101c 	.word	0x2000101c
 8008eec:	08024494 	.word	0x08024494
 8008ef0:	080244b4 	.word	0x080244b4

08008ef4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	0018      	movs	r0, r3
 8008efe:	2314      	movs	r3, #20
 8008f00:	001a      	movs	r2, r3
 8008f02:	2100      	movs	r1, #0
 8008f04:	f017 f944 	bl	8020190 <memset>
  RTC_DateTypeDef sDate = {0};
 8008f08:	003b      	movs	r3, r7
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f10:	4a2e      	ldr	r2, [pc, #184]	@ (8008fcc <MX_RTC_Init+0xd8>)
 8008f12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008f14:	4b2c      	ldr	r3, [pc, #176]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f1c:	227f      	movs	r2, #127	@ 0x7f
 8008f1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008f20:	4b29      	ldr	r3, [pc, #164]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f22:	22ff      	movs	r2, #255	@ 0xff
 8008f24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f26:	4b28      	ldr	r3, [pc, #160]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008f2c:	4b26      	ldr	r3, [pc, #152]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f32:	4b25      	ldr	r3, [pc, #148]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f38:	4b23      	ldr	r3, [pc, #140]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f3e:	4b22      	ldr	r3, [pc, #136]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f40:	0018      	movs	r0, r3
 8008f42:	f00c ff51 	bl	8015de8 <HAL_RTC_Init>
 8008f46:	1e03      	subs	r3, r0, #0
 8008f48:	d001      	beq.n	8008f4e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008f4a:	f7ff f9d9 	bl	8008300 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008f4e:	1d3b      	adds	r3, r7, #4
 8008f50:	220d      	movs	r2, #13
 8008f52:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008f54:	1d3b      	adds	r3, r7, #4
 8008f56:	2200      	movs	r2, #0
 8008f58:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008f5a:	1d3b      	adds	r3, r7, #4
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008f60:	1d3b      	adds	r3, r7, #4
 8008f62:	2200      	movs	r2, #0
 8008f64:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008f66:	1d3b      	adds	r3, r7, #4
 8008f68:	2200      	movs	r2, #0
 8008f6a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008f6c:	1d39      	adds	r1, r7, #4
 8008f6e:	4b16      	ldr	r3, [pc, #88]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	0018      	movs	r0, r3
 8008f74:	f00c ffd4 	bl	8015f20 <HAL_RTC_SetTime>
 8008f78:	1e03      	subs	r3, r0, #0
 8008f7a:	d001      	beq.n	8008f80 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008f7c:	f7ff f9c0 	bl	8008300 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008f80:	003b      	movs	r3, r7
 8008f82:	2206      	movs	r2, #6
 8008f84:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008f86:	003b      	movs	r3, r7
 8008f88:	2211      	movs	r2, #17
 8008f8a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008f8c:	003b      	movs	r3, r7
 8008f8e:	2217      	movs	r2, #23
 8008f90:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008f92:	003b      	movs	r3, r7
 8008f94:	2218      	movs	r2, #24
 8008f96:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008f98:	0039      	movs	r1, r7
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f00d f8c6 	bl	8016130 <HAL_RTC_SetDate>
 8008fa4:	1e03      	subs	r3, r0, #0
 8008fa6:	d001      	beq.n	8008fac <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008fa8:	f7ff f9aa 	bl	8008300 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008fac:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <MX_RTC_Init+0xd4>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f00d fa76 	bl	80164a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008fb8:	1e03      	subs	r3, r0, #0
 8008fba:	d001      	beq.n	8008fc0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008fbc:	f7ff f9a0 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008fc0:	46c0      	nop			@ (mov r8, r8)
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	b006      	add	sp, #24
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20001034 	.word	0x20001034
 8008fcc:	40002800 	.word	0x40002800

08008fd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8009008 <HAL_RTC_MspInit+0x38>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d10e      	bne.n	8009000 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800900c <HAL_RTC_MspInit+0x3c>)
 8008fe4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008fe6:	4b09      	ldr	r3, [pc, #36]	@ (800900c <HAL_RTC_MspInit+0x3c>)
 8008fe8:	2180      	movs	r1, #128	@ 0x80
 8008fea:	02c9      	lsls	r1, r1, #11
 8008fec:	430a      	orrs	r2, r1
 8008fee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	2002      	movs	r0, #2
 8008ff6:	f006 fb17 	bl	800f628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008ffa:	2002      	movs	r0, #2
 8008ffc:	f006 fb29 	bl	800f652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009000:	46c0      	nop			@ (mov r8, r8)
 8009002:	46bd      	mov	sp, r7
 8009004:	b002      	add	sp, #8
 8009006:	bd80      	pop	{r7, pc}
 8009008:	40002800 	.word	0x40002800
 800900c:	40021000 	.word	0x40021000

08009010 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoximax;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009014:	4b02      	ldr	r3, [pc, #8]	@ (8009020 <sen5x_Get_sen5x_enable_state+0x10>)
 8009016:	781b      	ldrb	r3, [r3, #0]
}
 8009018:	0018      	movs	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	46c0      	nop			@ (mov r8, r8)
 8009020:	2000105b 	.word	0x2000105b

08009024 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800902c:	f005 fe58 	bl	800ece0 <HAL_GetTick>
 8009030:	0002      	movs	r2, r0
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	18d2      	adds	r2, r2, r3
 8009036:	4b03      	ldr	r3, [pc, #12]	@ (8009044 <setsen5xReadTimer+0x20>)
 8009038:	601a      	str	r2, [r3, #0]
}
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	46bd      	mov	sp, r7
 800903e:	b002      	add	sp, #8
 8009040:	bd80      	pop	{r7, pc}
 8009042:	46c0      	nop			@ (mov r8, r8)
 8009044:	20001070 	.word	0x20001070

08009048 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	0002      	movs	r2, r0
 8009050:	1dfb      	adds	r3, r7, #7
 8009052:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009054:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <setsen5xSamplecounter+0x1c>)
 8009056:	2200      	movs	r2, #0
 8009058:	701a      	strb	r2, [r3, #0]
}
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	46bd      	mov	sp, r7
 800905e:	b002      	add	sp, #8
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			@ (mov r8, r8)
 8009064:	20001064 	.word	0x20001064

08009068 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009070:	f7ff f9c2 	bl	80083f8 <IsPMSensorEnabled>
 8009074:	1e03      	subs	r3, r0, #0
 8009076:	d02c      	beq.n	80090d2 <sen5x_enable+0x6a>
    Debug("sen5x measurement is enabled");
 8009078:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <sen5x_enable+0x88>)
 800907a:	4b1e      	ldr	r3, [pc, #120]	@ (80090f4 <sen5x_enable+0x8c>)
 800907c:	0019      	movs	r1, r3
 800907e:	2003      	movs	r0, #3
 8009080:	f005 f9e8 	bl	800e454 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8009084:	4b1c      	ldr	r3, [pc, #112]	@ (80090f8 <sen5x_enable+0x90>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	1e5a      	subs	r2, r3, #1
 800908a:	4193      	sbcs	r3, r2
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2201      	movs	r2, #1
 8009090:	4053      	eors	r3, r2
 8009092:	b2db      	uxtb	r3, r3
 8009094:	1c1a      	adds	r2, r3, #0
 8009096:	2301      	movs	r3, #1
 8009098:	4013      	ands	r3, r2
 800909a:	b2da      	uxtb	r2, r3
 800909c:	4b16      	ldr	r3, [pc, #88]	@ (80090f8 <sen5x_enable+0x90>)
 800909e:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 80090a0:	4b15      	ldr	r3, [pc, #84]	@ (80090f8 <sen5x_enable+0x90>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <sen5x_enable+0x48>
      setsen5xReadTimer(0);
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7ff ffbb 	bl	8009024 <setsen5xReadTimer>
 80090ae:	e016      	b.n	80090de <sen5x_enable+0x76>
    }
    else {
      Info("This cycle the sen5x is disabled");
 80090b0:	4a12      	ldr	r2, [pc, #72]	@ (80090fc <sen5x_enable+0x94>)
 80090b2:	4b13      	ldr	r3, [pc, #76]	@ (8009100 <sen5x_enable+0x98>)
 80090b4:	0019      	movs	r1, r3
 80090b6:	2002      	movs	r0, #2
 80090b8:	f005 f9cc 	bl	800e454 <CreateLine>
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 80090bc:	f005 fe10 	bl	800ece0 <HAL_GetTick>
 80090c0:	0002      	movs	r2, r0
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2164      	movs	r1, #100	@ 0x64
 80090c6:	434b      	muls	r3, r1
 80090c8:	18d3      	adds	r3, r2, r3
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7ff ffaa 	bl	8009024 <setsen5xReadTimer>
 80090d0:	e005      	b.n	80090de <sen5x_enable+0x76>
    }
  }
  else {
    Info("sen5x measurement is disabled");
 80090d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009104 <sen5x_enable+0x9c>)
 80090d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <sen5x_enable+0x98>)
 80090d6:	0019      	movs	r1, r3
 80090d8:	2002      	movs	r0, #2
 80090da:	f005 f9bb 	bl	800e454 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 80090de:	4b0a      	ldr	r3, [pc, #40]	@ (8009108 <sen5x_enable+0xa0>)
 80090e0:	2201      	movs	r2, #1
 80090e2:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 80090e4:	4b04      	ldr	r3, [pc, #16]	@ (80090f8 <sen5x_enable+0x90>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
}
 80090e8:	0018      	movs	r0, r3
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	080244b8 	.word	0x080244b8
 80090f4:	080244d8 	.word	0x080244d8
 80090f8:	2000105b 	.word	0x2000105b
 80090fc:	080244dc 	.word	0x080244dc
 8009100:	08024500 	.word	0x08024500
 8009104:	08024504 	.word	0x08024504
 8009108:	20000086 	.word	0x20000086

0800910c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8009110:	4a0a      	ldr	r2, [pc, #40]	@ (800913c <sen5x_Power_On+0x30>)
 8009112:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <sen5x_Power_On+0x34>)
 8009114:	0019      	movs	r1, r3
 8009116:	2003      	movs	r0, #3
 8009118:	f005 f99c 	bl	800e454 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800911c:	2380      	movs	r3, #128	@ 0x80
 800911e:	015b      	lsls	r3, r3, #5
 8009120:	4808      	ldr	r0, [pc, #32]	@ (8009144 <sen5x_Power_On+0x38>)
 8009122:	2201      	movs	r2, #1
 8009124:	0019      	movs	r1, r3
 8009126:	f007 f86c 	bl	8010202 <HAL_GPIO_WritePin>
  sen5x_On = true;
 800912a:	4b07      	ldr	r3, [pc, #28]	@ (8009148 <sen5x_Power_On+0x3c>)
 800912c:	2201      	movs	r2, #1
 800912e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8009130:	2037      	movs	r0, #55	@ 0x37
 8009132:	f005 fddf 	bl	800ecf4 <HAL_Delay>
}
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	08024524 	.word	0x08024524
 8009140:	080244d8 	.word	0x080244d8
 8009144:	50000800 	.word	0x50000800
 8009148:	20001059 	.word	0x20001059

0800914c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009150:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <sen5x_Power_Off+0x40>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d006      	beq.n	8009166 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009158:	4a0d      	ldr	r2, [pc, #52]	@ (8009190 <sen5x_Power_Off+0x44>)
 800915a:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <sen5x_Power_Off+0x48>)
 800915c:	0019      	movs	r1, r3
 800915e:	2003      	movs	r0, #3
 8009160:	f005 f978 	bl	800e454 <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 8009164:	e00f      	b.n	8009186 <sen5x_Power_Off+0x3a>
    Debug("executing sen5x_Power_Off");
 8009166:	4a0c      	ldr	r2, [pc, #48]	@ (8009198 <sen5x_Power_Off+0x4c>)
 8009168:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <sen5x_Power_Off+0x48>)
 800916a:	0019      	movs	r1, r3
 800916c:	2003      	movs	r0, #3
 800916e:	f005 f971 	bl	800e454 <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009172:	2380      	movs	r3, #128	@ 0x80
 8009174:	015b      	lsls	r3, r3, #5
 8009176:	4809      	ldr	r0, [pc, #36]	@ (800919c <sen5x_Power_Off+0x50>)
 8009178:	2200      	movs	r2, #0
 800917a:	0019      	movs	r1, r3
 800917c:	f007 f841 	bl	8010202 <HAL_GPIO_WritePin>
    sen5x_On = false;
 8009180:	4b07      	ldr	r3, [pc, #28]	@ (80091a0 <sen5x_Power_Off+0x54>)
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	2000105a 	.word	0x2000105a
 8009190:	08024540 	.word	0x08024540
 8009194:	080244d8 	.word	0x080244d8
 8009198:	08024570 	.word	0x08024570
 800919c:	50000800 	.word	0x50000800
 80091a0:	20001059 	.word	0x20001059

080091a4 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 80091a8:	4b02      	ldr	r3, [pc, #8]	@ (80091b4 <reset_fanCleaningDone+0x10>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
}
 80091ae:	46c0      	nop			@ (mov r8, r8)
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20001058 	.word	0x20001058

080091b8 <probe_sen5x>:

int16_t probe_sen5x(void) {
 80091b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ba:	b093      	sub	sp, #76	@ 0x4c
 80091bc:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 80091be:	2436      	movs	r4, #54	@ 0x36
 80091c0:	193b      	adds	r3, r7, r4
 80091c2:	2200      	movs	r2, #0
 80091c4:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 80091c6:	2335      	movs	r3, #53	@ 0x35
 80091c8:	18fb      	adds	r3, r7, r3
 80091ca:	2220      	movs	r2, #32
 80091cc:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 80091ce:	2334      	movs	r3, #52	@ 0x34
 80091d0:	18fb      	adds	r3, r7, r3
 80091d2:	2220      	movs	r2, #32
 80091d4:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 80091d6:	f7ff ff99 	bl	800910c <sen5x_Power_On>
  error = sen5x_device_reset();
 80091da:	0025      	movs	r5, r4
 80091dc:	193c      	adds	r4, r7, r4
 80091de:	f001 f903 	bl	800a3e8 <sen5x_device_reset>
 80091e2:	0003      	movs	r3, r0
 80091e4:	8023      	strh	r3, [r4, #0]
  if (error) {
 80091e6:	002c      	movs	r4, r5
 80091e8:	193b      	adds	r3, r7, r4
 80091ea:	2200      	movs	r2, #0
 80091ec:	5e9b      	ldrsh	r3, [r3, r2]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80091f2:	193b      	adds	r3, r7, r4
 80091f4:	2200      	movs	r2, #0
 80091f6:	5e9b      	ldrsh	r3, [r3, r2]
 80091f8:	4a6c      	ldr	r2, [pc, #432]	@ (80093ac <probe_sen5x+0x1f4>)
 80091fa:	496d      	ldr	r1, [pc, #436]	@ (80093b0 <probe_sen5x+0x1f8>)
 80091fc:	2001      	movs	r0, #1
 80091fe:	f005 f929 	bl	800e454 <CreateLine>
      return error;
 8009202:	193b      	adds	r3, r7, r4
 8009204:	2200      	movs	r2, #0
 8009206:	5e9b      	ldrsh	r3, [r3, r2]
 8009208:	e0cc      	b.n	80093a4 <probe_sen5x+0x1ec>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800920a:	2536      	movs	r5, #54	@ 0x36
 800920c:	197c      	adds	r4, r7, r5
 800920e:	2335      	movs	r3, #53	@ 0x35
 8009210:	18fb      	adds	r3, r7, r3
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	230c      	movs	r3, #12
 8009216:	18fb      	adds	r3, r7, r3
 8009218:	0011      	movs	r1, r2
 800921a:	0018      	movs	r0, r3
 800921c:	f000 ffd0 	bl	800a1c0 <sen5x_get_serial_number>
 8009220:	0003      	movs	r3, r0
 8009222:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009224:	197b      	adds	r3, r7, r5
 8009226:	2200      	movs	r2, #0
 8009228:	5e9b      	ldrsh	r3, [r3, r2]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800922e:	197b      	adds	r3, r7, r5
 8009230:	2200      	movs	r2, #0
 8009232:	5e9a      	ldrsh	r2, [r3, r2]
 8009234:	4b5f      	ldr	r3, [pc, #380]	@ (80093b4 <probe_sen5x+0x1fc>)
 8009236:	0011      	movs	r1, r2
 8009238:	0018      	movs	r0, r3
 800923a:	f016 fdf5 	bl	801fe28 <iprintf>
      return error;
 800923e:	197b      	adds	r3, r7, r5
 8009240:	2200      	movs	r2, #0
 8009242:	5e9b      	ldrsh	r3, [r3, r2]
 8009244:	e0ae      	b.n	80093a4 <probe_sen5x+0x1ec>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8009246:	230c      	movs	r3, #12
 8009248:	18fa      	adds	r2, r7, r3
 800924a:	4b5b      	ldr	r3, [pc, #364]	@ (80093b8 <probe_sen5x+0x200>)
 800924c:	0011      	movs	r1, r2
 800924e:	0018      	movs	r0, r3
 8009250:	f016 fdea 	bl	801fe28 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009254:	2536      	movs	r5, #54	@ 0x36
 8009256:	197c      	adds	r4, r7, r5
 8009258:	2334      	movs	r3, #52	@ 0x34
 800925a:	18fb      	adds	r3, r7, r3
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	4b57      	ldr	r3, [pc, #348]	@ (80093bc <probe_sen5x+0x204>)
 8009260:	0011      	movs	r1, r2
 8009262:	0018      	movs	r0, r3
 8009264:	f000 ff56 	bl	800a114 <sen5x_get_product_name>
 8009268:	0003      	movs	r3, r0
 800926a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800926c:	197b      	adds	r3, r7, r5
 800926e:	2200      	movs	r2, #0
 8009270:	5e9b      	ldrsh	r3, [r3, r2]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00b      	beq.n	800928e <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8009276:	197b      	adds	r3, r7, r5
 8009278:	2200      	movs	r2, #0
 800927a:	5e9a      	ldrsh	r2, [r3, r2]
 800927c:	4b50      	ldr	r3, [pc, #320]	@ (80093c0 <probe_sen5x+0x208>)
 800927e:	0011      	movs	r1, r2
 8009280:	0018      	movs	r0, r3
 8009282:	f016 fdd1 	bl	801fe28 <iprintf>
      return error;
 8009286:	197b      	adds	r3, r7, r5
 8009288:	2200      	movs	r2, #0
 800928a:	5e9b      	ldrsh	r3, [r3, r2]
 800928c:	e08a      	b.n	80093a4 <probe_sen5x+0x1ec>
  } else {
      printf("Product name: %s\r\n", product_name);
 800928e:	4a4b      	ldr	r2, [pc, #300]	@ (80093bc <probe_sen5x+0x204>)
 8009290:	4b4c      	ldr	r3, [pc, #304]	@ (80093c4 <probe_sen5x+0x20c>)
 8009292:	0011      	movs	r1, r2
 8009294:	0018      	movs	r0, r3
 8009296:	f016 fdc7 	bl	801fe28 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800929a:	2636      	movs	r6, #54	@ 0x36
 800929c:	19bc      	adds	r4, r7, r6
 800929e:	2308      	movs	r3, #8
 80092a0:	18fd      	adds	r5, r7, r3
 80092a2:	2309      	movs	r3, #9
 80092a4:	18fa      	adds	r2, r7, r3
 80092a6:	230a      	movs	r3, #10
 80092a8:	18f9      	adds	r1, r7, r3
 80092aa:	230b      	movs	r3, #11
 80092ac:	18f8      	adds	r0, r7, r3
 80092ae:	1d7b      	adds	r3, r7, #5
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	1dbb      	adds	r3, r7, #6
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	1dfb      	adds	r3, r7, #7
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	002b      	movs	r3, r5
 80092bc:	f000 ffd6 	bl	800a26c <sen5x_get_version>
 80092c0:	0003      	movs	r3, r0
 80092c2:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 80092c4:	19bb      	adds	r3, r7, r6
 80092c6:	2200      	movs	r2, #0
 80092c8:	5e9b      	ldrsh	r3, [r3, r2]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 80092ce:	19bb      	adds	r3, r7, r6
 80092d0:	2200      	movs	r2, #0
 80092d2:	5e9a      	ldrsh	r2, [r3, r2]
 80092d4:	4b3c      	ldr	r3, [pc, #240]	@ (80093c8 <probe_sen5x+0x210>)
 80092d6:	0011      	movs	r1, r2
 80092d8:	0018      	movs	r0, r3
 80092da:	f016 fda5 	bl	801fe28 <iprintf>
      return error;
 80092de:	19bb      	adds	r3, r7, r6
 80092e0:	2200      	movs	r2, #0
 80092e2:	5e9b      	ldrsh	r3, [r3, r2]
 80092e4:	e05e      	b.n	80093a4 <probe_sen5x+0x1ec>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 80092e6:	230b      	movs	r3, #11
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	0019      	movs	r1, r3
 80092ee:	230a      	movs	r3, #10
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	001a      	movs	r2, r3
 80092f6:	2308      	movs	r3, #8
 80092f8:	18fb      	adds	r3, r7, r3
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	001c      	movs	r4, r3
 80092fe:	1dfb      	adds	r3, r7, #7
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	4832      	ldr	r0, [pc, #200]	@ (80093cc <probe_sen5x+0x214>)
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	0023      	movs	r3, r4
 8009308:	f016 fd8e 	bl	801fe28 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800930c:	2300      	movs	r3, #0
 800930e:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 8009310:	262e      	movs	r6, #46	@ 0x2e
 8009312:	19bb      	adds	r3, r7, r6
 8009314:	2200      	movs	r2, #0
 8009316:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009318:	232c      	movs	r3, #44	@ 0x2c
 800931a:	18fb      	adds	r3, r7, r3
 800931c:	2200      	movs	r2, #0
 800931e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8009320:	492b      	ldr	r1, [pc, #172]	@ (80093d0 <probe_sen5x+0x218>)
 8009322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009324:	f7f7 fe3c 	bl	8000fa0 <__aeabi_fmul>
 8009328:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800932a:	1c18      	adds	r0, r3, #0
 800932c:	f7f8 f930 	bl	8001590 <__aeabi_f2iz>
 8009330:	0003      	movs	r3, r0
 8009332:	b218      	sxth	r0, r3
 8009334:	2536      	movs	r5, #54	@ 0x36
 8009336:	197c      	adds	r4, r7, r5
 8009338:	232c      	movs	r3, #44	@ 0x2c
 800933a:	18fb      	adds	r3, r7, r3
 800933c:	881a      	ldrh	r2, [r3, #0]
 800933e:	19bb      	adds	r3, r7, r6
 8009340:	2100      	movs	r1, #0
 8009342:	5e5b      	ldrsh	r3, [r3, r1]
 8009344:	0019      	movs	r1, r3
 8009346:	f000 fe81 	bl	800a04c <sen5x_set_temperature_offset_parameters>
 800934a:	0003      	movs	r3, r0
 800934c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800934e:	197b      	adds	r3, r7, r5
 8009350:	2200      	movs	r2, #0
 8009352:	5e9b      	ldrsh	r3, [r3, r2]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009358:	197b      	adds	r3, r7, r5
 800935a:	2200      	movs	r2, #0
 800935c:	5e9b      	ldrsh	r3, [r3, r2]
 800935e:	4a1d      	ldr	r2, [pc, #116]	@ (80093d4 <probe_sen5x+0x21c>)
 8009360:	4913      	ldr	r1, [pc, #76]	@ (80093b0 <probe_sen5x+0x1f8>)
 8009362:	2001      	movs	r0, #1
 8009364:	f005 f876 	bl	800e454 <CreateLine>
      return error;
 8009368:	197b      	adds	r3, r7, r5
 800936a:	2200      	movs	r2, #0
 800936c:	5e9b      	ldrsh	r3, [r3, r2]
 800936e:	e019      	b.n	80093a4 <probe_sen5x+0x1ec>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009372:	f7fa f877 	bl	8003464 <__aeabi_f2d>
 8009376:	0002      	movs	r2, r0
 8009378:	000b      	movs	r3, r1
 800937a:	4817      	ldr	r0, [pc, #92]	@ (80093d8 <probe_sen5x+0x220>)
 800937c:	4917      	ldr	r1, [pc, #92]	@ (80093dc <probe_sen5x+0x224>)
 800937e:	9200      	str	r2, [sp, #0]
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	0002      	movs	r2, r0
 8009384:	2002      	movs	r0, #2
 8009386:	f005 f865 	bl	800e454 <CreateLine>
  }
  sen5x_Power_Off();
 800938a:	f7ff fedf 	bl	800914c <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 800938e:	f005 fca7 	bl	800ece0 <HAL_GetTick>
 8009392:	0003      	movs	r3, r0
 8009394:	4a12      	ldr	r2, [pc, #72]	@ (80093e0 <probe_sen5x+0x228>)
 8009396:	189a      	adds	r2, r3, r2
 8009398:	4b12      	ldr	r3, [pc, #72]	@ (80093e4 <probe_sen5x+0x22c>)
 800939a:	601a      	str	r2, [r3, #0]
  return error;
 800939c:	2336      	movs	r3, #54	@ 0x36
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	2200      	movs	r2, #0
 80093a2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80093a4:	0018      	movs	r0, r3
 80093a6:	46bd      	mov	sp, r7
 80093a8:	b00f      	add	sp, #60	@ 0x3c
 80093aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ac:	0802458c 	.word	0x0802458c
 80093b0:	080245b8 	.word	0x080245b8
 80093b4:	080245bc 	.word	0x080245bc
 80093b8:	080245ec 	.word	0x080245ec
 80093bc:	2000105c 	.word	0x2000105c
 80093c0:	08024600 	.word	0x08024600
 80093c4:	08024630 	.word	0x08024630
 80093c8:	08024644 	.word	0x08024644
 80093cc:	08024670 	.word	0x08024670
 80093d0:	43480000 	.word	0x43480000
 80093d4:	08024694 	.word	0x08024694
 80093d8:	080246d4 	.word	0x080246d4
 80093dc:	08024500 	.word	0x08024500
 80093e0:	000061a8 	.word	0x000061a8
 80093e4:	20001070 	.word	0x20001070

080093e8 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80093ee:	1dbb      	adds	r3, r7, #6
 80093f0:	2200      	movs	r2, #0
 80093f2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80093f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009464 <sen5x_lightup_measurement+0x7c>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80093fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009468 <sen5x_lightup_measurement+0x80>)
 80093fe:	4b1b      	ldr	r3, [pc, #108]	@ (800946c <sen5x_lightup_measurement+0x84>)
 8009400:	0019      	movs	r1, r3
 8009402:	2002      	movs	r0, #2
 8009404:	f005 f826 	bl	800e454 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009408:	1dbc      	adds	r4, r7, #6
 800940a:	f000 fcab 	bl	8009d64 <sen5x_start_measurement_without_pm>
 800940e:	0003      	movs	r3, r0
 8009410:	8023      	strh	r3, [r4, #0]
 8009412:	e00a      	b.n	800942a <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 8009414:	4a16      	ldr	r2, [pc, #88]	@ (8009470 <sen5x_lightup_measurement+0x88>)
 8009416:	4b15      	ldr	r3, [pc, #84]	@ (800946c <sen5x_lightup_measurement+0x84>)
 8009418:	0019      	movs	r1, r3
 800941a:	2002      	movs	r0, #2
 800941c:	f005 f81a 	bl	800e454 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 8009420:	1dbc      	adds	r4, r7, #6
 8009422:	f000 fc71 	bl	8009d08 <sen5x_start_measurement>
 8009426:	0003      	movs	r3, r0
 8009428:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800942a:	1dbb      	adds	r3, r7, #6
 800942c:	2200      	movs	r2, #0
 800942e:	5e9b      	ldrsh	r3, [r3, r2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d008      	beq.n	8009446 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009434:	1dbb      	adds	r3, r7, #6
 8009436:	2200      	movs	r2, #0
 8009438:	5e9b      	ldrsh	r3, [r3, r2]
 800943a:	4a0e      	ldr	r2, [pc, #56]	@ (8009474 <sen5x_lightup_measurement+0x8c>)
 800943c:	490e      	ldr	r1, [pc, #56]	@ (8009478 <sen5x_lightup_measurement+0x90>)
 800943e:	2001      	movs	r0, #1
 8009440:	f005 f808 	bl	800e454 <CreateLine>
 8009444:	e007      	b.n	8009456 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009446:	f7fd f865 	bl	8006514 <showTime>
    Info("sen5x_start_measurement executed");
 800944a:	4a0c      	ldr	r2, [pc, #48]	@ (800947c <sen5x_lightup_measurement+0x94>)
 800944c:	4b07      	ldr	r3, [pc, #28]	@ (800946c <sen5x_lightup_measurement+0x84>)
 800944e:	0019      	movs	r1, r3
 8009450:	2002      	movs	r0, #2
 8009452:	f004 ffff 	bl	800e454 <CreateLine>
  }
  return error;
 8009456:	1dbb      	adds	r3, r7, #6
 8009458:	2200      	movs	r2, #0
 800945a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800945c:	0018      	movs	r0, r3
 800945e:	46bd      	mov	sp, r7
 8009460:	b003      	add	sp, #12
 8009462:	bd90      	pop	{r4, r7, pc}
 8009464:	2000105a 	.word	0x2000105a
 8009468:	0802470c 	.word	0x0802470c
 800946c:	08024500 	.word	0x08024500
 8009470:	08024738 	.word	0x08024738
 8009474:	08024758 	.word	0x08024758
 8009478:	080245b8 	.word	0x080245b8
 800947c:	08024788 	.word	0x08024788

08009480 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8009486:	1dbb      	adds	r3, r7, #6
 8009488:	2200      	movs	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800948c:	4b21      	ldr	r3, [pc, #132]	@ (8009514 <sen5x_extinguish_measurement+0x94>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01e      	beq.n	80094d2 <sen5x_extinguish_measurement+0x52>
    Info("Continious VOC & NOx is active, sensor not powered off");
 8009494:	4a20      	ldr	r2, [pc, #128]	@ (8009518 <sen5x_extinguish_measurement+0x98>)
 8009496:	4b21      	ldr	r3, [pc, #132]	@ (800951c <sen5x_extinguish_measurement+0x9c>)
 8009498:	0019      	movs	r1, r3
 800949a:	2002      	movs	r0, #2
 800949c:	f004 ffda 	bl	800e454 <CreateLine>
    Info("PM measurement is disabled");
 80094a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009520 <sen5x_extinguish_measurement+0xa0>)
 80094a2:	4b1e      	ldr	r3, [pc, #120]	@ (800951c <sen5x_extinguish_measurement+0x9c>)
 80094a4:	0019      	movs	r1, r3
 80094a6:	2002      	movs	r0, #2
 80094a8:	f004 ffd4 	bl	800e454 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80094ac:	1dbc      	adds	r4, r7, #6
 80094ae:	f000 fc59 	bl	8009d64 <sen5x_start_measurement_without_pm>
 80094b2:	0003      	movs	r3, r0
 80094b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80094b6:	1dbb      	adds	r3, r7, #6
 80094b8:	2200      	movs	r2, #0
 80094ba:	5e9b      	ldrsh	r3, [r3, r2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d022      	beq.n	8009506 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 80094c0:	1dbb      	adds	r3, r7, #6
 80094c2:	2200      	movs	r2, #0
 80094c4:	5e9b      	ldrsh	r3, [r3, r2]
 80094c6:	4a17      	ldr	r2, [pc, #92]	@ (8009524 <sen5x_extinguish_measurement+0xa4>)
 80094c8:	4917      	ldr	r1, [pc, #92]	@ (8009528 <sen5x_extinguish_measurement+0xa8>)
 80094ca:	2001      	movs	r0, #1
 80094cc:	f004 ffc2 	bl	800e454 <CreateLine>
 80094d0:	e019      	b.n	8009506 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 80094d2:	1dbc      	adds	r4, r7, #6
 80094d4:	f000 fc74 	bl	8009dc0 <sen5x_stop_measurement>
 80094d8:	0003      	movs	r3, r0
 80094da:	8023      	strh	r3, [r4, #0]
    showTime();
 80094dc:	f7fd f81a 	bl	8006514 <showTime>
    Info("sen5x_stop_measurement executed");
 80094e0:	4a12      	ldr	r2, [pc, #72]	@ (800952c <sen5x_extinguish_measurement+0xac>)
 80094e2:	4b0e      	ldr	r3, [pc, #56]	@ (800951c <sen5x_extinguish_measurement+0x9c>)
 80094e4:	0019      	movs	r1, r3
 80094e6:	2002      	movs	r0, #2
 80094e8:	f004 ffb4 	bl	800e454 <CreateLine>
    if (error) {
 80094ec:	1dbb      	adds	r3, r7, #6
 80094ee:	2200      	movs	r2, #0
 80094f0:	5e9b      	ldrsh	r3, [r3, r2]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80094f6:	1dbb      	adds	r3, r7, #6
 80094f8:	2200      	movs	r2, #0
 80094fa:	5e9b      	ldrsh	r3, [r3, r2]
 80094fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009530 <sen5x_extinguish_measurement+0xb0>)
 80094fe:	490a      	ldr	r1, [pc, #40]	@ (8009528 <sen5x_extinguish_measurement+0xa8>)
 8009500:	2001      	movs	r0, #1
 8009502:	f004 ffa7 	bl	800e454 <CreateLine>
    }
  }
  return error;
 8009506:	1dbb      	adds	r3, r7, #6
 8009508:	2200      	movs	r2, #0
 800950a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800950c:	0018      	movs	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	b003      	add	sp, #12
 8009512:	bd90      	pop	{r4, r7, pc}
 8009514:	2000105a 	.word	0x2000105a
 8009518:	080247ac 	.word	0x080247ac
 800951c:	08024500 	.word	0x08024500
 8009520:	080247e4 	.word	0x080247e4
 8009524:	08024800 	.word	0x08024800
 8009528:	080245b8 	.word	0x080245b8
 800952c:	08024840 	.word	0x08024840
 8009530:	08024860 	.word	0x08024860

08009534 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009536:	b08d      	sub	sp, #52	@ 0x34
 8009538:	af04      	add	r7, sp, #16
 800953a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800953c:	261e      	movs	r6, #30
 800953e:	19bb      	adds	r3, r7, r6
 8009540:	2200      	movs	r2, #0
 8009542:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009544:	19bc      	adds	r4, r7, r6
 8009546:	2316      	movs	r3, #22
 8009548:	18fd      	adds	r5, r7, r3
 800954a:	2318      	movs	r3, #24
 800954c:	18fa      	adds	r2, r7, r3
 800954e:	231a      	movs	r3, #26
 8009550:	18f9      	adds	r1, r7, r3
 8009552:	231c      	movs	r3, #28
 8009554:	18f8      	adds	r0, r7, r3
 8009556:	230e      	movs	r3, #14
 8009558:	18fb      	adds	r3, r7, r3
 800955a:	9303      	str	r3, [sp, #12]
 800955c:	2310      	movs	r3, #16
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	2312      	movs	r3, #18
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	2314      	movs	r3, #20
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	002b      	movs	r3, r5
 8009570:	f000 fca8 	bl	8009ec4 <sen5x_read_measured_values>
 8009574:	0003      	movs	r3, r0
 8009576:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009578:	19bb      	adds	r3, r7, r6
 800957a:	2200      	movs	r2, #0
 800957c:	5e9b      	ldrsh	r3, [r3, r2]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <sen5x_read_measurement+0x56>
    return error;
 8009582:	19bb      	adds	r3, r7, r6
 8009584:	2200      	movs	r2, #0
 8009586:	5e9b      	ldrsh	r3, [r3, r2]
 8009588:	e02c      	b.n	80095e4 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800958a:	231c      	movs	r3, #28
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	881a      	ldrh	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009594:	231a      	movs	r3, #26
 8009596:	18fb      	adds	r3, r7, r3
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800959e:	2318      	movs	r3, #24
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 80095a8:	2316      	movs	r3, #22
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	881a      	ldrh	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 80095b2:	2314      	movs	r3, #20
 80095b4:	18fb      	adds	r3, r7, r3
 80095b6:	2200      	movs	r2, #0
 80095b8:	5e9a      	ldrsh	r2, [r3, r2]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 80095be:	2312      	movs	r3, #18
 80095c0:	18fb      	adds	r3, r7, r3
 80095c2:	2200      	movs	r2, #0
 80095c4:	5e9a      	ldrsh	r2, [r3, r2]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80095ca:	2310      	movs	r3, #16
 80095cc:	18fb      	adds	r3, r7, r3
 80095ce:	2200      	movs	r2, #0
 80095d0:	5e9a      	ldrsh	r2, [r3, r2]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 80095d6:	230e      	movs	r3, #14
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	2200      	movs	r2, #0
 80095dc:	5e9a      	ldrsh	r2, [r3, r2]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	81da      	strh	r2, [r3, #14]
//  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0, nox_index);
  return 0;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	0018      	movs	r0, r3
 80095e6:	46bd      	mov	sp, r7
 80095e8:	b009      	add	sp, #36	@ 0x24
 80095ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095ec <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
//  Debug("entering sen5x_printvalues");
//  Info("sen5x_printvalues entered for sample %d", sen5xSamples);
//  if (sen5xSamples != 3) {
//    return; // first two sample reads are not reliable
//  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80095f0:	4b69      	ldr	r3, [pc, #420]	@ (8009798 <sen5x_printvalues+0x1ac>)
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	4a69      	ldr	r2, [pc, #420]	@ (800979c <sen5x_printvalues+0x1b0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d013      	beq.n	8009622 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80095fa:	4b67      	ldr	r3, [pc, #412]	@ (8009798 <sen5x_printvalues+0x1ac>)
 80095fc:	881b      	ldrh	r3, [r3, #0]
 80095fe:	0018      	movs	r0, r3
 8009600:	f7f7 ffe6 	bl	80015d0 <__aeabi_i2f>
 8009604:	1c03      	adds	r3, r0, #0
 8009606:	4966      	ldr	r1, [pc, #408]	@ (80097a0 <sen5x_printvalues+0x1b4>)
 8009608:	1c18      	adds	r0, r3, #0
 800960a:	f7f7 fae3 	bl	8000bd4 <__aeabi_fdiv>
 800960e:	1c03      	adds	r3, r0, #0
 8009610:	1c18      	adds	r0, r3, #0
 8009612:	f7f9 ff27 	bl	8003464 <__aeabi_f2d>
 8009616:	0002      	movs	r2, r0
 8009618:	000b      	movs	r3, r1
 800961a:	4962      	ldr	r1, [pc, #392]	@ (80097a4 <sen5x_printvalues+0x1b8>)
 800961c:	0008      	movs	r0, r1
 800961e:	f016 fc03 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009622:	4b5d      	ldr	r3, [pc, #372]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009624:	885b      	ldrh	r3, [r3, #2]
 8009626:	4a5d      	ldr	r2, [pc, #372]	@ (800979c <sen5x_printvalues+0x1b0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d013      	beq.n	8009654 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800962c:	4b5a      	ldr	r3, [pc, #360]	@ (8009798 <sen5x_printvalues+0x1ac>)
 800962e:	885b      	ldrh	r3, [r3, #2]
 8009630:	0018      	movs	r0, r3
 8009632:	f7f7 ffcd 	bl	80015d0 <__aeabi_i2f>
 8009636:	1c03      	adds	r3, r0, #0
 8009638:	4959      	ldr	r1, [pc, #356]	@ (80097a0 <sen5x_printvalues+0x1b4>)
 800963a:	1c18      	adds	r0, r3, #0
 800963c:	f7f7 faca 	bl	8000bd4 <__aeabi_fdiv>
 8009640:	1c03      	adds	r3, r0, #0
 8009642:	1c18      	adds	r0, r3, #0
 8009644:	f7f9 ff0e 	bl	8003464 <__aeabi_f2d>
 8009648:	0002      	movs	r2, r0
 800964a:	000b      	movs	r3, r1
 800964c:	4956      	ldr	r1, [pc, #344]	@ (80097a8 <sen5x_printvalues+0x1bc>)
 800964e:	0008      	movs	r0, r1
 8009650:	f016 fbea 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009654:	4b50      	ldr	r3, [pc, #320]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009656:	889b      	ldrh	r3, [r3, #4]
 8009658:	4a50      	ldr	r2, [pc, #320]	@ (800979c <sen5x_printvalues+0x1b0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d013      	beq.n	8009686 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800965e:	4b4e      	ldr	r3, [pc, #312]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009660:	889b      	ldrh	r3, [r3, #4]
 8009662:	0018      	movs	r0, r3
 8009664:	f7f7 ffb4 	bl	80015d0 <__aeabi_i2f>
 8009668:	1c03      	adds	r3, r0, #0
 800966a:	494d      	ldr	r1, [pc, #308]	@ (80097a0 <sen5x_printvalues+0x1b4>)
 800966c:	1c18      	adds	r0, r3, #0
 800966e:	f7f7 fab1 	bl	8000bd4 <__aeabi_fdiv>
 8009672:	1c03      	adds	r3, r0, #0
 8009674:	1c18      	adds	r0, r3, #0
 8009676:	f7f9 fef5 	bl	8003464 <__aeabi_f2d>
 800967a:	0002      	movs	r2, r0
 800967c:	000b      	movs	r3, r1
 800967e:	494b      	ldr	r1, [pc, #300]	@ (80097ac <sen5x_printvalues+0x1c0>)
 8009680:	0008      	movs	r0, r1
 8009682:	f016 fbd1 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009686:	4b44      	ldr	r3, [pc, #272]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009688:	88db      	ldrh	r3, [r3, #6]
 800968a:	4a44      	ldr	r2, [pc, #272]	@ (800979c <sen5x_printvalues+0x1b0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d013      	beq.n	80096b8 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009690:	4b41      	ldr	r3, [pc, #260]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009692:	88db      	ldrh	r3, [r3, #6]
 8009694:	0018      	movs	r0, r3
 8009696:	f7f7 ff9b 	bl	80015d0 <__aeabi_i2f>
 800969a:	1c03      	adds	r3, r0, #0
 800969c:	4940      	ldr	r1, [pc, #256]	@ (80097a0 <sen5x_printvalues+0x1b4>)
 800969e:	1c18      	adds	r0, r3, #0
 80096a0:	f7f7 fa98 	bl	8000bd4 <__aeabi_fdiv>
 80096a4:	1c03      	adds	r3, r0, #0
 80096a6:	1c18      	adds	r0, r3, #0
 80096a8:	f7f9 fedc 	bl	8003464 <__aeabi_f2d>
 80096ac:	0002      	movs	r2, r0
 80096ae:	000b      	movs	r3, r1
 80096b0:	493f      	ldr	r1, [pc, #252]	@ (80097b0 <sen5x_printvalues+0x1c4>)
 80096b2:	0008      	movs	r0, r1
 80096b4:	f016 fbb8 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80096b8:	4b37      	ldr	r3, [pc, #220]	@ (8009798 <sen5x_printvalues+0x1ac>)
 80096ba:	2208      	movs	r2, #8
 80096bc:	5e9b      	ldrsh	r3, [r3, r2]
 80096be:	4a3d      	ldr	r2, [pc, #244]	@ (80097b4 <sen5x_printvalues+0x1c8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d014      	beq.n	80096ee <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80096c4:	4b34      	ldr	r3, [pc, #208]	@ (8009798 <sen5x_printvalues+0x1ac>)
 80096c6:	2208      	movs	r2, #8
 80096c8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ca:	0018      	movs	r0, r3
 80096cc:	f7f7 ff80 	bl	80015d0 <__aeabi_i2f>
 80096d0:	1c03      	adds	r3, r0, #0
 80096d2:	4939      	ldr	r1, [pc, #228]	@ (80097b8 <sen5x_printvalues+0x1cc>)
 80096d4:	1c18      	adds	r0, r3, #0
 80096d6:	f7f7 fa7d 	bl	8000bd4 <__aeabi_fdiv>
 80096da:	1c03      	adds	r3, r0, #0
 80096dc:	1c18      	adds	r0, r3, #0
 80096de:	f7f9 fec1 	bl	8003464 <__aeabi_f2d>
 80096e2:	0002      	movs	r2, r0
 80096e4:	000b      	movs	r3, r1
 80096e6:	4935      	ldr	r1, [pc, #212]	@ (80097bc <sen5x_printvalues+0x1d0>)
 80096e8:	0008      	movs	r0, r1
 80096ea:	f016 fb9d 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80096ee:	4b2a      	ldr	r3, [pc, #168]	@ (8009798 <sen5x_printvalues+0x1ac>)
 80096f0:	220a      	movs	r2, #10
 80096f2:	5e9b      	ldrsh	r3, [r3, r2]
 80096f4:	4a2f      	ldr	r2, [pc, #188]	@ (80097b4 <sen5x_printvalues+0x1c8>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d014      	beq.n	8009724 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80096fa:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <sen5x_printvalues+0x1ac>)
 80096fc:	220a      	movs	r2, #10
 80096fe:	5e9b      	ldrsh	r3, [r3, r2]
 8009700:	0018      	movs	r0, r3
 8009702:	f7f7 ff65 	bl	80015d0 <__aeabi_i2f>
 8009706:	1c03      	adds	r3, r0, #0
 8009708:	492d      	ldr	r1, [pc, #180]	@ (80097c0 <sen5x_printvalues+0x1d4>)
 800970a:	1c18      	adds	r0, r3, #0
 800970c:	f7f7 fa62 	bl	8000bd4 <__aeabi_fdiv>
 8009710:	1c03      	adds	r3, r0, #0
 8009712:	1c18      	adds	r0, r3, #0
 8009714:	f7f9 fea6 	bl	8003464 <__aeabi_f2d>
 8009718:	0002      	movs	r2, r0
 800971a:	000b      	movs	r3, r1
 800971c:	4929      	ldr	r1, [pc, #164]	@ (80097c4 <sen5x_printvalues+0x1d8>)
 800971e:	0008      	movs	r0, r1
 8009720:	f016 fb82 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009724:	4b1c      	ldr	r3, [pc, #112]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009726:	220c      	movs	r2, #12
 8009728:	5e9b      	ldrsh	r3, [r3, r2]
 800972a:	4a22      	ldr	r2, [pc, #136]	@ (80097b4 <sen5x_printvalues+0x1c8>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d014      	beq.n	800975a <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009730:	4b19      	ldr	r3, [pc, #100]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009732:	220c      	movs	r2, #12
 8009734:	5e9b      	ldrsh	r3, [r3, r2]
 8009736:	0018      	movs	r0, r3
 8009738:	f7f7 ff4a 	bl	80015d0 <__aeabi_i2f>
 800973c:	1c03      	adds	r3, r0, #0
 800973e:	4918      	ldr	r1, [pc, #96]	@ (80097a0 <sen5x_printvalues+0x1b4>)
 8009740:	1c18      	adds	r0, r3, #0
 8009742:	f7f7 fa47 	bl	8000bd4 <__aeabi_fdiv>
 8009746:	1c03      	adds	r3, r0, #0
 8009748:	1c18      	adds	r0, r3, #0
 800974a:	f7f9 fe8b 	bl	8003464 <__aeabi_f2d>
 800974e:	0002      	movs	r2, r0
 8009750:	000b      	movs	r3, r1
 8009752:	491d      	ldr	r1, [pc, #116]	@ (80097c8 <sen5x_printvalues+0x1dc>)
 8009754:	0008      	movs	r0, r1
 8009756:	f016 fb67 	bl	801fe28 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800975a:	4b0f      	ldr	r3, [pc, #60]	@ (8009798 <sen5x_printvalues+0x1ac>)
 800975c:	220e      	movs	r2, #14
 800975e:	5e9b      	ldrsh	r3, [r3, r2]
 8009760:	4a14      	ldr	r2, [pc, #80]	@ (80097b4 <sen5x_printvalues+0x1c8>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d014      	beq.n	8009790 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009766:	4b0c      	ldr	r3, [pc, #48]	@ (8009798 <sen5x_printvalues+0x1ac>)
 8009768:	220e      	movs	r2, #14
 800976a:	5e9b      	ldrsh	r3, [r3, r2]
 800976c:	0018      	movs	r0, r3
 800976e:	f7f7 ff2f 	bl	80015d0 <__aeabi_i2f>
 8009772:	1c03      	adds	r3, r0, #0
 8009774:	490a      	ldr	r1, [pc, #40]	@ (80097a0 <sen5x_printvalues+0x1b4>)
 8009776:	1c18      	adds	r0, r3, #0
 8009778:	f7f7 fa2c 	bl	8000bd4 <__aeabi_fdiv>
 800977c:	1c03      	adds	r3, r0, #0
 800977e:	1c18      	adds	r0, r3, #0
 8009780:	f7f9 fe70 	bl	8003464 <__aeabi_f2d>
 8009784:	0002      	movs	r2, r0
 8009786:	000b      	movs	r3, r1
 8009788:	4910      	ldr	r1, [pc, #64]	@ (80097cc <sen5x_printvalues+0x1e0>)
 800978a:	0008      	movs	r0, r1
 800978c:	f016 fb4c 	bl	801fe28 <iprintf>
  }
}
 8009790:	46c0      	nop			@ (mov r8, r8)
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	46c0      	nop			@ (mov r8, r8)
 8009798:	20001074 	.word	0x20001074
 800979c:	0000ffff 	.word	0x0000ffff
 80097a0:	41200000 	.word	0x41200000
 80097a4:	08024890 	.word	0x08024890
 80097a8:	080248bc 	.word	0x080248bc
 80097ac:	080248e8 	.word	0x080248e8
 80097b0:	08024914 	.word	0x08024914
 80097b4:	00007fff 	.word	0x00007fff
 80097b8:	42c80000 	.word	0x42c80000
 80097bc:	08024940 	.word	0x08024940
 80097c0:	43480000 	.word	0x43480000
 80097c4:	08024964 	.word	0x08024964
 80097c8:	0802498c 	.word	0x0802498c
 80097cc:	080249a4 	.word	0x080249a4

080097d0 <sen5xStoreMax>:

void sen5xStoreMax() {
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 80097d4:	4b32      	ldr	r3, [pc, #200]	@ (80098a0 <sen5xStoreMax+0xd0>)
 80097d6:	885b      	ldrh	r3, [r3, #2]
 80097d8:	4a32      	ldr	r2, [pc, #200]	@ (80098a4 <sen5xStoreMax+0xd4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d009      	beq.n	80097f2 <sen5xStoreMax+0x22>
 80097de:	4b30      	ldr	r3, [pc, #192]	@ (80098a0 <sen5xStoreMax+0xd0>)
 80097e0:	885a      	ldrh	r2, [r3, #2]
 80097e2:	4b31      	ldr	r3, [pc, #196]	@ (80098a8 <sen5xStoreMax+0xd8>)
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d903      	bls.n	80097f2 <sen5xStoreMax+0x22>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 80097ea:	4b2d      	ldr	r3, [pc, #180]	@ (80098a0 <sen5xStoreMax+0xd0>)
 80097ec:	885a      	ldrh	r2, [r3, #2]
 80097ee:	4b2e      	ldr	r3, [pc, #184]	@ (80098a8 <sen5xStoreMax+0xd8>)
 80097f0:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 80097f2:	4b2b      	ldr	r3, [pc, #172]	@ (80098a0 <sen5xStoreMax+0xd0>)
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	4a2b      	ldr	r2, [pc, #172]	@ (80098a4 <sen5xStoreMax+0xd4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d009      	beq.n	8009810 <sen5xStoreMax+0x40>
 80097fc:	4b28      	ldr	r3, [pc, #160]	@ (80098a0 <sen5xStoreMax+0xd0>)
 80097fe:	88da      	ldrh	r2, [r3, #6]
 8009800:	4b2a      	ldr	r3, [pc, #168]	@ (80098ac <sen5xStoreMax+0xdc>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d903      	bls.n	8009810 <sen5xStoreMax+0x40>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 8009808:	4b25      	ldr	r3, [pc, #148]	@ (80098a0 <sen5xStoreMax+0xd0>)
 800980a:	88da      	ldrh	r2, [r3, #6]
 800980c:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <sen5xStoreMax+0xdc>)
 800980e:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 8009810:	4b23      	ldr	r3, [pc, #140]	@ (80098a0 <sen5xStoreMax+0xd0>)
 8009812:	220c      	movs	r2, #12
 8009814:	5e9b      	ldrsh	r3, [r3, r2]
 8009816:	4a26      	ldr	r2, [pc, #152]	@ (80098b0 <sen5xStoreMax+0xe0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d00d      	beq.n	8009838 <sen5xStoreMax+0x68>
 800981c:	4b20      	ldr	r3, [pc, #128]	@ (80098a0 <sen5xStoreMax+0xd0>)
 800981e:	220c      	movs	r2, #12
 8009820:	5e9b      	ldrsh	r3, [r3, r2]
 8009822:	001a      	movs	r2, r3
 8009824:	4b23      	ldr	r3, [pc, #140]	@ (80098b4 <sen5xStoreMax+0xe4>)
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	dd05      	ble.n	8009838 <sen5xStoreMax+0x68>
    s5xvocimax = sen5x_data.voc_index;
 800982c:	4b1c      	ldr	r3, [pc, #112]	@ (80098a0 <sen5xStoreMax+0xd0>)
 800982e:	220c      	movs	r2, #12
 8009830:	5e9b      	ldrsh	r3, [r3, r2]
 8009832:	b29a      	uxth	r2, r3
 8009834:	4b1f      	ldr	r3, [pc, #124]	@ (80098b4 <sen5xStoreMax+0xe4>)
 8009836:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 8009838:	4b19      	ldr	r3, [pc, #100]	@ (80098a0 <sen5xStoreMax+0xd0>)
 800983a:	220e      	movs	r2, #14
 800983c:	5e9b      	ldrsh	r3, [r3, r2]
 800983e:	4a1c      	ldr	r2, [pc, #112]	@ (80098b0 <sen5xStoreMax+0xe0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00d      	beq.n	8009860 <sen5xStoreMax+0x90>
 8009844:	4b16      	ldr	r3, [pc, #88]	@ (80098a0 <sen5xStoreMax+0xd0>)
 8009846:	220e      	movs	r2, #14
 8009848:	5e9b      	ldrsh	r3, [r3, r2]
 800984a:	001a      	movs	r2, r3
 800984c:	4b1a      	ldr	r3, [pc, #104]	@ (80098b8 <sen5xStoreMax+0xe8>)
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	dd05      	ble.n	8009860 <sen5xStoreMax+0x90>
    s5xnoximax = sen5x_data.nox_index;
 8009854:	4b12      	ldr	r3, [pc, #72]	@ (80098a0 <sen5xStoreMax+0xd0>)
 8009856:	220e      	movs	r2, #14
 8009858:	5e9b      	ldrsh	r3, [r3, r2]
 800985a:	b29a      	uxth	r2, r3
 800985c:	4b16      	ldr	r3, [pc, #88]	@ (80098b8 <sen5xStoreMax+0xe8>)
 800985e:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009860:	4b16      	ldr	r3, [pc, #88]	@ (80098bc <sen5xStoreMax+0xec>)
 8009862:	791b      	ldrb	r3, [r3, #4]
 8009864:	2b34      	cmp	r3, #52	@ 0x34
 8009866:	d003      	beq.n	8009870 <sen5xStoreMax+0xa0>
 8009868:	4b14      	ldr	r3, [pc, #80]	@ (80098bc <sen5xStoreMax+0xec>)
 800986a:	791b      	ldrb	r3, [r3, #4]
 800986c:	2b35      	cmp	r3, #53	@ 0x35
 800986e:	d10a      	bne.n	8009886 <sen5xStoreMax+0xb6>
    setPMs(pm2p5max, pm10p0max, s5xvocimax, s5xnoximax);
 8009870:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <sen5xStoreMax+0xd8>)
 8009872:	8818      	ldrh	r0, [r3, #0]
 8009874:	4b0d      	ldr	r3, [pc, #52]	@ (80098ac <sen5xStoreMax+0xdc>)
 8009876:	8819      	ldrh	r1, [r3, #0]
 8009878:	4b0e      	ldr	r3, [pc, #56]	@ (80098b4 <sen5xStoreMax+0xe4>)
 800987a:	881a      	ldrh	r2, [r3, #0]
 800987c:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <sen5xStoreMax+0xe8>)
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	f7fa f8ae 	bl	80039e0 <setPMs>
 8009884:	e008      	b.n	8009898 <sen5xStoreMax+0xc8>
  }
  else {
    setPMsen50(pm2p5max, pm10p0max);
 8009886:	4b08      	ldr	r3, [pc, #32]	@ (80098a8 <sen5xStoreMax+0xd8>)
 8009888:	881a      	ldrh	r2, [r3, #0]
 800988a:	4b08      	ldr	r3, [pc, #32]	@ (80098ac <sen5xStoreMax+0xdc>)
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	0019      	movs	r1, r3
 8009890:	0010      	movs	r0, r2
 8009892:	f7fa f875 	bl	8003980 <setPMsen50>
  }
}
 8009896:	46c0      	nop			@ (mov r8, r8)
 8009898:	46c0      	nop			@ (mov r8, r8)
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	46c0      	nop			@ (mov r8, r8)
 80098a0:	20001074 	.word	0x20001074
 80098a4:	0000ffff 	.word	0x0000ffff
 80098a8:	20001066 	.word	0x20001066
 80098ac:	20001068 	.word	0x20001068
 80098b0:	00007fff 	.word	0x00007fff
 80098b4:	2000106a 	.word	0x2000106a
 80098b8:	2000106c 	.word	0x2000106c
 80098bc:	2000105c 	.word	0x2000105c

080098c0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	6039      	str	r1, [r7, #0]
 80098c8:	0011      	movs	r1, r2
 80098ca:	1dfb      	adds	r3, r7, #7
 80098cc:	1c02      	adds	r2, r0, #0
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	1d3b      	adds	r3, r7, #4
 80098d2:	1c0a      	adds	r2, r1, #0
 80098d4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80098d6:	1dfb      	adds	r3, r7, #7
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	18db      	adds	r3, r3, r3
 80098de:	b299      	uxth	r1, r3
 80098e0:	1d3b      	adds	r3, r7, #4
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	4805      	ldr	r0, [pc, #20]	@ (80098fc <sensirion_i2c_hal_read+0x3c>)
 80098e8:	2464      	movs	r4, #100	@ 0x64
 80098ea:	9400      	str	r4, [sp, #0]
 80098ec:	f006 fe60 	bl	80105b0 <HAL_I2C_Master_Receive>
 80098f0:	0003      	movs	r3, r0
 80098f2:	b25b      	sxtb	r3, r3
}
 80098f4:	0018      	movs	r0, r3
 80098f6:	46bd      	mov	sp, r7
 80098f8:	b003      	add	sp, #12
 80098fa:	bd90      	pop	{r4, r7, pc}
 80098fc:	20000e38 	.word	0x20000e38

08009900 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b085      	sub	sp, #20
 8009904:	af02      	add	r7, sp, #8
 8009906:	6039      	str	r1, [r7, #0]
 8009908:	0011      	movs	r1, r2
 800990a:	1dfb      	adds	r3, r7, #7
 800990c:	1c02      	adds	r2, r0, #0
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	1d3b      	adds	r3, r7, #4
 8009912:	1c0a      	adds	r2, r1, #0
 8009914:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009916:	1dfb      	adds	r3, r7, #7
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	18db      	adds	r3, r3, r3
 800991e:	b299      	uxth	r1, r3
 8009920:	1d3b      	adds	r3, r7, #4
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	4805      	ldr	r0, [pc, #20]	@ (800993c <sensirion_i2c_hal_write+0x3c>)
 8009928:	2464      	movs	r4, #100	@ 0x64
 800992a:	9400      	str	r4, [sp, #0]
 800992c:	f006 fd38 	bl	80103a0 <HAL_I2C_Master_Transmit>
 8009930:	0003      	movs	r3, r0
 8009932:	b25b      	sxtb	r3, r3
}
 8009934:	0018      	movs	r0, r3
 8009936:	46bd      	mov	sp, r7
 8009938:	b003      	add	sp, #12
 800993a:	bd90      	pop	{r4, r7, pc}
 800993c:	20000e38 	.word	0x20000e38

08009940 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	22fa      	movs	r2, #250	@ 0xfa
 800994c:	0091      	lsls	r1, r2, #2
 800994e:	0018      	movs	r0, r3
 8009950:	f7f6 fc28 	bl	80001a4 <__udivsi3>
 8009954:	0003      	movs	r3, r0
 8009956:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	22fa      	movs	r2, #250	@ 0xfa
 800995c:	0091      	lsls	r1, r2, #2
 800995e:	0018      	movs	r0, r3
 8009960:	f7f6 fca6 	bl	80002b0 <__aeabi_uidivmod>
 8009964:	1e0b      	subs	r3, r1, #0
 8009966:	d002      	beq.n	800996e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	0018      	movs	r0, r3
 8009972:	f005 f9bf 	bl	800ecf4 <HAL_Delay>
}
 8009976:	46c0      	nop			@ (mov r8, r8)
 8009978:	46bd      	mov	sp, r7
 800997a:	b004      	add	sp, #16
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800998a:	1d3b      	adds	r3, r7, #4
 800998c:	0018      	movs	r0, r3
 800998e:	f000 fcd9 	bl	800a344 <sen5x_read_device_status>
 8009992:	1e03      	subs	r3, r0, #0
 8009994:	d007      	beq.n	80099a6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009996:	4a28      	ldr	r2, [pc, #160]	@ (8009a38 <sen5x_check_for_errors+0xb8>)
 8009998:	4b28      	ldr	r3, [pc, #160]	@ (8009a3c <sen5x_check_for_errors+0xbc>)
 800999a:	0019      	movs	r1, r3
 800999c:	2001      	movs	r0, #1
 800999e:	f004 fd59 	bl	800e454 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e043      	b.n	8009a2e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	e03e      	b.n	8009a2e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	2380      	movs	r3, #128	@ 0x80
 80099b4:	039b      	lsls	r3, r3, #14
 80099b6:	4013      	ands	r3, r2
 80099b8:	d005      	beq.n	80099c6 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80099ba:	4a21      	ldr	r2, [pc, #132]	@ (8009a40 <sen5x_check_for_errors+0xc0>)
 80099bc:	4b21      	ldr	r3, [pc, #132]	@ (8009a44 <sen5x_check_for_errors+0xc4>)
 80099be:	0019      	movs	r1, r3
 80099c0:	2003      	movs	r0, #3
 80099c2:	f004 fd47 	bl	800e454 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	2380      	movs	r3, #128	@ 0x80
 80099ca:	031b      	lsls	r3, r3, #12
 80099cc:	4013      	ands	r3, r2
 80099ce:	d005      	beq.n	80099dc <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 80099d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a48 <sen5x_check_for_errors+0xc8>)
 80099d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009a44 <sen5x_check_for_errors+0xc4>)
 80099d4:	0019      	movs	r1, r3
 80099d6:	2003      	movs	r0, #3
 80099d8:	f004 fd3c 	bl	800e454 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2280      	movs	r2, #128	@ 0x80
 80099e0:	4013      	ands	r3, r2
 80099e2:	d005      	beq.n	80099f0 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 80099e4:	4a19      	ldr	r2, [pc, #100]	@ (8009a4c <sen5x_check_for_errors+0xcc>)
 80099e6:	4b17      	ldr	r3, [pc, #92]	@ (8009a44 <sen5x_check_for_errors+0xc4>)
 80099e8:	0019      	movs	r1, r3
 80099ea:	2003      	movs	r0, #3
 80099ec:	f004 fd32 	bl	800e454 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2240      	movs	r2, #64	@ 0x40
 80099f4:	4013      	ands	r3, r2
 80099f6:	d005      	beq.n	8009a04 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 80099f8:	4a15      	ldr	r2, [pc, #84]	@ (8009a50 <sen5x_check_for_errors+0xd0>)
 80099fa:	4b12      	ldr	r3, [pc, #72]	@ (8009a44 <sen5x_check_for_errors+0xc4>)
 80099fc:	0019      	movs	r1, r3
 80099fe:	2003      	movs	r0, #3
 8009a00:	f004 fd28 	bl	800e454 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	4013      	ands	r3, r2
 8009a0a:	d005      	beq.n	8009a18 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009a0c:	4a11      	ldr	r2, [pc, #68]	@ (8009a54 <sen5x_check_for_errors+0xd4>)
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <sen5x_check_for_errors+0xc4>)
 8009a10:	0019      	movs	r1, r3
 8009a12:	2003      	movs	r0, #3
 8009a14:	f004 fd1e 	bl	800e454 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2210      	movs	r2, #16
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	d005      	beq.n	8009a2c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009a20:	4a0d      	ldr	r2, [pc, #52]	@ (8009a58 <sen5x_check_for_errors+0xd8>)
 8009a22:	4b08      	ldr	r3, [pc, #32]	@ (8009a44 <sen5x_check_for_errors+0xc4>)
 8009a24:	0019      	movs	r1, r3
 8009a26:	2003      	movs	r0, #3
 8009a28:	f004 fd14 	bl	800e454 <CreateLine>
  }
  return 1;
 8009a2c:	2301      	movs	r3, #1
}
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b002      	add	sp, #8
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	46c0      	nop			@ (mov r8, r8)
 8009a38:	080249bc 	.word	0x080249bc
 8009a3c:	080245b8 	.word	0x080245b8
 8009a40:	080249e8 	.word	0x080249e8
 8009a44:	080244d8 	.word	0x080244d8
 8009a48:	08024a08 	.word	0x08024a08
 8009a4c:	08024a24 	.word	0x08024a24
 8009a50:	08024a48 	.word	0x08024a48
 8009a54:	08024a68 	.word	0x08024a68
 8009a58:	08024a7c 	.word	0x08024a7c

08009a5c <set_light_on_state>:

void set_light_on_state(void) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009a60:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <set_light_on_state+0x5c>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2201      	movs	r2, #1
 8009a66:	4053      	eors	r3, r2
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d008      	beq.n	8009a80 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009a6e:	f7ff fb4d 	bl	800910c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009a72:	4a12      	ldr	r2, [pc, #72]	@ (8009abc <set_light_on_state+0x60>)
 8009a74:	4b12      	ldr	r3, [pc, #72]	@ (8009ac0 <set_light_on_state+0x64>)
 8009a76:	0019      	movs	r1, r3
 8009a78:	2003      	movs	r0, #3
 8009a7a:	f004 fceb 	bl	800e454 <CreateLine>
 8009a7e:	e00a      	b.n	8009a96 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009a80:	f005 f92e 	bl	800ece0 <HAL_GetTick>
 8009a84:	0002      	movs	r2, r0
 8009a86:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac4 <set_light_on_state+0x68>)
 8009a88:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8009ac8 <set_light_on_state+0x6c>)
 8009a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac0 <set_light_on_state+0x64>)
 8009a8e:	0019      	movs	r1, r3
 8009a90:	2003      	movs	r0, #3
 8009a92:	f004 fcdf 	bl	800e454 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009a96:	f7ff fca7 	bl	80093e8 <sen5x_lightup_measurement>
 8009a9a:	1e03      	subs	r3, r0, #0
 8009a9c:	d005      	beq.n	8009aaa <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8009acc <set_light_on_state+0x70>)
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad0 <set_light_on_state+0x74>)
 8009aa2:	0019      	movs	r1, r3
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f004 fcd5 	bl	800e454 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad4 <set_light_on_state+0x78>)
 8009aac:	2203      	movs	r2, #3
 8009aae:	701a      	strb	r2, [r3, #0]
}
 8009ab0:	46c0      	nop			@ (mov r8, r8)
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	46c0      	nop			@ (mov r8, r8)
 8009ab8:	20001059 	.word	0x20001059
 8009abc:	08024ab8 	.word	0x08024ab8
 8009ac0:	080244d8 	.word	0x080244d8
 8009ac4:	20001070 	.word	0x20001070
 8009ac8:	08024ae4 	.word	0x08024ae4
 8009acc:	08024afc 	.word	0x08024afc
 8009ad0:	080245b8 	.word	0x080245b8
 8009ad4:	20000086 	.word	0x20000086

08009ad8 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009ade:	1dfb      	adds	r3, r7, #7
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
//  Debug("sen5xReadTimer has value %d", sen5xReadTimer);
  if (TimestampIsReached(sen5xReadTimer)) {
 8009ae4:	4b75      	ldr	r3, [pc, #468]	@ (8009cbc <sen5x_statemachine+0x1e4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f004 fc5d 	bl	800e3a8 <TimestampIsReached>
 8009aee:	1e03      	subs	r3, r0, #0
 8009af0:	d100      	bne.n	8009af4 <sen5x_statemachine+0x1c>
 8009af2:	e0df      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009af4:	4b72      	ldr	r3, [pc, #456]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	d900      	bls.n	8009afe <sen5x_statemachine+0x26>
 8009afc:	e0da      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
 8009afe:	009a      	lsls	r2, r3, #2
 8009b00:	4b70      	ldr	r3, [pc, #448]	@ (8009cc4 <sen5x_statemachine+0x1ec>)
 8009b02:	18d3      	adds	r3, r2, r3
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009b08:	4a6f      	ldr	r2, [pc, #444]	@ (8009cc8 <sen5x_statemachine+0x1f0>)
 8009b0a:	4b70      	ldr	r3, [pc, #448]	@ (8009ccc <sen5x_statemachine+0x1f4>)
 8009b0c:	0019      	movs	r1, r3
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f004 fca0 	bl	800e454 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009b14:	f005 f8e4 	bl	800ece0 <HAL_GetTick>
 8009b18:	0003      	movs	r3, r0
 8009b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8009cd0 <sen5x_statemachine+0x1f8>)
 8009b1c:	189a      	adds	r2, r3, r2
 8009b1e:	4b67      	ldr	r3, [pc, #412]	@ (8009cbc <sen5x_statemachine+0x1e4>)
 8009b20:	601a      	str	r2, [r3, #0]
      break;
 8009b22:	e0c7      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009b24:	f005 f8dc 	bl	800ece0 <HAL_GetTick>
 8009b28:	0003      	movs	r3, r0
 8009b2a:	4a6a      	ldr	r2, [pc, #424]	@ (8009cd4 <sen5x_statemachine+0x1fc>)
 8009b2c:	189a      	adds	r2, r3, r2
 8009b2e:	4b63      	ldr	r3, [pc, #396]	@ (8009cbc <sen5x_statemachine+0x1e4>)
 8009b30:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009b32:	f7ff ff93 	bl	8009a5c <set_light_on_state>
      break;
 8009b36:	e0bd      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009b38:	4b61      	ldr	r3, [pc, #388]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009b3e:	4b66      	ldr	r3, [pc, #408]	@ (8009cd8 <sen5x_statemachine+0x200>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d905      	bls.n	8009b52 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009b46:	4b5e      	ldr	r3, [pc, #376]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009b4c:	f7ff fafe 	bl	800914c <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009b50:	e0ad      	b.n	8009cae <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009b52:	f7ff ff15 	bl	8009980 <sen5x_check_for_errors>
 8009b56:	1e03      	subs	r3, r0, #0
 8009b58:	d100      	bne.n	8009b5c <sen5x_statemachine+0x84>
 8009b5a:	e0a8      	b.n	8009cae <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009b5c:	f000 fc44 	bl	800a3e8 <sen5x_device_reset>
 8009b60:	1e03      	subs	r3, r0, #0
 8009b62:	d006      	beq.n	8009b72 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009b64:	4a5d      	ldr	r2, [pc, #372]	@ (8009cdc <sen5x_statemachine+0x204>)
 8009b66:	4b59      	ldr	r3, [pc, #356]	@ (8009ccc <sen5x_statemachine+0x1f4>)
 8009b68:	0019      	movs	r1, r3
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	f004 fc72 	bl	800e454 <CreateLine>
 8009b70:	e005      	b.n	8009b7e <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009b72:	4a5b      	ldr	r2, [pc, #364]	@ (8009ce0 <sen5x_statemachine+0x208>)
 8009b74:	4b5b      	ldr	r3, [pc, #364]	@ (8009ce4 <sen5x_statemachine+0x20c>)
 8009b76:	0019      	movs	r1, r3
 8009b78:	2002      	movs	r0, #2
 8009b7a:	f004 fc6b 	bl	800e454 <CreateLine>
          sen5xErrors++;
 8009b7e:	4b56      	ldr	r3, [pc, #344]	@ (8009cd8 <sen5x_statemachine+0x200>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	4b54      	ldr	r3, [pc, #336]	@ (8009cd8 <sen5x_statemachine+0x200>)
 8009b88:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009b8a:	f005 f8a9 	bl	800ece0 <HAL_GetTick>
 8009b8e:	0003      	movs	r3, r0
 8009b90:	3396      	adds	r3, #150	@ 0x96
 8009b92:	001a      	movs	r2, r3
 8009b94:	4b49      	ldr	r3, [pc, #292]	@ (8009cbc <sen5x_statemachine+0x1e4>)
 8009b96:	601a      	str	r2, [r3, #0]
      break;
 8009b98:	e089      	b.n	8009cae <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009b9a:	1dfb      	adds	r3, r7, #7
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f000 f93f 	bl	8009e20 <sen5x_read_data_ready>
      if (data_ready) {
 8009ba2:	1dfb      	adds	r3, r7, #7
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d028      	beq.n	8009bfc <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009baa:	f003 fc9d 	bl	800d4e8 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009bae:	4b4e      	ldr	r3, [pc, #312]	@ (8009ce8 <sen5x_statemachine+0x210>)
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f7ff fcbf 	bl	8009534 <sen5x_read_measurement>
 8009bb6:	1e03      	subs	r3, r0, #0
 8009bb8:	d005      	beq.n	8009bc6 <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009bba:	4a4c      	ldr	r2, [pc, #304]	@ (8009cec <sen5x_statemachine+0x214>)
 8009bbc:	4b43      	ldr	r3, [pc, #268]	@ (8009ccc <sen5x_statemachine+0x1f4>)
 8009bbe:	0019      	movs	r1, r3
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	f004 fc47 	bl	800e454 <CreateLine>
        }
        sen5xSamples++;
 8009bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	4b48      	ldr	r3, [pc, #288]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009bd0:	701a      	strb	r2, [r3, #0]
        sen5xStoreMax();
 8009bd2:	f7ff fdfd 	bl	80097d0 <sen5xStoreMax>
        if (sen5xSamples == 31) { // about two times a minute
 8009bd6:	4b46      	ldr	r3, [pc, #280]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b1f      	cmp	r3, #31
 8009bdc:	d102      	bne.n	8009be4 <sen5x_statemachine+0x10c>
          sen5xSamples = 0;  // enable display on serial
 8009bde:	4b44      	ldr	r3, [pc, #272]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009be4:	4b42      	ldr	r3, [pc, #264]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d901      	bls.n	8009bf0 <sen5x_statemachine+0x118>
          sen5xStoreMax();
 8009bec:	f7ff fdf0 	bl	80097d0 <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d101      	bne.n	8009bfc <sen5x_statemachine+0x124>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009bf8:	f7ff fcf8 	bl	80095ec <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8009cf4 <sen5x_statemachine+0x21c>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <sen5x_statemachine+0x134>
 8009c04:	4b3a      	ldr	r3, [pc, #232]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d952      	bls.n	8009cb2 <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009c0e:	2204      	movs	r2, #4
 8009c10:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009c12:	e04e      	b.n	8009cb2 <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
//      Debug(" state is CLEAN_FAN");
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009c14:	f7fc ff2a 	bl	8006a6c <RTC_GetWeekday>
 8009c18:	0003      	movs	r3, r0
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d118      	bne.n	8009c50 <sen5x_statemachine+0x178>
 8009c1e:	4b36      	ldr	r3, [pc, #216]	@ (8009cf8 <sen5x_statemachine+0x220>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2201      	movs	r2, #1
 8009c24:	4053      	eors	r3, r2
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d011      	beq.n	8009c50 <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009c2c:	f000 f9de 	bl	8009fec <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009c30:	4a32      	ldr	r2, [pc, #200]	@ (8009cfc <sen5x_statemachine+0x224>)
 8009c32:	4b2c      	ldr	r3, [pc, #176]	@ (8009ce4 <sen5x_statemachine+0x20c>)
 8009c34:	0019      	movs	r1, r3
 8009c36:	2002      	movs	r0, #2
 8009c38:	f004 fc0c 	bl	800e454 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009c3c:	f005 f850 	bl	800ece0 <HAL_GetTick>
 8009c40:	0003      	movs	r3, r0
 8009c42:	4a2f      	ldr	r2, [pc, #188]	@ (8009d00 <sen5x_statemachine+0x228>)
 8009c44:	189a      	adds	r2, r3, r2
 8009c46:	4b1d      	ldr	r3, [pc, #116]	@ (8009cbc <sen5x_statemachine+0x1e4>)
 8009c48:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8009cf8 <sen5x_statemachine+0x220>)
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009c50:	4b1b      	ldr	r3, [pc, #108]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009c52:	2205      	movs	r2, #5
 8009c54:	701a      	strb	r2, [r3, #0]
      break;
 8009c56:	e02d      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 8009c58:	4b26      	ldr	r3, [pc, #152]	@ (8009cf4 <sen5x_statemachine+0x21c>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	4053      	eors	r3, r2
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d015      	beq.n	8009c92 <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009c66:	f7ff fc0b 	bl	8009480 <sen5x_extinguish_measurement>
 8009c6a:	1e03      	subs	r3, r0, #0
 8009c6c:	d005      	beq.n	8009c7a <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009c6e:	4a25      	ldr	r2, [pc, #148]	@ (8009d04 <sen5x_statemachine+0x22c>)
 8009c70:	4b16      	ldr	r3, [pc, #88]	@ (8009ccc <sen5x_statemachine+0x1f4>)
 8009c72:	0019      	movs	r1, r3
 8009c74:	2001      	movs	r0, #1
 8009c76:	f004 fbed 	bl	800e454 <CreateLine>
        }
        sen5xSamples = 0;
 8009c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf0 <sen5x_statemachine+0x218>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009c80:	f7ff fa64 	bl	800914c <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009c84:	2000      	movs	r0, #0
 8009c86:	f7fe fbd1 	bl	800842c <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	e002      	b.n	8009c98 <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009c92:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc0 <sen5x_statemachine+0x1e8>)
 8009c94:	2203      	movs	r2, #3
 8009c96:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009c98:	f003 fc4c 	bl	800d534 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009c9c:	f005 f820 	bl	800ece0 <HAL_GetTick>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	22fa      	movs	r2, #250	@ 0xfa
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	189a      	adds	r2, r3, r2
 8009ca8:	4b04      	ldr	r3, [pc, #16]	@ (8009cbc <sen5x_statemachine+0x1e4>)
 8009caa:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009cac:	e002      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
      break;
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	e000      	b.n	8009cb4 <sen5x_statemachine+0x1dc>
      break;
 8009cb2:	46c0      	nop			@ (mov r8, r8)
}
 8009cb4:	46c0      	nop			@ (mov r8, r8)
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b002      	add	sp, #8
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20001070 	.word	0x20001070
 8009cc0:	20000086 	.word	0x20000086
 8009cc4:	080254e4 	.word	0x080254e4
 8009cc8:	08024b28 	.word	0x08024b28
 8009ccc:	080245b8 	.word	0x080245b8
 8009cd0:	002fefd8 	.word	0x002fefd8
 8009cd4:	00005910 	.word	0x00005910
 8009cd8:	20001065 	.word	0x20001065
 8009cdc:	08024b58 	.word	0x08024b58
 8009ce0:	08024b70 	.word	0x08024b70
 8009ce4:	08024500 	.word	0x08024500
 8009ce8:	20001074 	.word	0x20001074
 8009cec:	08024b88 	.word	0x08024b88
 8009cf0:	20001064 	.word	0x20001064
 8009cf4:	20001ff5 	.word	0x20001ff5
 8009cf8:	20001058 	.word	0x20001058
 8009cfc:	08024bb8 	.word	0x08024bb8
 8009d00:	00002710 	.word	0x00002710
 8009d04:	08024bd0 	.word	0x08024bd0

08009d08 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009d08:	b590      	push	{r4, r7, lr}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d0e:	1dbb      	adds	r3, r7, #6
 8009d10:	2200      	movs	r2, #0
 8009d12:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009d14:	1dbc      	adds	r4, r7, #6
 8009d16:	1dbb      	adds	r3, r7, #6
 8009d18:	8819      	ldrh	r1, [r3, #0]
 8009d1a:	003b      	movs	r3, r7
 8009d1c:	2221      	movs	r2, #33	@ 0x21
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f001 fb56 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 8009d24:	0003      	movs	r3, r0
 8009d26:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d28:	1d3c      	adds	r4, r7, #4
 8009d2a:	1dbb      	adds	r3, r7, #6
 8009d2c:	881a      	ldrh	r2, [r3, #0]
 8009d2e:	003b      	movs	r3, r7
 8009d30:	0019      	movs	r1, r3
 8009d32:	2069      	movs	r0, #105	@ 0x69
 8009d34:	f001 fbd0 	bl	800b4d8 <sensirion_i2c_write_data>
 8009d38:	0003      	movs	r3, r0
 8009d3a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d3c:	1d3b      	adds	r3, r7, #4
 8009d3e:	2200      	movs	r2, #0
 8009d40:	5e9b      	ldrsh	r3, [r3, r2]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <sen5x_start_measurement+0x46>
        return error;
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	2200      	movs	r2, #0
 8009d4a:	5e9b      	ldrsh	r3, [r3, r2]
 8009d4c:	e004      	b.n	8009d58 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d4e:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <sen5x_start_measurement+0x58>)
 8009d50:	0018      	movs	r0, r3
 8009d52:	f7ff fdf5 	bl	8009940 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	0018      	movs	r0, r3
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	b003      	add	sp, #12
 8009d5e:	bd90      	pop	{r4, r7, pc}
 8009d60:	0000c350 	.word	0x0000c350

08009d64 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009d64:	b590      	push	{r4, r7, lr}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d6a:	1dbb      	adds	r3, r7, #6
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009d70:	1dbc      	adds	r4, r7, #6
 8009d72:	1dbb      	adds	r3, r7, #6
 8009d74:	8819      	ldrh	r1, [r3, #0]
 8009d76:	003b      	movs	r3, r7
 8009d78:	2237      	movs	r2, #55	@ 0x37
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	f001 fb28 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 8009d80:	0003      	movs	r3, r0
 8009d82:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d84:	1d3c      	adds	r4, r7, #4
 8009d86:	1dbb      	adds	r3, r7, #6
 8009d88:	881a      	ldrh	r2, [r3, #0]
 8009d8a:	003b      	movs	r3, r7
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	2069      	movs	r0, #105	@ 0x69
 8009d90:	f001 fba2 	bl	800b4d8 <sensirion_i2c_write_data>
 8009d94:	0003      	movs	r3, r0
 8009d96:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d98:	1d3b      	adds	r3, r7, #4
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009da2:	1d3b      	adds	r3, r7, #4
 8009da4:	2200      	movs	r2, #0
 8009da6:	5e9b      	ldrsh	r3, [r3, r2]
 8009da8:	e004      	b.n	8009db4 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009daa:	4b04      	ldr	r3, [pc, #16]	@ (8009dbc <sen5x_start_measurement_without_pm+0x58>)
 8009dac:	0018      	movs	r0, r3
 8009dae:	f7ff fdc7 	bl	8009940 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	0018      	movs	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b003      	add	sp, #12
 8009dba:	bd90      	pop	{r4, r7, pc}
 8009dbc:	0000c350 	.word	0x0000c350

08009dc0 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009dc6:	1dbb      	adds	r3, r7, #6
 8009dc8:	2200      	movs	r2, #0
 8009dca:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009dcc:	1dbc      	adds	r4, r7, #6
 8009dce:	2382      	movs	r3, #130	@ 0x82
 8009dd0:	005a      	lsls	r2, r3, #1
 8009dd2:	1dbb      	adds	r3, r7, #6
 8009dd4:	8819      	ldrh	r1, [r3, #0]
 8009dd6:	003b      	movs	r3, r7
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f001 faf9 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 8009dde:	0003      	movs	r3, r0
 8009de0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009de2:	1d3c      	adds	r4, r7, #4
 8009de4:	1dbb      	adds	r3, r7, #6
 8009de6:	881a      	ldrh	r2, [r3, #0]
 8009de8:	003b      	movs	r3, r7
 8009dea:	0019      	movs	r1, r3
 8009dec:	2069      	movs	r0, #105	@ 0x69
 8009dee:	f001 fb73 	bl	800b4d8 <sensirion_i2c_write_data>
 8009df2:	0003      	movs	r3, r0
 8009df4:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009df6:	1d3b      	adds	r3, r7, #4
 8009df8:	2200      	movs	r2, #0
 8009dfa:	5e9b      	ldrsh	r3, [r3, r2]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <sen5x_stop_measurement+0x48>
        return error;
 8009e00:	1d3b      	adds	r3, r7, #4
 8009e02:	2200      	movs	r2, #0
 8009e04:	5e9b      	ldrsh	r3, [r3, r2]
 8009e06:	e004      	b.n	8009e12 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009e08:	4b04      	ldr	r3, [pc, #16]	@ (8009e1c <sen5x_stop_measurement+0x5c>)
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7ff fd98 	bl	8009940 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	0018      	movs	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b003      	add	sp, #12
 8009e18:	bd90      	pop	{r4, r7, pc}
 8009e1a:	46c0      	nop			@ (mov r8, r8)
 8009e1c:	00030d40 	.word	0x00030d40

08009e20 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009e28:	250e      	movs	r5, #14
 8009e2a:	197b      	adds	r3, r7, r5
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009e30:	197c      	adds	r4, r7, r5
 8009e32:	4a22      	ldr	r2, [pc, #136]	@ (8009ebc <sen5x_read_data_ready+0x9c>)
 8009e34:	197b      	adds	r3, r7, r5
 8009e36:	8819      	ldrh	r1, [r3, #0]
 8009e38:	2308      	movs	r3, #8
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f001 fac7 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 8009e42:	0003      	movs	r3, r0
 8009e44:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e46:	260c      	movs	r6, #12
 8009e48:	19bc      	adds	r4, r7, r6
 8009e4a:	197b      	adds	r3, r7, r5
 8009e4c:	881a      	ldrh	r2, [r3, #0]
 8009e4e:	2308      	movs	r3, #8
 8009e50:	18fb      	adds	r3, r7, r3
 8009e52:	0019      	movs	r1, r3
 8009e54:	2069      	movs	r0, #105	@ 0x69
 8009e56:	f001 fb3f 	bl	800b4d8 <sensirion_i2c_write_data>
 8009e5a:	0003      	movs	r3, r0
 8009e5c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e5e:	19bb      	adds	r3, r7, r6
 8009e60:	2200      	movs	r2, #0
 8009e62:	5e9b      	ldrsh	r3, [r3, r2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <sen5x_read_data_ready+0x50>
        return error;
 8009e68:	19bb      	adds	r3, r7, r6
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	5e9b      	ldrsh	r3, [r3, r2]
 8009e6e:	e020      	b.n	8009eb2 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e70:	4b13      	ldr	r3, [pc, #76]	@ (8009ec0 <sen5x_read_data_ready+0xa0>)
 8009e72:	0018      	movs	r0, r3
 8009e74:	f7ff fd64 	bl	8009940 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009e78:	250c      	movs	r5, #12
 8009e7a:	197c      	adds	r4, r7, r5
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	18fb      	adds	r3, r7, r3
 8009e80:	2202      	movs	r2, #2
 8009e82:	0019      	movs	r1, r3
 8009e84:	2069      	movs	r0, #105	@ 0x69
 8009e86:	f001 fb3f 	bl	800b508 <sensirion_i2c_read_data_inplace>
 8009e8a:	0003      	movs	r3, r0
 8009e8c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e8e:	197b      	adds	r3, r7, r5
 8009e90:	2200      	movs	r2, #0
 8009e92:	5e9b      	ldrsh	r3, [r3, r2]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <sen5x_read_data_ready+0x80>
        return error;
 8009e98:	197b      	adds	r3, r7, r5
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	5e9b      	ldrsh	r3, [r3, r2]
 8009e9e:	e008      	b.n	8009eb2 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	18fb      	adds	r3, r7, r3
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	1e5a      	subs	r2, r3, #1
 8009ea8:	4193      	sbcs	r3, r2
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	b005      	add	sp, #20
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	46c0      	nop			@ (mov r8, r8)
 8009ebc:	00000202 	.word	0x00000202
 8009ec0:	00004e20 	.word	0x00004e20

08009ec4 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	b08d      	sub	sp, #52	@ 0x34
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009ed2:	252e      	movs	r5, #46	@ 0x2e
 8009ed4:	197b      	adds	r3, r7, r5
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009eda:	197c      	adds	r4, r7, r5
 8009edc:	23f1      	movs	r3, #241	@ 0xf1
 8009ede:	009a      	lsls	r2, r3, #2
 8009ee0:	197b      	adds	r3, r7, r5
 8009ee2:	8819      	ldrh	r1, [r3, #0]
 8009ee4:	2314      	movs	r3, #20
 8009ee6:	18fb      	adds	r3, r7, r3
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f001 fa71 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 8009eee:	0003      	movs	r3, r0
 8009ef0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ef2:	262c      	movs	r6, #44	@ 0x2c
 8009ef4:	19bc      	adds	r4, r7, r6
 8009ef6:	197b      	adds	r3, r7, r5
 8009ef8:	881a      	ldrh	r2, [r3, #0]
 8009efa:	2314      	movs	r3, #20
 8009efc:	18fb      	adds	r3, r7, r3
 8009efe:	0019      	movs	r1, r3
 8009f00:	2069      	movs	r0, #105	@ 0x69
 8009f02:	f001 fae9 	bl	800b4d8 <sensirion_i2c_write_data>
 8009f06:	0003      	movs	r3, r0
 8009f08:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f0a:	19bb      	adds	r3, r7, r6
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d003      	beq.n	8009f1c <sen5x_read_measured_values+0x58>
        return error;
 8009f14:	19bb      	adds	r3, r7, r6
 8009f16:	2200      	movs	r2, #0
 8009f18:	5e9b      	ldrsh	r3, [r3, r2]
 8009f1a:	e060      	b.n	8009fde <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009f1c:	4b32      	ldr	r3, [pc, #200]	@ (8009fe8 <sen5x_read_measured_values+0x124>)
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f7ff fd0e 	bl	8009940 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009f24:	252c      	movs	r5, #44	@ 0x2c
 8009f26:	197c      	adds	r4, r7, r5
 8009f28:	2314      	movs	r3, #20
 8009f2a:	18fb      	adds	r3, r7, r3
 8009f2c:	2210      	movs	r2, #16
 8009f2e:	0019      	movs	r1, r3
 8009f30:	2069      	movs	r0, #105	@ 0x69
 8009f32:	f001 fae9 	bl	800b508 <sensirion_i2c_read_data_inplace>
 8009f36:	0003      	movs	r3, r0
 8009f38:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f3a:	197b      	adds	r3, r7, r5
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <sen5x_read_measured_values+0x88>
        return error;
 8009f44:	197b      	adds	r3, r7, r5
 8009f46:	2200      	movs	r2, #0
 8009f48:	5e9b      	ldrsh	r3, [r3, r2]
 8009f4a:	e048      	b.n	8009fde <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009f4c:	2414      	movs	r4, #20
 8009f4e:	193b      	adds	r3, r7, r4
 8009f50:	0018      	movs	r0, r3
 8009f52:	f000 fa79 	bl	800a448 <sensirion_common_bytes_to_uint16_t>
 8009f56:	0003      	movs	r3, r0
 8009f58:	001a      	movs	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009f5e:	193b      	adds	r3, r7, r4
 8009f60:	3302      	adds	r3, #2
 8009f62:	0018      	movs	r0, r3
 8009f64:	f000 fa70 	bl	800a448 <sensirion_common_bytes_to_uint16_t>
 8009f68:	0003      	movs	r3, r0
 8009f6a:	001a      	movs	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009f70:	193b      	adds	r3, r7, r4
 8009f72:	3304      	adds	r3, #4
 8009f74:	0018      	movs	r0, r3
 8009f76:	f000 fa67 	bl	800a448 <sensirion_common_bytes_to_uint16_t>
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	001a      	movs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009f82:	193b      	adds	r3, r7, r4
 8009f84:	3306      	adds	r3, #6
 8009f86:	0018      	movs	r0, r3
 8009f88:	f000 fa5e 	bl	800a448 <sensirion_common_bytes_to_uint16_t>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	001a      	movs	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009f94:	193b      	adds	r3, r7, r4
 8009f96:	3308      	adds	r3, #8
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f000 fa81 	bl	800a4a0 <sensirion_common_bytes_to_int16_t>
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	001a      	movs	r2, r3
 8009fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fa4:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009fa6:	193b      	adds	r3, r7, r4
 8009fa8:	330a      	adds	r3, #10
 8009faa:	0018      	movs	r0, r3
 8009fac:	f000 fa78 	bl	800a4a0 <sensirion_common_bytes_to_int16_t>
 8009fb0:	0003      	movs	r3, r0
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fb6:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009fb8:	193b      	adds	r3, r7, r4
 8009fba:	330c      	adds	r3, #12
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f000 fa6f 	bl	800a4a0 <sensirion_common_bytes_to_int16_t>
 8009fc2:	0003      	movs	r3, r0
 8009fc4:	001a      	movs	r2, r3
 8009fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fc8:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009fca:	193b      	adds	r3, r7, r4
 8009fcc:	330e      	adds	r3, #14
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f000 fa66 	bl	800a4a0 <sensirion_common_bytes_to_int16_t>
 8009fd4:	0003      	movs	r3, r0
 8009fd6:	001a      	movs	r2, r3
 8009fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fda:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	0018      	movs	r0, r3
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	b00d      	add	sp, #52	@ 0x34
 8009fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe6:	46c0      	nop			@ (mov r8, r8)
 8009fe8:	00004e20 	.word	0x00004e20

08009fec <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009fec:	b590      	push	{r4, r7, lr}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009ff2:	1dbb      	adds	r3, r7, #6
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009ff8:	1dbc      	adds	r4, r7, #6
 8009ffa:	4a12      	ldr	r2, [pc, #72]	@ (800a044 <sen5x_start_fan_cleaning+0x58>)
 8009ffc:	1dbb      	adds	r3, r7, #6
 8009ffe:	8819      	ldrh	r1, [r3, #0]
 800a000:	003b      	movs	r3, r7
 800a002:	0018      	movs	r0, r3
 800a004:	f001 f9e4 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a008:	0003      	movs	r3, r0
 800a00a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a00c:	1d3c      	adds	r4, r7, #4
 800a00e:	1dbb      	adds	r3, r7, #6
 800a010:	881a      	ldrh	r2, [r3, #0]
 800a012:	003b      	movs	r3, r7
 800a014:	0019      	movs	r1, r3
 800a016:	2069      	movs	r0, #105	@ 0x69
 800a018:	f001 fa5e 	bl	800b4d8 <sensirion_i2c_write_data>
 800a01c:	0003      	movs	r3, r0
 800a01e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a020:	1d3b      	adds	r3, r7, #4
 800a022:	2200      	movs	r2, #0
 800a024:	5e9b      	ldrsh	r3, [r3, r2]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <sen5x_start_fan_cleaning+0x46>
        return error;
 800a02a:	1d3b      	adds	r3, r7, #4
 800a02c:	2200      	movs	r2, #0
 800a02e:	5e9b      	ldrsh	r3, [r3, r2]
 800a030:	e004      	b.n	800a03c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a032:	4b05      	ldr	r3, [pc, #20]	@ (800a048 <sen5x_start_fan_cleaning+0x5c>)
 800a034:	0018      	movs	r0, r3
 800a036:	f7ff fc83 	bl	8009940 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	0018      	movs	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	b003      	add	sp, #12
 800a042:	bd90      	pop	{r4, r7, pc}
 800a044:	00005607 	.word	0x00005607
 800a048:	00004e20 	.word	0x00004e20

0800a04c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	0004      	movs	r4, r0
 800a054:	0008      	movs	r0, r1
 800a056:	0011      	movs	r1, r2
 800a058:	1dbb      	adds	r3, r7, #6
 800a05a:	1c22      	adds	r2, r4, #0
 800a05c:	801a      	strh	r2, [r3, #0]
 800a05e:	1d3b      	adds	r3, r7, #4
 800a060:	1c02      	adds	r2, r0, #0
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	1cbb      	adds	r3, r7, #2
 800a066:	1c0a      	adds	r2, r1, #0
 800a068:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a06a:	2516      	movs	r5, #22
 800a06c:	197b      	adds	r3, r7, r5
 800a06e:	2200      	movs	r2, #0
 800a070:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a072:	197c      	adds	r4, r7, r5
 800a074:	4a25      	ldr	r2, [pc, #148]	@ (800a10c <sen5x_set_temperature_offset_parameters+0xc0>)
 800a076:	197b      	adds	r3, r7, r5
 800a078:	8819      	ldrh	r1, [r3, #0]
 800a07a:	2608      	movs	r6, #8
 800a07c:	19bb      	adds	r3, r7, r6
 800a07e:	0018      	movs	r0, r3
 800a080:	f001 f9a6 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a084:	0003      	movs	r3, r0
 800a086:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a088:	197c      	adds	r4, r7, r5
 800a08a:	1dbb      	adds	r3, r7, #6
 800a08c:	2200      	movs	r2, #0
 800a08e:	5e9a      	ldrsh	r2, [r3, r2]
 800a090:	197b      	adds	r3, r7, r5
 800a092:	8819      	ldrh	r1, [r3, #0]
 800a094:	19bb      	adds	r3, r7, r6
 800a096:	0018      	movs	r0, r3
 800a098:	f001 fa05 	bl	800b4a6 <sensirion_i2c_add_int16_t_to_buffer>
 800a09c:	0003      	movs	r3, r0
 800a09e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a0a0:	197c      	adds	r4, r7, r5
 800a0a2:	1d3b      	adds	r3, r7, #4
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	5e9a      	ldrsh	r2, [r3, r2]
 800a0a8:	197b      	adds	r3, r7, r5
 800a0aa:	8819      	ldrh	r1, [r3, #0]
 800a0ac:	19bb      	adds	r3, r7, r6
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f001 f9f9 	bl	800b4a6 <sensirion_i2c_add_int16_t_to_buffer>
 800a0b4:	0003      	movs	r3, r0
 800a0b6:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a0b8:	197c      	adds	r4, r7, r5
 800a0ba:	1cbb      	adds	r3, r7, #2
 800a0bc:	881a      	ldrh	r2, [r3, #0]
 800a0be:	197b      	adds	r3, r7, r5
 800a0c0:	8819      	ldrh	r1, [r3, #0]
 800a0c2:	19bb      	adds	r3, r7, r6
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f001 f9af 	bl	800b428 <sensirion_i2c_add_uint16_t_to_buffer>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a0ce:	2214      	movs	r2, #20
 800a0d0:	18bc      	adds	r4, r7, r2
 800a0d2:	197b      	adds	r3, r7, r5
 800a0d4:	881a      	ldrh	r2, [r3, #0]
 800a0d6:	19bb      	adds	r3, r7, r6
 800a0d8:	0019      	movs	r1, r3
 800a0da:	2069      	movs	r0, #105	@ 0x69
 800a0dc:	f001 f9fc 	bl	800b4d8 <sensirion_i2c_write_data>
 800a0e0:	0003      	movs	r3, r0
 800a0e2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a0e4:	2214      	movs	r2, #20
 800a0e6:	18bb      	adds	r3, r7, r2
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	5e5b      	ldrsh	r3, [r3, r1]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a0f0:	18bb      	adds	r3, r7, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	5e9b      	ldrsh	r3, [r3, r2]
 800a0f6:	e004      	b.n	800a102 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a0f8:	4b05      	ldr	r3, [pc, #20]	@ (800a110 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f7ff fc20 	bl	8009940 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a100:	2300      	movs	r3, #0
}
 800a102:	0018      	movs	r0, r3
 800a104:	46bd      	mov	sp, r7
 800a106:	b007      	add	sp, #28
 800a108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a10a:	46c0      	nop			@ (mov r8, r8)
 800a10c:	000060b2 	.word	0x000060b2
 800a110:	00004e20 	.word	0x00004e20

0800a114 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	b091      	sub	sp, #68	@ 0x44
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	000a      	movs	r2, r1
 800a11e:	1cfb      	adds	r3, r7, #3
 800a120:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a122:	253e      	movs	r5, #62	@ 0x3e
 800a124:	197b      	adds	r3, r7, r5
 800a126:	2200      	movs	r2, #0
 800a128:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a12a:	197c      	adds	r4, r7, r5
 800a12c:	4a22      	ldr	r2, [pc, #136]	@ (800a1b8 <sen5x_get_product_name+0xa4>)
 800a12e:	197b      	adds	r3, r7, r5
 800a130:	8819      	ldrh	r1, [r3, #0]
 800a132:	230c      	movs	r3, #12
 800a134:	18fb      	adds	r3, r7, r3
 800a136:	0018      	movs	r0, r3
 800a138:	f001 f94a 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a13c:	0003      	movs	r3, r0
 800a13e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a140:	263c      	movs	r6, #60	@ 0x3c
 800a142:	19bc      	adds	r4, r7, r6
 800a144:	197b      	adds	r3, r7, r5
 800a146:	881a      	ldrh	r2, [r3, #0]
 800a148:	230c      	movs	r3, #12
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	0019      	movs	r1, r3
 800a14e:	2069      	movs	r0, #105	@ 0x69
 800a150:	f001 f9c2 	bl	800b4d8 <sensirion_i2c_write_data>
 800a154:	0003      	movs	r3, r0
 800a156:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a158:	19bb      	adds	r3, r7, r6
 800a15a:	2200      	movs	r2, #0
 800a15c:	5e9b      	ldrsh	r3, [r3, r2]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <sen5x_get_product_name+0x56>
        return error;
 800a162:	19bb      	adds	r3, r7, r6
 800a164:	2200      	movs	r2, #0
 800a166:	5e9b      	ldrsh	r3, [r3, r2]
 800a168:	e021      	b.n	800a1ae <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a16a:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <sen5x_get_product_name+0xa8>)
 800a16c:	0018      	movs	r0, r3
 800a16e:	f7ff fbe7 	bl	8009940 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a172:	253c      	movs	r5, #60	@ 0x3c
 800a174:	197c      	adds	r4, r7, r5
 800a176:	230c      	movs	r3, #12
 800a178:	18fb      	adds	r3, r7, r3
 800a17a:	2220      	movs	r2, #32
 800a17c:	0019      	movs	r1, r3
 800a17e:	2069      	movs	r0, #105	@ 0x69
 800a180:	f001 f9c2 	bl	800b508 <sensirion_i2c_read_data_inplace>
 800a184:	0003      	movs	r3, r0
 800a186:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a188:	197b      	adds	r3, r7, r5
 800a18a:	2200      	movs	r2, #0
 800a18c:	5e9b      	ldrsh	r3, [r3, r2]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <sen5x_get_product_name+0x86>
        return error;
 800a192:	197b      	adds	r3, r7, r5
 800a194:	2200      	movs	r2, #0
 800a196:	5e9b      	ldrsh	r3, [r3, r2]
 800a198:	e009      	b.n	800a1ae <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a19a:	1cfb      	adds	r3, r7, #3
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f000 f988 	bl	800a4bc <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b011      	add	sp, #68	@ 0x44
 800a1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b6:	46c0      	nop			@ (mov r8, r8)
 800a1b8:	0000d014 	.word	0x0000d014
 800a1bc:	0000c350 	.word	0x0000c350

0800a1c0 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1c2:	b091      	sub	sp, #68	@ 0x44
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	000a      	movs	r2, r1
 800a1ca:	1cfb      	adds	r3, r7, #3
 800a1cc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a1ce:	253e      	movs	r5, #62	@ 0x3e
 800a1d0:	197b      	adds	r3, r7, r5
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a1d6:	197c      	adds	r4, r7, r5
 800a1d8:	4a22      	ldr	r2, [pc, #136]	@ (800a264 <sen5x_get_serial_number+0xa4>)
 800a1da:	197b      	adds	r3, r7, r5
 800a1dc:	8819      	ldrh	r1, [r3, #0]
 800a1de:	230c      	movs	r3, #12
 800a1e0:	18fb      	adds	r3, r7, r3
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f001 f8f4 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a1e8:	0003      	movs	r3, r0
 800a1ea:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1ec:	263c      	movs	r6, #60	@ 0x3c
 800a1ee:	19bc      	adds	r4, r7, r6
 800a1f0:	197b      	adds	r3, r7, r5
 800a1f2:	881a      	ldrh	r2, [r3, #0]
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	18fb      	adds	r3, r7, r3
 800a1f8:	0019      	movs	r1, r3
 800a1fa:	2069      	movs	r0, #105	@ 0x69
 800a1fc:	f001 f96c 	bl	800b4d8 <sensirion_i2c_write_data>
 800a200:	0003      	movs	r3, r0
 800a202:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a204:	19bb      	adds	r3, r7, r6
 800a206:	2200      	movs	r2, #0
 800a208:	5e9b      	ldrsh	r3, [r3, r2]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <sen5x_get_serial_number+0x56>
        return error;
 800a20e:	19bb      	adds	r3, r7, r6
 800a210:	2200      	movs	r2, #0
 800a212:	5e9b      	ldrsh	r3, [r3, r2]
 800a214:	e021      	b.n	800a25a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a216:	4b14      	ldr	r3, [pc, #80]	@ (800a268 <sen5x_get_serial_number+0xa8>)
 800a218:	0018      	movs	r0, r3
 800a21a:	f7ff fb91 	bl	8009940 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a21e:	253c      	movs	r5, #60	@ 0x3c
 800a220:	197c      	adds	r4, r7, r5
 800a222:	230c      	movs	r3, #12
 800a224:	18fb      	adds	r3, r7, r3
 800a226:	2220      	movs	r2, #32
 800a228:	0019      	movs	r1, r3
 800a22a:	2069      	movs	r0, #105	@ 0x69
 800a22c:	f001 f96c 	bl	800b508 <sensirion_i2c_read_data_inplace>
 800a230:	0003      	movs	r3, r0
 800a232:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a234:	197b      	adds	r3, r7, r5
 800a236:	2200      	movs	r2, #0
 800a238:	5e9b      	ldrsh	r3, [r3, r2]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <sen5x_get_serial_number+0x86>
        return error;
 800a23e:	197b      	adds	r3, r7, r5
 800a240:	2200      	movs	r2, #0
 800a242:	5e9b      	ldrsh	r3, [r3, r2]
 800a244:	e009      	b.n	800a25a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a246:	1cfb      	adds	r3, r7, #3
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	230c      	movs	r3, #12
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	0018      	movs	r0, r3
 800a254:	f000 f932 	bl	800a4bc <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	0018      	movs	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	b011      	add	sp, #68	@ 0x44
 800a260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a262:	46c0      	nop			@ (mov r8, r8)
 800a264:	0000d033 	.word	0x0000d033
 800a268:	0000c350 	.word	0x0000c350

0800a26c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26e:	b089      	sub	sp, #36	@ 0x24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a27a:	251e      	movs	r5, #30
 800a27c:	197b      	adds	r3, r7, r5
 800a27e:	2200      	movs	r2, #0
 800a280:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a282:	197c      	adds	r4, r7, r5
 800a284:	23d1      	movs	r3, #209	@ 0xd1
 800a286:	021a      	lsls	r2, r3, #8
 800a288:	197b      	adds	r3, r7, r5
 800a28a:	8819      	ldrh	r1, [r3, #0]
 800a28c:	2310      	movs	r3, #16
 800a28e:	18fb      	adds	r3, r7, r3
 800a290:	0018      	movs	r0, r3
 800a292:	f001 f89d 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a296:	0003      	movs	r3, r0
 800a298:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a29a:	261c      	movs	r6, #28
 800a29c:	19bc      	adds	r4, r7, r6
 800a29e:	197b      	adds	r3, r7, r5
 800a2a0:	881a      	ldrh	r2, [r3, #0]
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	18fb      	adds	r3, r7, r3
 800a2a6:	0019      	movs	r1, r3
 800a2a8:	2069      	movs	r0, #105	@ 0x69
 800a2aa:	f001 f915 	bl	800b4d8 <sensirion_i2c_write_data>
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2b2:	19bb      	adds	r3, r7, r6
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	5e9b      	ldrsh	r3, [r3, r2]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <sen5x_get_version+0x58>
        return error;
 800a2bc:	19bb      	adds	r3, r7, r6
 800a2be:	2200      	movs	r2, #0
 800a2c0:	5e9b      	ldrsh	r3, [r3, r2]
 800a2c2:	e038      	b.n	800a336 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a2c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a340 <sen5x_get_version+0xd4>)
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f7ff fb3a 	bl	8009940 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a2cc:	251c      	movs	r5, #28
 800a2ce:	197c      	adds	r4, r7, r5
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	0019      	movs	r1, r3
 800a2d8:	2069      	movs	r0, #105	@ 0x69
 800a2da:	f001 f915 	bl	800b508 <sensirion_i2c_read_data_inplace>
 800a2de:	0003      	movs	r3, r0
 800a2e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2e2:	197b      	adds	r3, r7, r5
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	5e9b      	ldrsh	r3, [r3, r2]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <sen5x_get_version+0x88>
        return error;
 800a2ec:	197b      	adds	r3, r7, r5
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	5e9b      	ldrsh	r3, [r3, r2]
 800a2f2:	e020      	b.n	800a336 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a2f4:	2110      	movs	r1, #16
 800a2f6:	187b      	adds	r3, r7, r1
 800a2f8:	781a      	ldrb	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a2fe:	187b      	adds	r3, r7, r1
 800a300:	785a      	ldrb	r2, [r3, #1]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a306:	187b      	adds	r3, r7, r1
 800a308:	789b      	ldrb	r3, [r3, #2]
 800a30a:	1e5a      	subs	r2, r3, #1
 800a30c:	4193      	sbcs	r3, r2
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a314:	187b      	adds	r3, r7, r1
 800a316:	78da      	ldrb	r2, [r3, #3]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a31c:	187b      	adds	r3, r7, r1
 800a31e:	791a      	ldrb	r2, [r3, #4]
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a324:	187b      	adds	r3, r7, r1
 800a326:	795a      	ldrb	r2, [r3, #5]
 800a328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a32c:	187b      	adds	r3, r7, r1
 800a32e:	799a      	ldrb	r2, [r3, #6]
 800a330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a332:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a334:	2300      	movs	r3, #0
}
 800a336:	0018      	movs	r0, r3
 800a338:	46bd      	mov	sp, r7
 800a33a:	b009      	add	sp, #36	@ 0x24
 800a33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33e:	46c0      	nop			@ (mov r8, r8)
 800a340:	00004e20 	.word	0x00004e20

0800a344 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a34c:	2516      	movs	r5, #22
 800a34e:	197b      	adds	r3, r7, r5
 800a350:	2200      	movs	r2, #0
 800a352:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a354:	197c      	adds	r4, r7, r5
 800a356:	4a22      	ldr	r2, [pc, #136]	@ (800a3e0 <sen5x_read_device_status+0x9c>)
 800a358:	197b      	adds	r3, r7, r5
 800a35a:	8819      	ldrh	r1, [r3, #0]
 800a35c:	230c      	movs	r3, #12
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	0018      	movs	r0, r3
 800a362:	f001 f835 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a366:	0003      	movs	r3, r0
 800a368:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a36a:	2614      	movs	r6, #20
 800a36c:	19bc      	adds	r4, r7, r6
 800a36e:	197b      	adds	r3, r7, r5
 800a370:	881a      	ldrh	r2, [r3, #0]
 800a372:	230c      	movs	r3, #12
 800a374:	18fb      	adds	r3, r7, r3
 800a376:	0019      	movs	r1, r3
 800a378:	2069      	movs	r0, #105	@ 0x69
 800a37a:	f001 f8ad 	bl	800b4d8 <sensirion_i2c_write_data>
 800a37e:	0003      	movs	r3, r0
 800a380:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a382:	19bb      	adds	r3, r7, r6
 800a384:	2200      	movs	r2, #0
 800a386:	5e9b      	ldrsh	r3, [r3, r2]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <sen5x_read_device_status+0x50>
        return error;
 800a38c:	19bb      	adds	r3, r7, r6
 800a38e:	2200      	movs	r2, #0
 800a390:	5e9b      	ldrsh	r3, [r3, r2]
 800a392:	e020      	b.n	800a3d6 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a394:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <sen5x_read_device_status+0xa0>)
 800a396:	0018      	movs	r0, r3
 800a398:	f7ff fad2 	bl	8009940 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a39c:	2514      	movs	r5, #20
 800a39e:	197c      	adds	r4, r7, r5
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	2069      	movs	r0, #105	@ 0x69
 800a3aa:	f001 f8ad 	bl	800b508 <sensirion_i2c_read_data_inplace>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3b2:	197b      	adds	r3, r7, r5
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	5e9b      	ldrsh	r3, [r3, r2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <sen5x_read_device_status+0x80>
        return error;
 800a3bc:	197b      	adds	r3, r7, r5
 800a3be:	2200      	movs	r2, #0
 800a3c0:	5e9b      	ldrsh	r3, [r3, r2]
 800a3c2:	e008      	b.n	800a3d6 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	18fb      	adds	r3, r7, r3
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 f850 	bl	800a46e <sensirion_common_bytes_to_uint32_t>
 800a3ce:	0002      	movs	r2, r0
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	b007      	add	sp, #28
 800a3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3de:	46c0      	nop			@ (mov r8, r8)
 800a3e0:	0000d206 	.word	0x0000d206
 800a3e4:	00004e20 	.word	0x00004e20

0800a3e8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a3ee:	1dbb      	adds	r3, r7, #6
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a3f4:	1dbc      	adds	r4, r7, #6
 800a3f6:	4a12      	ldr	r2, [pc, #72]	@ (800a440 <sen5x_device_reset+0x58>)
 800a3f8:	1dbb      	adds	r3, r7, #6
 800a3fa:	8819      	ldrh	r1, [r3, #0]
 800a3fc:	003b      	movs	r3, r7
 800a3fe:	0018      	movs	r0, r3
 800a400:	f000 ffe6 	bl	800b3d0 <sensirion_i2c_add_command_to_buffer>
 800a404:	0003      	movs	r3, r0
 800a406:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a408:	1d3c      	adds	r4, r7, #4
 800a40a:	1dbb      	adds	r3, r7, #6
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	003b      	movs	r3, r7
 800a410:	0019      	movs	r1, r3
 800a412:	2069      	movs	r0, #105	@ 0x69
 800a414:	f001 f860 	bl	800b4d8 <sensirion_i2c_write_data>
 800a418:	0003      	movs	r3, r0
 800a41a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a41c:	1d3b      	adds	r3, r7, #4
 800a41e:	2200      	movs	r2, #0
 800a420:	5e9b      	ldrsh	r3, [r3, r2]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <sen5x_device_reset+0x46>
        return error;
 800a426:	1d3b      	adds	r3, r7, #4
 800a428:	2200      	movs	r2, #0
 800a42a:	5e9b      	ldrsh	r3, [r3, r2]
 800a42c:	e004      	b.n	800a438 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a42e:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <sen5x_device_reset+0x5c>)
 800a430:	0018      	movs	r0, r3
 800a432:	f7ff fa85 	bl	8009940 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a436:	2300      	movs	r3, #0
}
 800a438:	0018      	movs	r0, r3
 800a43a:	46bd      	mov	sp, r7
 800a43c:	b003      	add	sp, #12
 800a43e:	bd90      	pop	{r4, r7, pc}
 800a440:	0000d304 	.word	0x0000d304
 800a444:	00030d40 	.word	0x00030d40

0800a448 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	b21a      	sxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3301      	adds	r3, #1
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	b21b      	sxth	r3, r3
 800a460:	4313      	orrs	r3, r2
 800a462:	b21b      	sxth	r3, r3
 800a464:	b29b      	uxth	r3, r3
}
 800a466:	0018      	movs	r0, r3
 800a468:	46bd      	mov	sp, r7
 800a46a:	b002      	add	sp, #8
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	061a      	lsls	r2, r3, #24
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3301      	adds	r3, #1
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	041b      	lsls	r3, r3, #16
 800a484:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3302      	adds	r3, #2
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a48e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	3203      	adds	r2, #3
 800a494:	7812      	ldrb	r2, [r2, #0]
 800a496:	4313      	orrs	r3, r2
}
 800a498:	0018      	movs	r0, r3
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b002      	add	sp, #8
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	f7ff ffcc 	bl	800a448 <sensirion_common_bytes_to_uint16_t>
 800a4b0:	0003      	movs	r3, r0
 800a4b2:	b21b      	sxth	r3, r3
}
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b002      	add	sp, #8
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	1dbb      	adds	r3, r7, #6
 800a4c8:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a4ca:	2316      	movs	r3, #22
 800a4cc:	18fb      	adds	r3, r7, r3
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	801a      	strh	r2, [r3, #0]
 800a4d2:	e00f      	b.n	800a4f4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a4d4:	2016      	movs	r0, #22
 800a4d6:	183b      	adds	r3, r7, r0
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	18d2      	adds	r2, r2, r3
 800a4de:	183b      	adds	r3, r7, r0
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	18cb      	adds	r3, r1, r3
 800a4e6:	7812      	ldrb	r2, [r2, #0]
 800a4e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a4ea:	183b      	adds	r3, r7, r0
 800a4ec:	881a      	ldrh	r2, [r3, #0]
 800a4ee:	183b      	adds	r3, r7, r0
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	801a      	strh	r2, [r3, #0]
 800a4f4:	2316      	movs	r3, #22
 800a4f6:	18fa      	adds	r2, r7, r3
 800a4f8:	1dbb      	adds	r3, r7, #6
 800a4fa:	8812      	ldrh	r2, [r2, #0]
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d3e8      	bcc.n	800a4d4 <sensirion_common_copy_bytes+0x18>
    }
}
 800a502:	46c0      	nop			@ (mov r8, r8)
 800a504:	46c0      	nop			@ (mov r8, r8)
 800a506:	46bd      	mov	sp, r7
 800a508:	b006      	add	sp, #24
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d113      	bne.n	800a552 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	22fe      	movs	r2, #254	@ 0xfe
 800a52e:	0592      	lsls	r2, r2, #22
 800a530:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a0 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a536:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a4 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a53c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4a19      	ldr	r2, [pc, #100]	@ (800a5a8 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a542:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4a19      	ldr	r2, [pc, #100]	@ (800a5ac <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a548:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4a18      	ldr	r2, [pc, #96]	@ (800a5b0 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a54e:	61da      	str	r2, [r3, #28]
 800a550:	e011      	b.n	800a576 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4a17      	ldr	r2, [pc, #92]	@ (800a5b4 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a556:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4a17      	ldr	r2, [pc, #92]	@ (800a5b8 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a55c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4a16      	ldr	r2, [pc, #88]	@ (800a5bc <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a562:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4a16      	ldr	r2, [pc, #88]	@ (800a5c0 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a568:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4a15      	ldr	r2, [pc, #84]	@ (800a5c4 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a56e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4a15      	ldr	r2, [pc, #84]	@ (800a5c8 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a574:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4a14      	ldr	r2, [pc, #80]	@ (800a5cc <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a57a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a14      	ldr	r2, [pc, #80]	@ (800a5d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a580:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4a12      	ldr	r2, [pc, #72]	@ (800a5d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a586:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4a12      	ldr	r2, [pc, #72]	@ (800a5d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a58c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	0018      	movs	r0, r3
 800a592:	f000 f833 	bl	800a5fc <GasIndexAlgorithm_reset>
}
 800a596:	46c0      	nop			@ (mov r8, r8)
 800a598:	46bd      	mov	sp, r7
 800a59a:	b004      	add	sp, #16
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	46c0      	nop			@ (mov r8, r8)
 800a5a0:	00002710 	.word	0x00002710
 800a5a4:	44340000 	.word	0x44340000
 800a5a8:	46859800 	.word	0x46859800
 800a5ac:	46a05000 	.word	0x46a05000
 800a5b0:	41f00000 	.word	0x41f00000
 800a5b4:	42c80000 	.word	0x42c80000
 800a5b8:	00004e20 	.word	0x00004e20
 800a5bc:	43340000 	.word	0x43340000
 800a5c0:	4528c000 	.word	0x4528c000
 800a5c4:	45a32000 	.word	0x45a32000
 800a5c8:	43aa0000 	.word	0x43aa0000
 800a5cc:	43660000 	.word	0x43660000
 800a5d0:	41400000 	.word	0x41400000
 800a5d4:	42480000 	.word	0x42480000

0800a5d8 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a5e2:	4a05      	ldr	r2, [pc, #20]	@ (800a5f8 <GasIndexAlgorithm_init+0x20>)
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f7ff ff8f 	bl	800a50c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	b002      	add	sp, #8
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	44610000 	.word	0x44610000

0800a5fc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	0018      	movs	r0, r3
 800a61a:	f000 f805 	bl	800a628 <GasIndexAlgorithm__init_instances>
}
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a628:	b590      	push	{r4, r7, lr}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	0018      	movs	r0, r3
 800a634:	f000 f8e8 	bl	800a808 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	0018      	movs	r0, r3
 800a63c:	f000 f9a6 	bl	800a98c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a640:	1c04      	adds	r4, r0, #0
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	0018      	movs	r0, r3
 800a646:	f000 f9ab 	bl	800a9a0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a64a:	1c02      	adds	r2, r0, #0
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	1c21      	adds	r1, r4, #0
 800a650:	0018      	movs	r0, r3
 800a652:	f000 fc3b 	bl	800aecc <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d107      	bne.n	800a66e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a65e:	23fe      	movs	r3, #254	@ 0xfe
 800a660:	059b      	lsls	r3, r3, #22
 800a662:	4a0a      	ldr	r2, [pc, #40]	@ (800a68c <GasIndexAlgorithm__init_instances+0x64>)
 800a664:	490a      	ldr	r1, [pc, #40]	@ (800a690 <GasIndexAlgorithm__init_instances+0x68>)
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fc86 	bl	800af78 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a66c:	e005      	b.n	800a67a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a66e:	4b09      	ldr	r3, [pc, #36]	@ (800a694 <GasIndexAlgorithm__init_instances+0x6c>)
 800a670:	4a09      	ldr	r2, [pc, #36]	@ (800a698 <GasIndexAlgorithm__init_instances+0x70>)
 800a672:	490a      	ldr	r1, [pc, #40]	@ (800a69c <GasIndexAlgorithm__init_instances+0x74>)
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fc7f 	bl	800af78 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	0018      	movs	r0, r3
 800a67e:	f000 fd35 	bl	800b0ec <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a682:	46c0      	nop			@ (mov r8, r8)
 800a684:	46bd      	mov	sp, r7
 800a686:	b003      	add	sp, #12
 800a688:	bd90      	pop	{r4, r7, pc}
 800a68a:	46c0      	nop			@ (mov r8, r8)
 800a68c:	bc257a78 	.word	0xbc257a78
 800a690:	44198000 	.word	0x44198000
 800a694:	42c80000 	.word	0x42c80000
 800a698:	bbd4fdf4 	.word	0xbbd4fdf4
 800a69c:	43550000 	.word	0x43550000

0800a6a0 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6b0:	4952      	ldr	r1, [pc, #328]	@ (800a7fc <GasIndexAlgorithm_process+0x15c>)
 800a6b2:	1c18      	adds	r0, r3, #0
 800a6b4:	f7f5 ff46 	bl	8000544 <__aeabi_fcmple>
 800a6b8:	1e03      	subs	r3, r0, #0
 800a6ba:	d00c      	beq.n	800a6d6 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	1c19      	adds	r1, r3, #0
 800a6c6:	1c10      	adds	r0, r2, #0
 800a6c8:	f7f6 f8fa 	bl	80008c0 <__aeabi_fadd>
 800a6cc:	1c03      	adds	r3, r0, #0
 800a6ce:	1c1a      	adds	r2, r3, #0
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6d4:	e080      	b.n	800a7d8 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dd25      	ble.n	800a728 <GasIndexAlgorithm_process+0x88>
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4a48      	ldr	r2, [pc, #288]	@ (800a800 <GasIndexAlgorithm_process+0x160>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	dc21      	bgt.n	800a728 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	dc04      	bgt.n	800a6f8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	60bb      	str	r3, [r7, #8]
 800a6f6:	e00d      	b.n	800a714 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	4a41      	ldr	r2, [pc, #260]	@ (800a804 <GasIndexAlgorithm_process+0x164>)
 800a6fe:	4694      	mov	ip, r2
 800a700:	4463      	add	r3, ip
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	dd05      	ble.n	800a714 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	4a3d      	ldr	r2, [pc, #244]	@ (800a804 <GasIndexAlgorithm_process+0x164>)
 800a70e:	4694      	mov	ip, r2
 800a710:	4463      	add	r3, ip
 800a712:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	0018      	movs	r0, r3
 800a71e:	f7f6 ff57 	bl	80015d0 <__aeabi_i2f>
 800a722:	1c02      	adds	r2, r0, #0
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	0018      	movs	r0, r3
 800a734:	f000 f945 	bl	800a9c2 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a738:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a73a:	d014      	beq.n	800a766 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	1c11      	adds	r1, r2, #0
 800a744:	0018      	movs	r0, r3
 800a746:	f000 fbd1 	bl	800aeec <GasIndexAlgorithm__mox_model__process>
 800a74a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	1c11      	adds	r1, r2, #0
 800a758:	0018      	movs	r0, r3
 800a75a:	f000 fc25 	bl	800afa8 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a75e:	1c02      	adds	r2, r0, #0
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	639a      	str	r2, [r3, #56]	@ 0x38
 800a764:	e003      	b.n	800a76e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1c11      	adds	r1, r2, #0
 800a776:	0018      	movs	r0, r3
 800a778:	f000 fcec 	bl	800b154 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a77c:	1c02      	adds	r2, r0, #0
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a786:	21fc      	movs	r1, #252	@ 0xfc
 800a788:	0589      	lsls	r1, r1, #22
 800a78a:	1c18      	adds	r0, r3, #0
 800a78c:	f7f5 fed0 	bl	8000530 <__aeabi_fcmplt>
 800a790:	1e03      	subs	r3, r0, #0
 800a792:	d003      	beq.n	800a79c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	22fc      	movs	r2, #252	@ 0xfc
 800a798:	0592      	lsls	r2, r2, #22
 800a79a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	1c18      	adds	r0, r3, #0
 800a7a4:	f7f5 fed8 	bl	8000558 <__aeabi_fcmpgt>
 800a7a8:	1e03      	subs	r3, r0, #0
 800a7aa:	d015      	beq.n	800a7d8 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	1c11      	adds	r1, r2, #0
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f000 fa4f 	bl	800ac58 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f000 f8e5 	bl	800a98c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a7c2:	1c04      	adds	r4, r0, #0
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	f000 f8ea 	bl	800a9a0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a7cc:	1c02      	adds	r2, r0, #0
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	1c21      	adds	r1, r4, #0
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f000 fb7a 	bl	800aecc <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7dc:	21fc      	movs	r1, #252	@ 0xfc
 800a7de:	0589      	lsls	r1, r1, #22
 800a7e0:	1c18      	adds	r0, r3, #0
 800a7e2:	f7f6 f86d 	bl	80008c0 <__aeabi_fadd>
 800a7e6:	1c03      	adds	r3, r0, #0
 800a7e8:	1c18      	adds	r0, r3, #0
 800a7ea:	f7f6 fed1 	bl	8001590 <__aeabi_f2iz>
 800a7ee:	0002      	movs	r2, r0
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
    return;
 800a7f4:	46c0      	nop			@ (mov r8, r8)
}
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b005      	add	sp, #20
 800a7fa:	bd90      	pop	{r4, r7, pc}
 800a7fc:	42340000 	.word	0x42340000
 800a800:	0000fde7 	.word	0x0000fde7
 800a804:	00007fff 	.word	0x00007fff

0800a808 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a808:	b5b0      	push	{r4, r5, r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	223c      	movs	r2, #60	@ 0x3c
 800a814:	2100      	movs	r1, #0
 800a816:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	4952      	ldr	r1, [pc, #328]	@ (800a97c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a832:	1c18      	adds	r0, r3, #0
 800a834:	f7f6 f9ce 	bl	8000bd4 <__aeabi_fdiv>
 800a838:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a83a:	2188      	movs	r1, #136	@ 0x88
 800a83c:	05c9      	lsls	r1, r1, #23
 800a83e:	1c18      	adds	r0, r3, #0
 800a840:	f7f6 fbae 	bl	8000fa0 <__aeabi_fmul>
 800a844:	1c03      	adds	r3, r0, #0
 800a846:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	494a      	ldr	r1, [pc, #296]	@ (800a97c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a852:	1c18      	adds	r0, r3, #0
 800a854:	f7f6 f9be 	bl	8000bd4 <__aeabi_fdiv>
 800a858:	1c03      	adds	r3, r0, #0
 800a85a:	1c19      	adds	r1, r3, #0
 800a85c:	1c20      	adds	r0, r4, #0
 800a85e:	f7f6 f82f 	bl	80008c0 <__aeabi_fadd>
 800a862:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a864:	1c19      	adds	r1, r3, #0
 800a866:	1c28      	adds	r0, r5, #0
 800a868:	f7f6 f9b4 	bl	8000bd4 <__aeabi_fdiv>
 800a86c:	1c03      	adds	r3, r0, #0
 800a86e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4940      	ldr	r1, [pc, #256]	@ (800a97c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a87a:	1c18      	adds	r0, r3, #0
 800a87c:	f7f6 f9aa 	bl	8000bd4 <__aeabi_fdiv>
 800a880:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a882:	2185      	movs	r1, #133	@ 0x85
 800a884:	05c9      	lsls	r1, r1, #23
 800a886:	1c18      	adds	r0, r3, #0
 800a888:	f7f6 fb8a 	bl	8000fa0 <__aeabi_fmul>
 800a88c:	1c03      	adds	r3, r0, #0
 800a88e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4938      	ldr	r1, [pc, #224]	@ (800a97c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a89a:	1c18      	adds	r0, r3, #0
 800a89c:	f7f6 f99a 	bl	8000bd4 <__aeabi_fdiv>
 800a8a0:	1c03      	adds	r3, r0, #0
 800a8a2:	1c19      	adds	r1, r3, #0
 800a8a4:	1c20      	adds	r0, r4, #0
 800a8a6:	f7f6 f80b 	bl	80008c0 <__aeabi_fadd>
 800a8aa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a8ac:	1c19      	adds	r1, r3, #0
 800a8ae:	1c28      	adds	r0, r5, #0
 800a8b0:	f7f6 f990 	bl	8000bd4 <__aeabi_fdiv>
 800a8b4:	1c03      	adds	r3, r0, #0
 800a8b6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d118      	bne.n	800a8f6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8c8:	2188      	movs	r1, #136	@ 0x88
 800a8ca:	05c9      	lsls	r1, r1, #23
 800a8cc:	1c18      	adds	r0, r3, #0
 800a8ce:	f7f6 fb67 	bl	8000fa0 <__aeabi_fmul>
 800a8d2:	1c03      	adds	r3, r0, #0
 800a8d4:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a8da:	4929      	ldr	r1, [pc, #164]	@ (800a980 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a8dc:	1c18      	adds	r0, r3, #0
 800a8de:	f7f5 ffef 	bl	80008c0 <__aeabi_fadd>
 800a8e2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a8e4:	1c19      	adds	r1, r3, #0
 800a8e6:	1c20      	adds	r0, r4, #0
 800a8e8:	f7f6 f974 	bl	8000bd4 <__aeabi_fdiv>
 800a8ec:	1c03      	adds	r3, r0, #0
 800a8ee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8f4:	e017      	b.n	800a926 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8fa:	2188      	movs	r1, #136	@ 0x88
 800a8fc:	05c9      	lsls	r1, r1, #23
 800a8fe:	1c18      	adds	r0, r3, #0
 800a900:	f7f6 fb4e 	bl	8000fa0 <__aeabi_fmul>
 800a904:	1c03      	adds	r3, r0, #0
 800a906:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a90c:	491d      	ldr	r1, [pc, #116]	@ (800a984 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a90e:	1c18      	adds	r0, r3, #0
 800a910:	f7f5 ffd6 	bl	80008c0 <__aeabi_fadd>
 800a914:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a916:	1c19      	adds	r1, r3, #0
 800a918:	1c20      	adds	r0, r4, #0
 800a91a:	f7f6 f95b 	bl	8000bd4 <__aeabi_fdiv>
 800a91e:	1c03      	adds	r3, r0, #0
 800a920:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a92a:	2185      	movs	r1, #133	@ 0x85
 800a92c:	05c9      	lsls	r1, r1, #23
 800a92e:	1c18      	adds	r0, r3, #0
 800a930:	f7f6 fb36 	bl	8000fa0 <__aeabi_fmul>
 800a934:	1c03      	adds	r3, r0, #0
 800a936:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4912      	ldr	r1, [pc, #72]	@ (800a988 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a93e:	1c18      	adds	r0, r3, #0
 800a940:	f7f5 ffbe 	bl	80008c0 <__aeabi_fadd>
 800a944:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a946:	1c19      	adds	r1, r3, #0
 800a948:	1c20      	adds	r0, r4, #0
 800a94a:	f7f6 f943 	bl	8000bd4 <__aeabi_fdiv>
 800a94e:	1c03      	adds	r3, r0, #0
 800a950:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a974:	46c0      	nop			@ (mov r8, r8)
 800a976:	46bd      	mov	sp, r7
 800a978:	b002      	add	sp, #8
 800a97a:	bdb0      	pop	{r4, r5, r7, pc}
 800a97c:	45610000 	.word	0x45610000
 800a980:	44960000 	.word	0x44960000
 800a984:	41a00000 	.word	0x41a00000
 800a988:	451c4000 	.word	0x451c4000

0800a98c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a998:	1c18      	adds	r0, r3, #0
 800a99a:	46bd      	mov	sp, r7
 800a99c:	b002      	add	sp, #8
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a9b0:	1c19      	adds	r1, r3, #0
 800a9b2:	1c10      	adds	r0, r2, #0
 800a9b4:	f7f5 ff84 	bl	80008c0 <__aeabi_fadd>
 800a9b8:	1c03      	adds	r3, r0, #0
}
 800a9ba:	1c18      	adds	r0, r3, #0
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	b002      	add	sp, #8
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	223c      	movs	r2, #60	@ 0x3c
 800a9ce:	5c9b      	ldrb	r3, [r3, r2]
}
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	b002      	add	sp, #8
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a9d8:	b5b0      	push	{r4, r5, r7, lr}
 800a9da:	b08c      	sub	sp, #48	@ 0x30
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a9e4:	1c19      	adds	r1, r3, #0
 800a9e6:	4895      	ldr	r0, [pc, #596]	@ (800ac3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a9e8:	f7f6 fc18 	bl	800121c <__aeabi_fsub>
 800a9ec:	1c03      	adds	r3, r0, #0
 800a9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9f4:	1c19      	adds	r1, r3, #0
 800a9f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9f8:	f7f5 fdae 	bl	8000558 <__aeabi_fcmpgt>
 800a9fc:	1e03      	subs	r3, r0, #0
 800a9fe:	d00b      	beq.n	800aa18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aa08:	1c19      	adds	r1, r3, #0
 800aa0a:	1c10      	adds	r0, r2, #0
 800aa0c:	f7f5 ff58 	bl	80008c0 <__aeabi_fadd>
 800aa10:	1c03      	adds	r3, r0, #0
 800aa12:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa1c:	1c19      	adds	r1, r3, #0
 800aa1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa20:	f7f5 fd9a 	bl	8000558 <__aeabi_fcmpgt>
 800aa24:	1e03      	subs	r3, r0, #0
 800aa26:	d00b      	beq.n	800aa40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aa30:	1c19      	adds	r1, r3, #0
 800aa32:	1c10      	adds	r0, r2, #0
 800aa34:	f7f5 ff44 	bl	80008c0 <__aeabi_fadd>
 800aa38:	1c03      	adds	r3, r0, #0
 800aa3a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6959      	ldr	r1, [r3, #20]
 800aa44:	4a7e      	ldr	r2, [pc, #504]	@ (800ac40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 f9f1 	bl	800ae30 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	1c11      	adds	r1, r2, #0
 800aa56:	0018      	movs	r0, r3
 800aa58:	f000 f9fa 	bl	800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa5c:	1c03      	adds	r3, r0, #0
 800aa5e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa6c:	1c19      	adds	r1, r3, #0
 800aa6e:	1c10      	adds	r0, r2, #0
 800aa70:	f7f6 fbd4 	bl	800121c <__aeabi_fsub>
 800aa74:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa78:	1c18      	adds	r0, r3, #0
 800aa7a:	f7f6 fa91 	bl	8000fa0 <__aeabi_fmul>
 800aa7e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa80:	1c19      	adds	r1, r3, #0
 800aa82:	1c20      	adds	r0, r4, #0
 800aa84:	f7f5 ff1c 	bl	80008c0 <__aeabi_fadd>
 800aa88:	1c03      	adds	r3, r0, #0
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800aa94:	1c19      	adds	r1, r3, #0
 800aa96:	486b      	ldr	r0, [pc, #428]	@ (800ac44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800aa98:	f7f6 fbc0 	bl	800121c <__aeabi_fsub>
 800aa9c:	1c03      	adds	r3, r0, #0
 800aa9e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	1c11      	adds	r1, r2, #0
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	f000 f9d1 	bl	800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aaae:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aab0:	1c19      	adds	r1, r3, #0
 800aab2:	1c28      	adds	r0, r5, #0
 800aab4:	f7f6 fa74 	bl	8000fa0 <__aeabi_fmul>
 800aab8:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aaba:	1c19      	adds	r1, r3, #0
 800aabc:	1c20      	adds	r0, r4, #0
 800aabe:	f7f5 feff 	bl	80008c0 <__aeabi_fadd>
 800aac2:	1c03      	adds	r3, r0, #0
 800aac4:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aac6:	4a60      	ldr	r2, [pc, #384]	@ (800ac48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aac8:	6a39      	ldr	r1, [r7, #32]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	0018      	movs	r0, r3
 800aace:	f000 f9af 	bl	800ae30 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	1c11      	adds	r1, r2, #0
 800aada:	0018      	movs	r0, r3
 800aadc:	f000 f9b8 	bl	800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aae0:	1c03      	adds	r3, r0, #0
 800aae2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800aae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aae6:	69f8      	ldr	r0, [r7, #28]
 800aae8:	f7f6 fa5a 	bl	8000fa0 <__aeabi_fmul>
 800aaec:	1c03      	adds	r3, r0, #0
 800aaee:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6999      	ldr	r1, [r3, #24]
 800aaf8:	4a51      	ldr	r2, [pc, #324]	@ (800ac40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0018      	movs	r0, r3
 800aafe:	f000 f997 	bl	800ae30 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	1c11      	adds	r1, r2, #0
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f000 f9a0 	bl	800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab10:	1c03      	adds	r3, r0, #0
 800ab12:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ab20:	1c19      	adds	r1, r3, #0
 800ab22:	1c10      	adds	r0, r2, #0
 800ab24:	f7f6 fb7a 	bl	800121c <__aeabi_fsub>
 800ab28:	1c03      	adds	r3, r0, #0
 800ab2a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ab2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab2e:	69b8      	ldr	r0, [r7, #24]
 800ab30:	f7f6 fb74 	bl	800121c <__aeabi_fsub>
 800ab34:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ab36:	1c19      	adds	r1, r3, #0
 800ab38:	1c28      	adds	r0, r5, #0
 800ab3a:	f7f6 fa31 	bl	8000fa0 <__aeabi_fmul>
 800ab3e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800ab40:	1c19      	adds	r1, r3, #0
 800ab42:	1c20      	adds	r0, r4, #0
 800ab44:	f7f5 febc 	bl	80008c0 <__aeabi_fadd>
 800ab48:	1c03      	adds	r3, r0, #0
 800ab4a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ab54:	1c19      	adds	r1, r3, #0
 800ab56:	483b      	ldr	r0, [pc, #236]	@ (800ac44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ab58:	f7f6 fb60 	bl	800121c <__aeabi_fsub>
 800ab5c:	1c03      	adds	r3, r0, #0
 800ab5e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	1c11      	adds	r1, r2, #0
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f000 f971 	bl	800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab6e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ab70:	1c19      	adds	r1, r3, #0
 800ab72:	1c28      	adds	r0, r5, #0
 800ab74:	f7f6 fa14 	bl	8000fa0 <__aeabi_fmul>
 800ab78:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ab7a:	1c19      	adds	r1, r3, #0
 800ab7c:	1c20      	adds	r0, r4, #0
 800ab7e:	f7f5 fe9f 	bl	80008c0 <__aeabi_fadd>
 800ab82:	1c03      	adds	r3, r0, #0
 800ab84:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ab86:	4a30      	ldr	r2, [pc, #192]	@ (800ac48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ab88:	6939      	ldr	r1, [r7, #16]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	f000 f94f 	bl	800ae30 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	1c11      	adds	r1, r2, #0
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	f000 f958 	bl	800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aba0:	1c03      	adds	r3, r0, #0
 800aba2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800aba4:	6979      	ldr	r1, [r7, #20]
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7f6 f9fa 	bl	8000fa0 <__aeabi_fmul>
 800abac:	1c03      	adds	r3, r0, #0
 800abae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	4923      	ldr	r1, [pc, #140]	@ (800ac4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800abbe:	1c18      	adds	r0, r3, #0
 800abc0:	f7f6 f808 	bl	8000bd4 <__aeabi_fdiv>
 800abc4:	1c03      	adds	r3, r0, #0
 800abc6:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800abc8:	69f9      	ldr	r1, [r7, #28]
 800abca:	20fe      	movs	r0, #254	@ 0xfe
 800abcc:	0580      	lsls	r0, r0, #22
 800abce:	f7f6 fb25 	bl	800121c <__aeabi_fsub>
 800abd2:	1c03      	adds	r3, r0, #0
 800abd4:	491e      	ldr	r1, [pc, #120]	@ (800ac50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800abd6:	1c18      	adds	r0, r3, #0
 800abd8:	f7f6 f9e2 	bl	8000fa0 <__aeabi_fmul>
 800abdc:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800abde:	491d      	ldr	r1, [pc, #116]	@ (800ac54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800abe0:	1c18      	adds	r0, r3, #0
 800abe2:	f7f6 fb1b 	bl	800121c <__aeabi_fsub>
 800abe6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800abe8:	1c19      	adds	r1, r3, #0
 800abea:	1c28      	adds	r0, r5, #0
 800abec:	f7f6 f9d8 	bl	8000fa0 <__aeabi_fmul>
 800abf0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800abf2:	1c19      	adds	r1, r3, #0
 800abf4:	1c20      	adds	r0, r4, #0
 800abf6:	f7f5 fe63 	bl	80008c0 <__aeabi_fadd>
 800abfa:	1c03      	adds	r3, r0, #0
 800abfc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac06:	2100      	movs	r1, #0
 800ac08:	1c18      	adds	r0, r3, #0
 800ac0a:	f7f5 fc91 	bl	8000530 <__aeabi_fcmplt>
 800ac0e:	1e03      	subs	r3, r0, #0
 800ac10:	d002      	beq.n	800ac18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ac20:	1c19      	adds	r1, r3, #0
 800ac22:	1c10      	adds	r0, r2, #0
 800ac24:	f7f5 fc98 	bl	8000558 <__aeabi_fcmpgt>
 800ac28:	1e03      	subs	r3, r0, #0
 800ac2a:	d100      	bne.n	800ac2e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ac2c:	e002      	b.n	800ac34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ac34:	46c0      	nop			@ (mov r8, r8)
 800ac36:	46bd      	mov	sp, r7
 800ac38:	b00c      	add	sp, #48	@ 0x30
 800ac3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac3c:	46fffe00 	.word	0x46fffe00
 800ac40:	3c23d70a 	.word	0x3c23d70a
 800ac44:	43ff0000 	.word	0x43ff0000
 800ac48:	3db851ec 	.word	0x3db851ec
 800ac4c:	42700000 	.word	0x42700000
 800ac50:	3fa66666 	.word	0x3fa66666
 800ac54:	3e99999a 	.word	0x3e99999a

0800ac58 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ac58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	223c      	movs	r2, #60	@ 0x3c
 800ac66:	5c9b      	ldrb	r3, [r3, r2]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	4053      	eors	r3, r2
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00a      	beq.n	800ac88 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	223c      	movs	r2, #60	@ 0x3c
 800ac76:	2101      	movs	r1, #1
 800ac78:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ac86:	e0c8      	b.n	800ae1a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	4965      	ldr	r1, [pc, #404]	@ (800ae24 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ac8e:	1c18      	adds	r0, r3, #0
 800ac90:	f7f5 fc6c 	bl	800056c <__aeabi_fcmpge>
 800ac94:	1e03      	subs	r3, r0, #0
 800ac96:	d107      	bne.n	800aca8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac9c:	4962      	ldr	r1, [pc, #392]	@ (800ae28 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ac9e:	1c18      	adds	r0, r3, #0
 800aca0:	f7f5 fc50 	bl	8000544 <__aeabi_fcmple>
 800aca4:	1e03      	subs	r3, r0, #0
 800aca6:	d00e      	beq.n	800acc6 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800acb0:	1c19      	adds	r1, r3, #0
 800acb2:	1c10      	adds	r0, r2, #0
 800acb4:	f7f5 fe04 	bl	80008c0 <__aeabi_fadd>
 800acb8:	1c03      	adds	r3, r0, #0
 800acba:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acca:	1c19      	adds	r1, r3, #0
 800accc:	6838      	ldr	r0, [r7, #0]
 800acce:	f7f6 faa5 	bl	800121c <__aeabi_fsub>
 800acd2:	1c03      	adds	r3, r0, #0
 800acd4:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	0018      	movs	r0, r3
 800acda:	f7ff fe7d 	bl	800a9d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace2:	1c19      	adds	r1, r3, #0
 800ace4:	6838      	ldr	r0, [r7, #0]
 800ace6:	f7f6 fa99 	bl	800121c <__aeabi_fsub>
 800acea:	1c03      	adds	r3, r0, #0
 800acec:	2185      	movs	r1, #133	@ 0x85
 800acee:	05c9      	lsls	r1, r1, #23
 800acf0:	1c18      	adds	r0, r3, #0
 800acf2:	f7f5 ff6f 	bl	8000bd4 <__aeabi_fdiv>
 800acf6:	1c03      	adds	r3, r0, #0
 800acf8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800acfa:	2100      	movs	r1, #0
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7f5 fc17 	bl	8000530 <__aeabi_fcmplt>
 800ad02:	1e03      	subs	r3, r0, #0
 800ad04:	d008      	beq.n	800ad18 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	1c18      	adds	r0, r3, #0
 800ad0e:	f7f6 fa85 	bl	800121c <__aeabi_fsub>
 800ad12:	1c03      	adds	r3, r0, #0
 800ad14:	617b      	str	r3, [r7, #20]
 800ad16:	e007      	b.n	800ad28 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad1c:	1c19      	adds	r1, r3, #0
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7f5 fdce 	bl	80008c0 <__aeabi_fadd>
 800ad24:	1c03      	adds	r3, r0, #0
 800ad26:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800ad28:	23fe      	movs	r3, #254	@ 0xfe
 800ad2a:	059b      	lsls	r3, r3, #22
 800ad2c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800ad2e:	493f      	ldr	r1, [pc, #252]	@ (800ae2c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad30:	6978      	ldr	r0, [r7, #20]
 800ad32:	f7f5 fc11 	bl	8000558 <__aeabi_fcmpgt>
 800ad36:	1e03      	subs	r3, r0, #0
 800ad38:	d010      	beq.n	800ad5c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800ad3a:	493c      	ldr	r1, [pc, #240]	@ (800ae2c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad3c:	6978      	ldr	r0, [r7, #20]
 800ad3e:	f7f5 ff49 	bl	8000bd4 <__aeabi_fdiv>
 800ad42:	1c03      	adds	r3, r0, #0
 800ad44:	1c1c      	adds	r4, r3, #0
 800ad46:	4939      	ldr	r1, [pc, #228]	@ (800ae2c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad48:	6978      	ldr	r0, [r7, #20]
 800ad4a:	f7f5 ff43 	bl	8000bd4 <__aeabi_fdiv>
 800ad4e:	1c03      	adds	r3, r0, #0
 800ad50:	1c19      	adds	r1, r3, #0
 800ad52:	1c20      	adds	r0, r4, #0
 800ad54:	f7f6 f924 	bl	8000fa0 <__aeabi_fmul>
 800ad58:	1c03      	adds	r3, r0, #0
 800ad5a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ad60:	1c19      	adds	r1, r3, #0
 800ad62:	2085      	movs	r0, #133	@ 0x85
 800ad64:	05c0      	lsls	r0, r0, #23
 800ad66:	f7f6 fa59 	bl	800121c <__aeabi_fsub>
 800ad6a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ad6c:	6939      	ldr	r1, [r7, #16]
 800ad6e:	1c18      	adds	r0, r3, #0
 800ad70:	f7f6 f916 	bl	8000fa0 <__aeabi_fmul>
 800ad74:	1c03      	adds	r3, r0, #0
 800ad76:	1c18      	adds	r0, r3, #0
 800ad78:	f017 ffd4 	bl	8022d24 <sqrtf>
 800ad7c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad86:	2185      	movs	r1, #133	@ 0x85
 800ad88:	05c9      	lsls	r1, r1, #23
 800ad8a:	6938      	ldr	r0, [r7, #16]
 800ad8c:	f7f6 f908 	bl	8000fa0 <__aeabi_fmul>
 800ad90:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800ad92:	1c19      	adds	r1, r3, #0
 800ad94:	1c28      	adds	r0, r5, #0
 800ad96:	f7f5 ff1d 	bl	8000bd4 <__aeabi_fdiv>
 800ad9a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad9c:	1c19      	adds	r1, r3, #0
 800ad9e:	1c20      	adds	r0, r4, #0
 800ada0:	f7f6 f8fe 	bl	8000fa0 <__aeabi_fmul>
 800ada4:	1c03      	adds	r3, r0, #0
 800ada6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adac:	68f9      	ldr	r1, [r7, #12]
 800adae:	1c18      	adds	r0, r3, #0
 800adb0:	f7f6 f8f6 	bl	8000fa0 <__aeabi_fmul>
 800adb4:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800adb6:	6939      	ldr	r1, [r7, #16]
 800adb8:	1c18      	adds	r0, r3, #0
 800adba:	f7f5 ff0b 	bl	8000bd4 <__aeabi_fdiv>
 800adbe:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	1c18      	adds	r0, r3, #0
 800adc4:	f7f6 f8ec 	bl	8000fa0 <__aeabi_fmul>
 800adc8:	1c03      	adds	r3, r0, #0
             sqrtf(
 800adca:	1c19      	adds	r1, r3, #0
 800adcc:	1c20      	adds	r0, r4, #0
 800adce:	f7f5 fd77 	bl	80008c0 <__aeabi_fadd>
 800add2:	1c03      	adds	r3, r0, #0
 800add4:	1c18      	adds	r0, r3, #0
 800add6:	f017 ffa5 	bl	8022d24 <sqrtf>
 800adda:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800addc:	1c19      	adds	r1, r3, #0
 800adde:	1c30      	adds	r0, r6, #0
 800ade0:	f7f6 f8de 	bl	8000fa0 <__aeabi_fmul>
 800ade4:	1c03      	adds	r3, r0, #0
 800ade6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adf4:	68f9      	ldr	r1, [r7, #12]
 800adf6:	1c18      	adds	r0, r3, #0
 800adf8:	f7f6 f8d2 	bl	8000fa0 <__aeabi_fmul>
 800adfc:	1c03      	adds	r3, r0, #0
 800adfe:	2182      	movs	r1, #130	@ 0x82
 800ae00:	05c9      	lsls	r1, r1, #23
 800ae02:	1c18      	adds	r0, r3, #0
 800ae04:	f7f5 fee6 	bl	8000bd4 <__aeabi_fdiv>
 800ae08:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800ae0a:	1c19      	adds	r1, r3, #0
 800ae0c:	1c20      	adds	r0, r4, #0
 800ae0e:	f7f5 fd57 	bl	80008c0 <__aeabi_fadd>
 800ae12:	1c03      	adds	r3, r0, #0
 800ae14:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ae1a:	46c0      	nop			@ (mov r8, r8)
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b007      	add	sp, #28
 800ae20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae22:	46c0      	nop			@ (mov r8, r8)
 800ae24:	42c80000 	.word	0x42c80000
 800ae28:	c2c80000 	.word	0xc2c80000
 800ae2c:	44b40000 	.word	0x44b40000

0800ae30 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae48:	46c0      	nop			@ (mov r8, r8)
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	b004      	add	sp, #16
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae62:	1c19      	adds	r1, r3, #0
 800ae64:	6838      	ldr	r0, [r7, #0]
 800ae66:	f7f6 f9d9 	bl	800121c <__aeabi_fsub>
 800ae6a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae6c:	1c19      	adds	r1, r3, #0
 800ae6e:	1c20      	adds	r0, r4, #0
 800ae70:	f7f6 f896 	bl	8000fa0 <__aeabi_fmul>
 800ae74:	1c03      	adds	r3, r0, #0
 800ae76:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800ae78:	4912      	ldr	r1, [pc, #72]	@ (800aec4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7f5 fb58 	bl	8000530 <__aeabi_fcmplt>
 800ae80:	1e03      	subs	r3, r0, #0
 800ae82:	d002      	beq.n	800ae8a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800ae84:	23fe      	movs	r3, #254	@ 0xfe
 800ae86:	059b      	lsls	r3, r3, #22
 800ae88:	e018      	b.n	800aebc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800ae8a:	490f      	ldr	r1, [pc, #60]	@ (800aec8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7f5 fb63 	bl	8000558 <__aeabi_fcmpgt>
 800ae92:	1e03      	subs	r3, r0, #0
 800ae94:	d001      	beq.n	800ae9a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e010      	b.n	800aebc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	1c18      	adds	r0, r3, #0
 800ae9e:	f017 ff19 	bl	8022cd4 <expf>
 800aea2:	1c03      	adds	r3, r0, #0
 800aea4:	21fe      	movs	r1, #254	@ 0xfe
 800aea6:	0589      	lsls	r1, r1, #22
 800aea8:	1c18      	adds	r0, r3, #0
 800aeaa:	f7f5 fd09 	bl	80008c0 <__aeabi_fadd>
 800aeae:	1c03      	adds	r3, r0, #0
 800aeb0:	1c19      	adds	r1, r3, #0
 800aeb2:	20fe      	movs	r0, #254	@ 0xfe
 800aeb4:	0580      	lsls	r0, r0, #22
 800aeb6:	f7f5 fe8d 	bl	8000bd4 <__aeabi_fdiv>
 800aeba:	1c03      	adds	r3, r0, #0
    }
}
 800aebc:	1c18      	adds	r0, r3, #0
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b005      	add	sp, #20
 800aec2:	bd90      	pop	{r4, r7, pc}
 800aec4:	c2480000 	.word	0xc2480000
 800aec8:	42480000 	.word	0x42480000

0800aecc <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800aee4:	46c0      	nop			@ (mov r8, r8)
 800aee6:	46bd      	mov	sp, r7
 800aee8:	b004      	add	sp, #16
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d114      	bne.n	800af28 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af02:	1c19      	adds	r1, r3, #0
 800af04:	6838      	ldr	r0, [r7, #0]
 800af06:	f7f6 f989 	bl	800121c <__aeabi_fsub>
 800af0a:	1c03      	adds	r3, r0, #0
 800af0c:	4918      	ldr	r1, [pc, #96]	@ (800af70 <GasIndexAlgorithm__mox_model__process+0x84>)
 800af0e:	1c18      	adds	r0, r3, #0
 800af10:	f7f5 fe60 	bl	8000bd4 <__aeabi_fdiv>
 800af14:	1c03      	adds	r3, r0, #0
 800af16:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800af1c:	1c19      	adds	r1, r3, #0
 800af1e:	1c10      	adds	r0, r2, #0
 800af20:	f7f6 f83e 	bl	8000fa0 <__aeabi_fmul>
 800af24:	1c03      	adds	r3, r0, #0
 800af26:	e01f      	b.n	800af68 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af2c:	1c19      	adds	r1, r3, #0
 800af2e:	6838      	ldr	r0, [r7, #0]
 800af30:	f7f6 f974 	bl	800121c <__aeabi_fsub>
 800af34:	1c03      	adds	r3, r0, #0
 800af36:	1c1a      	adds	r2, r3, #0
 800af38:	2380      	movs	r3, #128	@ 0x80
 800af3a:	061b      	lsls	r3, r3, #24
 800af3c:	4053      	eors	r3, r2
 800af3e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af44:	490b      	ldr	r1, [pc, #44]	@ (800af74 <GasIndexAlgorithm__mox_model__process+0x88>)
 800af46:	1c18      	adds	r0, r3, #0
 800af48:	f7f5 fcba 	bl	80008c0 <__aeabi_fadd>
 800af4c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af4e:	1c19      	adds	r1, r3, #0
 800af50:	1c20      	adds	r0, r4, #0
 800af52:	f7f5 fe3f 	bl	8000bd4 <__aeabi_fdiv>
 800af56:	1c03      	adds	r3, r0, #0
 800af58:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800af5e:	1c19      	adds	r1, r3, #0
 800af60:	1c10      	adds	r0, r2, #0
 800af62:	f7f6 f81d 	bl	8000fa0 <__aeabi_fmul>
 800af66:	1c03      	adds	r3, r0, #0
    }
}
 800af68:	1c18      	adds	r0, r3, #0
 800af6a:	46bd      	mov	sp, r7
 800af6c:	b003      	add	sp, #12
 800af6e:	bd90      	pop	{r4, r7, pc}
 800af70:	44fa0000 	.word	0x44fa0000
 800af74:	435c0000 	.word	0x435c0000

0800af78 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2180      	movs	r1, #128	@ 0x80
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2184      	movs	r1, #132	@ 0x84
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2188      	movs	r1, #136	@ 0x88
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	505a      	str	r2, [r3, r1]
}
 800af9e:	46c0      	nop			@ (mov r8, r8)
 800afa0:	46bd      	mov	sp, r7
 800afa2:	b004      	add	sp, #16
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800afa8:	b590      	push	{r4, r7, lr}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2280      	movs	r2, #128	@ 0x80
 800afb6:	589c      	ldr	r4, [r3, r2]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2284      	movs	r2, #132	@ 0x84
 800afbc:	589b      	ldr	r3, [r3, r2]
 800afbe:	1c19      	adds	r1, r3, #0
 800afc0:	6838      	ldr	r0, [r7, #0]
 800afc2:	f7f6 f92b 	bl	800121c <__aeabi_fsub>
 800afc6:	1c03      	adds	r3, r0, #0
 800afc8:	1c19      	adds	r1, r3, #0
 800afca:	1c20      	adds	r0, r4, #0
 800afcc:	f7f5 ffe8 	bl	8000fa0 <__aeabi_fmul>
 800afd0:	1c03      	adds	r3, r0, #0
 800afd2:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800afd4:	4940      	ldr	r1, [pc, #256]	@ (800b0d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800afd6:	68b8      	ldr	r0, [r7, #8]
 800afd8:	f7f5 faaa 	bl	8000530 <__aeabi_fcmplt>
 800afdc:	1e03      	subs	r3, r0, #0
 800afde:	d001      	beq.n	800afe4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800afe0:	4b3e      	ldr	r3, [pc, #248]	@ (800b0dc <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800afe2:	e075      	b.n	800b0d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800afe4:	493e      	ldr	r1, [pc, #248]	@ (800b0e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800afe6:	68b8      	ldr	r0, [r7, #8]
 800afe8:	f7f5 fab6 	bl	8000558 <__aeabi_fcmpgt>
 800afec:	1e03      	subs	r3, r0, #0
 800afee:	d001      	beq.n	800aff4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e06d      	b.n	800b0d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800aff4:	2100      	movs	r1, #0
 800aff6:	6838      	ldr	r0, [r7, #0]
 800aff8:	f7f5 fab8 	bl	800056c <__aeabi_fcmpge>
 800affc:	1e03      	subs	r3, r0, #0
 800affe:	d047      	beq.n	800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2288      	movs	r2, #136	@ 0x88
 800b004:	589b      	ldr	r3, [r3, r2]
 800b006:	21fe      	movs	r1, #254	@ 0xfe
 800b008:	0589      	lsls	r1, r1, #22
 800b00a:	1c18      	adds	r0, r3, #0
 800b00c:	f7f5 fa8a 	bl	8000524 <__aeabi_fcmpeq>
 800b010:	1e03      	subs	r3, r0, #0
 800b012:	d00e      	beq.n	800b032 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	1c19      	adds	r1, r3, #0
 800b01a:	20fe      	movs	r0, #254	@ 0xfe
 800b01c:	0580      	lsls	r0, r0, #22
 800b01e:	f7f6 f8fd 	bl	800121c <__aeabi_fsub>
 800b022:	1c03      	adds	r3, r0, #0
 800b024:	492f      	ldr	r1, [pc, #188]	@ (800b0e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b026:	1c18      	adds	r0, r3, #0
 800b028:	f7f5 ffba 	bl	8000fa0 <__aeabi_fmul>
 800b02c:	1c03      	adds	r3, r0, #0
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e012      	b.n	800b058 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	492c      	ldr	r1, [pc, #176]	@ (800b0e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b038:	1c18      	adds	r0, r3, #0
 800b03a:	f7f5 ffb1 	bl	8000fa0 <__aeabi_fmul>
 800b03e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b040:	1c19      	adds	r1, r3, #0
 800b042:	4826      	ldr	r0, [pc, #152]	@ (800b0dc <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b044:	f7f6 f8ea 	bl	800121c <__aeabi_fsub>
 800b048:	1c03      	adds	r3, r0, #0
 800b04a:	2181      	movs	r1, #129	@ 0x81
 800b04c:	05c9      	lsls	r1, r1, #23
 800b04e:	1c18      	adds	r0, r3, #0
 800b050:	f7f5 fdc0 	bl	8000bd4 <__aeabi_fdiv>
 800b054:	1c03      	adds	r3, r0, #0
 800b056:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b058:	4920      	ldr	r1, [pc, #128]	@ (800b0dc <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7f5 fc30 	bl	80008c0 <__aeabi_fadd>
 800b060:	1c03      	adds	r3, r0, #0
 800b062:	1c1c      	adds	r4, r3, #0
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	1c18      	adds	r0, r3, #0
 800b068:	f017 fe34 	bl	8022cd4 <expf>
 800b06c:	1c03      	adds	r3, r0, #0
 800b06e:	21fe      	movs	r1, #254	@ 0xfe
 800b070:	0589      	lsls	r1, r1, #22
 800b072:	1c18      	adds	r0, r3, #0
 800b074:	f7f5 fc24 	bl	80008c0 <__aeabi_fadd>
 800b078:	1c03      	adds	r3, r0, #0
 800b07a:	1c19      	adds	r1, r3, #0
 800b07c:	1c20      	adds	r0, r4, #0
 800b07e:	f7f5 fda9 	bl	8000bd4 <__aeabi_fdiv>
 800b082:	1c03      	adds	r3, r0, #0
 800b084:	68f9      	ldr	r1, [r7, #12]
 800b086:	1c18      	adds	r0, r3, #0
 800b088:	f7f6 f8c8 	bl	800121c <__aeabi_fsub>
 800b08c:	1c03      	adds	r3, r0, #0
 800b08e:	e01f      	b.n	800b0d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2188      	movs	r1, #136	@ 0x88
 800b098:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b09a:	1c19      	adds	r1, r3, #0
 800b09c:	1c10      	adds	r0, r2, #0
 800b09e:	f7f5 fd99 	bl	8000bd4 <__aeabi_fdiv>
 800b0a2:	1c03      	adds	r3, r0, #0
 800b0a4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	1c18      	adds	r0, r3, #0
 800b0aa:	f017 fe13 	bl	8022cd4 <expf>
 800b0ae:	1c03      	adds	r3, r0, #0
 800b0b0:	21fe      	movs	r1, #254	@ 0xfe
 800b0b2:	0589      	lsls	r1, r1, #22
 800b0b4:	1c18      	adds	r0, r3, #0
 800b0b6:	f7f5 fc03 	bl	80008c0 <__aeabi_fadd>
 800b0ba:	1c03      	adds	r3, r0, #0
 800b0bc:	1c19      	adds	r1, r3, #0
 800b0be:	4807      	ldr	r0, [pc, #28]	@ (800b0dc <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b0c0:	f7f5 fd88 	bl	8000bd4 <__aeabi_fdiv>
 800b0c4:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b0c6:	1c19      	adds	r1, r3, #0
 800b0c8:	1c20      	adds	r0, r4, #0
 800b0ca:	f7f5 ff69 	bl	8000fa0 <__aeabi_fmul>
 800b0ce:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b0d0:	1c18      	adds	r0, r3, #0
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	b005      	add	sp, #20
 800b0d6:	bd90      	pop	{r4, r7, pc}
 800b0d8:	c2480000 	.word	0xc2480000
 800b0dc:	43fa0000 	.word	0x43fa0000
 800b0e0:	42480000 	.word	0x42480000
 800b0e4:	3f8041ab 	.word	0x3f8041ab
 800b0e8:	40a00000 	.word	0x40a00000

0800b0ec <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b0ec:	b590      	push	{r4, r7, lr}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4913      	ldr	r1, [pc, #76]	@ (800b14c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b0fe:	1c18      	adds	r0, r3, #0
 800b100:	f7f5 fbde 	bl	80008c0 <__aeabi_fadd>
 800b104:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b106:	1c19      	adds	r1, r3, #0
 800b108:	1c20      	adds	r0, r4, #0
 800b10a:	f7f5 fd63 	bl	8000bd4 <__aeabi_fdiv>
 800b10e:	1c03      	adds	r3, r0, #0
 800b110:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	228c      	movs	r2, #140	@ 0x8c
 800b116:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	490b      	ldr	r1, [pc, #44]	@ (800b150 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b122:	1c18      	adds	r0, r3, #0
 800b124:	f7f5 fbcc 	bl	80008c0 <__aeabi_fadd>
 800b128:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b12a:	1c19      	adds	r1, r3, #0
 800b12c:	1c20      	adds	r0, r4, #0
 800b12e:	f7f5 fd51 	bl	8000bd4 <__aeabi_fdiv>
 800b132:	1c03      	adds	r3, r0, #0
 800b134:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2290      	movs	r2, #144	@ 0x90
 800b13a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2294      	movs	r2, #148	@ 0x94
 800b140:	2100      	movs	r1, #0
 800b142:	5499      	strb	r1, [r3, r2]
}
 800b144:	46c0      	nop			@ (mov r8, r8)
 800b146:	46bd      	mov	sp, r7
 800b148:	b003      	add	sp, #12
 800b14a:	bd90      	pop	{r4, r7, pc}
 800b14c:	41a00000 	.word	0x41a00000
 800b150:	43fa0000 	.word	0x43fa0000

0800b154 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2294      	movs	r2, #148	@ 0x94
 800b162:	5c9b      	ldrb	r3, [r3, r2]
 800b164:	2201      	movs	r2, #1
 800b166:	4053      	eors	r3, r2
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00f      	beq.n	800b18e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2198      	movs	r1, #152	@ 0x98
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	219c      	movs	r1, #156	@ 0x9c
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	21a0      	movs	r1, #160	@ 0xa0
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2294      	movs	r2, #148	@ 0x94
 800b18a:	2101      	movs	r1, #1
 800b18c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	228c      	movs	r2, #140	@ 0x8c
 800b192:	589b      	ldr	r3, [r3, r2]
 800b194:	1c19      	adds	r1, r3, #0
 800b196:	20fe      	movs	r0, #254	@ 0xfe
 800b198:	0580      	lsls	r0, r0, #22
 800b19a:	f7f6 f83f 	bl	800121c <__aeabi_fsub>
 800b19e:	1c03      	adds	r3, r0, #0
 800b1a0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2298      	movs	r2, #152	@ 0x98
 800b1a6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b1a8:	1c19      	adds	r1, r3, #0
 800b1aa:	f7f5 fef9 	bl	8000fa0 <__aeabi_fmul>
 800b1ae:	1c03      	adds	r3, r0, #0
 800b1b0:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	228c      	movs	r2, #140	@ 0x8c
 800b1b6:	589b      	ldr	r3, [r3, r2]
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	1c18      	adds	r0, r3, #0
 800b1bc:	f7f5 fef0 	bl	8000fa0 <__aeabi_fmul>
 800b1c0:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b1c2:	1c19      	adds	r1, r3, #0
 800b1c4:	1c20      	adds	r0, r4, #0
 800b1c6:	f7f5 fb7b 	bl	80008c0 <__aeabi_fadd>
 800b1ca:	1c03      	adds	r3, r0, #0
 800b1cc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2298      	movs	r2, #152	@ 0x98
 800b1d2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2290      	movs	r2, #144	@ 0x90
 800b1d8:	589b      	ldr	r3, [r3, r2]
 800b1da:	1c19      	adds	r1, r3, #0
 800b1dc:	20fe      	movs	r0, #254	@ 0xfe
 800b1de:	0580      	lsls	r0, r0, #22
 800b1e0:	f7f6 f81c 	bl	800121c <__aeabi_fsub>
 800b1e4:	1c03      	adds	r3, r0, #0
 800b1e6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	229c      	movs	r2, #156	@ 0x9c
 800b1ec:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b1ee:	1c19      	adds	r1, r3, #0
 800b1f0:	f7f5 fed6 	bl	8000fa0 <__aeabi_fmul>
 800b1f4:	1c03      	adds	r3, r0, #0
 800b1f6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2290      	movs	r2, #144	@ 0x90
 800b1fc:	589b      	ldr	r3, [r3, r2]
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	1c18      	adds	r0, r3, #0
 800b202:	f7f5 fecd 	bl	8000fa0 <__aeabi_fmul>
 800b206:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b208:	1c19      	adds	r1, r3, #0
 800b20a:	1c20      	adds	r0, r4, #0
 800b20c:	f7f5 fb58 	bl	80008c0 <__aeabi_fadd>
 800b210:	1c03      	adds	r3, r0, #0
 800b212:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	229c      	movs	r2, #156	@ 0x9c
 800b218:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2298      	movs	r2, #152	@ 0x98
 800b21e:	589a      	ldr	r2, [r3, r2]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	219c      	movs	r1, #156	@ 0x9c
 800b224:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b226:	1c19      	adds	r1, r3, #0
 800b228:	1c10      	adds	r0, r2, #0
 800b22a:	f7f5 fff7 	bl	800121c <__aeabi_fsub>
 800b22e:	1c03      	adds	r3, r0, #0
 800b230:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b232:	2100      	movs	r1, #0
 800b234:	6978      	ldr	r0, [r7, #20]
 800b236:	f7f5 f97b 	bl	8000530 <__aeabi_fcmplt>
 800b23a:	1e03      	subs	r3, r0, #0
 800b23c:	d004      	beq.n	800b248 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2280      	movs	r2, #128	@ 0x80
 800b242:	0612      	lsls	r2, r2, #24
 800b244:	4053      	eors	r3, r2
 800b246:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b248:	4923      	ldr	r1, [pc, #140]	@ (800b2d8 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b24a:	6978      	ldr	r0, [r7, #20]
 800b24c:	f7f5 fea8 	bl	8000fa0 <__aeabi_fmul>
 800b250:	1c03      	adds	r3, r0, #0
 800b252:	1c18      	adds	r0, r3, #0
 800b254:	f017 fd3e 	bl	8022cd4 <expf>
 800b258:	1c03      	adds	r3, r0, #0
 800b25a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b25c:	491f      	ldr	r1, [pc, #124]	@ (800b2dc <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b25e:	6938      	ldr	r0, [r7, #16]
 800b260:	f7f5 fe9e 	bl	8000fa0 <__aeabi_fmul>
 800b264:	1c03      	adds	r3, r0, #0
 800b266:	491e      	ldr	r1, [pc, #120]	@ (800b2e0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b268:	1c18      	adds	r0, r3, #0
 800b26a:	f7f5 fb29 	bl	80008c0 <__aeabi_fadd>
 800b26e:	1c03      	adds	r3, r0, #0
 800b270:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685c      	ldr	r4, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	68f9      	ldr	r1, [r7, #12]
 800b27c:	1c18      	adds	r0, r3, #0
 800b27e:	f7f5 fb1f 	bl	80008c0 <__aeabi_fadd>
 800b282:	1c03      	adds	r3, r0, #0
 800b284:	1c19      	adds	r1, r3, #0
 800b286:	1c20      	adds	r0, r4, #0
 800b288:	f7f5 fca4 	bl	8000bd4 <__aeabi_fdiv>
 800b28c:	1c03      	adds	r3, r0, #0
 800b28e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	20fe      	movs	r0, #254	@ 0xfe
 800b294:	0580      	lsls	r0, r0, #22
 800b296:	f7f5 ffc1 	bl	800121c <__aeabi_fsub>
 800b29a:	1c03      	adds	r3, r0, #0
 800b29c:	1c18      	adds	r0, r3, #0
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	22a0      	movs	r2, #160	@ 0xa0
 800b2a2:	589b      	ldr	r3, [r3, r2]
 800b2a4:	1c19      	adds	r1, r3, #0
 800b2a6:	f7f5 fe7b 	bl	8000fa0 <__aeabi_fmul>
 800b2aa:	1c03      	adds	r3, r0, #0
 800b2ac:	1c1c      	adds	r4, r3, #0
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	68b8      	ldr	r0, [r7, #8]
 800b2b2:	f7f5 fe75 	bl	8000fa0 <__aeabi_fmul>
 800b2b6:	1c03      	adds	r3, r0, #0
 800b2b8:	1c19      	adds	r1, r3, #0
 800b2ba:	1c20      	adds	r0, r4, #0
 800b2bc:	f7f5 fb00 	bl	80008c0 <__aeabi_fadd>
 800b2c0:	1c03      	adds	r3, r0, #0
 800b2c2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	22a0      	movs	r2, #160	@ 0xa0
 800b2c8:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	22a0      	movs	r2, #160	@ 0xa0
 800b2ce:	589b      	ldr	r3, [r3, r2]
}
 800b2d0:	1c18      	adds	r0, r3, #0
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	b007      	add	sp, #28
 800b2d6:	bd90      	pop	{r4, r7, pc}
 800b2d8:	be4ccccd 	.word	0xbe4ccccd
 800b2dc:	43f00000 	.word	0x43f00000
 800b2e0:	41a00000 	.word	0x41a00000

0800b2e4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	000a      	movs	r2, r1
 800b2ee:	1cbb      	adds	r3, r7, #2
 800b2f0:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b2f2:	230d      	movs	r3, #13
 800b2f4:	18fb      	adds	r3, r7, r3
 800b2f6:	22ff      	movs	r2, #255	@ 0xff
 800b2f8:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b2fa:	230e      	movs	r3, #14
 800b2fc:	18fb      	adds	r3, r7, r3
 800b2fe:	2200      	movs	r2, #0
 800b300:	801a      	strh	r2, [r3, #0]
 800b302:	e037      	b.n	800b374 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b304:	230e      	movs	r3, #14
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	18d3      	adds	r3, r2, r3
 800b30e:	7819      	ldrb	r1, [r3, #0]
 800b310:	220d      	movs	r2, #13
 800b312:	18bb      	adds	r3, r7, r2
 800b314:	18ba      	adds	r2, r7, r2
 800b316:	7812      	ldrb	r2, [r2, #0]
 800b318:	404a      	eors	r2, r1
 800b31a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b31c:	230c      	movs	r3, #12
 800b31e:	18fb      	adds	r3, r7, r3
 800b320:	2208      	movs	r2, #8
 800b322:	701a      	strb	r2, [r3, #0]
 800b324:	e01b      	b.n	800b35e <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b326:	210d      	movs	r1, #13
 800b328:	187b      	adds	r3, r7, r1
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	b25b      	sxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	da09      	bge.n	800b346 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b332:	187b      	adds	r3, r7, r1
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	b25b      	sxtb	r3, r3
 800b33a:	2231      	movs	r2, #49	@ 0x31
 800b33c:	4053      	eors	r3, r2
 800b33e:	b25a      	sxtb	r2, r3
 800b340:	187b      	adds	r3, r7, r1
 800b342:	701a      	strb	r2, [r3, #0]
 800b344:	e005      	b.n	800b352 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b346:	230d      	movs	r3, #13
 800b348:	18fa      	adds	r2, r7, r3
 800b34a:	18fb      	adds	r3, r7, r3
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	18db      	adds	r3, r3, r3
 800b350:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b352:	220c      	movs	r2, #12
 800b354:	18bb      	adds	r3, r7, r2
 800b356:	18ba      	adds	r2, r7, r2
 800b358:	7812      	ldrb	r2, [r2, #0]
 800b35a:	3a01      	subs	r2, #1
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	230c      	movs	r3, #12
 800b360:	18fb      	adds	r3, r7, r3
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1de      	bne.n	800b326 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b368:	220e      	movs	r2, #14
 800b36a:	18bb      	adds	r3, r7, r2
 800b36c:	18ba      	adds	r2, r7, r2
 800b36e:	8812      	ldrh	r2, [r2, #0]
 800b370:	3201      	adds	r2, #1
 800b372:	801a      	strh	r2, [r3, #0]
 800b374:	230e      	movs	r3, #14
 800b376:	18fa      	adds	r2, r7, r3
 800b378:	1cbb      	adds	r3, r7, #2
 800b37a:	8812      	ldrh	r2, [r2, #0]
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d3c0      	bcc.n	800b304 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b382:	230d      	movs	r3, #13
 800b384:	18fb      	adds	r3, r7, r3
 800b386:	781b      	ldrb	r3, [r3, #0]
}
 800b388:	0018      	movs	r0, r3
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b004      	add	sp, #16
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	0008      	movs	r0, r1
 800b39a:	0011      	movs	r1, r2
 800b39c:	1cbb      	adds	r3, r7, #2
 800b39e:	1c02      	adds	r2, r0, #0
 800b3a0:	801a      	strh	r2, [r3, #0]
 800b3a2:	1c7b      	adds	r3, r7, #1
 800b3a4:	1c0a      	adds	r2, r1, #0
 800b3a6:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b3a8:	1cbb      	adds	r3, r7, #2
 800b3aa:	881a      	ldrh	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	0011      	movs	r1, r2
 800b3b0:	0018      	movs	r0, r3
 800b3b2:	f7ff ff97 	bl	800b2e4 <sensirion_i2c_generate_crc>
 800b3b6:	0003      	movs	r3, r0
 800b3b8:	001a      	movs	r2, r3
 800b3ba:	1c7b      	adds	r3, r7, #1
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d001      	beq.n	800b3c6 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e000      	b.n	800b3c8 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	b002      	add	sp, #8
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	0008      	movs	r0, r1
 800b3da:	0011      	movs	r1, r2
 800b3dc:	1cbb      	adds	r3, r7, #2
 800b3de:	1c02      	adds	r2, r0, #0
 800b3e0:	801a      	strh	r2, [r3, #0]
 800b3e2:	003b      	movs	r3, r7
 800b3e4:	1c0a      	adds	r2, r1, #0
 800b3e6:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b3e8:	003b      	movs	r3, r7
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	0a1b      	lsrs	r3, r3, #8
 800b3ee:	b299      	uxth	r1, r3
 800b3f0:	1cbb      	adds	r3, r7, #2
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	1cba      	adds	r2, r7, #2
 800b3f6:	1c58      	adds	r0, r3, #1
 800b3f8:	8010      	strh	r0, [r2, #0]
 800b3fa:	001a      	movs	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	189b      	adds	r3, r3, r2
 800b400:	b2ca      	uxtb	r2, r1
 800b402:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b404:	1cbb      	adds	r3, r7, #2
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	1cba      	adds	r2, r7, #2
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	8011      	strh	r1, [r2, #0]
 800b40e:	001a      	movs	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	189b      	adds	r3, r3, r2
 800b414:	003a      	movs	r2, r7
 800b416:	8812      	ldrh	r2, [r2, #0]
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]
    return offset;
 800b41c:	1cbb      	adds	r3, r7, #2
 800b41e:	881b      	ldrh	r3, [r3, #0]
}
 800b420:	0018      	movs	r0, r3
 800b422:	46bd      	mov	sp, r7
 800b424:	b002      	add	sp, #8
 800b426:	bd80      	pop	{r7, pc}

0800b428 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	0008      	movs	r0, r1
 800b432:	0011      	movs	r1, r2
 800b434:	1cbb      	adds	r3, r7, #2
 800b436:	1c02      	adds	r2, r0, #0
 800b438:	801a      	strh	r2, [r3, #0]
 800b43a:	003b      	movs	r3, r7
 800b43c:	1c0a      	adds	r2, r1, #0
 800b43e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b440:	003b      	movs	r3, r7
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	0a1b      	lsrs	r3, r3, #8
 800b446:	b299      	uxth	r1, r3
 800b448:	1cbb      	adds	r3, r7, #2
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	1cba      	adds	r2, r7, #2
 800b44e:	1c58      	adds	r0, r3, #1
 800b450:	8010      	strh	r0, [r2, #0]
 800b452:	001a      	movs	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	189b      	adds	r3, r3, r2
 800b458:	b2ca      	uxtb	r2, r1
 800b45a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b45c:	1cbb      	adds	r3, r7, #2
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	1cba      	adds	r2, r7, #2
 800b462:	1c59      	adds	r1, r3, #1
 800b464:	8011      	strh	r1, [r2, #0]
 800b466:	001a      	movs	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	189b      	adds	r3, r3, r2
 800b46c:	003a      	movs	r2, r7
 800b46e:	8812      	ldrh	r2, [r2, #0]
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b474:	1cbb      	adds	r3, r7, #2
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	3b02      	subs	r3, #2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b47e:	1cbb      	adds	r3, r7, #2
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	18d4      	adds	r4, r2, r3
 800b486:	2102      	movs	r1, #2
 800b488:	f7ff ff2c 	bl	800b2e4 <sensirion_i2c_generate_crc>
 800b48c:	0003      	movs	r3, r0
 800b48e:	7023      	strb	r3, [r4, #0]
    offset++;
 800b490:	1cbb      	adds	r3, r7, #2
 800b492:	881a      	ldrh	r2, [r3, #0]
 800b494:	1cbb      	adds	r3, r7, #2
 800b496:	3201      	adds	r2, #1
 800b498:	801a      	strh	r2, [r3, #0]

    return offset;
 800b49a:	1cbb      	adds	r3, r7, #2
 800b49c:	881b      	ldrh	r3, [r3, #0]
}
 800b49e:	0018      	movs	r0, r3
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	b003      	add	sp, #12
 800b4a4:	bd90      	pop	{r4, r7, pc}

0800b4a6 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	0008      	movs	r0, r1
 800b4b0:	0011      	movs	r1, r2
 800b4b2:	1cbb      	adds	r3, r7, #2
 800b4b4:	1c02      	adds	r2, r0, #0
 800b4b6:	801a      	strh	r2, [r3, #0]
 800b4b8:	003b      	movs	r3, r7
 800b4ba:	1c0a      	adds	r2, r1, #0
 800b4bc:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b4be:	003b      	movs	r3, r7
 800b4c0:	881a      	ldrh	r2, [r3, #0]
 800b4c2:	1cbb      	adds	r3, r7, #2
 800b4c4:	8819      	ldrh	r1, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	0018      	movs	r0, r3
 800b4ca:	f7ff ffad 	bl	800b428 <sensirion_i2c_add_uint16_t_to_buffer>
 800b4ce:	0003      	movs	r3, r0
}
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	b002      	add	sp, #8
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6039      	str	r1, [r7, #0]
 800b4e0:	0011      	movs	r1, r2
 800b4e2:	1dfb      	adds	r3, r7, #7
 800b4e4:	1c02      	adds	r2, r0, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
 800b4e8:	1d3b      	adds	r3, r7, #4
 800b4ea:	1c0a      	adds	r2, r1, #0
 800b4ec:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b4ee:	1d3b      	adds	r3, r7, #4
 800b4f0:	881a      	ldrh	r2, [r3, #0]
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	1dfb      	adds	r3, r7, #7
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f7fe fa01 	bl	8009900 <sensirion_i2c_hal_write>
 800b4fe:	0003      	movs	r3, r0
}
 800b500:	0018      	movs	r0, r3
 800b502:	46bd      	mov	sp, r7
 800b504:	b002      	add	sp, #8
 800b506:	bd80      	pop	{r7, pc}

0800b508 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b508:	b5b0      	push	{r4, r5, r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6039      	str	r1, [r7, #0]
 800b510:	0011      	movs	r1, r2
 800b512:	1dfb      	adds	r3, r7, #7
 800b514:	1c02      	adds	r2, r0, #0
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	1d3b      	adds	r3, r7, #4
 800b51a:	1c0a      	adds	r2, r1, #0
 800b51c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b51e:	1d3b      	adds	r3, r7, #4
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	085b      	lsrs	r3, r3, #1
 800b524:	b29b      	uxth	r3, r3
 800b526:	220a      	movs	r2, #10
 800b528:	18ba      	adds	r2, r7, r2
 800b52a:	1c19      	adds	r1, r3, #0
 800b52c:	1c0b      	adds	r3, r1, #0
 800b52e:	18db      	adds	r3, r3, r3
 800b530:	185b      	adds	r3, r3, r1
 800b532:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	2201      	movs	r2, #1
 800b53a:	4013      	ands	r3, r2
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b542:	2304      	movs	r3, #4
 800b544:	e06b      	b.n	800b61e <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b546:	230a      	movs	r3, #10
 800b548:	18fb      	adds	r3, r7, r3
 800b54a:	881a      	ldrh	r2, [r3, #0]
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	1dfb      	adds	r3, r7, #7
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	0018      	movs	r0, r3
 800b554:	f7fe f9b4 	bl	80098c0 <sensirion_i2c_hal_read>
 800b558:	0003      	movs	r3, r0
 800b55a:	001a      	movs	r2, r3
 800b55c:	2108      	movs	r1, #8
 800b55e:	187b      	adds	r3, r7, r1
 800b560:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b562:	000a      	movs	r2, r1
 800b564:	18bb      	adds	r3, r7, r2
 800b566:	2100      	movs	r1, #0
 800b568:	5e5b      	ldrsh	r3, [r3, r1]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b56e:	18bb      	adds	r3, r7, r2
 800b570:	2200      	movs	r2, #0
 800b572:	5e9b      	ldrsh	r3, [r3, r2]
 800b574:	e053      	b.n	800b61e <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b576:	230e      	movs	r3, #14
 800b578:	18fb      	adds	r3, r7, r3
 800b57a:	2200      	movs	r2, #0
 800b57c:	801a      	strh	r2, [r3, #0]
 800b57e:	230c      	movs	r3, #12
 800b580:	18fb      	adds	r3, r7, r3
 800b582:	2200      	movs	r2, #0
 800b584:	801a      	strh	r2, [r3, #0]
 800b586:	e041      	b.n	800b60c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b588:	210e      	movs	r1, #14
 800b58a:	187b      	adds	r3, r7, r1
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b592:	187b      	adds	r3, r7, r1
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	3302      	adds	r3, #2
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	001a      	movs	r2, r3
 800b5a0:	2102      	movs	r1, #2
 800b5a2:	f7ff fef5 	bl	800b390 <sensirion_i2c_check_crc>
 800b5a6:	0003      	movs	r3, r0
 800b5a8:	001a      	movs	r2, r3
 800b5aa:	2108      	movs	r1, #8
 800b5ac:	187b      	adds	r3, r7, r1
 800b5ae:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b5b0:	000a      	movs	r2, r1
 800b5b2:	18bb      	adds	r3, r7, r2
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	5e5b      	ldrsh	r3, [r3, r1]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b5bc:	18bb      	adds	r3, r7, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	5e9b      	ldrsh	r3, [r3, r2]
 800b5c2:	e02c      	b.n	800b61e <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b5c4:	240e      	movs	r4, #14
 800b5c6:	193b      	adds	r3, r7, r4
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	18d2      	adds	r2, r2, r3
 800b5ce:	250c      	movs	r5, #12
 800b5d0:	197b      	adds	r3, r7, r5
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	1979      	adds	r1, r7, r5
 800b5d6:	1c58      	adds	r0, r3, #1
 800b5d8:	8008      	strh	r0, [r1, #0]
 800b5da:	0019      	movs	r1, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	185b      	adds	r3, r3, r1
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b5e4:	193b      	adds	r3, r7, r4
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	18d2      	adds	r2, r2, r3
 800b5ee:	197b      	adds	r3, r7, r5
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	1979      	adds	r1, r7, r5
 800b5f4:	1c58      	adds	r0, r3, #1
 800b5f6:	8008      	strh	r0, [r1, #0]
 800b5f8:	0019      	movs	r1, r3
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	185b      	adds	r3, r3, r1
 800b5fe:	7812      	ldrb	r2, [r2, #0]
 800b600:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b602:	193b      	adds	r3, r7, r4
 800b604:	193a      	adds	r2, r7, r4
 800b606:	8812      	ldrh	r2, [r2, #0]
 800b608:	3203      	adds	r2, #3
 800b60a:	801a      	strh	r2, [r3, #0]
 800b60c:	230e      	movs	r3, #14
 800b60e:	18fa      	adds	r2, r7, r3
 800b610:	230a      	movs	r3, #10
 800b612:	18fb      	adds	r3, r7, r3
 800b614:	8812      	ldrh	r2, [r2, #0]
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d3b5      	bcc.n	800b588 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	0018      	movs	r0, r3
 800b620:	46bd      	mov	sp, r7
 800b622:	b004      	add	sp, #16
 800b624:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b628 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b628:	b590      	push	{r4, r7, lr}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6039      	str	r1, [r7, #0]
 800b630:	0011      	movs	r1, r2
 800b632:	1dfb      	adds	r3, r7, #7
 800b634:	1c02      	adds	r2, r0, #0
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	1dbb      	adds	r3, r7, #6
 800b63a:	1c0a      	adds	r2, r1, #0
 800b63c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b63e:	4b08      	ldr	r3, [pc, #32]	@ (800b660 <ReadRegister+0x38>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d008      	beq.n	800b658 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b646:	4b06      	ldr	r3, [pc, #24]	@ (800b660 <ReadRegister+0x38>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	1dba      	adds	r2, r7, #6
 800b64c:	7814      	ldrb	r4, [r2, #0]
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	1dfa      	adds	r2, r7, #7
 800b652:	7810      	ldrb	r0, [r2, #0]
 800b654:	0022      	movs	r2, r4
 800b656:	4798      	blx	r3
  }
}
 800b658:	46c0      	nop			@ (mov r8, r8)
 800b65a:	46bd      	mov	sp, r7
 800b65c:	b003      	add	sp, #12
 800b65e:	bd90      	pop	{r4, r7, pc}
 800b660:	20001088 	.word	0x20001088

0800b664 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6039      	str	r1, [r7, #0]
 800b66c:	0011      	movs	r1, r2
 800b66e:	1dfb      	adds	r3, r7, #7
 800b670:	1c02      	adds	r2, r0, #0
 800b672:	701a      	strb	r2, [r3, #0]
 800b674:	1dbb      	adds	r3, r7, #6
 800b676:	1c0a      	adds	r2, r1, #0
 800b678:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b67a:	4b08      	ldr	r3, [pc, #32]	@ (800b69c <WriteRegister+0x38>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b682:	4b06      	ldr	r3, [pc, #24]	@ (800b69c <WriteRegister+0x38>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	1dba      	adds	r2, r7, #6
 800b688:	7814      	ldrb	r4, [r2, #0]
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	1dfa      	adds	r2, r7, #7
 800b68e:	7810      	ldrb	r0, [r2, #0]
 800b690:	0022      	movs	r2, r4
 800b692:	4798      	blx	r3
  }
}
 800b694:	46c0      	nop			@ (mov r8, r8)
 800b696:	46bd      	mov	sp, r7
 800b698:	b003      	add	sp, #12
 800b69a:	bd90      	pop	{r4, r7, pc}
 800b69c:	2000108c 	.word	0x2000108c

0800b6a0 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b6a8:	f003 fb1a 	bl	800ece0 <HAL_GetTick>
 800b6ac:	0002      	movs	r2, r0
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	18d2      	adds	r2, r2, r3
 800b6b2:	4b03      	ldr	r3, [pc, #12]	@ (800b6c0 <setSGP40TimeStamp+0x20>)
 800b6b4:	601a      	str	r2, [r3, #0]
}
 800b6b6:	46c0      	nop			@ (mov r8, r8)
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	b002      	add	sp, #8
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	46c0      	nop			@ (mov r8, r8)
 800b6c0:	2000109c 	.word	0x2000109c

0800b6c4 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b6c8:	4b02      	ldr	r3, [pc, #8]	@ (800b6d4 <ResetSGP40samplecounter+0x10>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
}
 800b6ce:	46c0      	nop			@ (mov r8, r8)
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	2000109a 	.word	0x2000109a

0800b6d8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b6e2:	4b07      	ldr	r3, [pc, #28]	@ (800b700 <SGP_Init+0x28>)
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b6e8:	4b06      	ldr	r3, [pc, #24]	@ (800b704 <SGP_Init+0x2c>)
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b6ee:	4b06      	ldr	r3, [pc, #24]	@ (800b708 <SGP_Init+0x30>)
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7fe ff70 	bl	800a5d8 <GasIndexAlgorithm_init>
}
 800b6f8:	46c0      	nop			@ (mov r8, r8)
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	b002      	add	sp, #8
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20001088 	.word	0x20001088
 800b704:	2000108c 	.word	0x2000108c
 800b708:	200010a4 	.word	0x200010a4

0800b70c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b710:	4b07      	ldr	r3, [pc, #28]	@ (800b730 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b718:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b71a:	22fe      	movs	r2, #254	@ 0xfe
 800b71c:	0592      	lsls	r2, r2, #22
 800b71e:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b720:	e002      	b.n	800b728 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b722:	4b04      	ldr	r3, [pc, #16]	@ (800b734 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b724:	4a04      	ldr	r2, [pc, #16]	@ (800b738 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b726:	605a      	str	r2, [r3, #4]
}
 800b728:	46c0      	nop			@ (mov r8, r8)
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	46c0      	nop			@ (mov r8, r8)
 800b730:	20001ff5 	.word	0x20001ff5
 800b734:	200010a4 	.word	0x200010a4
 800b738:	44610000 	.word	0x44610000

0800b73c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b740:	4b13      	ldr	r3, [pc, #76]	@ (800b790 <SGP_StartMeasurement+0x54>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00d      	beq.n	800b764 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b748:	4b12      	ldr	r3, [pc, #72]	@ (800b794 <SGP_StartMeasurement+0x58>)
 800b74a:	2208      	movs	r2, #8
 800b74c:	0019      	movs	r1, r3
 800b74e:	2059      	movs	r0, #89	@ 0x59
 800b750:	f7ff ff88 	bl	800b664 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b754:	f003 fac4 	bl	800ece0 <HAL_GetTick>
 800b758:	0003      	movs	r3, r0
 800b75a:	331e      	adds	r3, #30
 800b75c:	001a      	movs	r2, r3
 800b75e:	4b0e      	ldr	r3, [pc, #56]	@ (800b798 <SGP_StartMeasurement+0x5c>)
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	e00c      	b.n	800b77e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b764:	4b0d      	ldr	r3, [pc, #52]	@ (800b79c <SGP_StartMeasurement+0x60>)
 800b766:	2208      	movs	r2, #8
 800b768:	0019      	movs	r1, r3
 800b76a:	2059      	movs	r0, #89	@ 0x59
 800b76c:	f7ff ff7a 	bl	800b664 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b770:	f003 fab6 	bl	800ece0 <HAL_GetTick>
 800b774:	0003      	movs	r3, r0
 800b776:	33aa      	adds	r3, #170	@ 0xaa
 800b778:	001a      	movs	r2, r3
 800b77a:	4b09      	ldr	r3, [pc, #36]	@ (800b7a0 <SGP_StartMeasurement+0x64>)
 800b77c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b77e:	4b09      	ldr	r3, [pc, #36]	@ (800b7a4 <SGP_StartMeasurement+0x68>)
 800b780:	2200      	movs	r2, #0
 800b782:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b784:	4b08      	ldr	r3, [pc, #32]	@ (800b7a8 <SGP_StartMeasurement+0x6c>)
 800b786:	2200      	movs	r2, #0
 800b788:	701a      	strb	r2, [r3, #0]
}
 800b78a:	46c0      	nop			@ (mov r8, r8)
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	2000114c 	.word	0x2000114c
 800b794:	20000098 	.word	0x20000098
 800b798:	200000ac 	.word	0x200000ac
 800b79c:	20000090 	.word	0x20000090
 800b7a0:	200000a4 	.word	0x200000a4
 800b7a4:	200010a0 	.word	0x200010a0
 800b7a8:	200010a1 	.word	0x200010a1

0800b7ac <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b7b0:	4b04      	ldr	r3, [pc, #16]	@ (800b7c4 <SGP_HeatedUp+0x18>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f002 fdf7 	bl	800e3a8 <TimestampIsReached>
 800b7ba:	0003      	movs	r3, r0
}
 800b7bc:	0018      	movs	r0, r3
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	46c0      	nop			@ (mov r8, r8)
 800b7c4:	200000a4 	.word	0x200000a4

0800b7c8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b7cc:	4b04      	ldr	r3, [pc, #16]	@ (800b7e0 <SGP_MeasurementReady+0x18>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f002 fde9 	bl	800e3a8 <TimestampIsReached>
 800b7d6:	0003      	movs	r3, r0
}
 800b7d8:	0018      	movs	r0, r3
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	46c0      	nop			@ (mov r8, r8)
 800b7e0:	200000ac 	.word	0x200000ac

0800b7e4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b7e8:	4b04      	ldr	r3, [pc, #16]	@ (800b7fc <SGP_MeasurementDone+0x18>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f002 fddb 	bl	800e3a8 <TimestampIsReached>
 800b7f2:	0003      	movs	r3, r0
}
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	46c0      	nop			@ (mov r8, r8)
 800b7fc:	200000a8 	.word	0x200000a8

0800b800 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b800:	b580      	push	{r7, lr}
 800b802:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b804:	4b04      	ldr	r3, [pc, #16]	@ (800b818 <SGP_TurnHeaterOff+0x18>)
 800b806:	2202      	movs	r2, #2
 800b808:	0019      	movs	r1, r3
 800b80a:	2059      	movs	r0, #89	@ 0x59
 800b80c:	f7ff ff2a 	bl	800b664 <WriteRegister>
}
 800b810:	46c0      	nop			@ (mov r8, r8)
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	46c0      	nop			@ (mov r8, r8)
 800b818:	20000088 	.word	0x20000088

0800b81c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b81c:	b5b0      	push	{r4, r5, r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af02      	add	r7, sp, #8
 800b822:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b824:	f7ff ffc2 	bl	800b7ac <SGP_HeatedUp>
 800b828:	1e03      	subs	r3, r0, #0
 800b82a:	d032      	beq.n	800b892 <SGP_GetMeasurementValues+0x76>
 800b82c:	4bd4      	ldr	r3, [pc, #848]	@ (800bb80 <SGP_GetMeasurementValues+0x364>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2201      	movs	r2, #1
 800b832:	4053      	eors	r3, r2
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d02b      	beq.n	800b892 <SGP_GetMeasurementValues+0x76>
 800b83a:	4bd2      	ldr	r3, [pc, #840]	@ (800bb84 <SGP_GetMeasurementValues+0x368>)
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2201      	movs	r2, #1
 800b840:	4053      	eors	r3, r2
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b00      	cmp	r3, #0
 800b846:	d024      	beq.n	800b892 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b848:	4bcd      	ldr	r3, [pc, #820]	@ (800bb80 <SGP_GetMeasurementValues+0x364>)
 800b84a:	2201      	movs	r2, #1
 800b84c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b84e:	4bce      	ldr	r3, [pc, #824]	@ (800bb88 <SGP_GetMeasurementValues+0x36c>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00d      	beq.n	800b872 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b856:	4bcd      	ldr	r3, [pc, #820]	@ (800bb8c <SGP_GetMeasurementValues+0x370>)
 800b858:	2208      	movs	r2, #8
 800b85a:	0019      	movs	r1, r3
 800b85c:	2059      	movs	r0, #89	@ 0x59
 800b85e:	f7ff ff01 	bl	800b664 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b862:	f003 fa3d 	bl	800ece0 <HAL_GetTick>
 800b866:	0003      	movs	r3, r0
 800b868:	331e      	adds	r3, #30
 800b86a:	001a      	movs	r2, r3
 800b86c:	4bc8      	ldr	r3, [pc, #800]	@ (800bb90 <SGP_GetMeasurementValues+0x374>)
 800b86e:	601a      	str	r2, [r3, #0]
 800b870:	e00c      	b.n	800b88c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b872:	4bc8      	ldr	r3, [pc, #800]	@ (800bb94 <SGP_GetMeasurementValues+0x378>)
 800b874:	2208      	movs	r2, #8
 800b876:	0019      	movs	r1, r3
 800b878:	2059      	movs	r0, #89	@ 0x59
 800b87a:	f7ff fef3 	bl	800b664 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b87e:	f003 fa2f 	bl	800ece0 <HAL_GetTick>
 800b882:	0003      	movs	r3, r0
 800b884:	331e      	adds	r3, #30
 800b886:	001a      	movs	r2, r3
 800b888:	4bc1      	ldr	r3, [pc, #772]	@ (800bb90 <SGP_GetMeasurementValues+0x374>)
 800b88a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b88c:	4bbd      	ldr	r3, [pc, #756]	@ (800bb84 <SGP_GetMeasurementValues+0x368>)
 800b88e:	2201      	movs	r2, #1
 800b890:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b892:	4bbb      	ldr	r3, [pc, #748]	@ (800bb80 <SGP_GetMeasurementValues+0x364>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d100      	bne.n	800b89c <SGP_GetMeasurementValues+0x80>
 800b89a:	e1a9      	b.n	800bbf0 <SGP_GetMeasurementValues+0x3d4>
 800b89c:	f7ff ff94 	bl	800b7c8 <SGP_MeasurementReady>
 800b8a0:	1e03      	subs	r3, r0, #0
 800b8a2:	d100      	bne.n	800b8a6 <SGP_GetMeasurementValues+0x8a>
 800b8a4:	e1a4      	b.n	800bbf0 <SGP_GetMeasurementValues+0x3d4>
 800b8a6:	4bbc      	ldr	r3, [pc, #752]	@ (800bb98 <SGP_GetMeasurementValues+0x37c>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	4053      	eors	r3, r2
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d100      	bne.n	800b8b6 <SGP_GetMeasurementValues+0x9a>
 800b8b4:	e19c      	b.n	800bbf0 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b8b6:	4bb8      	ldr	r3, [pc, #736]	@ (800bb98 <SGP_GetMeasurementValues+0x37c>)
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b8bc:	4bb7      	ldr	r3, [pc, #732]	@ (800bb9c <SGP_GetMeasurementValues+0x380>)
 800b8be:	2203      	movs	r2, #3
 800b8c0:	0019      	movs	r1, r3
 800b8c2:	2059      	movs	r0, #89	@ 0x59
 800b8c4:	f7ff feb0 	bl	800b628 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b8c8:	4bb4      	ldr	r3, [pc, #720]	@ (800bb9c <SGP_GetMeasurementValues+0x380>)
 800b8ca:	2203      	movs	r2, #3
 800b8cc:	2103      	movs	r1, #3
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f000 f9f4 	bl	800bcbc <CheckCRC>
 800b8d4:	0003      	movs	r3, r0
 800b8d6:	001a      	movs	r2, r3
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4053      	eors	r3, r2
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d02a      	beq.n	800b938 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b8e2:	4aaf      	ldr	r2, [pc, #700]	@ (800bba0 <SGP_GetMeasurementValues+0x384>)
 800b8e4:	4baf      	ldr	r3, [pc, #700]	@ (800bba4 <SGP_GetMeasurementValues+0x388>)
 800b8e6:	0019      	movs	r1, r3
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	f002 fdb3 	bl	800e454 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b8ee:	4aae      	ldr	r2, [pc, #696]	@ (800bba8 <SGP_GetMeasurementValues+0x38c>)
 800b8f0:	4bae      	ldr	r3, [pc, #696]	@ (800bbac <SGP_GetMeasurementValues+0x390>)
 800b8f2:	0019      	movs	r1, r3
 800b8f4:	2002      	movs	r0, #2
 800b8f6:	f002 fdad 	bl	800e454 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8fa:	230f      	movs	r3, #15
 800b8fc:	18fb      	adds	r3, r7, r3
 800b8fe:	2200      	movs	r2, #0
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e012      	b.n	800b92a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b904:	240f      	movs	r4, #15
 800b906:	193b      	adds	r3, r7, r4
 800b908:	7818      	ldrb	r0, [r3, #0]
 800b90a:	193b      	adds	r3, r7, r4
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	4aa3      	ldr	r2, [pc, #652]	@ (800bb9c <SGP_GetMeasurementValues+0x380>)
 800b910:	5cd3      	ldrb	r3, [r2, r3]
 800b912:	4aa7      	ldr	r2, [pc, #668]	@ (800bbb0 <SGP_GetMeasurementValues+0x394>)
 800b914:	49a7      	ldr	r1, [pc, #668]	@ (800bbb4 <SGP_GetMeasurementValues+0x398>)
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	0003      	movs	r3, r0
 800b91a:	2003      	movs	r0, #3
 800b91c:	f002 fd9a 	bl	800e454 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b920:	193b      	adds	r3, r7, r4
 800b922:	781a      	ldrb	r2, [r3, #0]
 800b924:	193b      	adds	r3, r7, r4
 800b926:	3201      	adds	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	230f      	movs	r3, #15
 800b92c:	18fb      	adds	r3, r7, r3
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b02      	cmp	r3, #2
 800b932:	d9e7      	bls.n	800b904 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b934:	2300      	movs	r3, #0
 800b936:	e173      	b.n	800bc20 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b938:	f003 f9d2 	bl	800ece0 <HAL_GetTick>
 800b93c:	0003      	movs	r3, r0
 800b93e:	22fa      	movs	r2, #250	@ 0xfa
 800b940:	0092      	lsls	r2, r2, #2
 800b942:	189a      	adds	r2, r3, r2
 800b944:	4b9c      	ldr	r3, [pc, #624]	@ (800bbb8 <SGP_GetMeasurementValues+0x39c>)
 800b946:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b948:	f7ff ff5a 	bl	800b800 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b94c:	4b9b      	ldr	r3, [pc, #620]	@ (800bbbc <SGP_GetMeasurementValues+0x3a0>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	3301      	adds	r3, #1
 800b952:	b2da      	uxtb	r2, r3
 800b954:	4b99      	ldr	r3, [pc, #612]	@ (800bbbc <SGP_GetMeasurementValues+0x3a0>)
 800b956:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b958:	4b98      	ldr	r3, [pc, #608]	@ (800bbbc <SGP_GetMeasurementValues+0x3a0>)
 800b95a:	781a      	ldrb	r2, [r3, #0]
 800b95c:	4b98      	ldr	r3, [pc, #608]	@ (800bbc0 <SGP_GetMeasurementValues+0x3a4>)
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	429a      	cmp	r2, r3
 800b962:	d200      	bcs.n	800b966 <SGP_GetMeasurementValues+0x14a>
 800b964:	e144      	b.n	800bbf0 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b966:	4b8d      	ldr	r3, [pc, #564]	@ (800bb9c <SGP_GetMeasurementValues+0x380>)
 800b968:	785b      	ldrb	r3, [r3, #1]
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	b21a      	sxth	r2, r3
 800b96e:	4b8b      	ldr	r3, [pc, #556]	@ (800bb9c <SGP_GetMeasurementValues+0x380>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	b21b      	sxth	r3, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	b21a      	sxth	r2, r3
 800b978:	240c      	movs	r4, #12
 800b97a:	193b      	adds	r3, r7, r4
 800b97c:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b982:	193b      	adds	r3, r7, r4
 800b984:	8819      	ldrh	r1, [r3, #0]
 800b986:	2308      	movs	r3, #8
 800b988:	18fa      	adds	r2, r7, r3
 800b98a:	4b8e      	ldr	r3, [pc, #568]	@ (800bbc4 <SGP_GetMeasurementValues+0x3a8>)
 800b98c:	0018      	movs	r0, r3
 800b98e:	f7fe fe87 	bl	800a6a0 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b992:	4b8d      	ldr	r3, [pc, #564]	@ (800bbc8 <SGP_GetMeasurementValues+0x3ac>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	3301      	adds	r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	4b8b      	ldr	r3, [pc, #556]	@ (800bbc8 <SGP_GetMeasurementValues+0x3ac>)
 800b99c:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b99e:	4b8a      	ldr	r3, [pc, #552]	@ (800bbc8 <SGP_GetMeasurementValues+0x3ac>)
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d10d      	bne.n	800b9c2 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b9a6:	193b      	adds	r3, r7, r4
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	4a88      	ldr	r2, [pc, #544]	@ (800bbcc <SGP_GetMeasurementValues+0x3b0>)
 800b9ac:	4981      	ldr	r1, [pc, #516]	@ (800bbb4 <SGP_GetMeasurementValues+0x398>)
 800b9ae:	2003      	movs	r0, #3
 800b9b0:	f002 fd50 	bl	800e454 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	4a86      	ldr	r2, [pc, #536]	@ (800bbd0 <SGP_GetMeasurementValues+0x3b4>)
 800b9b8:	497e      	ldr	r1, [pc, #504]	@ (800bbb4 <SGP_GetMeasurementValues+0x398>)
 800b9ba:	2003      	movs	r0, #3
 800b9bc:	f002 fd4a 	bl	800e454 <CreateLine>
 800b9c0:	e006      	b.n	800b9d0 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b9c2:	4b81      	ldr	r3, [pc, #516]	@ (800bbc8 <SGP_GetMeasurementValues+0x3ac>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b0b      	cmp	r3, #11
 800b9c8:	d102      	bne.n	800b9d0 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b9ca:	4b7f      	ldr	r3, [pc, #508]	@ (800bbc8 <SGP_GetMeasurementValues+0x3ac>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	dd5a      	ble.n	800ba94 <SGP_GetMeasurementValues+0x278>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b64      	cmp	r3, #100	@ 0x64
 800b9e4:	dc56      	bgt.n	800ba94 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	0018      	movs	r0, r3
 800b9ec:	f7f7 fce8 	bl	80033c0 <__aeabi_i2d>
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	4b78      	ldr	r3, [pc, #480]	@ (800bbd4 <SGP_GetMeasurementValues+0x3b8>)
 800b9f4:	f7f6 f9de 	bl	8001db4 <__aeabi_ddiv>
 800b9f8:	0002      	movs	r2, r0
 800b9fa:	000b      	movs	r3, r1
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	4976      	ldr	r1, [pc, #472]	@ (800bbd8 <SGP_GetMeasurementValues+0x3bc>)
 800ba00:	f7f7 f8e4 	bl	8002bcc <__aeabi_dsub>
 800ba04:	0002      	movs	r2, r0
 800ba06:	000b      	movs	r3, r1
 800ba08:	0014      	movs	r4, r2
 800ba0a:	001d      	movs	r5, r3
 800ba0c:	4b73      	ldr	r3, [pc, #460]	@ (800bbdc <SGP_GetMeasurementValues+0x3c0>)
 800ba0e:	881b      	ldrh	r3, [r3, #0]
 800ba10:	0018      	movs	r0, r3
 800ba12:	f7f7 fcd5 	bl	80033c0 <__aeabi_i2d>
 800ba16:	0002      	movs	r2, r0
 800ba18:	000b      	movs	r3, r1
 800ba1a:	0020      	movs	r0, r4
 800ba1c:	0029      	movs	r1, r5
 800ba1e:	f7f6 fe0d 	bl	800263c <__aeabi_dmul>
 800ba22:	0002      	movs	r2, r0
 800ba24:	000b      	movs	r3, r1
 800ba26:	0010      	movs	r0, r2
 800ba28:	0019      	movs	r1, r3
 800ba2a:	f7f4 fe0f 	bl	800064c <__aeabi_d2uiz>
 800ba2e:	0003      	movs	r3, r0
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	4b6b      	ldr	r3, [pc, #428]	@ (800bbe0 <SGP_GetMeasurementValues+0x3c4>)
 800ba34:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f7f7 fcc0 	bl	80033c0 <__aeabi_i2d>
 800ba40:	2200      	movs	r2, #0
 800ba42:	4b64      	ldr	r3, [pc, #400]	@ (800bbd4 <SGP_GetMeasurementValues+0x3b8>)
 800ba44:	f7f6 f9b6 	bl	8001db4 <__aeabi_ddiv>
 800ba48:	0002      	movs	r2, r0
 800ba4a:	000b      	movs	r3, r1
 800ba4c:	0014      	movs	r4, r2
 800ba4e:	001d      	movs	r5, r3
 800ba50:	4b62      	ldr	r3, [pc, #392]	@ (800bbdc <SGP_GetMeasurementValues+0x3c0>)
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	0018      	movs	r0, r3
 800ba56:	f7f7 fcb3 	bl	80033c0 <__aeabi_i2d>
 800ba5a:	0002      	movs	r2, r0
 800ba5c:	000b      	movs	r3, r1
 800ba5e:	0020      	movs	r0, r4
 800ba60:	0029      	movs	r1, r5
 800ba62:	f7f6 fdeb 	bl	800263c <__aeabi_dmul>
 800ba66:	0002      	movs	r2, r0
 800ba68:	000b      	movs	r3, r1
 800ba6a:	0010      	movs	r0, r2
 800ba6c:	0019      	movs	r1, r3
 800ba6e:	f7f4 fded 	bl	800064c <__aeabi_d2uiz>
 800ba72:	0003      	movs	r3, r0
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	4b5b      	ldr	r3, [pc, #364]	@ (800bbe4 <SGP_GetMeasurementValues+0x3c8>)
 800ba78:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800ba7a:	4b58      	ldr	r3, [pc, #352]	@ (800bbdc <SGP_GetMeasurementValues+0x3c0>)
 800ba7c:	881a      	ldrh	r2, [r3, #0]
 800ba7e:	4b5a      	ldr	r3, [pc, #360]	@ (800bbe8 <SGP_GetMeasurementValues+0x3cc>)
 800ba80:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800ba82:	4b59      	ldr	r3, [pc, #356]	@ (800bbe8 <SGP_GetMeasurementValues+0x3cc>)
 800ba84:	8818      	ldrh	r0, [r3, #0]
 800ba86:	4b56      	ldr	r3, [pc, #344]	@ (800bbe0 <SGP_GetMeasurementValues+0x3c4>)
 800ba88:	8819      	ldrh	r1, [r3, #0]
 800ba8a:	4b56      	ldr	r3, [pc, #344]	@ (800bbe4 <SGP_GetMeasurementValues+0x3c8>)
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	001a      	movs	r2, r3
 800ba90:	f001 fc2c 	bl	800d2ec <SetVocLED>
      }
      if(*vocIndex > 100){
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b64      	cmp	r3, #100	@ 0x64
 800ba9a:	dd66      	ble.n	800bb6a <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	0018      	movs	r0, r3
 800baa2:	f7f7 fc8d 	bl	80033c0 <__aeabi_i2d>
 800baa6:	2200      	movs	r2, #0
 800baa8:	4b4a      	ldr	r3, [pc, #296]	@ (800bbd4 <SGP_GetMeasurementValues+0x3b8>)
 800baaa:	f7f7 f88f 	bl	8002bcc <__aeabi_dsub>
 800baae:	0002      	movs	r2, r0
 800bab0:	000b      	movs	r3, r1
 800bab2:	0010      	movs	r0, r2
 800bab4:	0019      	movs	r1, r3
 800bab6:	2200      	movs	r2, #0
 800bab8:	4b4c      	ldr	r3, [pc, #304]	@ (800bbec <SGP_GetMeasurementValues+0x3d0>)
 800baba:	f7f6 f97b 	bl	8001db4 <__aeabi_ddiv>
 800babe:	0002      	movs	r2, r0
 800bac0:	000b      	movs	r3, r1
 800bac2:	0014      	movs	r4, r2
 800bac4:	001d      	movs	r5, r3
 800bac6:	4b45      	ldr	r3, [pc, #276]	@ (800bbdc <SGP_GetMeasurementValues+0x3c0>)
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	0018      	movs	r0, r3
 800bacc:	f7f7 fc78 	bl	80033c0 <__aeabi_i2d>
 800bad0:	0002      	movs	r2, r0
 800bad2:	000b      	movs	r3, r1
 800bad4:	0020      	movs	r0, r4
 800bad6:	0029      	movs	r1, r5
 800bad8:	f7f6 fdb0 	bl	800263c <__aeabi_dmul>
 800badc:	0002      	movs	r2, r0
 800bade:	000b      	movs	r3, r1
 800bae0:	0010      	movs	r0, r2
 800bae2:	0019      	movs	r1, r3
 800bae4:	f7f4 fdb2 	bl	800064c <__aeabi_d2uiz>
 800bae8:	0003      	movs	r3, r0
 800baea:	b29a      	uxth	r2, r3
 800baec:	4b3c      	ldr	r3, [pc, #240]	@ (800bbe0 <SGP_GetMeasurementValues+0x3c4>)
 800baee:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	0018      	movs	r0, r3
 800baf6:	f7f7 fc63 	bl	80033c0 <__aeabi_i2d>
 800bafa:	2200      	movs	r2, #0
 800bafc:	4b35      	ldr	r3, [pc, #212]	@ (800bbd4 <SGP_GetMeasurementValues+0x3b8>)
 800bafe:	f7f7 f865 	bl	8002bcc <__aeabi_dsub>
 800bb02:	0002      	movs	r2, r0
 800bb04:	000b      	movs	r3, r1
 800bb06:	0010      	movs	r0, r2
 800bb08:	0019      	movs	r1, r3
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	4b37      	ldr	r3, [pc, #220]	@ (800bbec <SGP_GetMeasurementValues+0x3d0>)
 800bb0e:	f7f6 f951 	bl	8001db4 <__aeabi_ddiv>
 800bb12:	0002      	movs	r2, r0
 800bb14:	000b      	movs	r3, r1
 800bb16:	2000      	movs	r0, #0
 800bb18:	492f      	ldr	r1, [pc, #188]	@ (800bbd8 <SGP_GetMeasurementValues+0x3bc>)
 800bb1a:	f7f7 f857 	bl	8002bcc <__aeabi_dsub>
 800bb1e:	0002      	movs	r2, r0
 800bb20:	000b      	movs	r3, r1
 800bb22:	0014      	movs	r4, r2
 800bb24:	001d      	movs	r5, r3
 800bb26:	4b2d      	ldr	r3, [pc, #180]	@ (800bbdc <SGP_GetMeasurementValues+0x3c0>)
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	0018      	movs	r0, r3
 800bb2c:	f7f7 fc48 	bl	80033c0 <__aeabi_i2d>
 800bb30:	0002      	movs	r2, r0
 800bb32:	000b      	movs	r3, r1
 800bb34:	0020      	movs	r0, r4
 800bb36:	0029      	movs	r1, r5
 800bb38:	f7f6 fd80 	bl	800263c <__aeabi_dmul>
 800bb3c:	0002      	movs	r2, r0
 800bb3e:	000b      	movs	r3, r1
 800bb40:	0010      	movs	r0, r2
 800bb42:	0019      	movs	r1, r3
 800bb44:	f7f4 fd82 	bl	800064c <__aeabi_d2uiz>
 800bb48:	0003      	movs	r3, r0
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	4b26      	ldr	r3, [pc, #152]	@ (800bbe8 <SGP_GetMeasurementValues+0x3cc>)
 800bb4e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800bb50:	4b22      	ldr	r3, [pc, #136]	@ (800bbdc <SGP_GetMeasurementValues+0x3c0>)
 800bb52:	881a      	ldrh	r2, [r3, #0]
 800bb54:	4b23      	ldr	r3, [pc, #140]	@ (800bbe4 <SGP_GetMeasurementValues+0x3c8>)
 800bb56:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bb58:	4b23      	ldr	r3, [pc, #140]	@ (800bbe8 <SGP_GetMeasurementValues+0x3cc>)
 800bb5a:	8818      	ldrh	r0, [r3, #0]
 800bb5c:	4b20      	ldr	r3, [pc, #128]	@ (800bbe0 <SGP_GetMeasurementValues+0x3c4>)
 800bb5e:	8819      	ldrh	r1, [r3, #0]
 800bb60:	4b20      	ldr	r3, [pc, #128]	@ (800bbe4 <SGP_GetMeasurementValues+0x3c8>)
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	001a      	movs	r2, r3
 800bb66:	f001 fbc1 	bl	800d2ec <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800bb6a:	4b14      	ldr	r3, [pc, #80]	@ (800bbbc <SGP_GetMeasurementValues+0x3a0>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800bb70:	4b05      	ldr	r3, [pc, #20]	@ (800bb88 <SGP_GetMeasurementValues+0x36c>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb76:	4b03      	ldr	r3, [pc, #12]	@ (800bb84 <SGP_GetMeasurementValues+0x368>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e04f      	b.n	800bc20 <SGP_GetMeasurementValues+0x404>
 800bb80:	200010a0 	.word	0x200010a0
 800bb84:	2000114d 	.word	0x2000114d
 800bb88:	2000114c 	.word	0x2000114c
 800bb8c:	20000098 	.word	0x20000098
 800bb90:	200000ac 	.word	0x200000ac
 800bb94:	20000090 	.word	0x20000090
 800bb98:	200010a1 	.word	0x200010a1
 800bb9c:	20001090 	.word	0x20001090
 800bba0:	08024c00 	.word	0x08024c00
 800bba4:	08024c28 	.word	0x08024c28
 800bba8:	08024c2c 	.word	0x08024c2c
 800bbac:	08024c4c 	.word	0x08024c4c
 800bbb0:	08024c50 	.word	0x08024c50
 800bbb4:	08024c70 	.word	0x08024c70
 800bbb8:	200000a8 	.word	0x200000a8
 800bbbc:	20001099 	.word	0x20001099
 800bbc0:	200000a2 	.word	0x200000a2
 800bbc4:	200010a4 	.word	0x200010a4
 800bbc8:	2000109a 	.word	0x2000109a
 800bbcc:	08024c74 	.word	0x08024c74
 800bbd0:	08024c90 	.word	0x08024c90
 800bbd4:	40590000 	.word	0x40590000
 800bbd8:	3ff00000 	.word	0x3ff00000
 800bbdc:	200000b0 	.word	0x200000b0
 800bbe0:	20001158 	.word	0x20001158
 800bbe4:	20001156 	.word	0x20001156
 800bbe8:	20001154 	.word	0x20001154
 800bbec:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bbf0:	f7ff fdf8 	bl	800b7e4 <SGP_MeasurementDone>
 800bbf4:	1e03      	subs	r3, r0, #0
 800bbf6:	d012      	beq.n	800bc1e <SGP_GetMeasurementValues+0x402>
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc28 <SGP_GetMeasurementValues+0x40c>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00e      	beq.n	800bc1e <SGP_GetMeasurementValues+0x402>
 800bc00:	4b0a      	ldr	r3, [pc, #40]	@ (800bc2c <SGP_GetMeasurementValues+0x410>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00a      	beq.n	800bc1e <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bc08:	4a09      	ldr	r2, [pc, #36]	@ (800bc30 <SGP_GetMeasurementValues+0x414>)
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc34 <SGP_GetMeasurementValues+0x418>)
 800bc0c:	0019      	movs	r1, r3
 800bc0e:	2003      	movs	r0, #3
 800bc10:	f002 fc20 	bl	800e454 <CreateLine>
    SGP_StartMeasurement();
 800bc14:	f7ff fd92 	bl	800b73c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bc18:	4b07      	ldr	r3, [pc, #28]	@ (800bc38 <SGP_GetMeasurementValues+0x41c>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	0018      	movs	r0, r3
 800bc22:	46bd      	mov	sp, r7
 800bc24:	b004      	add	sp, #16
 800bc26:	bdb0      	pop	{r4, r5, r7, pc}
 800bc28:	200010a0 	.word	0x200010a0
 800bc2c:	200010a1 	.word	0x200010a1
 800bc30:	08024cac 	.word	0x08024cac
 800bc34:	08024c70 	.word	0x08024c70
 800bc38:	2000114d 	.word	0x2000114d

0800bc3c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc42:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <SGP_DeviceConnected+0x70>)
 800bc44:	2202      	movs	r2, #2
 800bc46:	0019      	movs	r1, r3
 800bc48:	2059      	movs	r0, #89	@ 0x59
 800bc4a:	f7ff fd0b 	bl	800b664 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc4e:	2001      	movs	r0, #1
 800bc50:	f003 f850 	bl	800ecf4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc54:	4b16      	ldr	r3, [pc, #88]	@ (800bcb0 <SGP_DeviceConnected+0x74>)
 800bc56:	2209      	movs	r2, #9
 800bc58:	0019      	movs	r1, r3
 800bc5a:	2059      	movs	r0, #89	@ 0x59
 800bc5c:	f7ff fce4 	bl	800b628 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc60:	1dfb      	adds	r3, r7, #7
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	e011      	b.n	800bc8c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc68:	1dfb      	adds	r3, r7, #7
 800bc6a:	7818      	ldrb	r0, [r3, #0]
 800bc6c:	1dfb      	adds	r3, r7, #7
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	4a0f      	ldr	r2, [pc, #60]	@ (800bcb0 <SGP_DeviceConnected+0x74>)
 800bc72:	5cd3      	ldrb	r3, [r2, r3]
 800bc74:	4a0f      	ldr	r2, [pc, #60]	@ (800bcb4 <SGP_DeviceConnected+0x78>)
 800bc76:	4910      	ldr	r1, [pc, #64]	@ (800bcb8 <SGP_DeviceConnected+0x7c>)
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	0003      	movs	r3, r0
 800bc7c:	2002      	movs	r0, #2
 800bc7e:	f002 fbe9 	bl	800e454 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc82:	1dfb      	adds	r3, r7, #7
 800bc84:	781a      	ldrb	r2, [r3, #0]
 800bc86:	1dfb      	adds	r3, r7, #7
 800bc88:	3201      	adds	r2, #1
 800bc8a:	701a      	strb	r2, [r3, #0]
 800bc8c:	1dfb      	adds	r3, r7, #7
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b08      	cmp	r3, #8
 800bc92:	d9e9      	bls.n	800bc68 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc94:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <SGP_DeviceConnected+0x74>)
 800bc96:	2203      	movs	r2, #3
 800bc98:	2109      	movs	r1, #9
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f000 f80e 	bl	800bcbc <CheckCRC>
 800bca0:	0003      	movs	r3, r0
}
 800bca2:	0018      	movs	r0, r3
 800bca4:	46bd      	mov	sp, r7
 800bca6:	b002      	add	sp, #8
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	46c0      	nop			@ (mov r8, r8)
 800bcac:	2000008c 	.word	0x2000008c
 800bcb0:	20001090 	.word	0x20001090
 800bcb4:	08024ccc 	.word	0x08024ccc
 800bcb8:	08024c4c 	.word	0x08024c4c

0800bcbc <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcbe:	b08f      	sub	sp, #60	@ 0x3c
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6278      	str	r0, [r7, #36]	@ 0x24
 800bcc4:	0008      	movs	r0, r1
 800bcc6:	0011      	movs	r1, r2
 800bcc8:	2323      	movs	r3, #35	@ 0x23
 800bcca:	18fb      	adds	r3, r7, r3
 800bccc:	1c02      	adds	r2, r0, #0
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	2322      	movs	r3, #34	@ 0x22
 800bcd2:	18fb      	adds	r3, r7, r3
 800bcd4:	1c0a      	adds	r2, r1, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bcd8:	2317      	movs	r3, #23
 800bcda:	2220      	movs	r2, #32
 800bcdc:	189b      	adds	r3, r3, r2
 800bcde:	19db      	adds	r3, r3, r7
 800bce0:	2200      	movs	r2, #0
 800bce2:	701a      	strb	r2, [r3, #0]
 800bce4:	e09f      	b.n	800be26 <CheckCRC+0x16a>
 800bce6:	466b      	mov	r3, sp
 800bce8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bcea:	2322      	movs	r3, #34	@ 0x22
 800bcec:	18fb      	adds	r3, r7, r3
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	001a      	movs	r2, r3
 800bcf2:	3a01      	subs	r2, #1
 800bcf4:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcf6:	60bb      	str	r3, [r7, #8]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	60fa      	str	r2, [r7, #12]
 800bcfc:	68b8      	ldr	r0, [r7, #8]
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	0002      	movs	r2, r0
 800bd02:	0f52      	lsrs	r2, r2, #29
 800bd04:	000c      	movs	r4, r1
 800bd06:	00e4      	lsls	r4, r4, #3
 800bd08:	61fc      	str	r4, [r7, #28]
 800bd0a:	69fc      	ldr	r4, [r7, #28]
 800bd0c:	4314      	orrs	r4, r2
 800bd0e:	61fc      	str	r4, [r7, #28]
 800bd10:	0002      	movs	r2, r0
 800bd12:	00d2      	lsls	r2, r2, #3
 800bd14:	61ba      	str	r2, [r7, #24]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	6838      	ldr	r0, [r7, #0]
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	0002      	movs	r2, r0
 800bd22:	0f52      	lsrs	r2, r2, #29
 800bd24:	000c      	movs	r4, r1
 800bd26:	00e4      	lsls	r4, r4, #3
 800bd28:	617c      	str	r4, [r7, #20]
 800bd2a:	697c      	ldr	r4, [r7, #20]
 800bd2c:	4314      	orrs	r4, r2
 800bd2e:	617c      	str	r4, [r7, #20]
 800bd30:	0002      	movs	r2, r0
 800bd32:	00d2      	lsls	r2, r2, #3
 800bd34:	613a      	str	r2, [r7, #16]
 800bd36:	3307      	adds	r3, #7
 800bd38:	08db      	lsrs	r3, r3, #3
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	466a      	mov	r2, sp
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	469d      	mov	sp, r3
 800bd42:	466b      	mov	r3, sp
 800bd44:	3300      	adds	r3, #0
 800bd46:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd48:	2316      	movs	r3, #22
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	189b      	adds	r3, r3, r2
 800bd4e:	19db      	adds	r3, r3, r7
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	e01e      	b.n	800bd94 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd56:	2317      	movs	r3, #23
 800bd58:	2220      	movs	r2, #32
 800bd5a:	189b      	adds	r3, r3, r2
 800bd5c:	19db      	adds	r3, r3, r7
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	2116      	movs	r1, #22
 800bd62:	2320      	movs	r3, #32
 800bd64:	18cb      	adds	r3, r1, r3
 800bd66:	19db      	adds	r3, r3, r7
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	18d3      	adds	r3, r2, r3
 800bd6c:	001a      	movs	r2, r3
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd70:	189a      	adds	r2, r3, r2
 800bd72:	0008      	movs	r0, r1
 800bd74:	2320      	movs	r3, #32
 800bd76:	18cb      	adds	r3, r1, r3
 800bd78:	19db      	adds	r3, r3, r7
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	7811      	ldrb	r1, [r2, #0]
 800bd7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd80:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd82:	2320      	movs	r3, #32
 800bd84:	18c3      	adds	r3, r0, r3
 800bd86:	19db      	adds	r3, r3, r7
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	2320      	movs	r3, #32
 800bd8c:	18c3      	adds	r3, r0, r3
 800bd8e:	19db      	adds	r3, r3, r7
 800bd90:	3201      	adds	r2, #1
 800bd92:	701a      	strb	r2, [r3, #0]
 800bd94:	2316      	movs	r3, #22
 800bd96:	2220      	movs	r2, #32
 800bd98:	189b      	adds	r3, r3, r2
 800bd9a:	19da      	adds	r2, r3, r7
 800bd9c:	2322      	movs	r3, #34	@ 0x22
 800bd9e:	18fb      	adds	r3, r7, r3
 800bda0:	7812      	ldrb	r2, [r2, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d3d6      	bcc.n	800bd56 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bda8:	2417      	movs	r4, #23
 800bdaa:	2320      	movs	r3, #32
 800bdac:	18e3      	adds	r3, r4, r3
 800bdae:	19db      	adds	r3, r3, r7
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	2322      	movs	r3, #34	@ 0x22
 800bdb4:	18fb      	adds	r3, r7, r3
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	18d3      	adds	r3, r2, r3
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdbe:	18d2      	adds	r2, r2, r3
 800bdc0:	250b      	movs	r5, #11
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	18eb      	adds	r3, r5, r3
 800bdc6:	19db      	adds	r3, r3, r7
 800bdc8:	7812      	ldrb	r2, [r2, #0]
 800bdca:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bdcc:	2322      	movs	r3, #34	@ 0x22
 800bdce:	18fb      	adds	r3, r7, r3
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd8:	0011      	movs	r1, r2
 800bdda:	0018      	movs	r0, r3
 800bddc:	f000 f838 	bl	800be50 <CalculateCRC>
 800bde0:	0003      	movs	r3, r0
 800bde2:	001a      	movs	r2, r3
 800bde4:	2320      	movs	r3, #32
 800bde6:	18eb      	adds	r3, r5, r3
 800bde8:	19db      	adds	r3, r3, r7
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d00c      	beq.n	800be0a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bdf0:	2320      	movs	r3, #32
 800bdf2:	18e3      	adds	r3, r4, r3
 800bdf4:	19db      	adds	r3, r3, r7
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	4a13      	ldr	r2, [pc, #76]	@ (800be48 <CheckCRC+0x18c>)
 800bdfc:	4913      	ldr	r1, [pc, #76]	@ (800be4c <CheckCRC+0x190>)
 800bdfe:	2001      	movs	r0, #1
 800be00:	f002 fb28 	bl	800e454 <CreateLine>
      return false;
 800be04:	2300      	movs	r3, #0
 800be06:	46b5      	mov	sp, r6
 800be08:	e019      	b.n	800be3e <CheckCRC+0x182>
 800be0a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800be0c:	2217      	movs	r2, #23
 800be0e:	2320      	movs	r3, #32
 800be10:	18d3      	adds	r3, r2, r3
 800be12:	19db      	adds	r3, r3, r7
 800be14:	2120      	movs	r1, #32
 800be16:	1852      	adds	r2, r2, r1
 800be18:	19d1      	adds	r1, r2, r7
 800be1a:	2222      	movs	r2, #34	@ 0x22
 800be1c:	18ba      	adds	r2, r7, r2
 800be1e:	7809      	ldrb	r1, [r1, #0]
 800be20:	7812      	ldrb	r2, [r2, #0]
 800be22:	188a      	adds	r2, r1, r2
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	2317      	movs	r3, #23
 800be28:	2220      	movs	r2, #32
 800be2a:	189b      	adds	r3, r3, r2
 800be2c:	19da      	adds	r2, r3, r7
 800be2e:	2323      	movs	r3, #35	@ 0x23
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	7812      	ldrb	r2, [r2, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d200      	bcs.n	800be3c <CheckCRC+0x180>
 800be3a:	e754      	b.n	800bce6 <CheckCRC+0x2a>
    }
  }
  return true;
 800be3c:	2301      	movs	r3, #1
}
 800be3e:	0018      	movs	r0, r3
 800be40:	46bd      	mov	sp, r7
 800be42:	b00f      	add	sp, #60	@ 0x3c
 800be44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be46:	46c0      	nop			@ (mov r8, r8)
 800be48:	08024cec 	.word	0x08024cec
 800be4c:	08024c28 	.word	0x08024c28

0800be50 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	000a      	movs	r2, r1
 800be5a:	1cfb      	adds	r3, r7, #3
 800be5c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be5e:	230f      	movs	r3, #15
 800be60:	18fb      	adds	r3, r7, r3
 800be62:	22ff      	movs	r2, #255	@ 0xff
 800be64:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be66:	230e      	movs	r3, #14
 800be68:	18fb      	adds	r3, r7, r3
 800be6a:	2200      	movs	r2, #0
 800be6c:	701a      	strb	r2, [r3, #0]
 800be6e:	e037      	b.n	800bee0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be70:	230e      	movs	r3, #14
 800be72:	18fb      	adds	r3, r7, r3
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	18d3      	adds	r3, r2, r3
 800be7a:	7819      	ldrb	r1, [r3, #0]
 800be7c:	220f      	movs	r2, #15
 800be7e:	18bb      	adds	r3, r7, r2
 800be80:	18ba      	adds	r2, r7, r2
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	404a      	eors	r2, r1
 800be86:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be88:	230d      	movs	r3, #13
 800be8a:	18fb      	adds	r3, r7, r3
 800be8c:	2200      	movs	r2, #0
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	e01b      	b.n	800beca <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be92:	210f      	movs	r1, #15
 800be94:	187b      	adds	r3, r7, r1
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	b25b      	sxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da09      	bge.n	800beb2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be9e:	187b      	adds	r3, r7, r1
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	b25b      	sxtb	r3, r3
 800bea6:	2231      	movs	r2, #49	@ 0x31
 800bea8:	4053      	eors	r3, r2
 800beaa:	b25a      	sxtb	r2, r3
 800beac:	187b      	adds	r3, r7, r1
 800beae:	701a      	strb	r2, [r3, #0]
 800beb0:	e005      	b.n	800bebe <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800beb2:	230f      	movs	r3, #15
 800beb4:	18fa      	adds	r2, r7, r3
 800beb6:	18fb      	adds	r3, r7, r3
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	18db      	adds	r3, r3, r3
 800bebc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800bebe:	210d      	movs	r1, #13
 800bec0:	187b      	adds	r3, r7, r1
 800bec2:	781a      	ldrb	r2, [r3, #0]
 800bec4:	187b      	adds	r3, r7, r1
 800bec6:	3201      	adds	r2, #1
 800bec8:	701a      	strb	r2, [r3, #0]
 800beca:	230d      	movs	r3, #13
 800becc:	18fb      	adds	r3, r7, r3
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b07      	cmp	r3, #7
 800bed2:	d9de      	bls.n	800be92 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800bed4:	210e      	movs	r1, #14
 800bed6:	187b      	adds	r3, r7, r1
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	187b      	adds	r3, r7, r1
 800bedc:	3201      	adds	r2, #1
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	230e      	movs	r3, #14
 800bee2:	18fa      	adds	r2, r7, r3
 800bee4:	1cfb      	adds	r3, r7, #3
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d3c0      	bcc.n	800be70 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800beee:	230f      	movs	r3, #15
 800bef0:	18fb      	adds	r3, r7, r3
 800bef2:	781b      	ldrb	r3, [r3, #0]
}
 800bef4:	0018      	movs	r0, r3
 800bef6:	46bd      	mov	sp, r7
 800bef8:	b004      	add	sp, #16
 800befa:	bd80      	pop	{r7, pc}

0800befc <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4936      	ldr	r1, [pc, #216]	@ (800bfe4 <SGP_GetHT+0xe8>)
 800bf0c:	1c18      	adds	r0, r3, #0
 800bf0e:	f7f4 fcd7 	bl	80008c0 <__aeabi_fadd>
 800bf12:	1c03      	adds	r3, r0, #0
 800bf14:	4934      	ldr	r1, [pc, #208]	@ (800bfe8 <SGP_GetHT+0xec>)
 800bf16:	1c18      	adds	r0, r3, #0
 800bf18:	f7f4 fe5c 	bl	8000bd4 <__aeabi_fdiv>
 800bf1c:	1c03      	adds	r3, r0, #0
 800bf1e:	4933      	ldr	r1, [pc, #204]	@ (800bfec <SGP_GetHT+0xf0>)
 800bf20:	1c18      	adds	r0, r3, #0
 800bf22:	f7f5 f83d 	bl	8000fa0 <__aeabi_fmul>
 800bf26:	1c03      	adds	r3, r0, #0
 800bf28:	1c18      	adds	r0, r3, #0
 800bf2a:	f7f4 fb77 	bl	800061c <__aeabi_f2uiz>
 800bf2e:	0003      	movs	r3, r0
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	4b2f      	ldr	r3, [pc, #188]	@ (800bff0 <SGP_GetHT+0xf4>)
 800bf34:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	492e      	ldr	r1, [pc, #184]	@ (800bff4 <SGP_GetHT+0xf8>)
 800bf3c:	1c18      	adds	r0, r3, #0
 800bf3e:	f7f4 fe49 	bl	8000bd4 <__aeabi_fdiv>
 800bf42:	1c03      	adds	r3, r0, #0
 800bf44:	4929      	ldr	r1, [pc, #164]	@ (800bfec <SGP_GetHT+0xf0>)
 800bf46:	1c18      	adds	r0, r3, #0
 800bf48:	f7f5 f82a 	bl	8000fa0 <__aeabi_fmul>
 800bf4c:	1c03      	adds	r3, r0, #0
 800bf4e:	1c18      	adds	r0, r3, #0
 800bf50:	f7f4 fb64 	bl	800061c <__aeabi_f2uiz>
 800bf54:	0003      	movs	r3, r0
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	4b27      	ldr	r3, [pc, #156]	@ (800bff8 <SGP_GetHT+0xfc>)
 800bf5a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf5c:	4b26      	ldr	r3, [pc, #152]	@ (800bff8 <SGP_GetHT+0xfc>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	4b25      	ldr	r3, [pc, #148]	@ (800bffc <SGP_GetHT+0x100>)
 800bf68:	709a      	strb	r2, [r3, #2]
 800bf6a:	4b24      	ldr	r3, [pc, #144]	@ (800bffc <SGP_GetHT+0x100>)
 800bf6c:	789a      	ldrb	r2, [r3, #2]
 800bf6e:	210c      	movs	r1, #12
 800bf70:	187b      	adds	r3, r7, r1
 800bf72:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf74:	4b20      	ldr	r3, [pc, #128]	@ (800bff8 <SGP_GetHT+0xfc>)
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	4b20      	ldr	r3, [pc, #128]	@ (800bffc <SGP_GetHT+0x100>)
 800bf7c:	70da      	strb	r2, [r3, #3]
 800bf7e:	4b1f      	ldr	r3, [pc, #124]	@ (800bffc <SGP_GetHT+0x100>)
 800bf80:	78da      	ldrb	r2, [r3, #3]
 800bf82:	187b      	adds	r3, r7, r1
 800bf84:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf86:	187b      	adds	r3, r7, r1
 800bf88:	2102      	movs	r1, #2
 800bf8a:	0018      	movs	r0, r3
 800bf8c:	f7ff ff60 	bl	800be50 <CalculateCRC>
 800bf90:	0003      	movs	r3, r0
 800bf92:	001a      	movs	r2, r3
 800bf94:	4b19      	ldr	r3, [pc, #100]	@ (800bffc <SGP_GetHT+0x100>)
 800bf96:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf98:	4b15      	ldr	r3, [pc, #84]	@ (800bff0 <SGP_GetHT+0xf4>)
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	0a1b      	lsrs	r3, r3, #8
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	4b16      	ldr	r3, [pc, #88]	@ (800bffc <SGP_GetHT+0x100>)
 800bfa4:	715a      	strb	r2, [r3, #5]
 800bfa6:	4b15      	ldr	r3, [pc, #84]	@ (800bffc <SGP_GetHT+0x100>)
 800bfa8:	795a      	ldrb	r2, [r3, #5]
 800bfaa:	2108      	movs	r1, #8
 800bfac:	187b      	adds	r3, r7, r1
 800bfae:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bff0 <SGP_GetHT+0xf4>)
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	4b11      	ldr	r3, [pc, #68]	@ (800bffc <SGP_GetHT+0x100>)
 800bfb8:	719a      	strb	r2, [r3, #6]
 800bfba:	4b10      	ldr	r3, [pc, #64]	@ (800bffc <SGP_GetHT+0x100>)
 800bfbc:	799a      	ldrb	r2, [r3, #6]
 800bfbe:	187b      	adds	r3, r7, r1
 800bfc0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	2102      	movs	r1, #2
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f7ff ff42 	bl	800be50 <CalculateCRC>
 800bfcc:	0003      	movs	r3, r0
 800bfce:	001a      	movs	r2, r3
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bffc <SGP_GetHT+0x100>)
 800bfd2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <SGP_GetHT+0x104>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	701a      	strb	r2, [r3, #0]
}
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	b004      	add	sp, #16
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	46c0      	nop			@ (mov r8, r8)
 800bfe4:	42340000 	.word	0x42340000
 800bfe8:	432f0000 	.word	0x432f0000
 800bfec:	477fff00 	.word	0x477fff00
 800bff0:	2000114a 	.word	0x2000114a
 800bff4:	42c80000 	.word	0x42c80000
 800bff8:	20001148 	.word	0x20001148
 800bffc:	20000098 	.word	0x20000098
 800c000:	2000114c 	.word	0x2000114c

0800c004 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c008:	4a09      	ldr	r2, [pc, #36]	@ (800c030 <SGP_SoftReset+0x2c>)
 800c00a:	4b0a      	ldr	r3, [pc, #40]	@ (800c034 <SGP_SoftReset+0x30>)
 800c00c:	0019      	movs	r1, r3
 800c00e:	2003      	movs	r0, #3
 800c010:	f002 fa20 	bl	800e454 <CreateLine>
  SGP_TurnHeaterOff();
 800c014:	f7ff fbf4 	bl	800b800 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c018:	200a      	movs	r0, #10
 800c01a:	f002 fe6b 	bl	800ecf4 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c01e:	4b06      	ldr	r3, [pc, #24]	@ (800c038 <SGP_SoftReset+0x34>)
 800c020:	2202      	movs	r2, #2
 800c022:	0019      	movs	r1, r3
 800c024:	2059      	movs	r0, #89	@ 0x59
 800c026:	f7ff fb1d 	bl	800b664 <WriteRegister>
}
 800c02a:	46c0      	nop			@ (mov r8, r8)
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	08024d94 	.word	0x08024d94
 800c034:	08024c70 	.word	0x08024c70
 800c038:	200000a0 	.word	0x200000a0

0800c03c <ResetVOCresult>:

void ResetVOCresult(void) {
 800c03c:	b580      	push	{r7, lr}
 800c03e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c040:	4b02      	ldr	r3, [pc, #8]	@ (800c04c <ResetVOCresult+0x10>)
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
}
 800c046:	46c0      	nop			@ (mov r8, r8)
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	20001150 	.word	0x20001150

0800c050 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c050:	b580      	push	{r7, lr}
 800c052:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c054:	4b37      	ldr	r3, [pc, #220]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b07      	cmp	r3, #7
 800c05a:	d85f      	bhi.n	800c11c <SGP_Upkeep+0xcc>
 800c05c:	009a      	lsls	r2, r3, #2
 800c05e:	4b36      	ldr	r3, [pc, #216]	@ (800c138 <SGP_Upkeep+0xe8>)
 800c060:	18d3      	adds	r3, r2, r3
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c066:	4a35      	ldr	r2, [pc, #212]	@ (800c13c <SGP_Upkeep+0xec>)
 800c068:	4b35      	ldr	r3, [pc, #212]	@ (800c140 <SGP_Upkeep+0xf0>)
 800c06a:	0019      	movs	r1, r3
 800c06c:	2003      	movs	r0, #3
 800c06e:	f002 f9f1 	bl	800e454 <CreateLine>
    break;
 800c072:	e05a      	b.n	800c12a <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c074:	f7ff ffe2 	bl	800c03c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c078:	4b2e      	ldr	r3, [pc, #184]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c07a:	2201      	movs	r2, #1
 800c07c:	701a      	strb	r2, [r3, #0]
    break;
 800c07e:	e054      	b.n	800c12a <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c080:	f7ff fb5c 	bl	800b73c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c084:	f001 f966 	bl	800d354 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c088:	4b2a      	ldr	r3, [pc, #168]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c08a:	2202      	movs	r2, #2
 800c08c:	701a      	strb	r2, [r3, #0]
    break;
 800c08e:	e04c      	b.n	800c12a <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c090:	4b2c      	ldr	r3, [pc, #176]	@ (800c144 <SGP_Upkeep+0xf4>)
 800c092:	0018      	movs	r0, r3
 800c094:	f7ff fbc2 	bl	800b81c <SGP_GetMeasurementValues>
 800c098:	1e03      	subs	r3, r0, #0
 800c09a:	d043      	beq.n	800c124 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c09c:	4b25      	ldr	r3, [pc, #148]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c09e:	2203      	movs	r2, #3
 800c0a0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0a2:	e03f      	b.n	800c124 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c0a4:	4b27      	ldr	r3, [pc, #156]	@ (800c144 <SGP_Upkeep+0xf4>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	0018      	movs	r0, r3
 800c0ac:	f7f7 fc4a 	bl	8003944 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c0b0:	4b20      	ldr	r3, [pc, #128]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c0b2:	2206      	movs	r2, #6
 800c0b4:	701a      	strb	r2, [r3, #0]
    break;
 800c0b6:	e038      	b.n	800c12a <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c0b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c0ba:	2207      	movs	r2, #7
 800c0bc:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c0be:	4b22      	ldr	r3, [pc, #136]	@ (800c148 <SGP_Upkeep+0xf8>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d112      	bne.n	800c0ec <SGP_Upkeep+0x9c>
 800c0c6:	4b21      	ldr	r3, [pc, #132]	@ (800c14c <SGP_Upkeep+0xfc>)
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	4053      	eors	r3, r2
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00b      	beq.n	800c0ec <SGP_Upkeep+0x9c>
      // restart the SGP40 with a soft reset to enter idle mode
      // During startup take 12 samples
      if (sgpinitdone) {
 800c0d4:	4b1e      	ldr	r3, [pc, #120]	@ (800c150 <SGP_Upkeep+0x100>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c0dc:	f7ff ff92 	bl	800c004 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	f7fc f993 	bl	800840c <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c0e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c150 <SGP_Upkeep+0x100>)
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c0ec:	f002 fdf8 	bl	800ece0 <HAL_GetTick>
 800c0f0:	0003      	movs	r3, r0
 800c0f2:	22c8      	movs	r2, #200	@ 0xc8
 800c0f4:	0092      	lsls	r2, r2, #2
 800c0f6:	189a      	adds	r2, r3, r2
 800c0f8:	4b16      	ldr	r3, [pc, #88]	@ (800c154 <SGP_Upkeep+0x104>)
 800c0fa:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0fc:	f001 f942 	bl	800d384 <ResetMeasurementIndicator>
  break;
 800c100:	e013      	b.n	800c12a <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c102:	4b14      	ldr	r3, [pc, #80]	@ (800c154 <SGP_Upkeep+0x104>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	0018      	movs	r0, r3
 800c108:	f002 f94e 	bl	800e3a8 <TimestampIsReached>
 800c10c:	1e03      	subs	r3, r0, #0
 800c10e:	d00b      	beq.n	800c128 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c110:	f7ff fafc 	bl	800b70c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c114:	4b07      	ldr	r3, [pc, #28]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c116:	2200      	movs	r2, #0
 800c118:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c11a:	e005      	b.n	800c128 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c11e:	2200      	movs	r2, #0
 800c120:	701a      	strb	r2, [r3, #0]
    break;
 800c122:	e002      	b.n	800c12a <SGP_Upkeep+0xda>
    break;
 800c124:	46c0      	nop			@ (mov r8, r8)
 800c126:	e000      	b.n	800c12a <SGP_Upkeep+0xda>
    break;
 800c128:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c12a:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <SGP_Upkeep+0xe4>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
}
 800c12e:	0018      	movs	r0, r3
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	2000115a 	.word	0x2000115a
 800c138:	080254fc 	.word	0x080254fc
 800c13c:	08024dac 	.word	0x08024dac
 800c140:	08024c70 	.word	0x08024c70
 800c144:	20001150 	.word	0x20001150
 800c148:	2000109a 	.word	0x2000109a
 800c14c:	20001ff5 	.word	0x20001ff5
 800c150:	20001084 	.word	0x20001084
 800c154:	2000109c 	.word	0x2000109c

0800c158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	0002      	movs	r2, r0
 800c160:	1dfb      	adds	r3, r7, #7
 800c162:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c164:	1dfb      	adds	r3, r7, #7
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b7f      	cmp	r3, #127	@ 0x7f
 800c16a:	d809      	bhi.n	800c180 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c16c:	1dfb      	adds	r3, r7, #7
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	001a      	movs	r2, r3
 800c172:	231f      	movs	r3, #31
 800c174:	401a      	ands	r2, r3
 800c176:	4b04      	ldr	r3, [pc, #16]	@ (800c188 <__NVIC_EnableIRQ+0x30>)
 800c178:	2101      	movs	r1, #1
 800c17a:	4091      	lsls	r1, r2
 800c17c:	000a      	movs	r2, r1
 800c17e:	601a      	str	r2, [r3, #0]
  }
}
 800c180:	46c0      	nop			@ (mov r8, r8)
 800c182:	46bd      	mov	sp, r7
 800c184:	b002      	add	sp, #8
 800c186:	bd80      	pop	{r7, pc}
 800c188:	e000e100 	.word	0xe000e100

0800c18c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	0002      	movs	r2, r0
 800c194:	1dfb      	adds	r3, r7, #7
 800c196:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c198:	1dfb      	adds	r3, r7, #7
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c19e:	d810      	bhi.n	800c1c2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c1a0:	1dfb      	adds	r3, r7, #7
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	001a      	movs	r2, r3
 800c1a6:	231f      	movs	r3, #31
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	4908      	ldr	r1, [pc, #32]	@ (800c1cc <__NVIC_DisableIRQ+0x40>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	409a      	lsls	r2, r3
 800c1b0:	0013      	movs	r3, r2
 800c1b2:	2280      	movs	r2, #128	@ 0x80
 800c1b4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c1b6:	f3bf 8f4f 	dsb	sy
}
 800c1ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1bc:	f3bf 8f6f 	isb	sy
}
 800c1c0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c1c2:	46c0      	nop			@ (mov r8, r8)
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	b002      	add	sp, #8
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	46c0      	nop			@ (mov r8, r8)
 800c1cc:	e000e100 	.word	0xe000e100

0800c1d0 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c1d0:	b5b0      	push	{r4, r5, r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	0008      	movs	r0, r1
 800c1da:	0011      	movs	r1, r2
 800c1dc:	1cfb      	adds	r3, r7, #3
 800c1de:	1c02      	adds	r2, r0, #0
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	1cbb      	adds	r3, r7, #2
 800c1e4:	1c0a      	adds	r2, r1, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c1e8:	4b5b      	ldr	r3, [pc, #364]	@ (800c358 <getSoundData+0x188>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	4053      	eors	r3, r2
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d107      	bne.n	800c208 <getSoundData+0x38>
 800c1f8:	4b58      	ldr	r3, [pc, #352]	@ (800c35c <getSoundData+0x18c>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2201      	movs	r2, #1
 800c200:	4053      	eors	r3, r2
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <getSoundData+0x3c>
    {
        return false;
 800c208:	2300      	movs	r3, #0
 800c20a:	e0a0      	b.n	800c34e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c20c:	4b54      	ldr	r3, [pc, #336]	@ (800c360 <getSoundData+0x190>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d005      	beq.n	800c222 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c216:	4b53      	ldr	r3, [pc, #332]	@ (800c364 <getSoundData+0x194>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	b25b      	sxtb	r3, r3
 800c21c:	0018      	movs	r0, r3
 800c21e:	f7ff ffb5 	bl	800c18c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c222:	f3bf 8f4f 	dsb	sy
}
 800c226:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c228:	f3bf 8f6f 	isb	sy
}
 800c22c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c22e:	1cfb      	adds	r3, r7, #3
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d04c      	beq.n	800c2d0 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c236:	4b4c      	ldr	r3, [pc, #304]	@ (800c368 <getSoundData+0x198>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d11b      	bne.n	800c276 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	e00e      	b.n	800c26e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	18d3      	adds	r3, r2, r3
 800c256:	3302      	adds	r3, #2
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	18d3      	adds	r3, r2, r3
 800c262:	3308      	adds	r3, #8
 800c264:	2200      	movs	r2, #0
 800c266:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	3301      	adds	r3, #1
 800c26c:	617b      	str	r3, [r7, #20]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b05      	cmp	r3, #5
 800c272:	d9ed      	bls.n	800c250 <getSoundData+0x80>
 800c274:	e02c      	b.n	800c2d0 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	1c59      	adds	r1, r3, #1
 800c27c:	4b3b      	ldr	r3, [pc, #236]	@ (800c36c <getSoundData+0x19c>)
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b3b      	ldr	r3, [pc, #236]	@ (800c370 <getSoundData+0x1a0>)
 800c282:	681c      	ldr	r4, [r3, #0]
 800c284:	4b38      	ldr	r3, [pc, #224]	@ (800c368 <getSoundData+0x198>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	0023      	movs	r3, r4
 800c28c:	f000 fde8 	bl	800ce60 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c290:	2300      	movs	r3, #0
 800c292:	613b      	str	r3, [r7, #16]
 800c294:	e019      	b.n	800c2ca <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	18d3      	adds	r3, r2, r3
 800c29c:	1c98      	adds	r0, r3, #2
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c2a6:	4b33      	ldr	r3, [pc, #204]	@ (800c374 <getSoundData+0x1a4>)
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	0092      	lsls	r2, r2, #2
 800c2ac:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c2ae:	4b32      	ldr	r3, [pc, #200]	@ (800c378 <getSoundData+0x1a8>)
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	0092      	lsls	r2, r2, #2
 800c2b4:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c2b6:	4b2c      	ldr	r3, [pc, #176]	@ (800c368 <getSoundData+0x198>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	0013      	movs	r3, r2
 800c2be:	0022      	movs	r2, r4
 800c2c0:	f000 fdce 	bl	800ce60 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b05      	cmp	r3, #5
 800c2ce:	d9e2      	bls.n	800c296 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c2d0:	1cbb      	adds	r3, r7, #2
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d028      	beq.n	800c32a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c2d8:	240e      	movs	r4, #14
 800c2da:	193b      	adds	r3, r7, r4
 800c2dc:	2200      	movs	r2, #0
 800c2de:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c2e0:	250d      	movs	r5, #13
 800c2e2:	197b      	adds	r3, r7, r5
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c2e8:	4b24      	ldr	r3, [pc, #144]	@ (800c37c <getSoundData+0x1ac>)
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	4924      	ldr	r1, [pc, #144]	@ (800c380 <getSoundData+0x1b0>)
 800c2ee:	197b      	adds	r3, r7, r5
 800c2f0:	193a      	adds	r2, r7, r4
 800c2f2:	f000 fe59 	bl	800cfa8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c2f6:	193b      	adds	r3, r7, r4
 800c2f8:	881a      	ldrh	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	21ff      	movs	r1, #255	@ 0xff
 800c2fe:	4011      	ands	r1, r2
 800c300:	000c      	movs	r4, r1
 800c302:	7b99      	ldrb	r1, [r3, #14]
 800c304:	2000      	movs	r0, #0
 800c306:	4001      	ands	r1, r0
 800c308:	1c08      	adds	r0, r1, #0
 800c30a:	1c21      	adds	r1, r4, #0
 800c30c:	4301      	orrs	r1, r0
 800c30e:	7399      	strb	r1, [r3, #14]
 800c310:	0a12      	lsrs	r2, r2, #8
 800c312:	b290      	uxth	r0, r2
 800c314:	7bda      	ldrb	r2, [r3, #15]
 800c316:	2100      	movs	r1, #0
 800c318:	400a      	ands	r2, r1
 800c31a:	1c11      	adds	r1, r2, #0
 800c31c:	1c02      	adds	r2, r0, #0
 800c31e:	430a      	orrs	r2, r1
 800c320:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c322:	197b      	adds	r3, r7, r5
 800c324:	781a      	ldrb	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c32a:	f000 f86f 	bl	800c40c <micSettlingComplete>
 800c32e:	0003      	movs	r3, r0
 800c330:	001a      	movs	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c336:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <getSoundData+0x190>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d005      	beq.n	800c34c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <getSoundData+0x194>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	b25b      	sxtb	r3, r3
 800c346:	0018      	movs	r0, r3
 800c348:	f7ff ff06 	bl	800c158 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c34c:	2301      	movs	r3, #1
}
 800c34e:	0018      	movs	r0, r3
 800c350:	46bd      	mov	sp, r7
 800c352:	b006      	add	sp, #24
 800c354:	bdb0      	pop	{r4, r5, r7, pc}
 800c356:	46c0      	nop			@ (mov r8, r8)
 800c358:	2000115c 	.word	0x2000115c
 800c35c:	2000115f 	.word	0x2000115f
 800c360:	2000115e 	.word	0x2000115e
 800c364:	20001bac 	.word	0x20001bac
 800c368:	20001be8 	.word	0x20001be8
 800c36c:	20001bb0 	.word	0x20001bb0
 800c370:	20001bb4 	.word	0x20001bb4
 800c374:	20001bb8 	.word	0x20001bb8
 800c378:	20001bd0 	.word	0x20001bd0
 800c37c:	20001164 	.word	0x20001164
 800c380:	3b5c7333 	.word	0x3b5c7333

0800c384 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	001a      	movs	r2, r3
 800c392:	1cfb      	adds	r3, r7, #3
 800c394:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c396:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <soundInit+0x38>)
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c39c:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <soundInit+0x3c>)
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c3a2:	4b08      	ldr	r3, [pc, #32]	@ (800c3c4 <soundInit+0x40>)
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c3a8:	4b07      	ldr	r3, [pc, #28]	@ (800c3c8 <soundInit+0x44>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	569a      	ldrsb	r2, [r3, r2]
 800c3ae:	4b06      	ldr	r3, [pc, #24]	@ (800c3c8 <soundInit+0x44>)
 800c3b0:	701a      	strb	r2, [r3, #0]

    return true;
 800c3b2:	2301      	movs	r3, #1
}
 800c3b4:	0018      	movs	r0, r3
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	b004      	add	sp, #16
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20001ba4 	.word	0x20001ba4
 800c3c0:	20001ba0 	.word	0x20001ba0
 800c3c4:	20001ba8 	.word	0x20001ba8
 800c3c8:	20001bac 	.word	0x20001bac

0800c3cc <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c3d0:	4b02      	ldr	r3, [pc, #8]	@ (800c3dc <clearMaximumAmplitude+0x10>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
}
 800c3d6:	46c0      	nop			@ (mov r8, r8)
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	20001164 	.word	0x20001164

0800c3e0 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c3e4:	4b08      	ldr	r3, [pc, #32]	@ (800c408 <startMicSettlingPeriod+0x28>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c3ee:	4b06      	ldr	r3, [pc, #24]	@ (800c408 <startMicSettlingPeriod+0x28>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f00a fa38 	bl	8016868 <HAL_TIM_Base_Start>
 800c3f8:	1e03      	subs	r3, r0, #0
 800c3fa:	d001      	beq.n	800c400 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e000      	b.n	800c402 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c400:	2301      	movs	r3, #1
}
 800c402:	0018      	movs	r0, r3
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20001ba0 	.word	0x20001ba0

0800c40c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c412:	4b0e      	ldr	r3, [pc, #56]	@ (800c44c <micSettlingComplete+0x40>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2201      	movs	r2, #1
 800c41c:	401a      	ands	r2, r3
 800c41e:	1dfb      	adds	r3, r7, #7
 800c420:	3a01      	subs	r2, #1
 800c422:	4251      	negs	r1, r2
 800c424:	414a      	adcs	r2, r1
 800c426:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c428:	1dfb      	adds	r3, r7, #7
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d007      	beq.n	800c440 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c430:	4b06      	ldr	r3, [pc, #24]	@ (800c44c <micSettlingComplete+0x40>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	0018      	movs	r0, r3
 800c436:	f00a fa61 	bl	80168fc <HAL_TIM_Base_Stop>
      DataReady = true;
 800c43a:	4b05      	ldr	r3, [pc, #20]	@ (800c450 <micSettlingComplete+0x44>)
 800c43c:	2201      	movs	r2, #1
 800c43e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c440:	1dfb      	adds	r3, r7, #7
 800c442:	781b      	ldrb	r3, [r3, #0]
}
 800c444:	0018      	movs	r0, r3
 800c446:	46bd      	mov	sp, r7
 800c448:	b002      	add	sp, #8
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20001ba0 	.word	0x20001ba0
 800c450:	2000115b 	.word	0x2000115b

0800c454 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	0002      	movs	r2, r0
 800c45c:	1dfb      	adds	r3, r7, #7
 800c45e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c460:	4b29      	ldr	r3, [pc, #164]	@ (800c508 <enableMicrophone+0xb4>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b2db      	uxtb	r3, r3
 800c466:	1dfa      	adds	r2, r7, #7
 800c468:	7812      	ldrb	r2, [r2, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d101      	bne.n	800c472 <enableMicrophone+0x1e>
    {
        return true;
 800c46e:	2301      	movs	r3, #1
 800c470:	e045      	b.n	800c4fe <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c472:	1dfb      	adds	r3, r7, #7
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d025      	beq.n	800c4c6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c47a:	f7ff ffb1 	bl	800c3e0 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c47e:	4b23      	ldr	r3, [pc, #140]	@ (800c50c <enableMicrophone+0xb8>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2280      	movs	r2, #128	@ 0x80
 800c484:	0092      	lsls	r2, r2, #2
 800c486:	4922      	ldr	r1, [pc, #136]	@ (800c510 <enableMicrophone+0xbc>)
 800c488:	0018      	movs	r0, r3
 800c48a:	f006 fc57 	bl	8012d3c <HAL_I2S_Receive_DMA>
 800c48e:	1e03      	subs	r3, r0, #0
 800c490:	d001      	beq.n	800c496 <enableMicrophone+0x42>
        {
            return false;
 800c492:	2300      	movs	r3, #0
 800c494:	e033      	b.n	800c4fe <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c496:	f7ff ff99 	bl	800c3cc <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c49a:	4b1e      	ldr	r3, [pc, #120]	@ (800c514 <enableMicrophone+0xc0>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c4a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c518 <enableMicrophone+0xc4>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	b25b      	sxtb	r3, r3
 800c4a6:	0018      	movs	r0, r3
 800c4a8:	f7ff fe56 	bl	800c158 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c4ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c51c <enableMicrophone+0xc8>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c4b2:	4b15      	ldr	r3, [pc, #84]	@ (800c508 <enableMicrophone+0xb4>)
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c4b8:	4b19      	ldr	r3, [pc, #100]	@ (800c520 <enableMicrophone+0xcc>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c4be:	4b19      	ldr	r3, [pc, #100]	@ (800c524 <enableMicrophone+0xd0>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e01a      	b.n	800c4fc <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c4c6:	4b14      	ldr	r3, [pc, #80]	@ (800c518 <enableMicrophone+0xc4>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	b25b      	sxtb	r3, r3
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	f7ff fe5d 	bl	800c18c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c4d2:	4b12      	ldr	r3, [pc, #72]	@ (800c51c <enableMicrophone+0xc8>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c4d8:	4b11      	ldr	r3, [pc, #68]	@ (800c520 <enableMicrophone+0xcc>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c4de:	4b11      	ldr	r3, [pc, #68]	@ (800c524 <enableMicrophone+0xd0>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c4e4:	4b09      	ldr	r3, [pc, #36]	@ (800c50c <enableMicrophone+0xb8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	f006 fce9 	bl	8012ec0 <HAL_I2S_DMAStop>
 800c4ee:	1e03      	subs	r3, r0, #0
 800c4f0:	d001      	beq.n	800c4f6 <enableMicrophone+0xa2>
        {
            return false;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e003      	b.n	800c4fe <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c4f6:	4b04      	ldr	r3, [pc, #16]	@ (800c508 <enableMicrophone+0xb4>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4fc:	2301      	movs	r3, #1
}
 800c4fe:	0018      	movs	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	b002      	add	sp, #8
 800c504:	bd80      	pop	{r7, pc}
 800c506:	46c0      	nop			@ (mov r8, r8)
 800c508:	2000115c 	.word	0x2000115c
 800c50c:	20001ba4 	.word	0x20001ba4
 800c510:	200011a0 	.word	0x200011a0
 800c514:	20001160 	.word	0x20001160
 800c518:	20001bac 	.word	0x20001bac
 800c51c:	2000115e 	.word	0x2000115e
 800c520:	2000115d 	.word	0x2000115d
 800c524:	2000115f 	.word	0x2000115f

0800c528 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c52c:	4b0c      	ldr	r3, [pc, #48]	@ (800c560 <startSPLcalculation+0x38>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2201      	movs	r2, #1
 800c534:	4053      	eors	r3, r2
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <startSPLcalculation+0x18>
    {
        return false;
 800c53c:	2300      	movs	r3, #0
 800c53e:	e00c      	b.n	800c55a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c540:	4b08      	ldr	r3, [pc, #32]	@ (800c564 <startSPLcalculation+0x3c>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <startSPLcalculation+0x26>
    {
        return true;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e005      	b.n	800c55a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c54e:	f000 fb63 	bl	800cc18 <resetSPLstate>
    SPLcalcEnabled = true;
 800c552:	4b04      	ldr	r3, [pc, #16]	@ (800c564 <startSPLcalculation+0x3c>)
 800c554:	2201      	movs	r2, #1
 800c556:	701a      	strb	r2, [r3, #0]
    return true;
 800c558:	2301      	movs	r3, #1
}
 800c55a:	0018      	movs	r0, r3
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	2000115c 	.word	0x2000115c
 800c564:	2000115d 	.word	0x2000115d

0800c568 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c570:	4b05      	ldr	r3, [pc, #20]	@ (800c588 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	429a      	cmp	r2, r3
 800c578:	d102      	bne.n	800c580 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c57a:	2000      	movs	r0, #0
 800c57c:	f000 f81a 	bl	800c5b4 <processHalfDMAbuffer>
  }
}
 800c580:	46c0      	nop			@ (mov r8, r8)
 800c582:	46bd      	mov	sp, r7
 800c584:	b002      	add	sp, #8
 800c586:	bd80      	pop	{r7, pc}
 800c588:	20001ba4 	.word	0x20001ba4

0800c58c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <HAL_I2S_RxCpltCallback+0x24>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d104      	bne.n	800c5a8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c59e:	2380      	movs	r3, #128	@ 0x80
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	0018      	movs	r0, r3
 800c5a4:	f000 f806 	bl	800c5b4 <processHalfDMAbuffer>
  }
}
 800c5a8:	46c0      	nop			@ (mov r8, r8)
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	b002      	add	sp, #8
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20001ba4 	.word	0x20001ba4

0800c5b4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	005a      	lsls	r2, r3, #1
 800c5c0:	4b15      	ldr	r3, [pc, #84]	@ (800c618 <processHalfDMAbuffer+0x64>)
 800c5c2:	18d3      	adds	r3, r2, r3
 800c5c4:	4a15      	ldr	r2, [pc, #84]	@ (800c61c <processHalfDMAbuffer+0x68>)
 800c5c6:	2180      	movs	r1, #128	@ 0x80
 800c5c8:	0089      	lsls	r1, r1, #2
 800c5ca:	0018      	movs	r0, r3
 800c5cc:	f000 fd35 	bl	800d03a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c5d0:	4b13      	ldr	r3, [pc, #76]	@ (800c620 <processHalfDMAbuffer+0x6c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	425a      	negs	r2, r3
 800c5d6:	4153      	adcs	r3, r2
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b11      	ldr	r3, [pc, #68]	@ (800c620 <processHalfDMAbuffer+0x6c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2109      	movs	r1, #9
 800c5e0:	4299      	cmp	r1, r3
 800c5e2:	419b      	sbcs	r3, r3
 800c5e4:	425b      	negs	r3, r3
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	480c      	ldr	r0, [pc, #48]	@ (800c61c <processHalfDMAbuffer+0x68>)
 800c5ea:	2180      	movs	r1, #128	@ 0x80
 800c5ec:	f000 fb46 	bl	800cc7c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c620 <processHalfDMAbuffer+0x6c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b09      	cmp	r3, #9
 800c5f6:	d804      	bhi.n	800c602 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c5f8:	4b09      	ldr	r3, [pc, #36]	@ (800c620 <processHalfDMAbuffer+0x6c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	1c5a      	adds	r2, r3, #1
 800c5fe:	4b08      	ldr	r3, [pc, #32]	@ (800c620 <processHalfDMAbuffer+0x6c>)
 800c600:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c602:	4b08      	ldr	r3, [pc, #32]	@ (800c624 <processHalfDMAbuffer+0x70>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c60c:	f000 f826 	bl	800c65c <calculateSPLQ31>
    }
}
 800c610:	46c0      	nop			@ (mov r8, r8)
 800c612:	46bd      	mov	sp, r7
 800c614:	b002      	add	sp, #8
 800c616:	bd80      	pop	{r7, pc}
 800c618:	200011a0 	.word	0x200011a0
 800c61c:	200019a0 	.word	0x200019a0
 800c620:	20001160 	.word	0x20001160
 800c624:	2000115d 	.word	0x2000115d

0800c628 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c630:	4b07      	ldr	r3, [pc, #28]	@ (800c650 <HAL_I2S_ErrorCallback+0x28>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d106      	bne.n	800c648 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c63a:	4a06      	ldr	r2, [pc, #24]	@ (800c654 <HAL_I2S_ErrorCallback+0x2c>)
 800c63c:	239e      	movs	r3, #158	@ 0x9e
 800c63e:	0059      	lsls	r1, r3, #1
 800c640:	4b05      	ldr	r3, [pc, #20]	@ (800c658 <HAL_I2S_ErrorCallback+0x30>)
 800c642:	0018      	movs	r0, r3
 800c644:	f001 ffbe 	bl	800e5c4 <errorHandler>
  }
}
 800c648:	46c0      	nop			@ (mov r8, r8)
 800c64a:	46bd      	mov	sp, r7
 800c64c:	b002      	add	sp, #8
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20001ba4 	.word	0x20001ba4
 800c654:	08024dd4 	.word	0x08024dd4
 800c658:	080255ec 	.word	0x080255ec

0800c65c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c65e:	b0b3      	sub	sp, #204	@ 0xcc
 800c660:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c662:	4ae2      	ldr	r2, [pc, #904]	@ (800c9ec <calculateSPLQ31+0x390>)
 800c664:	2338      	movs	r3, #56	@ 0x38
 800c666:	2030      	movs	r0, #48	@ 0x30
 800c668:	181b      	adds	r3, r3, r0
 800c66a:	19d9      	adds	r1, r3, r7
 800c66c:	2334      	movs	r3, #52	@ 0x34
 800c66e:	181b      	adds	r3, r3, r0
 800c670:	19d8      	adds	r0, r3, r7
 800c672:	2380      	movs	r3, #128	@ 0x80
 800c674:	f000 fc36 	bl	800cee4 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da00      	bge.n	800c680 <calculateSPLQ31+0x24>
 800c67e:	3301      	adds	r3, #1
 800c680:	105b      	asrs	r3, r3, #1
 800c682:	001a      	movs	r2, r3
 800c684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c686:	2b00      	cmp	r3, #0
 800c688:	da00      	bge.n	800c68c <calculateSPLQ31+0x30>
 800c68a:	3301      	adds	r3, #1
 800c68c:	105b      	asrs	r3, r3, #1
 800c68e:	18d3      	adds	r3, r2, r3
 800c690:	2188      	movs	r1, #136	@ 0x88
 800c692:	187a      	adds	r2, r7, r1
 800c694:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c696:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c698:	187b      	adds	r3, r7, r1
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	3304      	adds	r3, #4
 800c6a0:	2284      	movs	r2, #132	@ 0x84
 800c6a2:	18b9      	adds	r1, r7, r2
 800c6a4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c6a6:	18bb      	adds	r3, r7, r2
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4ad1      	ldr	r2, [pc, #836]	@ (800c9f0 <calculateSPLQ31+0x394>)
 800c6ac:	0019      	movs	r1, r3
 800c6ae:	0010      	movs	r0, r2
 800c6b0:	f000 fc58 	bl	800cf64 <getPo2factor>
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	2280      	movs	r2, #128	@ 0x80
 800c6b8:	18ba      	adds	r2, r7, r2
 800c6ba:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	2284      	movs	r2, #132	@ 0x84
 800c6c0:	2130      	movs	r1, #48	@ 0x30
 800c6c2:	1852      	adds	r2, r2, r1
 800c6c4:	19d2      	adds	r2, r2, r7
 800c6c6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	2280      	movs	r2, #128	@ 0x80
 800c6cc:	1852      	adds	r2, r2, r1
 800c6ce:	19d2      	adds	r2, r2, r7
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	e032      	b.n	800c73a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c6d4:	4ac5      	ldr	r2, [pc, #788]	@ (800c9ec <calculateSPLQ31+0x390>)
 800c6d6:	2680      	movs	r6, #128	@ 0x80
 800c6d8:	2330      	movs	r3, #48	@ 0x30
 800c6da:	18f1      	adds	r1, r6, r3
 800c6dc:	19cb      	adds	r3, r1, r7
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	589a      	ldr	r2, [r3, r2]
 800c6e4:	2188      	movs	r1, #136	@ 0x88
 800c6e6:	1879      	adds	r1, r7, r1
 800c6e8:	680b      	ldr	r3, [r1, #0]
 800c6ea:	1ad2      	subs	r2, r2, r3
 800c6ec:	2180      	movs	r1, #128	@ 0x80
 800c6ee:	1879      	adds	r1, r7, r1
 800c6f0:	680b      	ldr	r3, [r1, #0]
 800c6f2:	409a      	lsls	r2, r3
 800c6f4:	0011      	movs	r1, r2
 800c6f6:	4abf      	ldr	r2, [pc, #764]	@ (800c9f4 <calculateSPLQ31+0x398>)
 800c6f8:	2084      	movs	r0, #132	@ 0x84
 800c6fa:	2330      	movs	r3, #48	@ 0x30
 800c6fc:	18c3      	adds	r3, r0, r3
 800c6fe:	19db      	adds	r3, r3, r7
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c706:	2230      	movs	r2, #48	@ 0x30
 800c708:	1883      	adds	r3, r0, r2
 800c70a:	19db      	adds	r3, r3, r7
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3301      	adds	r3, #1
 800c710:	49b8      	ldr	r1, [pc, #736]	@ (800c9f4 <calculateSPLQ31+0x398>)
 800c712:	009a      	lsls	r2, r3, #2
 800c714:	2300      	movs	r3, #0
 800c716:	5053      	str	r3, [r2, r1]
        count += 2;
 800c718:	2230      	movs	r2, #48	@ 0x30
 800c71a:	1883      	adds	r3, r0, r2
 800c71c:	19db      	adds	r3, r3, r7
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3302      	adds	r3, #2
 800c722:	0011      	movs	r1, r2
 800c724:	1882      	adds	r2, r0, r2
 800c726:	19d2      	adds	r2, r2, r7
 800c728:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c72a:	000a      	movs	r2, r1
 800c72c:	18b3      	adds	r3, r6, r2
 800c72e:	19db      	adds	r3, r3, r7
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	18b2      	adds	r2, r6, r2
 800c736:	19d2      	adds	r2, r2, r7
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	2380      	movs	r3, #128	@ 0x80
 800c73c:	2630      	movs	r6, #48	@ 0x30
 800c73e:	199b      	adds	r3, r3, r6
 800c740:	19db      	adds	r3, r3, r7
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b7f      	cmp	r3, #127	@ 0x7f
 800c746:	d9c5      	bls.n	800c6d4 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c748:	4bab      	ldr	r3, [pc, #684]	@ (800c9f8 <calculateSPLQ31+0x39c>)
 800c74a:	6818      	ldr	r0, [r3, #0]
 800c74c:	49a9      	ldr	r1, [pc, #676]	@ (800c9f4 <calculateSPLQ31+0x398>)
 800c74e:	2301      	movs	r3, #1
 800c750:	2200      	movs	r2, #0
 800c752:	f011 f94f 	bl	801d9f4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c756:	4aa9      	ldr	r2, [pc, #676]	@ (800c9fc <calculateSPLQ31+0x3a0>)
 800c758:	2338      	movs	r3, #56	@ 0x38
 800c75a:	199b      	adds	r3, r3, r6
 800c75c:	19d9      	adds	r1, r3, r7
 800c75e:	2334      	movs	r3, #52	@ 0x34
 800c760:	199b      	adds	r3, r3, r6
 800c762:	19d8      	adds	r0, r3, r7
 800c764:	237e      	movs	r3, #126	@ 0x7e
 800c766:	f000 fbbd 	bl	800cee4 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c76a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c76c:	2380      	movs	r3, #128	@ 0x80
 800c76e:	061b      	lsls	r3, r3, #24
 800c770:	429a      	cmp	r2, r3
 800c772:	d101      	bne.n	800c778 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c774:	4b9e      	ldr	r3, [pc, #632]	@ (800c9f0 <calculateSPLQ31+0x394>)
 800c776:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c778:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c77a:	2380      	movs	r3, #128	@ 0x80
 800c77c:	061b      	lsls	r3, r3, #24
 800c77e:	429a      	cmp	r2, r3
 800c780:	d101      	bne.n	800c786 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c782:	4b9b      	ldr	r3, [pc, #620]	@ (800c9f0 <calculateSPLQ31+0x394>)
 800c784:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c788:	17da      	asrs	r2, r3, #31
 800c78a:	189b      	adds	r3, r3, r2
 800c78c:	4053      	eors	r3, r2
 800c78e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c792:	17da      	asrs	r2, r3, #31
 800c794:	189b      	adds	r3, r3, r2
 800c796:	4053      	eors	r3, r2
 800c798:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c79a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c79c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	dd01      	ble.n	800c7a6 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c7a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c7a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c7ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7ae:	4a90      	ldr	r2, [pc, #576]	@ (800c9f0 <calculateSPLQ31+0x394>)
 800c7b0:	0019      	movs	r1, r3
 800c7b2:	0010      	movs	r0, r2
 800c7b4:	f000 fbd6 	bl	800cf64 <getPo2factor>
 800c7b8:	0003      	movs	r3, r0
 800c7ba:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c7bc:	2302      	movs	r3, #2
 800c7be:	22ac      	movs	r2, #172	@ 0xac
 800c7c0:	18ba      	adds	r2, r7, r2
 800c7c2:	6013      	str	r3, [r2, #0]
 800c7c4:	e012      	b.n	800c7ec <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c7c6:	4a8b      	ldr	r2, [pc, #556]	@ (800c9f4 <calculateSPLQ31+0x398>)
 800c7c8:	20ac      	movs	r0, #172	@ 0xac
 800c7ca:	183b      	adds	r3, r7, r0
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	589a      	ldr	r2, [r3, r2]
 800c7d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7d4:	409a      	lsls	r2, r3
 800c7d6:	0011      	movs	r1, r2
 800c7d8:	4a86      	ldr	r2, [pc, #536]	@ (800c9f4 <calculateSPLQ31+0x398>)
 800c7da:	183b      	adds	r3, r7, r0
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c7e2:	183b      	adds	r3, r7, r0
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	183a      	adds	r2, r7, r0
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	23ac      	movs	r3, #172	@ 0xac
 800c7ee:	18fb      	adds	r3, r7, r3
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7f4:	d9e7      	bls.n	800c7c6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c7f6:	4b7d      	ldr	r3, [pc, #500]	@ (800c9ec <calculateSPLQ31+0x390>)
 800c7f8:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c7fa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7fc:	4b7d      	ldr	r3, [pc, #500]	@ (800c9f4 <calculateSPLQ31+0x398>)
 800c7fe:	2240      	movs	r2, #64	@ 0x40
 800c800:	0018      	movs	r0, r3
 800c802:	f011 fea1 	bl	801e548 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c806:	2330      	movs	r3, #48	@ 0x30
 800c808:	18fb      	adds	r3, r7, r3
 800c80a:	0018      	movs	r0, r3
 800c80c:	2330      	movs	r3, #48	@ 0x30
 800c80e:	001a      	movs	r2, r3
 800c810:	2100      	movs	r1, #0
 800c812:	f013 fcbd 	bl	8020190 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c816:	2200      	movs	r2, #0
 800c818:	2300      	movs	r3, #0
 800c81a:	21a0      	movs	r1, #160	@ 0xa0
 800c81c:	1879      	adds	r1, r7, r1
 800c81e:	600a      	str	r2, [r1, #0]
 800c820:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c822:	2301      	movs	r3, #1
 800c824:	229c      	movs	r2, #156	@ 0x9c
 800c826:	18ba      	adds	r2, r7, r2
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	e05b      	b.n	800c8e4 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c82c:	269c      	movs	r6, #156	@ 0x9c
 800c82e:	19bb      	adds	r3, r7, r6
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	009a      	lsls	r2, r3, #2
 800c834:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c836:	189b      	adds	r3, r3, r2
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	17db      	asrs	r3, r3, #31
 800c83e:	617b      	str	r3, [r7, #20]
 800c840:	4b6f      	ldr	r3, [pc, #444]	@ (800ca00 <calculateSPLQ31+0x3a4>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	19bb      	adds	r3, r7, r6
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	18d3      	adds	r3, r2, r3
 800c84c:	881b      	ldrh	r3, [r3, #0]
 800c84e:	60bb      	str	r3, [r7, #8]
 800c850:	2300      	movs	r3, #0
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6938      	ldr	r0, [r7, #16]
 800c85a:	6979      	ldr	r1, [r7, #20]
 800c85c:	f7f3 feb0 	bl	80005c0 <__aeabi_lmul>
 800c860:	0002      	movs	r2, r0
 800c862:	000b      	movs	r3, r1
 800c864:	0010      	movs	r0, r2
 800c866:	0019      	movs	r1, r3
 800c868:	23a0      	movs	r3, #160	@ 0xa0
 800c86a:	18fa      	adds	r2, r7, r3
 800c86c:	6853      	ldr	r3, [r2, #4]
 800c86e:	6812      	ldr	r2, [r2, #0]
 800c870:	1812      	adds	r2, r2, r0
 800c872:	414b      	adcs	r3, r1
 800c874:	21a0      	movs	r1, #160	@ 0xa0
 800c876:	1879      	adds	r1, r7, r1
 800c878:	600a      	str	r2, [r1, #0]
 800c87a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c87c:	4b61      	ldr	r3, [pc, #388]	@ (800ca04 <calculateSPLQ31+0x3a8>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	19bb      	adds	r3, r7, r6
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	18d3      	adds	r3, r2, r3
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b06      	cmp	r3, #6
 800c88a:	d025      	beq.n	800c8d8 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c88c:	4b5d      	ldr	r3, [pc, #372]	@ (800ca04 <calculateSPLQ31+0x3a8>)
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	19bb      	adds	r3, r7, r6
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	18d3      	adds	r3, r2, r3
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2230      	movs	r2, #48	@ 0x30
 800c89a:	18ba      	adds	r2, r7, r2
 800c89c:	00db      	lsls	r3, r3, #3
 800c89e:	18d3      	adds	r3, r2, r3
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	6859      	ldr	r1, [r3, #4]
 800c8a4:	19bb      	adds	r3, r7, r6
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	009a      	lsls	r2, r3, #2
 800c8aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8ac:	189b      	adds	r3, r3, r2
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	603b      	str	r3, [r7, #0]
 800c8b2:	17db      	asrs	r3, r3, #31
 800c8b4:	607b      	str	r3, [r7, #4]
 800c8b6:	4b53      	ldr	r3, [pc, #332]	@ (800ca04 <calculateSPLQ31+0x3a8>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	19be      	adds	r6, r7, r6
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	18d3      	adds	r3, r2, r3
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	001e      	movs	r6, r3
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	1880      	adds	r0, r0, r2
 800c8ca:	4159      	adcs	r1, r3
 800c8cc:	2330      	movs	r3, #48	@ 0x30
 800c8ce:	18fa      	adds	r2, r7, r3
 800c8d0:	00f3      	lsls	r3, r6, #3
 800c8d2:	18d3      	adds	r3, r2, r3
 800c8d4:	6018      	str	r0, [r3, #0]
 800c8d6:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c8d8:	229c      	movs	r2, #156	@ 0x9c
 800c8da:	18bb      	adds	r3, r7, r2
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	18ba      	adds	r2, r7, r2
 800c8e2:	6013      	str	r3, [r2, #0]
 800c8e4:	239c      	movs	r3, #156	@ 0x9c
 800c8e6:	18fb      	adds	r3, r7, r3
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800c8ec:	d99e      	bls.n	800c82c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c8ee:	2380      	movs	r3, #128	@ 0x80
 800c8f0:	18fb      	adds	r3, r7, r3
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	001a      	movs	r2, r3
 800c8f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	18d3      	adds	r3, r2, r3
 800c8fe:	3b22      	subs	r3, #34	@ 0x22
 800c900:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c904:	17da      	asrs	r2, r3, #31
 800c906:	189b      	adds	r3, r3, r2
 800c908:	4053      	eors	r3, r2
 800c90a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c90c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c90e:	2b00      	cmp	r3, #0
 800c910:	da62      	bge.n	800c9d8 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c914:	3b20      	subs	r3, #32
 800c916:	2b00      	cmp	r3, #0
 800c918:	db05      	blt.n	800c926 <calculateSPLQ31+0x2ca>
 800c91a:	22a0      	movs	r2, #160	@ 0xa0
 800c91c:	18ba      	adds	r2, r7, r2
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	409a      	lsls	r2, r3
 800c922:	627a      	str	r2, [r7, #36]	@ 0x24
 800c924:	e010      	b.n	800c948 <calculateSPLQ31+0x2ec>
 800c926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c928:	2220      	movs	r2, #32
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	22a0      	movs	r2, #160	@ 0xa0
 800c92e:	18ba      	adds	r2, r7, r2
 800c930:	6812      	ldr	r2, [r2, #0]
 800c932:	40da      	lsrs	r2, r3
 800c934:	0013      	movs	r3, r2
 800c936:	22a4      	movs	r2, #164	@ 0xa4
 800c938:	18ba      	adds	r2, r7, r2
 800c93a:	6811      	ldr	r1, [r2, #0]
 800c93c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c93e:	4091      	lsls	r1, r2
 800c940:	6279      	str	r1, [r7, #36]	@ 0x24
 800c942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c944:	431a      	orrs	r2, r3
 800c946:	627a      	str	r2, [r7, #36]	@ 0x24
 800c948:	21a0      	movs	r1, #160	@ 0xa0
 800c94a:	187b      	adds	r3, r7, r1
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c950:	409a      	lsls	r2, r3
 800c952:	623a      	str	r2, [r7, #32]
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c958:	187a      	adds	r2, r7, r1
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c95e:	2300      	movs	r3, #0
 800c960:	2298      	movs	r2, #152	@ 0x98
 800c962:	18ba      	adds	r2, r7, r2
 800c964:	6013      	str	r3, [r2, #0]
 800c966:	e031      	b.n	800c9cc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c968:	2330      	movs	r3, #48	@ 0x30
 800c96a:	18fa      	adds	r2, r7, r3
 800c96c:	2398      	movs	r3, #152	@ 0x98
 800c96e:	18fb      	adds	r3, r7, r3
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	18d3      	adds	r3, r2, r3
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c97c:	3920      	subs	r1, #32
 800c97e:	2900      	cmp	r1, #0
 800c980:	db03      	blt.n	800c98a <calculateSPLQ31+0x32e>
 800c982:	0010      	movs	r0, r2
 800c984:	4088      	lsls	r0, r1
 800c986:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c988:	e00c      	b.n	800c9a4 <calculateSPLQ31+0x348>
 800c98a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c98c:	2020      	movs	r0, #32
 800c98e:	1a41      	subs	r1, r0, r1
 800c990:	0010      	movs	r0, r2
 800c992:	40c8      	lsrs	r0, r1
 800c994:	0001      	movs	r1, r0
 800c996:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c998:	001c      	movs	r4, r3
 800c99a:	4084      	lsls	r4, r0
 800c99c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c99e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9a0:	4308      	orrs	r0, r1
 800c9a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9a6:	0013      	movs	r3, r2
 800c9a8:	408b      	lsls	r3, r1
 800c9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9ac:	2330      	movs	r3, #48	@ 0x30
 800c9ae:	18fa      	adds	r2, r7, r3
 800c9b0:	2098      	movs	r0, #152	@ 0x98
 800c9b2:	183b      	adds	r3, r7, r0
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	00db      	lsls	r3, r3, #3
 800c9b8:	18d3      	adds	r3, r2, r3
 800c9ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9be:	6019      	str	r1, [r3, #0]
 800c9c0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9c2:	183b      	adds	r3, r7, r0
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	183a      	adds	r2, r7, r0
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	2398      	movs	r3, #152	@ 0x98
 800c9ce:	18fb      	adds	r3, r7, r3
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b05      	cmp	r3, #5
 800c9d4:	d9c8      	bls.n	800c968 <calculateSPLQ31+0x30c>
 800c9d6:	e06b      	b.n	800cab0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9da:	3b20      	subs	r3, #32
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	db13      	blt.n	800ca08 <calculateSPLQ31+0x3ac>
 800c9e0:	22a4      	movs	r2, #164	@ 0xa4
 800c9e2:	18ba      	adds	r2, r7, r2
 800c9e4:	6812      	ldr	r2, [r2, #0]
 800c9e6:	40da      	lsrs	r2, r3
 800c9e8:	61ba      	str	r2, [r7, #24]
 800c9ea:	e01e      	b.n	800ca2a <calculateSPLQ31+0x3ce>
 800c9ec:	200019a0 	.word	0x200019a0
 800c9f0:	7fffffff 	.word	0x7fffffff
 800c9f4:	20001bec 	.word	0x20001bec
 800c9f8:	200000b4 	.word	0x200000b4
 800c9fc:	20001bf4 	.word	0x20001bf4
 800ca00:	200000b8 	.word	0x200000b8
 800ca04:	200000c4 	.word	0x200000c4
 800ca08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	22a4      	movs	r2, #164	@ 0xa4
 800ca10:	18ba      	adds	r2, r7, r2
 800ca12:	6812      	ldr	r2, [r2, #0]
 800ca14:	409a      	lsls	r2, r3
 800ca16:	0013      	movs	r3, r2
 800ca18:	22a0      	movs	r2, #160	@ 0xa0
 800ca1a:	18ba      	adds	r2, r7, r2
 800ca1c:	6811      	ldr	r1, [r2, #0]
 800ca1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca20:	40d1      	lsrs	r1, r2
 800ca22:	61b9      	str	r1, [r7, #24]
 800ca24:	69ba      	ldr	r2, [r7, #24]
 800ca26:	431a      	orrs	r2, r3
 800ca28:	61ba      	str	r2, [r7, #24]
 800ca2a:	23a4      	movs	r3, #164	@ 0xa4
 800ca2c:	18fb      	adds	r3, r7, r3
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca32:	40da      	lsrs	r2, r3
 800ca34:	61fa      	str	r2, [r7, #28]
 800ca36:	69ba      	ldr	r2, [r7, #24]
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	21a0      	movs	r1, #160	@ 0xa0
 800ca3c:	1879      	adds	r1, r7, r1
 800ca3e:	600a      	str	r2, [r1, #0]
 800ca40:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	2294      	movs	r2, #148	@ 0x94
 800ca46:	18ba      	adds	r2, r7, r2
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	e02c      	b.n	800caa6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca4c:	2330      	movs	r3, #48	@ 0x30
 800ca4e:	18fa      	adds	r2, r7, r3
 800ca50:	2394      	movs	r3, #148	@ 0x94
 800ca52:	18fb      	adds	r3, r7, r3
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	18d3      	adds	r3, r2, r3
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca60:	3920      	subs	r1, #32
 800ca62:	2900      	cmp	r1, #0
 800ca64:	db03      	blt.n	800ca6e <calculateSPLQ31+0x412>
 800ca66:	0018      	movs	r0, r3
 800ca68:	40c8      	lsrs	r0, r1
 800ca6a:	0004      	movs	r4, r0
 800ca6c:	e00a      	b.n	800ca84 <calculateSPLQ31+0x428>
 800ca6e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca70:	2020      	movs	r0, #32
 800ca72:	1a41      	subs	r1, r0, r1
 800ca74:	0018      	movs	r0, r3
 800ca76:	4088      	lsls	r0, r1
 800ca78:	0001      	movs	r1, r0
 800ca7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca7c:	0016      	movs	r6, r2
 800ca7e:	40c6      	lsrs	r6, r0
 800ca80:	0034      	movs	r4, r6
 800ca82:	430c      	orrs	r4, r1
 800ca84:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca86:	40cb      	lsrs	r3, r1
 800ca88:	001d      	movs	r5, r3
 800ca8a:	2330      	movs	r3, #48	@ 0x30
 800ca8c:	18fa      	adds	r2, r7, r3
 800ca8e:	2194      	movs	r1, #148	@ 0x94
 800ca90:	187b      	adds	r3, r7, r1
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	18d3      	adds	r3, r2, r3
 800ca98:	601c      	str	r4, [r3, #0]
 800ca9a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca9c:	187b      	adds	r3, r7, r1
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3301      	adds	r3, #1
 800caa2:	187a      	adds	r2, r7, r1
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	2394      	movs	r3, #148	@ 0x94
 800caa8:	18fb      	adds	r3, r7, r3
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b05      	cmp	r3, #5
 800caae:	d9cd      	bls.n	800ca4c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800cab0:	230f      	movs	r3, #15
 800cab2:	425d      	negs	r5, r3
 800cab4:	2305      	movs	r3, #5
 800cab6:	425e      	negs	r6, r3
 800cab8:	4b4a      	ldr	r3, [pc, #296]	@ (800cbe4 <calculateSPLQ31+0x588>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	4b4a      	ldr	r3, [pc, #296]	@ (800cbe8 <calculateSPLQ31+0x58c>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	21a0      	movs	r1, #160	@ 0xa0
 800cac6:	1879      	adds	r1, r7, r1
 800cac8:	6808      	ldr	r0, [r1, #0]
 800caca:	6849      	ldr	r1, [r1, #4]
 800cacc:	4c47      	ldr	r4, [pc, #284]	@ (800cbec <calculateSPLQ31+0x590>)
 800cace:	9403      	str	r4, [sp, #12]
 800cad0:	4c47      	ldr	r4, [pc, #284]	@ (800cbf0 <calculateSPLQ31+0x594>)
 800cad2:	9402      	str	r4, [sp, #8]
 800cad4:	9301      	str	r3, [sp, #4]
 800cad6:	9200      	str	r2, [sp, #0]
 800cad8:	0033      	movs	r3, r6
 800cada:	002a      	movs	r2, r5
 800cadc:	f000 fa86 	bl	800cfec <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cae0:	2300      	movs	r3, #0
 800cae2:	2290      	movs	r2, #144	@ 0x90
 800cae4:	18ba      	adds	r2, r7, r2
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	e026      	b.n	800cb38 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800caea:	2330      	movs	r3, #48	@ 0x30
 800caec:	18fa      	adds	r2, r7, r3
 800caee:	2490      	movs	r4, #144	@ 0x90
 800caf0:	193b      	adds	r3, r7, r4
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	18d3      	adds	r3, r2, r3
 800caf8:	6818      	ldr	r0, [r3, #0]
 800cafa:	6859      	ldr	r1, [r3, #4]
 800cafc:	230f      	movs	r3, #15
 800cafe:	425d      	negs	r5, r3
 800cb00:	2305      	movs	r3, #5
 800cb02:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cb04:	193b      	adds	r3, r7, r4
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	009a      	lsls	r2, r3, #2
 800cb0a:	4b3a      	ldr	r3, [pc, #232]	@ (800cbf4 <calculateSPLQ31+0x598>)
 800cb0c:	18d3      	adds	r3, r2, r3
 800cb0e:	193a      	adds	r2, r7, r4
 800cb10:	6812      	ldr	r2, [r2, #0]
 800cb12:	0094      	lsls	r4, r2, #2
 800cb14:	4a38      	ldr	r2, [pc, #224]	@ (800cbf8 <calculateSPLQ31+0x59c>)
 800cb16:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cb18:	9203      	str	r2, [sp, #12]
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	2300      	movs	r3, #0
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	0033      	movs	r3, r6
 800cb26:	002a      	movs	r2, r5
 800cb28:	f000 fa60 	bl	800cfec <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cb2c:	2490      	movs	r4, #144	@ 0x90
 800cb2e:	193b      	adds	r3, r7, r4
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	3301      	adds	r3, #1
 800cb34:	193a      	adds	r2, r7, r4
 800cb36:	6013      	str	r3, [r2, #0]
 800cb38:	2390      	movs	r3, #144	@ 0x90
 800cb3a:	18fb      	adds	r3, r7, r3
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b05      	cmp	r3, #5
 800cb40:	d9d3      	bls.n	800caea <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cb42:	4b2b      	ldr	r3, [pc, #172]	@ (800cbf0 <calculateSPLQ31+0x594>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	4b2d      	ldr	r3, [pc, #180]	@ (800cbfc <calculateSPLQ31+0x5a0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	18d2      	adds	r2, r2, r3
 800cb4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cbfc <calculateSPLQ31+0x5a0>)
 800cb4e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb50:	4b26      	ldr	r3, [pc, #152]	@ (800cbec <calculateSPLQ31+0x590>)
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b2a      	ldr	r3, [pc, #168]	@ (800cc00 <calculateSPLQ31+0x5a4>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	18d2      	adds	r2, r2, r3
 800cb5a:	4b29      	ldr	r3, [pc, #164]	@ (800cc00 <calculateSPLQ31+0x5a4>)
 800cb5c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb5e:	2300      	movs	r3, #0
 800cb60:	228c      	movs	r2, #140	@ 0x8c
 800cb62:	18ba      	adds	r2, r7, r2
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	e025      	b.n	800cbb4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb68:	4b22      	ldr	r3, [pc, #136]	@ (800cbf4 <calculateSPLQ31+0x598>)
 800cb6a:	208c      	movs	r0, #140	@ 0x8c
 800cb6c:	183a      	adds	r2, r7, r0
 800cb6e:	6812      	ldr	r2, [r2, #0]
 800cb70:	0092      	lsls	r2, r2, #2
 800cb72:	58d2      	ldr	r2, [r2, r3]
 800cb74:	4b23      	ldr	r3, [pc, #140]	@ (800cc04 <calculateSPLQ31+0x5a8>)
 800cb76:	1839      	adds	r1, r7, r0
 800cb78:	6809      	ldr	r1, [r1, #0]
 800cb7a:	0089      	lsls	r1, r1, #2
 800cb7c:	58cb      	ldr	r3, [r1, r3]
 800cb7e:	18d1      	adds	r1, r2, r3
 800cb80:	4b20      	ldr	r3, [pc, #128]	@ (800cc04 <calculateSPLQ31+0x5a8>)
 800cb82:	183a      	adds	r2, r7, r0
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	0092      	lsls	r2, r2, #2
 800cb88:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb8a:	4b1b      	ldr	r3, [pc, #108]	@ (800cbf8 <calculateSPLQ31+0x59c>)
 800cb8c:	183a      	adds	r2, r7, r0
 800cb8e:	6812      	ldr	r2, [r2, #0]
 800cb90:	0092      	lsls	r2, r2, #2
 800cb92:	58d2      	ldr	r2, [r2, r3]
 800cb94:	4b1c      	ldr	r3, [pc, #112]	@ (800cc08 <calculateSPLQ31+0x5ac>)
 800cb96:	1839      	adds	r1, r7, r0
 800cb98:	6809      	ldr	r1, [r1, #0]
 800cb9a:	0089      	lsls	r1, r1, #2
 800cb9c:	58cb      	ldr	r3, [r1, r3]
 800cb9e:	18d1      	adds	r1, r2, r3
 800cba0:	4b19      	ldr	r3, [pc, #100]	@ (800cc08 <calculateSPLQ31+0x5ac>)
 800cba2:	183a      	adds	r2, r7, r0
 800cba4:	6812      	ldr	r2, [r2, #0]
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cbaa:	183b      	adds	r3, r7, r0
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	183a      	adds	r2, r7, r0
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	238c      	movs	r3, #140	@ 0x8c
 800cbb6:	18fb      	adds	r3, r7, r3
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	d9d4      	bls.n	800cb68 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cbbe:	4b13      	ldr	r3, [pc, #76]	@ (800cc0c <calculateSPLQ31+0x5b0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	4b11      	ldr	r3, [pc, #68]	@ (800cc0c <calculateSPLQ31+0x5b0>)
 800cbc6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cbc8:	4b10      	ldr	r3, [pc, #64]	@ (800cc0c <calculateSPLQ31+0x5b0>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b0f      	cmp	r3, #15
 800cbce:	d905      	bls.n	800cbdc <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cbd0:	4b0f      	ldr	r3, [pc, #60]	@ (800cc10 <calculateSPLQ31+0x5b4>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <calculateSPLQ31+0x5b8>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	701a      	strb	r2, [r3, #0]
    }
}
 800cbdc:	46c0      	nop			@ (mov r8, r8)
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	b02f      	add	sp, #188	@ 0xbc
 800cbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe4:	200000bc 	.word	0x200000bc
 800cbe8:	200000c0 	.word	0x200000c0
 800cbec:	2000116c 	.word	0x2000116c
 800cbf0:	20001168 	.word	0x20001168
 800cbf4:	20001170 	.word	0x20001170
 800cbf8:	20001188 	.word	0x20001188
 800cbfc:	20001bb0 	.word	0x20001bb0
 800cc00:	20001bb4 	.word	0x20001bb4
 800cc04:	20001bb8 	.word	0x20001bb8
 800cc08:	20001bd0 	.word	0x20001bd0
 800cc0c:	20001be8 	.word	0x20001be8
 800cc10:	2000115f 	.word	0x2000115f
 800cc14:	2000115d 	.word	0x2000115d

0800cc18 <resetSPLstate>:

static void resetSPLstate(void)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cc1e:	4b11      	ldr	r3, [pc, #68]	@ (800cc64 <resetSPLstate+0x4c>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cc24:	4b10      	ldr	r3, [pc, #64]	@ (800cc68 <resetSPLstate+0x50>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cc2a:	4b10      	ldr	r3, [pc, #64]	@ (800cc6c <resetSPLstate+0x54>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc30:	2300      	movs	r3, #0
 800cc32:	607b      	str	r3, [r7, #4]
 800cc34:	e00c      	b.n	800cc50 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cc36:	4b0e      	ldr	r3, [pc, #56]	@ (800cc70 <resetSPLstate+0x58>)
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	0092      	lsls	r2, r2, #2
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cc40:	4b0c      	ldr	r3, [pc, #48]	@ (800cc74 <resetSPLstate+0x5c>)
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	0092      	lsls	r2, r2, #2
 800cc46:	2100      	movs	r1, #0
 800cc48:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	607b      	str	r3, [r7, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b05      	cmp	r3, #5
 800cc54:	d9ef      	bls.n	800cc36 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc56:	4b08      	ldr	r3, [pc, #32]	@ (800cc78 <resetSPLstate+0x60>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	701a      	strb	r2, [r3, #0]
}
 800cc5c:	46c0      	nop			@ (mov r8, r8)
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	b002      	add	sp, #8
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	20001bb0 	.word	0x20001bb0
 800cc68:	20001bb4 	.word	0x20001bb4
 800cc6c:	20001be8 	.word	0x20001be8
 800cc70:	20001bb8 	.word	0x20001bb8
 800cc74:	20001bd0 	.word	0x20001bd0
 800cc78:	2000115f 	.word	0x2000115f

0800cc7c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc7c:	b5b0      	push	{r4, r5, r7, lr}
 800cc7e:	b090      	sub	sp, #64	@ 0x40
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	0019      	movs	r1, r3
 800cc88:	1dfb      	adds	r3, r7, #7
 800cc8a:	701a      	strb	r2, [r3, #0]
 800cc8c:	1dbb      	adds	r3, r7, #6
 800cc8e:	1c0a      	adds	r2, r1, #0
 800cc90:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc92:	1dfb      	adds	r3, r7, #7
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc9a:	4b3b      	ldr	r3, [pc, #236]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cca0:	4b3a      	ldr	r3, [pc, #232]	@ (800cd8c <getFilteredMaxAmplitudeQ31+0x110>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800ccae:	2305      	movs	r3, #5
 800ccb0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccb6:	e040      	b.n	800cd3a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	18d3      	adds	r3, r2, r3
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc4:	409a      	lsls	r2, r3
 800ccc6:	0013      	movs	r3, r2
 800ccc8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800ccca:	4b30      	ldr	r3, [pc, #192]	@ (800cd8c <getFilteredMaxAmplitudeQ31+0x110>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	425a      	negs	r2, r3
 800ccd0:	4b2e      	ldr	r3, [pc, #184]	@ (800cd8c <getFilteredMaxAmplitudeQ31+0x110>)
 800ccd2:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800ccd4:	2418      	movs	r4, #24
 800ccd6:	193a      	adds	r2, r7, r4
 800ccd8:	492c      	ldr	r1, [pc, #176]	@ (800cd8c <getFilteredMaxAmplitudeQ31+0x110>)
 800ccda:	231c      	movs	r3, #28
 800ccdc:	18f8      	adds	r0, r7, r3
 800ccde:	2301      	movs	r3, #1
 800cce0:	f011 fc8a 	bl	801e5f8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cce4:	2514      	movs	r5, #20
 800cce6:	197a      	adds	r2, r7, r5
 800cce8:	1939      	adds	r1, r7, r4
 800ccea:	4829      	ldr	r0, [pc, #164]	@ (800cd90 <getFilteredMaxAmplitudeQ31+0x114>)
 800ccec:	2301      	movs	r3, #1
 800ccee:	f011 fc51 	bl	801e594 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800ccf2:	2410      	movs	r4, #16
 800ccf4:	193a      	adds	r2, r7, r4
 800ccf6:	4924      	ldr	r1, [pc, #144]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccf8:	4826      	ldr	r0, [pc, #152]	@ (800cd94 <getFilteredMaxAmplitudeQ31+0x118>)
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f011 fc4a 	bl	801e594 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cd00:	4a21      	ldr	r2, [pc, #132]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd02:	1939      	adds	r1, r7, r4
 800cd04:	1978      	adds	r0, r7, r5
 800cd06:	2301      	movs	r3, #1
 800cd08:	f011 fc76 	bl	801e5f8 <arm_add_q31>

        lastData = fx;
 800cd0c:	69fa      	ldr	r2, [r7, #28]
 800cd0e:	4b1f      	ldr	r3, [pc, #124]	@ (800cd8c <getFilteredMaxAmplitudeQ31+0x110>)
 800cd10:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800cd12:	4b1d      	ldr	r3, [pc, #116]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	da03      	bge.n	800cd24 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800cd1c:	4b1a      	ldr	r3, [pc, #104]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd22:	e007      	b.n	800cd34 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cd24:	4b18      	ldr	r3, [pc, #96]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	dd02      	ble.n	800cd34 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cd2e:	4b16      	ldr	r3, [pc, #88]	@ (800cd88 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cd34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd36:	3301      	adds	r3, #1
 800cd38:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d3ba      	bcc.n	800ccb8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	17da      	asrs	r2, r3, #31
 800cd46:	189b      	adds	r3, r3, r2
 800cd48:	4053      	eors	r3, r2
 800cd4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d200      	bcs.n	800cd5a <getFilteredMaxAmplitudeQ31+0xde>
 800cd58:	0013      	movs	r3, r2
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	40da      	lsrs	r2, r3
 800cd62:	0013      	movs	r3, r2
 800cd64:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd66:	1dbb      	adds	r3, r7, #6
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d007      	beq.n	800cd7e <getFilteredMaxAmplitudeQ31+0x102>
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	@ (800cd98 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6a3a      	ldr	r2, [r7, #32]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d902      	bls.n	800cd7e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd78:	4b07      	ldr	r3, [pc, #28]	@ (800cd98 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
}
 800cd80:	0018      	movs	r0, r3
 800cd82:	46bd      	mov	sp, r7
 800cd84:	b010      	add	sp, #64	@ 0x40
 800cd86:	bdb0      	pop	{r4, r5, r7, pc}
 800cd88:	20001fec 	.word	0x20001fec
 800cd8c:	20001ff0 	.word	0x20001ff0
 800cd90:	080255e4 	.word	0x080255e4
 800cd94:	080255e8 	.word	0x080255e8
 800cd98:	20001164 	.word	0x20001164

0800cd9c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cda8:	4913      	ldr	r1, [pc, #76]	@ (800cdf8 <floatToIntAndFrac2dp+0x5c>)
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7f4 f8f8 	bl	8000fa0 <__aeabi_fmul>
 800cdb0:	1c03      	adds	r3, r0, #0
 800cdb2:	1c18      	adds	r0, r3, #0
 800cdb4:	f016 f854 	bl	8022e60 <roundf>
 800cdb8:	1c03      	adds	r3, r0, #0
 800cdba:	1c18      	adds	r0, r3, #0
 800cdbc:	f7f3 fc2e 	bl	800061c <__aeabi_f2uiz>
 800cdc0:	0003      	movs	r3, r0
 800cdc2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2164      	movs	r1, #100	@ 0x64
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f7f3 f9eb 	bl	80001a4 <__udivsi3>
 800cdce:	0003      	movs	r3, r0
 800cdd0:	001a      	movs	r2, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2164      	movs	r1, #100	@ 0x64
 800cde2:	434b      	muls	r3, r1
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	701a      	strb	r2, [r3, #0]
}
 800cdee:	46c0      	nop			@ (mov r8, r8)
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	b006      	add	sp, #24
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	46c0      	nop			@ (mov r8, r8)
 800cdf8:	42c80000 	.word	0x42c80000

0800cdfc <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ce08:	4914      	ldr	r1, [pc, #80]	@ (800ce5c <floatToIntAndFrac1dp+0x60>)
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f7f4 f8c8 	bl	8000fa0 <__aeabi_fmul>
 800ce10:	1c03      	adds	r3, r0, #0
 800ce12:	1c18      	adds	r0, r3, #0
 800ce14:	f016 f824 	bl	8022e60 <roundf>
 800ce18:	1c03      	adds	r3, r0, #0
 800ce1a:	1c18      	adds	r0, r3, #0
 800ce1c:	f7f3 fbfe 	bl	800061c <__aeabi_f2uiz>
 800ce20:	0003      	movs	r3, r0
 800ce22:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	210a      	movs	r1, #10
 800ce28:	0018      	movs	r0, r3
 800ce2a:	f7f3 f9bb 	bl	80001a4 <__udivsi3>
 800ce2e:	0003      	movs	r3, r0
 800ce30:	001a      	movs	r2, r3
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	1c19      	adds	r1, r3, #0
 800ce42:	0089      	lsls	r1, r1, #2
 800ce44:	18cb      	adds	r3, r1, r3
 800ce46:	18db      	adds	r3, r3, r3
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	701a      	strb	r2, [r3, #0]
}
 800ce52:	46c0      	nop			@ (mov r8, r8)
 800ce54:	46bd      	mov	sp, r7
 800ce56:	b006      	add	sp, #24
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	46c0      	nop			@ (mov r8, r8)
 800ce5c:	41200000 	.word	0x41200000

0800ce60 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce60:	b590      	push	{r4, r7, lr}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7f4 fbae 	bl	80015d0 <__aeabi_i2f>
 800ce74:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce76:	6838      	ldr	r0, [r7, #0]
 800ce78:	f7f4 fbaa 	bl	80015d0 <__aeabi_i2f>
 800ce7c:	1c03      	adds	r3, r0, #0
 800ce7e:	4918      	ldr	r1, [pc, #96]	@ (800cee0 <sumToIntAverage+0x80>)
 800ce80:	1c18      	adds	r0, r3, #0
 800ce82:	f7f3 fea7 	bl	8000bd4 <__aeabi_fdiv>
 800ce86:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce88:	1c19      	adds	r1, r3, #0
 800ce8a:	1c20      	adds	r0, r4, #0
 800ce8c:	f7f3 fd18 	bl	80008c0 <__aeabi_fadd>
 800ce90:	1c03      	adds	r3, r0, #0
 800ce92:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce96:	f7f4 fbe7 	bl	8001668 <__aeabi_ui2f>
 800ce9a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce9c:	1c19      	adds	r1, r3, #0
 800ce9e:	1c20      	adds	r0, r4, #0
 800cea0:	f7f3 fe98 	bl	8000bd4 <__aeabi_fdiv>
 800cea4:	1c03      	adds	r3, r0, #0
 800cea6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ceac:	68ba      	ldr	r2, [r7, #8]
 800ceae:	2310      	movs	r3, #16
 800ceb0:	18f9      	adds	r1, r7, r3
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	1c18      	adds	r0, r3, #0
 800ceb6:	f7ff ffa1 	bl	800cdfc <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2bff      	cmp	r3, #255	@ 0xff
 800cebe:	d906      	bls.n	800cece <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	22ff      	movs	r2, #255	@ 0xff
 800cec4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2209      	movs	r2, #9
 800ceca:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800cecc:	e003      	b.n	800ced6 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	701a      	strb	r2, [r3, #0]
}
 800ced6:	46c0      	nop			@ (mov r8, r8)
 800ced8:	46bd      	mov	sp, r7
 800ceda:	b007      	add	sp, #28
 800cedc:	bd90      	pop	{r4, r7, pc}
 800cede:	46c0      	nop			@ (mov r8, r8)
 800cee0:	41200000 	.word	0x41200000

0800cee4 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2280      	movs	r2, #128	@ 0x80
 800cef6:	0612      	lsls	r2, r2, #24
 800cef8:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4a18      	ldr	r2, [pc, #96]	@ (800cf60 <findMinMax+0x7c>)
 800cefe:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]
 800cf04:	e022      	b.n	800cf4c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	18d3      	adds	r3, r2, r3
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	da06      	bge.n	800cf26 <findMinMax+0x42>
        {
            min[0] = array[i];
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	18d3      	adds	r3, r2, r3
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	18d3      	adds	r3, r2, r3
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	dd06      	ble.n	800cf46 <findMinMax+0x62>
        {
            max[0] = array[i];
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	18d3      	adds	r3, r2, r3
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d3d8      	bcc.n	800cf06 <findMinMax+0x22>
        }
    }
}
 800cf54:	46c0      	nop			@ (mov r8, r8)
 800cf56:	46c0      	nop			@ (mov r8, r8)
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	b006      	add	sp, #24
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	46c0      	nop			@ (mov r8, r8)
 800cf60:	7fffffff 	.word	0x7fffffff

0800cf64 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d302      	bcc.n	800cf80 <getPo2factor+0x1c>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d107      	bne.n	800cf90 <getPo2factor+0x2c>
    {
        return 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	e00d      	b.n	800cfa0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	085b      	lsrs	r3, r3, #1
 800cf88:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d2f5      	bcs.n	800cf84 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
}
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	b004      	add	sp, #16
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7f4 fb56 	bl	8001668 <__aeabi_ui2f>
 800cfbc:	1c03      	adds	r3, r0, #0
 800cfbe:	1c19      	adds	r1, r3, #0
 800cfc0:	68b8      	ldr	r0, [r7, #8]
 800cfc2:	f7f3 ffed 	bl	8000fa0 <__aeabi_fmul>
 800cfc6:	1c03      	adds	r3, r0, #0
 800cfc8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	2310      	movs	r3, #16
 800cfd2:	18f9      	adds	r1, r7, r3
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	1c18      	adds	r0, r3, #0
 800cfd8:	f7ff fee0 	bl	800cd9c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	801a      	strh	r2, [r3, #0]
}
 800cfe4:	46c0      	nop			@ (mov r8, r8)
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	b006      	add	sp, #24
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60b8      	str	r0, [r7, #8]
 800cff4:	60f9      	str	r1, [r7, #12]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	6a3a      	ldr	r2, [r7, #32]
 800cffe:	68b8      	ldr	r0, [r7, #8]
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	f7fa f977 	bl	80072f4 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	18d2      	adds	r2, r2, r3
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	18d2      	adds	r2, r2, r3
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	18d2      	adds	r2, r2, r3
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	18d2      	adds	r2, r2, r3
 800d022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d024:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	0011      	movs	r1, r2
 800d02c:	0018      	movs	r0, r3
 800d02e:	f7fa f9f1 	bl	8007414 <correctIntFracNumber>
}
 800d032:	46c0      	nop			@ (mov r8, r8)
 800d034:	46bd      	mov	sp, r7
 800d036:	b004      	add	sp, #16
 800d038:	bd80      	pop	{r7, pc}

0800d03a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b086      	sub	sp, #24
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]
 800d04e:	e019      	b.n	800d084 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	18d3      	adds	r3, r2, r3
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	3201      	adds	r2, #1
 800d060:	0052      	lsls	r2, r2, #1
 800d062:	68f9      	ldr	r1, [r7, #12]
 800d064:	188a      	adds	r2, r1, r2
 800d066:	8812      	ldrh	r2, [r2, #0]
 800d068:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d06a:	0019      	movs	r1, r3
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d074:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d076:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	3301      	adds	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	3304      	adds	r3, #4
 800d082:	613b      	str	r3, [r7, #16]
 800d084:	693a      	ldr	r2, [r7, #16]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d3e1      	bcc.n	800d050 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d08c:	46c0      	nop			@ (mov r8, r8)
 800d08e:	46c0      	nop			@ (mov r8, r8)
 800d090:	46bd      	mov	sp, r7
 800d092:	b006      	add	sp, #24
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d098:	b580      	push	{r7, lr}
 800d09a:	af00      	add	r7, sp, #0
  init = false;
 800d09c:	4b02      	ldr	r3, [pc, #8]	@ (800d0a8 <InitDone+0x10>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	701a      	strb	r2, [r3, #0]
}
 800d0a2:	46c0      	nop			@ (mov r8, r8)
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	200000c8 	.word	0x200000c8

0800d0ac <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d0b2:	f7f9 f949 	bl	8006348 <ReadBatteryVoltage>
 800d0b6:	1c02      	adds	r2, r0, #0
 800d0b8:	4b25      	ldr	r3, [pc, #148]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d0ba:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800d0bc:	4b24      	ldr	r3, [pc, #144]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4924      	ldr	r1, [pc, #144]	@ (800d154 <batteryChargeCheck+0xa8>)
 800d0c2:	1c18      	adds	r0, r3, #0
 800d0c4:	f7f3 fa34 	bl	8000530 <__aeabi_fcmplt>
 800d0c8:	1e03      	subs	r3, r0, #0
 800d0ca:	d002      	beq.n	800d0d2 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d0cc:	1dfb      	adds	r3, r7, #7
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800d0d2:	4b1f      	ldr	r3, [pc, #124]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	1c18      	adds	r0, r3, #0
 800d0d8:	f7f6 f9c4 	bl	8003464 <__aeabi_f2d>
 800d0dc:	4a1e      	ldr	r2, [pc, #120]	@ (800d158 <batteryChargeCheck+0xac>)
 800d0de:	4b1f      	ldr	r3, [pc, #124]	@ (800d15c <batteryChargeCheck+0xb0>)
 800d0e0:	f7f3 f9ec 	bl	80004bc <__aeabi_dcmplt>
 800d0e4:	1e03      	subs	r3, r0, #0
 800d0e6:	d00a      	beq.n	800d0fe <batteryChargeCheck+0x52>
 800d0e8:	4b19      	ldr	r3, [pc, #100]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4919      	ldr	r1, [pc, #100]	@ (800d154 <batteryChargeCheck+0xa8>)
 800d0ee:	1c18      	adds	r0, r3, #0
 800d0f0:	f7f3 fa3c 	bl	800056c <__aeabi_fcmpge>
 800d0f4:	1e03      	subs	r3, r0, #0
 800d0f6:	d002      	beq.n	800d0fe <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d0f8:	1dfb      	adds	r3, r7, #7
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800d0fe:	4b14      	ldr	r3, [pc, #80]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2181      	movs	r1, #129	@ 0x81
 800d104:	05c9      	lsls	r1, r1, #23
 800d106:	1c18      	adds	r0, r3, #0
 800d108:	f7f3 fa12 	bl	8000530 <__aeabi_fcmplt>
 800d10c:	1e03      	subs	r3, r0, #0
 800d10e:	d00d      	beq.n	800d12c <batteryChargeCheck+0x80>
 800d110:	4b0f      	ldr	r3, [pc, #60]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	1c18      	adds	r0, r3, #0
 800d116:	f7f6 f9a5 	bl	8003464 <__aeabi_f2d>
 800d11a:	4a0f      	ldr	r2, [pc, #60]	@ (800d158 <batteryChargeCheck+0xac>)
 800d11c:	4b0f      	ldr	r3, [pc, #60]	@ (800d15c <batteryChargeCheck+0xb0>)
 800d11e:	f7f3 f9eb 	bl	80004f8 <__aeabi_dcmpge>
 800d122:	1e03      	subs	r3, r0, #0
 800d124:	d002      	beq.n	800d12c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d126:	1dfb      	adds	r3, r7, #7
 800d128:	2202      	movs	r2, #2
 800d12a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800d12c:	4b08      	ldr	r3, [pc, #32]	@ (800d150 <batteryChargeCheck+0xa4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2181      	movs	r1, #129	@ 0x81
 800d132:	05c9      	lsls	r1, r1, #23
 800d134:	1c18      	adds	r0, r3, #0
 800d136:	f7f3 fa19 	bl	800056c <__aeabi_fcmpge>
 800d13a:	1e03      	subs	r3, r0, #0
 800d13c:	d002      	beq.n	800d144 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d13e:	1dfb      	adds	r3, r7, #7
 800d140:	2203      	movs	r2, #3
 800d142:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d144:	1dfb      	adds	r3, r7, #7
 800d146:	781b      	ldrb	r3, [r3, #0]
}
 800d148:	0018      	movs	r0, r3
 800d14a:	46bd      	mov	sp, r7
 800d14c:	b002      	add	sp, #8
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	20002000 	.word	0x20002000
 800d154:	40600000 	.word	0x40600000
 800d158:	9999999a 	.word	0x9999999a
 800d15c:	400d9999 	.word	0x400d9999

0800d160 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d160:	b5b0      	push	{r4, r5, r7, lr}
 800d162:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d164:	f7f9 f952 	bl	800640c <ReadSolarVoltage>
 800d168:	0003      	movs	r3, r0
 800d16a:	001a      	movs	r2, r3
 800d16c:	4b1a      	ldr	r3, [pc, #104]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d16e:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d170:	4b19      	ldr	r3, [pc, #100]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	4a19      	ldr	r2, [pc, #100]	@ (800d1dc <Calculate_LED_ON+0x7c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d802      	bhi.n	800d180 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d17a:	4b17      	ldr	r3, [pc, #92]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d17c:	4a18      	ldr	r2, [pc, #96]	@ (800d1e0 <Calculate_LED_ON+0x80>)
 800d17e:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d180:	4b15      	ldr	r3, [pc, #84]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	4a17      	ldr	r2, [pc, #92]	@ (800d1e4 <Calculate_LED_ON+0x84>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d902      	bls.n	800d190 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d18a:	4b13      	ldr	r3, [pc, #76]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d18c:	4a15      	ldr	r2, [pc, #84]	@ (800d1e4 <Calculate_LED_ON+0x84>)
 800d18e:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d190:	4b11      	ldr	r3, [pc, #68]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	0018      	movs	r0, r3
 800d196:	f7f6 f913 	bl	80033c0 <__aeabi_i2d>
 800d19a:	0004      	movs	r4, r0
 800d19c:	000d      	movs	r5, r1
 800d19e:	4b0e      	ldr	r3, [pc, #56]	@ (800d1d8 <Calculate_LED_ON+0x78>)
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	001a      	movs	r2, r3
 800d1a4:	4b10      	ldr	r3, [pc, #64]	@ (800d1e8 <Calculate_LED_ON+0x88>)
 800d1a6:	1a9b      	subs	r3, r3, r2
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	f7f6 f909 	bl	80033c0 <__aeabi_i2d>
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d1ec <Calculate_LED_ON+0x8c>)
 800d1b2:	f7f5 fa43 	bl	800263c <__aeabi_dmul>
 800d1b6:	0002      	movs	r2, r0
 800d1b8:	000b      	movs	r3, r1
 800d1ba:	0020      	movs	r0, r4
 800d1bc:	0029      	movs	r1, r5
 800d1be:	f7f4 fa95 	bl	80016ec <__aeabi_dadd>
 800d1c2:	0002      	movs	r2, r0
 800d1c4:	000b      	movs	r3, r1
 800d1c6:	0010      	movs	r0, r2
 800d1c8:	0019      	movs	r1, r3
 800d1ca:	f7f3 fa3f 	bl	800064c <__aeabi_d2uiz>
 800d1ce:	0003      	movs	r3, r0
 800d1d0:	b29b      	uxth	r3, r3
}
 800d1d2:	0018      	movs	r0, r3
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d1d8:	20002004 	.word	0x20002004
 800d1dc:	00000b53 	.word	0x00000b53
 800d1e0:	00000b54 	.word	0x00000b54
 800d1e4:	0000125c 	.word	0x0000125c
 800d1e8:	00000dee 	.word	0x00000dee
 800d1ec:	3ff80000 	.word	0x3ff80000

0800d1f0 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d1f0:	b590      	push	{r4, r7, lr}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	0004      	movs	r4, r0
 800d1f8:	0008      	movs	r0, r1
 800d1fa:	0011      	movs	r1, r2
 800d1fc:	1dbb      	adds	r3, r7, #6
 800d1fe:	1c22      	adds	r2, r4, #0
 800d200:	801a      	strh	r2, [r3, #0]
 800d202:	1d3b      	adds	r3, r7, #4
 800d204:	1c02      	adds	r2, r0, #0
 800d206:	801a      	strh	r2, [r3, #0]
 800d208:	1cbb      	adds	r3, r7, #2
 800d20a:	1c0a      	adds	r2, r1, #0
 800d20c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d20e:	4b0f      	ldr	r3, [pc, #60]	@ (800d24c <SetStatusLED+0x5c>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d107      	bne.n	800d226 <SetStatusLED+0x36>
 800d216:	4b0e      	ldr	r3, [pc, #56]	@ (800d250 <SetStatusLED+0x60>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d103      	bne.n	800d226 <SetStatusLED+0x36>
 800d21e:	4b0d      	ldr	r3, [pc, #52]	@ (800d254 <SetStatusLED+0x64>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00e      	beq.n	800d244 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d226:	2380      	movs	r3, #128	@ 0x80
 800d228:	05db      	lsls	r3, r3, #23
 800d22a:	1dba      	adds	r2, r7, #6
 800d22c:	8812      	ldrh	r2, [r2, #0]
 800d22e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d230:	2380      	movs	r3, #128	@ 0x80
 800d232:	05db      	lsls	r3, r3, #23
 800d234:	1d3a      	adds	r2, r7, #4
 800d236:	8812      	ldrh	r2, [r2, #0]
 800d238:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d23a:	2380      	movs	r3, #128	@ 0x80
 800d23c:	05db      	lsls	r3, r3, #23
 800d23e:	1cba      	adds	r2, r7, #2
 800d240:	8812      	ldrh	r2, [r2, #0]
 800d242:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d244:	46c0      	nop			@ (mov r8, r8)
 800d246:	46bd      	mov	sp, r7
 800d248:	b003      	add	sp, #12
 800d24a:	bd90      	pop	{r4, r7, pc}
 800d24c:	20001ff5 	.word	0x20001ff5
 800d250:	200000c8 	.word	0x200000c8
 800d254:	20001ff6 	.word	0x20001ff6

0800d258 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d258:	b590      	push	{r4, r7, lr}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	0004      	movs	r4, r0
 800d260:	0008      	movs	r0, r1
 800d262:	0011      	movs	r1, r2
 800d264:	1dfb      	adds	r3, r7, #7
 800d266:	1c22      	adds	r2, r4, #0
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	1dbb      	adds	r3, r7, #6
 800d26c:	1c02      	adds	r2, r0, #0
 800d26e:	701a      	strb	r2, [r3, #0]
 800d270:	1d7b      	adds	r3, r7, #5
 800d272:	1c0a      	adds	r2, r1, #0
 800d274:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d276:	4b19      	ldr	r3, [pc, #100]	@ (800d2dc <SetDBLED+0x84>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d107      	bne.n	800d28e <SetDBLED+0x36>
 800d27e:	4b18      	ldr	r3, [pc, #96]	@ (800d2e0 <SetDBLED+0x88>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d103      	bne.n	800d28e <SetDBLED+0x36>
 800d286:	4b17      	ldr	r3, [pc, #92]	@ (800d2e4 <SetDBLED+0x8c>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d022      	beq.n	800d2d4 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d28e:	1dfb      	adds	r3, r7, #7
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2201      	movs	r2, #1
 800d294:	4053      	eors	r3, r2
 800d296:	b2db      	uxtb	r3, r3
 800d298:	001a      	movs	r2, r3
 800d29a:	4b13      	ldr	r3, [pc, #76]	@ (800d2e8 <SetDBLED+0x90>)
 800d29c:	2101      	movs	r1, #1
 800d29e:	0018      	movs	r0, r3
 800d2a0:	f002 ffaf 	bl	8010202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d2a4:	1dbb      	adds	r3, r7, #6
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	4053      	eors	r3, r2
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	001a      	movs	r2, r3
 800d2b0:	2380      	movs	r3, #128	@ 0x80
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	480c      	ldr	r0, [pc, #48]	@ (800d2e8 <SetDBLED+0x90>)
 800d2b6:	0019      	movs	r1, r3
 800d2b8:	f002 ffa3 	bl	8010202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d2bc:	1d7b      	adds	r3, r7, #5
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	4053      	eors	r3, r2
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	001a      	movs	r2, r3
 800d2c8:	2380      	movs	r3, #128	@ 0x80
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4806      	ldr	r0, [pc, #24]	@ (800d2e8 <SetDBLED+0x90>)
 800d2ce:	0019      	movs	r1, r3
 800d2d0:	f002 ff97 	bl	8010202 <HAL_GPIO_WritePin>
  }
}
 800d2d4:	46c0      	nop			@ (mov r8, r8)
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	b003      	add	sp, #12
 800d2da:	bd90      	pop	{r4, r7, pc}
 800d2dc:	20001ff5 	.word	0x20001ff5
 800d2e0:	200000c8 	.word	0x200000c8
 800d2e4:	20001ff6 	.word	0x20001ff6
 800d2e8:	50000400 	.word	0x50000400

0800d2ec <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	0004      	movs	r4, r0
 800d2f4:	0008      	movs	r0, r1
 800d2f6:	0011      	movs	r1, r2
 800d2f8:	1dbb      	adds	r3, r7, #6
 800d2fa:	1c22      	adds	r2, r4, #0
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	1d3b      	adds	r3, r7, #4
 800d300:	1c02      	adds	r2, r0, #0
 800d302:	801a      	strh	r2, [r3, #0]
 800d304:	1cbb      	adds	r3, r7, #2
 800d306:	1c0a      	adds	r2, r1, #0
 800d308:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d30a:	4b0e      	ldr	r3, [pc, #56]	@ (800d344 <SetVocLED+0x58>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d107      	bne.n	800d322 <SetVocLED+0x36>
 800d312:	4b0d      	ldr	r3, [pc, #52]	@ (800d348 <SetVocLED+0x5c>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d103      	bne.n	800d322 <SetVocLED+0x36>
 800d31a:	4b0c      	ldr	r3, [pc, #48]	@ (800d34c <SetVocLED+0x60>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00b      	beq.n	800d33a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d322:	4b0b      	ldr	r3, [pc, #44]	@ (800d350 <SetVocLED+0x64>)
 800d324:	1dba      	adds	r2, r7, #6
 800d326:	8812      	ldrh	r2, [r2, #0]
 800d328:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d32a:	4b09      	ldr	r3, [pc, #36]	@ (800d350 <SetVocLED+0x64>)
 800d32c:	1d3a      	adds	r2, r7, #4
 800d32e:	8812      	ldrh	r2, [r2, #0]
 800d330:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d332:	4b07      	ldr	r3, [pc, #28]	@ (800d350 <SetVocLED+0x64>)
 800d334:	1cba      	adds	r2, r7, #2
 800d336:	8812      	ldrh	r2, [r2, #0]
 800d338:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d33a:	46c0      	nop			@ (mov r8, r8)
 800d33c:	46bd      	mov	sp, r7
 800d33e:	b003      	add	sp, #12
 800d340:	bd90      	pop	{r4, r7, pc}
 800d342:	46c0      	nop			@ (mov r8, r8)
 800d344:	20001ff5 	.word	0x20001ff5
 800d348:	200000c8 	.word	0x200000c8
 800d34c:	20001ff6 	.word	0x20001ff6
 800d350:	40000400 	.word	0x40000400

0800d354 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d354:	b580      	push	{r7, lr}
 800d356:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d358:	4b08      	ldr	r3, [pc, #32]	@ (800d37c <SetMeasurementIndicator+0x28>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d103      	bne.n	800d368 <SetMeasurementIndicator+0x14>
 800d360:	4b07      	ldr	r3, [pc, #28]	@ (800d380 <SetMeasurementIndicator+0x2c>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d006      	beq.n	800d376 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d368:	f7ff fefa 	bl	800d160 <Calculate_LED_ON>
 800d36c:	0003      	movs	r3, r0
 800d36e:	001a      	movs	r2, r3
 800d370:	2380      	movs	r3, #128	@ 0x80
 800d372:	05db      	lsls	r3, r3, #23
 800d374:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d376:	46c0      	nop			@ (mov r8, r8)
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20001ff5 	.word	0x20001ff5
 800d380:	20001ff6 	.word	0x20001ff6

0800d384 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d388:	4b07      	ldr	r3, [pc, #28]	@ (800d3a8 <ResetMeasurementIndicator+0x24>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <ResetMeasurementIndicator+0x14>
 800d390:	4b06      	ldr	r3, [pc, #24]	@ (800d3ac <ResetMeasurementIndicator+0x28>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d398:	2380      	movs	r3, #128	@ 0x80
 800d39a:	05db      	lsls	r3, r3, #23
 800d39c:	22fa      	movs	r2, #250	@ 0xfa
 800d39e:	0112      	lsls	r2, r2, #4
 800d3a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d3a2:	46c0      	nop			@ (mov r8, r8)
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	20001ff5 	.word	0x20001ff5
 800d3ac:	20001ff6 	.word	0x20001ff6

0800d3b0 <SetMICIndicator>:
void SetMICIndicator(){
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3b4:	4b16      	ldr	r3, [pc, #88]	@ (800d410 <SetMICIndicator+0x60>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d103      	bne.n	800d3c4 <SetMICIndicator+0x14>
 800d3bc:	4b15      	ldr	r3, [pc, #84]	@ (800d414 <SetMICIndicator+0x64>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d007      	beq.n	800d3d4 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d3c4:	f7ff fecc 	bl	800d160 <Calculate_LED_ON>
 800d3c8:	0003      	movs	r3, r0
 800d3ca:	001a      	movs	r2, r3
 800d3cc:	2380      	movs	r3, #128	@ 0x80
 800d3ce:	05db      	lsls	r3, r3, #23
 800d3d0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
    }
  }
}
 800d3d2:	e019      	b.n	800d408 <SetMICIndicator+0x58>
    if (batteryCharge > 3.7) {
 800d3d4:	4b10      	ldr	r3, [pc, #64]	@ (800d418 <SetMICIndicator+0x68>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	1c18      	adds	r0, r3, #0
 800d3da:	f7f6 f843 	bl	8003464 <__aeabi_f2d>
 800d3de:	4a0f      	ldr	r2, [pc, #60]	@ (800d41c <SetMICIndicator+0x6c>)
 800d3e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d420 <SetMICIndicator+0x70>)
 800d3e2:	f7f3 f87f 	bl	80004e4 <__aeabi_dcmpgt>
 800d3e6:	1e03      	subs	r3, r0, #0
 800d3e8:	d007      	beq.n	800d3fa <SetMICIndicator+0x4a>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d3ea:	f7ff feb9 	bl	800d160 <Calculate_LED_ON>
 800d3ee:	0003      	movs	r3, r0
 800d3f0:	001a      	movs	r2, r3
 800d3f2:	2380      	movs	r3, #128	@ 0x80
 800d3f4:	05db      	lsls	r3, r3, #23
 800d3f6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d3f8:	e006      	b.n	800d408 <SetMICIndicator+0x58>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d3fa:	f7ff feb1 	bl	800d160 <Calculate_LED_ON>
 800d3fe:	0003      	movs	r3, r0
 800d400:	001a      	movs	r2, r3
 800d402:	2380      	movs	r3, #128	@ 0x80
 800d404:	05db      	lsls	r3, r3, #23
 800d406:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d408:	46c0      	nop			@ (mov r8, r8)
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	46c0      	nop			@ (mov r8, r8)
 800d410:	20001ff5 	.word	0x20001ff5
 800d414:	20001ff6 	.word	0x20001ff6
 800d418:	20002000 	.word	0x20002000
 800d41c:	9999999a 	.word	0x9999999a
 800d420:	400d9999 	.word	0x400d9999

0800d424 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d428:	4b13      	ldr	r3, [pc, #76]	@ (800d478 <ResetMICIndicator+0x54>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <ResetMICIndicator+0x14>
 800d430:	4b12      	ldr	r3, [pc, #72]	@ (800d47c <ResetMICIndicator+0x58>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d005      	beq.n	800d444 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d438:	2380      	movs	r3, #128	@ 0x80
 800d43a:	05db      	lsls	r3, r3, #23
 800d43c:	22fa      	movs	r2, #250	@ 0xfa
 800d43e:	0112      	lsls	r2, r2, #4
 800d440:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d442:	e015      	b.n	800d470 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800d444:	4b0e      	ldr	r3, [pc, #56]	@ (800d480 <ResetMICIndicator+0x5c>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	1c18      	adds	r0, r3, #0
 800d44a:	f7f6 f80b 	bl	8003464 <__aeabi_f2d>
 800d44e:	4a0d      	ldr	r2, [pc, #52]	@ (800d484 <ResetMICIndicator+0x60>)
 800d450:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <ResetMICIndicator+0x64>)
 800d452:	f7f3 f847 	bl	80004e4 <__aeabi_dcmpgt>
 800d456:	1e03      	subs	r3, r0, #0
 800d458:	d005      	beq.n	800d466 <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800d45a:	2380      	movs	r3, #128	@ 0x80
 800d45c:	05db      	lsls	r3, r3, #23
 800d45e:	22fa      	movs	r2, #250	@ 0xfa
 800d460:	0112      	lsls	r2, r2, #4
 800d462:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d464:	e004      	b.n	800d470 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800d466:	2380      	movs	r3, #128	@ 0x80
 800d468:	05db      	lsls	r3, r3, #23
 800d46a:	22fa      	movs	r2, #250	@ 0xfa
 800d46c:	0112      	lsls	r2, r2, #4
 800d46e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d470:	46c0      	nop			@ (mov r8, r8)
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	46c0      	nop			@ (mov r8, r8)
 800d478:	20001ff5 	.word	0x20001ff5
 800d47c:	20001ff6 	.word	0x20001ff6
 800d480:	20002000 	.word	0x20002000
 800d484:	1eb851ec 	.word	0x1eb851ec
 800d488:	400deb85 	.word	0x400deb85

0800d48c <SetESPIndicator>:
void SetESPIndicator(){
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d490:	4b08      	ldr	r3, [pc, #32]	@ (800d4b4 <SetESPIndicator+0x28>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d103      	bne.n	800d4a0 <SetESPIndicator+0x14>
 800d498:	4b07      	ldr	r3, [pc, #28]	@ (800d4b8 <SetESPIndicator+0x2c>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d006      	beq.n	800d4ae <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4a0:	f7ff fe5e 	bl	800d160 <Calculate_LED_ON>
 800d4a4:	0003      	movs	r3, r0
 800d4a6:	001a      	movs	r2, r3
 800d4a8:	2380      	movs	r3, #128	@ 0x80
 800d4aa:	05db      	lsls	r3, r3, #23
 800d4ac:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d4ae:	46c0      	nop			@ (mov r8, r8)
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	20001ff5 	.word	0x20001ff5
 800d4b8:	20001ff6 	.word	0x20001ff6

0800d4bc <ResetESPIndicator>:
void ResetESPIndicator(){
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4c0:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <ResetESPIndicator+0x24>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <ResetESPIndicator+0x14>
 800d4c8:	4b06      	ldr	r3, [pc, #24]	@ (800d4e4 <ResetESPIndicator+0x28>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d4d0:	2380      	movs	r3, #128	@ 0x80
 800d4d2:	05db      	lsls	r3, r3, #23
 800d4d4:	22fa      	movs	r2, #250	@ 0xfa
 800d4d6:	0112      	lsls	r2, r2, #4
 800d4d8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d4da:	46c0      	nop			@ (mov r8, r8)
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	20001ff5 	.word	0x20001ff5
 800d4e4:	20001ff6 	.word	0x20001ff6

0800d4e8 <SetPMIndicator>:

void SetPMIndicator() {
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d52c <SetPMIndicator+0x44>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <SetPMIndicator+0x14>
 800d4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d530 <SetPMIndicator+0x48>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d014      	beq.n	800d526 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4fc:	f7ff fe30 	bl	800d160 <Calculate_LED_ON>
 800d500:	0003      	movs	r3, r0
 800d502:	001a      	movs	r2, r3
 800d504:	2380      	movs	r3, #128	@ 0x80
 800d506:	05db      	lsls	r3, r3, #23
 800d508:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d50a:	f7ff fe29 	bl	800d160 <Calculate_LED_ON>
 800d50e:	0003      	movs	r3, r0
 800d510:	001a      	movs	r2, r3
 800d512:	2380      	movs	r3, #128	@ 0x80
 800d514:	05db      	lsls	r3, r3, #23
 800d516:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d518:	f7ff fe22 	bl	800d160 <Calculate_LED_ON>
 800d51c:	0003      	movs	r3, r0
 800d51e:	001a      	movs	r2, r3
 800d520:	2380      	movs	r3, #128	@ 0x80
 800d522:	05db      	lsls	r3, r3, #23
 800d524:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20001ff5 	.word	0x20001ff5
 800d530:	20001ff6 	.word	0x20001ff6

0800d534 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d534:	b580      	push	{r7, lr}
 800d536:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d538:	4b0c      	ldr	r3, [pc, #48]	@ (800d56c <ResetPMIndicator+0x38>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d103      	bne.n	800d548 <ResetPMIndicator+0x14>
 800d540:	4b0b      	ldr	r3, [pc, #44]	@ (800d570 <ResetPMIndicator+0x3c>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00e      	beq.n	800d566 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	05db      	lsls	r3, r3, #23
 800d54c:	22fa      	movs	r2, #250	@ 0xfa
 800d54e:	0112      	lsls	r2, r2, #4
 800d550:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d552:	2380      	movs	r3, #128	@ 0x80
 800d554:	05db      	lsls	r3, r3, #23
 800d556:	22fa      	movs	r2, #250	@ 0xfa
 800d558:	0112      	lsls	r2, r2, #4
 800d55a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d55c:	2380      	movs	r3, #128	@ 0x80
 800d55e:	05db      	lsls	r3, r3, #23
 800d560:	22fa      	movs	r2, #250	@ 0xfa
 800d562:	0112      	lsls	r2, r2, #4
 800d564:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d566:	46c0      	nop			@ (mov r8, r8)
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20001ff5 	.word	0x20001ff5
 800d570:	20001ff6 	.word	0x20001ff6

0800d574 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d578:	23fa      	movs	r3, #250	@ 0xfa
 800d57a:	011a      	lsls	r2, r3, #4
 800d57c:	23fa      	movs	r3, #250	@ 0xfa
 800d57e:	0119      	lsls	r1, r3, #4
 800d580:	23fa      	movs	r3, #250	@ 0xfa
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	0018      	movs	r0, r3
 800d586:	f7ff fe33 	bl	800d1f0 <SetStatusLED>
  SetDBLED(false,false,false);
 800d58a:	2200      	movs	r2, #0
 800d58c:	2100      	movs	r1, #0
 800d58e:	2000      	movs	r0, #0
 800d590:	f7ff fe62 	bl	800d258 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d594:	23fa      	movs	r3, #250	@ 0xfa
 800d596:	011a      	lsls	r2, r3, #4
 800d598:	23fa      	movs	r3, #250	@ 0xfa
 800d59a:	0119      	lsls	r1, r3, #4
 800d59c:	23fa      	movs	r3, #250	@ 0xfa
 800d59e:	011b      	lsls	r3, r3, #4
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f7ff fea3 	bl	800d2ec <SetVocLED>
return;
 800d5a6:	46c0      	nop			@ (mov r8, r8)
}
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <powerCheck>:

Battery_Status powerCheck(){
 800d5ac:	b590      	push	{r4, r7, lr}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d5b2:	f7f8 ff7f 	bl	80064b4 <Check_USB_PowerOn>
 800d5b6:	0003      	movs	r3, r0
 800d5b8:	001a      	movs	r2, r3
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	4053      	eors	r3, r2
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d005      	beq.n	800d5d0 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d5c4:	1dfc      	adds	r4, r7, #7
 800d5c6:	f7ff fd71 	bl	800d0ac <batteryChargeCheck>
 800d5ca:	0003      	movs	r3, r0
 800d5cc:	7023      	strb	r3, [r4, #0]
 800d5ce:	e002      	b.n	800d5d6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d5d0:	1dfb      	adds	r3, r7, #7
 800d5d2:	2204      	movs	r2, #4
 800d5d4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800d5d6:	1dfb      	adds	r3, r7, #7
 800d5d8:	781b      	ldrb	r3, [r3, #0]
}
 800d5da:	0018      	movs	r0, r3
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	b003      	add	sp, #12
 800d5e0:	bd90      	pop	{r4, r7, pc}
	...

0800d5e4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	0002      	movs	r2, r0
 800d5ec:	1dfb      	adds	r3, r7, #7
 800d5ee:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d5f0:	1dfb      	adds	r3, r7, #7
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d105      	bne.n	800d604 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800d5f8:	4a18      	ldr	r2, [pc, #96]	@ (800d65c <powerDisplay+0x78>)
 800d5fa:	4b19      	ldr	r3, [pc, #100]	@ (800d660 <powerDisplay+0x7c>)
 800d5fc:	0019      	movs	r1, r3
 800d5fe:	2003      	movs	r0, #3
 800d600:	f000 ff28 	bl	800e454 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d604:	1dfb      	adds	r3, r7, #7
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	2b03      	cmp	r3, #3
 800d60a:	d105      	bne.n	800d618 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d60c:	4a15      	ldr	r2, [pc, #84]	@ (800d664 <powerDisplay+0x80>)
 800d60e:	4b14      	ldr	r3, [pc, #80]	@ (800d660 <powerDisplay+0x7c>)
 800d610:	0019      	movs	r1, r3
 800d612:	2003      	movs	r0, #3
 800d614:	f000 ff1e 	bl	800e454 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d618:	1dfb      	adds	r3, r7, #7
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d105      	bne.n	800d62c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d620:	4a11      	ldr	r2, [pc, #68]	@ (800d668 <powerDisplay+0x84>)
 800d622:	4b0f      	ldr	r3, [pc, #60]	@ (800d660 <powerDisplay+0x7c>)
 800d624:	0019      	movs	r1, r3
 800d626:	2003      	movs	r0, #3
 800d628:	f000 ff14 	bl	800e454 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d62c:	1dfb      	adds	r3, r7, #7
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d105      	bne.n	800d640 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d634:	4a0d      	ldr	r2, [pc, #52]	@ (800d66c <powerDisplay+0x88>)
 800d636:	4b0a      	ldr	r3, [pc, #40]	@ (800d660 <powerDisplay+0x7c>)
 800d638:	0019      	movs	r1, r3
 800d63a:	2003      	movs	r0, #3
 800d63c:	f000 ff0a 	bl	800e454 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d640:	1dfb      	adds	r3, r7, #7
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d105      	bne.n	800d654 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d648:	4a09      	ldr	r2, [pc, #36]	@ (800d670 <powerDisplay+0x8c>)
 800d64a:	4b05      	ldr	r3, [pc, #20]	@ (800d660 <powerDisplay+0x7c>)
 800d64c:	0019      	movs	r1, r3
 800d64e:	2003      	movs	r0, #3
 800d650:	f000 ff00 	bl	800e454 <CreateLine>
  }
}
 800d654:	46c0      	nop			@ (mov r8, r8)
 800d656:	46bd      	mov	sp, r7
 800d658:	b002      	add	sp, #8
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	08024df4 	.word	0x08024df4
 800d660:	08024e04 	.word	0x08024e04
 800d664:	08024e08 	.word	0x08024e08
 800d668:	08024e20 	.word	0x08024e20
 800d66c:	08024e40 	.word	0x08024e40
 800d670:	08024e58 	.word	0x08024e58

0800d674 <configCheck>:

void configCheck(){
 800d674:	b590      	push	{r4, r7, lr}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d67a:	f7f8 ff2a 	bl	80064d2 <BootButton_Pressed>
 800d67e:	1e03      	subs	r3, r0, #0
 800d680:	d007      	beq.n	800d692 <configCheck+0x1e>
 800d682:	f7f8 ff37 	bl	80064f4 <UserButton_Pressed>
 800d686:	1e03      	subs	r3, r0, #0
 800d688:	d003      	beq.n	800d692 <configCheck+0x1e>
    configSet = true;
 800d68a:	4ba7      	ldr	r3, [pc, #668]	@ (800d928 <configCheck+0x2b4>)
 800d68c:	2201      	movs	r2, #1
 800d68e:	701a      	strb	r2, [r3, #0]
 800d690:	e00a      	b.n	800d6a8 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d692:	4ba5      	ldr	r3, [pc, #660]	@ (800d928 <configCheck+0x2b4>)
 800d694:	2200      	movs	r2, #0
 800d696:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d698:	f001 fb22 	bl	800ece0 <HAL_GetTick>
 800d69c:	0003      	movs	r3, r0
 800d69e:	22fa      	movs	r2, #250	@ 0xfa
 800d6a0:	00d2      	lsls	r2, r2, #3
 800d6a2:	189a      	adds	r2, r3, r2
 800d6a4:	4ba1      	ldr	r3, [pc, #644]	@ (800d92c <configCheck+0x2b8>)
 800d6a6:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d6a8:	4b9f      	ldr	r3, [pc, #636]	@ (800d928 <configCheck+0x2b4>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00d      	beq.n	800d6cc <configCheck+0x58>
 800d6b0:	4b9e      	ldr	r3, [pc, #632]	@ (800d92c <configCheck+0x2b8>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	f000 fe77 	bl	800e3a8 <TimestampIsReached>
 800d6ba:	1e03      	subs	r3, r0, #0
 800d6bc:	d006      	beq.n	800d6cc <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d6be:	f7f6 f9ed 	bl	8003a9c <SetConfigMode>
    SetDBLED(true, true, true);
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	f7ff fdc6 	bl	800d258 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld && !GetReconfigMode()){
 800d6cc:	f7f8 ff01 	bl	80064d2 <BootButton_Pressed>
 800d6d0:	0003      	movs	r3, r0
 800d6d2:	001a      	movs	r2, r3
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4053      	eors	r3, r2
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d03a      	beq.n	800d754 <configCheck+0xe0>
 800d6de:	f7f8 ff09 	bl	80064f4 <UserButton_Pressed>
 800d6e2:	1e03      	subs	r3, r0, #0
 800d6e4:	d036      	beq.n	800d754 <configCheck+0xe0>
 800d6e6:	4b92      	ldr	r3, [pc, #584]	@ (800d930 <configCheck+0x2bc>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	4053      	eors	r3, r2
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d02f      	beq.n	800d754 <configCheck+0xe0>
 800d6f4:	f7f6 f9e2 	bl	8003abc <GetReconfigMode>
 800d6f8:	0003      	movs	r3, r0
 800d6fa:	001a      	movs	r2, r3
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	4053      	eors	r3, r2
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d026      	beq.n	800d754 <configCheck+0xe0>
    SetLEDsOff();
 800d706:	f7ff ff35 	bl	800d574 <SetLEDsOff>
    Debug("userToggle flipped");
 800d70a:	4a8a      	ldr	r2, [pc, #552]	@ (800d934 <configCheck+0x2c0>)
 800d70c:	4b8a      	ldr	r3, [pc, #552]	@ (800d938 <configCheck+0x2c4>)
 800d70e:	0019      	movs	r1, r3
 800d710:	2003      	movs	r0, #3
 800d712:	f000 fe9f 	bl	800e454 <CreateLine>
    userToggle = !userToggle;
 800d716:	4b89      	ldr	r3, [pc, #548]	@ (800d93c <configCheck+0x2c8>)
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	1e5a      	subs	r2, r3, #1
 800d71c:	4193      	sbcs	r3, r2
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2201      	movs	r2, #1
 800d722:	4053      	eors	r3, r2
 800d724:	b2db      	uxtb	r3, r3
 800d726:	1c1a      	adds	r2, r3, #0
 800d728:	2301      	movs	r3, #1
 800d72a:	4013      	ands	r3, r2
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	4b83      	ldr	r3, [pc, #524]	@ (800d93c <configCheck+0x2c8>)
 800d730:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d732:	4b82      	ldr	r3, [pc, #520]	@ (800d93c <configCheck+0x2c8>)
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <configCheck+0xca>
      EnabledConnectedDevices();
 800d73a:	f7fb f8bd 	bl	80088b8 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d73e:	4b7c      	ldr	r3, [pc, #496]	@ (800d930 <configCheck+0x2bc>)
 800d740:	2201      	movs	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d744:	f001 facc 	bl	800ece0 <HAL_GetTick>
 800d748:	0003      	movs	r3, r0
 800d74a:	22fa      	movs	r2, #250	@ 0xfa
 800d74c:	00d2      	lsls	r2, r2, #3
 800d74e:	189a      	adds	r2, r3, r2
 800d750:	4b7b      	ldr	r3, [pc, #492]	@ (800d940 <configCheck+0x2cc>)
 800d752:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d754:	f7f8 febd 	bl	80064d2 <BootButton_Pressed>
 800d758:	0003      	movs	r3, r0
 800d75a:	001a      	movs	r2, r3
 800d75c:	2301      	movs	r3, #1
 800d75e:	4053      	eors	r3, r2
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d100      	bne.n	800d768 <configCheck+0xf4>
 800d766:	e0aa      	b.n	800d8be <configCheck+0x24a>
 800d768:	4b71      	ldr	r3, [pc, #452]	@ (800d930 <configCheck+0x2bc>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d100      	bne.n	800d772 <configCheck+0xfe>
 800d770:	e0a5      	b.n	800d8be <configCheck+0x24a>
 800d772:	4b73      	ldr	r3, [pc, #460]	@ (800d940 <configCheck+0x2cc>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	0018      	movs	r0, r3
 800d778:	f000 fe16 	bl	800e3a8 <TimestampIsReached>
 800d77c:	1e03      	subs	r3, r0, #0
 800d77e:	d100      	bne.n	800d782 <configCheck+0x10e>
 800d780:	e09d      	b.n	800d8be <configCheck+0x24a>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d782:	f7fa fdfb 	bl	800837c <GetPMSensorPresence>
 800d786:	1e03      	subs	r3, r0, #0
 800d788:	d100      	bne.n	800d78c <configCheck+0x118>
 800d78a:	e088      	b.n	800d89e <configCheck+0x22a>
 800d78c:	4b6d      	ldr	r3, [pc, #436]	@ (800d944 <configCheck+0x2d0>)
 800d78e:	791b      	ldrb	r3, [r3, #4]
 800d790:	2b34      	cmp	r3, #52	@ 0x34
 800d792:	d004      	beq.n	800d79e <configCheck+0x12a>
 800d794:	4b6b      	ldr	r3, [pc, #428]	@ (800d944 <configCheck+0x2d0>)
 800d796:	791b      	ldrb	r3, [r3, #4]
 800d798:	2b35      	cmp	r3, #53	@ 0x35
 800d79a:	d000      	beq.n	800d79e <configCheck+0x12a>
 800d79c:	e07f      	b.n	800d89e <configCheck+0x22a>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d79e:	4b6a      	ldr	r3, [pc, #424]	@ (800d948 <configCheck+0x2d4>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	1e5a      	subs	r2, r3, #1
 800d7a4:	4193      	sbcs	r3, r2
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	4053      	eors	r3, r2
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	1c1a      	adds	r2, r3, #0
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	4b64      	ldr	r3, [pc, #400]	@ (800d948 <configCheck+0x2d4>)
 800d7b8:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d7ba:	4b63      	ldr	r3, [pc, #396]	@ (800d948 <configCheck+0x2d4>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d005      	beq.n	800d7ce <configCheck+0x15a>
 800d7c2:	1dbc      	adds	r4, r7, #6
 800d7c4:	f7ff fccc 	bl	800d160 <Calculate_LED_ON>
 800d7c8:	0003      	movs	r3, r0
 800d7ca:	8023      	strh	r3, [r4, #0]
 800d7cc:	e003      	b.n	800d7d6 <configCheck+0x162>
        else color = 4000;
 800d7ce:	1dbb      	adds	r3, r7, #6
 800d7d0:	22fa      	movs	r2, #250	@ 0xfa
 800d7d2:	0112      	lsls	r2, r2, #4
 800d7d4:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d7d6:	4b5c      	ldr	r3, [pc, #368]	@ (800d948 <configCheck+0x2d4>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d001      	beq.n	800d7e2 <configCheck+0x16e>
 800d7de:	4b5b      	ldr	r3, [pc, #364]	@ (800d94c <configCheck+0x2d8>)
 800d7e0:	e000      	b.n	800d7e4 <configCheck+0x170>
 800d7e2:	4b5b      	ldr	r3, [pc, #364]	@ (800d950 <configCheck+0x2dc>)
 800d7e4:	4a5b      	ldr	r2, [pc, #364]	@ (800d954 <configCheck+0x2e0>)
 800d7e6:	495c      	ldr	r1, [pc, #368]	@ (800d958 <configCheck+0x2e4>)
 800d7e8:	2002      	movs	r0, #2
 800d7ea:	f000 fe33 	bl	800e454 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d7ee:	1d7b      	adds	r3, r7, #5
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
 800d7f4:	e028      	b.n	800d848 <configCheck+0x1d4>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d7f6:	f7ff fcb3 	bl	800d160 <Calculate_LED_ON>
 800d7fa:	0003      	movs	r3, r0
 800d7fc:	001a      	movs	r2, r3
 800d7fe:	4b57      	ldr	r3, [pc, #348]	@ (800d95c <configCheck+0x2e8>)
 800d800:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d802:	4b56      	ldr	r3, [pc, #344]	@ (800d95c <configCheck+0x2e8>)
 800d804:	1dba      	adds	r2, r7, #6
 800d806:	8812      	ldrh	r2, [r2, #0]
 800d808:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d80a:	4b54      	ldr	r3, [pc, #336]	@ (800d95c <configCheck+0x2e8>)
 800d80c:	1dba      	adds	r2, r7, #6
 800d80e:	8812      	ldrh	r2, [r2, #0]
 800d810:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d812:	23c8      	movs	r3, #200	@ 0xc8
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	0018      	movs	r0, r3
 800d818:	f001 fa6c 	bl	800ecf4 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d81c:	4b4f      	ldr	r3, [pc, #316]	@ (800d95c <configCheck+0x2e8>)
 800d81e:	22fa      	movs	r2, #250	@ 0xfa
 800d820:	0112      	lsls	r2, r2, #4
 800d822:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d824:	4b4d      	ldr	r3, [pc, #308]	@ (800d95c <configCheck+0x2e8>)
 800d826:	22fa      	movs	r2, #250	@ 0xfa
 800d828:	0112      	lsls	r2, r2, #4
 800d82a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d82c:	4b4b      	ldr	r3, [pc, #300]	@ (800d95c <configCheck+0x2e8>)
 800d82e:	22fa      	movs	r2, #250	@ 0xfa
 800d830:	0112      	lsls	r2, r2, #4
 800d832:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d834:	23c8      	movs	r3, #200	@ 0xc8
 800d836:	005b      	lsls	r3, r3, #1
 800d838:	0018      	movs	r0, r3
 800d83a:	f001 fa5b 	bl	800ecf4 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d83e:	1d7b      	adds	r3, r7, #5
 800d840:	781a      	ldrb	r2, [r3, #0]
 800d842:	1d7b      	adds	r3, r7, #5
 800d844:	3201      	adds	r2, #1
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	1d7b      	adds	r3, r7, #5
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d9d2      	bls.n	800d7f6 <configCheck+0x182>
      }
      Debug("userToggle flipped back to prior status");
 800d850:	4a43      	ldr	r2, [pc, #268]	@ (800d960 <configCheck+0x2ec>)
 800d852:	4b39      	ldr	r3, [pc, #228]	@ (800d938 <configCheck+0x2c4>)
 800d854:	0019      	movs	r1, r3
 800d856:	2003      	movs	r0, #3
 800d858:	f000 fdfc 	bl	800e454 <CreateLine>
      userToggle = !userToggle;
 800d85c:	4b37      	ldr	r3, [pc, #220]	@ (800d93c <configCheck+0x2c8>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	1e5a      	subs	r2, r3, #1
 800d862:	4193      	sbcs	r3, r2
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2201      	movs	r2, #1
 800d868:	4053      	eors	r3, r2
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	1c1a      	adds	r2, r3, #0
 800d86e:	2301      	movs	r3, #1
 800d870:	4013      	ands	r3, r2
 800d872:	b2da      	uxtb	r2, r3
 800d874:	4b31      	ldr	r3, [pc, #196]	@ (800d93c <configCheck+0x2c8>)
 800d876:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800d878:	4b30      	ldr	r3, [pc, #192]	@ (800d93c <configCheck+0x2c8>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <configCheck+0x210>
 800d880:	4b32      	ldr	r3, [pc, #200]	@ (800d94c <configCheck+0x2d8>)
 800d882:	e000      	b.n	800d886 <configCheck+0x212>
 800d884:	4b32      	ldr	r3, [pc, #200]	@ (800d950 <configCheck+0x2dc>)
 800d886:	4a37      	ldr	r2, [pc, #220]	@ (800d964 <configCheck+0x2f0>)
 800d888:	4933      	ldr	r1, [pc, #204]	@ (800d958 <configCheck+0x2e4>)
 800d88a:	2002      	movs	r0, #2
 800d88c:	f000 fde2 	bl	800e454 <CreateLine>
      if (usbPluggedIn) {
 800d890:	4b35      	ldr	r3, [pc, #212]	@ (800d968 <configCheck+0x2f4>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d009      	beq.n	800d8ac <configCheck+0x238>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800d898:	f7fc f8e0 	bl	8009a5c <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d89c:	e006      	b.n	800d8ac <configCheck+0x238>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800d89e:	4a33      	ldr	r2, [pc, #204]	@ (800d96c <configCheck+0x2f8>)
 800d8a0:	4b2d      	ldr	r3, [pc, #180]	@ (800d958 <configCheck+0x2e4>)
 800d8a2:	0019      	movs	r1, r3
 800d8a4:	2002      	movs	r0, #2
 800d8a6:	f000 fdd5 	bl	800e454 <CreateLine>
 800d8aa:	e000      	b.n	800d8ae <configCheck+0x23a>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d8ac:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800d8ae:	46c0      	nop			@ (mov r8, r8)
 800d8b0:	f7f8 fe20 	bl	80064f4 <UserButton_Pressed>
 800d8b4:	1e03      	subs	r3, r0, #0
 800d8b6:	d1fb      	bne.n	800d8b0 <configCheck+0x23c>
    }
    buttonHeld = false;
 800d8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d930 <configCheck+0x2bc>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d8be:	f7f8 fe08 	bl	80064d2 <BootButton_Pressed>
 800d8c2:	0003      	movs	r3, r0
 800d8c4:	001a      	movs	r2, r3
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	4053      	eors	r3, r2
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <configCheck+0x274>
 800d8d0:	f7f8 fe10 	bl	80064f4 <UserButton_Pressed>
 800d8d4:	0003      	movs	r3, r0
 800d8d6:	001a      	movs	r2, r3
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4053      	eors	r3, r2
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <configCheck+0x274>
    buttonHeld = false;
 800d8e2:	4b13      	ldr	r3, [pc, #76]	@ (800d930 <configCheck+0x2bc>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d8e8:	f7f8 fde4 	bl	80064b4 <Check_USB_PowerOn>
 800d8ec:	1e03      	subs	r3, r0, #0
 800d8ee:	d003      	beq.n	800d8f8 <configCheck+0x284>
    usbPluggedIn = true;
 800d8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d968 <configCheck+0x2f4>)
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d8f6:	e012      	b.n	800d91e <configCheck+0x2aa>
    if(!userToggle && !init){
 800d8f8:	4b10      	ldr	r3, [pc, #64]	@ (800d93c <configCheck+0x2c8>)
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	4053      	eors	r3, r2
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d008      	beq.n	800d918 <configCheck+0x2a4>
 800d906:	4b1a      	ldr	r3, [pc, #104]	@ (800d970 <configCheck+0x2fc>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2201      	movs	r2, #1
 800d90c:	4053      	eors	r3, r2
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <configCheck+0x2a4>
      SetLEDsOff();
 800d914:	f7ff fe2e 	bl	800d574 <SetLEDsOff>
    usbPluggedIn = false;
 800d918:	4b13      	ldr	r3, [pc, #76]	@ (800d968 <configCheck+0x2f4>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	701a      	strb	r2, [r3, #0]
}
 800d91e:	46c0      	nop			@ (mov r8, r8)
 800d920:	46bd      	mov	sp, r7
 800d922:	b003      	add	sp, #12
 800d924:	bd90      	pop	{r4, r7, pc}
 800d926:	46c0      	nop			@ (mov r8, r8)
 800d928:	20001ff4 	.word	0x20001ff4
 800d92c:	20001ff8 	.word	0x20001ff8
 800d930:	20001ff7 	.word	0x20001ff7
 800d934:	08024e7c 	.word	0x08024e7c
 800d938:	08024e04 	.word	0x08024e04
 800d93c:	20001ff6 	.word	0x20001ff6
 800d940:	20001ffc 	.word	0x20001ffc
 800d944:	2000105c 	.word	0x2000105c
 800d948:	2000105a 	.word	0x2000105a
 800d94c:	08024e90 	.word	0x08024e90
 800d950:	08024e98 	.word	0x08024e98
 800d954:	08024ea4 	.word	0x08024ea4
 800d958:	08024ec4 	.word	0x08024ec4
 800d95c:	40000400 	.word	0x40000400
 800d960:	08024ec8 	.word	0x08024ec8
 800d964:	08024ef0 	.word	0x08024ef0
 800d968:	20001ff5 	.word	0x20001ff5
 800d96c:	08024f08 	.word	0x08024f08
 800d970:	200000c8 	.word	0x200000c8

0800d974 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800d974:	b590      	push	{r4, r7, lr}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d97a:	1dfc      	adds	r4, r7, #7
 800d97c:	f7ff fe16 	bl	800d5ac <powerCheck>
 800d980:	0003      	movs	r3, r0
 800d982:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d984:	1dfb      	adds	r3, r7, #7
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	0018      	movs	r0, r3
 800d98a:	f7ff fe2b 	bl	800d5e4 <powerDisplay>
  return status;
 800d98e:	1dfb      	adds	r3, r7, #7
 800d990:	781b      	ldrb	r3, [r3, #0]
}
 800d992:	0018      	movs	r0, r3
 800d994:	46bd      	mov	sp, r7
 800d996:	b003      	add	sp, #12
 800d998:	bd90      	pop	{r4, r7, pc}
	...

0800d99c <setuserToggle>:

void setuserToggle(void) {
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d9a0:	f7ff fe04 	bl	800d5ac <powerCheck>
 800d9a4:	0003      	movs	r3, r0
 800d9a6:	2b04      	cmp	r3, #4
 800d9a8:	d002      	beq.n	800d9b0 <setuserToggle+0x14>
    userToggle = true;
 800d9aa:	4b03      	ldr	r3, [pc, #12]	@ (800d9b8 <setuserToggle+0x1c>)
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	701a      	strb	r2, [r3, #0]
  }
}
 800d9b0:	46c0      	nop			@ (mov r8, r8)
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	46c0      	nop			@ (mov r8, r8)
 800d9b8:	20001ff6 	.word	0x20001ff6

0800d9bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9c0:	4b07      	ldr	r3, [pc, #28]	@ (800d9e0 <HAL_MspInit+0x24>)
 800d9c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9c4:	4b06      	ldr	r3, [pc, #24]	@ (800d9e0 <HAL_MspInit+0x24>)
 800d9c6:	2101      	movs	r1, #1
 800d9c8:	430a      	orrs	r2, r1
 800d9ca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9cc:	4b04      	ldr	r3, [pc, #16]	@ (800d9e0 <HAL_MspInit+0x24>)
 800d9ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9d0:	4b03      	ldr	r3, [pc, #12]	@ (800d9e0 <HAL_MspInit+0x24>)
 800d9d2:	2180      	movs	r1, #128	@ 0x80
 800d9d4:	0549      	lsls	r1, r1, #21
 800d9d6:	430a      	orrs	r2, r1
 800d9d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d9da:	46c0      	nop			@ (mov r8, r8)
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	40021000 	.word	0x40021000

0800d9e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d9e8:	46c0      	nop			@ (mov r8, r8)
 800d9ea:	e7fd      	b.n	800d9e8 <NMI_Handler+0x4>

0800d9ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d9f0:	46c0      	nop			@ (mov r8, r8)
 800d9f2:	e7fd      	b.n	800d9f0 <HardFault_Handler+0x4>

0800d9f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d9f8:	46c0      	nop			@ (mov r8, r8)
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da0c:	f001 f956 	bl	800ecbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800da10:	46c0      	nop			@ (mov r8, r8)
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800da1c:	4b03      	ldr	r3, [pc, #12]	@ (800da2c <RTC_IRQHandler+0x14>)
 800da1e:	0018      	movs	r0, r3
 800da20:	f008 fe7c 	bl	801671c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800da24:	46c0      	nop			@ (mov r8, r8)
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	46c0      	nop			@ (mov r8, r8)
 800da2c:	20001034 	.word	0x20001034

0800da30 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800da34:	2380      	movs	r3, #128	@ 0x80
 800da36:	021b      	lsls	r3, r3, #8
 800da38:	0018      	movs	r0, r3
 800da3a:	f002 fbff 	bl	801023c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800da3e:	46c0      	nop			@ (mov r8, r8)
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800da48:	4b05      	ldr	r3, [pc, #20]	@ (800da60 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800da4a:	0018      	movs	r0, r3
 800da4c:	f001 ff87 	bl	800f95e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800da50:	4b04      	ldr	r3, [pc, #16]	@ (800da64 <DMA1_Channel2_3_IRQHandler+0x20>)
 800da52:	0018      	movs	r0, r3
 800da54:	f001 ff83 	bl	800f95e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800da58:	46c0      	nop			@ (mov r8, r8)
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	46c0      	nop			@ (mov r8, r8)
 800da60:	20000ed4 	.word	0x20000ed4
 800da64:	20000e8c 	.word	0x20000e8c

0800da68 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800da6c:	4b07      	ldr	r3, [pc, #28]	@ (800da8c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800da6e:	0018      	movs	r0, r3
 800da70:	f001 ff75 	bl	800f95e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800da74:	4b06      	ldr	r3, [pc, #24]	@ (800da90 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800da76:	0018      	movs	r0, r3
 800da78:	f001 ff71 	bl	800f95e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800da7c:	4b05      	ldr	r3, [pc, #20]	@ (800da94 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800da7e:	0018      	movs	r0, r3
 800da80:	f001 ff6d 	bl	800f95e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800da84:	46c0      	nop			@ (mov r8, r8)
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	46c0      	nop			@ (mov r8, r8)
 800da8c:	20000f58 	.word	0x20000f58
 800da90:	200022f4 	.word	0x200022f4
 800da94:	2000233c 	.word	0x2000233c

0800da98 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800da9c:	4b03      	ldr	r3, [pc, #12]	@ (800daac <USART4_5_IRQHandler+0x14>)
 800da9e:	0018      	movs	r0, r3
 800daa0:	f009 fd36 	bl	8017510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800daa4:	46c0      	nop			@ (mov r8, r8)
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	46c0      	nop			@ (mov r8, r8)
 800daac:	2000223c 	.word	0x2000223c

0800dab0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800dab4:	4b09      	ldr	r3, [pc, #36]	@ (800dadc <I2C1_IRQHandler+0x2c>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	699a      	ldr	r2, [r3, #24]
 800daba:	23e0      	movs	r3, #224	@ 0xe0
 800dabc:	00db      	lsls	r3, r3, #3
 800dabe:	4013      	ands	r3, r2
 800dac0:	d004      	beq.n	800dacc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800dac2:	4b06      	ldr	r3, [pc, #24]	@ (800dadc <I2C1_IRQHandler+0x2c>)
 800dac4:	0018      	movs	r0, r3
 800dac6:	f003 f8a1 	bl	8010c0c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800daca:	e003      	b.n	800dad4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800dacc:	4b03      	ldr	r3, [pc, #12]	@ (800dadc <I2C1_IRQHandler+0x2c>)
 800dace:	0018      	movs	r0, r3
 800dad0:	f003 f882 	bl	8010bd8 <HAL_I2C_EV_IRQHandler>
}
 800dad4:	46c0      	nop			@ (mov r8, r8)
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	46c0      	nop			@ (mov r8, r8)
 800dadc:	20000de4 	.word	0x20000de4

0800dae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800dae4:	4b03      	ldr	r3, [pc, #12]	@ (800daf4 <USART1_IRQHandler+0x14>)
 800dae6:	0018      	movs	r0, r3
 800dae8:	f009 fd12 	bl	8017510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800daec:	46c0      	nop			@ (mov r8, r8)
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	46c0      	nop			@ (mov r8, r8)
 800daf4:	20002184 	.word	0x20002184

0800daf8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800dafc:	4b03      	ldr	r3, [pc, #12]	@ (800db0c <USB_IRQHandler+0x14>)
 800dafe:	0018      	movs	r0, r3
 800db00:	f005 fc62 	bl	80133c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800db04:	46c0      	nop			@ (mov r8, r8)
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	46c0      	nop			@ (mov r8, r8)
 800db0c:	20003150 	.word	0x20003150

0800db10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  return 1;
 800db14:	2301      	movs	r3, #1
}
 800db16:	0018      	movs	r0, r3
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <_kill>:

int _kill(int pid, int sig)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800db26:	f012 fbd7 	bl	80202d8 <__errno>
 800db2a:	0003      	movs	r3, r0
 800db2c:	2216      	movs	r2, #22
 800db2e:	601a      	str	r2, [r3, #0]
  return -1;
 800db30:	2301      	movs	r3, #1
 800db32:	425b      	negs	r3, r3
}
 800db34:	0018      	movs	r0, r3
 800db36:	46bd      	mov	sp, r7
 800db38:	b002      	add	sp, #8
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_exit>:

void _exit (int status)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800db44:	2301      	movs	r3, #1
 800db46:	425a      	negs	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	0011      	movs	r1, r2
 800db4c:	0018      	movs	r0, r3
 800db4e:	f7ff ffe5 	bl	800db1c <_kill>
  while (1) {}    /* Make sure we hang here */
 800db52:	46c0      	nop			@ (mov r8, r8)
 800db54:	e7fd      	b.n	800db52 <_exit+0x16>

0800db56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b086      	sub	sp, #24
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	e00a      	b.n	800db7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800db68:	e000      	b.n	800db6c <_read+0x16>
 800db6a:	bf00      	nop
 800db6c:	0001      	movs	r1, r0
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	60ba      	str	r2, [r7, #8]
 800db74:	b2ca      	uxtb	r2, r1
 800db76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	3301      	adds	r3, #1
 800db7c:	617b      	str	r3, [r7, #20]
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	429a      	cmp	r2, r3
 800db84:	dbf0      	blt.n	800db68 <_read+0x12>
  }

  return len;
 800db86:	687b      	ldr	r3, [r7, #4]
}
 800db88:	0018      	movs	r0, r3
 800db8a:	46bd      	mov	sp, r7
 800db8c:	b006      	add	sp, #24
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <_close>:
  }
  return len;
}

int _close(int file)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800db98:	2301      	movs	r3, #1
 800db9a:	425b      	negs	r3, r3
}
 800db9c:	0018      	movs	r0, r3
 800db9e:	46bd      	mov	sp, r7
 800dba0:	b002      	add	sp, #8
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2280      	movs	r2, #128	@ 0x80
 800dbb2:	0192      	lsls	r2, r2, #6
 800dbb4:	605a      	str	r2, [r3, #4]
  return 0;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	0018      	movs	r0, r3
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	b002      	add	sp, #8
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <_isatty>:

int _isatty(int file)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dbc8:	2301      	movs	r3, #1
}
 800dbca:	0018      	movs	r0, r3
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	b002      	add	sp, #8
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	60f8      	str	r0, [r7, #12]
 800dbda:	60b9      	str	r1, [r7, #8]
 800dbdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dbde:	2300      	movs	r3, #0
}
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	b004      	add	sp, #16
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dbf0:	4a14      	ldr	r2, [pc, #80]	@ (800dc44 <_sbrk+0x5c>)
 800dbf2:	4b15      	ldr	r3, [pc, #84]	@ (800dc48 <_sbrk+0x60>)
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dbfc:	4b13      	ldr	r3, [pc, #76]	@ (800dc4c <_sbrk+0x64>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dc04:	4b11      	ldr	r3, [pc, #68]	@ (800dc4c <_sbrk+0x64>)
 800dc06:	4a12      	ldr	r2, [pc, #72]	@ (800dc50 <_sbrk+0x68>)
 800dc08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dc0a:	4b10      	ldr	r3, [pc, #64]	@ (800dc4c <_sbrk+0x64>)
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	18d3      	adds	r3, r2, r3
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d207      	bcs.n	800dc28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dc18:	f012 fb5e 	bl	80202d8 <__errno>
 800dc1c:	0003      	movs	r3, r0
 800dc1e:	220c      	movs	r2, #12
 800dc20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dc22:	2301      	movs	r3, #1
 800dc24:	425b      	negs	r3, r3
 800dc26:	e009      	b.n	800dc3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dc28:	4b08      	ldr	r3, [pc, #32]	@ (800dc4c <_sbrk+0x64>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dc2e:	4b07      	ldr	r3, [pc, #28]	@ (800dc4c <_sbrk+0x64>)
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	18d2      	adds	r2, r2, r3
 800dc36:	4b05      	ldr	r3, [pc, #20]	@ (800dc4c <_sbrk+0x64>)
 800dc38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
}
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	b006      	add	sp, #24
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	20005000 	.word	0x20005000
 800dc48:	00000400 	.word	0x00000400
 800dc4c:	20002008 	.word	0x20002008
 800dc50:	200037b0 	.word	0x200037b0

0800dc54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dc58:	46c0      	nop			@ (mov r8, r8)
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc66:	2310      	movs	r3, #16
 800dc68:	18fb      	adds	r3, r7, r3
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	2308      	movs	r3, #8
 800dc6e:	001a      	movs	r2, r3
 800dc70:	2100      	movs	r1, #0
 800dc72:	f012 fa8d 	bl	8020190 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc76:	003b      	movs	r3, r7
 800dc78:	0018      	movs	r0, r3
 800dc7a:	2310      	movs	r3, #16
 800dc7c:	001a      	movs	r2, r3
 800dc7e:	2100      	movs	r1, #0
 800dc80:	f012 fa86 	bl	8020190 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc84:	4b2e      	ldr	r3, [pc, #184]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dc86:	2280      	movs	r2, #128	@ 0x80
 800dc88:	05d2      	lsls	r2, r2, #23
 800dc8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc8c:	4b2c      	ldr	r3, [pc, #176]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc92:	4b2b      	ldr	r3, [pc, #172]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800dc98:	4b29      	ldr	r3, [pc, #164]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dc9a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd44 <MX_TIM2_Init+0xe4>)
 800dc9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc9e:	4b28      	ldr	r3, [pc, #160]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dca4:	4b26      	ldr	r3, [pc, #152]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dcaa:	4b25      	ldr	r3, [pc, #148]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dcac:	0018      	movs	r0, r3
 800dcae:	f008 fe43 	bl	8016938 <HAL_TIM_PWM_Init>
 800dcb2:	1e03      	subs	r3, r0, #0
 800dcb4:	d001      	beq.n	800dcba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800dcb6:	f7fa fb23 	bl	8008300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcba:	2110      	movs	r1, #16
 800dcbc:	187b      	adds	r3, r7, r1
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcc2:	187b      	adds	r3, r7, r1
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dcc8:	187a      	adds	r2, r7, r1
 800dcca:	4b1d      	ldr	r3, [pc, #116]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dccc:	0011      	movs	r1, r2
 800dcce:	0018      	movs	r0, r3
 800dcd0:	f009 f950 	bl	8016f74 <HAL_TIMEx_MasterConfigSynchronization>
 800dcd4:	1e03      	subs	r3, r0, #0
 800dcd6:	d001      	beq.n	800dcdc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dcd8:	f7fa fb12 	bl	8008300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dcdc:	003b      	movs	r3, r7
 800dcde:	2260      	movs	r2, #96	@ 0x60
 800dce0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dce2:	003b      	movs	r3, r7
 800dce4:	2200      	movs	r2, #0
 800dce6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dce8:	003b      	movs	r3, r7
 800dcea:	2200      	movs	r2, #0
 800dcec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dcee:	003b      	movs	r3, r7
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dcf4:	0039      	movs	r1, r7
 800dcf6:	4b12      	ldr	r3, [pc, #72]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f008 feee 	bl	8016adc <HAL_TIM_PWM_ConfigChannel>
 800dd00:	1e03      	subs	r3, r0, #0
 800dd02:	d001      	beq.n	800dd08 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800dd04:	f7fa fafc 	bl	8008300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dd08:	0039      	movs	r1, r7
 800dd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dd0c:	2208      	movs	r2, #8
 800dd0e:	0018      	movs	r0, r3
 800dd10:	f008 fee4 	bl	8016adc <HAL_TIM_PWM_ConfigChannel>
 800dd14:	1e03      	subs	r3, r0, #0
 800dd16:	d001      	beq.n	800dd1c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dd18:	f7fa faf2 	bl	8008300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dd1c:	0039      	movs	r1, r7
 800dd1e:	4b08      	ldr	r3, [pc, #32]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dd20:	220c      	movs	r2, #12
 800dd22:	0018      	movs	r0, r3
 800dd24:	f008 feda 	bl	8016adc <HAL_TIM_PWM_ConfigChannel>
 800dd28:	1e03      	subs	r3, r0, #0
 800dd2a:	d001      	beq.n	800dd30 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800dd2c:	f7fa fae8 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dd30:	4b03      	ldr	r3, [pc, #12]	@ (800dd40 <MX_TIM2_Init+0xe0>)
 800dd32:	0018      	movs	r0, r3
 800dd34:	f000 f8fe 	bl	800df34 <HAL_TIM_MspPostInit>

}
 800dd38:	46c0      	nop			@ (mov r8, r8)
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	b006      	add	sp, #24
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	2000200c 	.word	0x2000200c
 800dd44:	0000ffff 	.word	0x0000ffff

0800dd48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd4e:	2310      	movs	r3, #16
 800dd50:	18fb      	adds	r3, r7, r3
 800dd52:	0018      	movs	r0, r3
 800dd54:	2308      	movs	r3, #8
 800dd56:	001a      	movs	r2, r3
 800dd58:	2100      	movs	r1, #0
 800dd5a:	f012 fa19 	bl	8020190 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dd5e:	003b      	movs	r3, r7
 800dd60:	0018      	movs	r0, r3
 800dd62:	2310      	movs	r3, #16
 800dd64:	001a      	movs	r2, r3
 800dd66:	2100      	movs	r1, #0
 800dd68:	f012 fa12 	bl	8020190 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dd6c:	4b32      	ldr	r3, [pc, #200]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd6e:	4a33      	ldr	r2, [pc, #204]	@ (800de3c <MX_TIM3_Init+0xf4>)
 800dd70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dd72:	4b31      	ldr	r3, [pc, #196]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd78:	4b2f      	ldr	r3, [pc, #188]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800dd7e:	4b2e      	ldr	r3, [pc, #184]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd80:	4a2f      	ldr	r2, [pc, #188]	@ (800de40 <MX_TIM3_Init+0xf8>)
 800dd82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd84:	4b2c      	ldr	r3, [pc, #176]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd8a:	4b2b      	ldr	r3, [pc, #172]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dd90:	4b29      	ldr	r3, [pc, #164]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800dd92:	0018      	movs	r0, r3
 800dd94:	f008 fdd0 	bl	8016938 <HAL_TIM_PWM_Init>
 800dd98:	1e03      	subs	r3, r0, #0
 800dd9a:	d001      	beq.n	800dda0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800dd9c:	f7fa fab0 	bl	8008300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dda0:	2110      	movs	r1, #16
 800dda2:	187b      	adds	r3, r7, r1
 800dda4:	2200      	movs	r2, #0
 800dda6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dda8:	187b      	adds	r3, r7, r1
 800ddaa:	2200      	movs	r2, #0
 800ddac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ddae:	187a      	adds	r2, r7, r1
 800ddb0:	4b21      	ldr	r3, [pc, #132]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800ddb2:	0011      	movs	r1, r2
 800ddb4:	0018      	movs	r0, r3
 800ddb6:	f009 f8dd 	bl	8016f74 <HAL_TIMEx_MasterConfigSynchronization>
 800ddba:	1e03      	subs	r3, r0, #0
 800ddbc:	d001      	beq.n	800ddc2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800ddbe:	f7fa fa9f 	bl	8008300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ddc2:	003b      	movs	r3, r7
 800ddc4:	2260      	movs	r2, #96	@ 0x60
 800ddc6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800ddc8:	003b      	movs	r3, r7
 800ddca:	2200      	movs	r2, #0
 800ddcc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ddce:	003b      	movs	r3, r7
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ddd4:	003b      	movs	r3, r7
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ddda:	0039      	movs	r1, r7
 800dddc:	4b16      	ldr	r3, [pc, #88]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	0018      	movs	r0, r3
 800dde2:	f008 fe7b 	bl	8016adc <HAL_TIM_PWM_ConfigChannel>
 800dde6:	1e03      	subs	r3, r0, #0
 800dde8:	d001      	beq.n	800ddee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800ddea:	f7fa fa89 	bl	8008300 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800ddee:	4b12      	ldr	r3, [pc, #72]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800ddf0:	2104      	movs	r1, #4
 800ddf2:	0018      	movs	r0, r3
 800ddf4:	f009 f91c 	bl	8017030 <HAL_TIMEx_RemapConfig>
 800ddf8:	1e03      	subs	r3, r0, #0
 800ddfa:	d001      	beq.n	800de00 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800ddfc:	f7fa fa80 	bl	8008300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800de00:	0039      	movs	r1, r7
 800de02:	4b0d      	ldr	r3, [pc, #52]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800de04:	2204      	movs	r2, #4
 800de06:	0018      	movs	r0, r3
 800de08:	f008 fe68 	bl	8016adc <HAL_TIM_PWM_ConfigChannel>
 800de0c:	1e03      	subs	r3, r0, #0
 800de0e:	d001      	beq.n	800de14 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800de10:	f7fa fa76 	bl	8008300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800de14:	0039      	movs	r1, r7
 800de16:	4b08      	ldr	r3, [pc, #32]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800de18:	2208      	movs	r2, #8
 800de1a:	0018      	movs	r0, r3
 800de1c:	f008 fe5e 	bl	8016adc <HAL_TIM_PWM_ConfigChannel>
 800de20:	1e03      	subs	r3, r0, #0
 800de22:	d001      	beq.n	800de28 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800de24:	f7fa fa6c 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800de28:	4b03      	ldr	r3, [pc, #12]	@ (800de38 <MX_TIM3_Init+0xf0>)
 800de2a:	0018      	movs	r0, r3
 800de2c:	f000 f882 	bl	800df34 <HAL_TIM_MspPostInit>

}
 800de30:	46c0      	nop			@ (mov r8, r8)
 800de32:	46bd      	mov	sp, r7
 800de34:	b006      	add	sp, #24
 800de36:	bd80      	pop	{r7, pc}
 800de38:	2000204c 	.word	0x2000204c
 800de3c:	40000400 	.word	0x40000400
 800de40:	0000ffff 	.word	0x0000ffff

0800de44 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de4a:	003b      	movs	r3, r7
 800de4c:	0018      	movs	r0, r3
 800de4e:	2308      	movs	r3, #8
 800de50:	001a      	movs	r2, r3
 800de52:	2100      	movs	r1, #0
 800de54:	f012 f99c 	bl	8020190 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800de58:	4b15      	ldr	r3, [pc, #84]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de5a:	4a16      	ldr	r2, [pc, #88]	@ (800deb4 <MX_TIM6_Init+0x70>)
 800de5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800de5e:	4b14      	ldr	r3, [pc, #80]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de60:	220a      	movs	r2, #10
 800de62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de64:	4b12      	ldr	r3, [pc, #72]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de66:	2200      	movs	r2, #0
 800de68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800de6a:	4b11      	ldr	r3, [pc, #68]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de6c:	4a12      	ldr	r2, [pc, #72]	@ (800deb8 <MX_TIM6_Init+0x74>)
 800de6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de70:	4b0f      	ldr	r3, [pc, #60]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de72:	2200      	movs	r2, #0
 800de74:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800de76:	4b0e      	ldr	r3, [pc, #56]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de78:	0018      	movs	r0, r3
 800de7a:	f008 fcb5 	bl	80167e8 <HAL_TIM_Base_Init>
 800de7e:	1e03      	subs	r3, r0, #0
 800de80:	d001      	beq.n	800de86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800de82:	f7fa fa3d 	bl	8008300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de86:	003b      	movs	r3, r7
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de8c:	003b      	movs	r3, r7
 800de8e:	2200      	movs	r2, #0
 800de90:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800de92:	003a      	movs	r2, r7
 800de94:	4b06      	ldr	r3, [pc, #24]	@ (800deb0 <MX_TIM6_Init+0x6c>)
 800de96:	0011      	movs	r1, r2
 800de98:	0018      	movs	r0, r3
 800de9a:	f009 f86b 	bl	8016f74 <HAL_TIMEx_MasterConfigSynchronization>
 800de9e:	1e03      	subs	r3, r0, #0
 800dea0:	d001      	beq.n	800dea6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800dea2:	f7fa fa2d 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	46bd      	mov	sp, r7
 800deaa:	b002      	add	sp, #8
 800deac:	bd80      	pop	{r7, pc}
 800deae:	46c0      	nop			@ (mov r8, r8)
 800deb0:	2000208c 	.word	0x2000208c
 800deb4:	40001000 	.word	0x40001000
 800deb8:	0000ffff 	.word	0x0000ffff

0800debc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	2380      	movs	r3, #128	@ 0x80
 800deca:	05db      	lsls	r3, r3, #23
 800decc:	429a      	cmp	r2, r3
 800dece:	d106      	bne.n	800dede <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ded0:	4b0a      	ldr	r3, [pc, #40]	@ (800defc <HAL_TIM_PWM_MspInit+0x40>)
 800ded2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ded4:	4b09      	ldr	r3, [pc, #36]	@ (800defc <HAL_TIM_PWM_MspInit+0x40>)
 800ded6:	2101      	movs	r1, #1
 800ded8:	430a      	orrs	r2, r1
 800deda:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800dedc:	e00a      	b.n	800def4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a07      	ldr	r2, [pc, #28]	@ (800df00 <HAL_TIM_PWM_MspInit+0x44>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d105      	bne.n	800def4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800dee8:	4b04      	ldr	r3, [pc, #16]	@ (800defc <HAL_TIM_PWM_MspInit+0x40>)
 800deea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deec:	4b03      	ldr	r3, [pc, #12]	@ (800defc <HAL_TIM_PWM_MspInit+0x40>)
 800deee:	2102      	movs	r1, #2
 800def0:	430a      	orrs	r2, r1
 800def2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800def4:	46c0      	nop			@ (mov r8, r8)
 800def6:	46bd      	mov	sp, r7
 800def8:	b002      	add	sp, #8
 800defa:	bd80      	pop	{r7, pc}
 800defc:	40021000 	.word	0x40021000
 800df00:	40000400 	.word	0x40000400

0800df04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a06      	ldr	r2, [pc, #24]	@ (800df2c <HAL_TIM_Base_MspInit+0x28>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d105      	bne.n	800df22 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800df16:	4b06      	ldr	r3, [pc, #24]	@ (800df30 <HAL_TIM_Base_MspInit+0x2c>)
 800df18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df1a:	4b05      	ldr	r3, [pc, #20]	@ (800df30 <HAL_TIM_Base_MspInit+0x2c>)
 800df1c:	2110      	movs	r1, #16
 800df1e:	430a      	orrs	r2, r1
 800df20:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	46bd      	mov	sp, r7
 800df26:	b002      	add	sp, #8
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	40001000 	.word	0x40001000
 800df30:	40021000 	.word	0x40021000

0800df34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800df34:	b590      	push	{r4, r7, lr}
 800df36:	b08b      	sub	sp, #44	@ 0x2c
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df3c:	2414      	movs	r4, #20
 800df3e:	193b      	adds	r3, r7, r4
 800df40:	0018      	movs	r0, r3
 800df42:	2314      	movs	r3, #20
 800df44:	001a      	movs	r2, r3
 800df46:	2100      	movs	r1, #0
 800df48:	f012 f922 	bl	8020190 <memset>
  if(timHandle->Instance==TIM2)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	2380      	movs	r3, #128	@ 0x80
 800df52:	05db      	lsls	r3, r3, #23
 800df54:	429a      	cmp	r2, r3
 800df56:	d123      	bne.n	800dfa0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df58:	4b27      	ldr	r3, [pc, #156]	@ (800dff8 <HAL_TIM_MspPostInit+0xc4>)
 800df5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df5c:	4b26      	ldr	r3, [pc, #152]	@ (800dff8 <HAL_TIM_MspPostInit+0xc4>)
 800df5e:	2101      	movs	r1, #1
 800df60:	430a      	orrs	r2, r1
 800df62:	62da      	str	r2, [r3, #44]	@ 0x2c
 800df64:	4b24      	ldr	r3, [pc, #144]	@ (800dff8 <HAL_TIM_MspPostInit+0xc4>)
 800df66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df68:	2201      	movs	r2, #1
 800df6a:	4013      	ands	r3, r2
 800df6c:	613b      	str	r3, [r7, #16]
 800df6e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800df70:	0021      	movs	r1, r4
 800df72:	187b      	adds	r3, r7, r1
 800df74:	220d      	movs	r2, #13
 800df76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df78:	187b      	adds	r3, r7, r1
 800df7a:	2202      	movs	r2, #2
 800df7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df7e:	187b      	adds	r3, r7, r1
 800df80:	2200      	movs	r2, #0
 800df82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df84:	187b      	adds	r3, r7, r1
 800df86:	2200      	movs	r2, #0
 800df88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800df8a:	187b      	adds	r3, r7, r1
 800df8c:	2202      	movs	r2, #2
 800df8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df90:	187a      	adds	r2, r7, r1
 800df92:	23a0      	movs	r3, #160	@ 0xa0
 800df94:	05db      	lsls	r3, r3, #23
 800df96:	0011      	movs	r1, r2
 800df98:	0018      	movs	r0, r3
 800df9a:	f001 ff97 	bl	800fecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800df9e:	e027      	b.n	800dff0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a15      	ldr	r2, [pc, #84]	@ (800dffc <HAL_TIM_MspPostInit+0xc8>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d122      	bne.n	800dff0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dfaa:	4b13      	ldr	r3, [pc, #76]	@ (800dff8 <HAL_TIM_MspPostInit+0xc4>)
 800dfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfae:	4b12      	ldr	r3, [pc, #72]	@ (800dff8 <HAL_TIM_MspPostInit+0xc4>)
 800dfb0:	2104      	movs	r1, #4
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dfb6:	4b10      	ldr	r3, [pc, #64]	@ (800dff8 <HAL_TIM_MspPostInit+0xc4>)
 800dfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfba:	2204      	movs	r2, #4
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800dfc2:	2114      	movs	r1, #20
 800dfc4:	187b      	adds	r3, r7, r1
 800dfc6:	22e0      	movs	r2, #224	@ 0xe0
 800dfc8:	0052      	lsls	r2, r2, #1
 800dfca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfcc:	187b      	adds	r3, r7, r1
 800dfce:	2202      	movs	r2, #2
 800dfd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd2:	187b      	adds	r3, r7, r1
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfd8:	187b      	adds	r3, r7, r1
 800dfda:	2200      	movs	r2, #0
 800dfdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800dfde:	187b      	adds	r3, r7, r1
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfe4:	187b      	adds	r3, r7, r1
 800dfe6:	4a06      	ldr	r2, [pc, #24]	@ (800e000 <HAL_TIM_MspPostInit+0xcc>)
 800dfe8:	0019      	movs	r1, r3
 800dfea:	0010      	movs	r0, r2
 800dfec:	f001 ff6e 	bl	800fecc <HAL_GPIO_Init>
}
 800dff0:	46c0      	nop			@ (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b00b      	add	sp, #44	@ 0x2c
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	40021000 	.word	0x40021000
 800dffc:	40000400 	.word	0x40000400
 800e000:	50000800 	.word	0x50000800

0800e004 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e008:	4b17      	ldr	r3, [pc, #92]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e00a:	4a18      	ldr	r2, [pc, #96]	@ (800e06c <MX_LPUART1_UART_Init+0x68>)
 800e00c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e00e:	4b16      	ldr	r3, [pc, #88]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e010:	22e1      	movs	r2, #225	@ 0xe1
 800e012:	0252      	lsls	r2, r2, #9
 800e014:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e016:	4b14      	ldr	r3, [pc, #80]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e018:	2200      	movs	r2, #0
 800e01a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e01c:	4b12      	ldr	r3, [pc, #72]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e01e:	2200      	movs	r2, #0
 800e020:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e022:	4b11      	ldr	r3, [pc, #68]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e024:	2200      	movs	r2, #0
 800e026:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e028:	4b0f      	ldr	r3, [pc, #60]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e02a:	220c      	movs	r2, #12
 800e02c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e02e:	4b0e      	ldr	r3, [pc, #56]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e030:	2200      	movs	r2, #0
 800e032:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e034:	4b0c      	ldr	r3, [pc, #48]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e036:	2200      	movs	r2, #0
 800e038:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e03a:	4b0b      	ldr	r3, [pc, #44]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e03c:	2218      	movs	r2, #24
 800e03e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e040:	4b09      	ldr	r3, [pc, #36]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e042:	2280      	movs	r2, #128	@ 0x80
 800e044:	0212      	lsls	r2, r2, #8
 800e046:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e048:	4b07      	ldr	r3, [pc, #28]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e04a:	2280      	movs	r2, #128	@ 0x80
 800e04c:	0152      	lsls	r2, r2, #5
 800e04e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e050:	4b05      	ldr	r3, [pc, #20]	@ (800e068 <MX_LPUART1_UART_Init+0x64>)
 800e052:	0018      	movs	r0, r3
 800e054:	f009 f80a 	bl	801706c <HAL_UART_Init>
 800e058:	1e03      	subs	r3, r0, #0
 800e05a:	d001      	beq.n	800e060 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e05c:	f7fa f950 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e060:	46c0      	nop			@ (mov r8, r8)
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	46c0      	nop			@ (mov r8, r8)
 800e068:	200020cc 	.word	0x200020cc
 800e06c:	40004800 	.word	0x40004800

0800e070 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e074:	4b16      	ldr	r3, [pc, #88]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e076:	4a17      	ldr	r2, [pc, #92]	@ (800e0d4 <MX_USART1_UART_Init+0x64>)
 800e078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e07a:	4b15      	ldr	r3, [pc, #84]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e07c:	22e1      	movs	r2, #225	@ 0xe1
 800e07e:	0252      	lsls	r2, r2, #9
 800e080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e082:	4b13      	ldr	r3, [pc, #76]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e084:	2200      	movs	r2, #0
 800e086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e088:	4b11      	ldr	r3, [pc, #68]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e08e:	4b10      	ldr	r3, [pc, #64]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e090:	2200      	movs	r2, #0
 800e092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e094:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e096:	220c      	movs	r2, #12
 800e098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e09a:	4b0d      	ldr	r3, [pc, #52]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e0ac:	4b08      	ldr	r3, [pc, #32]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e0ae:	2208      	movs	r2, #8
 800e0b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e0b2:	4b07      	ldr	r3, [pc, #28]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e0b4:	2280      	movs	r2, #128	@ 0x80
 800e0b6:	0212      	lsls	r2, r2, #8
 800e0b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e0ba:	4b05      	ldr	r3, [pc, #20]	@ (800e0d0 <MX_USART1_UART_Init+0x60>)
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f008 ffd5 	bl	801706c <HAL_UART_Init>
 800e0c2:	1e03      	subs	r3, r0, #0
 800e0c4:	d001      	beq.n	800e0ca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e0c6:	f7fa f91b 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e0ca:	46c0      	nop			@ (mov r8, r8)
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	20002184 	.word	0x20002184
 800e0d4:	40013800 	.word	0x40013800

0800e0d8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e0dc:	4b14      	ldr	r3, [pc, #80]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e0de:	4a15      	ldr	r2, [pc, #84]	@ (800e134 <MX_USART4_UART_Init+0x5c>)
 800e0e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e0e2:	4b13      	ldr	r3, [pc, #76]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e0e4:	22e1      	movs	r2, #225	@ 0xe1
 800e0e6:	0252      	lsls	r2, r2, #9
 800e0e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e0ea:	4b11      	ldr	r3, [pc, #68]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e0f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e0f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e0fe:	220c      	movs	r2, #12
 800e100:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e102:	4b0b      	ldr	r3, [pc, #44]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e104:	2200      	movs	r2, #0
 800e106:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e108:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e10e:	4b08      	ldr	r3, [pc, #32]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e110:	2200      	movs	r2, #0
 800e112:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e114:	4b06      	ldr	r3, [pc, #24]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e116:	2200      	movs	r2, #0
 800e118:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e11a:	4b05      	ldr	r3, [pc, #20]	@ (800e130 <MX_USART4_UART_Init+0x58>)
 800e11c:	0018      	movs	r0, r3
 800e11e:	f008 ffa5 	bl	801706c <HAL_UART_Init>
 800e122:	1e03      	subs	r3, r0, #0
 800e124:	d001      	beq.n	800e12a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e126:	f7fa f8eb 	bl	8008300 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e12a:	46c0      	nop			@ (mov r8, r8)
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	2000223c 	.word	0x2000223c
 800e134:	40004c00 	.word	0x40004c00

0800e138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b08d      	sub	sp, #52	@ 0x34
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e140:	241c      	movs	r4, #28
 800e142:	193b      	adds	r3, r7, r4
 800e144:	0018      	movs	r0, r3
 800e146:	2314      	movs	r3, #20
 800e148:	001a      	movs	r2, r3
 800e14a:	2100      	movs	r1, #0
 800e14c:	f012 f820 	bl	8020190 <memset>
  if(uartHandle->Instance==LPUART1)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a8b      	ldr	r2, [pc, #556]	@ (800e384 <HAL_UART_MspInit+0x24c>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d129      	bne.n	800e1ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e15a:	4b8b      	ldr	r3, [pc, #556]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e15c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e15e:	4b8a      	ldr	r3, [pc, #552]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e160:	2180      	movs	r1, #128	@ 0x80
 800e162:	02c9      	lsls	r1, r1, #11
 800e164:	430a      	orrs	r2, r1
 800e166:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e168:	4b87      	ldr	r3, [pc, #540]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16c:	4b86      	ldr	r3, [pc, #536]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e16e:	2104      	movs	r1, #4
 800e170:	430a      	orrs	r2, r1
 800e172:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e174:	4b84      	ldr	r3, [pc, #528]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e178:	2204      	movs	r2, #4
 800e17a:	4013      	ands	r3, r2
 800e17c:	61bb      	str	r3, [r7, #24]
 800e17e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e180:	0021      	movs	r1, r4
 800e182:	187b      	adds	r3, r7, r1
 800e184:	2203      	movs	r2, #3
 800e186:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e188:	187b      	adds	r3, r7, r1
 800e18a:	2202      	movs	r2, #2
 800e18c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e18e:	187b      	adds	r3, r7, r1
 800e190:	2200      	movs	r2, #0
 800e192:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e194:	187b      	adds	r3, r7, r1
 800e196:	2203      	movs	r2, #3
 800e198:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e19a:	187b      	adds	r3, r7, r1
 800e19c:	2206      	movs	r2, #6
 800e19e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1a0:	187b      	adds	r3, r7, r1
 800e1a2:	4a7a      	ldr	r2, [pc, #488]	@ (800e38c <HAL_UART_MspInit+0x254>)
 800e1a4:	0019      	movs	r1, r3
 800e1a6:	0010      	movs	r0, r2
 800e1a8:	f001 fe90 	bl	800fecc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e1ac:	e0e5      	b.n	800e37a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a77      	ldr	r2, [pc, #476]	@ (800e390 <HAL_UART_MspInit+0x258>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d133      	bne.n	800e220 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e1b8:	4b73      	ldr	r3, [pc, #460]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1bc:	4b72      	ldr	r3, [pc, #456]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e1be:	2180      	movs	r1, #128	@ 0x80
 800e1c0:	01c9      	lsls	r1, r1, #7
 800e1c2:	430a      	orrs	r2, r1
 800e1c4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1c6:	4b70      	ldr	r3, [pc, #448]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ca:	4b6f      	ldr	r3, [pc, #444]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	430a      	orrs	r2, r1
 800e1d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1d2:	4b6d      	ldr	r3, [pc, #436]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	4013      	ands	r3, r2
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e1de:	211c      	movs	r1, #28
 800e1e0:	187b      	adds	r3, r7, r1
 800e1e2:	22c0      	movs	r2, #192	@ 0xc0
 800e1e4:	00d2      	lsls	r2, r2, #3
 800e1e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1e8:	187b      	adds	r3, r7, r1
 800e1ea:	2202      	movs	r2, #2
 800e1ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1ee:	187b      	adds	r3, r7, r1
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1f4:	187b      	adds	r3, r7, r1
 800e1f6:	2203      	movs	r2, #3
 800e1f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e1fa:	187b      	adds	r3, r7, r1
 800e1fc:	2204      	movs	r2, #4
 800e1fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e200:	187a      	adds	r2, r7, r1
 800e202:	23a0      	movs	r3, #160	@ 0xa0
 800e204:	05db      	lsls	r3, r3, #23
 800e206:	0011      	movs	r1, r2
 800e208:	0018      	movs	r0, r3
 800e20a:	f001 fe5f 	bl	800fecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e20e:	2200      	movs	r2, #0
 800e210:	2100      	movs	r1, #0
 800e212:	201b      	movs	r0, #27
 800e214:	f001 fa08 	bl	800f628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e218:	201b      	movs	r0, #27
 800e21a:	f001 fa1a 	bl	800f652 <HAL_NVIC_EnableIRQ>
}
 800e21e:	e0ac      	b.n	800e37a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a5b      	ldr	r2, [pc, #364]	@ (800e394 <HAL_UART_MspInit+0x25c>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d000      	beq.n	800e22c <HAL_UART_MspInit+0xf4>
 800e22a:	e0a6      	b.n	800e37a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e22c:	4b56      	ldr	r3, [pc, #344]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e22e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e230:	4b55      	ldr	r3, [pc, #340]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e232:	2180      	movs	r1, #128	@ 0x80
 800e234:	0309      	lsls	r1, r1, #12
 800e236:	430a      	orrs	r2, r1
 800e238:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e23a:	4b53      	ldr	r3, [pc, #332]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e23e:	4b52      	ldr	r3, [pc, #328]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e240:	2101      	movs	r1, #1
 800e242:	430a      	orrs	r2, r1
 800e244:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e246:	4b50      	ldr	r3, [pc, #320]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e24a:	2201      	movs	r2, #1
 800e24c:	4013      	ands	r3, r2
 800e24e:	613b      	str	r3, [r7, #16]
 800e250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e252:	4b4d      	ldr	r3, [pc, #308]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e256:	4b4c      	ldr	r3, [pc, #304]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e258:	2104      	movs	r1, #4
 800e25a:	430a      	orrs	r2, r1
 800e25c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e25e:	4b4a      	ldr	r3, [pc, #296]	@ (800e388 <HAL_UART_MspInit+0x250>)
 800e260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e262:	2204      	movs	r2, #4
 800e264:	4013      	ands	r3, r2
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e26a:	241c      	movs	r4, #28
 800e26c:	193b      	adds	r3, r7, r4
 800e26e:	2202      	movs	r2, #2
 800e270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e272:	193b      	adds	r3, r7, r4
 800e274:	2202      	movs	r2, #2
 800e276:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e278:	193b      	adds	r3, r7, r4
 800e27a:	2200      	movs	r2, #0
 800e27c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e27e:	193b      	adds	r3, r7, r4
 800e280:	2203      	movs	r2, #3
 800e282:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e284:	193b      	adds	r3, r7, r4
 800e286:	2206      	movs	r2, #6
 800e288:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e28a:	193a      	adds	r2, r7, r4
 800e28c:	23a0      	movs	r3, #160	@ 0xa0
 800e28e:	05db      	lsls	r3, r3, #23
 800e290:	0011      	movs	r1, r2
 800e292:	0018      	movs	r0, r3
 800e294:	f001 fe1a 	bl	800fecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e298:	0021      	movs	r1, r4
 800e29a:	187b      	adds	r3, r7, r1
 800e29c:	2280      	movs	r2, #128	@ 0x80
 800e29e:	00d2      	lsls	r2, r2, #3
 800e2a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2a2:	187b      	adds	r3, r7, r1
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2a8:	187b      	adds	r3, r7, r1
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2ae:	187b      	adds	r3, r7, r1
 800e2b0:	2203      	movs	r2, #3
 800e2b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e2b4:	187b      	adds	r3, r7, r1
 800e2b6:	2206      	movs	r2, #6
 800e2b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e2ba:	187b      	adds	r3, r7, r1
 800e2bc:	4a33      	ldr	r2, [pc, #204]	@ (800e38c <HAL_UART_MspInit+0x254>)
 800e2be:	0019      	movs	r1, r3
 800e2c0:	0010      	movs	r0, r2
 800e2c2:	f001 fe03 	bl	800fecc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e2c6:	4b34      	ldr	r3, [pc, #208]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2c8:	4a34      	ldr	r2, [pc, #208]	@ (800e39c <HAL_UART_MspInit+0x264>)
 800e2ca:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e2cc:	4b32      	ldr	r3, [pc, #200]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2ce:	220c      	movs	r2, #12
 800e2d0:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e2d2:	4b31      	ldr	r3, [pc, #196]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2d8:	4b2f      	ldr	r3, [pc, #188]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e2de:	4b2e      	ldr	r3, [pc, #184]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2e0:	2280      	movs	r2, #128	@ 0x80
 800e2e2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e2e4:	4b2c      	ldr	r3, [pc, #176]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e2f0:	4b29      	ldr	r3, [pc, #164]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2f2:	2220      	movs	r2, #32
 800e2f4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e2f6:	4b28      	ldr	r3, [pc, #160]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e2fc:	4b26      	ldr	r3, [pc, #152]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e2fe:	0018      	movs	r0, r3
 800e300:	f001 f9c8 	bl	800f694 <HAL_DMA_Init>
 800e304:	1e03      	subs	r3, r0, #0
 800e306:	d001      	beq.n	800e30c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e308:	f7f9 fffa 	bl	8008300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a22      	ldr	r2, [pc, #136]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e310:	675a      	str	r2, [r3, #116]	@ 0x74
 800e312:	4b21      	ldr	r3, [pc, #132]	@ (800e398 <HAL_UART_MspInit+0x260>)
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e318:	4b21      	ldr	r3, [pc, #132]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e31a:	4a22      	ldr	r2, [pc, #136]	@ (800e3a4 <HAL_UART_MspInit+0x26c>)
 800e31c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e31e:	4b20      	ldr	r3, [pc, #128]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e320:	220c      	movs	r2, #12
 800e322:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e324:	4b1e      	ldr	r3, [pc, #120]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e326:	2210      	movs	r2, #16
 800e328:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e32a:	4b1d      	ldr	r3, [pc, #116]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e330:	4b1b      	ldr	r3, [pc, #108]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e332:	2280      	movs	r2, #128	@ 0x80
 800e334:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e336:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e338:	2200      	movs	r2, #0
 800e33a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e33c:	4b18      	ldr	r3, [pc, #96]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e33e:	2200      	movs	r2, #0
 800e340:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e342:	4b17      	ldr	r3, [pc, #92]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e344:	2200      	movs	r2, #0
 800e346:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e348:	4b15      	ldr	r3, [pc, #84]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e34e:	4b14      	ldr	r3, [pc, #80]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e350:	0018      	movs	r0, r3
 800e352:	f001 f99f 	bl	800f694 <HAL_DMA_Init>
 800e356:	1e03      	subs	r3, r0, #0
 800e358:	d001      	beq.n	800e35e <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e35a:	f7f9 ffd1 	bl	8008300 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a0f      	ldr	r2, [pc, #60]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e362:	671a      	str	r2, [r3, #112]	@ 0x70
 800e364:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a0 <HAL_UART_MspInit+0x268>)
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e36a:	2200      	movs	r2, #0
 800e36c:	2100      	movs	r1, #0
 800e36e:	200e      	movs	r0, #14
 800e370:	f001 f95a 	bl	800f628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e374:	200e      	movs	r0, #14
 800e376:	f001 f96c 	bl	800f652 <HAL_NVIC_EnableIRQ>
}
 800e37a:	46c0      	nop			@ (mov r8, r8)
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b00d      	add	sp, #52	@ 0x34
 800e380:	bd90      	pop	{r4, r7, pc}
 800e382:	46c0      	nop			@ (mov r8, r8)
 800e384:	40004800 	.word	0x40004800
 800e388:	40021000 	.word	0x40021000
 800e38c:	50000800 	.word	0x50000800
 800e390:	40013800 	.word	0x40013800
 800e394:	40004c00 	.word	0x40004c00
 800e398:	200022f4 	.word	0x200022f4
 800e39c:	4002006c 	.word	0x4002006c
 800e3a0:	2000233c 	.word	0x2000233c
 800e3a4:	40020080 	.word	0x40020080

0800e3a8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e3b0:	f000 fc96 	bl	800ece0 <HAL_GetTick>
 800e3b4:	0003      	movs	r3, r0
 800e3b6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e3b8:	4b1c      	ldr	r3, [pc, #112]	@ (800e42c <TimestampIsReached+0x84>)
 800e3ba:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d307      	bcc.n	800e3d4 <TimestampIsReached+0x2c>
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d901      	bls.n	800e3d4 <TimestampIsReached+0x2c>
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	e000      	b.n	800e3d6 <TimestampIsReached+0x2e>
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	230f      	movs	r3, #15
 800e3d8:	18fb      	adds	r3, r7, r3
 800e3da:	701a      	strb	r2, [r3, #0]
 800e3dc:	781a      	ldrb	r2, [r3, #0]
 800e3de:	2101      	movs	r1, #1
 800e3e0:	400a      	ands	r2, r1
 800e3e2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d207      	bcs.n	800e3fc <TimestampIsReached+0x54>
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d201      	bcs.n	800e3fc <TimestampIsReached+0x54>
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	e000      	b.n	800e3fe <TimestampIsReached+0x56>
 800e3fc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e3fe:	200e      	movs	r0, #14
 800e400:	183b      	adds	r3, r7, r0
 800e402:	701a      	strb	r2, [r3, #0]
 800e404:	781a      	ldrb	r2, [r3, #0]
 800e406:	2101      	movs	r1, #1
 800e408:	400a      	ands	r2, r1
 800e40a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e40c:	230f      	movs	r3, #15
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d103      	bne.n	800e41e <TimestampIsReached+0x76>
 800e416:	183b      	adds	r3, r7, r0
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e41e:	2301      	movs	r3, #1
 800e420:	e000      	b.n	800e424 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e422:	2300      	movs	r3, #0
}
 800e424:	0018      	movs	r0, r3
 800e426:	46bd      	mov	sp, r7
 800e428:	b006      	add	sp, #24
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	7fffffff 	.word	0x7fffffff

0800e430 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e438:	f000 fc52 	bl	800ece0 <HAL_GetTick>
 800e43c:	0002      	movs	r2, r0
 800e43e:	4904      	ldr	r1, [pc, #16]	@ (800e450 <AddTimestamp+0x20>)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	0018      	movs	r0, r3
 800e444:	f011 fd60 	bl	801ff08 <siprintf>
}
 800e448:	46c0      	nop			@ (mov r8, r8)
 800e44a:	46bd      	mov	sp, r7
 800e44c:	b002      	add	sp, #8
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	08024f60 	.word	0x08024f60

0800e454 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e454:	b40c      	push	{r2, r3}
 800e456:	b5b0      	push	{r4, r5, r7, lr}
 800e458:	b0a4      	sub	sp, #144	@ 0x90
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	0002      	movs	r2, r0
 800e45e:	6039      	str	r1, [r7, #0]
 800e460:	1dfb      	adds	r3, r7, #7
 800e462:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e464:	4b23      	ldr	r3, [pc, #140]	@ (800e4f4 <CreateLine+0xa0>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	1dfa      	adds	r2, r7, #7
 800e46a:	7812      	ldrb	r2, [r2, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d839      	bhi.n	800e4e4 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e470:	683a      	ldr	r2, [r7, #0]
 800e472:	4921      	ldr	r1, [pc, #132]	@ (800e4f8 <CreateLine+0xa4>)
 800e474:	240c      	movs	r4, #12
 800e476:	193b      	adds	r3, r7, r4
 800e478:	0018      	movs	r0, r3
 800e47a:	f011 fd45 	bl	801ff08 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e47e:	4b1d      	ldr	r3, [pc, #116]	@ (800e4f4 <CreateLine+0xa0>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d909      	bls.n	800e49a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e486:	193b      	adds	r3, r7, r4
 800e488:	0018      	movs	r0, r3
 800e48a:	f7f1 fe6f 	bl	800016c <strlen>
 800e48e:	0002      	movs	r2, r0
 800e490:	193b      	adds	r3, r7, r4
 800e492:	189b      	adds	r3, r3, r2
 800e494:	0018      	movs	r0, r3
 800e496:	f7ff ffcb 	bl	800e430 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e49a:	240c      	movs	r4, #12
 800e49c:	193b      	adds	r3, r7, r4
 800e49e:	0018      	movs	r0, r3
 800e4a0:	f7f1 fe64 	bl	800016c <strlen>
 800e4a4:	0003      	movs	r3, r0
 800e4a6:	218c      	movs	r1, #140	@ 0x8c
 800e4a8:	187a      	adds	r2, r7, r1
 800e4aa:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e4ac:	239c      	movs	r3, #156	@ 0x9c
 800e4ae:	2508      	movs	r5, #8
 800e4b0:	195b      	adds	r3, r3, r5
 800e4b2:	19db      	adds	r3, r3, r7
 800e4b4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e4b6:	193a      	adds	r2, r7, r4
 800e4b8:	187b      	adds	r3, r7, r1
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	18d0      	adds	r0, r2, r3
 800e4be:	187b      	adds	r3, r7, r1
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2280      	movs	r2, #128	@ 0x80
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	0019      	movs	r1, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2298      	movs	r2, #152	@ 0x98
 800e4cc:	1952      	adds	r2, r2, r5
 800e4ce:	19d2      	adds	r2, r2, r7
 800e4d0:	6812      	ldr	r2, [r2, #0]
 800e4d2:	f011 fdb1 	bl	8020038 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e4d6:	193a      	adds	r2, r7, r4
 800e4d8:	4b08      	ldr	r3, [pc, #32]	@ (800e4fc <CreateLine+0xa8>)
 800e4da:	0011      	movs	r1, r2
 800e4dc:	0018      	movs	r0, r3
 800e4de:	f011 fca3 	bl	801fe28 <iprintf>
 800e4e2:	e000      	b.n	800e4e6 <CreateLine+0x92>
    return;
 800e4e4:	46c0      	nop			@ (mov r8, r8)
}
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	b024      	add	sp, #144	@ 0x90
 800e4ea:	bcb0      	pop	{r4, r5, r7}
 800e4ec:	bc08      	pop	{r3}
 800e4ee:	b002      	add	sp, #8
 800e4f0:	4718      	bx	r3
 800e4f2:	46c0      	nop			@ (mov r8, r8)
 800e4f4:	200000d0 	.word	0x200000d0
 800e4f8:	08024f6c 	.word	0x08024f6c
 800e4fc:	08024f70 	.word	0x08024f70

0800e500 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	68b9      	ldr	r1, [r7, #8]
 800e512:	4804      	ldr	r0, [pc, #16]	@ (800e524 <_write+0x24>)
 800e514:	2364      	movs	r3, #100	@ 0x64
 800e516:	f008 fe0f 	bl	8017138 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e51a:	687b      	ldr	r3, [r7, #4]
}
 800e51c:	0018      	movs	r0, r3
 800e51e:	46bd      	mov	sp, r7
 800e520:	b004      	add	sp, #16
 800e522:	bd80      	pop	{r7, pc}
 800e524:	20002184 	.word	0x20002184

0800e528 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	0002      	movs	r2, r0
 800e530:	1dfb      	adds	r3, r7, #7
 800e532:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e534:	4b03      	ldr	r3, [pc, #12]	@ (800e544 <SetVerboseLevel+0x1c>)
 800e536:	1dfa      	adds	r2, r7, #7
 800e538:	7812      	ldrb	r2, [r2, #0]
 800e53a:	701a      	strb	r2, [r3, #0]
}
 800e53c:	46c0      	nop			@ (mov r8, r8)
 800e53e:	46bd      	mov	sp, r7
 800e540:	b002      	add	sp, #8
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200000d0 	.word	0x200000d0

0800e548 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e54c:	4b02      	ldr	r3, [pc, #8]	@ (800e558 <GetVerboseLevel+0x10>)
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	0018      	movs	r0, r3
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	46c0      	nop			@ (mov r8, r8)
 800e558:	200000d0 	.word	0x200000d0

0800e55c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e562:	4a0f      	ldr	r2, [pc, #60]	@ (800e5a0 <BinaryReleaseInfo+0x44>)
 800e564:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a4 <BinaryReleaseInfo+0x48>)
 800e566:	0019      	movs	r1, r3
 800e568:	2002      	movs	r0, #2
 800e56a:	f7ff ff73 	bl	800e454 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e56e:	480e      	ldr	r0, [pc, #56]	@ (800e5a8 <BinaryReleaseInfo+0x4c>)
 800e570:	4a0e      	ldr	r2, [pc, #56]	@ (800e5ac <BinaryReleaseInfo+0x50>)
 800e572:	490c      	ldr	r1, [pc, #48]	@ (800e5a4 <BinaryReleaseInfo+0x48>)
 800e574:	4b0e      	ldr	r3, [pc, #56]	@ (800e5b0 <BinaryReleaseInfo+0x54>)
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	0003      	movs	r3, r0
 800e57a:	2002      	movs	r0, #2
 800e57c:	f7ff ff6a 	bl	800e454 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e580:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b4 <BinaryReleaseInfo+0x58>)
 800e582:	4a0d      	ldr	r2, [pc, #52]	@ (800e5b8 <BinaryReleaseInfo+0x5c>)
 800e584:	4907      	ldr	r1, [pc, #28]	@ (800e5a4 <BinaryReleaseInfo+0x48>)
 800e586:	2002      	movs	r0, #2
 800e588:	f7ff ff64 	bl	800e454 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e58c:	4b0b      	ldr	r3, [pc, #44]	@ (800e5bc <BinaryReleaseInfo+0x60>)
 800e58e:	4a0c      	ldr	r2, [pc, #48]	@ (800e5c0 <BinaryReleaseInfo+0x64>)
 800e590:	4904      	ldr	r1, [pc, #16]	@ (800e5a4 <BinaryReleaseInfo+0x48>)
 800e592:	2002      	movs	r0, #2
 800e594:	f7ff ff5e 	bl	800e454 <CreateLine>
}
 800e598:	46c0      	nop			@ (mov r8, r8)
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	46c0      	nop			@ (mov r8, r8)
 800e5a0:	08024f78 	.word	0x08024f78
 800e5a4:	08024fa4 	.word	0x08024fa4
 800e5a8:	08024fa8 	.word	0x08024fa8
 800e5ac:	08024fb4 	.word	0x08024fb4
 800e5b0:	08024fc8 	.word	0x08024fc8
 800e5b4:	08024fd4 	.word	0x08024fd4
 800e5b8:	08024fe0 	.word	0x08024fe0
 800e5bc:	08024fe8 	.word	0x08024fe8
 800e5c0:	08024ff0 	.word	0x08024ff0

0800e5c4 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	68f9      	ldr	r1, [r7, #12]
 800e5d6:	4803      	ldr	r0, [pc, #12]	@ (800e5e4 <errorHandler+0x20>)
 800e5d8:	f011 fc26 	bl	801fe28 <iprintf>
//    while (true)
//    {
//    }
}
 800e5dc:	46c0      	nop			@ (mov r8, r8)
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	b004      	add	sp, #16
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	08025008 	.word	0x08025008

0800e5e8 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e5e8:	b590      	push	{r4, r7, lr}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6039      	str	r1, [r7, #0]
 800e5f0:	0011      	movs	r1, r2
 800e5f2:	1dfb      	adds	r3, r7, #7
 800e5f4:	1c02      	adds	r2, r0, #0
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	1dbb      	adds	r3, r7, #6
 800e5fa:	1c0a      	adds	r2, r1, #0
 800e5fc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e628 <ReadRegister+0x40>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00a      	beq.n	800e61c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e606:	4b08      	ldr	r3, [pc, #32]	@ (800e628 <ReadRegister+0x40>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	1dba      	adds	r2, r7, #6
 800e60c:	7814      	ldrb	r4, [r2, #0]
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	1dfa      	adds	r2, r7, #7
 800e612:	7810      	ldrb	r0, [r2, #0]
 800e614:	0022      	movs	r2, r4
 800e616:	4798      	blx	r3
 800e618:	0003      	movs	r3, r0
 800e61a:	e000      	b.n	800e61e <ReadRegister+0x36>
	}
	return false;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	0018      	movs	r0, r3
 800e620:	46bd      	mov	sp, r7
 800e622:	b003      	add	sp, #12
 800e624:	bd90      	pop	{r4, r7, pc}
 800e626:	46c0      	nop			@ (mov r8, r8)
 800e628:	2000238c 	.word	0x2000238c

0800e62c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6039      	str	r1, [r7, #0]
 800e634:	0011      	movs	r1, r2
 800e636:	1dfb      	adds	r3, r7, #7
 800e638:	1c02      	adds	r2, r0, #0
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	1dbb      	adds	r3, r7, #6
 800e63e:	1c0a      	adds	r2, r1, #0
 800e640:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e642:	4b0a      	ldr	r3, [pc, #40]	@ (800e66c <WriteRegister+0x40>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00a      	beq.n	800e660 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e64a:	4b08      	ldr	r3, [pc, #32]	@ (800e66c <WriteRegister+0x40>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	1dba      	adds	r2, r7, #6
 800e650:	7814      	ldrb	r4, [r2, #0]
 800e652:	6839      	ldr	r1, [r7, #0]
 800e654:	1dfa      	adds	r2, r7, #7
 800e656:	7810      	ldrb	r0, [r2, #0]
 800e658:	0022      	movs	r2, r4
 800e65a:	4798      	blx	r3
 800e65c:	0003      	movs	r3, r0
 800e65e:	e000      	b.n	800e662 <WriteRegister+0x36>
  }
  return false;
 800e660:	2300      	movs	r3, #0
}
 800e662:	0018      	movs	r0, r3
 800e664:	46bd      	mov	sp, r7
 800e666:	b003      	add	sp, #12
 800e668:	bd90      	pop	{r4, r7, pc}
 800e66a:	46c0      	nop			@ (mov r8, r8)
 800e66c:	20002390 	.word	0x20002390

0800e670 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	000a      	movs	r2, r1
 800e67a:	1cfb      	adds	r3, r7, #3
 800e67c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e67e:	230f      	movs	r3, #15
 800e680:	18fb      	adds	r3, r7, r3
 800e682:	22ff      	movs	r2, #255	@ 0xff
 800e684:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e686:	230e      	movs	r3, #14
 800e688:	18fb      	adds	r3, r7, r3
 800e68a:	2200      	movs	r2, #0
 800e68c:	701a      	strb	r2, [r3, #0]
 800e68e:	e037      	b.n	800e700 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e690:	230e      	movs	r3, #14
 800e692:	18fb      	adds	r3, r7, r3
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	18d3      	adds	r3, r2, r3
 800e69a:	7819      	ldrb	r1, [r3, #0]
 800e69c:	220f      	movs	r2, #15
 800e69e:	18bb      	adds	r3, r7, r2
 800e6a0:	18ba      	adds	r2, r7, r2
 800e6a2:	7812      	ldrb	r2, [r2, #0]
 800e6a4:	404a      	eors	r2, r1
 800e6a6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e6a8:	230d      	movs	r3, #13
 800e6aa:	18fb      	adds	r3, r7, r3
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	e01b      	b.n	800e6ea <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e6b2:	210f      	movs	r1, #15
 800e6b4:	187b      	adds	r3, r7, r1
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	b25b      	sxtb	r3, r3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	da09      	bge.n	800e6d2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e6be:	187b      	adds	r3, r7, r1
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	005b      	lsls	r3, r3, #1
 800e6c4:	b25b      	sxtb	r3, r3
 800e6c6:	2231      	movs	r2, #49	@ 0x31
 800e6c8:	4053      	eors	r3, r2
 800e6ca:	b25a      	sxtb	r2, r3
 800e6cc:	187b      	adds	r3, r7, r1
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	e005      	b.n	800e6de <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e6d2:	230f      	movs	r3, #15
 800e6d4:	18fa      	adds	r2, r7, r3
 800e6d6:	18fb      	adds	r3, r7, r3
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	18db      	adds	r3, r3, r3
 800e6dc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e6de:	210d      	movs	r1, #13
 800e6e0:	187b      	adds	r3, r7, r1
 800e6e2:	781a      	ldrb	r2, [r3, #0]
 800e6e4:	187b      	adds	r3, r7, r1
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	230d      	movs	r3, #13
 800e6ec:	18fb      	adds	r3, r7, r3
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	2b07      	cmp	r3, #7
 800e6f2:	d9de      	bls.n	800e6b2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e6f4:	210e      	movs	r1, #14
 800e6f6:	187b      	adds	r3, r7, r1
 800e6f8:	781a      	ldrb	r2, [r3, #0]
 800e6fa:	187b      	adds	r3, r7, r1
 800e6fc:	3201      	adds	r2, #1
 800e6fe:	701a      	strb	r2, [r3, #0]
 800e700:	230e      	movs	r3, #14
 800e702:	18fa      	adds	r2, r7, r3
 800e704:	1cfb      	adds	r3, r7, #3
 800e706:	7812      	ldrb	r2, [r2, #0]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d3c0      	bcc.n	800e690 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e70e:	230f      	movs	r3, #15
 800e710:	18fb      	adds	r3, r7, r3
 800e712:	781b      	ldrb	r3, [r3, #0]
}
 800e714:	0018      	movs	r0, r3
 800e716:	46bd      	mov	sp, r7
 800e718:	b004      	add	sp, #16
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e726:	4b0a      	ldr	r3, [pc, #40]	@ (800e750 <HIDS_Init+0x34>)
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e72c:	4b09      	ldr	r3, [pc, #36]	@ (800e754 <HIDS_Init+0x38>)
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e732:	4b09      	ldr	r3, [pc, #36]	@ (800e758 <HIDS_Init+0x3c>)
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	0018      	movs	r0, r3
 800e738:	f000 f840 	bl	800e7bc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e73c:	4b07      	ldr	r3, [pc, #28]	@ (800e75c <HIDS_Init+0x40>)
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	0018      	movs	r0, r3
 800e742:	f000 f82b 	bl	800e79c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e746:	46c0      	nop			@ (mov r8, r8)
 800e748:	46bd      	mov	sp, r7
 800e74a:	b002      	add	sp, #8
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	46c0      	nop			@ (mov r8, r8)
 800e750:	2000238c 	.word	0x2000238c
 800e754:	20002390 	.word	0x20002390
 800e758:	200000d2 	.word	0x200000d2
 800e75c:	200000d1 	.word	0x200000d1

0800e760 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e760:	b580      	push	{r7, lr}
 800e762:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e764:	f000 fabc 	bl	800ece0 <HAL_GetTick>
 800e768:	0002      	movs	r2, r0
 800e76a:	4b08      	ldr	r3, [pc, #32]	@ (800e78c <HIDS_StartMeasurement+0x2c>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	18d2      	adds	r2, r2, r3
 800e770:	4b07      	ldr	r3, [pc, #28]	@ (800e790 <HIDS_StartMeasurement+0x30>)
 800e772:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e774:	4b07      	ldr	r3, [pc, #28]	@ (800e794 <HIDS_StartMeasurement+0x34>)
 800e776:	2201      	movs	r2, #1
 800e778:	0019      	movs	r1, r3
 800e77a:	2044      	movs	r0, #68	@ 0x44
 800e77c:	f7ff ff56 	bl	800e62c <WriteRegister>
  MeasurementDone = false;
 800e780:	4b05      	ldr	r3, [pc, #20]	@ (800e798 <HIDS_StartMeasurement+0x38>)
 800e782:	2200      	movs	r2, #0
 800e784:	701a      	strb	r2, [r3, #0]
}
 800e786:	46c0      	nop			@ (mov r8, r8)
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	200000d8 	.word	0x200000d8
 800e790:	200000d4 	.word	0x200000d4
 800e794:	200000d2 	.word	0x200000d2
 800e798:	200023a2 	.word	0x200023a2

0800e79c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	0002      	movs	r2, r0
 800e7a4:	1dfb      	adds	r3, r7, #7
 800e7a6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e7a8:	4b03      	ldr	r3, [pc, #12]	@ (800e7b8 <HIDS_SetHeaterMode+0x1c>)
 800e7aa:	1dfa      	adds	r2, r7, #7
 800e7ac:	7812      	ldrb	r2, [r2, #0]
 800e7ae:	701a      	strb	r2, [r3, #0]
}
 800e7b0:	46c0      	nop			@ (mov r8, r8)
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	b002      	add	sp, #8
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	200000d1 	.word	0x200000d1

0800e7bc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	0002      	movs	r2, r0
 800e7c4:	1dfb      	adds	r3, r7, #7
 800e7c6:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e7c8:	4b03      	ldr	r3, [pc, #12]	@ (800e7d8 <HIDS_SetMeasurementMode+0x1c>)
 800e7ca:	1dfa      	adds	r2, r7, #7
 800e7cc:	7812      	ldrb	r2, [r2, #0]
 800e7ce:	701a      	strb	r2, [r3, #0]
}
 800e7d0:	46c0      	nop			@ (mov r8, r8)
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	b002      	add	sp, #8
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	200000d2 	.word	0x200000d2

0800e7dc <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e7e4:	f000 fa7c 	bl	800ece0 <HAL_GetTick>
 800e7e8:	0002      	movs	r2, r0
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	18d2      	adds	r2, r2, r3
 800e7ee:	4b03      	ldr	r3, [pc, #12]	@ (800e7fc <setHIDSTimeStamp+0x20>)
 800e7f0:	601a      	str	r2, [r3, #0]
}
 800e7f2:	46c0      	nop			@ (mov r8, r8)
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	b002      	add	sp, #8
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	46c0      	nop			@ (mov r8, r8)
 800e7fc:	200023a4 	.word	0x200023a4

0800e800 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e800:	b590      	push	{r4, r7, lr}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	781a      	ldrb	r2, [r3, #0]
 800e80c:	210c      	movs	r1, #12
 800e80e:	187b      	adds	r3, r7, r1
 800e810:	701a      	strb	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	785a      	ldrb	r2, [r3, #1]
 800e816:	187b      	adds	r3, r7, r1
 800e818:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e81a:	240f      	movs	r4, #15
 800e81c:	193b      	adds	r3, r7, r4
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	7892      	ldrb	r2, [r2, #2]
 800e822:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e824:	187b      	adds	r3, r7, r1
 800e826:	2102      	movs	r1, #2
 800e828:	0018      	movs	r0, r3
 800e82a:	f7ff ff21 	bl	800e670 <CalculateCRC>
 800e82e:	0003      	movs	r3, r0
 800e830:	001a      	movs	r2, r3
 800e832:	193b      	adds	r3, r7, r4
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	4293      	cmp	r3, r2
 800e838:	d007      	beq.n	800e84a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e83a:	4a1a      	ldr	r2, [pc, #104]	@ (800e8a4 <CheckCRC+0xa4>)
 800e83c:	4b1a      	ldr	r3, [pc, #104]	@ (800e8a8 <CheckCRC+0xa8>)
 800e83e:	0019      	movs	r1, r3
 800e840:	2001      	movs	r0, #1
 800e842:	f7ff fe07 	bl	800e454 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e846:	2300      	movs	r3, #0
 800e848:	e027      	b.n	800e89a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	78da      	ldrb	r2, [r3, #3]
 800e84e:	2108      	movs	r1, #8
 800e850:	187b      	adds	r3, r7, r1
 800e852:	701a      	strb	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	791a      	ldrb	r2, [r3, #4]
 800e858:	187b      	adds	r3, r7, r1
 800e85a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e85c:	240e      	movs	r4, #14
 800e85e:	193b      	adds	r3, r7, r4
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	7952      	ldrb	r2, [r2, #5]
 800e864:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e866:	187b      	adds	r3, r7, r1
 800e868:	2102      	movs	r1, #2
 800e86a:	0018      	movs	r0, r3
 800e86c:	f7ff ff00 	bl	800e670 <CalculateCRC>
 800e870:	0003      	movs	r3, r0
 800e872:	001a      	movs	r2, r3
 800e874:	193b      	adds	r3, r7, r4
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	4293      	cmp	r3, r2
 800e87a:	d00d      	beq.n	800e898 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e87c:	4a0b      	ldr	r2, [pc, #44]	@ (800e8ac <CheckCRC+0xac>)
 800e87e:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a8 <CheckCRC+0xa8>)
 800e880:	0019      	movs	r1, r3
 800e882:	2001      	movs	r0, #1
 800e884:	f7ff fde6 	bl	800e454 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e888:	4a09      	ldr	r2, [pc, #36]	@ (800e8b0 <CheckCRC+0xb0>)
 800e88a:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b4 <CheckCRC+0xb4>)
 800e88c:	217c      	movs	r1, #124	@ 0x7c
 800e88e:	0018      	movs	r0, r3
 800e890:	f7ff fe98 	bl	800e5c4 <errorHandler>
		return false;
 800e894:	2300      	movs	r3, #0
 800e896:	e000      	b.n	800e89a <CheckCRC+0x9a>
	}
	return true;
 800e898:	2301      	movs	r3, #1
}
 800e89a:	0018      	movs	r0, r3
 800e89c:	46bd      	mov	sp, r7
 800e89e:	b005      	add	sp, #20
 800e8a0:	bd90      	pop	{r4, r7, pc}
 800e8a2:	46c0      	nop			@ (mov r8, r8)
 800e8a4:	08025054 	.word	0x08025054
 800e8a8:	0802507c 	.word	0x0802507c
 800e8ac:	08025080 	.word	0x08025080
 800e8b0:	080250ac 	.word	0x080250ac
 800e8b4:	08025644 	.word	0x08025644

0800e8b8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e8be:	1dbb      	adds	r3, r7, #6
 800e8c0:	2289      	movs	r2, #137	@ 0x89
 800e8c2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e8c4:	1dbb      	adds	r3, r7, #6
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	0019      	movs	r1, r3
 800e8ca:	2044      	movs	r0, #68	@ 0x44
 800e8cc:	f7ff feae 	bl	800e62c <WriteRegister>
	HAL_Delay(30);
 800e8d0:	201e      	movs	r0, #30
 800e8d2:	f000 fa0f 	bl	800ecf4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e8d6:	4b14      	ldr	r3, [pc, #80]	@ (800e928 <HIDS_DeviceConnected+0x70>)
 800e8d8:	2206      	movs	r2, #6
 800e8da:	0019      	movs	r1, r3
 800e8dc:	2044      	movs	r0, #68	@ 0x44
 800e8de:	f7ff fe83 	bl	800e5e8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e8e2:	1dfb      	adds	r3, r7, #7
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	701a      	strb	r2, [r3, #0]
 800e8e8:	e011      	b.n	800e90e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e8ea:	1dfb      	adds	r3, r7, #7
 800e8ec:	7818      	ldrb	r0, [r3, #0]
 800e8ee:	1dfb      	adds	r3, r7, #7
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	4a0d      	ldr	r2, [pc, #52]	@ (800e928 <HIDS_DeviceConnected+0x70>)
 800e8f4:	5cd3      	ldrb	r3, [r2, r3]
 800e8f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e92c <HIDS_DeviceConnected+0x74>)
 800e8f8:	490d      	ldr	r1, [pc, #52]	@ (800e930 <HIDS_DeviceConnected+0x78>)
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	0003      	movs	r3, r0
 800e8fe:	2002      	movs	r0, #2
 800e900:	f7ff fda8 	bl	800e454 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e904:	1dfb      	adds	r3, r7, #7
 800e906:	781a      	ldrb	r2, [r3, #0]
 800e908:	1dfb      	adds	r3, r7, #7
 800e90a:	3201      	adds	r2, #1
 800e90c:	701a      	strb	r2, [r3, #0]
 800e90e:	1dfb      	adds	r3, r7, #7
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b05      	cmp	r3, #5
 800e914:	d9e9      	bls.n	800e8ea <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e916:	4b04      	ldr	r3, [pc, #16]	@ (800e928 <HIDS_DeviceConnected+0x70>)
 800e918:	0018      	movs	r0, r3
 800e91a:	f7ff ff71 	bl	800e800 <CheckCRC>
 800e91e:	0003      	movs	r3, r0
}
 800e920:	0018      	movs	r0, r3
 800e922:	46bd      	mov	sp, r7
 800e924:	b002      	add	sp, #8
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20002394 	.word	0x20002394
 800e92c:	080250c4 	.word	0x080250c4
 800e930:	08025050 	.word	0x08025050

0800e934 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e934:	b580      	push	{r7, lr}
 800e936:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e938:	4b04      	ldr	r3, [pc, #16]	@ (800e94c <HIDS_MeasurementReady+0x18>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	0018      	movs	r0, r3
 800e93e:	f7ff fd33 	bl	800e3a8 <TimestampIsReached>
 800e942:	0003      	movs	r3, r0
}
 800e944:	0018      	movs	r0, r3
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	46c0      	nop			@ (mov r8, r8)
 800e94c:	200000d4 	.word	0x200000d4

0800e950 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800e95a:	4b44      	ldr	r3, [pc, #272]	@ (800ea6c <HIDS_GetMeasurementValues+0x11c>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <HIDS_GetMeasurementValues+0x16>
 800e962:	2301      	movs	r3, #1
 800e964:	e07d      	b.n	800ea62 <HIDS_GetMeasurementValues+0x112>
  if(!HIDS_MeasurementReady()) return false;
 800e966:	f7ff ffe5 	bl	800e934 <HIDS_MeasurementReady>
 800e96a:	0003      	movs	r3, r0
 800e96c:	001a      	movs	r2, r3
 800e96e:	2301      	movs	r3, #1
 800e970:	4053      	eors	r3, r2
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <HIDS_GetMeasurementValues+0x2c>
 800e978:	2300      	movs	r3, #0
 800e97a:	e072      	b.n	800ea62 <HIDS_GetMeasurementValues+0x112>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e97c:	4b3c      	ldr	r3, [pc, #240]	@ (800ea70 <HIDS_GetMeasurementValues+0x120>)
 800e97e:	2206      	movs	r2, #6
 800e980:	0019      	movs	r1, r3
 800e982:	2044      	movs	r0, #68	@ 0x44
 800e984:	f7ff fe30 	bl	800e5e8 <ReadRegister>
 800e988:	0003      	movs	r3, r0
 800e98a:	001a      	movs	r2, r3
 800e98c:	2301      	movs	r3, #1
 800e98e:	4053      	eors	r3, r2
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d005      	beq.n	800e9a2 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e996:	4a37      	ldr	r2, [pc, #220]	@ (800ea74 <HIDS_GetMeasurementValues+0x124>)
 800e998:	4b37      	ldr	r3, [pc, #220]	@ (800ea78 <HIDS_GetMeasurementValues+0x128>)
 800e99a:	0019      	movs	r1, r3
 800e99c:	2001      	movs	r0, #1
 800e99e:	f7ff fd59 	bl	800e454 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e9a2:	4b33      	ldr	r3, [pc, #204]	@ (800ea70 <HIDS_GetMeasurementValues+0x120>)
 800e9a4:	0018      	movs	r0, r3
 800e9a6:	f7ff ff2b 	bl	800e800 <CheckCRC>
 800e9aa:	0003      	movs	r3, r0
 800e9ac:	001a      	movs	r2, r3
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	4053      	eors	r3, r2
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d001      	beq.n	800e9bc <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	e052      	b.n	800ea62 <HIDS_GetMeasurementValues+0x112>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e9bc:	4b2c      	ldr	r3, [pc, #176]	@ (800ea70 <HIDS_GetMeasurementValues+0x120>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	021b      	lsls	r3, r3, #8
 800e9c2:	4a2b      	ldr	r2, [pc, #172]	@ (800ea70 <HIDS_GetMeasurementValues+0x120>)
 800e9c4:	7852      	ldrb	r2, [r2, #1]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	22af      	movs	r2, #175	@ 0xaf
 800e9ca:	4353      	muls	r3, r2
 800e9cc:	0018      	movs	r0, r3
 800e9ce:	f7f4 fcf7 	bl	80033c0 <__aeabi_i2d>
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	4b29      	ldr	r3, [pc, #164]	@ (800ea7c <HIDS_GetMeasurementValues+0x12c>)
 800e9d6:	f7f3 f9ed 	bl	8001db4 <__aeabi_ddiv>
 800e9da:	0002      	movs	r2, r0
 800e9dc:	000b      	movs	r3, r1
 800e9de:	0010      	movs	r0, r2
 800e9e0:	0019      	movs	r1, r3
 800e9e2:	f7f4 fd87 	bl	80034f4 <__aeabi_d2f>
 800e9e6:	1c03      	adds	r3, r0, #0
 800e9e8:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800e9ea:	4925      	ldr	r1, [pc, #148]	@ (800ea80 <HIDS_GetMeasurementValues+0x130>)
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7f2 fc15 	bl	800121c <__aeabi_fsub>
 800e9f2:	1c03      	adds	r3, r0, #0
 800e9f4:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e9f6:	4b1e      	ldr	r3, [pc, #120]	@ (800ea70 <HIDS_GetMeasurementValues+0x120>)
 800e9f8:	78db      	ldrb	r3, [r3, #3]
 800e9fa:	021b      	lsls	r3, r3, #8
 800e9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800ea70 <HIDS_GetMeasurementValues+0x120>)
 800e9fe:	7912      	ldrb	r2, [r2, #4]
 800ea00:	431a      	orrs	r2, r3
 800ea02:	0013      	movs	r3, r2
 800ea04:	015b      	lsls	r3, r3, #5
 800ea06:	1a9b      	subs	r3, r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	189b      	adds	r3, r3, r2
 800ea0c:	0018      	movs	r0, r3
 800ea0e:	f7f4 fcd7 	bl	80033c0 <__aeabi_i2d>
 800ea12:	2200      	movs	r2, #0
 800ea14:	4b19      	ldr	r3, [pc, #100]	@ (800ea7c <HIDS_GetMeasurementValues+0x12c>)
 800ea16:	f7f3 f9cd 	bl	8001db4 <__aeabi_ddiv>
 800ea1a:	0002      	movs	r2, r0
 800ea1c:	000b      	movs	r3, r1
 800ea1e:	0010      	movs	r0, r2
 800ea20:	0019      	movs	r1, r3
 800ea22:	f7f4 fd67 	bl	80034f4 <__aeabi_d2f>
 800ea26:	1c03      	adds	r3, r0, #0
 800ea28:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ea2a:	4916      	ldr	r1, [pc, #88]	@ (800ea84 <HIDS_GetMeasurementValues+0x134>)
 800ea2c:	68b8      	ldr	r0, [r7, #8]
 800ea2e:	f7f2 fbf5 	bl	800121c <__aeabi_fsub>
 800ea32:	1c03      	adds	r3, r0, #0
 800ea34:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	0011      	movs	r1, r2
 800ea48:	0018      	movs	r0, r3
 800ea4a:	f7fd fa57 	bl	800befc <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	1c11      	adds	r1, r2, #0
 800ea54:	1c18      	adds	r0, r3, #0
 800ea56:	f7f4 ff4d 	bl	80038f4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800ea5a:	4b04      	ldr	r3, [pc, #16]	@ (800ea6c <HIDS_GetMeasurementValues+0x11c>)
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ea60:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ea62:	0018      	movs	r0, r3
 800ea64:	46bd      	mov	sp, r7
 800ea66:	b004      	add	sp, #16
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	46c0      	nop			@ (mov r8, r8)
 800ea6c:	200023a2 	.word	0x200023a2
 800ea70:	2000239c 	.word	0x2000239c
 800ea74:	080250e4 	.word	0x080250e4
 800ea78:	0802507c 	.word	0x0802507c
 800ea7c:	40efffe0 	.word	0x40efffe0
 800ea80:	42340000 	.word	0x42340000
 800ea84:	40c00000 	.word	0x40c00000

0800ea88 <ResetHIDSresults>:
void ResetHIDSresults() {
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ea8c:	4b04      	ldr	r3, [pc, #16]	@ (800eaa0 <ResetHIDSresults+0x18>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ea92:	4b04      	ldr	r3, [pc, #16]	@ (800eaa4 <ResetHIDSresults+0x1c>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	601a      	str	r2, [r3, #0]
}
 800ea98:	46c0      	nop			@ (mov r8, r8)
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	46c0      	nop			@ (mov r8, r8)
 800eaa0:	20002384 	.word	0x20002384
 800eaa4:	20002388 	.word	0x20002388

0800eaa8 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800eaae:	4b3b      	ldr	r3, [pc, #236]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	2b06      	cmp	r3, #6
 800eab4:	d865      	bhi.n	800eb82 <HIDS_Upkeep+0xda>
 800eab6:	009a      	lsls	r2, r3, #2
 800eab8:	4b39      	ldr	r3, [pc, #228]	@ (800eba0 <HIDS_Upkeep+0xf8>)
 800eaba:	18d3      	adds	r3, r2, r3
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800eac0:	4a38      	ldr	r2, [pc, #224]	@ (800eba4 <HIDS_Upkeep+0xfc>)
 800eac2:	4b39      	ldr	r3, [pc, #228]	@ (800eba8 <HIDS_Upkeep+0x100>)
 800eac4:	0019      	movs	r1, r3
 800eac6:	2003      	movs	r0, #3
 800eac8:	f7ff fcc4 	bl	800e454 <CreateLine>
      break;
 800eacc:	e060      	b.n	800eb90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800eace:	f7ff ffdb 	bl	800ea88 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ead2:	4b32      	ldr	r3, [pc, #200]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800ead4:	2201      	movs	r2, #1
 800ead6:	701a      	strb	r2, [r3, #0]
      break;
 800ead8:	e05a      	b.n	800eb90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800eada:	f7fe fc3b 	bl	800d354 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800eade:	f7ff fe3f 	bl	800e760 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800eae2:	4b2e      	ldr	r3, [pc, #184]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eae4:	2202      	movs	r2, #2
 800eae6:	701a      	strb	r2, [r3, #0]
      break;
 800eae8:	e052      	b.n	800eb90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800eaea:	4a30      	ldr	r2, [pc, #192]	@ (800ebac <HIDS_Upkeep+0x104>)
 800eaec:	4b30      	ldr	r3, [pc, #192]	@ (800ebb0 <HIDS_Upkeep+0x108>)
 800eaee:	0011      	movs	r1, r2
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	f7ff ff2d 	bl	800e950 <HIDS_GetMeasurementValues>
 800eaf6:	1e03      	subs	r3, r0, #0
 800eaf8:	d047      	beq.n	800eb8a <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800eafa:	4b28      	ldr	r3, [pc, #160]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eafc:	2203      	movs	r2, #3
 800eafe:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb00:	e043      	b.n	800eb8a <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800eb02:	4b2b      	ldr	r3, [pc, #172]	@ (800ebb0 <HIDS_Upkeep+0x108>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	1c18      	adds	r0, r3, #0
 800eb08:	f7f4 fcac 	bl	8003464 <__aeabi_f2d>
 800eb0c:	0004      	movs	r4, r0
 800eb0e:	000d      	movs	r5, r1
 800eb10:	4b26      	ldr	r3, [pc, #152]	@ (800ebac <HIDS_Upkeep+0x104>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	1c18      	adds	r0, r3, #0
 800eb16:	f7f4 fca5 	bl	8003464 <__aeabi_f2d>
 800eb1a:	0002      	movs	r2, r0
 800eb1c:	000b      	movs	r3, r1
 800eb1e:	4825      	ldr	r0, [pc, #148]	@ (800ebb4 <HIDS_Upkeep+0x10c>)
 800eb20:	4921      	ldr	r1, [pc, #132]	@ (800eba8 <HIDS_Upkeep+0x100>)
 800eb22:	9202      	str	r2, [sp, #8]
 800eb24:	9303      	str	r3, [sp, #12]
 800eb26:	9400      	str	r4, [sp, #0]
 800eb28:	9501      	str	r5, [sp, #4]
 800eb2a:	0002      	movs	r2, r0
 800eb2c:	2003      	movs	r0, #3
 800eb2e:	f7ff fc91 	bl	800e454 <CreateLine>
      setHIDS(temp, humid);
 800eb32:	4b1e      	ldr	r3, [pc, #120]	@ (800ebac <HIDS_Upkeep+0x104>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	4b1e      	ldr	r3, [pc, #120]	@ (800ebb0 <HIDS_Upkeep+0x108>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	1c19      	adds	r1, r3, #0
 800eb3c:	1c10      	adds	r0, r2, #0
 800eb3e:	f7f4 feed 	bl	800391c <setHIDS>
      ResetMeasurementIndicator();
 800eb42:	f7fe fc1f 	bl	800d384 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800eb46:	f000 f8cb 	bl	800ece0 <HAL_GetTick>
 800eb4a:	0004      	movs	r4, r0
 800eb4c:	f7fe fd2e 	bl	800d5ac <powerCheck>
 800eb50:	0003      	movs	r3, r0
 800eb52:	2b04      	cmp	r3, #4
 800eb54:	d101      	bne.n	800eb5a <HIDS_Upkeep+0xb2>
 800eb56:	4b18      	ldr	r3, [pc, #96]	@ (800ebb8 <HIDS_Upkeep+0x110>)
 800eb58:	e001      	b.n	800eb5e <HIDS_Upkeep+0xb6>
 800eb5a:	23fa      	movs	r3, #250	@ 0xfa
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	191a      	adds	r2, r3, r4
 800eb60:	4b16      	ldr	r3, [pc, #88]	@ (800ebbc <HIDS_Upkeep+0x114>)
 800eb62:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800eb64:	4b0d      	ldr	r3, [pc, #52]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eb66:	2206      	movs	r2, #6
 800eb68:	701a      	strb	r2, [r3, #0]
      break;
 800eb6a:	e011      	b.n	800eb90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800eb6c:	4b13      	ldr	r3, [pc, #76]	@ (800ebbc <HIDS_Upkeep+0x114>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	0018      	movs	r0, r3
 800eb72:	f7ff fc19 	bl	800e3a8 <TimestampIsReached>
 800eb76:	1e03      	subs	r3, r0, #0
 800eb78:	d009      	beq.n	800eb8e <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800eb7a:	4b08      	ldr	r3, [pc, #32]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb80:	e005      	b.n	800eb8e <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800eb82:	4b06      	ldr	r3, [pc, #24]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	701a      	strb	r2, [r3, #0]
      break;
 800eb88:	e002      	b.n	800eb90 <HIDS_Upkeep+0xe8>
      break;
 800eb8a:	46c0      	nop			@ (mov r8, r8)
 800eb8c:	e000      	b.n	800eb90 <HIDS_Upkeep+0xe8>
      break;
 800eb8e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800eb90:	4b02      	ldr	r3, [pc, #8]	@ (800eb9c <HIDS_Upkeep+0xf4>)
 800eb92:	781b      	ldrb	r3, [r3, #0]
}
 800eb94:	0018      	movs	r0, r3
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bdb0      	pop	{r4, r5, r7, pc}
 800eb9a:	46c0      	nop			@ (mov r8, r8)
 800eb9c:	200023a8 	.word	0x200023a8
 800eba0:	08025628 	.word	0x08025628
 800eba4:	08025118 	.word	0x08025118
 800eba8:	0802514c 	.word	0x0802514c
 800ebac:	20002388 	.word	0x20002388
 800ebb0:	20002384 	.word	0x20002384
 800ebb4:	08025150 	.word	0x08025150
 800ebb8:	00002710 	.word	0x00002710
 800ebbc:	200023a4 	.word	0x200023a4

0800ebc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800ebc0:	480d      	ldr	r0, [pc, #52]	@ (800ebf8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800ebc2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ebc4:	f7ff f846 	bl	800dc54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ebc8:	480c      	ldr	r0, [pc, #48]	@ (800ebfc <LoopForever+0x6>)
  ldr r1, =_edata
 800ebca:	490d      	ldr	r1, [pc, #52]	@ (800ec00 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ebcc:	4a0d      	ldr	r2, [pc, #52]	@ (800ec04 <LoopForever+0xe>)
  movs r3, #0
 800ebce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ebd0:	e002      	b.n	800ebd8 <LoopCopyDataInit>

0800ebd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ebd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ebd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ebd6:	3304      	adds	r3, #4

0800ebd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ebd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ebda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ebdc:	d3f9      	bcc.n	800ebd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ebde:	4a0a      	ldr	r2, [pc, #40]	@ (800ec08 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ebe0:	4c0a      	ldr	r4, [pc, #40]	@ (800ec0c <LoopForever+0x16>)
  movs r3, #0
 800ebe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ebe4:	e001      	b.n	800ebea <LoopFillZerobss>

0800ebe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ebe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ebe8:	3204      	adds	r2, #4

0800ebea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ebea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ebec:	d3fb      	bcc.n	800ebe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ebee:	f011 fb79 	bl	80202e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ebf2:	f7f9 f84b 	bl	8007c8c <main>

0800ebf6 <LoopForever>:

LoopForever:
    b LoopForever
 800ebf6:	e7fe      	b.n	800ebf6 <LoopForever>
   ldr   r0, =_estack
 800ebf8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800ebfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ec00:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800ec04:	08025fc8 	.word	0x08025fc8
  ldr r2, =_sbss
 800ec08:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800ec0c:	200037b0 	.word	0x200037b0

0800ec10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec10:	e7fe      	b.n	800ec10 <ADC1_COMP_IRQHandler>
	...

0800ec14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ec1a:	1dfb      	adds	r3, r7, #7
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ec20:	4b0b      	ldr	r3, [pc, #44]	@ (800ec50 <HAL_Init+0x3c>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	4b0a      	ldr	r3, [pc, #40]	@ (800ec50 <HAL_Init+0x3c>)
 800ec26:	2140      	movs	r1, #64	@ 0x40
 800ec28:	430a      	orrs	r2, r1
 800ec2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ec2c:	2003      	movs	r0, #3
 800ec2e:	f000 f811 	bl	800ec54 <HAL_InitTick>
 800ec32:	1e03      	subs	r3, r0, #0
 800ec34:	d003      	beq.n	800ec3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800ec36:	1dfb      	adds	r3, r7, #7
 800ec38:	2201      	movs	r2, #1
 800ec3a:	701a      	strb	r2, [r3, #0]
 800ec3c:	e001      	b.n	800ec42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ec3e:	f7fe febd 	bl	800d9bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ec42:	1dfb      	adds	r3, r7, #7
 800ec44:	781b      	ldrb	r3, [r3, #0]
}
 800ec46:	0018      	movs	r0, r3
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	b002      	add	sp, #8
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	46c0      	nop			@ (mov r8, r8)
 800ec50:	40022000 	.word	0x40022000

0800ec54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ec54:	b590      	push	{r4, r7, lr}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ec5c:	4b14      	ldr	r3, [pc, #80]	@ (800ecb0 <HAL_InitTick+0x5c>)
 800ec5e:	681c      	ldr	r4, [r3, #0]
 800ec60:	4b14      	ldr	r3, [pc, #80]	@ (800ecb4 <HAL_InitTick+0x60>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	0019      	movs	r1, r3
 800ec66:	23fa      	movs	r3, #250	@ 0xfa
 800ec68:	0098      	lsls	r0, r3, #2
 800ec6a:	f7f1 fa9b 	bl	80001a4 <__udivsi3>
 800ec6e:	0003      	movs	r3, r0
 800ec70:	0019      	movs	r1, r3
 800ec72:	0020      	movs	r0, r4
 800ec74:	f7f1 fa96 	bl	80001a4 <__udivsi3>
 800ec78:	0003      	movs	r3, r0
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	f000 fcfd 	bl	800f67a <HAL_SYSTICK_Config>
 800ec80:	1e03      	subs	r3, r0, #0
 800ec82:	d001      	beq.n	800ec88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e00f      	b.n	800eca8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b03      	cmp	r3, #3
 800ec8c:	d80b      	bhi.n	800eca6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	2301      	movs	r3, #1
 800ec92:	425b      	negs	r3, r3
 800ec94:	2200      	movs	r2, #0
 800ec96:	0018      	movs	r0, r3
 800ec98:	f000 fcc6 	bl	800f628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ec9c:	4b06      	ldr	r3, [pc, #24]	@ (800ecb8 <HAL_InitTick+0x64>)
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	e000      	b.n	800eca8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
}
 800eca8:	0018      	movs	r0, r3
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	b003      	add	sp, #12
 800ecae:	bd90      	pop	{r4, r7, pc}
 800ecb0:	200000cc 	.word	0x200000cc
 800ecb4:	200000e0 	.word	0x200000e0
 800ecb8:	200000dc 	.word	0x200000dc

0800ecbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ecc0:	4b05      	ldr	r3, [pc, #20]	@ (800ecd8 <HAL_IncTick+0x1c>)
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	001a      	movs	r2, r3
 800ecc6:	4b05      	ldr	r3, [pc, #20]	@ (800ecdc <HAL_IncTick+0x20>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	18d2      	adds	r2, r2, r3
 800eccc:	4b03      	ldr	r3, [pc, #12]	@ (800ecdc <HAL_IncTick+0x20>)
 800ecce:	601a      	str	r2, [r3, #0]
}
 800ecd0:	46c0      	nop			@ (mov r8, r8)
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	46c0      	nop			@ (mov r8, r8)
 800ecd8:	200000e0 	.word	0x200000e0
 800ecdc:	200023ac 	.word	0x200023ac

0800ece0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	af00      	add	r7, sp, #0
  return uwTick;
 800ece4:	4b02      	ldr	r3, [pc, #8]	@ (800ecf0 <HAL_GetTick+0x10>)
 800ece6:	681b      	ldr	r3, [r3, #0]
}
 800ece8:	0018      	movs	r0, r3
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	46c0      	nop			@ (mov r8, r8)
 800ecf0:	200023ac 	.word	0x200023ac

0800ecf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ecfc:	f7ff fff0 	bl	800ece0 <HAL_GetTick>
 800ed00:	0003      	movs	r3, r0
 800ed02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	d005      	beq.n	800ed1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed38 <HAL_Delay+0x44>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	001a      	movs	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	189b      	adds	r3, r3, r2
 800ed18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ed1a:	46c0      	nop			@ (mov r8, r8)
 800ed1c:	f7ff ffe0 	bl	800ece0 <HAL_GetTick>
 800ed20:	0002      	movs	r2, r0
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d8f7      	bhi.n	800ed1c <HAL_Delay+0x28>
  {
  }
}
 800ed2c:	46c0      	nop			@ (mov r8, r8)
 800ed2e:	46c0      	nop			@ (mov r8, r8)
 800ed30:	46bd      	mov	sp, r7
 800ed32:	b004      	add	sp, #16
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	46c0      	nop			@ (mov r8, r8)
 800ed38:	200000e0 	.word	0x200000e0

0800ed3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ed40:	4b04      	ldr	r3, [pc, #16]	@ (800ed54 <HAL_SuspendTick+0x18>)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	4b03      	ldr	r3, [pc, #12]	@ (800ed54 <HAL_SuspendTick+0x18>)
 800ed46:	2102      	movs	r1, #2
 800ed48:	438a      	bics	r2, r1
 800ed4a:	601a      	str	r2, [r3, #0]
}
 800ed4c:	46c0      	nop			@ (mov r8, r8)
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	46c0      	nop			@ (mov r8, r8)
 800ed54:	e000e010 	.word	0xe000e010

0800ed58 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ed5c:	4b04      	ldr	r3, [pc, #16]	@ (800ed70 <HAL_ResumeTick+0x18>)
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	4b03      	ldr	r3, [pc, #12]	@ (800ed70 <HAL_ResumeTick+0x18>)
 800ed62:	2102      	movs	r1, #2
 800ed64:	430a      	orrs	r2, r1
 800ed66:	601a      	str	r2, [r3, #0]
}
 800ed68:	46c0      	nop			@ (mov r8, r8)
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	46c0      	nop			@ (mov r8, r8)
 800ed70:	e000e010 	.word	0xe000e010

0800ed74 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ed78:	4b02      	ldr	r3, [pc, #8]	@ (800ed84 <HAL_GetUIDw0+0x10>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
}
 800ed7c:	0018      	movs	r0, r3
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	46c0      	nop			@ (mov r8, r8)
 800ed84:	1ff80050 	.word	0x1ff80050

0800ed88 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ed8c:	4b02      	ldr	r3, [pc, #8]	@ (800ed98 <HAL_GetUIDw1+0x10>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
}
 800ed90:	0018      	movs	r0, r3
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	46c0      	nop			@ (mov r8, r8)
 800ed98:	1ff80054 	.word	0x1ff80054

0800ed9c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800eda0:	4b02      	ldr	r3, [pc, #8]	@ (800edac <HAL_GetUIDw2+0x10>)
 800eda2:	681b      	ldr	r3, [r3, #0]
}
 800eda4:	0018      	movs	r0, r3
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	46c0      	nop			@ (mov r8, r8)
 800edac:	1ff80064 	.word	0x1ff80064

0800edb0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	e159      	b.n	800f076 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10a      	bne.n	800ede0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2250      	movs	r2, #80	@ 0x50
 800edd4:	2100      	movs	r1, #0
 800edd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	0018      	movs	r0, r3
 800eddc:	f7f8 f9fc 	bl	80071d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ede4:	2210      	movs	r2, #16
 800ede6:	4013      	ands	r3, r2
 800ede8:	2b10      	cmp	r3, #16
 800edea:	d005      	beq.n	800edf8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	2204      	movs	r2, #4
 800edf4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800edf6:	d00b      	beq.n	800ee10 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edfc:	2210      	movs	r2, #16
 800edfe:	431a      	orrs	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2250      	movs	r2, #80	@ 0x50
 800ee08:	2100      	movs	r1, #0
 800ee0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e132      	b.n	800f076 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee14:	4a9a      	ldr	r2, [pc, #616]	@ (800f080 <HAL_ADC_Init+0x2d0>)
 800ee16:	4013      	ands	r3, r2
 800ee18:	2202      	movs	r2, #2
 800ee1a:	431a      	orrs	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	2203      	movs	r2, #3
 800ee28:	4013      	ands	r3, r2
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d108      	bne.n	800ee40 <HAL_ADC_Init+0x90>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2201      	movs	r2, #1
 800ee36:	4013      	ands	r3, r2
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d101      	bne.n	800ee40 <HAL_ADC_Init+0x90>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e000      	b.n	800ee42 <HAL_ADC_Init+0x92>
 800ee40:	2300      	movs	r3, #0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d149      	bne.n	800eeda <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	23c0      	movs	r3, #192	@ 0xc0
 800ee4c:	061b      	lsls	r3, r3, #24
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d00b      	beq.n	800ee6a <HAL_ADC_Init+0xba>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	2380      	movs	r3, #128	@ 0x80
 800ee58:	05db      	lsls	r3, r3, #23
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d005      	beq.n	800ee6a <HAL_ADC_Init+0xba>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	2380      	movs	r3, #128	@ 0x80
 800ee64:	061b      	lsls	r3, r3, #24
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d111      	bne.n	800ee8e <HAL_ADC_Init+0xde>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	691a      	ldr	r2, [r3, #16]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	0092      	lsls	r2, r2, #2
 800ee76:	0892      	lsrs	r2, r2, #2
 800ee78:	611a      	str	r2, [r3, #16]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	6919      	ldr	r1, [r3, #16]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	430a      	orrs	r2, r1
 800ee8a:	611a      	str	r2, [r3, #16]
 800ee8c:	e014      	b.n	800eeb8 <HAL_ADC_Init+0x108>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	691a      	ldr	r2, [r3, #16]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	0092      	lsls	r2, r2, #2
 800ee9a:	0892      	lsrs	r2, r2, #2
 800ee9c:	611a      	str	r2, [r3, #16]
 800ee9e:	4b79      	ldr	r3, [pc, #484]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	4b78      	ldr	r3, [pc, #480]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eea4:	4978      	ldr	r1, [pc, #480]	@ (800f088 <HAL_ADC_Init+0x2d8>)
 800eea6:	400a      	ands	r2, r1
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	4b76      	ldr	r3, [pc, #472]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eeac:	6819      	ldr	r1, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685a      	ldr	r2, [r3, #4]
 800eeb2:	4b74      	ldr	r3, [pc, #464]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eeb4:	430a      	orrs	r2, r1
 800eeb6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68da      	ldr	r2, [r3, #12]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2118      	movs	r1, #24
 800eec4:	438a      	bics	r2, r1
 800eec6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68d9      	ldr	r1, [r3, #12]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689a      	ldr	r2, [r3, #8]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	430a      	orrs	r2, r1
 800eed8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800eeda:	4b6a      	ldr	r3, [pc, #424]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	4b69      	ldr	r3, [pc, #420]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eee0:	496a      	ldr	r1, [pc, #424]	@ (800f08c <HAL_ADC_Init+0x2dc>)
 800eee2:	400a      	ands	r2, r1
 800eee4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800eee6:	4b67      	ldr	r3, [pc, #412]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eeee:	065a      	lsls	r2, r3, #25
 800eef0:	4b64      	ldr	r3, [pc, #400]	@ (800f084 <HAL_ADC_Init+0x2d4>)
 800eef2:	430a      	orrs	r2, r1
 800eef4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	689a      	ldr	r2, [r3, #8]
 800eefc:	2380      	movs	r3, #128	@ 0x80
 800eefe:	055b      	lsls	r3, r3, #21
 800ef00:	4013      	ands	r3, r2
 800ef02:	d108      	bne.n	800ef16 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	689a      	ldr	r2, [r3, #8]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2180      	movs	r1, #128	@ 0x80
 800ef10:	0549      	lsls	r1, r1, #21
 800ef12:	430a      	orrs	r2, r1
 800ef14:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68da      	ldr	r2, [r3, #12]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	495b      	ldr	r1, [pc, #364]	@ (800f090 <HAL_ADC_Init+0x2e0>)
 800ef22:	400a      	ands	r2, r1
 800ef24:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68d9      	ldr	r1, [r3, #12]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d101      	bne.n	800ef3c <HAL_ADC_Init+0x18c>
 800ef38:	2304      	movs	r3, #4
 800ef3a:	e000      	b.n	800ef3e <HAL_ADC_Init+0x18e>
 800ef3c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef3e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2020      	movs	r0, #32
 800ef44:	5c1b      	ldrb	r3, [r3, r0]
 800ef46:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800ef48:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	202c      	movs	r0, #44	@ 0x2c
 800ef4e:	5c1b      	ldrb	r3, [r3, r0]
 800ef50:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ef52:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800ef58:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	699b      	ldr	r3, [r3, #24]
 800ef5e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800ef60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	69db      	ldr	r3, [r3, #28]
 800ef66:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800ef68:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	430a      	orrs	r2, r1
 800ef70:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef76:	23c2      	movs	r3, #194	@ 0xc2
 800ef78:	33ff      	adds	r3, #255	@ 0xff
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d00b      	beq.n	800ef96 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68d9      	ldr	r1, [r3, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	430a      	orrs	r2, r1
 800ef94:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2221      	movs	r2, #33	@ 0x21
 800ef9a:	5c9b      	ldrb	r3, [r3, r2]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d11a      	bne.n	800efd6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2220      	movs	r2, #32
 800efa4:	5c9b      	ldrb	r3, [r3, r2]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d109      	bne.n	800efbe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2180      	movs	r1, #128	@ 0x80
 800efb6:	0249      	lsls	r1, r1, #9
 800efb8:	430a      	orrs	r2, r1
 800efba:	60da      	str	r2, [r3, #12]
 800efbc:	e00b      	b.n	800efd6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efc2:	2220      	movs	r2, #32
 800efc4:	431a      	orrs	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efce:	2201      	movs	r2, #1
 800efd0:	431a      	orrs	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d11f      	bne.n	800f01e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	691a      	ldr	r2, [r3, #16]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	492a      	ldr	r1, [pc, #168]	@ (800f094 <HAL_ADC_Init+0x2e4>)
 800efea:	400a      	ands	r2, r1
 800efec:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	6919      	ldr	r1, [r3, #16]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800effc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f002:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	430a      	orrs	r2, r1
 800f00a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	691a      	ldr	r2, [r3, #16]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2101      	movs	r1, #1
 800f018:	430a      	orrs	r2, r1
 800f01a:	611a      	str	r2, [r3, #16]
 800f01c:	e00e      	b.n	800f03c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	2201      	movs	r2, #1
 800f026:	4013      	ands	r3, r2
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d107      	bne.n	800f03c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	691a      	ldr	r2, [r3, #16]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2101      	movs	r1, #1
 800f038:	438a      	bics	r2, r1
 800f03a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	695a      	ldr	r2, [r3, #20]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2107      	movs	r1, #7
 800f048:	438a      	bics	r2, r1
 800f04a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6959      	ldr	r1, [r3, #20]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	430a      	orrs	r2, r1
 800f05c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2200      	movs	r2, #0
 800f062:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f068:	2203      	movs	r2, #3
 800f06a:	4393      	bics	r3, r2
 800f06c:	2201      	movs	r2, #1
 800f06e:	431a      	orrs	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	0018      	movs	r0, r3
 800f078:	46bd      	mov	sp, r7
 800f07a:	b002      	add	sp, #8
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	46c0      	nop			@ (mov r8, r8)
 800f080:	fffffefd 	.word	0xfffffefd
 800f084:	40012708 	.word	0x40012708
 800f088:	ffc3ffff 	.word	0xffc3ffff
 800f08c:	fdffffff 	.word	0xfdffffff
 800f090:	fffe0219 	.word	0xfffe0219
 800f094:	fffffc03 	.word	0xfffffc03

0800f098 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f098:	b590      	push	{r4, r7, lr}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f0a0:	230f      	movs	r3, #15
 800f0a2:	18fb      	adds	r3, r7, r3
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	2204      	movs	r2, #4
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	d138      	bne.n	800f126 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2250      	movs	r2, #80	@ 0x50
 800f0b8:	5c9b      	ldrb	r3, [r3, r2]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d101      	bne.n	800f0c2 <HAL_ADC_Start+0x2a>
 800f0be:	2302      	movs	r3, #2
 800f0c0:	e038      	b.n	800f134 <HAL_ADC_Start+0x9c>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2250      	movs	r2, #80	@ 0x50
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	69db      	ldr	r3, [r3, #28]
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d007      	beq.n	800f0e2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f0d2:	230f      	movs	r3, #15
 800f0d4:	18fc      	adds	r4, r7, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f000 f95f 	bl	800f39c <ADC_Enable>
 800f0de:	0003      	movs	r3, r0
 800f0e0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f0e2:	230f      	movs	r3, #15
 800f0e4:	18fb      	adds	r3, r7, r3
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d120      	bne.n	800f12e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0f0:	4a12      	ldr	r2, [pc, #72]	@ (800f13c <HAL_ADC_Start+0xa4>)
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	2280      	movs	r2, #128	@ 0x80
 800f0f6:	0052      	lsls	r2, r2, #1
 800f0f8:	431a      	orrs	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2250      	movs	r2, #80	@ 0x50
 800f108:	2100      	movs	r1, #0
 800f10a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	221c      	movs	r2, #28
 800f112:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	689a      	ldr	r2, [r3, #8]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2104      	movs	r1, #4
 800f120:	430a      	orrs	r2, r1
 800f122:	609a      	str	r2, [r3, #8]
 800f124:	e003      	b.n	800f12e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f126:	230f      	movs	r3, #15
 800f128:	18fb      	adds	r3, r7, r3
 800f12a:	2202      	movs	r2, #2
 800f12c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f12e:	230f      	movs	r3, #15
 800f130:	18fb      	adds	r3, r7, r3
 800f132:	781b      	ldrb	r3, [r3, #0]
}
 800f134:	0018      	movs	r0, r3
 800f136:	46bd      	mov	sp, r7
 800f138:	b005      	add	sp, #20
 800f13a:	bd90      	pop	{r4, r7, pc}
 800f13c:	fffff0fe 	.word	0xfffff0fe

0800f140 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f14e:	2300      	movs	r3, #0
 800f150:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	695b      	ldr	r3, [r3, #20]
 800f156:	2b08      	cmp	r3, #8
 800f158:	d102      	bne.n	800f160 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f15a:	2308      	movs	r3, #8
 800f15c:	60fb      	str	r3, [r7, #12]
 800f15e:	e014      	b.n	800f18a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	2201      	movs	r2, #1
 800f168:	4013      	ands	r3, r2
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d10b      	bne.n	800f186 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f172:	2220      	movs	r2, #32
 800f174:	431a      	orrs	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2250      	movs	r2, #80	@ 0x50
 800f17e:	2100      	movs	r1, #0
 800f180:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	e072      	b.n	800f26c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f186:	230c      	movs	r3, #12
 800f188:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f18a:	f7ff fda9 	bl	800ece0 <HAL_GetTick>
 800f18e:	0003      	movs	r3, r0
 800f190:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f192:	e01f      	b.n	800f1d4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	3301      	adds	r3, #1
 800f198:	d01c      	beq.n	800f1d4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d007      	beq.n	800f1b0 <HAL_ADC_PollForConversion+0x70>
 800f1a0:	f7ff fd9e 	bl	800ece0 <HAL_GetTick>
 800f1a4:	0002      	movs	r2, r0
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d211      	bcs.n	800f1d4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	d10b      	bne.n	800f1d4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1c0:	2204      	movs	r2, #4
 800f1c2:	431a      	orrs	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2250      	movs	r2, #80	@ 0x50
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e04b      	b.n	800f26c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	4013      	ands	r3, r2
 800f1de:	d0d9      	beq.n	800f194 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1e4:	2280      	movs	r2, #128	@ 0x80
 800f1e6:	0092      	lsls	r2, r2, #2
 800f1e8:	431a      	orrs	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	23c0      	movs	r3, #192	@ 0xc0
 800f1f6:	011b      	lsls	r3, r3, #4
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	d12e      	bne.n	800f25a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2220      	movs	r2, #32
 800f200:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f202:	2b00      	cmp	r3, #0
 800f204:	d129      	bne.n	800f25a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2208      	movs	r2, #8
 800f20e:	4013      	ands	r3, r2
 800f210:	2b08      	cmp	r3, #8
 800f212:	d122      	bne.n	800f25a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	2204      	movs	r2, #4
 800f21c:	4013      	ands	r3, r2
 800f21e:	d110      	bne.n	800f242 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	210c      	movs	r1, #12
 800f22c:	438a      	bics	r2, r1
 800f22e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f234:	4a0f      	ldr	r2, [pc, #60]	@ (800f274 <HAL_ADC_PollForConversion+0x134>)
 800f236:	4013      	ands	r3, r2
 800f238:	2201      	movs	r2, #1
 800f23a:	431a      	orrs	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	655a      	str	r2, [r3, #84]	@ 0x54
 800f240:	e00b      	b.n	800f25a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f246:	2220      	movs	r2, #32
 800f248:	431a      	orrs	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f252:	2201      	movs	r2, #1
 800f254:	431a      	orrs	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d103      	bne.n	800f26a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	220c      	movs	r2, #12
 800f268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	0018      	movs	r0, r3
 800f26e:	46bd      	mov	sp, r7
 800f270:	b004      	add	sp, #16
 800f272:	bd80      	pop	{r7, pc}
 800f274:	fffffefe 	.word	0xfffffefe

0800f278 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f286:	0018      	movs	r0, r3
 800f288:	46bd      	mov	sp, r7
 800f28a:	b002      	add	sp, #8
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2250      	movs	r2, #80	@ 0x50
 800f29e:	5c9b      	ldrb	r3, [r3, r2]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d101      	bne.n	800f2a8 <HAL_ADC_ConfigChannel+0x18>
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	e06c      	b.n	800f382 <HAL_ADC_ConfigChannel+0xf2>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2250      	movs	r2, #80	@ 0x50
 800f2ac:	2101      	movs	r1, #1
 800f2ae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	2204      	movs	r2, #4
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	d00b      	beq.n	800f2d4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2c0:	2220      	movs	r2, #32
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2250      	movs	r2, #80	@ 0x50
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e056      	b.n	800f382 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	4a2c      	ldr	r2, [pc, #176]	@ (800f38c <HAL_ADC_ConfigChannel+0xfc>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d028      	beq.n	800f330 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	035b      	lsls	r3, r3, #13
 800f2ea:	0b5a      	lsrs	r2, r3, #13
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	430a      	orrs	r2, r1
 800f2f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	2380      	movs	r3, #128	@ 0x80
 800f2fa:	02db      	lsls	r3, r3, #11
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	d009      	beq.n	800f314 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f300:	4b23      	ldr	r3, [pc, #140]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	4b22      	ldr	r3, [pc, #136]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f306:	2180      	movs	r1, #128	@ 0x80
 800f308:	0409      	lsls	r1, r1, #16
 800f30a:	430a      	orrs	r2, r1
 800f30c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f30e:	200a      	movs	r0, #10
 800f310:	f000 f8ac 	bl	800f46c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	2380      	movs	r3, #128	@ 0x80
 800f31a:	029b      	lsls	r3, r3, #10
 800f31c:	4013      	ands	r3, r2
 800f31e:	d02b      	beq.n	800f378 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f320:	4b1b      	ldr	r3, [pc, #108]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	4b1a      	ldr	r3, [pc, #104]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f326:	2180      	movs	r1, #128	@ 0x80
 800f328:	03c9      	lsls	r1, r1, #15
 800f32a:	430a      	orrs	r2, r1
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e023      	b.n	800f378 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	035b      	lsls	r3, r3, #13
 800f33c:	0b5b      	lsrs	r3, r3, #13
 800f33e:	43d9      	mvns	r1, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	400a      	ands	r2, r1
 800f346:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	2380      	movs	r3, #128	@ 0x80
 800f34e:	02db      	lsls	r3, r3, #11
 800f350:	4013      	ands	r3, r2
 800f352:	d005      	beq.n	800f360 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f354:	4b0e      	ldr	r3, [pc, #56]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	4b0d      	ldr	r3, [pc, #52]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f35a:	490e      	ldr	r1, [pc, #56]	@ (800f394 <HAL_ADC_ConfigChannel+0x104>)
 800f35c:	400a      	ands	r2, r1
 800f35e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	2380      	movs	r3, #128	@ 0x80
 800f366:	029b      	lsls	r3, r3, #10
 800f368:	4013      	ands	r3, r2
 800f36a:	d005      	beq.n	800f378 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f36c:	4b08      	ldr	r3, [pc, #32]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	4b07      	ldr	r3, [pc, #28]	@ (800f390 <HAL_ADC_ConfigChannel+0x100>)
 800f372:	4909      	ldr	r1, [pc, #36]	@ (800f398 <HAL_ADC_ConfigChannel+0x108>)
 800f374:	400a      	ands	r2, r1
 800f376:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2250      	movs	r2, #80	@ 0x50
 800f37c:	2100      	movs	r1, #0
 800f37e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	0018      	movs	r0, r3
 800f384:	46bd      	mov	sp, r7
 800f386:	b002      	add	sp, #8
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	46c0      	nop			@ (mov r8, r8)
 800f38c:	00001001 	.word	0x00001001
 800f390:	40012708 	.word	0x40012708
 800f394:	ff7fffff 	.word	0xff7fffff
 800f398:	ffbfffff 	.word	0xffbfffff

0800f39c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	2203      	movs	r2, #3
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d108      	bne.n	800f3c8 <ADC_Enable+0x2c>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	4013      	ands	r3, r2
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d101      	bne.n	800f3c8 <ADC_Enable+0x2c>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	e000      	b.n	800f3ca <ADC_Enable+0x2e>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d146      	bne.n	800f45c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	4a24      	ldr	r2, [pc, #144]	@ (800f468 <ADC_Enable+0xcc>)
 800f3d6:	4013      	ands	r3, r2
 800f3d8:	d00d      	beq.n	800f3f6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3de:	2210      	movs	r2, #16
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	431a      	orrs	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e033      	b.n	800f45e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	689a      	ldr	r2, [r3, #8]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2101      	movs	r1, #1
 800f402:	430a      	orrs	r2, r1
 800f404:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f406:	2001      	movs	r0, #1
 800f408:	f000 f830 	bl	800f46c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f40c:	f7ff fc68 	bl	800ece0 <HAL_GetTick>
 800f410:	0003      	movs	r3, r0
 800f412:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f414:	e01b      	b.n	800f44e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f416:	f7ff fc63 	bl	800ece0 <HAL_GetTick>
 800f41a:	0002      	movs	r2, r0
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	2b0a      	cmp	r3, #10
 800f422:	d914      	bls.n	800f44e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2201      	movs	r2, #1
 800f42c:	4013      	ands	r3, r2
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d00d      	beq.n	800f44e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f436:	2210      	movs	r2, #16
 800f438:	431a      	orrs	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f442:	2201      	movs	r2, #1
 800f444:	431a      	orrs	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f44a:	2301      	movs	r3, #1
 800f44c:	e007      	b.n	800f45e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2201      	movs	r2, #1
 800f456:	4013      	ands	r3, r2
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d1dc      	bne.n	800f416 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	0018      	movs	r0, r3
 800f460:	46bd      	mov	sp, r7
 800f462:	b004      	add	sp, #16
 800f464:	bd80      	pop	{r7, pc}
 800f466:	46c0      	nop			@ (mov r8, r8)
 800f468:	80000017 	.word	0x80000017

0800f46c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f474:	4b0b      	ldr	r3, [pc, #44]	@ (800f4a4 <ADC_DelayMicroSecond+0x38>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	490b      	ldr	r1, [pc, #44]	@ (800f4a8 <ADC_DelayMicroSecond+0x3c>)
 800f47a:	0018      	movs	r0, r3
 800f47c:	f7f0 fe92 	bl	80001a4 <__udivsi3>
 800f480:	0003      	movs	r3, r0
 800f482:	001a      	movs	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4353      	muls	r3, r2
 800f488:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f48a:	e002      	b.n	800f492 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	3b01      	subs	r3, #1
 800f490:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1f9      	bne.n	800f48c <ADC_DelayMicroSecond+0x20>
  }
}
 800f498:	46c0      	nop			@ (mov r8, r8)
 800f49a:	46c0      	nop			@ (mov r8, r8)
 800f49c:	46bd      	mov	sp, r7
 800f49e:	b004      	add	sp, #16
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	46c0      	nop			@ (mov r8, r8)
 800f4a4:	200000cc 	.word	0x200000cc
 800f4a8:	000f4240 	.word	0x000f4240

0800f4ac <__NVIC_EnableIRQ>:
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	0002      	movs	r2, r0
 800f4b4:	1dfb      	adds	r3, r7, #7
 800f4b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f4b8:	1dfb      	adds	r3, r7, #7
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	2b7f      	cmp	r3, #127	@ 0x7f
 800f4be:	d809      	bhi.n	800f4d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f4c0:	1dfb      	adds	r3, r7, #7
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	001a      	movs	r2, r3
 800f4c6:	231f      	movs	r3, #31
 800f4c8:	401a      	ands	r2, r3
 800f4ca:	4b04      	ldr	r3, [pc, #16]	@ (800f4dc <__NVIC_EnableIRQ+0x30>)
 800f4cc:	2101      	movs	r1, #1
 800f4ce:	4091      	lsls	r1, r2
 800f4d0:	000a      	movs	r2, r1
 800f4d2:	601a      	str	r2, [r3, #0]
}
 800f4d4:	46c0      	nop			@ (mov r8, r8)
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	b002      	add	sp, #8
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	e000e100 	.word	0xe000e100

0800f4e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f4e0:	b590      	push	{r4, r7, lr}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	0002      	movs	r2, r0
 800f4e8:	6039      	str	r1, [r7, #0]
 800f4ea:	1dfb      	adds	r3, r7, #7
 800f4ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f4ee:	1dfb      	adds	r3, r7, #7
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f4f4:	d828      	bhi.n	800f548 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4f6:	4a2f      	ldr	r2, [pc, #188]	@ (800f5b4 <__NVIC_SetPriority+0xd4>)
 800f4f8:	1dfb      	adds	r3, r7, #7
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	b25b      	sxtb	r3, r3
 800f4fe:	089b      	lsrs	r3, r3, #2
 800f500:	33c0      	adds	r3, #192	@ 0xc0
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	589b      	ldr	r3, [r3, r2]
 800f506:	1dfa      	adds	r2, r7, #7
 800f508:	7812      	ldrb	r2, [r2, #0]
 800f50a:	0011      	movs	r1, r2
 800f50c:	2203      	movs	r2, #3
 800f50e:	400a      	ands	r2, r1
 800f510:	00d2      	lsls	r2, r2, #3
 800f512:	21ff      	movs	r1, #255	@ 0xff
 800f514:	4091      	lsls	r1, r2
 800f516:	000a      	movs	r2, r1
 800f518:	43d2      	mvns	r2, r2
 800f51a:	401a      	ands	r2, r3
 800f51c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	019b      	lsls	r3, r3, #6
 800f522:	22ff      	movs	r2, #255	@ 0xff
 800f524:	401a      	ands	r2, r3
 800f526:	1dfb      	adds	r3, r7, #7
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	0018      	movs	r0, r3
 800f52c:	2303      	movs	r3, #3
 800f52e:	4003      	ands	r3, r0
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f534:	481f      	ldr	r0, [pc, #124]	@ (800f5b4 <__NVIC_SetPriority+0xd4>)
 800f536:	1dfb      	adds	r3, r7, #7
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	b25b      	sxtb	r3, r3
 800f53c:	089b      	lsrs	r3, r3, #2
 800f53e:	430a      	orrs	r2, r1
 800f540:	33c0      	adds	r3, #192	@ 0xc0
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f546:	e031      	b.n	800f5ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f548:	4a1b      	ldr	r2, [pc, #108]	@ (800f5b8 <__NVIC_SetPriority+0xd8>)
 800f54a:	1dfb      	adds	r3, r7, #7
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	0019      	movs	r1, r3
 800f550:	230f      	movs	r3, #15
 800f552:	400b      	ands	r3, r1
 800f554:	3b08      	subs	r3, #8
 800f556:	089b      	lsrs	r3, r3, #2
 800f558:	3306      	adds	r3, #6
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	18d3      	adds	r3, r2, r3
 800f55e:	3304      	adds	r3, #4
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	1dfa      	adds	r2, r7, #7
 800f564:	7812      	ldrb	r2, [r2, #0]
 800f566:	0011      	movs	r1, r2
 800f568:	2203      	movs	r2, #3
 800f56a:	400a      	ands	r2, r1
 800f56c:	00d2      	lsls	r2, r2, #3
 800f56e:	21ff      	movs	r1, #255	@ 0xff
 800f570:	4091      	lsls	r1, r2
 800f572:	000a      	movs	r2, r1
 800f574:	43d2      	mvns	r2, r2
 800f576:	401a      	ands	r2, r3
 800f578:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	019b      	lsls	r3, r3, #6
 800f57e:	22ff      	movs	r2, #255	@ 0xff
 800f580:	401a      	ands	r2, r3
 800f582:	1dfb      	adds	r3, r7, #7
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	0018      	movs	r0, r3
 800f588:	2303      	movs	r3, #3
 800f58a:	4003      	ands	r3, r0
 800f58c:	00db      	lsls	r3, r3, #3
 800f58e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f590:	4809      	ldr	r0, [pc, #36]	@ (800f5b8 <__NVIC_SetPriority+0xd8>)
 800f592:	1dfb      	adds	r3, r7, #7
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	001c      	movs	r4, r3
 800f598:	230f      	movs	r3, #15
 800f59a:	4023      	ands	r3, r4
 800f59c:	3b08      	subs	r3, #8
 800f59e:	089b      	lsrs	r3, r3, #2
 800f5a0:	430a      	orrs	r2, r1
 800f5a2:	3306      	adds	r3, #6
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	18c3      	adds	r3, r0, r3
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	601a      	str	r2, [r3, #0]
}
 800f5ac:	46c0      	nop			@ (mov r8, r8)
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	b003      	add	sp, #12
 800f5b2:	bd90      	pop	{r4, r7, pc}
 800f5b4:	e000e100 	.word	0xe000e100
 800f5b8:	e000ed00 	.word	0xe000ed00

0800f5bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f5c0:	f3bf 8f4f 	dsb	sy
}
 800f5c4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f5c6:	4b04      	ldr	r3, [pc, #16]	@ (800f5d8 <__NVIC_SystemReset+0x1c>)
 800f5c8:	4a04      	ldr	r2, [pc, #16]	@ (800f5dc <__NVIC_SystemReset+0x20>)
 800f5ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f5cc:	f3bf 8f4f 	dsb	sy
}
 800f5d0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f5d2:	46c0      	nop			@ (mov r8, r8)
 800f5d4:	e7fd      	b.n	800f5d2 <__NVIC_SystemReset+0x16>
 800f5d6:	46c0      	nop			@ (mov r8, r8)
 800f5d8:	e000ed00 	.word	0xe000ed00
 800f5dc:	05fa0004 	.word	0x05fa0004

0800f5e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	1e5a      	subs	r2, r3, #1
 800f5ec:	2380      	movs	r3, #128	@ 0x80
 800f5ee:	045b      	lsls	r3, r3, #17
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d301      	bcc.n	800f5f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e010      	b.n	800f61a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f624 <SysTick_Config+0x44>)
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	3a01      	subs	r2, #1
 800f5fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f600:	2301      	movs	r3, #1
 800f602:	425b      	negs	r3, r3
 800f604:	2103      	movs	r1, #3
 800f606:	0018      	movs	r0, r3
 800f608:	f7ff ff6a 	bl	800f4e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f60c:	4b05      	ldr	r3, [pc, #20]	@ (800f624 <SysTick_Config+0x44>)
 800f60e:	2200      	movs	r2, #0
 800f610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f612:	4b04      	ldr	r3, [pc, #16]	@ (800f624 <SysTick_Config+0x44>)
 800f614:	2207      	movs	r2, #7
 800f616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f618:	2300      	movs	r3, #0
}
 800f61a:	0018      	movs	r0, r3
 800f61c:	46bd      	mov	sp, r7
 800f61e:	b002      	add	sp, #8
 800f620:	bd80      	pop	{r7, pc}
 800f622:	46c0      	nop			@ (mov r8, r8)
 800f624:	e000e010 	.word	0xe000e010

0800f628 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60b9      	str	r1, [r7, #8]
 800f630:	607a      	str	r2, [r7, #4]
 800f632:	210f      	movs	r1, #15
 800f634:	187b      	adds	r3, r7, r1
 800f636:	1c02      	adds	r2, r0, #0
 800f638:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	187b      	adds	r3, r7, r1
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	b25b      	sxtb	r3, r3
 800f642:	0011      	movs	r1, r2
 800f644:	0018      	movs	r0, r3
 800f646:	f7ff ff4b 	bl	800f4e0 <__NVIC_SetPriority>
}
 800f64a:	46c0      	nop			@ (mov r8, r8)
 800f64c:	46bd      	mov	sp, r7
 800f64e:	b004      	add	sp, #16
 800f650:	bd80      	pop	{r7, pc}

0800f652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b082      	sub	sp, #8
 800f656:	af00      	add	r7, sp, #0
 800f658:	0002      	movs	r2, r0
 800f65a:	1dfb      	adds	r3, r7, #7
 800f65c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f65e:	1dfb      	adds	r3, r7, #7
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	b25b      	sxtb	r3, r3
 800f664:	0018      	movs	r0, r3
 800f666:	f7ff ff21 	bl	800f4ac <__NVIC_EnableIRQ>
}
 800f66a:	46c0      	nop			@ (mov r8, r8)
 800f66c:	46bd      	mov	sp, r7
 800f66e:	b002      	add	sp, #8
 800f670:	bd80      	pop	{r7, pc}

0800f672 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f672:	b580      	push	{r7, lr}
 800f674:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f676:	f7ff ffa1 	bl	800f5bc <__NVIC_SystemReset>

0800f67a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b082      	sub	sp, #8
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	0018      	movs	r0, r3
 800f686:	f7ff ffab 	bl	800f5e0 <SysTick_Config>
 800f68a:	0003      	movs	r3, r0
}
 800f68c:	0018      	movs	r0, r3
 800f68e:	46bd      	mov	sp, r7
 800f690:	b002      	add	sp, #8
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d101      	bne.n	800f6a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e061      	b.n	800f76a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a32      	ldr	r2, [pc, #200]	@ (800f774 <HAL_DMA_Init+0xe0>)
 800f6ac:	4694      	mov	ip, r2
 800f6ae:	4463      	add	r3, ip
 800f6b0:	2114      	movs	r1, #20
 800f6b2:	0018      	movs	r0, r3
 800f6b4:	f7f0 fd76 	bl	80001a4 <__udivsi3>
 800f6b8:	0003      	movs	r3, r0
 800f6ba:	009a      	lsls	r2, r3, #2
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4a2d      	ldr	r2, [pc, #180]	@ (800f778 <HAL_DMA_Init+0xe4>)
 800f6c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2225      	movs	r2, #37	@ 0x25
 800f6ca:	2102      	movs	r1, #2
 800f6cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	4a28      	ldr	r2, [pc, #160]	@ (800f77c <HAL_DMA_Init+0xe8>)
 800f6da:	4013      	ands	r3, r2
 800f6dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f6e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	699b      	ldr	r3, [r3, #24]
 800f6f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a1b      	ldr	r3, [r3, #32]
 800f704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	4313      	orrs	r3, r2
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	689a      	ldr	r2, [r3, #8]
 800f718:	2380      	movs	r3, #128	@ 0x80
 800f71a:	01db      	lsls	r3, r3, #7
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d018      	beq.n	800f752 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f720:	4b17      	ldr	r3, [pc, #92]	@ (800f780 <HAL_DMA_Init+0xec>)
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f728:	211c      	movs	r1, #28
 800f72a:	400b      	ands	r3, r1
 800f72c:	210f      	movs	r1, #15
 800f72e:	4099      	lsls	r1, r3
 800f730:	000b      	movs	r3, r1
 800f732:	43d9      	mvns	r1, r3
 800f734:	4b12      	ldr	r3, [pc, #72]	@ (800f780 <HAL_DMA_Init+0xec>)
 800f736:	400a      	ands	r2, r1
 800f738:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f73a:	4b11      	ldr	r3, [pc, #68]	@ (800f780 <HAL_DMA_Init+0xec>)
 800f73c:	6819      	ldr	r1, [r3, #0]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685a      	ldr	r2, [r3, #4]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f746:	201c      	movs	r0, #28
 800f748:	4003      	ands	r3, r0
 800f74a:	409a      	lsls	r2, r3
 800f74c:	4b0c      	ldr	r3, [pc, #48]	@ (800f780 <HAL_DMA_Init+0xec>)
 800f74e:	430a      	orrs	r2, r1
 800f750:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2225      	movs	r2, #37	@ 0x25
 800f75c:	2101      	movs	r1, #1
 800f75e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2224      	movs	r2, #36	@ 0x24
 800f764:	2100      	movs	r1, #0
 800f766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	0018      	movs	r0, r3
 800f76c:	46bd      	mov	sp, r7
 800f76e:	b004      	add	sp, #16
 800f770:	bd80      	pop	{r7, pc}
 800f772:	46c0      	nop			@ (mov r8, r8)
 800f774:	bffdfff8 	.word	0xbffdfff8
 800f778:	40020000 	.word	0x40020000
 800f77c:	ffff800f 	.word	0xffff800f
 800f780:	400200a8 	.word	0x400200a8

0800f784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f792:	2317      	movs	r3, #23
 800f794:	18fb      	adds	r3, r7, r3
 800f796:	2200      	movs	r2, #0
 800f798:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2224      	movs	r2, #36	@ 0x24
 800f79e:	5c9b      	ldrb	r3, [r3, r2]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d101      	bne.n	800f7a8 <HAL_DMA_Start_IT+0x24>
 800f7a4:	2302      	movs	r3, #2
 800f7a6:	e04f      	b.n	800f848 <HAL_DMA_Start_IT+0xc4>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2224      	movs	r2, #36	@ 0x24
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2225      	movs	r2, #37	@ 0x25
 800f7b4:	5c9b      	ldrb	r3, [r3, r2]
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d13a      	bne.n	800f832 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2225      	movs	r2, #37	@ 0x25
 800f7c0:	2102      	movs	r1, #2
 800f7c2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2101      	movs	r1, #1
 800f7d6:	438a      	bics	r2, r1
 800f7d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	68b9      	ldr	r1, [r7, #8]
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f000 f976 	bl	800fad2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d008      	beq.n	800f800 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	210e      	movs	r1, #14
 800f7fa:	430a      	orrs	r2, r1
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	e00f      	b.n	800f820 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2104      	movs	r1, #4
 800f80c:	438a      	bics	r2, r1
 800f80e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	210a      	movs	r1, #10
 800f81c:	430a      	orrs	r2, r1
 800f81e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2101      	movs	r1, #1
 800f82c:	430a      	orrs	r2, r1
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	e007      	b.n	800f842 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2224      	movs	r2, #36	@ 0x24
 800f836:	2100      	movs	r1, #0
 800f838:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f83a:	2317      	movs	r3, #23
 800f83c:	18fb      	adds	r3, r7, r3
 800f83e:	2202      	movs	r2, #2
 800f840:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f842:	2317      	movs	r3, #23
 800f844:	18fb      	adds	r3, r7, r3
 800f846:	781b      	ldrb	r3, [r3, #0]
}
 800f848:	0018      	movs	r0, r3
 800f84a:	46bd      	mov	sp, r7
 800f84c:	b006      	add	sp, #24
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f858:	230f      	movs	r3, #15
 800f85a:	18fb      	adds	r3, r7, r3
 800f85c:	2200      	movs	r2, #0
 800f85e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2225      	movs	r2, #37	@ 0x25
 800f864:	5c9b      	ldrb	r3, [r3, r2]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b02      	cmp	r3, #2
 800f86a:	d008      	beq.n	800f87e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2204      	movs	r2, #4
 800f870:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2224      	movs	r2, #36	@ 0x24
 800f876:	2100      	movs	r1, #0
 800f878:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e024      	b.n	800f8c8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	681a      	ldr	r2, [r3, #0]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	210e      	movs	r1, #14
 800f88a:	438a      	bics	r2, r1
 800f88c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2101      	movs	r1, #1
 800f89a:	438a      	bics	r2, r1
 800f89c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8a2:	221c      	movs	r2, #28
 800f8a4:	401a      	ands	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8aa:	2101      	movs	r1, #1
 800f8ac:	4091      	lsls	r1, r2
 800f8ae:	000a      	movs	r2, r1
 800f8b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2225      	movs	r2, #37	@ 0x25
 800f8b6:	2101      	movs	r1, #1
 800f8b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2224      	movs	r2, #36	@ 0x24
 800f8be:	2100      	movs	r1, #0
 800f8c0:	5499      	strb	r1, [r3, r2]

    return status;
 800f8c2:	230f      	movs	r3, #15
 800f8c4:	18fb      	adds	r3, r7, r3
 800f8c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f8c8:	0018      	movs	r0, r3
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	b004      	add	sp, #16
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8d8:	210f      	movs	r1, #15
 800f8da:	187b      	adds	r3, r7, r1
 800f8dc:	2200      	movs	r2, #0
 800f8de:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2225      	movs	r2, #37	@ 0x25
 800f8e4:	5c9b      	ldrb	r3, [r3, r2]
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	d006      	beq.n	800f8fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2204      	movs	r2, #4
 800f8f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f8f2:	187b      	adds	r3, r7, r1
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	701a      	strb	r2, [r3, #0]
 800f8f8:	e02a      	b.n	800f950 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	210e      	movs	r1, #14
 800f906:	438a      	bics	r2, r1
 800f908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2101      	movs	r1, #1
 800f916:	438a      	bics	r2, r1
 800f918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f91e:	221c      	movs	r2, #28
 800f920:	401a      	ands	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f926:	2101      	movs	r1, #1
 800f928:	4091      	lsls	r1, r2
 800f92a:	000a      	movs	r2, r1
 800f92c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2225      	movs	r2, #37	@ 0x25
 800f932:	2101      	movs	r1, #1
 800f934:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2224      	movs	r2, #36	@ 0x24
 800f93a:	2100      	movs	r1, #0
 800f93c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f942:	2b00      	cmp	r3, #0
 800f944:	d004      	beq.n	800f950 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	0010      	movs	r0, r2
 800f94e:	4798      	blx	r3
    }
  }
  return status;
 800f950:	230f      	movs	r3, #15
 800f952:	18fb      	adds	r3, r7, r3
 800f954:	781b      	ldrb	r3, [r3, #0]
}
 800f956:	0018      	movs	r0, r3
 800f958:	46bd      	mov	sp, r7
 800f95a:	b004      	add	sp, #16
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f97a:	221c      	movs	r2, #28
 800f97c:	4013      	ands	r3, r2
 800f97e:	2204      	movs	r2, #4
 800f980:	409a      	lsls	r2, r3
 800f982:	0013      	movs	r3, r2
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	4013      	ands	r3, r2
 800f988:	d026      	beq.n	800f9d8 <HAL_DMA_IRQHandler+0x7a>
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	2204      	movs	r2, #4
 800f98e:	4013      	ands	r3, r2
 800f990:	d022      	beq.n	800f9d8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2220      	movs	r2, #32
 800f99a:	4013      	ands	r3, r2
 800f99c:	d107      	bne.n	800f9ae <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2104      	movs	r1, #4
 800f9aa:	438a      	bics	r2, r1
 800f9ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9b2:	221c      	movs	r2, #28
 800f9b4:	401a      	ands	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ba:	2104      	movs	r1, #4
 800f9bc:	4091      	lsls	r1, r2
 800f9be:	000a      	movs	r2, r1
 800f9c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d100      	bne.n	800f9cc <HAL_DMA_IRQHandler+0x6e>
 800f9ca:	e071      	b.n	800fab0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	0010      	movs	r0, r2
 800f9d4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f9d6:	e06b      	b.n	800fab0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9dc:	221c      	movs	r2, #28
 800f9de:	4013      	ands	r3, r2
 800f9e0:	2202      	movs	r2, #2
 800f9e2:	409a      	lsls	r2, r3
 800f9e4:	0013      	movs	r3, r2
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	d02d      	beq.n	800fa48 <HAL_DMA_IRQHandler+0xea>
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2202      	movs	r2, #2
 800f9f0:	4013      	ands	r3, r2
 800f9f2:	d029      	beq.n	800fa48 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2220      	movs	r2, #32
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	d10b      	bne.n	800fa18 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	210a      	movs	r1, #10
 800fa0c:	438a      	bics	r2, r1
 800fa0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2225      	movs	r2, #37	@ 0x25
 800fa14:	2101      	movs	r1, #1
 800fa16:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa1c:	221c      	movs	r2, #28
 800fa1e:	401a      	ands	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa24:	2102      	movs	r1, #2
 800fa26:	4091      	lsls	r1, r2
 800fa28:	000a      	movs	r2, r1
 800fa2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2224      	movs	r2, #36	@ 0x24
 800fa30:	2100      	movs	r1, #0
 800fa32:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d039      	beq.n	800fab0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	0010      	movs	r0, r2
 800fa44:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800fa46:	e033      	b.n	800fab0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa4c:	221c      	movs	r2, #28
 800fa4e:	4013      	ands	r3, r2
 800fa50:	2208      	movs	r2, #8
 800fa52:	409a      	lsls	r2, r3
 800fa54:	0013      	movs	r3, r2
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	4013      	ands	r3, r2
 800fa5a:	d02a      	beq.n	800fab2 <HAL_DMA_IRQHandler+0x154>
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2208      	movs	r2, #8
 800fa60:	4013      	ands	r3, r2
 800fa62:	d026      	beq.n	800fab2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	210e      	movs	r1, #14
 800fa70:	438a      	bics	r2, r1
 800fa72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa78:	221c      	movs	r2, #28
 800fa7a:	401a      	ands	r2, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa80:	2101      	movs	r1, #1
 800fa82:	4091      	lsls	r1, r2
 800fa84:	000a      	movs	r2, r1
 800fa86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2225      	movs	r2, #37	@ 0x25
 800fa92:	2101      	movs	r1, #1
 800fa94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2224      	movs	r2, #36	@ 0x24
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d005      	beq.n	800fab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faaa:	687a      	ldr	r2, [r7, #4]
 800faac:	0010      	movs	r0, r2
 800faae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fab0:	46c0      	nop			@ (mov r8, r8)
 800fab2:	46c0      	nop			@ (mov r8, r8)
}
 800fab4:	46bd      	mov	sp, r7
 800fab6:	b004      	add	sp, #16
 800fab8:	bd80      	pop	{r7, pc}

0800faba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b082      	sub	sp, #8
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2225      	movs	r2, #37	@ 0x25
 800fac6:	5c9b      	ldrb	r3, [r3, r2]
 800fac8:	b2db      	uxtb	r3, r3
}
 800faca:	0018      	movs	r0, r3
 800facc:	46bd      	mov	sp, r7
 800face:	b002      	add	sp, #8
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b084      	sub	sp, #16
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	60f8      	str	r0, [r7, #12]
 800fada:	60b9      	str	r1, [r7, #8]
 800fadc:	607a      	str	r2, [r7, #4]
 800fade:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fae4:	221c      	movs	r2, #28
 800fae6:	401a      	ands	r2, r3
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faec:	2101      	movs	r1, #1
 800faee:	4091      	lsls	r1, r2
 800faf0:	000a      	movs	r2, r1
 800faf2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	683a      	ldr	r2, [r7, #0]
 800fafa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	2b10      	cmp	r3, #16
 800fb02:	d108      	bne.n	800fb16 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	68ba      	ldr	r2, [r7, #8]
 800fb12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fb14:	e007      	b.n	800fb26 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	60da      	str	r2, [r3, #12]
}
 800fb26:	46c0      	nop			@ (mov r8, r8)
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	b004      	add	sp, #16
 800fb2c:	bd80      	pop	{r7, pc}
	...

0800fb30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fb38:	f7ff f8d2 	bl	800ece0 <HAL_GetTick>
 800fb3c:	0003      	movs	r3, r0
 800fb3e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fb40:	e00f      	b.n	800fb62 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	3301      	adds	r3, #1
 800fb46:	d00c      	beq.n	800fb62 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d007      	beq.n	800fb5e <FLASH_WaitForLastOperation+0x2e>
 800fb4e:	f7ff f8c7 	bl	800ece0 <HAL_GetTick>
 800fb52:	0002      	movs	r2, r0
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d201      	bcs.n	800fb62 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	e052      	b.n	800fc08 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fb62:	4b2b      	ldr	r3, [pc, #172]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fb64:	699b      	ldr	r3, [r3, #24]
 800fb66:	2201      	movs	r2, #1
 800fb68:	4013      	ands	r3, r2
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d0e9      	beq.n	800fb42 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fb6e:	4b28      	ldr	r3, [pc, #160]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	2202      	movs	r2, #2
 800fb74:	4013      	ands	r3, r2
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d102      	bne.n	800fb80 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fb7a:	4b25      	ldr	r3, [pc, #148]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fb7c:	2202      	movs	r2, #2
 800fb7e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fb80:	4b23      	ldr	r3, [pc, #140]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fb82:	699a      	ldr	r2, [r3, #24]
 800fb84:	2380      	movs	r3, #128	@ 0x80
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	401a      	ands	r2, r3
 800fb8a:	2380      	movs	r3, #128	@ 0x80
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d035      	beq.n	800fbfe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fb92:	4b1f      	ldr	r3, [pc, #124]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fb94:	699a      	ldr	r2, [r3, #24]
 800fb96:	2380      	movs	r3, #128	@ 0x80
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fb9c:	2380      	movs	r3, #128	@ 0x80
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d02c      	beq.n	800fbfe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fba4:	4b1a      	ldr	r3, [pc, #104]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fba6:	699a      	ldr	r2, [r3, #24]
 800fba8:	2380      	movs	r3, #128	@ 0x80
 800fbaa:	00db      	lsls	r3, r3, #3
 800fbac:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fbae:	2380      	movs	r3, #128	@ 0x80
 800fbb0:	00db      	lsls	r3, r3, #3
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d023      	beq.n	800fbfe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fbb6:	4b16      	ldr	r3, [pc, #88]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fbb8:	699a      	ldr	r2, [r3, #24]
 800fbba:	2380      	movs	r3, #128	@ 0x80
 800fbbc:	011b      	lsls	r3, r3, #4
 800fbbe:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fbc0:	2380      	movs	r3, #128	@ 0x80
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d01a      	beq.n	800fbfe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fbc8:	4b11      	ldr	r3, [pc, #68]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fbca:	699a      	ldr	r2, [r3, #24]
 800fbcc:	2380      	movs	r3, #128	@ 0x80
 800fbce:	019b      	lsls	r3, r3, #6
 800fbd0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fbd2:	2380      	movs	r3, #128	@ 0x80
 800fbd4:	019b      	lsls	r3, r3, #6
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d011      	beq.n	800fbfe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fbda:	4b0d      	ldr	r3, [pc, #52]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fbdc:	699a      	ldr	r2, [r3, #24]
 800fbde:	2380      	movs	r3, #128	@ 0x80
 800fbe0:	029b      	lsls	r3, r3, #10
 800fbe2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fbe4:	2380      	movs	r3, #128	@ 0x80
 800fbe6:	029b      	lsls	r3, r3, #10
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d008      	beq.n	800fbfe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fbec:	4b08      	ldr	r3, [pc, #32]	@ (800fc10 <FLASH_WaitForLastOperation+0xe0>)
 800fbee:	699a      	ldr	r2, [r3, #24]
 800fbf0:	2380      	movs	r3, #128	@ 0x80
 800fbf2:	025b      	lsls	r3, r3, #9
 800fbf4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fbf6:	2380      	movs	r3, #128	@ 0x80
 800fbf8:	025b      	lsls	r3, r3, #9
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d103      	bne.n	800fc06 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fbfe:	f000 f809 	bl	800fc14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	e000      	b.n	800fc08 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	0018      	movs	r0, r3
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	b004      	add	sp, #16
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	40022000 	.word	0x40022000

0800fc14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fc1e:	4b49      	ldr	r3, [pc, #292]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fc20:	699a      	ldr	r2, [r3, #24]
 800fc22:	2380      	movs	r3, #128	@ 0x80
 800fc24:	005b      	lsls	r3, r3, #1
 800fc26:	401a      	ands	r2, r3
 800fc28:	2380      	movs	r3, #128	@ 0x80
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d10a      	bne.n	800fc46 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fc30:	4b45      	ldr	r3, [pc, #276]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	2202      	movs	r2, #2
 800fc36:	431a      	orrs	r2, r3
 800fc38:	4b43      	ldr	r3, [pc, #268]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fc3a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2280      	movs	r2, #128	@ 0x80
 800fc40:	0052      	lsls	r2, r2, #1
 800fc42:	4313      	orrs	r3, r2
 800fc44:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fc46:	4b3f      	ldr	r3, [pc, #252]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fc48:	699a      	ldr	r2, [r3, #24]
 800fc4a:	2380      	movs	r3, #128	@ 0x80
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	401a      	ands	r2, r3
 800fc50:	2380      	movs	r3, #128	@ 0x80
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d10a      	bne.n	800fc6e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fc58:	4b3b      	ldr	r3, [pc, #236]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	431a      	orrs	r2, r3
 800fc60:	4b39      	ldr	r3, [pc, #228]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fc62:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2280      	movs	r2, #128	@ 0x80
 800fc68:	0092      	lsls	r2, r2, #2
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fc6e:	4b35      	ldr	r3, [pc, #212]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fc70:	699a      	ldr	r2, [r3, #24]
 800fc72:	2380      	movs	r3, #128	@ 0x80
 800fc74:	00db      	lsls	r3, r3, #3
 800fc76:	401a      	ands	r2, r3
 800fc78:	2380      	movs	r3, #128	@ 0x80
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d10a      	bne.n	800fc96 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fc80:	4b31      	ldr	r3, [pc, #196]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fc82:	695b      	ldr	r3, [r3, #20]
 800fc84:	2208      	movs	r2, #8
 800fc86:	431a      	orrs	r2, r3
 800fc88:	4b2f      	ldr	r3, [pc, #188]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fc8a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2280      	movs	r2, #128	@ 0x80
 800fc90:	00d2      	lsls	r2, r2, #3
 800fc92:	4313      	orrs	r3, r2
 800fc94:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fc96:	4b2b      	ldr	r3, [pc, #172]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fc98:	699a      	ldr	r2, [r3, #24]
 800fc9a:	2380      	movs	r3, #128	@ 0x80
 800fc9c:	011b      	lsls	r3, r3, #4
 800fc9e:	401a      	ands	r2, r3
 800fca0:	2380      	movs	r3, #128	@ 0x80
 800fca2:	011b      	lsls	r3, r3, #4
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d10a      	bne.n	800fcbe <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fca8:	4b27      	ldr	r3, [pc, #156]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fcaa:	695b      	ldr	r3, [r3, #20]
 800fcac:	2204      	movs	r2, #4
 800fcae:	431a      	orrs	r2, r3
 800fcb0:	4b25      	ldr	r3, [pc, #148]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fcb2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2280      	movs	r2, #128	@ 0x80
 800fcb8:	0112      	lsls	r2, r2, #4
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fcbe:	4b21      	ldr	r3, [pc, #132]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fcc0:	699a      	ldr	r2, [r3, #24]
 800fcc2:	2380      	movs	r3, #128	@ 0x80
 800fcc4:	019b      	lsls	r3, r3, #6
 800fcc6:	401a      	ands	r2, r3
 800fcc8:	2380      	movs	r3, #128	@ 0x80
 800fcca:	019b      	lsls	r3, r3, #6
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d10a      	bne.n	800fce6 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fcd0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fcd2:	695b      	ldr	r3, [r3, #20]
 800fcd4:	2210      	movs	r2, #16
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	4b1b      	ldr	r3, [pc, #108]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fcda:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2280      	movs	r2, #128	@ 0x80
 800fce0:	0192      	lsls	r2, r2, #6
 800fce2:	4313      	orrs	r3, r2
 800fce4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fce6:	4b17      	ldr	r3, [pc, #92]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fce8:	699a      	ldr	r2, [r3, #24]
 800fcea:	2380      	movs	r3, #128	@ 0x80
 800fcec:	029b      	lsls	r3, r3, #10
 800fcee:	401a      	ands	r2, r3
 800fcf0:	2380      	movs	r3, #128	@ 0x80
 800fcf2:	029b      	lsls	r3, r3, #10
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d109      	bne.n	800fd0c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fcf8:	4b13      	ldr	r3, [pc, #76]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	2220      	movs	r2, #32
 800fcfe:	431a      	orrs	r2, r3
 800fd00:	4b11      	ldr	r3, [pc, #68]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fd02:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2220      	movs	r2, #32
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fd0c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fd0e:	699a      	ldr	r2, [r3, #24]
 800fd10:	2380      	movs	r3, #128	@ 0x80
 800fd12:	025b      	lsls	r3, r3, #9
 800fd14:	401a      	ands	r2, r3
 800fd16:	2380      	movs	r3, #128	@ 0x80
 800fd18:	025b      	lsls	r3, r3, #9
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d10a      	bne.n	800fd34 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fd1e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fd20:	695b      	ldr	r3, [r3, #20]
 800fd22:	2240      	movs	r2, #64	@ 0x40
 800fd24:	431a      	orrs	r2, r3
 800fd26:	4b08      	ldr	r3, [pc, #32]	@ (800fd48 <FLASH_SetErrorCode+0x134>)
 800fd28:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2280      	movs	r2, #128	@ 0x80
 800fd2e:	0252      	lsls	r2, r2, #9
 800fd30:	4313      	orrs	r3, r2
 800fd32:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fd34:	4b03      	ldr	r3, [pc, #12]	@ (800fd44 <FLASH_SetErrorCode+0x130>)
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	619a      	str	r2, [r3, #24]
}  
 800fd3a:	46c0      	nop			@ (mov r8, r8)
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	b002      	add	sp, #8
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	46c0      	nop			@ (mov r8, r8)
 800fd44:	40022000 	.word	0x40022000
 800fd48:	200023b0 	.word	0x200023b0

0800fd4c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fd52:	4b12      	ldr	r3, [pc, #72]	@ (800fd9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	2201      	movs	r2, #1
 800fd58:	4013      	ands	r3, r2
 800fd5a:	d019      	beq.n	800fd90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd5c:	f3ef 8310 	mrs	r3, PRIMASK
 800fd60:	607b      	str	r3, [r7, #4]
  return(result);
 800fd62:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800fd64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd66:	b672      	cpsid	i
}
 800fd68:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800fd6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fd9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd6c:	4a0c      	ldr	r2, [pc, #48]	@ (800fda0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800fd6e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800fd70:	4b0a      	ldr	r3, [pc, #40]	@ (800fd9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd72:	4a0c      	ldr	r2, [pc, #48]	@ (800fda4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800fd74:	60da      	str	r2, [r3, #12]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	f383 8810 	msr	PRIMASK, r3
}
 800fd80:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fd82:	4b06      	ldr	r3, [pc, #24]	@ (800fd9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	4013      	ands	r3, r2
 800fd8a:	d001      	beq.n	800fd90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e000      	b.n	800fd92 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	0018      	movs	r0, r3
 800fd94:	46bd      	mov	sp, r7
 800fd96:	b004      	add	sp, #16
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	46c0      	nop			@ (mov r8, r8)
 800fd9c:	40022000 	.word	0x40022000
 800fda0:	89abcdef 	.word	0x89abcdef
 800fda4:	02030405 	.word	0x02030405

0800fda8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800fdac:	4b04      	ldr	r3, [pc, #16]	@ (800fdc0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fdae:	685a      	ldr	r2, [r3, #4]
 800fdb0:	4b03      	ldr	r3, [pc, #12]	@ (800fdc0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	430a      	orrs	r2, r1
 800fdb6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	0018      	movs	r0, r3
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	40022000 	.word	0x40022000

0800fdc4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800fdc4:	b5b0      	push	{r4, r5, r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdcc:	250f      	movs	r5, #15
 800fdce:	197b      	adds	r3, r7, r5
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fdd4:	197c      	adds	r4, r7, r5
 800fdd6:	4b0f      	ldr	r3, [pc, #60]	@ (800fe14 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fdd8:	0018      	movs	r0, r3
 800fdda:	f7ff fea9 	bl	800fb30 <FLASH_WaitForLastOperation>
 800fdde:	0003      	movs	r3, r0
 800fde0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fde2:	0029      	movs	r1, r5
 800fde4:	187b      	adds	r3, r7, r1
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10c      	bne.n	800fe06 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fdec:	4b0a      	ldr	r3, [pc, #40]	@ (800fe18 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fdf8:	187c      	adds	r4, r7, r1
 800fdfa:	4b06      	ldr	r3, [pc, #24]	@ (800fe14 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f7ff fe97 	bl	800fb30 <FLASH_WaitForLastOperation>
 800fe02:	0003      	movs	r3, r0
 800fe04:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800fe06:	230f      	movs	r3, #15
 800fe08:	18fb      	adds	r3, r7, r3
 800fe0a:	781b      	ldrb	r3, [r3, #0]
}  
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	b004      	add	sp, #16
 800fe12:	bdb0      	pop	{r4, r5, r7, pc}
 800fe14:	0000c350 	.word	0x0000c350
 800fe18:	200023b0 	.word	0x200023b0

0800fe1c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800fe1c:	b5b0      	push	{r4, r5, r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe28:	2317      	movs	r3, #23
 800fe2a:	18fb      	adds	r3, r7, r3
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fe30:	4b24      	ldr	r3, [pc, #144]	@ (800fec4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe32:	7c1b      	ldrb	r3, [r3, #16]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d101      	bne.n	800fe3c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fe38:	2302      	movs	r3, #2
 800fe3a:	e03e      	b.n	800feba <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fe3c:	4b21      	ldr	r3, [pc, #132]	@ (800fec4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe3e:	2201      	movs	r2, #1
 800fe40:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe42:	2517      	movs	r5, #23
 800fe44:	197c      	adds	r4, r7, r5
 800fe46:	4b20      	ldr	r3, [pc, #128]	@ (800fec8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fe48:	0018      	movs	r0, r3
 800fe4a:	f7ff fe71 	bl	800fb30 <FLASH_WaitForLastOperation>
 800fe4e:	0003      	movs	r3, r0
 800fe50:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fe52:	197b      	adds	r3, r7, r5
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d129      	bne.n	800feae <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fe5a:	4b1a      	ldr	r3, [pc, #104]	@ (800fec4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	d103      	bne.n	800fe6e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	e013      	b.n	800fe96 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d104      	bne.n	800fe7e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	b292      	uxth	r2, r2
 800fe7a:	801a      	strh	r2, [r3, #0]
 800fe7c:	e00b      	b.n	800fe96 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d104      	bne.n	800fe8e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	b2d2      	uxtb	r2, r2
 800fe8a:	701a      	strb	r2, [r3, #0]
 800fe8c:	e003      	b.n	800fe96 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800fe8e:	2317      	movs	r3, #23
 800fe90:	18fb      	adds	r3, r7, r3
 800fe92:	2201      	movs	r2, #1
 800fe94:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800fe96:	2217      	movs	r2, #23
 800fe98:	18bb      	adds	r3, r7, r2
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d106      	bne.n	800feae <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fea0:	18bc      	adds	r4, r7, r2
 800fea2:	4b09      	ldr	r3, [pc, #36]	@ (800fec8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fea4:	0018      	movs	r0, r3
 800fea6:	f7ff fe43 	bl	800fb30 <FLASH_WaitForLastOperation>
 800feaa:	0003      	movs	r3, r0
 800feac:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800feae:	4b05      	ldr	r3, [pc, #20]	@ (800fec4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	741a      	strb	r2, [r3, #16]

  return status;
 800feb4:	2317      	movs	r3, #23
 800feb6:	18fb      	adds	r3, r7, r3
 800feb8:	781b      	ldrb	r3, [r3, #0]
}
 800feba:	0018      	movs	r0, r3
 800febc:	46bd      	mov	sp, r7
 800febe:	b006      	add	sp, #24
 800fec0:	bdb0      	pop	{r4, r5, r7, pc}
 800fec2:	46c0      	nop			@ (mov r8, r8)
 800fec4:	200023b0 	.word	0x200023b0
 800fec8:	0000c350 	.word	0x0000c350

0800fecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800fed6:	2300      	movs	r3, #0
 800fed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800feda:	2300      	movs	r3, #0
 800fedc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800fede:	2300      	movs	r3, #0
 800fee0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800fee2:	e155      	b.n	8010190 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2101      	movs	r1, #1
 800feea:	697a      	ldr	r2, [r7, #20]
 800feec:	4091      	lsls	r1, r2
 800feee:	000a      	movs	r2, r1
 800fef0:	4013      	ands	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d100      	bne.n	800fefc <HAL_GPIO_Init+0x30>
 800fefa:	e146      	b.n	801018a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	2203      	movs	r2, #3
 800ff02:	4013      	ands	r3, r2
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d005      	beq.n	800ff14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	2203      	movs	r2, #3
 800ff0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	d130      	bne.n	800ff76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	2203      	movs	r2, #3
 800ff20:	409a      	lsls	r2, r3
 800ff22:	0013      	movs	r3, r2
 800ff24:	43da      	mvns	r2, r3
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	4013      	ands	r3, r2
 800ff2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	68da      	ldr	r2, [r3, #12]
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	409a      	lsls	r2, r3
 800ff36:	0013      	movs	r3, r2
 800ff38:	693a      	ldr	r2, [r7, #16]
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	409a      	lsls	r2, r3
 800ff50:	0013      	movs	r3, r2
 800ff52:	43da      	mvns	r2, r3
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	4013      	ands	r3, r2
 800ff58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	091b      	lsrs	r3, r3, #4
 800ff60:	2201      	movs	r2, #1
 800ff62:	401a      	ands	r2, r3
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	409a      	lsls	r2, r3
 800ff68:	0013      	movs	r3, r2
 800ff6a:	693a      	ldr	r2, [r7, #16]
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	693a      	ldr	r2, [r7, #16]
 800ff74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	2203      	movs	r2, #3
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	2b03      	cmp	r3, #3
 800ff80:	d017      	beq.n	800ffb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	2203      	movs	r2, #3
 800ff8e:	409a      	lsls	r2, r3
 800ff90:	0013      	movs	r3, r2
 800ff92:	43da      	mvns	r2, r3
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	4013      	ands	r3, r2
 800ff98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	689a      	ldr	r2, [r3, #8]
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	005b      	lsls	r3, r3, #1
 800ffa2:	409a      	lsls	r2, r3
 800ffa4:	0013      	movs	r3, r2
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	2203      	movs	r2, #3
 800ffb8:	4013      	ands	r3, r2
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d123      	bne.n	8010006 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	08da      	lsrs	r2, r3, #3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	3208      	adds	r2, #8
 800ffc6:	0092      	lsls	r2, r2, #2
 800ffc8:	58d3      	ldr	r3, [r2, r3]
 800ffca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	2207      	movs	r2, #7
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	220f      	movs	r2, #15
 800ffd6:	409a      	lsls	r2, r3
 800ffd8:	0013      	movs	r3, r2
 800ffda:	43da      	mvns	r2, r3
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	4013      	ands	r3, r2
 800ffe0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	691a      	ldr	r2, [r3, #16]
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2107      	movs	r1, #7
 800ffea:	400b      	ands	r3, r1
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	409a      	lsls	r2, r3
 800fff0:	0013      	movs	r3, r2
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	4313      	orrs	r3, r2
 800fff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	08da      	lsrs	r2, r3, #3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3208      	adds	r2, #8
 8010000:	0092      	lsls	r2, r2, #2
 8010002:	6939      	ldr	r1, [r7, #16]
 8010004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	2203      	movs	r2, #3
 8010012:	409a      	lsls	r2, r3
 8010014:	0013      	movs	r3, r2
 8010016:	43da      	mvns	r2, r3
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	4013      	ands	r3, r2
 801001c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	2203      	movs	r2, #3
 8010024:	401a      	ands	r2, r3
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	409a      	lsls	r2, r3
 801002c:	0013      	movs	r3, r2
 801002e:	693a      	ldr	r2, [r7, #16]
 8010030:	4313      	orrs	r3, r2
 8010032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	693a      	ldr	r2, [r7, #16]
 8010038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	685a      	ldr	r2, [r3, #4]
 801003e:	23c0      	movs	r3, #192	@ 0xc0
 8010040:	029b      	lsls	r3, r3, #10
 8010042:	4013      	ands	r3, r2
 8010044:	d100      	bne.n	8010048 <HAL_GPIO_Init+0x17c>
 8010046:	e0a0      	b.n	801018a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010048:	4b57      	ldr	r3, [pc, #348]	@ (80101a8 <HAL_GPIO_Init+0x2dc>)
 801004a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801004c:	4b56      	ldr	r3, [pc, #344]	@ (80101a8 <HAL_GPIO_Init+0x2dc>)
 801004e:	2101      	movs	r1, #1
 8010050:	430a      	orrs	r2, r1
 8010052:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010054:	4a55      	ldr	r2, [pc, #340]	@ (80101ac <HAL_GPIO_Init+0x2e0>)
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	089b      	lsrs	r3, r3, #2
 801005a:	3302      	adds	r3, #2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	589b      	ldr	r3, [r3, r2]
 8010060:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	2203      	movs	r2, #3
 8010066:	4013      	ands	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	220f      	movs	r2, #15
 801006c:	409a      	lsls	r2, r3
 801006e:	0013      	movs	r3, r2
 8010070:	43da      	mvns	r2, r3
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	4013      	ands	r3, r2
 8010076:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	23a0      	movs	r3, #160	@ 0xa0
 801007c:	05db      	lsls	r3, r3, #23
 801007e:	429a      	cmp	r2, r3
 8010080:	d01f      	beq.n	80100c2 <HAL_GPIO_Init+0x1f6>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a4a      	ldr	r2, [pc, #296]	@ (80101b0 <HAL_GPIO_Init+0x2e4>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d019      	beq.n	80100be <HAL_GPIO_Init+0x1f2>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a49      	ldr	r2, [pc, #292]	@ (80101b4 <HAL_GPIO_Init+0x2e8>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d013      	beq.n	80100ba <HAL_GPIO_Init+0x1ee>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a48      	ldr	r2, [pc, #288]	@ (80101b8 <HAL_GPIO_Init+0x2ec>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d00d      	beq.n	80100b6 <HAL_GPIO_Init+0x1ea>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a47      	ldr	r2, [pc, #284]	@ (80101bc <HAL_GPIO_Init+0x2f0>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d007      	beq.n	80100b2 <HAL_GPIO_Init+0x1e6>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a46      	ldr	r2, [pc, #280]	@ (80101c0 <HAL_GPIO_Init+0x2f4>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d101      	bne.n	80100ae <HAL_GPIO_Init+0x1e2>
 80100aa:	2305      	movs	r3, #5
 80100ac:	e00a      	b.n	80100c4 <HAL_GPIO_Init+0x1f8>
 80100ae:	2306      	movs	r3, #6
 80100b0:	e008      	b.n	80100c4 <HAL_GPIO_Init+0x1f8>
 80100b2:	2304      	movs	r3, #4
 80100b4:	e006      	b.n	80100c4 <HAL_GPIO_Init+0x1f8>
 80100b6:	2303      	movs	r3, #3
 80100b8:	e004      	b.n	80100c4 <HAL_GPIO_Init+0x1f8>
 80100ba:	2302      	movs	r3, #2
 80100bc:	e002      	b.n	80100c4 <HAL_GPIO_Init+0x1f8>
 80100be:	2301      	movs	r3, #1
 80100c0:	e000      	b.n	80100c4 <HAL_GPIO_Init+0x1f8>
 80100c2:	2300      	movs	r3, #0
 80100c4:	697a      	ldr	r2, [r7, #20]
 80100c6:	2103      	movs	r1, #3
 80100c8:	400a      	ands	r2, r1
 80100ca:	0092      	lsls	r2, r2, #2
 80100cc:	4093      	lsls	r3, r2
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80100d4:	4935      	ldr	r1, [pc, #212]	@ (80101ac <HAL_GPIO_Init+0x2e0>)
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	089b      	lsrs	r3, r3, #2
 80100da:	3302      	adds	r3, #2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	693a      	ldr	r2, [r7, #16]
 80100e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80100e2:	4b38      	ldr	r3, [pc, #224]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	43da      	mvns	r2, r3
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	4013      	ands	r3, r2
 80100f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	685a      	ldr	r2, [r3, #4]
 80100f6:	2380      	movs	r3, #128	@ 0x80
 80100f8:	035b      	lsls	r3, r3, #13
 80100fa:	4013      	ands	r3, r2
 80100fc:	d003      	beq.n	8010106 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80100fe:	693a      	ldr	r2, [r7, #16]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	4313      	orrs	r3, r2
 8010104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010106:	4b2f      	ldr	r3, [pc, #188]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 8010108:	693a      	ldr	r2, [r7, #16]
 801010a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 801010c:	4b2d      	ldr	r3, [pc, #180]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	43da      	mvns	r2, r3
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	4013      	ands	r3, r2
 801011a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	685a      	ldr	r2, [r3, #4]
 8010120:	2380      	movs	r3, #128	@ 0x80
 8010122:	039b      	lsls	r3, r3, #14
 8010124:	4013      	ands	r3, r2
 8010126:	d003      	beq.n	8010130 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	4313      	orrs	r3, r2
 801012e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010130:	4b24      	ldr	r3, [pc, #144]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 8010132:	693a      	ldr	r2, [r7, #16]
 8010134:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8010136:	4b23      	ldr	r3, [pc, #140]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	43da      	mvns	r2, r3
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	4013      	ands	r3, r2
 8010144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	2380      	movs	r3, #128	@ 0x80
 801014c:	029b      	lsls	r3, r3, #10
 801014e:	4013      	ands	r3, r2
 8010150:	d003      	beq.n	801015a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4313      	orrs	r3, r2
 8010158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801015a:	4b1a      	ldr	r3, [pc, #104]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 801015c:	693a      	ldr	r2, [r7, #16]
 801015e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010160:	4b18      	ldr	r3, [pc, #96]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	43da      	mvns	r2, r3
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	4013      	ands	r3, r2
 801016e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	685a      	ldr	r2, [r3, #4]
 8010174:	2380      	movs	r3, #128	@ 0x80
 8010176:	025b      	lsls	r3, r3, #9
 8010178:	4013      	ands	r3, r2
 801017a:	d003      	beq.n	8010184 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 801017c:	693a      	ldr	r2, [r7, #16]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	4313      	orrs	r3, r2
 8010182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010184:	4b0f      	ldr	r3, [pc, #60]	@ (80101c4 <HAL_GPIO_Init+0x2f8>)
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	3301      	adds	r3, #1
 801018e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	40da      	lsrs	r2, r3
 8010198:	1e13      	subs	r3, r2, #0
 801019a:	d000      	beq.n	801019e <HAL_GPIO_Init+0x2d2>
 801019c:	e6a2      	b.n	800fee4 <HAL_GPIO_Init+0x18>
  }
}
 801019e:	46c0      	nop			@ (mov r8, r8)
 80101a0:	46c0      	nop			@ (mov r8, r8)
 80101a2:	46bd      	mov	sp, r7
 80101a4:	b006      	add	sp, #24
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	40021000 	.word	0x40021000
 80101ac:	40010000 	.word	0x40010000
 80101b0:	50000400 	.word	0x50000400
 80101b4:	50000800 	.word	0x50000800
 80101b8:	50000c00 	.word	0x50000c00
 80101bc:	50001000 	.word	0x50001000
 80101c0:	50001c00 	.word	0x50001c00
 80101c4:	40010400 	.word	0x40010400

080101c8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	000a      	movs	r2, r1
 80101d2:	1cbb      	adds	r3, r7, #2
 80101d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	1cba      	adds	r2, r7, #2
 80101dc:	8812      	ldrh	r2, [r2, #0]
 80101de:	4013      	ands	r3, r2
 80101e0:	d004      	beq.n	80101ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80101e2:	230f      	movs	r3, #15
 80101e4:	18fb      	adds	r3, r7, r3
 80101e6:	2201      	movs	r2, #1
 80101e8:	701a      	strb	r2, [r3, #0]
 80101ea:	e003      	b.n	80101f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80101ec:	230f      	movs	r3, #15
 80101ee:	18fb      	adds	r3, r7, r3
 80101f0:	2200      	movs	r2, #0
 80101f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80101f4:	230f      	movs	r3, #15
 80101f6:	18fb      	adds	r3, r7, r3
 80101f8:	781b      	ldrb	r3, [r3, #0]
}
 80101fa:	0018      	movs	r0, r3
 80101fc:	46bd      	mov	sp, r7
 80101fe:	b004      	add	sp, #16
 8010200:	bd80      	pop	{r7, pc}

08010202 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b082      	sub	sp, #8
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
 801020a:	0008      	movs	r0, r1
 801020c:	0011      	movs	r1, r2
 801020e:	1cbb      	adds	r3, r7, #2
 8010210:	1c02      	adds	r2, r0, #0
 8010212:	801a      	strh	r2, [r3, #0]
 8010214:	1c7b      	adds	r3, r7, #1
 8010216:	1c0a      	adds	r2, r1, #0
 8010218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801021a:	1c7b      	adds	r3, r7, #1
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d004      	beq.n	801022c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010222:	1cbb      	adds	r3, r7, #2
 8010224:	881a      	ldrh	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801022a:	e003      	b.n	8010234 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 801022c:	1cbb      	adds	r3, r7, #2
 801022e:	881a      	ldrh	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010234:	46c0      	nop			@ (mov r8, r8)
 8010236:	46bd      	mov	sp, r7
 8010238:	b002      	add	sp, #8
 801023a:	bd80      	pop	{r7, pc}

0801023c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	0002      	movs	r2, r0
 8010244:	1dbb      	adds	r3, r7, #6
 8010246:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010248:	4b09      	ldr	r3, [pc, #36]	@ (8010270 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801024a:	695b      	ldr	r3, [r3, #20]
 801024c:	1dba      	adds	r2, r7, #6
 801024e:	8812      	ldrh	r2, [r2, #0]
 8010250:	4013      	ands	r3, r2
 8010252:	d008      	beq.n	8010266 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010254:	4b06      	ldr	r3, [pc, #24]	@ (8010270 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010256:	1dba      	adds	r2, r7, #6
 8010258:	8812      	ldrh	r2, [r2, #0]
 801025a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801025c:	1dbb      	adds	r3, r7, #6
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	0018      	movs	r0, r3
 8010262:	f7f8 f82f 	bl	80082c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8010266:	46c0      	nop			@ (mov r8, r8)
 8010268:	46bd      	mov	sp, r7
 801026a:	b002      	add	sp, #8
 801026c:	bd80      	pop	{r7, pc}
 801026e:	46c0      	nop			@ (mov r8, r8)
 8010270:	40010400 	.word	0x40010400

08010274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d101      	bne.n	8010286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010282:	2301      	movs	r3, #1
 8010284:	e082      	b.n	801038c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2241      	movs	r2, #65	@ 0x41
 801028a:	5c9b      	ldrb	r3, [r3, r2]
 801028c:	b2db      	uxtb	r3, r3
 801028e:	2b00      	cmp	r3, #0
 8010290:	d107      	bne.n	80102a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2240      	movs	r2, #64	@ 0x40
 8010296:	2100      	movs	r1, #0
 8010298:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	0018      	movs	r0, r3
 801029e:	f7f7 fb07 	bl	80078b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2241      	movs	r2, #65	@ 0x41
 80102a6:	2124      	movs	r1, #36	@ 0x24
 80102a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	2101      	movs	r1, #1
 80102b6:	438a      	bics	r2, r1
 80102b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	685a      	ldr	r2, [r3, #4]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	4934      	ldr	r1, [pc, #208]	@ (8010394 <HAL_I2C_Init+0x120>)
 80102c4:	400a      	ands	r2, r1
 80102c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	689a      	ldr	r2, [r3, #8]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4931      	ldr	r1, [pc, #196]	@ (8010398 <HAL_I2C_Init+0x124>)
 80102d4:	400a      	ands	r2, r1
 80102d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d108      	bne.n	80102f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	689a      	ldr	r2, [r3, #8]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2180      	movs	r1, #128	@ 0x80
 80102ea:	0209      	lsls	r1, r1, #8
 80102ec:	430a      	orrs	r2, r1
 80102ee:	609a      	str	r2, [r3, #8]
 80102f0:	e007      	b.n	8010302 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	689a      	ldr	r2, [r3, #8]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2184      	movs	r1, #132	@ 0x84
 80102fc:	0209      	lsls	r1, r1, #8
 80102fe:	430a      	orrs	r2, r1
 8010300:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	2b02      	cmp	r3, #2
 8010308:	d104      	bne.n	8010314 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2280      	movs	r2, #128	@ 0x80
 8010310:	0112      	lsls	r2, r2, #4
 8010312:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	685a      	ldr	r2, [r3, #4]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	491f      	ldr	r1, [pc, #124]	@ (801039c <HAL_I2C_Init+0x128>)
 8010320:	430a      	orrs	r2, r1
 8010322:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	68da      	ldr	r2, [r3, #12]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	491a      	ldr	r1, [pc, #104]	@ (8010398 <HAL_I2C_Init+0x124>)
 8010330:	400a      	ands	r2, r1
 8010332:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	691a      	ldr	r2, [r3, #16]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	695b      	ldr	r3, [r3, #20]
 801033c:	431a      	orrs	r2, r3
 801033e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	699b      	ldr	r3, [r3, #24]
 8010344:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	430a      	orrs	r2, r1
 801034c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	69d9      	ldr	r1, [r3, #28]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6a1a      	ldr	r2, [r3, #32]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	430a      	orrs	r2, r1
 801035c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2101      	movs	r1, #1
 801036a:	430a      	orrs	r2, r1
 801036c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2241      	movs	r2, #65	@ 0x41
 8010378:	2120      	movs	r1, #32
 801037a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2242      	movs	r2, #66	@ 0x42
 8010386:	2100      	movs	r1, #0
 8010388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801038a:	2300      	movs	r3, #0
}
 801038c:	0018      	movs	r0, r3
 801038e:	46bd      	mov	sp, r7
 8010390:	b002      	add	sp, #8
 8010392:	bd80      	pop	{r7, pc}
 8010394:	f0ffffff 	.word	0xf0ffffff
 8010398:	ffff7fff 	.word	0xffff7fff
 801039c:	02008000 	.word	0x02008000

080103a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80103a0:	b590      	push	{r4, r7, lr}
 80103a2:	b089      	sub	sp, #36	@ 0x24
 80103a4:	af02      	add	r7, sp, #8
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	0008      	movs	r0, r1
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	0019      	movs	r1, r3
 80103ae:	230a      	movs	r3, #10
 80103b0:	18fb      	adds	r3, r7, r3
 80103b2:	1c02      	adds	r2, r0, #0
 80103b4:	801a      	strh	r2, [r3, #0]
 80103b6:	2308      	movs	r3, #8
 80103b8:	18fb      	adds	r3, r7, r3
 80103ba:	1c0a      	adds	r2, r1, #0
 80103bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2241      	movs	r2, #65	@ 0x41
 80103c2:	5c9b      	ldrb	r3, [r3, r2]
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b20      	cmp	r3, #32
 80103c8:	d000      	beq.n	80103cc <HAL_I2C_Master_Transmit+0x2c>
 80103ca:	e0e7      	b.n	801059c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2240      	movs	r2, #64	@ 0x40
 80103d0:	5c9b      	ldrb	r3, [r3, r2]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d101      	bne.n	80103da <HAL_I2C_Master_Transmit+0x3a>
 80103d6:	2302      	movs	r3, #2
 80103d8:	e0e1      	b.n	801059e <HAL_I2C_Master_Transmit+0x1fe>
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2240      	movs	r2, #64	@ 0x40
 80103de:	2101      	movs	r1, #1
 80103e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80103e2:	f7fe fc7d 	bl	800ece0 <HAL_GetTick>
 80103e6:	0003      	movs	r3, r0
 80103e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80103ea:	2380      	movs	r3, #128	@ 0x80
 80103ec:	0219      	lsls	r1, r3, #8
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	2319      	movs	r3, #25
 80103f6:	2201      	movs	r2, #1
 80103f8:	f001 ff98 	bl	801232c <I2C_WaitOnFlagUntilTimeout>
 80103fc:	1e03      	subs	r3, r0, #0
 80103fe:	d001      	beq.n	8010404 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010400:	2301      	movs	r3, #1
 8010402:	e0cc      	b.n	801059e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2241      	movs	r2, #65	@ 0x41
 8010408:	2121      	movs	r1, #33	@ 0x21
 801040a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2242      	movs	r2, #66	@ 0x42
 8010410:	2110      	movs	r1, #16
 8010412:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2200      	movs	r2, #0
 8010418:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2208      	movs	r2, #8
 8010424:	18ba      	adds	r2, r7, r2
 8010426:	8812      	ldrh	r2, [r2, #0]
 8010428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2200      	movs	r2, #0
 801042e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010434:	b29b      	uxth	r3, r3
 8010436:	2bff      	cmp	r3, #255	@ 0xff
 8010438:	d911      	bls.n	801045e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	22ff      	movs	r2, #255	@ 0xff
 801043e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010444:	b2da      	uxtb	r2, r3
 8010446:	2380      	movs	r3, #128	@ 0x80
 8010448:	045c      	lsls	r4, r3, #17
 801044a:	230a      	movs	r3, #10
 801044c:	18fb      	adds	r3, r7, r3
 801044e:	8819      	ldrh	r1, [r3, #0]
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	4b55      	ldr	r3, [pc, #340]	@ (80105a8 <HAL_I2C_Master_Transmit+0x208>)
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	0023      	movs	r3, r4
 8010458:	f002 f9ba 	bl	80127d0 <I2C_TransferConfig>
 801045c:	e075      	b.n	801054a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010462:	b29a      	uxth	r2, r3
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801046c:	b2da      	uxtb	r2, r3
 801046e:	2380      	movs	r3, #128	@ 0x80
 8010470:	049c      	lsls	r4, r3, #18
 8010472:	230a      	movs	r3, #10
 8010474:	18fb      	adds	r3, r7, r3
 8010476:	8819      	ldrh	r1, [r3, #0]
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	4b4b      	ldr	r3, [pc, #300]	@ (80105a8 <HAL_I2C_Master_Transmit+0x208>)
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	0023      	movs	r3, r4
 8010480:	f002 f9a6 	bl	80127d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010484:	e061      	b.n	801054a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010486:	697a      	ldr	r2, [r7, #20]
 8010488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	0018      	movs	r0, r3
 801048e:	f001 ff9b 	bl	80123c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8010492:	1e03      	subs	r3, r0, #0
 8010494:	d001      	beq.n	801049a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010496:	2301      	movs	r3, #1
 8010498:	e081      	b.n	801059e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801049e:	781a      	ldrb	r2, [r3, #0]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	3b01      	subs	r3, #1
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104c2:	3b01      	subs	r3, #1
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d03a      	beq.n	801054a <HAL_I2C_Master_Transmit+0x1aa>
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d136      	bne.n	801054a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80104dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	0013      	movs	r3, r2
 80104e6:	2200      	movs	r2, #0
 80104e8:	2180      	movs	r1, #128	@ 0x80
 80104ea:	f001 ff1f 	bl	801232c <I2C_WaitOnFlagUntilTimeout>
 80104ee:	1e03      	subs	r3, r0, #0
 80104f0:	d001      	beq.n	80104f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80104f2:	2301      	movs	r3, #1
 80104f4:	e053      	b.n	801059e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	2bff      	cmp	r3, #255	@ 0xff
 80104fe:	d911      	bls.n	8010524 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	22ff      	movs	r2, #255	@ 0xff
 8010504:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801050a:	b2da      	uxtb	r2, r3
 801050c:	2380      	movs	r3, #128	@ 0x80
 801050e:	045c      	lsls	r4, r3, #17
 8010510:	230a      	movs	r3, #10
 8010512:	18fb      	adds	r3, r7, r3
 8010514:	8819      	ldrh	r1, [r3, #0]
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	2300      	movs	r3, #0
 801051a:	9300      	str	r3, [sp, #0]
 801051c:	0023      	movs	r3, r4
 801051e:	f002 f957 	bl	80127d0 <I2C_TransferConfig>
 8010522:	e012      	b.n	801054a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010528:	b29a      	uxth	r2, r3
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010532:	b2da      	uxtb	r2, r3
 8010534:	2380      	movs	r3, #128	@ 0x80
 8010536:	049c      	lsls	r4, r3, #18
 8010538:	230a      	movs	r3, #10
 801053a:	18fb      	adds	r3, r7, r3
 801053c:	8819      	ldrh	r1, [r3, #0]
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	2300      	movs	r3, #0
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	0023      	movs	r3, r4
 8010546:	f002 f943 	bl	80127d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801054e:	b29b      	uxth	r3, r3
 8010550:	2b00      	cmp	r3, #0
 8010552:	d198      	bne.n	8010486 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	0018      	movs	r0, r3
 801055c:	f001 ff7a 	bl	8012454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010560:	1e03      	subs	r3, r0, #0
 8010562:	d001      	beq.n	8010568 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010564:	2301      	movs	r3, #1
 8010566:	e01a      	b.n	801059e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2220      	movs	r2, #32
 801056e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	685a      	ldr	r2, [r3, #4]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	490c      	ldr	r1, [pc, #48]	@ (80105ac <HAL_I2C_Master_Transmit+0x20c>)
 801057c:	400a      	ands	r2, r1
 801057e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2241      	movs	r2, #65	@ 0x41
 8010584:	2120      	movs	r1, #32
 8010586:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2242      	movs	r2, #66	@ 0x42
 801058c:	2100      	movs	r1, #0
 801058e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2240      	movs	r2, #64	@ 0x40
 8010594:	2100      	movs	r1, #0
 8010596:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010598:	2300      	movs	r3, #0
 801059a:	e000      	b.n	801059e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801059c:	2302      	movs	r3, #2
  }
}
 801059e:	0018      	movs	r0, r3
 80105a0:	46bd      	mov	sp, r7
 80105a2:	b007      	add	sp, #28
 80105a4:	bd90      	pop	{r4, r7, pc}
 80105a6:	46c0      	nop			@ (mov r8, r8)
 80105a8:	80002000 	.word	0x80002000
 80105ac:	fe00e800 	.word	0xfe00e800

080105b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80105b0:	b590      	push	{r4, r7, lr}
 80105b2:	b089      	sub	sp, #36	@ 0x24
 80105b4:	af02      	add	r7, sp, #8
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	0008      	movs	r0, r1
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	0019      	movs	r1, r3
 80105be:	230a      	movs	r3, #10
 80105c0:	18fb      	adds	r3, r7, r3
 80105c2:	1c02      	adds	r2, r0, #0
 80105c4:	801a      	strh	r2, [r3, #0]
 80105c6:	2308      	movs	r3, #8
 80105c8:	18fb      	adds	r3, r7, r3
 80105ca:	1c0a      	adds	r2, r1, #0
 80105cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2241      	movs	r2, #65	@ 0x41
 80105d2:	5c9b      	ldrb	r3, [r3, r2]
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b20      	cmp	r3, #32
 80105d8:	d000      	beq.n	80105dc <HAL_I2C_Master_Receive+0x2c>
 80105da:	e0e8      	b.n	80107ae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2240      	movs	r2, #64	@ 0x40
 80105e0:	5c9b      	ldrb	r3, [r3, r2]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d101      	bne.n	80105ea <HAL_I2C_Master_Receive+0x3a>
 80105e6:	2302      	movs	r3, #2
 80105e8:	e0e2      	b.n	80107b0 <HAL_I2C_Master_Receive+0x200>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2240      	movs	r2, #64	@ 0x40
 80105ee:	2101      	movs	r1, #1
 80105f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80105f2:	f7fe fb75 	bl	800ece0 <HAL_GetTick>
 80105f6:	0003      	movs	r3, r0
 80105f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80105fa:	2380      	movs	r3, #128	@ 0x80
 80105fc:	0219      	lsls	r1, r3, #8
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	2319      	movs	r3, #25
 8010606:	2201      	movs	r2, #1
 8010608:	f001 fe90 	bl	801232c <I2C_WaitOnFlagUntilTimeout>
 801060c:	1e03      	subs	r3, r0, #0
 801060e:	d001      	beq.n	8010614 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010610:	2301      	movs	r3, #1
 8010612:	e0cd      	b.n	80107b0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2241      	movs	r2, #65	@ 0x41
 8010618:	2122      	movs	r1, #34	@ 0x22
 801061a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2242      	movs	r2, #66	@ 0x42
 8010620:	2110      	movs	r1, #16
 8010622:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2200      	movs	r2, #0
 8010628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2208      	movs	r2, #8
 8010634:	18ba      	adds	r2, r7, r2
 8010636:	8812      	ldrh	r2, [r2, #0]
 8010638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010644:	b29b      	uxth	r3, r3
 8010646:	2bff      	cmp	r3, #255	@ 0xff
 8010648:	d911      	bls.n	801066e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	22ff      	movs	r2, #255	@ 0xff
 801064e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010654:	b2da      	uxtb	r2, r3
 8010656:	2380      	movs	r3, #128	@ 0x80
 8010658:	045c      	lsls	r4, r3, #17
 801065a:	230a      	movs	r3, #10
 801065c:	18fb      	adds	r3, r7, r3
 801065e:	8819      	ldrh	r1, [r3, #0]
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	4b55      	ldr	r3, [pc, #340]	@ (80107b8 <HAL_I2C_Master_Receive+0x208>)
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	0023      	movs	r3, r4
 8010668:	f002 f8b2 	bl	80127d0 <I2C_TransferConfig>
 801066c:	e076      	b.n	801075c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010672:	b29a      	uxth	r2, r3
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801067c:	b2da      	uxtb	r2, r3
 801067e:	2380      	movs	r3, #128	@ 0x80
 8010680:	049c      	lsls	r4, r3, #18
 8010682:	230a      	movs	r3, #10
 8010684:	18fb      	adds	r3, r7, r3
 8010686:	8819      	ldrh	r1, [r3, #0]
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	4b4b      	ldr	r3, [pc, #300]	@ (80107b8 <HAL_I2C_Master_Receive+0x208>)
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	0023      	movs	r3, r4
 8010690:	f002 f89e 	bl	80127d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010694:	e062      	b.n	801075c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	0018      	movs	r0, r3
 801069e:	f001 ff1d 	bl	80124dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80106a2:	1e03      	subs	r3, r0, #0
 80106a4:	d001      	beq.n	80106aa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80106a6:	2301      	movs	r3, #1
 80106a8:	e082      	b.n	80107b0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106b4:	b2d2      	uxtb	r2, r2
 80106b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106bc:	1c5a      	adds	r2, r3, #1
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c6:	3b01      	subs	r3, #1
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	3b01      	subs	r3, #1
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d03a      	beq.n	801075c <HAL_I2C_Master_Receive+0x1ac>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d136      	bne.n	801075c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80106ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	0013      	movs	r3, r2
 80106f8:	2200      	movs	r2, #0
 80106fa:	2180      	movs	r1, #128	@ 0x80
 80106fc:	f001 fe16 	bl	801232c <I2C_WaitOnFlagUntilTimeout>
 8010700:	1e03      	subs	r3, r0, #0
 8010702:	d001      	beq.n	8010708 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010704:	2301      	movs	r3, #1
 8010706:	e053      	b.n	80107b0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801070c:	b29b      	uxth	r3, r3
 801070e:	2bff      	cmp	r3, #255	@ 0xff
 8010710:	d911      	bls.n	8010736 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	22ff      	movs	r2, #255	@ 0xff
 8010716:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801071c:	b2da      	uxtb	r2, r3
 801071e:	2380      	movs	r3, #128	@ 0x80
 8010720:	045c      	lsls	r4, r3, #17
 8010722:	230a      	movs	r3, #10
 8010724:	18fb      	adds	r3, r7, r3
 8010726:	8819      	ldrh	r1, [r3, #0]
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	2300      	movs	r3, #0
 801072c:	9300      	str	r3, [sp, #0]
 801072e:	0023      	movs	r3, r4
 8010730:	f002 f84e 	bl	80127d0 <I2C_TransferConfig>
 8010734:	e012      	b.n	801075c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801073a:	b29a      	uxth	r2, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010744:	b2da      	uxtb	r2, r3
 8010746:	2380      	movs	r3, #128	@ 0x80
 8010748:	049c      	lsls	r4, r3, #18
 801074a:	230a      	movs	r3, #10
 801074c:	18fb      	adds	r3, r7, r3
 801074e:	8819      	ldrh	r1, [r3, #0]
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	2300      	movs	r3, #0
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	0023      	movs	r3, r4
 8010758:	f002 f83a 	bl	80127d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010760:	b29b      	uxth	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	d197      	bne.n	8010696 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	0018      	movs	r0, r3
 801076e:	f001 fe71 	bl	8012454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010772:	1e03      	subs	r3, r0, #0
 8010774:	d001      	beq.n	801077a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010776:	2301      	movs	r3, #1
 8010778:	e01a      	b.n	80107b0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2220      	movs	r2, #32
 8010780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	685a      	ldr	r2, [r3, #4]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	490b      	ldr	r1, [pc, #44]	@ (80107bc <HAL_I2C_Master_Receive+0x20c>)
 801078e:	400a      	ands	r2, r1
 8010790:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2241      	movs	r2, #65	@ 0x41
 8010796:	2120      	movs	r1, #32
 8010798:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2242      	movs	r2, #66	@ 0x42
 801079e:	2100      	movs	r1, #0
 80107a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2240      	movs	r2, #64	@ 0x40
 80107a6:	2100      	movs	r1, #0
 80107a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80107aa:	2300      	movs	r3, #0
 80107ac:	e000      	b.n	80107b0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80107ae:	2302      	movs	r3, #2
  }
}
 80107b0:	0018      	movs	r0, r3
 80107b2:	46bd      	mov	sp, r7
 80107b4:	b007      	add	sp, #28
 80107b6:	bd90      	pop	{r4, r7, pc}
 80107b8:	80002400 	.word	0x80002400
 80107bc:	fe00e800 	.word	0xfe00e800

080107c0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80107c0:	b5b0      	push	{r4, r5, r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af02      	add	r7, sp, #8
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	0008      	movs	r0, r1
 80107ca:	607a      	str	r2, [r7, #4]
 80107cc:	0019      	movs	r1, r3
 80107ce:	230a      	movs	r3, #10
 80107d0:	18fb      	adds	r3, r7, r3
 80107d2:	1c02      	adds	r2, r0, #0
 80107d4:	801a      	strh	r2, [r3, #0]
 80107d6:	2308      	movs	r3, #8
 80107d8:	18fb      	adds	r3, r7, r3
 80107da:	1c0a      	adds	r2, r1, #0
 80107dc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2241      	movs	r2, #65	@ 0x41
 80107e2:	5c9b      	ldrb	r3, [r3, r2]
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b20      	cmp	r3, #32
 80107e8:	d000      	beq.n	80107ec <HAL_I2C_Master_Transmit_DMA+0x2c>
 80107ea:	e0dd      	b.n	80109a8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	699a      	ldr	r2, [r3, #24]
 80107f2:	2380      	movs	r3, #128	@ 0x80
 80107f4:	021b      	lsls	r3, r3, #8
 80107f6:	401a      	ands	r2, r3
 80107f8:	2380      	movs	r3, #128	@ 0x80
 80107fa:	021b      	lsls	r3, r3, #8
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d101      	bne.n	8010804 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010800:	2302      	movs	r3, #2
 8010802:	e0d2      	b.n	80109aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2240      	movs	r2, #64	@ 0x40
 8010808:	5c9b      	ldrb	r3, [r3, r2]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d101      	bne.n	8010812 <HAL_I2C_Master_Transmit_DMA+0x52>
 801080e:	2302      	movs	r3, #2
 8010810:	e0cb      	b.n	80109aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2240      	movs	r2, #64	@ 0x40
 8010816:	2101      	movs	r1, #1
 8010818:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2241      	movs	r2, #65	@ 0x41
 801081e:	2121      	movs	r1, #33	@ 0x21
 8010820:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2242      	movs	r2, #66	@ 0x42
 8010826:	2110      	movs	r1, #16
 8010828:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2200      	movs	r2, #0
 801082e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2208      	movs	r2, #8
 801083a:	18ba      	adds	r2, r7, r2
 801083c:	8812      	ldrh	r2, [r2, #0]
 801083e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	4a5c      	ldr	r2, [pc, #368]	@ (80109b4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010844:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	4a5b      	ldr	r2, [pc, #364]	@ (80109b8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801084a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010850:	b29b      	uxth	r3, r3
 8010852:	2bff      	cmp	r3, #255	@ 0xff
 8010854:	d906      	bls.n	8010864 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	22ff      	movs	r2, #255	@ 0xff
 801085a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801085c:	2380      	movs	r3, #128	@ 0x80
 801085e:	045b      	lsls	r3, r3, #17
 8010860:	617b      	str	r3, [r7, #20]
 8010862:	e007      	b.n	8010874 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010868:	b29a      	uxth	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801086e:	2380      	movs	r3, #128	@ 0x80
 8010870:	049b      	lsls	r3, r3, #18
 8010872:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010878:	2b00      	cmp	r3, #0
 801087a:	d100      	bne.n	801087e <HAL_I2C_Master_Transmit_DMA+0xbe>
 801087c:	e078      	b.n	8010970 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010882:	2b00      	cmp	r3, #0
 8010884:	d023      	beq.n	80108ce <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801088a:	4a4c      	ldr	r2, [pc, #304]	@ (80109bc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 801088c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010892:	4a4b      	ldr	r2, [pc, #300]	@ (80109c0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010894:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801089a:	2200      	movs	r2, #0
 801089c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a2:	2200      	movs	r2, #0
 80108a4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	3328      	adds	r3, #40	@ 0x28
 80108b2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80108b8:	2513      	movs	r5, #19
 80108ba:	197c      	adds	r4, r7, r5
 80108bc:	f7fe ff62 	bl	800f784 <HAL_DMA_Start_IT>
 80108c0:	0003      	movs	r3, r0
 80108c2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80108c4:	197b      	adds	r3, r7, r5
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d13d      	bne.n	8010948 <HAL_I2C_Master_Transmit_DMA+0x188>
 80108cc:	e013      	b.n	80108f6 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2241      	movs	r2, #65	@ 0x41
 80108d2:	2120      	movs	r1, #32
 80108d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2242      	movs	r2, #66	@ 0x42
 80108da:	2100      	movs	r1, #0
 80108dc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108e2:	2280      	movs	r2, #128	@ 0x80
 80108e4:	431a      	orrs	r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2240      	movs	r2, #64	@ 0x40
 80108ee:	2100      	movs	r1, #0
 80108f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80108f2:	2301      	movs	r3, #1
 80108f4:	e059      	b.n	80109aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	697c      	ldr	r4, [r7, #20]
 80108fe:	230a      	movs	r3, #10
 8010900:	18fb      	adds	r3, r7, r3
 8010902:	8819      	ldrh	r1, [r3, #0]
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	4b2f      	ldr	r3, [pc, #188]	@ (80109c4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	0023      	movs	r3, r4
 801090c:	f001 ff60 	bl	80127d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010914:	b29a      	uxth	r2, r3
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	b29a      	uxth	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2240      	movs	r2, #64	@ 0x40
 8010926:	2100      	movs	r1, #0
 8010928:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2110      	movs	r1, #16
 801092e:	0018      	movs	r0, r3
 8010930:	f001 ff88 	bl	8012844 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2180      	movs	r1, #128	@ 0x80
 8010940:	01c9      	lsls	r1, r1, #7
 8010942:	430a      	orrs	r2, r1
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	e02d      	b.n	80109a4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2241      	movs	r2, #65	@ 0x41
 801094c:	2120      	movs	r1, #32
 801094e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2242      	movs	r2, #66	@ 0x42
 8010954:	2100      	movs	r1, #0
 8010956:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801095c:	2210      	movs	r2, #16
 801095e:	431a      	orrs	r2, r3
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2240      	movs	r2, #64	@ 0x40
 8010968:	2100      	movs	r1, #0
 801096a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801096c:	2301      	movs	r3, #1
 801096e:	e01c      	b.n	80109aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	4a15      	ldr	r2, [pc, #84]	@ (80109c8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010974:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801097a:	b2da      	uxtb	r2, r3
 801097c:	2380      	movs	r3, #128	@ 0x80
 801097e:	049c      	lsls	r4, r3, #18
 8010980:	230a      	movs	r3, #10
 8010982:	18fb      	adds	r3, r7, r3
 8010984:	8819      	ldrh	r1, [r3, #0]
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	4b0e      	ldr	r3, [pc, #56]	@ (80109c4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801098a:	9300      	str	r3, [sp, #0]
 801098c:	0023      	movs	r3, r4
 801098e:	f001 ff1f 	bl	80127d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2240      	movs	r2, #64	@ 0x40
 8010996:	2100      	movs	r1, #0
 8010998:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2101      	movs	r1, #1
 801099e:	0018      	movs	r0, r3
 80109a0:	f001 ff50 	bl	8012844 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80109a4:	2300      	movs	r3, #0
 80109a6:	e000      	b.n	80109aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80109a8:	2302      	movs	r3, #2
  }
}
 80109aa:	0018      	movs	r0, r3
 80109ac:	46bd      	mov	sp, r7
 80109ae:	b006      	add	sp, #24
 80109b0:	bdb0      	pop	{r4, r5, r7, pc}
 80109b2:	46c0      	nop			@ (mov r8, r8)
 80109b4:	ffff0000 	.word	0xffff0000
 80109b8:	080111c5 	.word	0x080111c5
 80109bc:	0801217d 	.word	0x0801217d
 80109c0:	080122bd 	.word	0x080122bd
 80109c4:	80002000 	.word	0x80002000
 80109c8:	08010d71 	.word	0x08010d71

080109cc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80109cc:	b5b0      	push	{r4, r5, r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af02      	add	r7, sp, #8
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	0008      	movs	r0, r1
 80109d6:	607a      	str	r2, [r7, #4]
 80109d8:	0019      	movs	r1, r3
 80109da:	230a      	movs	r3, #10
 80109dc:	18fb      	adds	r3, r7, r3
 80109de:	1c02      	adds	r2, r0, #0
 80109e0:	801a      	strh	r2, [r3, #0]
 80109e2:	2308      	movs	r3, #8
 80109e4:	18fb      	adds	r3, r7, r3
 80109e6:	1c0a      	adds	r2, r1, #0
 80109e8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2241      	movs	r2, #65	@ 0x41
 80109ee:	5c9b      	ldrb	r3, [r3, r2]
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	2b20      	cmp	r3, #32
 80109f4:	d000      	beq.n	80109f8 <HAL_I2C_Master_Receive_DMA+0x2c>
 80109f6:	e0dd      	b.n	8010bb4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	699a      	ldr	r2, [r3, #24]
 80109fe:	2380      	movs	r3, #128	@ 0x80
 8010a00:	021b      	lsls	r3, r3, #8
 8010a02:	401a      	ands	r2, r3
 8010a04:	2380      	movs	r3, #128	@ 0x80
 8010a06:	021b      	lsls	r3, r3, #8
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d101      	bne.n	8010a10 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010a0c:	2302      	movs	r3, #2
 8010a0e:	e0d2      	b.n	8010bb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2240      	movs	r2, #64	@ 0x40
 8010a14:	5c9b      	ldrb	r3, [r3, r2]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d101      	bne.n	8010a1e <HAL_I2C_Master_Receive_DMA+0x52>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e0cb      	b.n	8010bb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2240      	movs	r2, #64	@ 0x40
 8010a22:	2101      	movs	r1, #1
 8010a24:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2241      	movs	r2, #65	@ 0x41
 8010a2a:	2122      	movs	r1, #34	@ 0x22
 8010a2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2242      	movs	r2, #66	@ 0x42
 8010a32:	2110      	movs	r1, #16
 8010a34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2208      	movs	r2, #8
 8010a46:	18ba      	adds	r2, r7, r2
 8010a48:	8812      	ldrh	r2, [r2, #0]
 8010a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	4a5c      	ldr	r2, [pc, #368]	@ (8010bc0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010a50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	4a5b      	ldr	r2, [pc, #364]	@ (8010bc4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010a56:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	2bff      	cmp	r3, #255	@ 0xff
 8010a60:	d906      	bls.n	8010a70 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	22ff      	movs	r2, #255	@ 0xff
 8010a66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010a68:	2380      	movs	r3, #128	@ 0x80
 8010a6a:	045b      	lsls	r3, r3, #17
 8010a6c:	617b      	str	r3, [r7, #20]
 8010a6e:	e007      	b.n	8010a80 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010a7a:	2380      	movs	r3, #128	@ 0x80
 8010a7c:	049b      	lsls	r3, r3, #18
 8010a7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d100      	bne.n	8010a8a <HAL_I2C_Master_Receive_DMA+0xbe>
 8010a88:	e078      	b.n	8010b7c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d023      	beq.n	8010ada <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a96:	4a4c      	ldr	r2, [pc, #304]	@ (8010bc8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010a98:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8010bcc <HAL_I2C_Master_Receive_DMA+0x200>)
 8010aa0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010aae:	2200      	movs	r2, #0
 8010ab0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3324      	adds	r3, #36	@ 0x24
 8010abc:	0019      	movs	r1, r3
 8010abe:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010ac4:	2513      	movs	r5, #19
 8010ac6:	197c      	adds	r4, r7, r5
 8010ac8:	f7fe fe5c 	bl	800f784 <HAL_DMA_Start_IT>
 8010acc:	0003      	movs	r3, r0
 8010ace:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010ad0:	197b      	adds	r3, r7, r5
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d13d      	bne.n	8010b54 <HAL_I2C_Master_Receive_DMA+0x188>
 8010ad8:	e013      	b.n	8010b02 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2241      	movs	r2, #65	@ 0x41
 8010ade:	2120      	movs	r1, #32
 8010ae0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2242      	movs	r2, #66	@ 0x42
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010aee:	2280      	movs	r2, #128	@ 0x80
 8010af0:	431a      	orrs	r2, r3
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	2240      	movs	r2, #64	@ 0x40
 8010afa:	2100      	movs	r1, #0
 8010afc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	e059      	b.n	8010bb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b06:	b2da      	uxtb	r2, r3
 8010b08:	697c      	ldr	r4, [r7, #20]
 8010b0a:	230a      	movs	r3, #10
 8010b0c:	18fb      	adds	r3, r7, r3
 8010b0e:	8819      	ldrh	r1, [r3, #0]
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	4b2f      	ldr	r3, [pc, #188]	@ (8010bd0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	0023      	movs	r3, r4
 8010b18:	f001 fe5a 	bl	80127d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	b29a      	uxth	r2, r3
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2240      	movs	r2, #64	@ 0x40
 8010b32:	2100      	movs	r1, #0
 8010b34:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2110      	movs	r1, #16
 8010b3a:	0018      	movs	r0, r3
 8010b3c:	f001 fe82 	bl	8012844 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2180      	movs	r1, #128	@ 0x80
 8010b4c:	0209      	lsls	r1, r1, #8
 8010b4e:	430a      	orrs	r2, r1
 8010b50:	601a      	str	r2, [r3, #0]
 8010b52:	e02d      	b.n	8010bb0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2241      	movs	r2, #65	@ 0x41
 8010b58:	2120      	movs	r1, #32
 8010b5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2242      	movs	r2, #66	@ 0x42
 8010b60:	2100      	movs	r1, #0
 8010b62:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b68:	2210      	movs	r2, #16
 8010b6a:	431a      	orrs	r2, r3
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2240      	movs	r2, #64	@ 0x40
 8010b74:	2100      	movs	r1, #0
 8010b76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e01c      	b.n	8010bb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	4a15      	ldr	r2, [pc, #84]	@ (8010bd4 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010b80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b86:	b2da      	uxtb	r2, r3
 8010b88:	2380      	movs	r3, #128	@ 0x80
 8010b8a:	049c      	lsls	r4, r3, #18
 8010b8c:	230a      	movs	r3, #10
 8010b8e:	18fb      	adds	r3, r7, r3
 8010b90:	8819      	ldrh	r1, [r3, #0]
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	4b0e      	ldr	r3, [pc, #56]	@ (8010bd0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	0023      	movs	r3, r4
 8010b9a:	f001 fe19 	bl	80127d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2240      	movs	r2, #64	@ 0x40
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2101      	movs	r1, #1
 8010baa:	0018      	movs	r0, r3
 8010bac:	f001 fe4a 	bl	8012844 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	e000      	b.n	8010bb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010bb4:	2302      	movs	r3, #2
  }
}
 8010bb6:	0018      	movs	r0, r3
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	b006      	add	sp, #24
 8010bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8010bbe:	46c0      	nop			@ (mov r8, r8)
 8010bc0:	ffff0000 	.word	0xffff0000
 8010bc4:	080111c5 	.word	0x080111c5
 8010bc8:	0801221d 	.word	0x0801221d
 8010bcc:	080122bd 	.word	0x080122bd
 8010bd0:	80002400 	.word	0x80002400
 8010bd4:	08010d71 	.word	0x08010d71

08010bd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d005      	beq.n	8010c04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bfc:	68ba      	ldr	r2, [r7, #8]
 8010bfe:	68f9      	ldr	r1, [r7, #12]
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	4798      	blx	r3
  }
}
 8010c04:	46c0      	nop			@ (mov r8, r8)
 8010c06:	46bd      	mov	sp, r7
 8010c08:	b004      	add	sp, #16
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b086      	sub	sp, #24
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	699b      	ldr	r3, [r3, #24]
 8010c1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010c24:	697a      	ldr	r2, [r7, #20]
 8010c26:	2380      	movs	r3, #128	@ 0x80
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	d00e      	beq.n	8010c4c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	2280      	movs	r2, #128	@ 0x80
 8010c32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010c34:	d00a      	beq.n	8010c4c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	431a      	orrs	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2280      	movs	r2, #128	@ 0x80
 8010c48:	0052      	lsls	r2, r2, #1
 8010c4a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010c4c:	697a      	ldr	r2, [r7, #20]
 8010c4e:	2380      	movs	r3, #128	@ 0x80
 8010c50:	00db      	lsls	r3, r3, #3
 8010c52:	4013      	ands	r3, r2
 8010c54:	d00e      	beq.n	8010c74 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	2280      	movs	r2, #128	@ 0x80
 8010c5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010c5c:	d00a      	beq.n	8010c74 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c62:	2208      	movs	r2, #8
 8010c64:	431a      	orrs	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2280      	movs	r2, #128	@ 0x80
 8010c70:	00d2      	lsls	r2, r2, #3
 8010c72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010c74:	697a      	ldr	r2, [r7, #20]
 8010c76:	2380      	movs	r3, #128	@ 0x80
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	4013      	ands	r3, r2
 8010c7c:	d00e      	beq.n	8010c9c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	2280      	movs	r2, #128	@ 0x80
 8010c82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010c84:	d00a      	beq.n	8010c9c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	431a      	orrs	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2280      	movs	r2, #128	@ 0x80
 8010c98:	0092      	lsls	r2, r2, #2
 8010c9a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ca0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	220b      	movs	r2, #11
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	d005      	beq.n	8010cb6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	0011      	movs	r1, r2
 8010cb0:	0018      	movs	r0, r3
 8010cb2:	f001 f915 	bl	8011ee0 <I2C_ITError>
  }
}
 8010cb6:	46c0      	nop			@ (mov r8, r8)
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	b006      	add	sp, #24
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b082      	sub	sp, #8
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010cc6:	46c0      	nop			@ (mov r8, r8)
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	b002      	add	sp, #8
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010cd6:	46c0      	nop			@ (mov r8, r8)
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	b002      	add	sp, #8
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010ce6:	46c0      	nop			@ (mov r8, r8)
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	b002      	add	sp, #8
 8010cec:	bd80      	pop	{r7, pc}

08010cee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cee:	b580      	push	{r7, lr}
 8010cf0:	b082      	sub	sp, #8
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010cf6:	46c0      	nop			@ (mov r8, r8)
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	b002      	add	sp, #8
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010cfe:	b580      	push	{r7, lr}
 8010d00:	b082      	sub	sp, #8
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
 8010d06:	0008      	movs	r0, r1
 8010d08:	0011      	movs	r1, r2
 8010d0a:	1cfb      	adds	r3, r7, #3
 8010d0c:	1c02      	adds	r2, r0, #0
 8010d0e:	701a      	strb	r2, [r3, #0]
 8010d10:	003b      	movs	r3, r7
 8010d12:	1c0a      	adds	r2, r1, #0
 8010d14:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010d16:	46c0      	nop			@ (mov r8, r8)
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	b002      	add	sp, #8
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b082      	sub	sp, #8
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010d26:	46c0      	nop			@ (mov r8, r8)
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	b002      	add	sp, #8
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010d36:	46c0      	nop			@ (mov r8, r8)
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	b002      	add	sp, #8
 8010d3c:	bd80      	pop	{r7, pc}

08010d3e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d3e:	b580      	push	{r7, lr}
 8010d40:	b082      	sub	sp, #8
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010d46:	46c0      	nop			@ (mov r8, r8)
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	b002      	add	sp, #8
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b082      	sub	sp, #8
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010d56:	46c0      	nop			@ (mov r8, r8)
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	b002      	add	sp, #8
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b082      	sub	sp, #8
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010d66:	46c0      	nop			@ (mov r8, r8)
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	b002      	add	sp, #8
 8010d6c:	bd80      	pop	{r7, pc}
	...

08010d70 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b089      	sub	sp, #36	@ 0x24
 8010d74:	af02      	add	r7, sp, #8
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2240      	movs	r2, #64	@ 0x40
 8010d84:	5c9b      	ldrb	r3, [r3, r2]
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d101      	bne.n	8010d8e <I2C_Master_ISR_IT+0x1e>
 8010d8a:	2302      	movs	r3, #2
 8010d8c:	e113      	b.n	8010fb6 <I2C_Master_ISR_IT+0x246>
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2240      	movs	r2, #64	@ 0x40
 8010d92:	2101      	movs	r1, #1
 8010d94:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	2210      	movs	r2, #16
 8010d9a:	4013      	ands	r3, r2
 8010d9c:	d012      	beq.n	8010dc4 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2210      	movs	r2, #16
 8010da2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010da4:	d00e      	beq.n	8010dc4 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2210      	movs	r2, #16
 8010dac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010db2:	2204      	movs	r2, #4
 8010db4:	431a      	orrs	r2, r3
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	0018      	movs	r0, r3
 8010dbe:	f001 f9ba 	bl	8012136 <I2C_Flush_TXDR>
 8010dc2:	e0e5      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2204      	movs	r2, #4
 8010dc8:	4013      	ands	r3, r2
 8010dca:	d021      	beq.n	8010e10 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2204      	movs	r2, #4
 8010dd0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010dd2:	d01d      	beq.n	8010e10 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	2204      	movs	r2, #4
 8010dd8:	4393      	bics	r3, r2
 8010dda:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de6:	b2d2      	uxtb	r2, r2
 8010de8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dee:	1c5a      	adds	r2, r3, #1
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	3b01      	subs	r3, #1
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010e0e:	e0bf      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	2202      	movs	r2, #2
 8010e14:	4013      	ands	r3, r2
 8010e16:	d01c      	beq.n	8010e52 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2202      	movs	r2, #2
 8010e1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010e1e:	d018      	beq.n	8010e52 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e24:	781a      	ldrb	r2, [r3, #0]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e30:	1c5a      	adds	r2, r3, #1
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	3b01      	subs	r3, #1
 8010e4a:	b29a      	uxth	r2, r3
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010e50:	e09e      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	2280      	movs	r2, #128	@ 0x80
 8010e56:	4013      	ands	r3, r2
 8010e58:	d100      	bne.n	8010e5c <I2C_Master_ISR_IT+0xec>
 8010e5a:	e069      	b.n	8010f30 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2240      	movs	r2, #64	@ 0x40
 8010e60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010e62:	d065      	beq.n	8010f30 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d04a      	beq.n	8010f04 <I2C_Master_ISR_IT+0x194>
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d146      	bne.n	8010f04 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	2112      	movs	r1, #18
 8010e80:	187b      	adds	r3, r7, r1
 8010e82:	0592      	lsls	r2, r2, #22
 8010e84:	0d92      	lsrs	r2, r2, #22
 8010e86:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	2bff      	cmp	r3, #255	@ 0xff
 8010e90:	d910      	bls.n	8010eb4 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	22ff      	movs	r2, #255	@ 0xff
 8010e96:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e9c:	b2da      	uxtb	r2, r3
 8010e9e:	2380      	movs	r3, #128	@ 0x80
 8010ea0:	045c      	lsls	r4, r3, #17
 8010ea2:	187b      	adds	r3, r7, r1
 8010ea4:	8819      	ldrh	r1, [r3, #0]
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	0023      	movs	r3, r4
 8010eae:	f001 fc8f 	bl	80127d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010eb2:	e03c      	b.n	8010f2e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8010fc0 <I2C_Master_ISR_IT+0x250>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d00e      	beq.n	8010ee6 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ecc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010ed2:	2312      	movs	r3, #18
 8010ed4:	18fb      	adds	r3, r7, r3
 8010ed6:	8819      	ldrh	r1, [r3, #0]
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	2300      	movs	r3, #0
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	0023      	movs	r3, r4
 8010ee0:	f001 fc76 	bl	80127d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ee4:	e023      	b.n	8010f2e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	2380      	movs	r3, #128	@ 0x80
 8010eee:	049c      	lsls	r4, r3, #18
 8010ef0:	2312      	movs	r3, #18
 8010ef2:	18fb      	adds	r3, r7, r3
 8010ef4:	8819      	ldrh	r1, [r3, #0]
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	0023      	movs	r3, r4
 8010efe:	f001 fc67 	bl	80127d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f02:	e014      	b.n	8010f2e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	685a      	ldr	r2, [r3, #4]
 8010f0a:	2380      	movs	r3, #128	@ 0x80
 8010f0c:	049b      	lsls	r3, r3, #18
 8010f0e:	401a      	ands	r2, r3
 8010f10:	2380      	movs	r3, #128	@ 0x80
 8010f12:	049b      	lsls	r3, r3, #18
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d004      	beq.n	8010f22 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	0018      	movs	r0, r3
 8010f1c:	f000 fcf4 	bl	8011908 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010f20:	e036      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2140      	movs	r1, #64	@ 0x40
 8010f26:	0018      	movs	r0, r3
 8010f28:	f000 ffda 	bl	8011ee0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010f2c:	e030      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
 8010f2e:	e02f      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2240      	movs	r2, #64	@ 0x40
 8010f34:	4013      	ands	r3, r2
 8010f36:	d02b      	beq.n	8010f90 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2240      	movs	r2, #64	@ 0x40
 8010f3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010f3e:	d027      	beq.n	8010f90 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d11d      	bne.n	8010f86 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	2380      	movs	r3, #128	@ 0x80
 8010f52:	049b      	lsls	r3, r3, #18
 8010f54:	401a      	ands	r2, r3
 8010f56:	2380      	movs	r3, #128	@ 0x80
 8010f58:	049b      	lsls	r3, r3, #18
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d018      	beq.n	8010f90 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f62:	4a17      	ldr	r2, [pc, #92]	@ (8010fc0 <I2C_Master_ISR_IT+0x250>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d109      	bne.n	8010f7c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	685a      	ldr	r2, [r3, #4]
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2180      	movs	r1, #128	@ 0x80
 8010f74:	01c9      	lsls	r1, r1, #7
 8010f76:	430a      	orrs	r2, r1
 8010f78:	605a      	str	r2, [r3, #4]
 8010f7a:	e009      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	0018      	movs	r0, r3
 8010f80:	f000 fcc2 	bl	8011908 <I2C_ITMasterSeqCplt>
 8010f84:	e004      	b.n	8010f90 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2140      	movs	r1, #64	@ 0x40
 8010f8a:	0018      	movs	r0, r3
 8010f8c:	f000 ffa8 	bl	8011ee0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2220      	movs	r2, #32
 8010f94:	4013      	ands	r3, r2
 8010f96:	d009      	beq.n	8010fac <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2220      	movs	r2, #32
 8010f9c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f9e:	d005      	beq.n	8010fac <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010fa0:	697a      	ldr	r2, [r7, #20]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	0011      	movs	r1, r2
 8010fa6:	0018      	movs	r0, r3
 8010fa8:	f000 fd54 	bl	8011a54 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2240      	movs	r2, #64	@ 0x40
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	0018      	movs	r0, r3
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	b007      	add	sp, #28
 8010fbc:	bd90      	pop	{r4, r7, pc}
 8010fbe:	46c0      	nop			@ (mov r8, r8)
 8010fc0:	ffff0000 	.word	0xffff0000

08010fc4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2240      	movs	r2, #64	@ 0x40
 8010fde:	5c9b      	ldrb	r3, [r3, r2]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d101      	bne.n	8010fe8 <I2C_Slave_ISR_IT+0x24>
 8010fe4:	2302      	movs	r3, #2
 8010fe6:	e0e6      	b.n	80111b6 <I2C_Slave_ISR_IT+0x1f2>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2240      	movs	r2, #64	@ 0x40
 8010fec:	2101      	movs	r1, #1
 8010fee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	2220      	movs	r2, #32
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	d009      	beq.n	801100c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2220      	movs	r2, #32
 8010ffc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010ffe:	d005      	beq.n	801100c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	0011      	movs	r1, r2
 8011006:	0018      	movs	r0, r3
 8011008:	f000 fdf2 	bl	8011bf0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	2210      	movs	r2, #16
 8011010:	4013      	ands	r3, r2
 8011012:	d052      	beq.n	80110ba <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2210      	movs	r2, #16
 8011018:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801101a:	d04e      	beq.n	80110ba <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011020:	b29b      	uxth	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	d12d      	bne.n	8011082 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2241      	movs	r2, #65	@ 0x41
 801102a:	5c9b      	ldrb	r3, [r3, r2]
 801102c:	b2db      	uxtb	r3, r3
 801102e:	2b28      	cmp	r3, #40	@ 0x28
 8011030:	d10b      	bne.n	801104a <I2C_Slave_ISR_IT+0x86>
 8011032:	697a      	ldr	r2, [r7, #20]
 8011034:	2380      	movs	r3, #128	@ 0x80
 8011036:	049b      	lsls	r3, r3, #18
 8011038:	429a      	cmp	r2, r3
 801103a:	d106      	bne.n	801104a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801103c:	693a      	ldr	r2, [r7, #16]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	0011      	movs	r1, r2
 8011042:	0018      	movs	r0, r3
 8011044:	f000 fef4 	bl	8011e30 <I2C_ITListenCplt>
 8011048:	e036      	b.n	80110b8 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2241      	movs	r2, #65	@ 0x41
 801104e:	5c9b      	ldrb	r3, [r3, r2]
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b29      	cmp	r3, #41	@ 0x29
 8011054:	d110      	bne.n	8011078 <I2C_Slave_ISR_IT+0xb4>
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	4a59      	ldr	r2, [pc, #356]	@ (80111c0 <I2C_Slave_ISR_IT+0x1fc>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d00c      	beq.n	8011078 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2210      	movs	r2, #16
 8011064:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	0018      	movs	r0, r3
 801106a:	f001 f864 	bl	8012136 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	0018      	movs	r0, r3
 8011072:	f000 fc8b 	bl	801198c <I2C_ITSlaveSeqCplt>
 8011076:	e01f      	b.n	80110b8 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2210      	movs	r2, #16
 801107e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011080:	e091      	b.n	80111a6 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2210      	movs	r2, #16
 8011088:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801108e:	2204      	movs	r2, #4
 8011090:	431a      	orrs	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d005      	beq.n	80110a8 <I2C_Slave_ISR_IT+0xe4>
 801109c:	697a      	ldr	r2, [r7, #20]
 801109e:	2380      	movs	r3, #128	@ 0x80
 80110a0:	045b      	lsls	r3, r3, #17
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d000      	beq.n	80110a8 <I2C_Slave_ISR_IT+0xe4>
 80110a6:	e07e      	b.n	80111a6 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	0011      	movs	r1, r2
 80110b0:	0018      	movs	r0, r3
 80110b2:	f000 ff15 	bl	8011ee0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80110b6:	e076      	b.n	80111a6 <I2C_Slave_ISR_IT+0x1e2>
 80110b8:	e075      	b.n	80111a6 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	2204      	movs	r2, #4
 80110be:	4013      	ands	r3, r2
 80110c0:	d02f      	beq.n	8011122 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2204      	movs	r2, #4
 80110c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80110c8:	d02b      	beq.n	8011122 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d018      	beq.n	8011106 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110de:	b2d2      	uxtb	r2, r2
 80110e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110e6:	1c5a      	adds	r2, r3, #1
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110f0:	3b01      	subs	r3, #1
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	3b01      	subs	r3, #1
 8011100:	b29a      	uxth	r2, r3
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801110a:	b29b      	uxth	r3, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	d14c      	bne.n	80111aa <I2C_Slave_ISR_IT+0x1e6>
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	4a2b      	ldr	r2, [pc, #172]	@ (80111c0 <I2C_Slave_ISR_IT+0x1fc>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d048      	beq.n	80111aa <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	0018      	movs	r0, r3
 801111c:	f000 fc36 	bl	801198c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011120:	e043      	b.n	80111aa <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	2208      	movs	r2, #8
 8011126:	4013      	ands	r3, r2
 8011128:	d00a      	beq.n	8011140 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2208      	movs	r2, #8
 801112e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011130:	d006      	beq.n	8011140 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011132:	693a      	ldr	r2, [r7, #16]
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	0011      	movs	r1, r2
 8011138:	0018      	movs	r0, r3
 801113a:	f000 fb41 	bl	80117c0 <I2C_ITAddrCplt>
 801113e:	e035      	b.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	2202      	movs	r2, #2
 8011144:	4013      	ands	r3, r2
 8011146:	d031      	beq.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2202      	movs	r2, #2
 801114c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801114e:	d02d      	beq.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011154:	b29b      	uxth	r3, r3
 8011156:	2b00      	cmp	r3, #0
 8011158:	d018      	beq.n	801118c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801115e:	781a      	ldrb	r2, [r3, #0]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801116a:	1c5a      	adds	r2, r3, #1
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011174:	b29b      	uxth	r3, r3
 8011176:	3b01      	subs	r3, #1
 8011178:	b29a      	uxth	r2, r3
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011182:	3b01      	subs	r3, #1
 8011184:	b29a      	uxth	r2, r3
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	851a      	strh	r2, [r3, #40]	@ 0x28
 801118a:	e00f      	b.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801118c:	697a      	ldr	r2, [r7, #20]
 801118e:	2380      	movs	r3, #128	@ 0x80
 8011190:	045b      	lsls	r3, r3, #17
 8011192:	429a      	cmp	r2, r3
 8011194:	d002      	beq.n	801119c <I2C_Slave_ISR_IT+0x1d8>
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d107      	bne.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	0018      	movs	r0, r3
 80111a0:	f000 fbf4 	bl	801198c <I2C_ITSlaveSeqCplt>
 80111a4:	e002      	b.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80111a6:	46c0      	nop			@ (mov r8, r8)
 80111a8:	e000      	b.n	80111ac <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80111aa:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2240      	movs	r2, #64	@ 0x40
 80111b0:	2100      	movs	r1, #0
 80111b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	0018      	movs	r0, r3
 80111b8:	46bd      	mov	sp, r7
 80111ba:	b006      	add	sp, #24
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	46c0      	nop			@ (mov r8, r8)
 80111c0:	ffff0000 	.word	0xffff0000

080111c4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80111c4:	b590      	push	{r4, r7, lr}
 80111c6:	b089      	sub	sp, #36	@ 0x24
 80111c8:	af02      	add	r7, sp, #8
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2240      	movs	r2, #64	@ 0x40
 80111d4:	5c9b      	ldrb	r3, [r3, r2]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d101      	bne.n	80111de <I2C_Master_ISR_DMA+0x1a>
 80111da:	2302      	movs	r3, #2
 80111dc:	e0e7      	b.n	80113ae <I2C_Master_ISR_DMA+0x1ea>
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2240      	movs	r2, #64	@ 0x40
 80111e2:	2101      	movs	r1, #1
 80111e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2210      	movs	r2, #16
 80111ea:	4013      	ands	r3, r2
 80111ec:	d017      	beq.n	801121e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2210      	movs	r2, #16
 80111f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80111f4:	d013      	beq.n	801121e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2210      	movs	r2, #16
 80111fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011202:	2204      	movs	r2, #4
 8011204:	431a      	orrs	r2, r3
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2120      	movs	r1, #32
 801120e:	0018      	movs	r0, r3
 8011210:	f001 fb18 	bl	8012844 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	0018      	movs	r0, r3
 8011218:	f000 ff8d 	bl	8012136 <I2C_Flush_TXDR>
 801121c:	e0c2      	b.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	2280      	movs	r2, #128	@ 0x80
 8011222:	4013      	ands	r3, r2
 8011224:	d100      	bne.n	8011228 <I2C_Master_ISR_DMA+0x64>
 8011226:	e07c      	b.n	8011322 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2240      	movs	r2, #64	@ 0x40
 801122c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801122e:	d100      	bne.n	8011232 <I2C_Master_ISR_DMA+0x6e>
 8011230:	e077      	b.n	8011322 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2140      	movs	r1, #64	@ 0x40
 801123e:	438a      	bics	r2, r1
 8011240:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011246:	b29b      	uxth	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	d055      	beq.n	80112f8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	b29a      	uxth	r2, r3
 8011254:	2312      	movs	r3, #18
 8011256:	18fb      	adds	r3, r7, r3
 8011258:	0592      	lsls	r2, r2, #22
 801125a:	0d92      	lsrs	r2, r2, #22
 801125c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011262:	b29b      	uxth	r3, r3
 8011264:	2bff      	cmp	r3, #255	@ 0xff
 8011266:	d906      	bls.n	8011276 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	22ff      	movs	r2, #255	@ 0xff
 801126c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801126e:	2380      	movs	r3, #128	@ 0x80
 8011270:	045b      	lsls	r3, r3, #17
 8011272:	617b      	str	r3, [r7, #20]
 8011274:	e010      	b.n	8011298 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801127a:	b29a      	uxth	r2, r3
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011284:	4a4c      	ldr	r2, [pc, #304]	@ (80113b8 <I2C_Master_ISR_DMA+0x1f4>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d003      	beq.n	8011292 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801128e:	617b      	str	r3, [r7, #20]
 8011290:	e002      	b.n	8011298 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011292:	2380      	movs	r3, #128	@ 0x80
 8011294:	049b      	lsls	r3, r3, #18
 8011296:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801129c:	b2da      	uxtb	r2, r3
 801129e:	697c      	ldr	r4, [r7, #20]
 80112a0:	2312      	movs	r3, #18
 80112a2:	18fb      	adds	r3, r7, r3
 80112a4:	8819      	ldrh	r1, [r3, #0]
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	2300      	movs	r3, #0
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	0023      	movs	r3, r4
 80112ae:	f001 fa8f 	bl	80127d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	b29a      	uxth	r2, r3
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2241      	movs	r2, #65	@ 0x41
 80112c8:	5c9b      	ldrb	r3, [r3, r2]
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b22      	cmp	r3, #34	@ 0x22
 80112ce:	d109      	bne.n	80112e4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2180      	movs	r1, #128	@ 0x80
 80112dc:	0209      	lsls	r1, r1, #8
 80112de:	430a      	orrs	r2, r1
 80112e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80112e2:	e05f      	b.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2180      	movs	r1, #128	@ 0x80
 80112f0:	01c9      	lsls	r1, r1, #7
 80112f2:	430a      	orrs	r2, r1
 80112f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80112f6:	e055      	b.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	685a      	ldr	r2, [r3, #4]
 80112fe:	2380      	movs	r3, #128	@ 0x80
 8011300:	049b      	lsls	r3, r3, #18
 8011302:	401a      	ands	r2, r3
 8011304:	2380      	movs	r3, #128	@ 0x80
 8011306:	049b      	lsls	r3, r3, #18
 8011308:	429a      	cmp	r2, r3
 801130a:	d004      	beq.n	8011316 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	0018      	movs	r0, r3
 8011310:	f000 fafa 	bl	8011908 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011314:	e046      	b.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2140      	movs	r1, #64	@ 0x40
 801131a:	0018      	movs	r0, r3
 801131c:	f000 fde0 	bl	8011ee0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011320:	e040      	b.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	2240      	movs	r2, #64	@ 0x40
 8011326:	4013      	ands	r3, r2
 8011328:	d02c      	beq.n	8011384 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2240      	movs	r2, #64	@ 0x40
 801132e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011330:	d028      	beq.n	8011384 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011336:	b29b      	uxth	r3, r3
 8011338:	2b00      	cmp	r3, #0
 801133a:	d11d      	bne.n	8011378 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	685a      	ldr	r2, [r3, #4]
 8011342:	2380      	movs	r3, #128	@ 0x80
 8011344:	049b      	lsls	r3, r3, #18
 8011346:	401a      	ands	r2, r3
 8011348:	2380      	movs	r3, #128	@ 0x80
 801134a:	049b      	lsls	r3, r3, #18
 801134c:	429a      	cmp	r2, r3
 801134e:	d028      	beq.n	80113a2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011354:	4a18      	ldr	r2, [pc, #96]	@ (80113b8 <I2C_Master_ISR_DMA+0x1f4>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d109      	bne.n	801136e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	685a      	ldr	r2, [r3, #4]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2180      	movs	r1, #128	@ 0x80
 8011366:	01c9      	lsls	r1, r1, #7
 8011368:	430a      	orrs	r2, r1
 801136a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801136c:	e019      	b.n	80113a2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	0018      	movs	r0, r3
 8011372:	f000 fac9 	bl	8011908 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011376:	e014      	b.n	80113a2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2140      	movs	r1, #64	@ 0x40
 801137c:	0018      	movs	r0, r3
 801137e:	f000 fdaf 	bl	8011ee0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011382:	e00e      	b.n	80113a2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2220      	movs	r2, #32
 8011388:	4013      	ands	r3, r2
 801138a:	d00b      	beq.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2220      	movs	r2, #32
 8011390:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011392:	d007      	beq.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	0011      	movs	r1, r2
 801139a:	0018      	movs	r0, r3
 801139c:	f000 fb5a 	bl	8011a54 <I2C_ITMasterCplt>
 80113a0:	e000      	b.n	80113a4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80113a2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2240      	movs	r2, #64	@ 0x40
 80113a8:	2100      	movs	r1, #0
 80113aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	0018      	movs	r0, r3
 80113b0:	46bd      	mov	sp, r7
 80113b2:	b007      	add	sp, #28
 80113b4:	bd90      	pop	{r4, r7, pc}
 80113b6:	46c0      	nop			@ (mov r8, r8)
 80113b8:	ffff0000 	.word	0xffff0000

080113bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80113bc:	b590      	push	{r4, r7, lr}
 80113be:	b089      	sub	sp, #36	@ 0x24
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	60b9      	str	r1, [r7, #8]
 80113c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80113c8:	4b88      	ldr	r3, [pc, #544]	@ (80115ec <I2C_Mem_ISR_DMA+0x230>)
 80113ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2240      	movs	r2, #64	@ 0x40
 80113d0:	5c9b      	ldrb	r3, [r3, r2]
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d101      	bne.n	80113da <I2C_Mem_ISR_DMA+0x1e>
 80113d6:	2302      	movs	r3, #2
 80113d8:	e104      	b.n	80115e4 <I2C_Mem_ISR_DMA+0x228>
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2240      	movs	r2, #64	@ 0x40
 80113de:	2101      	movs	r1, #1
 80113e0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2210      	movs	r2, #16
 80113e6:	4013      	ands	r3, r2
 80113e8:	d017      	beq.n	801141a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2210      	movs	r2, #16
 80113ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113f0:	d013      	beq.n	801141a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	2210      	movs	r2, #16
 80113f8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113fe:	2204      	movs	r2, #4
 8011400:	431a      	orrs	r2, r3
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2120      	movs	r1, #32
 801140a:	0018      	movs	r0, r3
 801140c:	f001 fa1a 	bl	8012844 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	0018      	movs	r0, r3
 8011414:	f000 fe8f 	bl	8012136 <I2C_Flush_TXDR>
 8011418:	e0df      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	2202      	movs	r2, #2
 801141e:	4013      	ands	r3, r2
 8011420:	d00d      	beq.n	801143e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2202      	movs	r2, #2
 8011426:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011428:	d009      	beq.n	801143e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011432:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2201      	movs	r2, #1
 8011438:	4252      	negs	r2, r2
 801143a:	651a      	str	r2, [r3, #80]	@ 0x50
 801143c:	e0cd      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	2280      	movs	r2, #128	@ 0x80
 8011442:	4013      	ands	r3, r2
 8011444:	d05e      	beq.n	8011504 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2240      	movs	r2, #64	@ 0x40
 801144a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801144c:	d05a      	beq.n	8011504 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2110      	movs	r1, #16
 8011452:	0018      	movs	r0, r3
 8011454:	f001 f9f6 	bl	8012844 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801145c:	b29b      	uxth	r3, r3
 801145e:	2b00      	cmp	r3, #0
 8011460:	d04a      	beq.n	80114f8 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011466:	b29b      	uxth	r3, r3
 8011468:	2bff      	cmp	r3, #255	@ 0xff
 801146a:	d910      	bls.n	801148e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	22ff      	movs	r2, #255	@ 0xff
 8011470:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011476:	b299      	uxth	r1, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801147c:	b2da      	uxtb	r2, r3
 801147e:	2380      	movs	r3, #128	@ 0x80
 8011480:	045b      	lsls	r3, r3, #17
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	2400      	movs	r4, #0
 8011486:	9400      	str	r4, [sp, #0]
 8011488:	f001 f9a2 	bl	80127d0 <I2C_TransferConfig>
 801148c:	e011      	b.n	80114b2 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011492:	b29a      	uxth	r2, r3
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801149c:	b299      	uxth	r1, r3
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	2380      	movs	r3, #128	@ 0x80
 80114a6:	049b      	lsls	r3, r3, #18
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	2400      	movs	r4, #0
 80114ac:	9400      	str	r4, [sp, #0]
 80114ae:	f001 f98f 	bl	80127d0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	b29a      	uxth	r2, r3
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2241      	movs	r2, #65	@ 0x41
 80114c8:	5c9b      	ldrb	r3, [r3, r2]
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	2b22      	cmp	r3, #34	@ 0x22
 80114ce:	d109      	bne.n	80114e4 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2180      	movs	r1, #128	@ 0x80
 80114dc:	0209      	lsls	r1, r1, #8
 80114de:	430a      	orrs	r2, r1
 80114e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114e2:	e07a      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2180      	movs	r1, #128	@ 0x80
 80114f0:	01c9      	lsls	r1, r1, #7
 80114f2:	430a      	orrs	r2, r1
 80114f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114f6:	e070      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2140      	movs	r1, #64	@ 0x40
 80114fc:	0018      	movs	r0, r3
 80114fe:	f000 fcef 	bl	8011ee0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011502:	e06a      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	2240      	movs	r2, #64	@ 0x40
 8011508:	4013      	ands	r3, r2
 801150a:	d058      	beq.n	80115be <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2240      	movs	r2, #64	@ 0x40
 8011510:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011512:	d054      	beq.n	80115be <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2241      	movs	r2, #65	@ 0x41
 8011518:	5c9b      	ldrb	r3, [r3, r2]
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b22      	cmp	r3, #34	@ 0x22
 801151e:	d101      	bne.n	8011524 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011520:	4b33      	ldr	r3, [pc, #204]	@ (80115f0 <I2C_Mem_ISR_DMA+0x234>)
 8011522:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011528:	b29b      	uxth	r3, r3
 801152a:	2bff      	cmp	r3, #255	@ 0xff
 801152c:	d911      	bls.n	8011552 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	22ff      	movs	r2, #255	@ 0xff
 8011532:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011538:	b299      	uxth	r1, r3
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801153e:	b2da      	uxtb	r2, r3
 8011540:	2380      	movs	r3, #128	@ 0x80
 8011542:	045c      	lsls	r4, r3, #17
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	9300      	str	r3, [sp, #0]
 801154a:	0023      	movs	r3, r4
 801154c:	f001 f940 	bl	80127d0 <I2C_TransferConfig>
 8011550:	e012      	b.n	8011578 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011556:	b29a      	uxth	r2, r3
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011560:	b299      	uxth	r1, r3
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011566:	b2da      	uxtb	r2, r3
 8011568:	2380      	movs	r3, #128	@ 0x80
 801156a:	049c      	lsls	r4, r3, #18
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	9300      	str	r3, [sp, #0]
 8011572:	0023      	movs	r3, r4
 8011574:	f001 f92c 	bl	80127d0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801157c:	b29a      	uxth	r2, r3
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	b29a      	uxth	r2, r3
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2241      	movs	r2, #65	@ 0x41
 801158e:	5c9b      	ldrb	r3, [r3, r2]
 8011590:	b2db      	uxtb	r3, r3
 8011592:	2b22      	cmp	r3, #34	@ 0x22
 8011594:	d109      	bne.n	80115aa <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2180      	movs	r1, #128	@ 0x80
 80115a2:	0209      	lsls	r1, r1, #8
 80115a4:	430a      	orrs	r2, r1
 80115a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80115a8:	e017      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2180      	movs	r1, #128	@ 0x80
 80115b6:	01c9      	lsls	r1, r1, #7
 80115b8:	430a      	orrs	r2, r1
 80115ba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80115bc:	e00d      	b.n	80115da <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2220      	movs	r2, #32
 80115c2:	4013      	ands	r3, r2
 80115c4:	d009      	beq.n	80115da <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2220      	movs	r2, #32
 80115ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80115cc:	d005      	beq.n	80115da <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80115ce:	68ba      	ldr	r2, [r7, #8]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	0011      	movs	r1, r2
 80115d4:	0018      	movs	r0, r3
 80115d6:	f000 fa3d 	bl	8011a54 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2240      	movs	r2, #64	@ 0x40
 80115de:	2100      	movs	r1, #0
 80115e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	0018      	movs	r0, r3
 80115e6:	46bd      	mov	sp, r7
 80115e8:	b007      	add	sp, #28
 80115ea:	bd90      	pop	{r4, r7, pc}
 80115ec:	80002000 	.word	0x80002000
 80115f0:	80002400 	.word	0x80002400

080115f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b088      	sub	sp, #32
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011604:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8011606:	2300      	movs	r3, #0
 8011608:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2240      	movs	r2, #64	@ 0x40
 801160e:	5c9b      	ldrb	r3, [r3, r2]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d101      	bne.n	8011618 <I2C_Slave_ISR_DMA+0x24>
 8011614:	2302      	movs	r3, #2
 8011616:	e0cd      	b.n	80117b4 <I2C_Slave_ISR_DMA+0x1c0>
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2240      	movs	r2, #64	@ 0x40
 801161c:	2101      	movs	r1, #1
 801161e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2220      	movs	r2, #32
 8011624:	4013      	ands	r3, r2
 8011626:	d009      	beq.n	801163c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2220      	movs	r2, #32
 801162c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801162e:	d005      	beq.n	801163c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011630:	68ba      	ldr	r2, [r7, #8]
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	0011      	movs	r1, r2
 8011636:	0018      	movs	r0, r3
 8011638:	f000 fada 	bl	8011bf0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	2210      	movs	r2, #16
 8011640:	4013      	ands	r3, r2
 8011642:	d100      	bne.n	8011646 <I2C_Slave_ISR_DMA+0x52>
 8011644:	e0a3      	b.n	801178e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2210      	movs	r2, #16
 801164a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801164c:	d100      	bne.n	8011650 <I2C_Slave_ISR_DMA+0x5c>
 801164e:	e09e      	b.n	801178e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	2380      	movs	r3, #128	@ 0x80
 8011654:	01db      	lsls	r3, r3, #7
 8011656:	4013      	ands	r3, r2
 8011658:	d105      	bne.n	8011666 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801165a:	687a      	ldr	r2, [r7, #4]
 801165c:	2380      	movs	r3, #128	@ 0x80
 801165e:	021b      	lsls	r3, r3, #8
 8011660:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011662:	d100      	bne.n	8011666 <I2C_Slave_ISR_DMA+0x72>
 8011664:	e08c      	b.n	8011780 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00c      	beq.n	8011688 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	2380      	movs	r3, #128	@ 0x80
 8011672:	021b      	lsls	r3, r3, #8
 8011674:	4013      	ands	r3, r2
 8011676:	d007      	beq.n	8011688 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d101      	bne.n	8011688 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011684:	2301      	movs	r3, #1
 8011686:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00c      	beq.n	80116aa <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	2380      	movs	r3, #128	@ 0x80
 8011694:	01db      	lsls	r3, r3, #7
 8011696:	4013      	ands	r3, r2
 8011698:	d007      	beq.n	80116aa <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d101      	bne.n	80116aa <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80116a6:	2301      	movs	r3, #1
 80116a8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d12d      	bne.n	801170c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2241      	movs	r2, #65	@ 0x41
 80116b4:	5c9b      	ldrb	r3, [r3, r2]
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2b28      	cmp	r3, #40	@ 0x28
 80116ba:	d10b      	bne.n	80116d4 <I2C_Slave_ISR_DMA+0xe0>
 80116bc:	69ba      	ldr	r2, [r7, #24]
 80116be:	2380      	movs	r3, #128	@ 0x80
 80116c0:	049b      	lsls	r3, r3, #18
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d106      	bne.n	80116d4 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80116c6:	68ba      	ldr	r2, [r7, #8]
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	0011      	movs	r1, r2
 80116cc:	0018      	movs	r0, r3
 80116ce:	f000 fbaf 	bl	8011e30 <I2C_ITListenCplt>
 80116d2:	e054      	b.n	801177e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2241      	movs	r2, #65	@ 0x41
 80116d8:	5c9b      	ldrb	r3, [r3, r2]
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	2b29      	cmp	r3, #41	@ 0x29
 80116de:	d110      	bne.n	8011702 <I2C_Slave_ISR_DMA+0x10e>
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	4a36      	ldr	r2, [pc, #216]	@ (80117bc <I2C_Slave_ISR_DMA+0x1c8>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d00c      	beq.n	8011702 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2210      	movs	r2, #16
 80116ee:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	0018      	movs	r0, r3
 80116f4:	f000 fd1f 	bl	8012136 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	0018      	movs	r0, r3
 80116fc:	f000 f946 	bl	801198c <I2C_ITSlaveSeqCplt>
 8011700:	e03d      	b.n	801177e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2210      	movs	r2, #16
 8011708:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801170a:	e03e      	b.n	801178a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2210      	movs	r2, #16
 8011712:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011718:	2204      	movs	r2, #4
 801171a:	431a      	orrs	r2, r3
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011720:	2317      	movs	r3, #23
 8011722:	18fb      	adds	r3, r7, r3
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	2141      	movs	r1, #65	@ 0x41
 8011728:	5c52      	ldrb	r2, [r2, r1]
 801172a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d004      	beq.n	801173c <I2C_Slave_ISR_DMA+0x148>
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	2380      	movs	r3, #128	@ 0x80
 8011736:	045b      	lsls	r3, r3, #17
 8011738:	429a      	cmp	r2, r3
 801173a:	d126      	bne.n	801178a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801173c:	2217      	movs	r2, #23
 801173e:	18bb      	adds	r3, r7, r2
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	2b21      	cmp	r3, #33	@ 0x21
 8011744:	d003      	beq.n	801174e <I2C_Slave_ISR_DMA+0x15a>
 8011746:	18bb      	adds	r3, r7, r2
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b29      	cmp	r3, #41	@ 0x29
 801174c:	d103      	bne.n	8011756 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2221      	movs	r2, #33	@ 0x21
 8011752:	631a      	str	r2, [r3, #48]	@ 0x30
 8011754:	e00b      	b.n	801176e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011756:	2217      	movs	r2, #23
 8011758:	18bb      	adds	r3, r7, r2
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	2b22      	cmp	r3, #34	@ 0x22
 801175e:	d003      	beq.n	8011768 <I2C_Slave_ISR_DMA+0x174>
 8011760:	18bb      	adds	r3, r7, r2
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	2b2a      	cmp	r3, #42	@ 0x2a
 8011766:	d102      	bne.n	801176e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2222      	movs	r2, #34	@ 0x22
 801176c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	0011      	movs	r1, r2
 8011776:	0018      	movs	r0, r3
 8011778:	f000 fbb2 	bl	8011ee0 <I2C_ITError>
      if (treatdmanack == 1U)
 801177c:	e005      	b.n	801178a <I2C_Slave_ISR_DMA+0x196>
 801177e:	e004      	b.n	801178a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	2210      	movs	r2, #16
 8011786:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011788:	e00f      	b.n	80117aa <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801178a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801178c:	e00d      	b.n	80117aa <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2208      	movs	r2, #8
 8011792:	4013      	ands	r3, r2
 8011794:	d009      	beq.n	80117aa <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2208      	movs	r2, #8
 801179a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801179c:	d005      	beq.n	80117aa <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801179e:	68ba      	ldr	r2, [r7, #8]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	0011      	movs	r1, r2
 80117a4:	0018      	movs	r0, r3
 80117a6:	f000 f80b 	bl	80117c0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2240      	movs	r2, #64	@ 0x40
 80117ae:	2100      	movs	r1, #0
 80117b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	0018      	movs	r0, r3
 80117b6:	46bd      	mov	sp, r7
 80117b8:	b008      	add	sp, #32
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	ffff0000 	.word	0xffff0000

080117c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80117c0:	b5b0      	push	{r4, r5, r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2241      	movs	r2, #65	@ 0x41
 80117ce:	5c9b      	ldrb	r3, [r3, r2]
 80117d0:	b2db      	uxtb	r3, r3
 80117d2:	001a      	movs	r2, r3
 80117d4:	2328      	movs	r3, #40	@ 0x28
 80117d6:	4013      	ands	r3, r2
 80117d8:	2b28      	cmp	r3, #40	@ 0x28
 80117da:	d000      	beq.n	80117de <I2C_ITAddrCplt+0x1e>
 80117dc:	e088      	b.n	80118f0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	0c1b      	lsrs	r3, r3, #16
 80117e6:	b2da      	uxtb	r2, r3
 80117e8:	250f      	movs	r5, #15
 80117ea:	197b      	adds	r3, r7, r5
 80117ec:	2101      	movs	r1, #1
 80117ee:	400a      	ands	r2, r1
 80117f0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	699b      	ldr	r3, [r3, #24]
 80117f8:	0c1b      	lsrs	r3, r3, #16
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	200c      	movs	r0, #12
 80117fe:	183b      	adds	r3, r7, r0
 8011800:	21fe      	movs	r1, #254	@ 0xfe
 8011802:	400a      	ands	r2, r1
 8011804:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	b29a      	uxth	r2, r3
 801180e:	240a      	movs	r4, #10
 8011810:	193b      	adds	r3, r7, r4
 8011812:	0592      	lsls	r2, r2, #22
 8011814:	0d92      	lsrs	r2, r2, #22
 8011816:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	b29a      	uxth	r2, r3
 8011820:	2308      	movs	r3, #8
 8011822:	18fb      	adds	r3, r7, r3
 8011824:	21fe      	movs	r1, #254	@ 0xfe
 8011826:	400a      	ands	r2, r1
 8011828:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	2b02      	cmp	r3, #2
 8011830:	d148      	bne.n	80118c4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011832:	0021      	movs	r1, r4
 8011834:	187b      	adds	r3, r7, r1
 8011836:	881b      	ldrh	r3, [r3, #0]
 8011838:	09db      	lsrs	r3, r3, #7
 801183a:	b29a      	uxth	r2, r3
 801183c:	183b      	adds	r3, r7, r0
 801183e:	881b      	ldrh	r3, [r3, #0]
 8011840:	4053      	eors	r3, r2
 8011842:	b29b      	uxth	r3, r3
 8011844:	001a      	movs	r2, r3
 8011846:	2306      	movs	r3, #6
 8011848:	4013      	ands	r3, r2
 801184a:	d120      	bne.n	801188e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 801184c:	183b      	adds	r3, r7, r0
 801184e:	187a      	adds	r2, r7, r1
 8011850:	8812      	ldrh	r2, [r2, #0]
 8011852:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011862:	2b02      	cmp	r3, #2
 8011864:	d14c      	bne.n	8011900 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2208      	movs	r2, #8
 8011872:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2240      	movs	r2, #64	@ 0x40
 8011878:	2100      	movs	r1, #0
 801187a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801187c:	183b      	adds	r3, r7, r0
 801187e:	881a      	ldrh	r2, [r3, #0]
 8011880:	197b      	adds	r3, r7, r5
 8011882:	7819      	ldrb	r1, [r3, #0]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	0018      	movs	r0, r3
 8011888:	f7ff fa39 	bl	8010cfe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801188c:	e038      	b.n	8011900 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801188e:	240c      	movs	r4, #12
 8011890:	193b      	adds	r3, r7, r4
 8011892:	2208      	movs	r2, #8
 8011894:	18ba      	adds	r2, r7, r2
 8011896:	8812      	ldrh	r2, [r2, #0]
 8011898:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801189a:	2380      	movs	r3, #128	@ 0x80
 801189c:	021a      	lsls	r2, r3, #8
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	0011      	movs	r1, r2
 80118a2:	0018      	movs	r0, r3
 80118a4:	f001 f85c 	bl	8012960 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2240      	movs	r2, #64	@ 0x40
 80118ac:	2100      	movs	r1, #0
 80118ae:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80118b0:	193b      	adds	r3, r7, r4
 80118b2:	881a      	ldrh	r2, [r3, #0]
 80118b4:	230f      	movs	r3, #15
 80118b6:	18fb      	adds	r3, r7, r3
 80118b8:	7819      	ldrb	r1, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	0018      	movs	r0, r3
 80118be:	f7ff fa1e 	bl	8010cfe <HAL_I2C_AddrCallback>
}
 80118c2:	e01d      	b.n	8011900 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80118c4:	2380      	movs	r3, #128	@ 0x80
 80118c6:	021a      	lsls	r2, r3, #8
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	0011      	movs	r1, r2
 80118cc:	0018      	movs	r0, r3
 80118ce:	f001 f847 	bl	8012960 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2240      	movs	r2, #64	@ 0x40
 80118d6:	2100      	movs	r1, #0
 80118d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80118da:	230c      	movs	r3, #12
 80118dc:	18fb      	adds	r3, r7, r3
 80118de:	881a      	ldrh	r2, [r3, #0]
 80118e0:	230f      	movs	r3, #15
 80118e2:	18fb      	adds	r3, r7, r3
 80118e4:	7819      	ldrb	r1, [r3, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	0018      	movs	r0, r3
 80118ea:	f7ff fa08 	bl	8010cfe <HAL_I2C_AddrCallback>
}
 80118ee:	e007      	b.n	8011900 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2208      	movs	r2, #8
 80118f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2240      	movs	r2, #64	@ 0x40
 80118fc:	2100      	movs	r1, #0
 80118fe:	5499      	strb	r1, [r3, r2]
}
 8011900:	46c0      	nop			@ (mov r8, r8)
 8011902:	46bd      	mov	sp, r7
 8011904:	b004      	add	sp, #16
 8011906:	bdb0      	pop	{r4, r5, r7, pc}

08011908 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2242      	movs	r2, #66	@ 0x42
 8011914:	2100      	movs	r1, #0
 8011916:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2241      	movs	r2, #65	@ 0x41
 801191c:	5c9b      	ldrb	r3, [r3, r2]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	2b21      	cmp	r3, #33	@ 0x21
 8011922:	d117      	bne.n	8011954 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2241      	movs	r2, #65	@ 0x41
 8011928:	2120      	movs	r1, #32
 801192a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2211      	movs	r2, #17
 8011930:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2101      	movs	r1, #1
 801193c:	0018      	movs	r0, r3
 801193e:	f001 f80f 	bl	8012960 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2240      	movs	r2, #64	@ 0x40
 8011946:	2100      	movs	r1, #0
 8011948:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	0018      	movs	r0, r3
 801194e:	f7ff f9b6 	bl	8010cbe <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011952:	e016      	b.n	8011982 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2241      	movs	r2, #65	@ 0x41
 8011958:	2120      	movs	r1, #32
 801195a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2212      	movs	r2, #18
 8011960:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2102      	movs	r1, #2
 801196c:	0018      	movs	r0, r3
 801196e:	f000 fff7 	bl	8012960 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2240      	movs	r2, #64	@ 0x40
 8011976:	2100      	movs	r1, #0
 8011978:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	0018      	movs	r0, r3
 801197e:	f7ff f9a6 	bl	8010cce <HAL_I2C_MasterRxCpltCallback>
}
 8011982:	46c0      	nop			@ (mov r8, r8)
 8011984:	46bd      	mov	sp, r7
 8011986:	b002      	add	sp, #8
 8011988:	bd80      	pop	{r7, pc}
	...

0801198c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2242      	movs	r2, #66	@ 0x42
 80119a0:	2100      	movs	r1, #0
 80119a2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	2380      	movs	r3, #128	@ 0x80
 80119a8:	01db      	lsls	r3, r3, #7
 80119aa:	4013      	ands	r3, r2
 80119ac:	d008      	beq.n	80119c0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4924      	ldr	r1, [pc, #144]	@ (8011a4c <I2C_ITSlaveSeqCplt+0xc0>)
 80119ba:	400a      	ands	r2, r1
 80119bc:	601a      	str	r2, [r3, #0]
 80119be:	e00c      	b.n	80119da <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80119c0:	68fa      	ldr	r2, [r7, #12]
 80119c2:	2380      	movs	r3, #128	@ 0x80
 80119c4:	021b      	lsls	r3, r3, #8
 80119c6:	4013      	ands	r3, r2
 80119c8:	d007      	beq.n	80119da <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	491e      	ldr	r1, [pc, #120]	@ (8011a50 <I2C_ITSlaveSeqCplt+0xc4>)
 80119d6:	400a      	ands	r2, r1
 80119d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2241      	movs	r2, #65	@ 0x41
 80119de:	5c9b      	ldrb	r3, [r3, r2]
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b29      	cmp	r3, #41	@ 0x29
 80119e4:	d114      	bne.n	8011a10 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2241      	movs	r2, #65	@ 0x41
 80119ea:	2128      	movs	r1, #40	@ 0x28
 80119ec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2221      	movs	r2, #33	@ 0x21
 80119f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2101      	movs	r1, #1
 80119f8:	0018      	movs	r0, r3
 80119fa:	f000 ffb1 	bl	8012960 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2240      	movs	r2, #64	@ 0x40
 8011a02:	2100      	movs	r1, #0
 8011a04:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	0018      	movs	r0, r3
 8011a0a:	f7ff f968 	bl	8010cde <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011a0e:	e019      	b.n	8011a44 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2241      	movs	r2, #65	@ 0x41
 8011a14:	5c9b      	ldrb	r3, [r3, r2]
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a1a:	d113      	bne.n	8011a44 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2241      	movs	r2, #65	@ 0x41
 8011a20:	2128      	movs	r1, #40	@ 0x28
 8011a22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2222      	movs	r2, #34	@ 0x22
 8011a28:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2102      	movs	r1, #2
 8011a2e:	0018      	movs	r0, r3
 8011a30:	f000 ff96 	bl	8012960 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2240      	movs	r2, #64	@ 0x40
 8011a38:	2100      	movs	r1, #0
 8011a3a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	0018      	movs	r0, r3
 8011a40:	f7ff f955 	bl	8010cee <HAL_I2C_SlaveRxCpltCallback>
}
 8011a44:	46c0      	nop			@ (mov r8, r8)
 8011a46:	46bd      	mov	sp, r7
 8011a48:	b004      	add	sp, #16
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	ffffbfff 	.word	0xffffbfff
 8011a50:	ffff7fff 	.word	0xffff7fff

08011a54 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2220      	movs	r2, #32
 8011a68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2241      	movs	r2, #65	@ 0x41
 8011a6e:	5c9b      	ldrb	r3, [r3, r2]
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2b21      	cmp	r3, #33	@ 0x21
 8011a74:	d108      	bne.n	8011a88 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2101      	movs	r1, #1
 8011a7a:	0018      	movs	r0, r3
 8011a7c:	f000 ff70 	bl	8012960 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2211      	movs	r2, #17
 8011a84:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a86:	e00d      	b.n	8011aa4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2241      	movs	r2, #65	@ 0x41
 8011a8c:	5c9b      	ldrb	r3, [r3, r2]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	2b22      	cmp	r3, #34	@ 0x22
 8011a92:	d107      	bne.n	8011aa4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2102      	movs	r1, #2
 8011a98:	0018      	movs	r0, r3
 8011a9a:	f000 ff61 	bl	8012960 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2212      	movs	r2, #18
 8011aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	685a      	ldr	r2, [r3, #4]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	494e      	ldr	r1, [pc, #312]	@ (8011be8 <I2C_ITMasterCplt+0x194>)
 8011ab0:	400a      	ands	r2, r1
 8011ab2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	4a4b      	ldr	r2, [pc, #300]	@ (8011bec <I2C_ITMasterCplt+0x198>)
 8011abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	2210      	movs	r2, #16
 8011ac4:	4013      	ands	r3, r2
 8011ac6:	d009      	beq.n	8011adc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2210      	movs	r2, #16
 8011ace:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ad4:	2204      	movs	r2, #4
 8011ad6:	431a      	orrs	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2241      	movs	r2, #65	@ 0x41
 8011ae0:	5c9b      	ldrb	r3, [r3, r2]
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	2b60      	cmp	r3, #96	@ 0x60
 8011ae6:	d109      	bne.n	8011afc <I2C_ITMasterCplt+0xa8>
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	2204      	movs	r2, #4
 8011aec:	4013      	ands	r3, r2
 8011aee:	d005      	beq.n	8011afc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011afa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	0018      	movs	r0, r3
 8011b00:	f000 fb19 	bl	8012136 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b08:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2241      	movs	r2, #65	@ 0x41
 8011b0e:	5c9b      	ldrb	r3, [r3, r2]
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b60      	cmp	r3, #96	@ 0x60
 8011b14:	d002      	beq.n	8011b1c <I2C_ITMasterCplt+0xc8>
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d007      	beq.n	8011b2c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	0011      	movs	r1, r2
 8011b24:	0018      	movs	r0, r3
 8011b26:	f000 f9db 	bl	8011ee0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011b2a:	e058      	b.n	8011bde <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2241      	movs	r2, #65	@ 0x41
 8011b30:	5c9b      	ldrb	r3, [r3, r2]
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	2b21      	cmp	r3, #33	@ 0x21
 8011b36:	d126      	bne.n	8011b86 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2241      	movs	r2, #65	@ 0x41
 8011b3c:	2120      	movs	r1, #32
 8011b3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2242      	movs	r2, #66	@ 0x42
 8011b4a:	5c9b      	ldrb	r3, [r3, r2]
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	2b40      	cmp	r3, #64	@ 0x40
 8011b50:	d10c      	bne.n	8011b6c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2242      	movs	r2, #66	@ 0x42
 8011b56:	2100      	movs	r1, #0
 8011b58:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2240      	movs	r2, #64	@ 0x40
 8011b5e:	2100      	movs	r1, #0
 8011b60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	0018      	movs	r0, r3
 8011b66:	f7ff f8e2 	bl	8010d2e <HAL_I2C_MemTxCpltCallback>
}
 8011b6a:	e038      	b.n	8011bde <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2242      	movs	r2, #66	@ 0x42
 8011b70:	2100      	movs	r1, #0
 8011b72:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2240      	movs	r2, #64	@ 0x40
 8011b78:	2100      	movs	r1, #0
 8011b7a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	0018      	movs	r0, r3
 8011b80:	f7ff f89d 	bl	8010cbe <HAL_I2C_MasterTxCpltCallback>
}
 8011b84:	e02b      	b.n	8011bde <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2241      	movs	r2, #65	@ 0x41
 8011b8a:	5c9b      	ldrb	r3, [r3, r2]
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	2b22      	cmp	r3, #34	@ 0x22
 8011b90:	d125      	bne.n	8011bde <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2241      	movs	r2, #65	@ 0x41
 8011b96:	2120      	movs	r1, #32
 8011b98:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2242      	movs	r2, #66	@ 0x42
 8011ba4:	5c9b      	ldrb	r3, [r3, r2]
 8011ba6:	b2db      	uxtb	r3, r3
 8011ba8:	2b40      	cmp	r3, #64	@ 0x40
 8011baa:	d10c      	bne.n	8011bc6 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2242      	movs	r2, #66	@ 0x42
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2240      	movs	r2, #64	@ 0x40
 8011bb8:	2100      	movs	r1, #0
 8011bba:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	f7ff f8bd 	bl	8010d3e <HAL_I2C_MemRxCpltCallback>
}
 8011bc4:	e00b      	b.n	8011bde <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2242      	movs	r2, #66	@ 0x42
 8011bca:	2100      	movs	r1, #0
 8011bcc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2240      	movs	r2, #64	@ 0x40
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	0018      	movs	r0, r3
 8011bda:	f7ff f878 	bl	8010cce <HAL_I2C_MasterRxCpltCallback>
}
 8011bde:	46c0      	nop			@ (mov r8, r8)
 8011be0:	46bd      	mov	sp, r7
 8011be2:	b006      	add	sp, #24
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	46c0      	nop			@ (mov r8, r8)
 8011be8:	fe00e800 	.word	0xfe00e800
 8011bec:	ffff0000 	.word	0xffff0000

08011bf0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b086      	sub	sp, #24
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011c06:	200f      	movs	r0, #15
 8011c08:	183b      	adds	r3, r7, r0
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	2141      	movs	r1, #65	@ 0x41
 8011c0e:	5c52      	ldrb	r2, [r2, r1]
 8011c10:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2220      	movs	r2, #32
 8011c18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011c1a:	183b      	adds	r3, r7, r0
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b21      	cmp	r3, #33	@ 0x21
 8011c20:	d003      	beq.n	8011c2a <I2C_ITSlaveCplt+0x3a>
 8011c22:	183b      	adds	r3, r7, r0
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b29      	cmp	r3, #41	@ 0x29
 8011c28:	d109      	bne.n	8011c3e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011c2a:	4a7b      	ldr	r2, [pc, #492]	@ (8011e18 <I2C_ITSlaveCplt+0x228>)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	0011      	movs	r1, r2
 8011c30:	0018      	movs	r0, r3
 8011c32:	f000 fe95 	bl	8012960 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2221      	movs	r2, #33	@ 0x21
 8011c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c3c:	e011      	b.n	8011c62 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011c3e:	220f      	movs	r2, #15
 8011c40:	18bb      	adds	r3, r7, r2
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	2b22      	cmp	r3, #34	@ 0x22
 8011c46:	d003      	beq.n	8011c50 <I2C_ITSlaveCplt+0x60>
 8011c48:	18bb      	adds	r3, r7, r2
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c4e:	d108      	bne.n	8011c62 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011c50:	4a72      	ldr	r2, [pc, #456]	@ (8011e1c <I2C_ITSlaveCplt+0x22c>)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	0011      	movs	r1, r2
 8011c56:	0018      	movs	r0, r3
 8011c58:	f000 fe82 	bl	8012960 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2222      	movs	r2, #34	@ 0x22
 8011c60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	685a      	ldr	r2, [r3, #4]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2180      	movs	r1, #128	@ 0x80
 8011c6e:	0209      	lsls	r1, r1, #8
 8011c70:	430a      	orrs	r2, r1
 8011c72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	685a      	ldr	r2, [r3, #4]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4968      	ldr	r1, [pc, #416]	@ (8011e20 <I2C_ITSlaveCplt+0x230>)
 8011c80:	400a      	ands	r2, r1
 8011c82:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	0018      	movs	r0, r3
 8011c88:	f000 fa55 	bl	8012136 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011c8c:	693a      	ldr	r2, [r7, #16]
 8011c8e:	2380      	movs	r3, #128	@ 0x80
 8011c90:	01db      	lsls	r3, r3, #7
 8011c92:	4013      	ands	r3, r2
 8011c94:	d013      	beq.n	8011cbe <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4960      	ldr	r1, [pc, #384]	@ (8011e24 <I2C_ITSlaveCplt+0x234>)
 8011ca2:	400a      	ands	r2, r1
 8011ca4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d01f      	beq.n	8011cee <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011cbc:	e017      	b.n	8011cee <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	2380      	movs	r3, #128	@ 0x80
 8011cc2:	021b      	lsls	r3, r3, #8
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	d012      	beq.n	8011cee <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4955      	ldr	r1, [pc, #340]	@ (8011e28 <I2C_ITSlaveCplt+0x238>)
 8011cd4:	400a      	ands	r2, r1
 8011cd6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d006      	beq.n	8011cee <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	2204      	movs	r2, #4
 8011cf2:	4013      	ands	r3, r2
 8011cf4:	d020      	beq.n	8011d38 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2204      	movs	r2, #4
 8011cfa:	4393      	bics	r3, r2
 8011cfc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d08:	b2d2      	uxtb	r2, r2
 8011d0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d10:	1c5a      	adds	r2, r3, #1
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d00c      	beq.n	8011d38 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d22:	3b01      	subs	r3, #1
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	3b01      	subs	r3, #1
 8011d32:	b29a      	uxth	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d005      	beq.n	8011d4e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d46:	2204      	movs	r2, #4
 8011d48:	431a      	orrs	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2242      	movs	r2, #66	@ 0x42
 8011d52:	2100      	movs	r1, #0
 8011d54:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d013      	beq.n	8011d8c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	0011      	movs	r1, r2
 8011d6c:	0018      	movs	r0, r3
 8011d6e:	f000 f8b7 	bl	8011ee0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2241      	movs	r2, #65	@ 0x41
 8011d76:	5c9b      	ldrb	r3, [r3, r2]
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	2b28      	cmp	r3, #40	@ 0x28
 8011d7c:	d147      	bne.n	8011e0e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011d7e:	697a      	ldr	r2, [r7, #20]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	0011      	movs	r1, r2
 8011d84:	0018      	movs	r0, r3
 8011d86:	f000 f853 	bl	8011e30 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011d8a:	e040      	b.n	8011e0e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d90:	4a26      	ldr	r2, [pc, #152]	@ (8011e2c <I2C_ITSlaveCplt+0x23c>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d016      	beq.n	8011dc4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	0018      	movs	r0, r3
 8011d9a:	f7ff fdf7 	bl	801198c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	4a22      	ldr	r2, [pc, #136]	@ (8011e2c <I2C_ITSlaveCplt+0x23c>)
 8011da2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2241      	movs	r2, #65	@ 0x41
 8011da8:	2120      	movs	r1, #32
 8011daa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2240      	movs	r2, #64	@ 0x40
 8011db6:	2100      	movs	r1, #0
 8011db8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	0018      	movs	r0, r3
 8011dbe:	f7fe ffae 	bl	8010d1e <HAL_I2C_ListenCpltCallback>
}
 8011dc2:	e024      	b.n	8011e0e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2241      	movs	r2, #65	@ 0x41
 8011dc8:	5c9b      	ldrb	r3, [r3, r2]
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	2b22      	cmp	r3, #34	@ 0x22
 8011dce:	d10f      	bne.n	8011df0 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2241      	movs	r2, #65	@ 0x41
 8011dd4:	2120      	movs	r1, #32
 8011dd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2240      	movs	r2, #64	@ 0x40
 8011de2:	2100      	movs	r1, #0
 8011de4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	0018      	movs	r0, r3
 8011dea:	f7fe ff80 	bl	8010cee <HAL_I2C_SlaveRxCpltCallback>
}
 8011dee:	e00e      	b.n	8011e0e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2241      	movs	r2, #65	@ 0x41
 8011df4:	2120      	movs	r1, #32
 8011df6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2240      	movs	r2, #64	@ 0x40
 8011e02:	2100      	movs	r1, #0
 8011e04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	0018      	movs	r0, r3
 8011e0a:	f7fe ff68 	bl	8010cde <HAL_I2C_SlaveTxCpltCallback>
}
 8011e0e:	46c0      	nop			@ (mov r8, r8)
 8011e10:	46bd      	mov	sp, r7
 8011e12:	b006      	add	sp, #24
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	46c0      	nop			@ (mov r8, r8)
 8011e18:	00008001 	.word	0x00008001
 8011e1c:	00008002 	.word	0x00008002
 8011e20:	fe00e800 	.word	0xfe00e800
 8011e24:	ffffbfff 	.word	0xffffbfff
 8011e28:	ffff7fff 	.word	0xffff7fff
 8011e2c:	ffff0000 	.word	0xffff0000

08011e30 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a26      	ldr	r2, [pc, #152]	@ (8011ed8 <I2C_ITListenCplt+0xa8>)
 8011e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2200      	movs	r2, #0
 8011e44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2241      	movs	r2, #65	@ 0x41
 8011e4a:	2120      	movs	r1, #32
 8011e4c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2242      	movs	r2, #66	@ 0x42
 8011e52:	2100      	movs	r1, #0
 8011e54:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	2204      	movs	r2, #4
 8011e60:	4013      	ands	r3, r2
 8011e62:	d022      	beq.n	8011eaa <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e6e:	b2d2      	uxtb	r2, r2
 8011e70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e76:	1c5a      	adds	r2, r3, #1
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d012      	beq.n	8011eaa <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	3b01      	subs	r3, #1
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ea2:	2204      	movs	r2, #4
 8011ea4:	431a      	orrs	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8011edc <I2C_ITListenCplt+0xac>)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	0011      	movs	r1, r2
 8011eb0:	0018      	movs	r0, r3
 8011eb2:	f000 fd55 	bl	8012960 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2210      	movs	r2, #16
 8011ebc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2240      	movs	r2, #64	@ 0x40
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	0018      	movs	r0, r3
 8011eca:	f7fe ff28 	bl	8010d1e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011ece:	46c0      	nop			@ (mov r8, r8)
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	b002      	add	sp, #8
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	46c0      	nop			@ (mov r8, r8)
 8011ed8:	ffff0000 	.word	0xffff0000
 8011edc:	00008003 	.word	0x00008003

08011ee0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011eea:	200f      	movs	r0, #15
 8011eec:	183b      	adds	r3, r7, r0
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	2141      	movs	r1, #65	@ 0x41
 8011ef2:	5c52      	ldrb	r2, [r2, r1]
 8011ef4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2242      	movs	r2, #66	@ 0x42
 8011efa:	2100      	movs	r1, #0
 8011efc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4a72      	ldr	r2, [pc, #456]	@ (80120cc <I2C_ITError+0x1ec>)
 8011f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	431a      	orrs	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011f16:	183b      	adds	r3, r7, r0
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	2b28      	cmp	r3, #40	@ 0x28
 8011f1c:	d007      	beq.n	8011f2e <I2C_ITError+0x4e>
 8011f1e:	183b      	adds	r3, r7, r0
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	2b29      	cmp	r3, #41	@ 0x29
 8011f24:	d003      	beq.n	8011f2e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011f26:	183b      	adds	r3, r7, r0
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f2c:	d10c      	bne.n	8011f48 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2103      	movs	r1, #3
 8011f32:	0018      	movs	r0, r3
 8011f34:	f000 fd14 	bl	8012960 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2241      	movs	r2, #65	@ 0x41
 8011f3c:	2128      	movs	r1, #40	@ 0x28
 8011f3e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	4a63      	ldr	r2, [pc, #396]	@ (80120d0 <I2C_ITError+0x1f0>)
 8011f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8011f46:	e032      	b.n	8011fae <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011f48:	4a62      	ldr	r2, [pc, #392]	@ (80120d4 <I2C_ITError+0x1f4>)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	0011      	movs	r1, r2
 8011f4e:	0018      	movs	r0, r3
 8011f50:	f000 fd06 	bl	8012960 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	0018      	movs	r0, r3
 8011f58:	f000 f8ed 	bl	8012136 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2241      	movs	r2, #65	@ 0x41
 8011f60:	5c9b      	ldrb	r3, [r3, r2]
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	2b60      	cmp	r3, #96	@ 0x60
 8011f66:	d01f      	beq.n	8011fa8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2241      	movs	r2, #65	@ 0x41
 8011f6c:	2120      	movs	r1, #32
 8011f6e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	699b      	ldr	r3, [r3, #24]
 8011f76:	2220      	movs	r2, #32
 8011f78:	4013      	ands	r3, r2
 8011f7a:	2b20      	cmp	r3, #32
 8011f7c:	d114      	bne.n	8011fa8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	699b      	ldr	r3, [r3, #24]
 8011f84:	2210      	movs	r2, #16
 8011f86:	4013      	ands	r3, r2
 8011f88:	2b10      	cmp	r3, #16
 8011f8a:	d109      	bne.n	8011fa0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2210      	movs	r2, #16
 8011f92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f98:	2204      	movs	r2, #4
 8011f9a:	431a      	orrs	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2220      	movs	r2, #32
 8011fa6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fb2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d03b      	beq.n	8012034 <I2C_ITError+0x154>
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	2b11      	cmp	r3, #17
 8011fc0:	d002      	beq.n	8011fc8 <I2C_ITError+0xe8>
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	2b21      	cmp	r3, #33	@ 0x21
 8011fc6:	d135      	bne.n	8012034 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	681a      	ldr	r2, [r3, #0]
 8011fce:	2380      	movs	r3, #128	@ 0x80
 8011fd0:	01db      	lsls	r3, r3, #7
 8011fd2:	401a      	ands	r2, r3
 8011fd4:	2380      	movs	r3, #128	@ 0x80
 8011fd6:	01db      	lsls	r3, r3, #7
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d107      	bne.n	8011fec <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	493c      	ldr	r1, [pc, #240]	@ (80120d8 <I2C_ITError+0x1f8>)
 8011fe8:	400a      	ands	r2, r1
 8011fea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ff0:	0018      	movs	r0, r3
 8011ff2:	f7fd fd62 	bl	800faba <HAL_DMA_GetState>
 8011ff6:	0003      	movs	r3, r0
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d016      	beq.n	801202a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012000:	4a36      	ldr	r2, [pc, #216]	@ (80120dc <I2C_ITError+0x1fc>)
 8012002:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2240      	movs	r2, #64	@ 0x40
 8012008:	2100      	movs	r1, #0
 801200a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012010:	0018      	movs	r0, r3
 8012012:	f7fd fc5d 	bl	800f8d0 <HAL_DMA_Abort_IT>
 8012016:	1e03      	subs	r3, r0, #0
 8012018:	d051      	beq.n	80120be <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801201e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012024:	0018      	movs	r0, r3
 8012026:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012028:	e049      	b.n	80120be <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	0018      	movs	r0, r3
 801202e:	f000 f859 	bl	80120e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012032:	e044      	b.n	80120be <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012038:	2b00      	cmp	r3, #0
 801203a:	d03b      	beq.n	80120b4 <I2C_ITError+0x1d4>
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2b12      	cmp	r3, #18
 8012040:	d002      	beq.n	8012048 <I2C_ITError+0x168>
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	2b22      	cmp	r3, #34	@ 0x22
 8012046:	d135      	bne.n	80120b4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	2380      	movs	r3, #128	@ 0x80
 8012050:	021b      	lsls	r3, r3, #8
 8012052:	401a      	ands	r2, r3
 8012054:	2380      	movs	r3, #128	@ 0x80
 8012056:	021b      	lsls	r3, r3, #8
 8012058:	429a      	cmp	r2, r3
 801205a:	d107      	bne.n	801206c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	491e      	ldr	r1, [pc, #120]	@ (80120e0 <I2C_ITError+0x200>)
 8012068:	400a      	ands	r2, r1
 801206a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012070:	0018      	movs	r0, r3
 8012072:	f7fd fd22 	bl	800faba <HAL_DMA_GetState>
 8012076:	0003      	movs	r3, r0
 8012078:	2b01      	cmp	r3, #1
 801207a:	d016      	beq.n	80120aa <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012080:	4a16      	ldr	r2, [pc, #88]	@ (80120dc <I2C_ITError+0x1fc>)
 8012082:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2240      	movs	r2, #64	@ 0x40
 8012088:	2100      	movs	r1, #0
 801208a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012090:	0018      	movs	r0, r3
 8012092:	f7fd fc1d 	bl	800f8d0 <HAL_DMA_Abort_IT>
 8012096:	1e03      	subs	r3, r0, #0
 8012098:	d013      	beq.n	80120c2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801209e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120a4:	0018      	movs	r0, r3
 80120a6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80120a8:	e00b      	b.n	80120c2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	0018      	movs	r0, r3
 80120ae:	f000 f819 	bl	80120e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80120b2:	e006      	b.n	80120c2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	0018      	movs	r0, r3
 80120b8:	f000 f814 	bl	80120e4 <I2C_TreatErrorCallback>
  }
}
 80120bc:	e002      	b.n	80120c4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80120be:	46c0      	nop			@ (mov r8, r8)
 80120c0:	e000      	b.n	80120c4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80120c2:	46c0      	nop			@ (mov r8, r8)
}
 80120c4:	46c0      	nop			@ (mov r8, r8)
 80120c6:	46bd      	mov	sp, r7
 80120c8:	b004      	add	sp, #16
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	ffff0000 	.word	0xffff0000
 80120d0:	08010fc5 	.word	0x08010fc5
 80120d4:	00008003 	.word	0x00008003
 80120d8:	ffffbfff 	.word	0xffffbfff
 80120dc:	080122ef 	.word	0x080122ef
 80120e0:	ffff7fff 	.word	0xffff7fff

080120e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2241      	movs	r2, #65	@ 0x41
 80120f0:	5c9b      	ldrb	r3, [r3, r2]
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	2b60      	cmp	r3, #96	@ 0x60
 80120f6:	d10f      	bne.n	8012118 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2241      	movs	r2, #65	@ 0x41
 80120fc:	2120      	movs	r1, #32
 80120fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2200      	movs	r2, #0
 8012104:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2240      	movs	r2, #64	@ 0x40
 801210a:	2100      	movs	r1, #0
 801210c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	0018      	movs	r0, r3
 8012112:	f7fe fe24 	bl	8010d5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012116:	e00a      	b.n	801212e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2240      	movs	r2, #64	@ 0x40
 8012122:	2100      	movs	r1, #0
 8012124:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	0018      	movs	r0, r3
 801212a:	f7fe fe10 	bl	8010d4e <HAL_I2C_ErrorCallback>
}
 801212e:	46c0      	nop			@ (mov r8, r8)
 8012130:	46bd      	mov	sp, r7
 8012132:	b002      	add	sp, #8
 8012134:	bd80      	pop	{r7, pc}

08012136 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b082      	sub	sp, #8
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	699b      	ldr	r3, [r3, #24]
 8012144:	2202      	movs	r2, #2
 8012146:	4013      	ands	r3, r2
 8012148:	2b02      	cmp	r3, #2
 801214a:	d103      	bne.n	8012154 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2200      	movs	r2, #0
 8012152:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	699b      	ldr	r3, [r3, #24]
 801215a:	2201      	movs	r2, #1
 801215c:	4013      	ands	r3, r2
 801215e:	2b01      	cmp	r3, #1
 8012160:	d007      	beq.n	8012172 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	699a      	ldr	r2, [r3, #24]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2101      	movs	r1, #1
 801216e:	430a      	orrs	r2, r1
 8012170:	619a      	str	r2, [r3, #24]
  }
}
 8012172:	46c0      	nop			@ (mov r8, r8)
 8012174:	46bd      	mov	sp, r7
 8012176:	b002      	add	sp, #8
 8012178:	bd80      	pop	{r7, pc}
	...

0801217c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b084      	sub	sp, #16
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012188:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4920      	ldr	r1, [pc, #128]	@ (8012218 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012196:	400a      	ands	r2, r1
 8012198:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801219e:	b29b      	uxth	r3, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d105      	bne.n	80121b0 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2120      	movs	r1, #32
 80121a8:	0018      	movs	r0, r3
 80121aa:	f000 fb4b 	bl	8012844 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80121ae:	e02e      	b.n	801220e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b4:	68fa      	ldr	r2, [r7, #12]
 80121b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80121b8:	189a      	adds	r2, r3, r2
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	2bff      	cmp	r3, #255	@ 0xff
 80121c6:	d903      	bls.n	80121d0 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	22ff      	movs	r2, #255	@ 0xff
 80121cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80121ce:	e004      	b.n	80121da <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121e2:	0019      	movs	r1, r3
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	3328      	adds	r3, #40	@ 0x28
 80121ea:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80121f0:	f7fd fac8 	bl	800f784 <HAL_DMA_Start_IT>
 80121f4:	1e03      	subs	r3, r0, #0
 80121f6:	d005      	beq.n	8012204 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2110      	movs	r1, #16
 80121fc:	0018      	movs	r0, r3
 80121fe:	f7ff fe6f 	bl	8011ee0 <I2C_ITError>
}
 8012202:	e004      	b.n	801220e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2140      	movs	r1, #64	@ 0x40
 8012208:	0018      	movs	r0, r3
 801220a:	f000 fb1b 	bl	8012844 <I2C_Enable_IRQ>
}
 801220e:	46c0      	nop			@ (mov r8, r8)
 8012210:	46bd      	mov	sp, r7
 8012212:	b004      	add	sp, #16
 8012214:	bd80      	pop	{r7, pc}
 8012216:	46c0      	nop			@ (mov r8, r8)
 8012218:	ffffbfff 	.word	0xffffbfff

0801221c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012228:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4920      	ldr	r1, [pc, #128]	@ (80122b8 <I2C_DMAMasterReceiveCplt+0x9c>)
 8012236:	400a      	ands	r2, r1
 8012238:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801223e:	b29b      	uxth	r3, r3
 8012240:	2b00      	cmp	r3, #0
 8012242:	d105      	bne.n	8012250 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2120      	movs	r1, #32
 8012248:	0018      	movs	r0, r3
 801224a:	f000 fafb 	bl	8012844 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801224e:	e02e      	b.n	80122ae <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012254:	68fa      	ldr	r2, [r7, #12]
 8012256:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012258:	189a      	adds	r2, r3, r2
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012262:	b29b      	uxth	r3, r3
 8012264:	2bff      	cmp	r3, #255	@ 0xff
 8012266:	d903      	bls.n	8012270 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	22ff      	movs	r2, #255	@ 0xff
 801226c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801226e:	e004      	b.n	801227a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012274:	b29a      	uxth	r2, r3
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	3324      	adds	r3, #36	@ 0x24
 8012284:	0019      	movs	r1, r3
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801228a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012290:	f7fd fa78 	bl	800f784 <HAL_DMA_Start_IT>
 8012294:	1e03      	subs	r3, r0, #0
 8012296:	d005      	beq.n	80122a4 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2110      	movs	r1, #16
 801229c:	0018      	movs	r0, r3
 801229e:	f7ff fe1f 	bl	8011ee0 <I2C_ITError>
}
 80122a2:	e004      	b.n	80122ae <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2140      	movs	r1, #64	@ 0x40
 80122a8:	0018      	movs	r0, r3
 80122aa:	f000 facb 	bl	8012844 <I2C_Enable_IRQ>
}
 80122ae:	46c0      	nop			@ (mov r8, r8)
 80122b0:	46bd      	mov	sp, r7
 80122b2:	b004      	add	sp, #16
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	46c0      	nop			@ (mov r8, r8)
 80122b8:	ffff7fff 	.word	0xffff7fff

080122bc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122c8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	685a      	ldr	r2, [r3, #4]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2180      	movs	r1, #128	@ 0x80
 80122d6:	0209      	lsls	r1, r1, #8
 80122d8:	430a      	orrs	r2, r1
 80122da:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2110      	movs	r1, #16
 80122e0:	0018      	movs	r0, r3
 80122e2:	f7ff fdfd 	bl	8011ee0 <I2C_ITError>
}
 80122e6:	46c0      	nop			@ (mov r8, r8)
 80122e8:	46bd      	mov	sp, r7
 80122ea:	b004      	add	sp, #16
 80122ec:	bd80      	pop	{r7, pc}

080122ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b084      	sub	sp, #16
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012300:	2b00      	cmp	r3, #0
 8012302:	d003      	beq.n	801230c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012308:	2200      	movs	r2, #0
 801230a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012310:	2b00      	cmp	r3, #0
 8012312:	d003      	beq.n	801231c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012318:	2200      	movs	r2, #0
 801231a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	0018      	movs	r0, r3
 8012320:	f7ff fee0 	bl	80120e4 <I2C_TreatErrorCallback>
}
 8012324:	46c0      	nop			@ (mov r8, r8)
 8012326:	46bd      	mov	sp, r7
 8012328:	b004      	add	sp, #16
 801232a:	bd80      	pop	{r7, pc}

0801232c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	603b      	str	r3, [r7, #0]
 8012338:	1dfb      	adds	r3, r7, #7
 801233a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801233c:	e030      	b.n	80123a0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	3301      	adds	r3, #1
 8012342:	d02d      	beq.n	80123a0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012344:	f7fc fccc 	bl	800ece0 <HAL_GetTick>
 8012348:	0002      	movs	r2, r0
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	1ad3      	subs	r3, r2, r3
 801234e:	683a      	ldr	r2, [r7, #0]
 8012350:	429a      	cmp	r2, r3
 8012352:	d302      	bcc.n	801235a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d122      	bne.n	80123a0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	699b      	ldr	r3, [r3, #24]
 8012360:	68ba      	ldr	r2, [r7, #8]
 8012362:	4013      	ands	r3, r2
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	1ad3      	subs	r3, r2, r3
 8012368:	425a      	negs	r2, r3
 801236a:	4153      	adcs	r3, r2
 801236c:	b2db      	uxtb	r3, r3
 801236e:	001a      	movs	r2, r3
 8012370:	1dfb      	adds	r3, r7, #7
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	429a      	cmp	r2, r3
 8012376:	d113      	bne.n	80123a0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801237c:	2220      	movs	r2, #32
 801237e:	431a      	orrs	r2, r3
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2241      	movs	r2, #65	@ 0x41
 8012388:	2120      	movs	r1, #32
 801238a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2242      	movs	r2, #66	@ 0x42
 8012390:	2100      	movs	r1, #0
 8012392:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2240      	movs	r2, #64	@ 0x40
 8012398:	2100      	movs	r1, #0
 801239a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 801239c:	2301      	movs	r3, #1
 801239e:	e00f      	b.n	80123c0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	699b      	ldr	r3, [r3, #24]
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	4013      	ands	r3, r2
 80123aa:	68ba      	ldr	r2, [r7, #8]
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	425a      	negs	r2, r3
 80123b0:	4153      	adcs	r3, r2
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	001a      	movs	r2, r3
 80123b6:	1dfb      	adds	r3, r7, #7
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d0bf      	beq.n	801233e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80123be:	2300      	movs	r3, #0
}
 80123c0:	0018      	movs	r0, r3
 80123c2:	46bd      	mov	sp, r7
 80123c4:	b004      	add	sp, #16
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80123d4:	e032      	b.n	801243c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	68b9      	ldr	r1, [r7, #8]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	0018      	movs	r0, r3
 80123de:	f000 f8ff 	bl	80125e0 <I2C_IsErrorOccurred>
 80123e2:	1e03      	subs	r3, r0, #0
 80123e4:	d001      	beq.n	80123ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80123e6:	2301      	movs	r3, #1
 80123e8:	e030      	b.n	801244c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	3301      	adds	r3, #1
 80123ee:	d025      	beq.n	801243c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123f0:	f7fc fc76 	bl	800ece0 <HAL_GetTick>
 80123f4:	0002      	movs	r2, r0
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d302      	bcc.n	8012406 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d11a      	bne.n	801243c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	699b      	ldr	r3, [r3, #24]
 801240c:	2202      	movs	r2, #2
 801240e:	4013      	ands	r3, r2
 8012410:	2b02      	cmp	r3, #2
 8012412:	d013      	beq.n	801243c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012418:	2220      	movs	r2, #32
 801241a:	431a      	orrs	r2, r3
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2241      	movs	r2, #65	@ 0x41
 8012424:	2120      	movs	r1, #32
 8012426:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2242      	movs	r2, #66	@ 0x42
 801242c:	2100      	movs	r1, #0
 801242e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2240      	movs	r2, #64	@ 0x40
 8012434:	2100      	movs	r1, #0
 8012436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8012438:	2301      	movs	r3, #1
 801243a:	e007      	b.n	801244c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	699b      	ldr	r3, [r3, #24]
 8012442:	2202      	movs	r2, #2
 8012444:	4013      	ands	r3, r2
 8012446:	2b02      	cmp	r3, #2
 8012448:	d1c5      	bne.n	80123d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801244a:	2300      	movs	r3, #0
}
 801244c:	0018      	movs	r0, r3
 801244e:	46bd      	mov	sp, r7
 8012450:	b004      	add	sp, #16
 8012452:	bd80      	pop	{r7, pc}

08012454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012460:	e02f      	b.n	80124c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	68b9      	ldr	r1, [r7, #8]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	0018      	movs	r0, r3
 801246a:	f000 f8b9 	bl	80125e0 <I2C_IsErrorOccurred>
 801246e:	1e03      	subs	r3, r0, #0
 8012470:	d001      	beq.n	8012476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012472:	2301      	movs	r3, #1
 8012474:	e02d      	b.n	80124d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012476:	f7fc fc33 	bl	800ece0 <HAL_GetTick>
 801247a:	0002      	movs	r2, r0
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	68ba      	ldr	r2, [r7, #8]
 8012482:	429a      	cmp	r2, r3
 8012484:	d302      	bcc.n	801248c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d11a      	bne.n	80124c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	699b      	ldr	r3, [r3, #24]
 8012492:	2220      	movs	r2, #32
 8012494:	4013      	ands	r3, r2
 8012496:	2b20      	cmp	r3, #32
 8012498:	d013      	beq.n	80124c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801249e:	2220      	movs	r2, #32
 80124a0:	431a      	orrs	r2, r3
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2241      	movs	r2, #65	@ 0x41
 80124aa:	2120      	movs	r1, #32
 80124ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	2242      	movs	r2, #66	@ 0x42
 80124b2:	2100      	movs	r1, #0
 80124b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2240      	movs	r2, #64	@ 0x40
 80124ba:	2100      	movs	r1, #0
 80124bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80124be:	2301      	movs	r3, #1
 80124c0:	e007      	b.n	80124d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	2220      	movs	r2, #32
 80124ca:	4013      	ands	r3, r2
 80124cc:	2b20      	cmp	r3, #32
 80124ce:	d1c8      	bne.n	8012462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	0018      	movs	r0, r3
 80124d4:	46bd      	mov	sp, r7
 80124d6:	b004      	add	sp, #16
 80124d8:	bd80      	pop	{r7, pc}
	...

080124dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80124e8:	e06b      	b.n	80125c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	68b9      	ldr	r1, [r7, #8]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	0018      	movs	r0, r3
 80124f2:	f000 f875 	bl	80125e0 <I2C_IsErrorOccurred>
 80124f6:	1e03      	subs	r3, r0, #0
 80124f8:	d001      	beq.n	80124fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80124fa:	2301      	movs	r3, #1
 80124fc:	e069      	b.n	80125d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	699b      	ldr	r3, [r3, #24]
 8012504:	2220      	movs	r2, #32
 8012506:	4013      	ands	r3, r2
 8012508:	2b20      	cmp	r3, #32
 801250a:	d138      	bne.n	801257e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	699b      	ldr	r3, [r3, #24]
 8012512:	2204      	movs	r2, #4
 8012514:	4013      	ands	r3, r2
 8012516:	2b04      	cmp	r3, #4
 8012518:	d105      	bne.n	8012526 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801251e:	2b00      	cmp	r3, #0
 8012520:	d001      	beq.n	8012526 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012522:	2300      	movs	r3, #0
 8012524:	e055      	b.n	80125d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	699b      	ldr	r3, [r3, #24]
 801252c:	2210      	movs	r2, #16
 801252e:	4013      	ands	r3, r2
 8012530:	2b10      	cmp	r3, #16
 8012532:	d107      	bne.n	8012544 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2210      	movs	r2, #16
 801253a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2204      	movs	r2, #4
 8012540:	645a      	str	r2, [r3, #68]	@ 0x44
 8012542:	e002      	b.n	801254a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2200      	movs	r2, #0
 8012548:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2220      	movs	r2, #32
 8012550:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	685a      	ldr	r2, [r3, #4]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	491f      	ldr	r1, [pc, #124]	@ (80125dc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801255e:	400a      	ands	r2, r1
 8012560:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2241      	movs	r2, #65	@ 0x41
 8012566:	2120      	movs	r1, #32
 8012568:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2242      	movs	r2, #66	@ 0x42
 801256e:	2100      	movs	r1, #0
 8012570:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2240      	movs	r2, #64	@ 0x40
 8012576:	2100      	movs	r1, #0
 8012578:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801257a:	2301      	movs	r3, #1
 801257c:	e029      	b.n	80125d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801257e:	f7fc fbaf 	bl	800ece0 <HAL_GetTick>
 8012582:	0002      	movs	r2, r0
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	429a      	cmp	r2, r3
 801258c:	d302      	bcc.n	8012594 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d116      	bne.n	80125c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	699b      	ldr	r3, [r3, #24]
 801259a:	2204      	movs	r2, #4
 801259c:	4013      	ands	r3, r2
 801259e:	2b04      	cmp	r3, #4
 80125a0:	d00f      	beq.n	80125c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125a6:	2220      	movs	r2, #32
 80125a8:	431a      	orrs	r2, r3
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2241      	movs	r2, #65	@ 0x41
 80125b2:	2120      	movs	r1, #32
 80125b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2240      	movs	r2, #64	@ 0x40
 80125ba:	2100      	movs	r1, #0
 80125bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	e007      	b.n	80125d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	699b      	ldr	r3, [r3, #24]
 80125c8:	2204      	movs	r2, #4
 80125ca:	4013      	ands	r3, r2
 80125cc:	2b04      	cmp	r3, #4
 80125ce:	d18c      	bne.n	80124ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	0018      	movs	r0, r3
 80125d4:	46bd      	mov	sp, r7
 80125d6:	b004      	add	sp, #16
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	46c0      	nop			@ (mov r8, r8)
 80125dc:	fe00e800 	.word	0xfe00e800

080125e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b08a      	sub	sp, #40	@ 0x28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80125ec:	2327      	movs	r3, #39	@ 0x27
 80125ee:	18fb      	adds	r3, r7, r3
 80125f0:	2200      	movs	r2, #0
 80125f2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	699b      	ldr	r3, [r3, #24]
 80125fa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80125fc:	2300      	movs	r3, #0
 80125fe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	2210      	movs	r2, #16
 8012608:	4013      	ands	r3, r2
 801260a:	d100      	bne.n	801260e <I2C_IsErrorOccurred+0x2e>
 801260c:	e079      	b.n	8012702 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2210      	movs	r2, #16
 8012614:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012616:	e057      	b.n	80126c8 <I2C_IsErrorOccurred+0xe8>
 8012618:	2227      	movs	r2, #39	@ 0x27
 801261a:	18bb      	adds	r3, r7, r2
 801261c:	18ba      	adds	r2, r7, r2
 801261e:	7812      	ldrb	r2, [r2, #0]
 8012620:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	3301      	adds	r3, #1
 8012626:	d04f      	beq.n	80126c8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012628:	f7fc fb5a 	bl	800ece0 <HAL_GetTick>
 801262c:	0002      	movs	r2, r0
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	429a      	cmp	r2, r3
 8012636:	d302      	bcc.n	801263e <I2C_IsErrorOccurred+0x5e>
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d144      	bne.n	80126c8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	685a      	ldr	r2, [r3, #4]
 8012644:	2380      	movs	r3, #128	@ 0x80
 8012646:	01db      	lsls	r3, r3, #7
 8012648:	4013      	ands	r3, r2
 801264a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801264c:	2013      	movs	r0, #19
 801264e:	183b      	adds	r3, r7, r0
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	2142      	movs	r1, #66	@ 0x42
 8012654:	5c52      	ldrb	r2, [r2, r1]
 8012656:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	699a      	ldr	r2, [r3, #24]
 801265e:	2380      	movs	r3, #128	@ 0x80
 8012660:	021b      	lsls	r3, r3, #8
 8012662:	401a      	ands	r2, r3
 8012664:	2380      	movs	r3, #128	@ 0x80
 8012666:	021b      	lsls	r3, r3, #8
 8012668:	429a      	cmp	r2, r3
 801266a:	d126      	bne.n	80126ba <I2C_IsErrorOccurred+0xda>
 801266c:	697a      	ldr	r2, [r7, #20]
 801266e:	2380      	movs	r3, #128	@ 0x80
 8012670:	01db      	lsls	r3, r3, #7
 8012672:	429a      	cmp	r2, r3
 8012674:	d021      	beq.n	80126ba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012676:	183b      	adds	r3, r7, r0
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b20      	cmp	r3, #32
 801267c:	d01d      	beq.n	80126ba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	685a      	ldr	r2, [r3, #4]
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2180      	movs	r1, #128	@ 0x80
 801268a:	01c9      	lsls	r1, r1, #7
 801268c:	430a      	orrs	r2, r1
 801268e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012690:	f7fc fb26 	bl	800ece0 <HAL_GetTick>
 8012694:	0003      	movs	r3, r0
 8012696:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012698:	e00f      	b.n	80126ba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801269a:	f7fc fb21 	bl	800ece0 <HAL_GetTick>
 801269e:	0002      	movs	r2, r0
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	2b19      	cmp	r3, #25
 80126a6:	d908      	bls.n	80126ba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	2220      	movs	r2, #32
 80126ac:	4313      	orrs	r3, r2
 80126ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80126b0:	2327      	movs	r3, #39	@ 0x27
 80126b2:	18fb      	adds	r3, r7, r3
 80126b4:	2201      	movs	r2, #1
 80126b6:	701a      	strb	r2, [r3, #0]

              break;
 80126b8:	e006      	b.n	80126c8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	699b      	ldr	r3, [r3, #24]
 80126c0:	2220      	movs	r2, #32
 80126c2:	4013      	ands	r3, r2
 80126c4:	2b20      	cmp	r3, #32
 80126c6:	d1e8      	bne.n	801269a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	699b      	ldr	r3, [r3, #24]
 80126ce:	2220      	movs	r2, #32
 80126d0:	4013      	ands	r3, r2
 80126d2:	2b20      	cmp	r3, #32
 80126d4:	d004      	beq.n	80126e0 <I2C_IsErrorOccurred+0x100>
 80126d6:	2327      	movs	r3, #39	@ 0x27
 80126d8:	18fb      	adds	r3, r7, r3
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d09b      	beq.n	8012618 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80126e0:	2327      	movs	r3, #39	@ 0x27
 80126e2:	18fb      	adds	r3, r7, r3
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d103      	bne.n	80126f2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2220      	movs	r2, #32
 80126f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	2204      	movs	r2, #4
 80126f6:	4313      	orrs	r3, r2
 80126f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80126fa:	2327      	movs	r3, #39	@ 0x27
 80126fc:	18fb      	adds	r3, r7, r3
 80126fe:	2201      	movs	r2, #1
 8012700:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	699b      	ldr	r3, [r3, #24]
 8012708:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	2380      	movs	r3, #128	@ 0x80
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	4013      	ands	r3, r2
 8012712:	d00c      	beq.n	801272e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012714:	6a3b      	ldr	r3, [r7, #32]
 8012716:	2201      	movs	r2, #1
 8012718:	4313      	orrs	r3, r2
 801271a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2280      	movs	r2, #128	@ 0x80
 8012722:	0052      	lsls	r2, r2, #1
 8012724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012726:	2327      	movs	r3, #39	@ 0x27
 8012728:	18fb      	adds	r3, r7, r3
 801272a:	2201      	movs	r2, #1
 801272c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801272e:	69ba      	ldr	r2, [r7, #24]
 8012730:	2380      	movs	r3, #128	@ 0x80
 8012732:	00db      	lsls	r3, r3, #3
 8012734:	4013      	ands	r3, r2
 8012736:	d00c      	beq.n	8012752 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012738:	6a3b      	ldr	r3, [r7, #32]
 801273a:	2208      	movs	r2, #8
 801273c:	4313      	orrs	r3, r2
 801273e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2280      	movs	r2, #128	@ 0x80
 8012746:	00d2      	lsls	r2, r2, #3
 8012748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801274a:	2327      	movs	r3, #39	@ 0x27
 801274c:	18fb      	adds	r3, r7, r3
 801274e:	2201      	movs	r2, #1
 8012750:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012752:	69ba      	ldr	r2, [r7, #24]
 8012754:	2380      	movs	r3, #128	@ 0x80
 8012756:	009b      	lsls	r3, r3, #2
 8012758:	4013      	ands	r3, r2
 801275a:	d00c      	beq.n	8012776 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801275c:	6a3b      	ldr	r3, [r7, #32]
 801275e:	2202      	movs	r2, #2
 8012760:	4313      	orrs	r3, r2
 8012762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2280      	movs	r2, #128	@ 0x80
 801276a:	0092      	lsls	r2, r2, #2
 801276c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801276e:	2327      	movs	r3, #39	@ 0x27
 8012770:	18fb      	adds	r3, r7, r3
 8012772:	2201      	movs	r2, #1
 8012774:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012776:	2327      	movs	r3, #39	@ 0x27
 8012778:	18fb      	adds	r3, r7, r3
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d01d      	beq.n	80127bc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	0018      	movs	r0, r3
 8012784:	f7ff fcd7 	bl	8012136 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	685a      	ldr	r2, [r3, #4]
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	490e      	ldr	r1, [pc, #56]	@ (80127cc <I2C_IsErrorOccurred+0x1ec>)
 8012794:	400a      	ands	r2, r1
 8012796:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801279c:	6a3b      	ldr	r3, [r7, #32]
 801279e:	431a      	orrs	r2, r3
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2241      	movs	r2, #65	@ 0x41
 80127a8:	2120      	movs	r1, #32
 80127aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2242      	movs	r2, #66	@ 0x42
 80127b0:	2100      	movs	r1, #0
 80127b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2240      	movs	r2, #64	@ 0x40
 80127b8:	2100      	movs	r1, #0
 80127ba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80127bc:	2327      	movs	r3, #39	@ 0x27
 80127be:	18fb      	adds	r3, r7, r3
 80127c0:	781b      	ldrb	r3, [r3, #0]
}
 80127c2:	0018      	movs	r0, r3
 80127c4:	46bd      	mov	sp, r7
 80127c6:	b00a      	add	sp, #40	@ 0x28
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	46c0      	nop			@ (mov r8, r8)
 80127cc:	fe00e800 	.word	0xfe00e800

080127d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80127d0:	b590      	push	{r4, r7, lr}
 80127d2:	b087      	sub	sp, #28
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	0008      	movs	r0, r1
 80127da:	0011      	movs	r1, r2
 80127dc:	607b      	str	r3, [r7, #4]
 80127de:	240a      	movs	r4, #10
 80127e0:	193b      	adds	r3, r7, r4
 80127e2:	1c02      	adds	r2, r0, #0
 80127e4:	801a      	strh	r2, [r3, #0]
 80127e6:	2009      	movs	r0, #9
 80127e8:	183b      	adds	r3, r7, r0
 80127ea:	1c0a      	adds	r2, r1, #0
 80127ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127ee:	193b      	adds	r3, r7, r4
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	059b      	lsls	r3, r3, #22
 80127f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80127f6:	183b      	adds	r3, r7, r0
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	0419      	lsls	r1, r3, #16
 80127fc:	23ff      	movs	r3, #255	@ 0xff
 80127fe:	041b      	lsls	r3, r3, #16
 8012800:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012802:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801280a:	4313      	orrs	r3, r2
 801280c:	005b      	lsls	r3, r3, #1
 801280e:	085b      	lsrs	r3, r3, #1
 8012810:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801281a:	0d51      	lsrs	r1, r2, #21
 801281c:	2280      	movs	r2, #128	@ 0x80
 801281e:	00d2      	lsls	r2, r2, #3
 8012820:	400a      	ands	r2, r1
 8012822:	4907      	ldr	r1, [pc, #28]	@ (8012840 <I2C_TransferConfig+0x70>)
 8012824:	430a      	orrs	r2, r1
 8012826:	43d2      	mvns	r2, r2
 8012828:	401a      	ands	r2, r3
 801282a:	0011      	movs	r1, r2
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	697a      	ldr	r2, [r7, #20]
 8012832:	430a      	orrs	r2, r1
 8012834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012836:	46c0      	nop			@ (mov r8, r8)
 8012838:	46bd      	mov	sp, r7
 801283a:	b007      	add	sp, #28
 801283c:	bd90      	pop	{r4, r7, pc}
 801283e:	46c0      	nop			@ (mov r8, r8)
 8012840:	03ff63ff 	.word	0x03ff63ff

08012844 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	000a      	movs	r2, r1
 801284e:	1cbb      	adds	r3, r7, #2
 8012850:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012852:	2300      	movs	r3, #0
 8012854:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801285a:	4b3e      	ldr	r3, [pc, #248]	@ (8012954 <I2C_Enable_IRQ+0x110>)
 801285c:	429a      	cmp	r2, r3
 801285e:	d035      	beq.n	80128cc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012864:	4b3c      	ldr	r3, [pc, #240]	@ (8012958 <I2C_Enable_IRQ+0x114>)
 8012866:	429a      	cmp	r2, r3
 8012868:	d030      	beq.n	80128cc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801286e:	4b3b      	ldr	r3, [pc, #236]	@ (801295c <I2C_Enable_IRQ+0x118>)
 8012870:	429a      	cmp	r2, r3
 8012872:	d02b      	beq.n	80128cc <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012874:	1cbb      	adds	r3, r7, #2
 8012876:	2200      	movs	r2, #0
 8012878:	5e9b      	ldrsh	r3, [r3, r2]
 801287a:	2b00      	cmp	r3, #0
 801287c:	da03      	bge.n	8012886 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	22b8      	movs	r2, #184	@ 0xb8
 8012882:	4313      	orrs	r3, r2
 8012884:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012886:	1cbb      	adds	r3, r7, #2
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	2201      	movs	r2, #1
 801288c:	4013      	ands	r3, r2
 801288e:	d003      	beq.n	8012898 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	22f2      	movs	r2, #242	@ 0xf2
 8012894:	4313      	orrs	r3, r2
 8012896:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012898:	1cbb      	adds	r3, r7, #2
 801289a:	881b      	ldrh	r3, [r3, #0]
 801289c:	2202      	movs	r2, #2
 801289e:	4013      	ands	r3, r2
 80128a0:	d003      	beq.n	80128aa <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	22f4      	movs	r2, #244	@ 0xf4
 80128a6:	4313      	orrs	r3, r2
 80128a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80128aa:	1cbb      	adds	r3, r7, #2
 80128ac:	881b      	ldrh	r3, [r3, #0]
 80128ae:	2b10      	cmp	r3, #16
 80128b0:	d103      	bne.n	80128ba <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2290      	movs	r2, #144	@ 0x90
 80128b6:	4313      	orrs	r3, r2
 80128b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80128ba:	1cbb      	adds	r3, r7, #2
 80128bc:	881b      	ldrh	r3, [r3, #0]
 80128be:	2b20      	cmp	r3, #32
 80128c0:	d13c      	bne.n	801293c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2220      	movs	r2, #32
 80128c6:	4313      	orrs	r3, r2
 80128c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80128ca:	e037      	b.n	801293c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80128cc:	1cbb      	adds	r3, r7, #2
 80128ce:	2200      	movs	r2, #0
 80128d0:	5e9b      	ldrsh	r3, [r3, r2]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	da03      	bge.n	80128de <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	22b8      	movs	r2, #184	@ 0xb8
 80128da:	4313      	orrs	r3, r2
 80128dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80128de:	1cbb      	adds	r3, r7, #2
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	2201      	movs	r2, #1
 80128e4:	4013      	ands	r3, r2
 80128e6:	d003      	beq.n	80128f0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	22f2      	movs	r2, #242	@ 0xf2
 80128ec:	4313      	orrs	r3, r2
 80128ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80128f0:	1cbb      	adds	r3, r7, #2
 80128f2:	881b      	ldrh	r3, [r3, #0]
 80128f4:	2202      	movs	r2, #2
 80128f6:	4013      	ands	r3, r2
 80128f8:	d003      	beq.n	8012902 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	22f4      	movs	r2, #244	@ 0xf4
 80128fe:	4313      	orrs	r3, r2
 8012900:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012902:	1cbb      	adds	r3, r7, #2
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	2b10      	cmp	r3, #16
 8012908:	d103      	bne.n	8012912 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2290      	movs	r2, #144	@ 0x90
 801290e:	4313      	orrs	r3, r2
 8012910:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012912:	1cbb      	adds	r3, r7, #2
 8012914:	881b      	ldrh	r3, [r3, #0]
 8012916:	2b20      	cmp	r3, #32
 8012918:	d103      	bne.n	8012922 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2260      	movs	r2, #96	@ 0x60
 801291e:	4313      	orrs	r3, r2
 8012920:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012926:	4b0d      	ldr	r3, [pc, #52]	@ (801295c <I2C_Enable_IRQ+0x118>)
 8012928:	429a      	cmp	r2, r3
 801292a:	d007      	beq.n	801293c <I2C_Enable_IRQ+0xf8>
 801292c:	1cbb      	adds	r3, r7, #2
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	2b40      	cmp	r3, #64	@ 0x40
 8012932:	d103      	bne.n	801293c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2240      	movs	r2, #64	@ 0x40
 8012938:	4313      	orrs	r3, r2
 801293a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	6819      	ldr	r1, [r3, #0]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	68fa      	ldr	r2, [r7, #12]
 8012948:	430a      	orrs	r2, r1
 801294a:	601a      	str	r2, [r3, #0]
}
 801294c:	46c0      	nop			@ (mov r8, r8)
 801294e:	46bd      	mov	sp, r7
 8012950:	b004      	add	sp, #16
 8012952:	bd80      	pop	{r7, pc}
 8012954:	080111c5 	.word	0x080111c5
 8012958:	080115f5 	.word	0x080115f5
 801295c:	080113bd 	.word	0x080113bd

08012960 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	000a      	movs	r2, r1
 801296a:	1cbb      	adds	r3, r7, #2
 801296c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801296e:	2300      	movs	r3, #0
 8012970:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012972:	1cbb      	adds	r3, r7, #2
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	2201      	movs	r2, #1
 8012978:	4013      	ands	r3, r2
 801297a:	d010      	beq.n	801299e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2242      	movs	r2, #66	@ 0x42
 8012980:	4313      	orrs	r3, r2
 8012982:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2241      	movs	r2, #65	@ 0x41
 8012988:	5c9b      	ldrb	r3, [r3, r2]
 801298a:	b2db      	uxtb	r3, r3
 801298c:	001a      	movs	r2, r3
 801298e:	2328      	movs	r3, #40	@ 0x28
 8012990:	4013      	ands	r3, r2
 8012992:	2b28      	cmp	r3, #40	@ 0x28
 8012994:	d003      	beq.n	801299e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	22b0      	movs	r2, #176	@ 0xb0
 801299a:	4313      	orrs	r3, r2
 801299c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801299e:	1cbb      	adds	r3, r7, #2
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	2202      	movs	r2, #2
 80129a4:	4013      	ands	r3, r2
 80129a6:	d010      	beq.n	80129ca <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2244      	movs	r2, #68	@ 0x44
 80129ac:	4313      	orrs	r3, r2
 80129ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2241      	movs	r2, #65	@ 0x41
 80129b4:	5c9b      	ldrb	r3, [r3, r2]
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	001a      	movs	r2, r3
 80129ba:	2328      	movs	r3, #40	@ 0x28
 80129bc:	4013      	ands	r3, r2
 80129be:	2b28      	cmp	r3, #40	@ 0x28
 80129c0:	d003      	beq.n	80129ca <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	22b0      	movs	r2, #176	@ 0xb0
 80129c6:	4313      	orrs	r3, r2
 80129c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80129ca:	1cbb      	adds	r3, r7, #2
 80129cc:	2200      	movs	r2, #0
 80129ce:	5e9b      	ldrsh	r3, [r3, r2]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	da03      	bge.n	80129dc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	22b8      	movs	r2, #184	@ 0xb8
 80129d8:	4313      	orrs	r3, r2
 80129da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80129dc:	1cbb      	adds	r3, r7, #2
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	2b10      	cmp	r3, #16
 80129e2:	d103      	bne.n	80129ec <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2290      	movs	r2, #144	@ 0x90
 80129e8:	4313      	orrs	r3, r2
 80129ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80129ec:	1cbb      	adds	r3, r7, #2
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	2b20      	cmp	r3, #32
 80129f2:	d103      	bne.n	80129fc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2220      	movs	r2, #32
 80129f8:	4313      	orrs	r3, r2
 80129fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80129fc:	1cbb      	adds	r3, r7, #2
 80129fe:	881b      	ldrh	r3, [r3, #0]
 8012a00:	2b40      	cmp	r3, #64	@ 0x40
 8012a02:	d103      	bne.n	8012a0c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2240      	movs	r2, #64	@ 0x40
 8012a08:	4313      	orrs	r3, r2
 8012a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	43d9      	mvns	r1, r3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	400a      	ands	r2, r1
 8012a1c:	601a      	str	r2, [r3, #0]
}
 8012a1e:	46c0      	nop			@ (mov r8, r8)
 8012a20:	46bd      	mov	sp, r7
 8012a22:	b004      	add	sp, #16
 8012a24:	bd80      	pop	{r7, pc}
	...

08012a28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2241      	movs	r2, #65	@ 0x41
 8012a36:	5c9b      	ldrb	r3, [r3, r2]
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	2b20      	cmp	r3, #32
 8012a3c:	d138      	bne.n	8012ab0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2240      	movs	r2, #64	@ 0x40
 8012a42:	5c9b      	ldrb	r3, [r3, r2]
 8012a44:	2b01      	cmp	r3, #1
 8012a46:	d101      	bne.n	8012a4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012a48:	2302      	movs	r3, #2
 8012a4a:	e032      	b.n	8012ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2240      	movs	r2, #64	@ 0x40
 8012a50:	2101      	movs	r1, #1
 8012a52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2241      	movs	r2, #65	@ 0x41
 8012a58:	2124      	movs	r1, #36	@ 0x24
 8012a5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2101      	movs	r1, #1
 8012a68:	438a      	bics	r2, r1
 8012a6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	4911      	ldr	r1, [pc, #68]	@ (8012abc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012a78:	400a      	ands	r2, r1
 8012a7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6819      	ldr	r1, [r3, #0]
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	683a      	ldr	r2, [r7, #0]
 8012a88:	430a      	orrs	r2, r1
 8012a8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2101      	movs	r1, #1
 8012a98:	430a      	orrs	r2, r1
 8012a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2241      	movs	r2, #65	@ 0x41
 8012aa0:	2120      	movs	r1, #32
 8012aa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2240      	movs	r2, #64	@ 0x40
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012aac:	2300      	movs	r3, #0
 8012aae:	e000      	b.n	8012ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012ab0:	2302      	movs	r3, #2
  }
}
 8012ab2:	0018      	movs	r0, r3
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	b002      	add	sp, #8
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	46c0      	nop			@ (mov r8, r8)
 8012abc:	ffffefff 	.word	0xffffefff

08012ac0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2241      	movs	r2, #65	@ 0x41
 8012ace:	5c9b      	ldrb	r3, [r3, r2]
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	2b20      	cmp	r3, #32
 8012ad4:	d139      	bne.n	8012b4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2240      	movs	r2, #64	@ 0x40
 8012ada:	5c9b      	ldrb	r3, [r3, r2]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d101      	bne.n	8012ae4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012ae0:	2302      	movs	r3, #2
 8012ae2:	e033      	b.n	8012b4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2240      	movs	r2, #64	@ 0x40
 8012ae8:	2101      	movs	r1, #1
 8012aea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2241      	movs	r2, #65	@ 0x41
 8012af0:	2124      	movs	r1, #36	@ 0x24
 8012af2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2101      	movs	r1, #1
 8012b00:	438a      	bics	r2, r1
 8012b02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	4a11      	ldr	r2, [pc, #68]	@ (8012b54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012b10:	4013      	ands	r3, r2
 8012b12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	021b      	lsls	r3, r3, #8
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2101      	movs	r1, #1
 8012b32:	430a      	orrs	r2, r1
 8012b34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2241      	movs	r2, #65	@ 0x41
 8012b3a:	2120      	movs	r1, #32
 8012b3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2240      	movs	r2, #64	@ 0x40
 8012b42:	2100      	movs	r1, #0
 8012b44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012b46:	2300      	movs	r3, #0
 8012b48:	e000      	b.n	8012b4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012b4a:	2302      	movs	r3, #2
  }
}
 8012b4c:	0018      	movs	r0, r3
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	b004      	add	sp, #16
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	fffff0ff 	.word	0xfffff0ff

08012b58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b088      	sub	sp, #32
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d101      	bne.n	8012b6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012b66:	2301      	movs	r3, #1
 8012b68:	e0e1      	b.n	8012d2e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2235      	movs	r2, #53	@ 0x35
 8012b6e:	5c9b      	ldrb	r3, [r3, r2]
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d107      	bne.n	8012b86 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2234      	movs	r2, #52	@ 0x34
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	0018      	movs	r0, r3
 8012b82:	f7f4 ff97 	bl	8007ab4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2235      	movs	r2, #53	@ 0x35
 8012b8a:	2102      	movs	r1, #2
 8012b8c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	69da      	ldr	r2, [r3, #28]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	4967      	ldr	r1, [pc, #412]	@ (8012d38 <HAL_I2S_Init+0x1e0>)
 8012b9a:	400a      	ands	r2, r1
 8012b9c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	2202      	movs	r2, #2
 8012ba4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	695b      	ldr	r3, [r3, #20]
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d073      	beq.n	8012c96 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d102      	bne.n	8012bbc <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012bb6:	2310      	movs	r3, #16
 8012bb8:	617b      	str	r3, [r7, #20]
 8012bba:	e001      	b.n	8012bc0 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012bbc:	2320      	movs	r3, #32
 8012bbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	689b      	ldr	r3, [r3, #8]
 8012bc4:	2b20      	cmp	r3, #32
 8012bc6:	d802      	bhi.n	8012bce <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	005b      	lsls	r3, r3, #1
 8012bcc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012bce:	f002 fed3 	bl	8015978 <HAL_RCC_GetSysClockFreq>
 8012bd2:	0003      	movs	r3, r0
 8012bd4:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	691a      	ldr	r2, [r3, #16]
 8012bda:	2380      	movs	r3, #128	@ 0x80
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d131      	bne.n	8012c46 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d016      	beq.n	8012c18 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	009b      	lsls	r3, r3, #2
 8012bee:	0019      	movs	r1, r3
 8012bf0:	68f8      	ldr	r0, [r7, #12]
 8012bf2:	f7ed fad7 	bl	80001a4 <__udivsi3>
 8012bf6:	0003      	movs	r3, r0
 8012bf8:	001a      	movs	r2, r3
 8012bfa:	0013      	movs	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	189b      	adds	r3, r3, r2
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	001a      	movs	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	695b      	ldr	r3, [r3, #20]
 8012c08:	0019      	movs	r1, r3
 8012c0a:	0010      	movs	r0, r2
 8012c0c:	f7ed faca 	bl	80001a4 <__udivsi3>
 8012c10:	0003      	movs	r3, r0
 8012c12:	3305      	adds	r3, #5
 8012c14:	613b      	str	r3, [r7, #16]
 8012c16:	e02a      	b.n	8012c6e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	00db      	lsls	r3, r3, #3
 8012c1c:	0019      	movs	r1, r3
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	f7ed fac0 	bl	80001a4 <__udivsi3>
 8012c24:	0003      	movs	r3, r0
 8012c26:	001a      	movs	r2, r3
 8012c28:	0013      	movs	r3, r2
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	189b      	adds	r3, r3, r2
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	001a      	movs	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	695b      	ldr	r3, [r3, #20]
 8012c36:	0019      	movs	r1, r3
 8012c38:	0010      	movs	r0, r2
 8012c3a:	f7ed fab3 	bl	80001a4 <__udivsi3>
 8012c3e:	0003      	movs	r3, r0
 8012c40:	3305      	adds	r3, #5
 8012c42:	613b      	str	r3, [r7, #16]
 8012c44:	e013      	b.n	8012c6e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c46:	6979      	ldr	r1, [r7, #20]
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7ed faab 	bl	80001a4 <__udivsi3>
 8012c4e:	0003      	movs	r3, r0
 8012c50:	001a      	movs	r2, r3
 8012c52:	0013      	movs	r3, r2
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	189b      	adds	r3, r3, r2
 8012c58:	005b      	lsls	r3, r3, #1
 8012c5a:	001a      	movs	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	695b      	ldr	r3, [r3, #20]
 8012c60:	0019      	movs	r1, r3
 8012c62:	0010      	movs	r0, r2
 8012c64:	f7ed fa9e 	bl	80001a4 <__udivsi3>
 8012c68:	0003      	movs	r3, r0
 8012c6a:	3305      	adds	r3, #5
 8012c6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	210a      	movs	r1, #10
 8012c72:	0018      	movs	r0, r3
 8012c74:	f7ed fa96 	bl	80001a4 <__udivsi3>
 8012c78:	0003      	movs	r3, r0
 8012c7a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	4013      	ands	r3, r2
 8012c82:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012c84:	693a      	ldr	r2, [r7, #16]
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	1ad3      	subs	r3, r2, r3
 8012c8a:	085b      	lsrs	r3, r3, #1
 8012c8c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	021b      	lsls	r3, r3, #8
 8012c92:	61bb      	str	r3, [r7, #24]
 8012c94:	e003      	b.n	8012c9e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012c96:	2302      	movs	r3, #2
 8012c98:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	d902      	bls.n	8012caa <HAL_I2S_Init+0x152>
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	2bff      	cmp	r3, #255	@ 0xff
 8012ca8:	d907      	bls.n	8012cba <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cae:	2210      	movs	r2, #16
 8012cb0:	431a      	orrs	r2, r3
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e039      	b.n	8012d2e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	691a      	ldr	r2, [r3, #16]
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	431a      	orrs	r2, r3
 8012cc2:	0011      	movs	r1, r2
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	69fa      	ldr	r2, [r7, #28]
 8012cca:	430a      	orrs	r2, r1
 8012ccc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	69db      	ldr	r3, [r3, #28]
 8012cd4:	4a18      	ldr	r2, [pc, #96]	@ (8012d38 <HAL_I2S_Init+0x1e0>)
 8012cd6:	401a      	ands	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6859      	ldr	r1, [r3, #4]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	689b      	ldr	r3, [r3, #8]
 8012ce0:	4319      	orrs	r1, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	4319      	orrs	r1, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	699b      	ldr	r3, [r3, #24]
 8012cec:	430b      	orrs	r3, r1
 8012cee:	431a      	orrs	r2, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2180      	movs	r1, #128	@ 0x80
 8012cf6:	0109      	lsls	r1, r1, #4
 8012cf8:	430a      	orrs	r2, r1
 8012cfa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	2b30      	cmp	r3, #48	@ 0x30
 8012d02:	d003      	beq.n	8012d0c <HAL_I2S_Init+0x1b4>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	2bb0      	cmp	r3, #176	@ 0xb0
 8012d0a:	d108      	bne.n	8012d1e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	69da      	ldr	r2, [r3, #28]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2180      	movs	r1, #128	@ 0x80
 8012d18:	0149      	lsls	r1, r1, #5
 8012d1a:	430a      	orrs	r2, r1
 8012d1c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2200      	movs	r2, #0
 8012d22:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2235      	movs	r2, #53	@ 0x35
 8012d28:	2101      	movs	r1, #1
 8012d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	0018      	movs	r0, r3
 8012d30:	46bd      	mov	sp, r7
 8012d32:	b008      	add	sp, #32
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	46c0      	nop			@ (mov r8, r8)
 8012d38:	fffff040 	.word	0xfffff040

08012d3c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b086      	sub	sp, #24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	1dbb      	adds	r3, r7, #6
 8012d48:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d003      	beq.n	8012d58 <HAL_I2S_Receive_DMA+0x1c>
 8012d50:	1dbb      	adds	r3, r7, #6
 8012d52:	881b      	ldrh	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d101      	bne.n	8012d5c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012d58:	2301      	movs	r3, #1
 8012d5a:	e0a6      	b.n	8012eaa <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	2234      	movs	r2, #52	@ 0x34
 8012d60:	5c9b      	ldrb	r3, [r3, r2]
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d101      	bne.n	8012d6c <HAL_I2S_Receive_DMA+0x30>
 8012d68:	2302      	movs	r3, #2
 8012d6a:	e09e      	b.n	8012eaa <HAL_I2S_Receive_DMA+0x16e>
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2234      	movs	r2, #52	@ 0x34
 8012d70:	2101      	movs	r1, #1
 8012d72:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2235      	movs	r2, #53	@ 0x35
 8012d78:	5c9b      	ldrb	r3, [r3, r2]
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d005      	beq.n	8012d8c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2234      	movs	r2, #52	@ 0x34
 8012d84:	2100      	movs	r1, #0
 8012d86:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012d88:	2302      	movs	r3, #2
 8012d8a:	e08e      	b.n	8012eaa <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2235      	movs	r2, #53	@ 0x35
 8012d90:	2104      	movs	r1, #4
 8012d92:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	68ba      	ldr	r2, [r7, #8]
 8012d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	69db      	ldr	r3, [r3, #28]
 8012da6:	2207      	movs	r2, #7
 8012da8:	4013      	ands	r3, r2
 8012daa:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	d002      	beq.n	8012db8 <HAL_I2S_Receive_DMA+0x7c>
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	2b05      	cmp	r3, #5
 8012db6:	d10c      	bne.n	8012dd2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012db8:	1dbb      	adds	r3, r7, #6
 8012dba:	881b      	ldrh	r3, [r3, #0]
 8012dbc:	18db      	adds	r3, r3, r3
 8012dbe:	b29a      	uxth	r2, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012dc4:	1dbb      	adds	r3, r7, #6
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	18db      	adds	r3, r3, r3
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012dd0:	e007      	b.n	8012de2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	1dba      	adds	r2, r7, #6
 8012dd6:	8812      	ldrh	r2, [r2, #0]
 8012dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	1dba      	adds	r2, r7, #6
 8012dde:	8812      	ldrh	r2, [r2, #0]
 8012de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012de6:	4a33      	ldr	r2, [pc, #204]	@ (8012eb4 <HAL_I2S_Receive_DMA+0x178>)
 8012de8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dee:	4a32      	ldr	r2, [pc, #200]	@ (8012eb8 <HAL_I2S_Receive_DMA+0x17c>)
 8012df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012df6:	4a31      	ldr	r2, [pc, #196]	@ (8012ebc <HAL_I2S_Receive_DMA+0x180>)
 8012df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	69da      	ldr	r2, [r3, #28]
 8012e00:	23c0      	movs	r3, #192	@ 0xc0
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	401a      	ands	r2, r3
 8012e06:	23c0      	movs	r3, #192	@ 0xc0
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d10a      	bne.n	8012e24 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012e0e:	2300      	movs	r3, #0
 8012e10:	613b      	str	r3, [r7, #16]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	613b      	str	r3, [r7, #16]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	689b      	ldr	r3, [r3, #8]
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	330c      	adds	r3, #12
 8012e2e:	0019      	movs	r1, r3
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e34:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012e3c:	f7fc fca2 	bl	800f784 <HAL_DMA_Start_IT>
 8012e40:	1e03      	subs	r3, r0, #0
 8012e42:	d00f      	beq.n	8012e64 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e48:	2208      	movs	r2, #8
 8012e4a:	431a      	orrs	r2, r3
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2235      	movs	r2, #53	@ 0x35
 8012e54:	2101      	movs	r1, #1
 8012e56:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2234      	movs	r2, #52	@ 0x34
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012e60:	2301      	movs	r3, #1
 8012e62:	e022      	b.n	8012eaa <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	69da      	ldr	r2, [r3, #28]
 8012e6a:	2380      	movs	r3, #128	@ 0x80
 8012e6c:	00db      	lsls	r3, r3, #3
 8012e6e:	4013      	ands	r3, r2
 8012e70:	d108      	bne.n	8012e84 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	69da      	ldr	r2, [r3, #28]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2180      	movs	r1, #128	@ 0x80
 8012e7e:	00c9      	lsls	r1, r1, #3
 8012e80:	430a      	orrs	r2, r1
 8012e82:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	2201      	movs	r2, #1
 8012e8c:	4013      	ands	r3, r2
 8012e8e:	d107      	bne.n	8012ea0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	430a      	orrs	r2, r1
 8012e9e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2234      	movs	r2, #52	@ 0x34
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012ea8:	2300      	movs	r3, #0
}
 8012eaa:	0018      	movs	r0, r3
 8012eac:	46bd      	mov	sp, r7
 8012eae:	b006      	add	sp, #24
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	46c0      	nop			@ (mov r8, r8)
 8012eb4:	0801309d 	.word	0x0801309d
 8012eb8:	08013059 	.word	0x08013059
 8012ebc:	080130bb 	.word	0x080130bb

08012ec0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012ec8:	2317      	movs	r3, #23
 8012eca:	18fb      	adds	r3, r7, r3
 8012ecc:	2200      	movs	r2, #0
 8012ece:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	685a      	ldr	r2, [r3, #4]
 8012ed4:	2380      	movs	r3, #128	@ 0x80
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d003      	beq.n	8012ee4 <HAL_I2S_DMAStop+0x24>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d158      	bne.n	8012f96 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d010      	beq.n	8012f0e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ef0:	0018      	movs	r0, r3
 8012ef2:	f7fc fcad 	bl	800f850 <HAL_DMA_Abort>
 8012ef6:	1e03      	subs	r3, r0, #0
 8012ef8:	d009      	beq.n	8012f0e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012efe:	2208      	movs	r2, #8
 8012f00:	431a      	orrs	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012f06:	2317      	movs	r3, #23
 8012f08:	18fb      	adds	r3, r7, r3
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	2364      	movs	r3, #100	@ 0x64
 8012f12:	2201      	movs	r2, #1
 8012f14:	2102      	movs	r1, #2
 8012f16:	f000 f8f7 	bl	8013108 <I2S_WaitFlagStateUntilTimeout>
 8012f1a:	1e03      	subs	r3, r0, #0
 8012f1c:	d00d      	beq.n	8012f3a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f22:	2201      	movs	r2, #1
 8012f24:	431a      	orrs	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2235      	movs	r2, #53	@ 0x35
 8012f2e:	2101      	movs	r1, #1
 8012f30:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012f32:	2317      	movs	r3, #23
 8012f34:	18fb      	adds	r3, r7, r3
 8012f36:	2201      	movs	r2, #1
 8012f38:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	2364      	movs	r3, #100	@ 0x64
 8012f3e:	2200      	movs	r2, #0
 8012f40:	2180      	movs	r1, #128	@ 0x80
 8012f42:	f000 f8e1 	bl	8013108 <I2S_WaitFlagStateUntilTimeout>
 8012f46:	1e03      	subs	r3, r0, #0
 8012f48:	d00d      	beq.n	8012f66 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f4e:	2201      	movs	r2, #1
 8012f50:	431a      	orrs	r2, r3
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2235      	movs	r2, #53	@ 0x35
 8012f5a:	2101      	movs	r1, #1
 8012f5c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012f5e:	2317      	movs	r3, #23
 8012f60:	18fb      	adds	r3, r7, r3
 8012f62:	2201      	movs	r2, #1
 8012f64:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	69da      	ldr	r2, [r3, #28]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4938      	ldr	r1, [pc, #224]	@ (8013054 <HAL_I2S_DMAStop+0x194>)
 8012f72:	400a      	ands	r2, r1
 8012f74:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012f76:	2300      	movs	r3, #0
 8012f78:	613b      	str	r3, [r7, #16]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	689b      	ldr	r3, [r3, #8]
 8012f80:	613b      	str	r3, [r7, #16]
 8012f82:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	685a      	ldr	r2, [r3, #4]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	2102      	movs	r1, #2
 8012f90:	438a      	bics	r2, r1
 8012f92:	605a      	str	r2, [r3, #4]
 8012f94:	e053      	b.n	801303e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	685a      	ldr	r2, [r3, #4]
 8012f9a:	23c0      	movs	r3, #192	@ 0xc0
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d005      	beq.n	8012fae <HAL_I2S_DMAStop+0xee>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685a      	ldr	r2, [r3, #4]
 8012fa6:	2380      	movs	r3, #128	@ 0x80
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d147      	bne.n	801303e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d010      	beq.n	8012fd8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fba:	0018      	movs	r0, r3
 8012fbc:	f7fc fc48 	bl	800f850 <HAL_DMA_Abort>
 8012fc0:	1e03      	subs	r3, r0, #0
 8012fc2:	d009      	beq.n	8012fd8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fc8:	2208      	movs	r2, #8
 8012fca:	431a      	orrs	r2, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012fd0:	2317      	movs	r3, #23
 8012fd2:	18fb      	adds	r3, r7, r3
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	69da      	ldr	r2, [r3, #28]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	491c      	ldr	r1, [pc, #112]	@ (8013054 <HAL_I2S_DMAStop+0x194>)
 8012fe4:	400a      	ands	r2, r1
 8012fe6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012fe8:	2300      	movs	r3, #0
 8012fea:	60fb      	str	r3, [r7, #12]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68db      	ldr	r3, [r3, #12]
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	60fb      	str	r3, [r7, #12]
 8012ffc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2101      	movs	r1, #1
 801300a:	438a      	bics	r2, r1
 801300c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685a      	ldr	r2, [r3, #4]
 8013012:	2380      	movs	r3, #128	@ 0x80
 8013014:	005b      	lsls	r3, r3, #1
 8013016:	429a      	cmp	r2, r3
 8013018:	d10e      	bne.n	8013038 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801301e:	2240      	movs	r2, #64	@ 0x40
 8013020:	431a      	orrs	r2, r3
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2235      	movs	r2, #53	@ 0x35
 801302a:	2101      	movs	r1, #1
 801302c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801302e:	2317      	movs	r3, #23
 8013030:	18fb      	adds	r3, r7, r3
 8013032:	2201      	movs	r2, #1
 8013034:	701a      	strb	r2, [r3, #0]
 8013036:	e002      	b.n	801303e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2235      	movs	r2, #53	@ 0x35
 8013042:	2101      	movs	r1, #1
 8013044:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8013046:	2317      	movs	r3, #23
 8013048:	18fb      	adds	r3, r7, r3
 801304a:	781b      	ldrb	r3, [r3, #0]
}
 801304c:	0018      	movs	r0, r3
 801304e:	46bd      	mov	sp, r7
 8013050:	b006      	add	sp, #24
 8013052:	bd80      	pop	{r7, pc}
 8013054:	fffffbff 	.word	0xfffffbff

08013058 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b084      	sub	sp, #16
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013064:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	69db      	ldr	r3, [r3, #28]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10e      	bne.n	801308c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	685a      	ldr	r2, [r3, #4]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2101      	movs	r1, #1
 801307a:	438a      	bics	r2, r1
 801307c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2200      	movs	r2, #0
 8013082:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	2235      	movs	r2, #53	@ 0x35
 8013088:	2101      	movs	r1, #1
 801308a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	0018      	movs	r0, r3
 8013090:	f7f9 fa7c 	bl	800c58c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013094:	46c0      	nop			@ (mov r8, r8)
 8013096:	46bd      	mov	sp, r7
 8013098:	b004      	add	sp, #16
 801309a:	bd80      	pop	{r7, pc}

0801309c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	0018      	movs	r0, r3
 80130ae:	f7f9 fa5b 	bl	800c568 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80130b2:	46c0      	nop			@ (mov r8, r8)
 80130b4:	46bd      	mov	sp, r7
 80130b6:	b004      	add	sp, #16
 80130b8:	bd80      	pop	{r7, pc}

080130ba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80130ba:	b580      	push	{r7, lr}
 80130bc:	b084      	sub	sp, #16
 80130be:	af00      	add	r7, sp, #0
 80130c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130c6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	685a      	ldr	r2, [r3, #4]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	2103      	movs	r1, #3
 80130d4:	438a      	bics	r2, r1
 80130d6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2200      	movs	r2, #0
 80130dc:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	2200      	movs	r2, #0
 80130e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2235      	movs	r2, #53	@ 0x35
 80130e8:	2101      	movs	r1, #1
 80130ea:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130f0:	2208      	movs	r2, #8
 80130f2:	431a      	orrs	r2, r3
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	0018      	movs	r0, r3
 80130fc:	f7f9 fa94 	bl	800c628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013100:	46c0      	nop			@ (mov r8, r8)
 8013102:	46bd      	mov	sp, r7
 8013104:	b004      	add	sp, #16
 8013106:	bd80      	pop	{r7, pc}

08013108 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	603b      	str	r3, [r7, #0]
 8013114:	1dfb      	adds	r3, r7, #7
 8013116:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8013118:	f7fb fde2 	bl	800ece0 <HAL_GetTick>
 801311c:	0003      	movs	r3, r0
 801311e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013120:	e017      	b.n	8013152 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	3301      	adds	r3, #1
 8013126:	d014      	beq.n	8013152 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8013128:	f7fb fdda 	bl	800ece0 <HAL_GetTick>
 801312c:	0002      	movs	r2, r0
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	1ad3      	subs	r3, r2, r3
 8013132:	683a      	ldr	r2, [r7, #0]
 8013134:	429a      	cmp	r2, r3
 8013136:	d902      	bls.n	801313e <I2S_WaitFlagStateUntilTimeout+0x36>
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d109      	bne.n	8013152 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2235      	movs	r2, #53	@ 0x35
 8013142:	2101      	movs	r1, #1
 8013144:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2234      	movs	r2, #52	@ 0x34
 801314a:	2100      	movs	r1, #0
 801314c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801314e:	2303      	movs	r3, #3
 8013150:	e00f      	b.n	8013172 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	4013      	ands	r3, r2
 801315c:	68ba      	ldr	r2, [r7, #8]
 801315e:	1ad3      	subs	r3, r2, r3
 8013160:	425a      	negs	r2, r3
 8013162:	4153      	adcs	r3, r2
 8013164:	b2db      	uxtb	r3, r3
 8013166:	001a      	movs	r2, r3
 8013168:	1dfb      	adds	r3, r7, #7
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	429a      	cmp	r2, r3
 801316e:	d1d8      	bne.n	8013122 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013170:	2300      	movs	r3, #0
}
 8013172:	0018      	movs	r0, r3
 8013174:	46bd      	mov	sp, r7
 8013176:	b006      	add	sp, #24
 8013178:	bd80      	pop	{r7, pc}
	...

0801317c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801317e:	b08b      	sub	sp, #44	@ 0x2c
 8013180:	af06      	add	r7, sp, #24
 8013182:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d101      	bne.n	801318e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e0f0      	b.n	8013370 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	4a79      	ldr	r2, [pc, #484]	@ (8013378 <HAL_PCD_Init+0x1fc>)
 8013192:	5c9b      	ldrb	r3, [r3, r2]
 8013194:	b2db      	uxtb	r3, r3
 8013196:	2b00      	cmp	r3, #0
 8013198:	d108      	bne.n	80131ac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	23aa      	movs	r3, #170	@ 0xaa
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	2100      	movs	r1, #0
 80131a2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	0018      	movs	r0, r3
 80131a8:	f009 ff4a 	bl	801d040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	4a72      	ldr	r2, [pc, #456]	@ (8013378 <HAL_PCD_Init+0x1fc>)
 80131b0:	2103      	movs	r1, #3
 80131b2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	0018      	movs	r0, r3
 80131ba:	f005 fefd 	bl	8018fb8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80131be:	230f      	movs	r3, #15
 80131c0:	18fb      	adds	r3, r7, r3
 80131c2:	2200      	movs	r2, #0
 80131c4:	701a      	strb	r2, [r3, #0]
 80131c6:	e049      	b.n	801325c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80131c8:	200f      	movs	r0, #15
 80131ca:	183b      	adds	r3, r7, r0
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	6879      	ldr	r1, [r7, #4]
 80131d0:	1c5a      	adds	r2, r3, #1
 80131d2:	0013      	movs	r3, r2
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	189b      	adds	r3, r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	18cb      	adds	r3, r1, r3
 80131dc:	3301      	adds	r3, #1
 80131de:	2201      	movs	r2, #1
 80131e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80131e2:	183b      	adds	r3, r7, r0
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	6879      	ldr	r1, [r7, #4]
 80131e8:	1c5a      	adds	r2, r3, #1
 80131ea:	0013      	movs	r3, r2
 80131ec:	009b      	lsls	r3, r3, #2
 80131ee:	189b      	adds	r3, r3, r2
 80131f0:	00db      	lsls	r3, r3, #3
 80131f2:	183a      	adds	r2, r7, r0
 80131f4:	7812      	ldrb	r2, [r2, #0]
 80131f6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80131f8:	183b      	adds	r3, r7, r0
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	6879      	ldr	r1, [r7, #4]
 80131fe:	1c5a      	adds	r2, r3, #1
 8013200:	0013      	movs	r3, r2
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	189b      	adds	r3, r3, r2
 8013206:	00db      	lsls	r3, r3, #3
 8013208:	18cb      	adds	r3, r1, r3
 801320a:	3303      	adds	r3, #3
 801320c:	2200      	movs	r2, #0
 801320e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013210:	183b      	adds	r3, r7, r0
 8013212:	781a      	ldrb	r2, [r3, #0]
 8013214:	6879      	ldr	r1, [r7, #4]
 8013216:	0013      	movs	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	189b      	adds	r3, r3, r2
 801321c:	00db      	lsls	r3, r3, #3
 801321e:	18cb      	adds	r3, r1, r3
 8013220:	3338      	adds	r3, #56	@ 0x38
 8013222:	2200      	movs	r2, #0
 8013224:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013226:	183b      	adds	r3, r7, r0
 8013228:	781a      	ldrb	r2, [r3, #0]
 801322a:	6879      	ldr	r1, [r7, #4]
 801322c:	0013      	movs	r3, r2
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	189b      	adds	r3, r3, r2
 8013232:	00db      	lsls	r3, r3, #3
 8013234:	18cb      	adds	r3, r1, r3
 8013236:	333c      	adds	r3, #60	@ 0x3c
 8013238:	2200      	movs	r2, #0
 801323a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801323c:	183b      	adds	r3, r7, r0
 801323e:	781a      	ldrb	r2, [r3, #0]
 8013240:	6879      	ldr	r1, [r7, #4]
 8013242:	0013      	movs	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	189b      	adds	r3, r3, r2
 8013248:	00db      	lsls	r3, r3, #3
 801324a:	18cb      	adds	r3, r1, r3
 801324c:	3340      	adds	r3, #64	@ 0x40
 801324e:	2200      	movs	r2, #0
 8013250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013252:	183b      	adds	r3, r7, r0
 8013254:	781a      	ldrb	r2, [r3, #0]
 8013256:	183b      	adds	r3, r7, r0
 8013258:	3201      	adds	r2, #1
 801325a:	701a      	strb	r2, [r3, #0]
 801325c:	210f      	movs	r1, #15
 801325e:	187b      	adds	r3, r7, r1
 8013260:	781a      	ldrb	r2, [r3, #0]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	429a      	cmp	r2, r3
 8013268:	d3ae      	bcc.n	80131c8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801326a:	187b      	adds	r3, r7, r1
 801326c:	2200      	movs	r2, #0
 801326e:	701a      	strb	r2, [r3, #0]
 8013270:	e056      	b.n	8013320 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013272:	240f      	movs	r4, #15
 8013274:	193b      	adds	r3, r7, r4
 8013276:	781a      	ldrb	r2, [r3, #0]
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	236a      	movs	r3, #106	@ 0x6a
 801327c:	33ff      	adds	r3, #255	@ 0xff
 801327e:	0019      	movs	r1, r3
 8013280:	0013      	movs	r3, r2
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	189b      	adds	r3, r3, r2
 8013286:	00db      	lsls	r3, r3, #3
 8013288:	18c3      	adds	r3, r0, r3
 801328a:	185b      	adds	r3, r3, r1
 801328c:	2200      	movs	r2, #0
 801328e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013290:	193b      	adds	r3, r7, r4
 8013292:	781a      	ldrb	r2, [r3, #0]
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	23b4      	movs	r3, #180	@ 0xb4
 8013298:	0059      	lsls	r1, r3, #1
 801329a:	0013      	movs	r3, r2
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	189b      	adds	r3, r3, r2
 80132a0:	00db      	lsls	r3, r3, #3
 80132a2:	18c3      	adds	r3, r0, r3
 80132a4:	185b      	adds	r3, r3, r1
 80132a6:	193a      	adds	r2, r7, r4
 80132a8:	7812      	ldrb	r2, [r2, #0]
 80132aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80132ac:	193b      	adds	r3, r7, r4
 80132ae:	781a      	ldrb	r2, [r3, #0]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	236c      	movs	r3, #108	@ 0x6c
 80132b4:	33ff      	adds	r3, #255	@ 0xff
 80132b6:	0019      	movs	r1, r3
 80132b8:	0013      	movs	r3, r2
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	189b      	adds	r3, r3, r2
 80132be:	00db      	lsls	r3, r3, #3
 80132c0:	18c3      	adds	r3, r0, r3
 80132c2:	185b      	adds	r3, r3, r1
 80132c4:	2200      	movs	r2, #0
 80132c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80132c8:	193b      	adds	r3, r7, r4
 80132ca:	781a      	ldrb	r2, [r3, #0]
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	23bc      	movs	r3, #188	@ 0xbc
 80132d0:	0059      	lsls	r1, r3, #1
 80132d2:	0013      	movs	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	189b      	adds	r3, r3, r2
 80132d8:	00db      	lsls	r3, r3, #3
 80132da:	18c3      	adds	r3, r0, r3
 80132dc:	185b      	adds	r3, r3, r1
 80132de:	2200      	movs	r2, #0
 80132e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80132e2:	193b      	adds	r3, r7, r4
 80132e4:	781a      	ldrb	r2, [r3, #0]
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	23be      	movs	r3, #190	@ 0xbe
 80132ea:	0059      	lsls	r1, r3, #1
 80132ec:	0013      	movs	r3, r2
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	189b      	adds	r3, r3, r2
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	18c3      	adds	r3, r0, r3
 80132f6:	185b      	adds	r3, r3, r1
 80132f8:	2200      	movs	r2, #0
 80132fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80132fc:	193b      	adds	r3, r7, r4
 80132fe:	781a      	ldrb	r2, [r3, #0]
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	23c0      	movs	r3, #192	@ 0xc0
 8013304:	0059      	lsls	r1, r3, #1
 8013306:	0013      	movs	r3, r2
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	189b      	adds	r3, r3, r2
 801330c:	00db      	lsls	r3, r3, #3
 801330e:	18c3      	adds	r3, r0, r3
 8013310:	185b      	adds	r3, r3, r1
 8013312:	2200      	movs	r2, #0
 8013314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013316:	193b      	adds	r3, r7, r4
 8013318:	781a      	ldrb	r2, [r3, #0]
 801331a:	193b      	adds	r3, r7, r4
 801331c:	3201      	adds	r2, #1
 801331e:	701a      	strb	r2, [r3, #0]
 8013320:	230f      	movs	r3, #15
 8013322:	18fb      	adds	r3, r7, r3
 8013324:	781a      	ldrb	r2, [r3, #0]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	429a      	cmp	r2, r3
 801332c:	d3a1      	bcc.n	8013272 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6818      	ldr	r0, [r3, #0]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	466a      	mov	r2, sp
 8013336:	0011      	movs	r1, r2
 8013338:	001a      	movs	r2, r3
 801333a:	3210      	adds	r2, #16
 801333c:	ca70      	ldmia	r2!, {r4, r5, r6}
 801333e:	c170      	stmia	r1!, {r4, r5, r6}
 8013340:	ca30      	ldmia	r2!, {r4, r5}
 8013342:	c130      	stmia	r1!, {r4, r5}
 8013344:	6859      	ldr	r1, [r3, #4]
 8013346:	689a      	ldr	r2, [r3, #8]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	f005 fe4f 	bl	8018fec <USB_DevInit>

  hpcd->USB_Address = 0U;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2224      	movs	r2, #36	@ 0x24
 8013352:	2100      	movs	r1, #0
 8013354:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4a07      	ldr	r2, [pc, #28]	@ (8013378 <HAL_PCD_Init+0x1fc>)
 801335a:	2101      	movs	r1, #1
 801335c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	69db      	ldr	r3, [r3, #28]
 8013362:	2b01      	cmp	r3, #1
 8013364:	d103      	bne.n	801336e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	0018      	movs	r0, r3
 801336a:	f001 fd23 	bl	8014db4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801336e:	2300      	movs	r3, #0
}
 8013370:	0018      	movs	r0, r3
 8013372:	46bd      	mov	sp, r7
 8013374:	b005      	add	sp, #20
 8013376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013378:	000002a9 	.word	0x000002a9

0801337c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	23aa      	movs	r3, #170	@ 0xaa
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	5cd3      	ldrb	r3, [r2, r3]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d101      	bne.n	8013394 <HAL_PCD_Start+0x18>
 8013390:	2302      	movs	r3, #2
 8013392:	e014      	b.n	80133be <HAL_PCD_Start+0x42>
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	23aa      	movs	r3, #170	@ 0xaa
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	2101      	movs	r1, #1
 801339c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	0018      	movs	r0, r3
 80133a4:	f005 fdf2 	bl	8018f8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	0018      	movs	r0, r3
 80133ae:	f007 fdf5 	bl	801af9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	23aa      	movs	r3, #170	@ 0xaa
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	2100      	movs	r1, #0
 80133ba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80133bc:	2300      	movs	r3, #0
}
 80133be:	0018      	movs	r0, r3
 80133c0:	46bd      	mov	sp, r7
 80133c2:	b002      	add	sp, #8
 80133c4:	bd80      	pop	{r7, pc}
	...

080133c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	0018      	movs	r0, r3
 80133d6:	f007 fdf7 	bl	801afc8 <USB_ReadInterrupts>
 80133da:	0003      	movs	r3, r0
 80133dc:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80133de:	68fa      	ldr	r2, [r7, #12]
 80133e0:	2380      	movs	r3, #128	@ 0x80
 80133e2:	021b      	lsls	r3, r3, #8
 80133e4:	4013      	ands	r3, r2
 80133e6:	d004      	beq.n	80133f2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	0018      	movs	r0, r3
 80133ec:	f000 fb62 	bl	8013ab4 <PCD_EP_ISR_Handler>

    return;
 80133f0:	e11d      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80133f2:	68fa      	ldr	r2, [r7, #12]
 80133f4:	2380      	movs	r3, #128	@ 0x80
 80133f6:	00db      	lsls	r3, r3, #3
 80133f8:	4013      	ands	r3, r2
 80133fa:	d015      	beq.n	8013428 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2244      	movs	r2, #68	@ 0x44
 8013402:	5a9b      	ldrh	r3, [r3, r2]
 8013404:	b29a      	uxth	r2, r3
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	498a      	ldr	r1, [pc, #552]	@ (8013634 <HAL_PCD_IRQHandler+0x26c>)
 801340c:	400a      	ands	r2, r1
 801340e:	b291      	uxth	r1, r2
 8013410:	2244      	movs	r2, #68	@ 0x44
 8013412:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	0018      	movs	r0, r3
 8013418:	f009 fe95 	bl	801d146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2100      	movs	r1, #0
 8013420:	0018      	movs	r0, r3
 8013422:	f000 f915 	bl	8013650 <HAL_PCD_SetAddress>

    return;
 8013426:	e102      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8013428:	68fa      	ldr	r2, [r7, #12]
 801342a:	2380      	movs	r3, #128	@ 0x80
 801342c:	01db      	lsls	r3, r3, #7
 801342e:	4013      	ands	r3, r2
 8013430:	d00c      	beq.n	801344c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2244      	movs	r2, #68	@ 0x44
 8013438:	5a9b      	ldrh	r3, [r3, r2]
 801343a:	b29a      	uxth	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	497d      	ldr	r1, [pc, #500]	@ (8013638 <HAL_PCD_IRQHandler+0x270>)
 8013442:	400a      	ands	r2, r1
 8013444:	b291      	uxth	r1, r2
 8013446:	2244      	movs	r2, #68	@ 0x44
 8013448:	5299      	strh	r1, [r3, r2]

    return;
 801344a:	e0f0      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	2380      	movs	r3, #128	@ 0x80
 8013450:	019b      	lsls	r3, r3, #6
 8013452:	4013      	ands	r3, r2
 8013454:	d00c      	beq.n	8013470 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2244      	movs	r2, #68	@ 0x44
 801345c:	5a9b      	ldrh	r3, [r3, r2]
 801345e:	b29a      	uxth	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4975      	ldr	r1, [pc, #468]	@ (801363c <HAL_PCD_IRQHandler+0x274>)
 8013466:	400a      	ands	r2, r1
 8013468:	b291      	uxth	r1, r2
 801346a:	2244      	movs	r2, #68	@ 0x44
 801346c:	5299      	strh	r1, [r3, r2]

    return;
 801346e:	e0de      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013470:	68fa      	ldr	r2, [r7, #12]
 8013472:	2380      	movs	r3, #128	@ 0x80
 8013474:	015b      	lsls	r3, r3, #5
 8013476:	4013      	ands	r3, r2
 8013478:	d038      	beq.n	80134ec <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2240      	movs	r2, #64	@ 0x40
 8013480:	5a9b      	ldrh	r3, [r3, r2]
 8013482:	b29a      	uxth	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	2104      	movs	r1, #4
 801348a:	438a      	bics	r2, r1
 801348c:	b291      	uxth	r1, r2
 801348e:	2240      	movs	r2, #64	@ 0x40
 8013490:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2240      	movs	r2, #64	@ 0x40
 8013498:	5a9b      	ldrh	r3, [r3, r2]
 801349a:	b29a      	uxth	r2, r3
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2108      	movs	r1, #8
 80134a2:	438a      	bics	r2, r1
 80134a4:	b291      	uxth	r1, r2
 80134a6:	2240      	movs	r2, #64	@ 0x40
 80134a8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	23b8      	movs	r3, #184	@ 0xb8
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	5cd3      	ldrb	r3, [r2, r3]
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d109      	bne.n	80134ca <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	23b8      	movs	r3, #184	@ 0xb8
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	2100      	movs	r1, #0
 80134be:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2100      	movs	r1, #0
 80134c4:	0018      	movs	r0, r3
 80134c6:	f001 fc9f 	bl	8014e08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	0018      	movs	r0, r3
 80134ce:	f009 fe7b 	bl	801d1c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2244      	movs	r2, #68	@ 0x44
 80134d8:	5a9b      	ldrh	r3, [r3, r2]
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4957      	ldr	r1, [pc, #348]	@ (8013640 <HAL_PCD_IRQHandler+0x278>)
 80134e2:	400a      	ands	r2, r1
 80134e4:	b291      	uxth	r1, r2
 80134e6:	2244      	movs	r2, #68	@ 0x44
 80134e8:	5299      	strh	r1, [r3, r2]

    return;
 80134ea:	e0a0      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	2380      	movs	r3, #128	@ 0x80
 80134f0:	011b      	lsls	r3, r3, #4
 80134f2:	4013      	ands	r3, r2
 80134f4:	d028      	beq.n	8013548 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2240      	movs	r2, #64	@ 0x40
 80134fc:	5a9b      	ldrh	r3, [r3, r2]
 80134fe:	b29a      	uxth	r2, r3
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2108      	movs	r1, #8
 8013506:	430a      	orrs	r2, r1
 8013508:	b291      	uxth	r1, r2
 801350a:	2240      	movs	r2, #64	@ 0x40
 801350c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2244      	movs	r2, #68	@ 0x44
 8013514:	5a9b      	ldrh	r3, [r3, r2]
 8013516:	b29a      	uxth	r2, r3
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	4949      	ldr	r1, [pc, #292]	@ (8013644 <HAL_PCD_IRQHandler+0x27c>)
 801351e:	400a      	ands	r2, r1
 8013520:	b291      	uxth	r1, r2
 8013522:	2244      	movs	r2, #68	@ 0x44
 8013524:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2240      	movs	r2, #64	@ 0x40
 801352c:	5a9b      	ldrh	r3, [r3, r2]
 801352e:	b29a      	uxth	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2104      	movs	r1, #4
 8013536:	430a      	orrs	r2, r1
 8013538:	b291      	uxth	r1, r2
 801353a:	2240      	movs	r2, #64	@ 0x40
 801353c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	0018      	movs	r0, r3
 8013542:	f009 fe25 	bl	801d190 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013546:	e072      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2280      	movs	r2, #128	@ 0x80
 801354c:	4013      	ands	r3, r2
 801354e:	d046      	beq.n	80135de <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	2244      	movs	r2, #68	@ 0x44
 8013556:	5a9b      	ldrh	r3, [r3, r2]
 8013558:	b29a      	uxth	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2180      	movs	r1, #128	@ 0x80
 8013560:	438a      	bics	r2, r1
 8013562:	b291      	uxth	r1, r2
 8013564:	2244      	movs	r2, #68	@ 0x44
 8013566:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	23b8      	movs	r3, #184	@ 0xb8
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	5cd3      	ldrb	r3, [r2, r3]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d12f      	bne.n	80135d4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2240      	movs	r2, #64	@ 0x40
 801357a:	5a9b      	ldrh	r3, [r3, r2]
 801357c:	b29a      	uxth	r2, r3
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	2104      	movs	r1, #4
 8013584:	430a      	orrs	r2, r1
 8013586:	b291      	uxth	r1, r2
 8013588:	2240      	movs	r2, #64	@ 0x40
 801358a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2240      	movs	r2, #64	@ 0x40
 8013592:	5a9b      	ldrh	r3, [r3, r2]
 8013594:	b29a      	uxth	r2, r3
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2108      	movs	r1, #8
 801359c:	430a      	orrs	r2, r1
 801359e:	b291      	uxth	r1, r2
 80135a0:	2240      	movs	r2, #64	@ 0x40
 80135a2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	23b8      	movs	r3, #184	@ 0xb8
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	2101      	movs	r1, #1
 80135ac:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2254      	movs	r2, #84	@ 0x54
 80135b4:	5a9b      	ldrh	r3, [r3, r2]
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	089b      	lsrs	r3, r3, #2
 80135ba:	223c      	movs	r2, #60	@ 0x3c
 80135bc:	4013      	ands	r3, r2
 80135be:	0019      	movs	r1, r3
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	23b9      	movs	r3, #185	@ 0xb9
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2101      	movs	r1, #1
 80135cc:	0018      	movs	r0, r3
 80135ce:	f001 fc1b 	bl	8014e08 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80135d2:	e02c      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	0018      	movs	r0, r3
 80135d8:	f009 fdda 	bl	801d190 <HAL_PCD_SuspendCallback>
    return;
 80135dc:	e027      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80135de:	68fa      	ldr	r2, [r7, #12]
 80135e0:	2380      	movs	r3, #128	@ 0x80
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	4013      	ands	r3, r2
 80135e6:	d010      	beq.n	801360a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2244      	movs	r2, #68	@ 0x44
 80135ee:	5a9b      	ldrh	r3, [r3, r2]
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	4914      	ldr	r1, [pc, #80]	@ (8013648 <HAL_PCD_IRQHandler+0x280>)
 80135f8:	400a      	ands	r2, r1
 80135fa:	b291      	uxth	r1, r2
 80135fc:	2244      	movs	r2, #68	@ 0x44
 80135fe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	0018      	movs	r0, r3
 8013604:	f009 fd90 	bl	801d128 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013608:	e011      	b.n	801362e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801360a:	68fa      	ldr	r2, [r7, #12]
 801360c:	2380      	movs	r3, #128	@ 0x80
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	4013      	ands	r3, r2
 8013612:	d00c      	beq.n	801362e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2244      	movs	r2, #68	@ 0x44
 801361a:	5a9b      	ldrh	r3, [r3, r2]
 801361c:	b29a      	uxth	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	490a      	ldr	r1, [pc, #40]	@ (801364c <HAL_PCD_IRQHandler+0x284>)
 8013624:	400a      	ands	r2, r1
 8013626:	b291      	uxth	r1, r2
 8013628:	2244      	movs	r2, #68	@ 0x44
 801362a:	5299      	strh	r1, [r3, r2]

    return;
 801362c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801362e:	46bd      	mov	sp, r7
 8013630:	b004      	add	sp, #16
 8013632:	bd80      	pop	{r7, pc}
 8013634:	fffffbff 	.word	0xfffffbff
 8013638:	ffffbfff 	.word	0xffffbfff
 801363c:	ffffdfff 	.word	0xffffdfff
 8013640:	ffffefff 	.word	0xffffefff
 8013644:	fffff7ff 	.word	0xfffff7ff
 8013648:	fffffdff 	.word	0xfffffdff
 801364c:	fffffeff 	.word	0xfffffeff

08013650 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	000a      	movs	r2, r1
 801365a:	1cfb      	adds	r3, r7, #3
 801365c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	23aa      	movs	r3, #170	@ 0xaa
 8013662:	009b      	lsls	r3, r3, #2
 8013664:	5cd3      	ldrb	r3, [r2, r3]
 8013666:	2b01      	cmp	r3, #1
 8013668:	d101      	bne.n	801366e <HAL_PCD_SetAddress+0x1e>
 801366a:	2302      	movs	r3, #2
 801366c:	e017      	b.n	801369e <HAL_PCD_SetAddress+0x4e>
 801366e:	687a      	ldr	r2, [r7, #4]
 8013670:	23aa      	movs	r3, #170	@ 0xaa
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	2101      	movs	r1, #1
 8013676:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	1cfa      	adds	r2, r7, #3
 801367c:	2124      	movs	r1, #36	@ 0x24
 801367e:	7812      	ldrb	r2, [r2, #0]
 8013680:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	1cfb      	adds	r3, r7, #3
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	0019      	movs	r1, r3
 801368c:	0010      	movs	r0, r2
 801368e:	f007 fc71 	bl	801af74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	23aa      	movs	r3, #170	@ 0xaa
 8013696:	009b      	lsls	r3, r3, #2
 8013698:	2100      	movs	r1, #0
 801369a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801369c:	2300      	movs	r3, #0
}
 801369e:	0018      	movs	r0, r3
 80136a0:	46bd      	mov	sp, r7
 80136a2:	b002      	add	sp, #8
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80136a6:	b590      	push	{r4, r7, lr}
 80136a8:	b085      	sub	sp, #20
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
 80136ae:	000c      	movs	r4, r1
 80136b0:	0010      	movs	r0, r2
 80136b2:	0019      	movs	r1, r3
 80136b4:	1cfb      	adds	r3, r7, #3
 80136b6:	1c22      	adds	r2, r4, #0
 80136b8:	701a      	strb	r2, [r3, #0]
 80136ba:	003b      	movs	r3, r7
 80136bc:	1c02      	adds	r2, r0, #0
 80136be:	801a      	strh	r2, [r3, #0]
 80136c0:	1cbb      	adds	r3, r7, #2
 80136c2:	1c0a      	adds	r2, r1, #0
 80136c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80136c6:	230b      	movs	r3, #11
 80136c8:	18fb      	adds	r3, r7, r3
 80136ca:	2200      	movs	r2, #0
 80136cc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80136ce:	1cfb      	adds	r3, r7, #3
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	b25b      	sxtb	r3, r3
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	da0f      	bge.n	80136f8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80136d8:	1cfb      	adds	r3, r7, #3
 80136da:	781b      	ldrb	r3, [r3, #0]
 80136dc:	2207      	movs	r2, #7
 80136de:	4013      	ands	r3, r2
 80136e0:	1c5a      	adds	r2, r3, #1
 80136e2:	0013      	movs	r3, r2
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	189b      	adds	r3, r3, r2
 80136e8:	00db      	lsls	r3, r3, #3
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	18d3      	adds	r3, r2, r3
 80136ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	2201      	movs	r2, #1
 80136f4:	705a      	strb	r2, [r3, #1]
 80136f6:	e00f      	b.n	8013718 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80136f8:	1cfb      	adds	r3, r7, #3
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	2207      	movs	r2, #7
 80136fe:	401a      	ands	r2, r3
 8013700:	0013      	movs	r3, r2
 8013702:	009b      	lsls	r3, r3, #2
 8013704:	189b      	adds	r3, r3, r2
 8013706:	00db      	lsls	r3, r3, #3
 8013708:	3369      	adds	r3, #105	@ 0x69
 801370a:	33ff      	adds	r3, #255	@ 0xff
 801370c:	687a      	ldr	r2, [r7, #4]
 801370e:	18d3      	adds	r3, r2, r3
 8013710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2200      	movs	r2, #0
 8013716:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013718:	1cfb      	adds	r3, r7, #3
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	2207      	movs	r2, #7
 801371e:	4013      	ands	r3, r2
 8013720:	b2da      	uxtb	r2, r3
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013726:	003b      	movs	r3, r7
 8013728:	881a      	ldrh	r2, [r3, #0]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	1cba      	adds	r2, r7, #2
 8013732:	7812      	ldrb	r2, [r2, #0]
 8013734:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013736:	1cbb      	adds	r3, r7, #2
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	2b02      	cmp	r3, #2
 801373c:	d102      	bne.n	8013744 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2200      	movs	r2, #0
 8013742:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	23aa      	movs	r3, #170	@ 0xaa
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	5cd3      	ldrb	r3, [r2, r3]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d101      	bne.n	8013754 <HAL_PCD_EP_Open+0xae>
 8013750:	2302      	movs	r3, #2
 8013752:	e013      	b.n	801377c <HAL_PCD_EP_Open+0xd6>
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	23aa      	movs	r3, #170	@ 0xaa
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	2101      	movs	r1, #1
 801375c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	68fa      	ldr	r2, [r7, #12]
 8013764:	0011      	movs	r1, r2
 8013766:	0018      	movs	r0, r3
 8013768:	f005 fc68 	bl	801903c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801376c:	687a      	ldr	r2, [r7, #4]
 801376e:	23aa      	movs	r3, #170	@ 0xaa
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	2100      	movs	r1, #0
 8013774:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013776:	230b      	movs	r3, #11
 8013778:	18fb      	adds	r3, r7, r3
 801377a:	781b      	ldrb	r3, [r3, #0]
}
 801377c:	0018      	movs	r0, r3
 801377e:	46bd      	mov	sp, r7
 8013780:	b005      	add	sp, #20
 8013782:	bd90      	pop	{r4, r7, pc}

08013784 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	000a      	movs	r2, r1
 801378e:	1cfb      	adds	r3, r7, #3
 8013790:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013792:	1cfb      	adds	r3, r7, #3
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	b25b      	sxtb	r3, r3
 8013798:	2b00      	cmp	r3, #0
 801379a:	da0f      	bge.n	80137bc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801379c:	1cfb      	adds	r3, r7, #3
 801379e:	781b      	ldrb	r3, [r3, #0]
 80137a0:	2207      	movs	r2, #7
 80137a2:	4013      	ands	r3, r2
 80137a4:	1c5a      	adds	r2, r3, #1
 80137a6:	0013      	movs	r3, r2
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	189b      	adds	r3, r3, r2
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	18d3      	adds	r3, r2, r3
 80137b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2201      	movs	r2, #1
 80137b8:	705a      	strb	r2, [r3, #1]
 80137ba:	e00f      	b.n	80137dc <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80137bc:	1cfb      	adds	r3, r7, #3
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	2207      	movs	r2, #7
 80137c2:	401a      	ands	r2, r3
 80137c4:	0013      	movs	r3, r2
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	189b      	adds	r3, r3, r2
 80137ca:	00db      	lsls	r3, r3, #3
 80137cc:	3369      	adds	r3, #105	@ 0x69
 80137ce:	33ff      	adds	r3, #255	@ 0xff
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	18d3      	adds	r3, r2, r3
 80137d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2200      	movs	r2, #0
 80137da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80137dc:	1cfb      	adds	r3, r7, #3
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2207      	movs	r2, #7
 80137e2:	4013      	ands	r3, r2
 80137e4:	b2da      	uxtb	r2, r3
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	23aa      	movs	r3, #170	@ 0xaa
 80137ee:	009b      	lsls	r3, r3, #2
 80137f0:	5cd3      	ldrb	r3, [r2, r3]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d101      	bne.n	80137fa <HAL_PCD_EP_Close+0x76>
 80137f6:	2302      	movs	r3, #2
 80137f8:	e011      	b.n	801381e <HAL_PCD_EP_Close+0x9a>
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	23aa      	movs	r3, #170	@ 0xaa
 80137fe:	009b      	lsls	r3, r3, #2
 8013800:	2101      	movs	r1, #1
 8013802:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	0011      	movs	r1, r2
 801380c:	0018      	movs	r0, r3
 801380e:	f005 ffb7 	bl	8019780 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	23aa      	movs	r3, #170	@ 0xaa
 8013816:	009b      	lsls	r3, r3, #2
 8013818:	2100      	movs	r1, #0
 801381a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 801381c:	2300      	movs	r3, #0
}
 801381e:	0018      	movs	r0, r3
 8013820:	46bd      	mov	sp, r7
 8013822:	b004      	add	sp, #16
 8013824:	bd80      	pop	{r7, pc}

08013826 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013826:	b580      	push	{r7, lr}
 8013828:	b086      	sub	sp, #24
 801382a:	af00      	add	r7, sp, #0
 801382c:	60f8      	str	r0, [r7, #12]
 801382e:	607a      	str	r2, [r7, #4]
 8013830:	603b      	str	r3, [r7, #0]
 8013832:	200b      	movs	r0, #11
 8013834:	183b      	adds	r3, r7, r0
 8013836:	1c0a      	adds	r2, r1, #0
 8013838:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801383a:	0001      	movs	r1, r0
 801383c:	187b      	adds	r3, r7, r1
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	2207      	movs	r2, #7
 8013842:	401a      	ands	r2, r3
 8013844:	0013      	movs	r3, r2
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	189b      	adds	r3, r3, r2
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	3369      	adds	r3, #105	@ 0x69
 801384e:	33ff      	adds	r3, #255	@ 0xff
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	18d3      	adds	r3, r2, r3
 8013854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	683a      	ldr	r2, [r7, #0]
 8013860:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	2200      	movs	r2, #0
 8013866:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	2200      	movs	r2, #0
 801386c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801386e:	187b      	adds	r3, r7, r1
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	2207      	movs	r2, #7
 8013874:	4013      	ands	r3, r2
 8013876:	b2da      	uxtb	r2, r3
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	697a      	ldr	r2, [r7, #20]
 8013882:	0011      	movs	r1, r2
 8013884:	0018      	movs	r0, r3
 8013886:	f006 f93b 	bl	8019b00 <USB_EPStartXfer>

  return HAL_OK;
 801388a:	2300      	movs	r3, #0
}
 801388c:	0018      	movs	r0, r3
 801388e:	46bd      	mov	sp, r7
 8013890:	b006      	add	sp, #24
 8013892:	bd80      	pop	{r7, pc}

08013894 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	000a      	movs	r2, r1
 801389e:	1cfb      	adds	r3, r7, #3
 80138a0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80138a2:	1cfb      	adds	r3, r7, #3
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	2207      	movs	r2, #7
 80138a8:	401a      	ands	r2, r3
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	23c2      	movs	r3, #194	@ 0xc2
 80138ae:	0059      	lsls	r1, r3, #1
 80138b0:	0013      	movs	r3, r2
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	189b      	adds	r3, r3, r2
 80138b6:	00db      	lsls	r3, r3, #3
 80138b8:	18c3      	adds	r3, r0, r3
 80138ba:	185b      	adds	r3, r3, r1
 80138bc:	681b      	ldr	r3, [r3, #0]
}
 80138be:	0018      	movs	r0, r3
 80138c0:	46bd      	mov	sp, r7
 80138c2:	b002      	add	sp, #8
 80138c4:	bd80      	pop	{r7, pc}

080138c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80138c6:	b580      	push	{r7, lr}
 80138c8:	b086      	sub	sp, #24
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	60f8      	str	r0, [r7, #12]
 80138ce:	607a      	str	r2, [r7, #4]
 80138d0:	603b      	str	r3, [r7, #0]
 80138d2:	200b      	movs	r0, #11
 80138d4:	183b      	adds	r3, r7, r0
 80138d6:	1c0a      	adds	r2, r1, #0
 80138d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80138da:	183b      	adds	r3, r7, r0
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	2207      	movs	r2, #7
 80138e0:	4013      	ands	r3, r2
 80138e2:	1c5a      	adds	r2, r3, #1
 80138e4:	0013      	movs	r3, r2
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	189b      	adds	r3, r3, r2
 80138ea:	00db      	lsls	r3, r3, #3
 80138ec:	68fa      	ldr	r2, [r7, #12]
 80138ee:	18d3      	adds	r3, r2, r3
 80138f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80138f8:	697b      	ldr	r3, [r7, #20]
 80138fa:	683a      	ldr	r2, [r7, #0]
 80138fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	2224      	movs	r2, #36	@ 0x24
 8013902:	2101      	movs	r1, #1
 8013904:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	683a      	ldr	r2, [r7, #0]
 801390a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	2200      	movs	r2, #0
 8013910:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	2201      	movs	r2, #1
 8013916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013918:	183b      	adds	r3, r7, r0
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	2207      	movs	r2, #7
 801391e:	4013      	ands	r3, r2
 8013920:	b2da      	uxtb	r2, r3
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	0011      	movs	r1, r2
 801392e:	0018      	movs	r0, r3
 8013930:	f006 f8e6 	bl	8019b00 <USB_EPStartXfer>

  return HAL_OK;
 8013934:	2300      	movs	r3, #0
}
 8013936:	0018      	movs	r0, r3
 8013938:	46bd      	mov	sp, r7
 801393a:	b006      	add	sp, #24
 801393c:	bd80      	pop	{r7, pc}

0801393e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801393e:	b580      	push	{r7, lr}
 8013940:	b084      	sub	sp, #16
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
 8013946:	000a      	movs	r2, r1
 8013948:	1cfb      	adds	r3, r7, #3
 801394a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801394c:	1cfb      	adds	r3, r7, #3
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	2207      	movs	r2, #7
 8013952:	401a      	ands	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	429a      	cmp	r2, r3
 801395a:	d901      	bls.n	8013960 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 801395c:	2301      	movs	r3, #1
 801395e:	e046      	b.n	80139ee <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013960:	1cfb      	adds	r3, r7, #3
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	b25b      	sxtb	r3, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	da0f      	bge.n	801398a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801396a:	1cfb      	adds	r3, r7, #3
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	2207      	movs	r2, #7
 8013970:	4013      	ands	r3, r2
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	0013      	movs	r3, r2
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	189b      	adds	r3, r3, r2
 801397a:	00db      	lsls	r3, r3, #3
 801397c:	687a      	ldr	r2, [r7, #4]
 801397e:	18d3      	adds	r3, r2, r3
 8013980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2201      	movs	r2, #1
 8013986:	705a      	strb	r2, [r3, #1]
 8013988:	e00d      	b.n	80139a6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801398a:	1cfb      	adds	r3, r7, #3
 801398c:	781a      	ldrb	r2, [r3, #0]
 801398e:	0013      	movs	r3, r2
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	189b      	adds	r3, r3, r2
 8013994:	00db      	lsls	r3, r3, #3
 8013996:	3369      	adds	r3, #105	@ 0x69
 8013998:	33ff      	adds	r3, #255	@ 0xff
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	18d3      	adds	r3, r2, r3
 801399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2200      	movs	r2, #0
 80139a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2201      	movs	r2, #1
 80139aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80139ac:	1cfb      	adds	r3, r7, #3
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	2207      	movs	r2, #7
 80139b2:	4013      	ands	r3, r2
 80139b4:	b2da      	uxtb	r2, r3
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	23aa      	movs	r3, #170	@ 0xaa
 80139be:	009b      	lsls	r3, r3, #2
 80139c0:	5cd3      	ldrb	r3, [r2, r3]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d101      	bne.n	80139ca <HAL_PCD_EP_SetStall+0x8c>
 80139c6:	2302      	movs	r3, #2
 80139c8:	e011      	b.n	80139ee <HAL_PCD_EP_SetStall+0xb0>
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	23aa      	movs	r3, #170	@ 0xaa
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	2101      	movs	r1, #1
 80139d2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	68fa      	ldr	r2, [r7, #12]
 80139da:	0011      	movs	r1, r2
 80139dc:	0018      	movs	r0, r3
 80139de:	f007 f9c7 	bl	801ad70 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	23aa      	movs	r3, #170	@ 0xaa
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	2100      	movs	r1, #0
 80139ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	0018      	movs	r0, r3
 80139f0:	46bd      	mov	sp, r7
 80139f2:	b004      	add	sp, #16
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b084      	sub	sp, #16
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	000a      	movs	r2, r1
 8013a00:	1cfb      	adds	r3, r7, #3
 8013a02:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013a04:	1cfb      	adds	r3, r7, #3
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	220f      	movs	r2, #15
 8013a0a:	401a      	ands	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d901      	bls.n	8013a18 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013a14:	2301      	movs	r3, #1
 8013a16:	e048      	b.n	8013aaa <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013a18:	1cfb      	adds	r3, r7, #3
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	b25b      	sxtb	r3, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	da0f      	bge.n	8013a42 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013a22:	1cfb      	adds	r3, r7, #3
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	2207      	movs	r2, #7
 8013a28:	4013      	ands	r3, r2
 8013a2a:	1c5a      	adds	r2, r3, #1
 8013a2c:	0013      	movs	r3, r2
 8013a2e:	009b      	lsls	r3, r3, #2
 8013a30:	189b      	adds	r3, r3, r2
 8013a32:	00db      	lsls	r3, r3, #3
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	18d3      	adds	r3, r2, r3
 8013a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	705a      	strb	r2, [r3, #1]
 8013a40:	e00f      	b.n	8013a62 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013a42:	1cfb      	adds	r3, r7, #3
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	2207      	movs	r2, #7
 8013a48:	401a      	ands	r2, r3
 8013a4a:	0013      	movs	r3, r2
 8013a4c:	009b      	lsls	r3, r3, #2
 8013a4e:	189b      	adds	r3, r3, r2
 8013a50:	00db      	lsls	r3, r3, #3
 8013a52:	3369      	adds	r3, #105	@ 0x69
 8013a54:	33ff      	adds	r3, #255	@ 0xff
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	18d3      	adds	r3, r2, r3
 8013a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	2200      	movs	r2, #0
 8013a66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a68:	1cfb      	adds	r3, r7, #3
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2207      	movs	r2, #7
 8013a6e:	4013      	ands	r3, r2
 8013a70:	b2da      	uxtb	r2, r3
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	23aa      	movs	r3, #170	@ 0xaa
 8013a7a:	009b      	lsls	r3, r3, #2
 8013a7c:	5cd3      	ldrb	r3, [r2, r3]
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d101      	bne.n	8013a86 <HAL_PCD_EP_ClrStall+0x90>
 8013a82:	2302      	movs	r3, #2
 8013a84:	e011      	b.n	8013aaa <HAL_PCD_EP_ClrStall+0xb4>
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	23aa      	movs	r3, #170	@ 0xaa
 8013a8a:	009b      	lsls	r3, r3, #2
 8013a8c:	2101      	movs	r1, #1
 8013a8e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	68fa      	ldr	r2, [r7, #12]
 8013a96:	0011      	movs	r1, r2
 8013a98:	0018      	movs	r0, r3
 8013a9a:	f007 f9b9 	bl	801ae10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	23aa      	movs	r3, #170	@ 0xaa
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	2100      	movs	r1, #0
 8013aa6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	0018      	movs	r0, r3
 8013aac:	46bd      	mov	sp, r7
 8013aae:	b004      	add	sp, #16
 8013ab0:	bd80      	pop	{r7, pc}
	...

08013ab4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013ab4:	b5b0      	push	{r4, r5, r7, lr}
 8013ab6:	b096      	sub	sp, #88	@ 0x58
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013abc:	f000 fbec 	bl	8014298 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	204e      	movs	r0, #78	@ 0x4e
 8013ac6:	183b      	adds	r3, r7, r0
 8013ac8:	2144      	movs	r1, #68	@ 0x44
 8013aca:	5a52      	ldrh	r2, [r2, r1]
 8013acc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013ace:	183b      	adds	r3, r7, r0
 8013ad0:	881b      	ldrh	r3, [r3, #0]
 8013ad2:	b2da      	uxtb	r2, r3
 8013ad4:	244d      	movs	r4, #77	@ 0x4d
 8013ad6:	193b      	adds	r3, r7, r4
 8013ad8:	210f      	movs	r1, #15
 8013ada:	400a      	ands	r2, r1
 8013adc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013ade:	193b      	adds	r3, r7, r4
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d000      	beq.n	8013ae8 <PCD_EP_ISR_Handler+0x34>
 8013ae6:	e18f      	b.n	8013e08 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013ae8:	183b      	adds	r3, r7, r0
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	2210      	movs	r2, #16
 8013aee:	4013      	ands	r3, r2
 8013af0:	d155      	bne.n	8013b9e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	200e      	movs	r0, #14
 8013afc:	183b      	adds	r3, r7, r0
 8013afe:	49bb      	ldr	r1, [pc, #748]	@ (8013dec <PCD_EP_ISR_Handler+0x338>)
 8013b00:	400a      	ands	r2, r1
 8013b02:	801a      	strh	r2, [r3, #0]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	183a      	adds	r2, r7, r0
 8013b0a:	8812      	ldrh	r2, [r2, #0]
 8013b0c:	49b8      	ldr	r1, [pc, #736]	@ (8013df0 <PCD_EP_ISR_Handler+0x33c>)
 8013b0e:	430a      	orrs	r2, r1
 8013b10:	b292      	uxth	r2, r2
 8013b12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	3328      	adds	r3, #40	@ 0x28
 8013b18:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2250      	movs	r2, #80	@ 0x50
 8013b20:	5a9b      	ldrh	r3, [r3, r2]
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	001a      	movs	r2, r3
 8013b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	00db      	lsls	r3, r3, #3
 8013b2c:	18d2      	adds	r2, r2, r3
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	18d3      	adds	r3, r2, r3
 8013b34:	4aaf      	ldr	r2, [pc, #700]	@ (8013df4 <PCD_EP_ISR_Handler+0x340>)
 8013b36:	4694      	mov	ip, r2
 8013b38:	4463      	add	r3, ip
 8013b3a:	881b      	ldrh	r3, [r3, #0]
 8013b3c:	059b      	lsls	r3, r3, #22
 8013b3e:	0d9a      	lsrs	r2, r3, #22
 8013b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b42:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b46:	695a      	ldr	r2, [r3, #20]
 8013b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b4a:	69db      	ldr	r3, [r3, #28]
 8013b4c:	18d2      	adds	r2, r2, r3
 8013b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b50:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2100      	movs	r1, #0
 8013b56:	0018      	movs	r0, r3
 8013b58:	f009 fac8 	bl	801d0ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2224      	movs	r2, #36	@ 0x24
 8013b60:	5c9b      	ldrb	r3, [r3, r2]
 8013b62:	b2db      	uxtb	r3, r3
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d101      	bne.n	8013b6c <PCD_EP_ISR_Handler+0xb8>
 8013b68:	f000 fb96 	bl	8014298 <PCD_EP_ISR_Handler+0x7e4>
 8013b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b6e:	699b      	ldr	r3, [r3, #24]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d001      	beq.n	8013b78 <PCD_EP_ISR_Handler+0xc4>
 8013b74:	f000 fb90 	bl	8014298 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2224      	movs	r2, #36	@ 0x24
 8013b7c:	5c9b      	ldrb	r3, [r3, r2]
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	2280      	movs	r2, #128	@ 0x80
 8013b82:	4252      	negs	r2, r2
 8013b84:	4313      	orrs	r3, r2
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	0011      	movs	r1, r2
 8013b8e:	224c      	movs	r2, #76	@ 0x4c
 8013b90:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2224      	movs	r2, #36	@ 0x24
 8013b96:	2100      	movs	r1, #0
 8013b98:	5499      	strb	r1, [r3, r2]
 8013b9a:	f000 fb7d 	bl	8014298 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	3369      	adds	r3, #105	@ 0x69
 8013ba2:	33ff      	adds	r3, #255	@ 0xff
 8013ba4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	214a      	movs	r1, #74	@ 0x4a
 8013bac:	187b      	adds	r3, r7, r1
 8013bae:	8812      	ldrh	r2, [r2, #0]
 8013bb0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013bb2:	187b      	adds	r3, r7, r1
 8013bb4:	881a      	ldrh	r2, [r3, #0]
 8013bb6:	2380      	movs	r3, #128	@ 0x80
 8013bb8:	011b      	lsls	r3, r3, #4
 8013bba:	4013      	ands	r3, r2
 8013bbc:	d037      	beq.n	8013c2e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2250      	movs	r2, #80	@ 0x50
 8013bc4:	5a9b      	ldrh	r3, [r3, r2]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	001a      	movs	r2, r3
 8013bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	00db      	lsls	r3, r3, #3
 8013bd0:	18d2      	adds	r2, r2, r3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	18d3      	adds	r3, r2, r3
 8013bd8:	4a87      	ldr	r2, [pc, #540]	@ (8013df8 <PCD_EP_ISR_Handler+0x344>)
 8013bda:	4694      	mov	ip, r2
 8013bdc:	4463      	add	r3, ip
 8013bde:	881b      	ldrh	r3, [r3, #0]
 8013be0:	059b      	lsls	r3, r3, #22
 8013be2:	0d9a      	lsrs	r2, r3, #22
 8013be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013be6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6818      	ldr	r0, [r3, #0]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	22ac      	movs	r2, #172	@ 0xac
 8013bf0:	0092      	lsls	r2, r2, #2
 8013bf2:	1899      	adds	r1, r3, r2
 8013bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bf6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bfa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	f007 fa3a 	bl	801b076 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	881b      	ldrh	r3, [r3, #0]
 8013c08:	b29a      	uxth	r2, r3
 8013c0a:	2010      	movs	r0, #16
 8013c0c:	183b      	adds	r3, r7, r0
 8013c0e:	497b      	ldr	r1, [pc, #492]	@ (8013dfc <PCD_EP_ISR_Handler+0x348>)
 8013c10:	400a      	ands	r2, r1
 8013c12:	801a      	strh	r2, [r3, #0]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	183a      	adds	r2, r7, r0
 8013c1a:	8812      	ldrh	r2, [r2, #0]
 8013c1c:	2180      	movs	r1, #128	@ 0x80
 8013c1e:	430a      	orrs	r2, r1
 8013c20:	b292      	uxth	r2, r2
 8013c22:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	0018      	movs	r0, r3
 8013c28:	f009 fa2a 	bl	801d080 <HAL_PCD_SetupStageCallback>
 8013c2c:	e334      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013c2e:	234a      	movs	r3, #74	@ 0x4a
 8013c30:	18fb      	adds	r3, r7, r3
 8013c32:	2200      	movs	r2, #0
 8013c34:	5e9b      	ldrsh	r3, [r3, r2]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	db00      	blt.n	8013c3c <PCD_EP_ISR_Handler+0x188>
 8013c3a:	e32d      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	881b      	ldrh	r3, [r3, #0]
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	201e      	movs	r0, #30
 8013c46:	183b      	adds	r3, r7, r0
 8013c48:	496c      	ldr	r1, [pc, #432]	@ (8013dfc <PCD_EP_ISR_Handler+0x348>)
 8013c4a:	400a      	ands	r2, r1
 8013c4c:	801a      	strh	r2, [r3, #0]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	183a      	adds	r2, r7, r0
 8013c54:	8812      	ldrh	r2, [r2, #0]
 8013c56:	2180      	movs	r1, #128	@ 0x80
 8013c58:	430a      	orrs	r2, r1
 8013c5a:	b292      	uxth	r2, r2
 8013c5c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2250      	movs	r2, #80	@ 0x50
 8013c64:	5a9b      	ldrh	r3, [r3, r2]
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	001a      	movs	r2, r3
 8013c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	18d2      	adds	r2, r2, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	18d3      	adds	r3, r2, r3
 8013c78:	4a5f      	ldr	r2, [pc, #380]	@ (8013df8 <PCD_EP_ISR_Handler+0x344>)
 8013c7a:	4694      	mov	ip, r2
 8013c7c:	4463      	add	r3, ip
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	059b      	lsls	r3, r3, #22
 8013c82:	0d9a      	lsrs	r2, r3, #22
 8013c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c8a:	69db      	ldr	r3, [r3, #28]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d01a      	beq.n	8013cc6 <PCD_EP_ISR_Handler+0x212>
 8013c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c92:	695b      	ldr	r3, [r3, #20]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d016      	beq.n	8013cc6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6818      	ldr	r0, [r3, #0]
 8013c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c9e:	6959      	ldr	r1, [r3, #20]
 8013ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ca2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ca6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013ca8:	b29b      	uxth	r3, r3
 8013caa:	f007 f9e4 	bl	801b076 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb0:	695a      	ldr	r2, [r3, #20]
 8013cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb4:	69db      	ldr	r3, [r3, #28]
 8013cb6:	18d2      	adds	r2, r2, r3
 8013cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	0018      	movs	r0, r3
 8013cc2:	f009 f9f2 	bl	801d0aa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	214a      	movs	r1, #74	@ 0x4a
 8013ccc:	187b      	adds	r3, r7, r1
 8013cce:	8812      	ldrh	r2, [r2, #0]
 8013cd0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013cd2:	187b      	adds	r3, r7, r1
 8013cd4:	881a      	ldrh	r2, [r3, #0]
 8013cd6:	2380      	movs	r3, #128	@ 0x80
 8013cd8:	011b      	lsls	r3, r3, #4
 8013cda:	4013      	ands	r3, r2
 8013cdc:	d000      	beq.n	8013ce0 <PCD_EP_ISR_Handler+0x22c>
 8013cde:	e2db      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
 8013ce0:	187b      	adds	r3, r7, r1
 8013ce2:	881a      	ldrh	r2, [r3, #0]
 8013ce4:	23c0      	movs	r3, #192	@ 0xc0
 8013ce6:	019b      	lsls	r3, r3, #6
 8013ce8:	401a      	ands	r2, r3
 8013cea:	23c0      	movs	r3, #192	@ 0xc0
 8013cec:	019b      	lsls	r3, r3, #6
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d100      	bne.n	8013cf4 <PCD_EP_ISR_Handler+0x240>
 8013cf2:	e2d1      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	61bb      	str	r3, [r7, #24]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2250      	movs	r2, #80	@ 0x50
 8013d00:	5a9b      	ldrh	r3, [r3, r2]
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	001a      	movs	r2, r3
 8013d06:	69bb      	ldr	r3, [r7, #24]
 8013d08:	189b      	adds	r3, r3, r2
 8013d0a:	61bb      	str	r3, [r7, #24]
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8013df8 <PCD_EP_ISR_Handler+0x344>)
 8013d10:	4694      	mov	ip, r2
 8013d12:	4463      	add	r3, ip
 8013d14:	617b      	str	r3, [r7, #20]
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	059b      	lsls	r3, r3, #22
 8013d1e:	0d9b      	lsrs	r3, r3, #22
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	801a      	strh	r2, [r3, #0]
 8013d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d28:	691b      	ldr	r3, [r3, #16]
 8013d2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8013d2c:	d91a      	bls.n	8013d64 <PCD_EP_ISR_Handler+0x2b0>
 8013d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	095b      	lsrs	r3, r3, #5
 8013d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d38:	691b      	ldr	r3, [r3, #16]
 8013d3a:	221f      	movs	r2, #31
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	d102      	bne.n	8013d46 <PCD_EP_ISR_Handler+0x292>
 8013d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d42:	3b01      	subs	r3, #1
 8013d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	881b      	ldrh	r3, [r3, #0]
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	029b      	lsls	r3, r3, #10
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	4313      	orrs	r3, r2
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	4a25      	ldr	r2, [pc, #148]	@ (8013df0 <PCD_EP_ISR_Handler+0x33c>)
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	b29a      	uxth	r2, r3
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	801a      	strh	r2, [r3, #0]
 8013d62:	e023      	b.n	8013dac <PCD_EP_ISR_Handler+0x2f8>
 8013d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d66:	691b      	ldr	r3, [r3, #16]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d108      	bne.n	8013d7e <PCD_EP_ISR_Handler+0x2ca>
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	4a1f      	ldr	r2, [pc, #124]	@ (8013df0 <PCD_EP_ISR_Handler+0x33c>)
 8013d74:	4313      	orrs	r3, r2
 8013d76:	b29a      	uxth	r2, r3
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	801a      	strh	r2, [r3, #0]
 8013d7c:	e016      	b.n	8013dac <PCD_EP_ISR_Handler+0x2f8>
 8013d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d80:	691b      	ldr	r3, [r3, #16]
 8013d82:	085b      	lsrs	r3, r3, #1
 8013d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	4013      	ands	r3, r2
 8013d8e:	d002      	beq.n	8013d96 <PCD_EP_ISR_Handler+0x2e2>
 8013d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d92:	3301      	adds	r3, #1
 8013d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	881b      	ldrh	r3, [r3, #0]
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	029b      	lsls	r3, r3, #10
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	4313      	orrs	r3, r2
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	2012      	movs	r0, #18
 8013db6:	183b      	adds	r3, r7, r0
 8013db8:	4911      	ldr	r1, [pc, #68]	@ (8013e00 <PCD_EP_ISR_Handler+0x34c>)
 8013dba:	400a      	ands	r2, r1
 8013dbc:	801a      	strh	r2, [r3, #0]
 8013dbe:	183b      	adds	r3, r7, r0
 8013dc0:	183a      	adds	r2, r7, r0
 8013dc2:	8812      	ldrh	r2, [r2, #0]
 8013dc4:	2180      	movs	r1, #128	@ 0x80
 8013dc6:	0149      	lsls	r1, r1, #5
 8013dc8:	404a      	eors	r2, r1
 8013dca:	801a      	strh	r2, [r3, #0]
 8013dcc:	183b      	adds	r3, r7, r0
 8013dce:	183a      	adds	r2, r7, r0
 8013dd0:	8812      	ldrh	r2, [r2, #0]
 8013dd2:	2180      	movs	r1, #128	@ 0x80
 8013dd4:	0189      	lsls	r1, r1, #6
 8013dd6:	404a      	eors	r2, r1
 8013dd8:	801a      	strh	r2, [r3, #0]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	183a      	adds	r2, r7, r0
 8013de0:	8812      	ldrh	r2, [r2, #0]
 8013de2:	4908      	ldr	r1, [pc, #32]	@ (8013e04 <PCD_EP_ISR_Handler+0x350>)
 8013de4:	430a      	orrs	r2, r1
 8013de6:	b292      	uxth	r2, r2
 8013de8:	801a      	strh	r2, [r3, #0]
 8013dea:	e255      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
 8013dec:	ffff8f0f 	.word	0xffff8f0f
 8013df0:	ffff8000 	.word	0xffff8000
 8013df4:	00000402 	.word	0x00000402
 8013df8:	00000406 	.word	0x00000406
 8013dfc:	00000f8f 	.word	0x00000f8f
 8013e00:	ffffbf8f 	.word	0xffffbf8f
 8013e04:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	001a      	movs	r2, r3
 8013e0e:	204d      	movs	r0, #77	@ 0x4d
 8013e10:	183b      	adds	r3, r7, r0
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	18d2      	adds	r2, r2, r3
 8013e18:	214a      	movs	r1, #74	@ 0x4a
 8013e1a:	187b      	adds	r3, r7, r1
 8013e1c:	8812      	ldrh	r2, [r2, #0]
 8013e1e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013e20:	187b      	adds	r3, r7, r1
 8013e22:	2200      	movs	r2, #0
 8013e24:	5e9b      	ldrsh	r3, [r3, r2]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	db00      	blt.n	8013e2c <PCD_EP_ISR_Handler+0x378>
 8013e2a:	e0fa      	b.n	8014022 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	001a      	movs	r2, r3
 8013e32:	183b      	adds	r3, r7, r0
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	18d3      	adds	r3, r2, r3
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	2448      	movs	r4, #72	@ 0x48
 8013e40:	193b      	adds	r3, r7, r4
 8013e42:	49d1      	ldr	r1, [pc, #836]	@ (8014188 <PCD_EP_ISR_Handler+0x6d4>)
 8013e44:	400a      	ands	r2, r1
 8013e46:	801a      	strh	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	001a      	movs	r2, r3
 8013e4e:	183b      	adds	r3, r7, r0
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	18d3      	adds	r3, r2, r3
 8013e56:	193a      	adds	r2, r7, r4
 8013e58:	8812      	ldrh	r2, [r2, #0]
 8013e5a:	2180      	movs	r1, #128	@ 0x80
 8013e5c:	430a      	orrs	r2, r1
 8013e5e:	b292      	uxth	r2, r2
 8013e60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013e62:	183b      	adds	r3, r7, r0
 8013e64:	781a      	ldrb	r2, [r3, #0]
 8013e66:	0013      	movs	r3, r2
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	189b      	adds	r3, r3, r2
 8013e6c:	00db      	lsls	r3, r3, #3
 8013e6e:	3369      	adds	r3, #105	@ 0x69
 8013e70:	33ff      	adds	r3, #255	@ 0xff
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	18d3      	adds	r3, r2, r3
 8013e76:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e7a:	7b1b      	ldrb	r3, [r3, #12]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d125      	bne.n	8013ecc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2250      	movs	r2, #80	@ 0x50
 8013e86:	5a9b      	ldrh	r3, [r3, r2]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	001a      	movs	r2, r3
 8013e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	18d2      	adds	r2, r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	18d3      	adds	r3, r2, r3
 8013e9a:	4abc      	ldr	r2, [pc, #752]	@ (801418c <PCD_EP_ISR_Handler+0x6d8>)
 8013e9c:	4694      	mov	ip, r2
 8013e9e:	4463      	add	r3, ip
 8013ea0:	881a      	ldrh	r2, [r3, #0]
 8013ea2:	2450      	movs	r4, #80	@ 0x50
 8013ea4:	193b      	adds	r3, r7, r4
 8013ea6:	0592      	lsls	r2, r2, #22
 8013ea8:	0d92      	lsrs	r2, r2, #22
 8013eaa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013eac:	193b      	adds	r3, r7, r4
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d100      	bne.n	8013eb6 <PCD_EP_ISR_Handler+0x402>
 8013eb4:	e08d      	b.n	8013fd2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6818      	ldr	r0, [r3, #0]
 8013eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ebc:	6959      	ldr	r1, [r3, #20]
 8013ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ec0:	88da      	ldrh	r2, [r3, #6]
 8013ec2:	193b      	adds	r3, r7, r4
 8013ec4:	881b      	ldrh	r3, [r3, #0]
 8013ec6:	f007 f8d6 	bl	801b076 <USB_ReadPMA>
 8013eca:	e082      	b.n	8013fd2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ece:	78db      	ldrb	r3, [r3, #3]
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d10c      	bne.n	8013eee <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013ed4:	2350      	movs	r3, #80	@ 0x50
 8013ed6:	18fc      	adds	r4, r7, r3
 8013ed8:	234a      	movs	r3, #74	@ 0x4a
 8013eda:	18fb      	adds	r3, r7, r3
 8013edc:	881a      	ldrh	r2, [r3, #0]
 8013ede:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	0018      	movs	r0, r3
 8013ee4:	f000 f9ec 	bl	80142c0 <HAL_PCD_EP_DB_Receive>
 8013ee8:	0003      	movs	r3, r0
 8013eea:	8023      	strh	r3, [r4, #0]
 8013eec:	e071      	b.n	8013fd2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	001a      	movs	r2, r3
 8013ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	18d3      	adds	r3, r2, r3
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	2052      	movs	r0, #82	@ 0x52
 8013f02:	183b      	adds	r3, r7, r0
 8013f04:	49a2      	ldr	r1, [pc, #648]	@ (8014190 <PCD_EP_ISR_Handler+0x6dc>)
 8013f06:	400a      	ands	r2, r1
 8013f08:	801a      	strh	r2, [r3, #0]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	001a      	movs	r2, r3
 8013f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	009b      	lsls	r3, r3, #2
 8013f16:	18d3      	adds	r3, r2, r3
 8013f18:	183a      	adds	r2, r7, r0
 8013f1a:	8812      	ldrh	r2, [r2, #0]
 8013f1c:	499d      	ldr	r1, [pc, #628]	@ (8014194 <PCD_EP_ISR_Handler+0x6e0>)
 8013f1e:	430a      	orrs	r2, r1
 8013f20:	b292      	uxth	r2, r2
 8013f22:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	001a      	movs	r2, r3
 8013f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	009b      	lsls	r3, r3, #2
 8013f30:	18d3      	adds	r3, r2, r3
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	001a      	movs	r2, r3
 8013f38:	2380      	movs	r3, #128	@ 0x80
 8013f3a:	01db      	lsls	r3, r3, #7
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	d024      	beq.n	8013f8a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2250      	movs	r2, #80	@ 0x50
 8013f46:	5a9b      	ldrh	r3, [r3, r2]
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	001a      	movs	r2, r3
 8013f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	00db      	lsls	r3, r3, #3
 8013f52:	18d2      	adds	r2, r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	18d3      	adds	r3, r2, r3
 8013f5a:	4a8f      	ldr	r2, [pc, #572]	@ (8014198 <PCD_EP_ISR_Handler+0x6e4>)
 8013f5c:	4694      	mov	ip, r2
 8013f5e:	4463      	add	r3, ip
 8013f60:	881a      	ldrh	r2, [r3, #0]
 8013f62:	2450      	movs	r4, #80	@ 0x50
 8013f64:	193b      	adds	r3, r7, r4
 8013f66:	0592      	lsls	r2, r2, #22
 8013f68:	0d92      	lsrs	r2, r2, #22
 8013f6a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013f6c:	193b      	adds	r3, r7, r4
 8013f6e:	881b      	ldrh	r3, [r3, #0]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d02e      	beq.n	8013fd2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6818      	ldr	r0, [r3, #0]
 8013f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f7a:	6959      	ldr	r1, [r3, #20]
 8013f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f7e:	891a      	ldrh	r2, [r3, #8]
 8013f80:	193b      	adds	r3, r7, r4
 8013f82:	881b      	ldrh	r3, [r3, #0]
 8013f84:	f007 f877 	bl	801b076 <USB_ReadPMA>
 8013f88:	e023      	b.n	8013fd2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2250      	movs	r2, #80	@ 0x50
 8013f90:	5a9b      	ldrh	r3, [r3, r2]
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	001a      	movs	r2, r3
 8013f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	18d2      	adds	r2, r2, r3
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	18d3      	adds	r3, r2, r3
 8013fa4:	4a79      	ldr	r2, [pc, #484]	@ (801418c <PCD_EP_ISR_Handler+0x6d8>)
 8013fa6:	4694      	mov	ip, r2
 8013fa8:	4463      	add	r3, ip
 8013faa:	881a      	ldrh	r2, [r3, #0]
 8013fac:	2450      	movs	r4, #80	@ 0x50
 8013fae:	193b      	adds	r3, r7, r4
 8013fb0:	0592      	lsls	r2, r2, #22
 8013fb2:	0d92      	lsrs	r2, r2, #22
 8013fb4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013fb6:	193b      	adds	r3, r7, r4
 8013fb8:	881b      	ldrh	r3, [r3, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d009      	beq.n	8013fd2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6818      	ldr	r0, [r3, #0]
 8013fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc4:	6959      	ldr	r1, [r3, #20]
 8013fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc8:	895a      	ldrh	r2, [r3, #10]
 8013fca:	193b      	adds	r3, r7, r4
 8013fcc:	881b      	ldrh	r3, [r3, #0]
 8013fce:	f007 f852 	bl	801b076 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fd4:	69da      	ldr	r2, [r3, #28]
 8013fd6:	2150      	movs	r1, #80	@ 0x50
 8013fd8:	187b      	adds	r3, r7, r1
 8013fda:	881b      	ldrh	r3, [r3, #0]
 8013fdc:	18d2      	adds	r2, r2, r3
 8013fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe4:	695a      	ldr	r2, [r3, #20]
 8013fe6:	187b      	adds	r3, r7, r1
 8013fe8:	881b      	ldrh	r3, [r3, #0]
 8013fea:	18d2      	adds	r2, r2, r3
 8013fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ff2:	699b      	ldr	r3, [r3, #24]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d005      	beq.n	8014004 <PCD_EP_ISR_Handler+0x550>
 8013ff8:	187b      	adds	r3, r7, r1
 8013ffa:	881a      	ldrh	r2, [r3, #0]
 8013ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ffe:	691b      	ldr	r3, [r3, #16]
 8014000:	429a      	cmp	r2, r3
 8014002:	d207      	bcs.n	8014014 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014006:	781a      	ldrb	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	0011      	movs	r1, r2
 801400c:	0018      	movs	r0, r3
 801400e:	f009 f84c 	bl	801d0aa <HAL_PCD_DataOutStageCallback>
 8014012:	e006      	b.n	8014022 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801401a:	0011      	movs	r1, r2
 801401c:	0018      	movs	r0, r3
 801401e:	f005 fd6f 	bl	8019b00 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014022:	244a      	movs	r4, #74	@ 0x4a
 8014024:	193b      	adds	r3, r7, r4
 8014026:	881b      	ldrh	r3, [r3, #0]
 8014028:	2280      	movs	r2, #128	@ 0x80
 801402a:	4013      	ands	r3, r2
 801402c:	d100      	bne.n	8014030 <PCD_EP_ISR_Handler+0x57c>
 801402e:	e133      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8014030:	204d      	movs	r0, #77	@ 0x4d
 8014032:	183b      	adds	r3, r7, r0
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	1c5a      	adds	r2, r3, #1
 8014038:	0013      	movs	r3, r2
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	189b      	adds	r3, r3, r2
 801403e:	00db      	lsls	r3, r3, #3
 8014040:	687a      	ldr	r2, [r7, #4]
 8014042:	18d3      	adds	r3, r2, r3
 8014044:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	001a      	movs	r2, r3
 801404c:	183b      	adds	r3, r7, r0
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	009b      	lsls	r3, r3, #2
 8014052:	18d3      	adds	r3, r2, r3
 8014054:	881b      	ldrh	r3, [r3, #0]
 8014056:	b29a      	uxth	r2, r3
 8014058:	2542      	movs	r5, #66	@ 0x42
 801405a:	197b      	adds	r3, r7, r5
 801405c:	494f      	ldr	r1, [pc, #316]	@ (801419c <PCD_EP_ISR_Handler+0x6e8>)
 801405e:	400a      	ands	r2, r1
 8014060:	801a      	strh	r2, [r3, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	001a      	movs	r2, r3
 8014068:	183b      	adds	r3, r7, r0
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	18d3      	adds	r3, r2, r3
 8014070:	197a      	adds	r2, r7, r5
 8014072:	8812      	ldrh	r2, [r2, #0]
 8014074:	494a      	ldr	r1, [pc, #296]	@ (80141a0 <PCD_EP_ISR_Handler+0x6ec>)
 8014076:	430a      	orrs	r2, r1
 8014078:	b292      	uxth	r2, r2
 801407a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801407e:	78db      	ldrb	r3, [r3, #3]
 8014080:	2b01      	cmp	r3, #1
 8014082:	d000      	beq.n	8014086 <PCD_EP_ISR_Handler+0x5d2>
 8014084:	e0af      	b.n	80141e6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014088:	2200      	movs	r2, #0
 801408a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801408c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801408e:	7b1b      	ldrb	r3, [r3, #12]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d100      	bne.n	8014096 <PCD_EP_ISR_Handler+0x5e2>
 8014094:	e09f      	b.n	80141d6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014096:	193b      	adds	r3, r7, r4
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	2240      	movs	r2, #64	@ 0x40
 801409c:	4013      	ands	r3, r2
 801409e:	d046      	beq.n	801412e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80140a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140a2:	785b      	ldrb	r3, [r3, #1]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d125      	bne.n	80140f4 <PCD_EP_ISR_Handler+0x640>
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	2250      	movs	r2, #80	@ 0x50
 80140b4:	5a9b      	ldrh	r3, [r3, r2]
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	001a      	movs	r2, r3
 80140ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140bc:	189b      	adds	r3, r3, r2
 80140be:	627b      	str	r3, [r7, #36]	@ 0x24
 80140c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	00da      	lsls	r2, r3, #3
 80140c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c8:	18d3      	adds	r3, r2, r3
 80140ca:	4a33      	ldr	r2, [pc, #204]	@ (8014198 <PCD_EP_ISR_Handler+0x6e4>)
 80140cc:	4694      	mov	ip, r2
 80140ce:	4463      	add	r3, ip
 80140d0:	623b      	str	r3, [r7, #32]
 80140d2:	6a3b      	ldr	r3, [r7, #32]
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	059b      	lsls	r3, r3, #22
 80140da:	0d9b      	lsrs	r3, r3, #22
 80140dc:	b29a      	uxth	r2, r3
 80140de:	6a3b      	ldr	r3, [r7, #32]
 80140e0:	801a      	strh	r2, [r3, #0]
 80140e2:	6a3b      	ldr	r3, [r7, #32]
 80140e4:	881b      	ldrh	r3, [r3, #0]
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	4a2d      	ldr	r2, [pc, #180]	@ (80141a0 <PCD_EP_ISR_Handler+0x6ec>)
 80140ea:	4313      	orrs	r3, r2
 80140ec:	b29a      	uxth	r2, r3
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	801a      	strh	r2, [r3, #0]
 80140f2:	e070      	b.n	80141d6 <PCD_EP_ISR_Handler+0x722>
 80140f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140f6:	785b      	ldrb	r3, [r3, #1]
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d16c      	bne.n	80141d6 <PCD_EP_ISR_Handler+0x722>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	2250      	movs	r2, #80	@ 0x50
 8014108:	5a9b      	ldrh	r3, [r3, r2]
 801410a:	b29b      	uxth	r3, r3
 801410c:	001a      	movs	r2, r3
 801410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014110:	189b      	adds	r3, r3, r2
 8014112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	00da      	lsls	r2, r3, #3
 801411a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801411c:	18d3      	adds	r3, r2, r3
 801411e:	4a1e      	ldr	r2, [pc, #120]	@ (8014198 <PCD_EP_ISR_Handler+0x6e4>)
 8014120:	4694      	mov	ip, r2
 8014122:	4463      	add	r3, ip
 8014124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014128:	2200      	movs	r2, #0
 801412a:	801a      	strh	r2, [r3, #0]
 801412c:	e053      	b.n	80141d6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014136:	785b      	ldrb	r3, [r3, #1]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d133      	bne.n	80141a4 <PCD_EP_ISR_Handler+0x6f0>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	637b      	str	r3, [r7, #52]	@ 0x34
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2250      	movs	r2, #80	@ 0x50
 8014148:	5a9b      	ldrh	r3, [r3, r2]
 801414a:	b29b      	uxth	r3, r3
 801414c:	001a      	movs	r2, r3
 801414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014150:	189b      	adds	r3, r3, r2
 8014152:	637b      	str	r3, [r7, #52]	@ 0x34
 8014154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	00da      	lsls	r2, r3, #3
 801415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801415c:	18d3      	adds	r3, r2, r3
 801415e:	4a0b      	ldr	r2, [pc, #44]	@ (801418c <PCD_EP_ISR_Handler+0x6d8>)
 8014160:	4694      	mov	ip, r2
 8014162:	4463      	add	r3, ip
 8014164:	633b      	str	r3, [r7, #48]	@ 0x30
 8014166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	b29b      	uxth	r3, r3
 801416c:	059b      	lsls	r3, r3, #22
 801416e:	0d9b      	lsrs	r3, r3, #22
 8014170:	b29a      	uxth	r2, r3
 8014172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014174:	801a      	strh	r2, [r3, #0]
 8014176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014178:	881b      	ldrh	r3, [r3, #0]
 801417a:	b29b      	uxth	r3, r3
 801417c:	4a08      	ldr	r2, [pc, #32]	@ (80141a0 <PCD_EP_ISR_Handler+0x6ec>)
 801417e:	4313      	orrs	r3, r2
 8014180:	b29a      	uxth	r2, r3
 8014182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014184:	801a      	strh	r2, [r3, #0]
 8014186:	e026      	b.n	80141d6 <PCD_EP_ISR_Handler+0x722>
 8014188:	00000f8f 	.word	0x00000f8f
 801418c:	00000406 	.word	0x00000406
 8014190:	ffff8f8f 	.word	0xffff8f8f
 8014194:	ffff80c0 	.word	0xffff80c0
 8014198:	00000402 	.word	0x00000402
 801419c:	ffff8f0f 	.word	0xffff8f0f
 80141a0:	ffff8000 	.word	0xffff8000
 80141a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141a6:	785b      	ldrb	r3, [r3, #1]
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d114      	bne.n	80141d6 <PCD_EP_ISR_Handler+0x722>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2250      	movs	r2, #80	@ 0x50
 80141b2:	5a9b      	ldrh	r3, [r3, r2]
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	001a      	movs	r2, r3
 80141b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141ba:	189b      	adds	r3, r3, r2
 80141bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80141be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	00da      	lsls	r2, r3, #3
 80141c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141c6:	18d3      	adds	r3, r2, r3
 80141c8:	4a3b      	ldr	r2, [pc, #236]	@ (80142b8 <PCD_EP_ISR_Handler+0x804>)
 80141ca:	4694      	mov	ip, r2
 80141cc:	4463      	add	r3, ip
 80141ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80141d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141d2:	2200      	movs	r2, #0
 80141d4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80141d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141d8:	781a      	ldrb	r2, [r3, #0]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	0011      	movs	r1, r2
 80141de:	0018      	movs	r0, r3
 80141e0:	f008 ff84 	bl	801d0ec <HAL_PCD_DataInStageCallback>
 80141e4:	e058      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80141e6:	234a      	movs	r3, #74	@ 0x4a
 80141e8:	18fb      	adds	r3, r7, r3
 80141ea:	881a      	ldrh	r2, [r3, #0]
 80141ec:	2380      	movs	r3, #128	@ 0x80
 80141ee:	005b      	lsls	r3, r3, #1
 80141f0:	4013      	ands	r3, r2
 80141f2:	d149      	bne.n	8014288 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	2250      	movs	r2, #80	@ 0x50
 80141fa:	5a9b      	ldrh	r3, [r3, r2]
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	001a      	movs	r2, r3
 8014200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	00db      	lsls	r3, r3, #3
 8014206:	18d2      	adds	r2, r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	18d3      	adds	r3, r2, r3
 801420e:	4a2b      	ldr	r2, [pc, #172]	@ (80142bc <PCD_EP_ISR_Handler+0x808>)
 8014210:	4694      	mov	ip, r2
 8014212:	4463      	add	r3, ip
 8014214:	881a      	ldrh	r2, [r3, #0]
 8014216:	2140      	movs	r1, #64	@ 0x40
 8014218:	187b      	adds	r3, r7, r1
 801421a:	0592      	lsls	r2, r2, #22
 801421c:	0d92      	lsrs	r2, r2, #22
 801421e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014222:	699a      	ldr	r2, [r3, #24]
 8014224:	187b      	adds	r3, r7, r1
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	429a      	cmp	r2, r3
 801422a:	d907      	bls.n	801423c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801422c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801422e:	699a      	ldr	r2, [r3, #24]
 8014230:	187b      	adds	r3, r7, r1
 8014232:	881b      	ldrh	r3, [r3, #0]
 8014234:	1ad2      	subs	r2, r2, r3
 8014236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014238:	619a      	str	r2, [r3, #24]
 801423a:	e002      	b.n	8014242 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801423c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801423e:	2200      	movs	r2, #0
 8014240:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014244:	699b      	ldr	r3, [r3, #24]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d107      	bne.n	801425a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801424c:	781a      	ldrb	r2, [r3, #0]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	0011      	movs	r1, r2
 8014252:	0018      	movs	r0, r3
 8014254:	f008 ff4a 	bl	801d0ec <HAL_PCD_DataInStageCallback>
 8014258:	e01e      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801425c:	695a      	ldr	r2, [r3, #20]
 801425e:	2140      	movs	r1, #64	@ 0x40
 8014260:	187b      	adds	r3, r7, r1
 8014262:	881b      	ldrh	r3, [r3, #0]
 8014264:	18d2      	adds	r2, r2, r3
 8014266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014268:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801426c:	69da      	ldr	r2, [r3, #28]
 801426e:	187b      	adds	r3, r7, r1
 8014270:	881b      	ldrh	r3, [r3, #0]
 8014272:	18d2      	adds	r2, r2, r3
 8014274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014276:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801427e:	0011      	movs	r1, r2
 8014280:	0018      	movs	r0, r3
 8014282:	f005 fc3d 	bl	8019b00 <USB_EPStartXfer>
 8014286:	e007      	b.n	8014298 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014288:	234a      	movs	r3, #74	@ 0x4a
 801428a:	18fb      	adds	r3, r7, r3
 801428c:	881a      	ldrh	r2, [r3, #0]
 801428e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	0018      	movs	r0, r3
 8014294:	f000 f930 	bl	80144f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2244      	movs	r2, #68	@ 0x44
 801429e:	5a9b      	ldrh	r3, [r3, r2]
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	b21b      	sxth	r3, r3
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	da01      	bge.n	80142ac <PCD_EP_ISR_Handler+0x7f8>
 80142a8:	f7ff fc0a 	bl	8013ac0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	0018      	movs	r0, r3
 80142b0:	46bd      	mov	sp, r7
 80142b2:	b016      	add	sp, #88	@ 0x58
 80142b4:	bdb0      	pop	{r4, r5, r7, pc}
 80142b6:	46c0      	nop			@ (mov r8, r8)
 80142b8:	00000406 	.word	0x00000406
 80142bc:	00000402 	.word	0x00000402

080142c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80142c0:	b590      	push	{r4, r7, lr}
 80142c2:	b089      	sub	sp, #36	@ 0x24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	1dbb      	adds	r3, r7, #6
 80142cc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80142ce:	1dbb      	adds	r3, r7, #6
 80142d0:	881a      	ldrh	r2, [r3, #0]
 80142d2:	2380      	movs	r3, #128	@ 0x80
 80142d4:	01db      	lsls	r3, r3, #7
 80142d6:	4013      	ands	r3, r2
 80142d8:	d100      	bne.n	80142dc <HAL_PCD_EP_DB_Receive+0x1c>
 80142da:	e07d      	b.n	80143d8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2250      	movs	r2, #80	@ 0x50
 80142e2:	5a9b      	ldrh	r3, [r3, r2]
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	001a      	movs	r2, r3
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	18d2      	adds	r2, r2, r3
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	18d3      	adds	r3, r2, r3
 80142f6:	4a7a      	ldr	r2, [pc, #488]	@ (80144e0 <HAL_PCD_EP_DB_Receive+0x220>)
 80142f8:	4694      	mov	ip, r2
 80142fa:	4463      	add	r3, ip
 80142fc:	881a      	ldrh	r2, [r3, #0]
 80142fe:	211a      	movs	r1, #26
 8014300:	187b      	adds	r3, r7, r1
 8014302:	0592      	lsls	r2, r2, #22
 8014304:	0d92      	lsrs	r2, r2, #22
 8014306:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	699a      	ldr	r2, [r3, #24]
 801430c:	187b      	adds	r3, r7, r1
 801430e:	881b      	ldrh	r3, [r3, #0]
 8014310:	429a      	cmp	r2, r3
 8014312:	d307      	bcc.n	8014324 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	699a      	ldr	r2, [r3, #24]
 8014318:	187b      	adds	r3, r7, r1
 801431a:	881b      	ldrh	r3, [r3, #0]
 801431c:	1ad2      	subs	r2, r2, r3
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	619a      	str	r2, [r3, #24]
 8014322:	e002      	b.n	801432a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	2200      	movs	r2, #0
 8014328:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	699b      	ldr	r3, [r3, #24]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d121      	bne.n	8014376 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	001a      	movs	r2, r3
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	18d3      	adds	r3, r2, r3
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	b29a      	uxth	r2, r3
 8014344:	2018      	movs	r0, #24
 8014346:	183b      	adds	r3, r7, r0
 8014348:	4966      	ldr	r1, [pc, #408]	@ (80144e4 <HAL_PCD_EP_DB_Receive+0x224>)
 801434a:	400a      	ands	r2, r1
 801434c:	801a      	strh	r2, [r3, #0]
 801434e:	183b      	adds	r3, r7, r0
 8014350:	183a      	adds	r2, r7, r0
 8014352:	8812      	ldrh	r2, [r2, #0]
 8014354:	2180      	movs	r1, #128	@ 0x80
 8014356:	0189      	lsls	r1, r1, #6
 8014358:	404a      	eors	r2, r1
 801435a:	801a      	strh	r2, [r3, #0]
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	001a      	movs	r2, r3
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	18d3      	adds	r3, r2, r3
 801436a:	183a      	adds	r2, r7, r0
 801436c:	8812      	ldrh	r2, [r2, #0]
 801436e:	495e      	ldr	r1, [pc, #376]	@ (80144e8 <HAL_PCD_EP_DB_Receive+0x228>)
 8014370:	430a      	orrs	r2, r1
 8014372:	b292      	uxth	r2, r2
 8014374:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014376:	1dbb      	adds	r3, r7, #6
 8014378:	881b      	ldrh	r3, [r3, #0]
 801437a:	2240      	movs	r2, #64	@ 0x40
 801437c:	4013      	ands	r3, r2
 801437e:	d01a      	beq.n	80143b6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	001a      	movs	r2, r3
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	18d3      	adds	r3, r2, r3
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	b29a      	uxth	r2, r3
 8014392:	2016      	movs	r0, #22
 8014394:	183b      	adds	r3, r7, r0
 8014396:	4955      	ldr	r1, [pc, #340]	@ (80144ec <HAL_PCD_EP_DB_Receive+0x22c>)
 8014398:	400a      	ands	r2, r1
 801439a:	801a      	strh	r2, [r3, #0]
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	001a      	movs	r2, r3
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	009b      	lsls	r3, r3, #2
 80143a8:	18d3      	adds	r3, r2, r3
 80143aa:	183a      	adds	r2, r7, r0
 80143ac:	8812      	ldrh	r2, [r2, #0]
 80143ae:	4950      	ldr	r1, [pc, #320]	@ (80144f0 <HAL_PCD_EP_DB_Receive+0x230>)
 80143b0:	430a      	orrs	r2, r1
 80143b2:	b292      	uxth	r2, r2
 80143b4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80143b6:	241a      	movs	r4, #26
 80143b8:	193b      	adds	r3, r7, r4
 80143ba:	881b      	ldrh	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d100      	bne.n	80143c2 <HAL_PCD_EP_DB_Receive+0x102>
 80143c0:	e086      	b.n	80144d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	6818      	ldr	r0, [r3, #0]
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	6959      	ldr	r1, [r3, #20]
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	891a      	ldrh	r2, [r3, #8]
 80143ce:	193b      	adds	r3, r7, r4
 80143d0:	881b      	ldrh	r3, [r3, #0]
 80143d2:	f006 fe50 	bl	801b076 <USB_ReadPMA>
 80143d6:	e07b      	b.n	80144d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	2250      	movs	r2, #80	@ 0x50
 80143de:	5a9b      	ldrh	r3, [r3, r2]
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	001a      	movs	r2, r3
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	00db      	lsls	r3, r3, #3
 80143ea:	18d2      	adds	r2, r2, r3
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	18d3      	adds	r3, r2, r3
 80143f2:	4a40      	ldr	r2, [pc, #256]	@ (80144f4 <HAL_PCD_EP_DB_Receive+0x234>)
 80143f4:	4694      	mov	ip, r2
 80143f6:	4463      	add	r3, ip
 80143f8:	881a      	ldrh	r2, [r3, #0]
 80143fa:	211a      	movs	r1, #26
 80143fc:	187b      	adds	r3, r7, r1
 80143fe:	0592      	lsls	r2, r2, #22
 8014400:	0d92      	lsrs	r2, r2, #22
 8014402:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	699a      	ldr	r2, [r3, #24]
 8014408:	187b      	adds	r3, r7, r1
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	429a      	cmp	r2, r3
 801440e:	d307      	bcc.n	8014420 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	699a      	ldr	r2, [r3, #24]
 8014414:	187b      	adds	r3, r7, r1
 8014416:	881b      	ldrh	r3, [r3, #0]
 8014418:	1ad2      	subs	r2, r2, r3
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	619a      	str	r2, [r3, #24]
 801441e:	e002      	b.n	8014426 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	2200      	movs	r2, #0
 8014424:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	699b      	ldr	r3, [r3, #24]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d121      	bne.n	8014472 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	001a      	movs	r2, r3
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	18d3      	adds	r3, r2, r3
 801443c:	881b      	ldrh	r3, [r3, #0]
 801443e:	b29a      	uxth	r2, r3
 8014440:	201e      	movs	r0, #30
 8014442:	183b      	adds	r3, r7, r0
 8014444:	4927      	ldr	r1, [pc, #156]	@ (80144e4 <HAL_PCD_EP_DB_Receive+0x224>)
 8014446:	400a      	ands	r2, r1
 8014448:	801a      	strh	r2, [r3, #0]
 801444a:	183b      	adds	r3, r7, r0
 801444c:	183a      	adds	r2, r7, r0
 801444e:	8812      	ldrh	r2, [r2, #0]
 8014450:	2180      	movs	r1, #128	@ 0x80
 8014452:	0189      	lsls	r1, r1, #6
 8014454:	404a      	eors	r2, r1
 8014456:	801a      	strh	r2, [r3, #0]
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	001a      	movs	r2, r3
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	781b      	ldrb	r3, [r3, #0]
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	18d3      	adds	r3, r2, r3
 8014466:	183a      	adds	r2, r7, r0
 8014468:	8812      	ldrh	r2, [r2, #0]
 801446a:	491f      	ldr	r1, [pc, #124]	@ (80144e8 <HAL_PCD_EP_DB_Receive+0x228>)
 801446c:	430a      	orrs	r2, r1
 801446e:	b292      	uxth	r2, r2
 8014470:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014472:	1dbb      	adds	r3, r7, #6
 8014474:	881b      	ldrh	r3, [r3, #0]
 8014476:	2240      	movs	r2, #64	@ 0x40
 8014478:	4013      	ands	r3, r2
 801447a:	d11a      	bne.n	80144b2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	001a      	movs	r2, r3
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	18d3      	adds	r3, r2, r3
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	b29a      	uxth	r2, r3
 801448e:	201c      	movs	r0, #28
 8014490:	183b      	adds	r3, r7, r0
 8014492:	4916      	ldr	r1, [pc, #88]	@ (80144ec <HAL_PCD_EP_DB_Receive+0x22c>)
 8014494:	400a      	ands	r2, r1
 8014496:	801a      	strh	r2, [r3, #0]
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	001a      	movs	r2, r3
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	18d3      	adds	r3, r2, r3
 80144a6:	183a      	adds	r2, r7, r0
 80144a8:	8812      	ldrh	r2, [r2, #0]
 80144aa:	4911      	ldr	r1, [pc, #68]	@ (80144f0 <HAL_PCD_EP_DB_Receive+0x230>)
 80144ac:	430a      	orrs	r2, r1
 80144ae:	b292      	uxth	r2, r2
 80144b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80144b2:	241a      	movs	r4, #26
 80144b4:	193b      	adds	r3, r7, r4
 80144b6:	881b      	ldrh	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d009      	beq.n	80144d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	6818      	ldr	r0, [r3, #0]
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	6959      	ldr	r1, [r3, #20]
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	895a      	ldrh	r2, [r3, #10]
 80144c8:	193b      	adds	r3, r7, r4
 80144ca:	881b      	ldrh	r3, [r3, #0]
 80144cc:	f006 fdd3 	bl	801b076 <USB_ReadPMA>
    }
  }

  return count;
 80144d0:	231a      	movs	r3, #26
 80144d2:	18fb      	adds	r3, r7, r3
 80144d4:	881b      	ldrh	r3, [r3, #0]
}
 80144d6:	0018      	movs	r0, r3
 80144d8:	46bd      	mov	sp, r7
 80144da:	b009      	add	sp, #36	@ 0x24
 80144dc:	bd90      	pop	{r4, r7, pc}
 80144de:	46c0      	nop			@ (mov r8, r8)
 80144e0:	00000402 	.word	0x00000402
 80144e4:	ffffbf8f 	.word	0xffffbf8f
 80144e8:	ffff8080 	.word	0xffff8080
 80144ec:	ffff8f8f 	.word	0xffff8f8f
 80144f0:	ffff80c0 	.word	0xffff80c0
 80144f4:	00000406 	.word	0x00000406

080144f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b0a4      	sub	sp, #144	@ 0x90
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	1dbb      	adds	r3, r7, #6
 8014504:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014506:	1dbb      	adds	r3, r7, #6
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	2240      	movs	r2, #64	@ 0x40
 801450c:	4013      	ands	r3, r2
 801450e:	d100      	bne.n	8014512 <HAL_PCD_EP_DB_Transmit+0x1a>
 8014510:	e1e4      	b.n	80148dc <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2250      	movs	r2, #80	@ 0x50
 8014518:	5a9b      	ldrh	r3, [r3, r2]
 801451a:	b29b      	uxth	r3, r3
 801451c:	001a      	movs	r2, r3
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	00db      	lsls	r3, r3, #3
 8014524:	18d2      	adds	r2, r2, r3
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	18d3      	adds	r3, r2, r3
 801452c:	4ad0      	ldr	r2, [pc, #832]	@ (8014870 <HAL_PCD_EP_DB_Transmit+0x378>)
 801452e:	4694      	mov	ip, r2
 8014530:	4463      	add	r3, ip
 8014532:	881a      	ldrh	r2, [r3, #0]
 8014534:	2186      	movs	r1, #134	@ 0x86
 8014536:	187b      	adds	r3, r7, r1
 8014538:	0592      	lsls	r2, r2, #22
 801453a:	0d92      	lsrs	r2, r2, #22
 801453c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	699a      	ldr	r2, [r3, #24]
 8014542:	187b      	adds	r3, r7, r1
 8014544:	881b      	ldrh	r3, [r3, #0]
 8014546:	429a      	cmp	r2, r3
 8014548:	d907      	bls.n	801455a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	699a      	ldr	r2, [r3, #24]
 801454e:	187b      	adds	r3, r7, r1
 8014550:	881b      	ldrh	r3, [r3, #0]
 8014552:	1ad2      	subs	r2, r2, r3
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	619a      	str	r2, [r3, #24]
 8014558:	e002      	b.n	8014560 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	2200      	movs	r2, #0
 801455e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	699b      	ldr	r3, [r3, #24]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d000      	beq.n	801456a <HAL_PCD_EP_DB_Transmit+0x72>
 8014568:	e0b5      	b.n	80146d6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	785b      	ldrb	r3, [r3, #1]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d125      	bne.n	80145be <HAL_PCD_EP_DB_Transmit+0xc6>
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	2250      	movs	r2, #80	@ 0x50
 801457e:	5a9b      	ldrh	r3, [r3, r2]
 8014580:	b29b      	uxth	r3, r3
 8014582:	001a      	movs	r2, r3
 8014584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014586:	189b      	adds	r3, r3, r2
 8014588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	00da      	lsls	r2, r3, #3
 8014590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014592:	18d3      	adds	r3, r2, r3
 8014594:	4ab6      	ldr	r2, [pc, #728]	@ (8014870 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014596:	4694      	mov	ip, r2
 8014598:	4463      	add	r3, ip
 801459a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801459e:	881b      	ldrh	r3, [r3, #0]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	059b      	lsls	r3, r3, #22
 80145a4:	0d9b      	lsrs	r3, r3, #22
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145aa:	801a      	strh	r2, [r3, #0]
 80145ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ae:	881b      	ldrh	r3, [r3, #0]
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	4ab0      	ldr	r2, [pc, #704]	@ (8014874 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80145b4:	4313      	orrs	r3, r2
 80145b6:	b29a      	uxth	r2, r3
 80145b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ba:	801a      	strh	r2, [r3, #0]
 80145bc:	e01b      	b.n	80145f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	785b      	ldrb	r3, [r3, #1]
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d117      	bne.n	80145f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	2250      	movs	r2, #80	@ 0x50
 80145d2:	5a9b      	ldrh	r3, [r3, r2]
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	001a      	movs	r2, r3
 80145d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145da:	189b      	adds	r3, r3, r2
 80145dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	00da      	lsls	r2, r3, #3
 80145e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145e6:	18d3      	adds	r3, r2, r3
 80145e8:	4aa1      	ldr	r2, [pc, #644]	@ (8014870 <HAL_PCD_EP_DB_Transmit+0x378>)
 80145ea:	4694      	mov	ip, r2
 80145ec:	4463      	add	r3, ip
 80145ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80145f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145f2:	2200      	movs	r2, #0
 80145f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	785b      	ldrb	r3, [r3, #1]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d125      	bne.n	8014650 <HAL_PCD_EP_DB_Transmit+0x158>
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	61fb      	str	r3, [r7, #28]
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2250      	movs	r2, #80	@ 0x50
 8014610:	5a9b      	ldrh	r3, [r3, r2]
 8014612:	b29b      	uxth	r3, r3
 8014614:	001a      	movs	r2, r3
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	189b      	adds	r3, r3, r2
 801461a:	61fb      	str	r3, [r7, #28]
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	00da      	lsls	r2, r3, #3
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	18d3      	adds	r3, r2, r3
 8014626:	4a94      	ldr	r2, [pc, #592]	@ (8014878 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014628:	4694      	mov	ip, r2
 801462a:	4463      	add	r3, ip
 801462c:	61bb      	str	r3, [r7, #24]
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	881b      	ldrh	r3, [r3, #0]
 8014632:	b29b      	uxth	r3, r3
 8014634:	059b      	lsls	r3, r3, #22
 8014636:	0d9b      	lsrs	r3, r3, #22
 8014638:	b29a      	uxth	r2, r3
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	801a      	strh	r2, [r3, #0]
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	881b      	ldrh	r3, [r3, #0]
 8014642:	b29b      	uxth	r3, r3
 8014644:	4a8b      	ldr	r2, [pc, #556]	@ (8014874 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014646:	4313      	orrs	r3, r2
 8014648:	b29a      	uxth	r2, r3
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	801a      	strh	r2, [r3, #0]
 801464e:	e018      	b.n	8014682 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	785b      	ldrb	r3, [r3, #1]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d114      	bne.n	8014682 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	2250      	movs	r2, #80	@ 0x50
 801465e:	5a9b      	ldrh	r3, [r3, r2]
 8014660:	b29b      	uxth	r3, r3
 8014662:	001a      	movs	r2, r3
 8014664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014666:	189b      	adds	r3, r3, r2
 8014668:	627b      	str	r3, [r7, #36]	@ 0x24
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	00da      	lsls	r2, r3, #3
 8014670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014672:	18d3      	adds	r3, r2, r3
 8014674:	4a80      	ldr	r2, [pc, #512]	@ (8014878 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014676:	4694      	mov	ip, r2
 8014678:	4463      	add	r3, ip
 801467a:	623b      	str	r3, [r7, #32]
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	2200      	movs	r2, #0
 8014680:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	781a      	ldrb	r2, [r3, #0]
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	0011      	movs	r1, r2
 801468a:	0018      	movs	r0, r3
 801468c:	f008 fd2e 	bl	801d0ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014690:	1dbb      	adds	r3, r7, #6
 8014692:	881a      	ldrh	r2, [r3, #0]
 8014694:	2380      	movs	r3, #128	@ 0x80
 8014696:	01db      	lsls	r3, r3, #7
 8014698:	4013      	ands	r3, r2
 801469a:	d100      	bne.n	801469e <HAL_PCD_EP_DB_Transmit+0x1a6>
 801469c:	e309      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	001a      	movs	r2, r3
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	18d3      	adds	r3, r2, r3
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	2016      	movs	r0, #22
 80146b2:	183b      	adds	r3, r7, r0
 80146b4:	4971      	ldr	r1, [pc, #452]	@ (801487c <HAL_PCD_EP_DB_Transmit+0x384>)
 80146b6:	400a      	ands	r2, r1
 80146b8:	801a      	strh	r2, [r3, #0]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	001a      	movs	r2, r3
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	18d3      	adds	r3, r2, r3
 80146c8:	183a      	adds	r2, r7, r0
 80146ca:	8812      	ldrh	r2, [r2, #0]
 80146cc:	496c      	ldr	r1, [pc, #432]	@ (8014880 <HAL_PCD_EP_DB_Transmit+0x388>)
 80146ce:	430a      	orrs	r2, r1
 80146d0:	b292      	uxth	r2, r2
 80146d2:	801a      	strh	r2, [r3, #0]
 80146d4:	e2ed      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80146d6:	1dbb      	adds	r3, r7, #6
 80146d8:	881a      	ldrh	r2, [r3, #0]
 80146da:	2380      	movs	r3, #128	@ 0x80
 80146dc:	01db      	lsls	r3, r3, #7
 80146de:	4013      	ands	r3, r2
 80146e0:	d01a      	beq.n	8014718 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	001a      	movs	r2, r3
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	009b      	lsls	r3, r3, #2
 80146ee:	18d3      	adds	r3, r2, r3
 80146f0:	881b      	ldrh	r3, [r3, #0]
 80146f2:	b29a      	uxth	r2, r3
 80146f4:	208a      	movs	r0, #138	@ 0x8a
 80146f6:	183b      	adds	r3, r7, r0
 80146f8:	4960      	ldr	r1, [pc, #384]	@ (801487c <HAL_PCD_EP_DB_Transmit+0x384>)
 80146fa:	400a      	ands	r2, r1
 80146fc:	801a      	strh	r2, [r3, #0]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	001a      	movs	r2, r3
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	18d3      	adds	r3, r2, r3
 801470c:	183a      	adds	r2, r7, r0
 801470e:	8812      	ldrh	r2, [r2, #0]
 8014710:	495b      	ldr	r1, [pc, #364]	@ (8014880 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014712:	430a      	orrs	r2, r1
 8014714:	b292      	uxth	r2, r2
 8014716:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	2224      	movs	r2, #36	@ 0x24
 801471c:	5c9b      	ldrb	r3, [r3, r2]
 801471e:	2b01      	cmp	r3, #1
 8014720:	d000      	beq.n	8014724 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014722:	e2c6      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	695a      	ldr	r2, [r3, #20]
 8014728:	2186      	movs	r1, #134	@ 0x86
 801472a:	187b      	adds	r3, r7, r1
 801472c:	881b      	ldrh	r3, [r3, #0]
 801472e:	18d2      	adds	r2, r2, r3
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	69da      	ldr	r2, [r3, #28]
 8014738:	187b      	adds	r3, r7, r1
 801473a:	881b      	ldrh	r3, [r3, #0]
 801473c:	18d2      	adds	r2, r2, r3
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	6a1a      	ldr	r2, [r3, #32]
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	429a      	cmp	r2, r3
 801474c:	d30c      	bcc.n	8014768 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	691b      	ldr	r3, [r3, #16]
 8014752:	218c      	movs	r1, #140	@ 0x8c
 8014754:	187a      	adds	r2, r7, r1
 8014756:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	6a1a      	ldr	r2, [r3, #32]
 801475c:	187b      	adds	r3, r7, r1
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	1ad2      	subs	r2, r2, r3
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	621a      	str	r2, [r3, #32]
 8014766:	e01a      	b.n	801479e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	6a1b      	ldr	r3, [r3, #32]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d10a      	bne.n	8014786 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014770:	2386      	movs	r3, #134	@ 0x86
 8014772:	18fb      	adds	r3, r7, r3
 8014774:	881b      	ldrh	r3, [r3, #0]
 8014776:	228c      	movs	r2, #140	@ 0x8c
 8014778:	18ba      	adds	r2, r7, r2
 801477a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	2224      	movs	r2, #36	@ 0x24
 8014780:	2100      	movs	r1, #0
 8014782:	5499      	strb	r1, [r3, r2]
 8014784:	e00b      	b.n	801479e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	2224      	movs	r2, #36	@ 0x24
 801478a:	2100      	movs	r1, #0
 801478c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	6a1b      	ldr	r3, [r3, #32]
 8014792:	228c      	movs	r2, #140	@ 0x8c
 8014794:	18ba      	adds	r2, r7, r2
 8014796:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	2200      	movs	r2, #0
 801479c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	785b      	ldrb	r3, [r3, #1]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d000      	beq.n	80147a8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80147a6:	e06d      	b.n	8014884 <HAL_PCD_EP_DB_Transmit+0x38c>
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	2250      	movs	r2, #80	@ 0x50
 80147b4:	5a9b      	ldrh	r3, [r3, r2]
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	001a      	movs	r2, r3
 80147ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147bc:	189b      	adds	r3, r3, r2
 80147be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	00da      	lsls	r2, r3, #3
 80147c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147c8:	18d3      	adds	r3, r2, r3
 80147ca:	4a29      	ldr	r2, [pc, #164]	@ (8014870 <HAL_PCD_EP_DB_Transmit+0x378>)
 80147cc:	4694      	mov	ip, r2
 80147ce:	4463      	add	r3, ip
 80147d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80147d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147d4:	881b      	ldrh	r3, [r3, #0]
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	059b      	lsls	r3, r3, #22
 80147da:	0d9b      	lsrs	r3, r3, #22
 80147dc:	b29a      	uxth	r2, r3
 80147de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e0:	801a      	strh	r2, [r3, #0]
 80147e2:	228c      	movs	r2, #140	@ 0x8c
 80147e4:	18bb      	adds	r3, r7, r2
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80147ea:	d91a      	bls.n	8014822 <HAL_PCD_EP_DB_Transmit+0x32a>
 80147ec:	18bb      	adds	r3, r7, r2
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	095b      	lsrs	r3, r3, #5
 80147f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147f4:	18bb      	adds	r3, r7, r2
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	221f      	movs	r2, #31
 80147fa:	4013      	ands	r3, r2
 80147fc:	d102      	bne.n	8014804 <HAL_PCD_EP_DB_Transmit+0x30c>
 80147fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014800:	3b01      	subs	r3, #1
 8014802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014806:	881b      	ldrh	r3, [r3, #0]
 8014808:	b29a      	uxth	r2, r3
 801480a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801480c:	b29b      	uxth	r3, r3
 801480e:	029b      	lsls	r3, r3, #10
 8014810:	b29b      	uxth	r3, r3
 8014812:	4313      	orrs	r3, r2
 8014814:	b29b      	uxth	r3, r3
 8014816:	4a17      	ldr	r2, [pc, #92]	@ (8014874 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014818:	4313      	orrs	r3, r2
 801481a:	b29a      	uxth	r2, r3
 801481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801481e:	801a      	strh	r2, [r3, #0]
 8014820:	e04f      	b.n	80148c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014822:	238c      	movs	r3, #140	@ 0x8c
 8014824:	18fb      	adds	r3, r7, r3
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d108      	bne.n	801483e <HAL_PCD_EP_DB_Transmit+0x346>
 801482c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	b29b      	uxth	r3, r3
 8014832:	4a10      	ldr	r2, [pc, #64]	@ (8014874 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014834:	4313      	orrs	r3, r2
 8014836:	b29a      	uxth	r2, r3
 8014838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801483a:	801a      	strh	r2, [r3, #0]
 801483c:	e041      	b.n	80148c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801483e:	228c      	movs	r2, #140	@ 0x8c
 8014840:	18bb      	adds	r3, r7, r2
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	085b      	lsrs	r3, r3, #1
 8014846:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014848:	18bb      	adds	r3, r7, r2
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2201      	movs	r2, #1
 801484e:	4013      	ands	r3, r2
 8014850:	d002      	beq.n	8014858 <HAL_PCD_EP_DB_Transmit+0x360>
 8014852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014854:	3301      	adds	r3, #1
 8014856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801485a:	881b      	ldrh	r3, [r3, #0]
 801485c:	b29a      	uxth	r2, r3
 801485e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014860:	b29b      	uxth	r3, r3
 8014862:	029b      	lsls	r3, r3, #10
 8014864:	b29b      	uxth	r3, r3
 8014866:	4313      	orrs	r3, r2
 8014868:	b29a      	uxth	r2, r3
 801486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801486c:	801a      	strh	r2, [r3, #0]
 801486e:	e028      	b.n	80148c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014870:	00000402 	.word	0x00000402
 8014874:	ffff8000 	.word	0xffff8000
 8014878:	00000406 	.word	0x00000406
 801487c:	ffff8f8f 	.word	0xffff8f8f
 8014880:	ffffc080 	.word	0xffffc080
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	785b      	ldrb	r3, [r3, #1]
 8014888:	2b01      	cmp	r3, #1
 801488a:	d11a      	bne.n	80148c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	647b      	str	r3, [r7, #68]	@ 0x44
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2250      	movs	r2, #80	@ 0x50
 8014898:	5a9b      	ldrh	r3, [r3, r2]
 801489a:	b29b      	uxth	r3, r3
 801489c:	001a      	movs	r2, r3
 801489e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148a0:	189b      	adds	r3, r3, r2
 80148a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	00da      	lsls	r2, r3, #3
 80148aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148ac:	18d3      	adds	r3, r2, r3
 80148ae:	4adb      	ldr	r2, [pc, #876]	@ (8014c1c <HAL_PCD_EP_DB_Transmit+0x724>)
 80148b0:	4694      	mov	ip, r2
 80148b2:	4463      	add	r3, ip
 80148b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80148b6:	238c      	movs	r3, #140	@ 0x8c
 80148b8:	18fb      	adds	r3, r7, r3
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	b29a      	uxth	r2, r3
 80148be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80148c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	6818      	ldr	r0, [r3, #0]
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	6959      	ldr	r1, [r3, #20]
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	891a      	ldrh	r2, [r3, #8]
 80148ce:	238c      	movs	r3, #140	@ 0x8c
 80148d0:	18fb      	adds	r3, r7, r3
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	f006 fb85 	bl	801afe4 <USB_WritePMA>
 80148da:	e1ea      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2250      	movs	r2, #80	@ 0x50
 80148e2:	5a9b      	ldrh	r3, [r3, r2]
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	001a      	movs	r2, r3
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	18d2      	adds	r2, r2, r3
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	18d3      	adds	r3, r2, r3
 80148f6:	4aca      	ldr	r2, [pc, #808]	@ (8014c20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80148f8:	4694      	mov	ip, r2
 80148fa:	4463      	add	r3, ip
 80148fc:	881a      	ldrh	r2, [r3, #0]
 80148fe:	2186      	movs	r1, #134	@ 0x86
 8014900:	187b      	adds	r3, r7, r1
 8014902:	0592      	lsls	r2, r2, #22
 8014904:	0d92      	lsrs	r2, r2, #22
 8014906:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	699a      	ldr	r2, [r3, #24]
 801490c:	187b      	adds	r3, r7, r1
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	429a      	cmp	r2, r3
 8014912:	d307      	bcc.n	8014924 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	699a      	ldr	r2, [r3, #24]
 8014918:	187b      	adds	r3, r7, r1
 801491a:	881b      	ldrh	r3, [r3, #0]
 801491c:	1ad2      	subs	r2, r2, r3
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	619a      	str	r2, [r3, #24]
 8014922:	e002      	b.n	801492a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	2200      	movs	r2, #0
 8014928:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	699b      	ldr	r3, [r3, #24]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d000      	beq.n	8014934 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014932:	e0bb      	b.n	8014aac <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	785b      	ldrb	r3, [r3, #1]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d125      	bne.n	8014988 <HAL_PCD_EP_DB_Transmit+0x490>
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2250      	movs	r2, #80	@ 0x50
 8014948:	5a9b      	ldrh	r3, [r3, r2]
 801494a:	b29b      	uxth	r3, r3
 801494c:	001a      	movs	r2, r3
 801494e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014950:	189b      	adds	r3, r3, r2
 8014952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	00da      	lsls	r2, r3, #3
 801495a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801495c:	18d3      	adds	r3, r2, r3
 801495e:	4aaf      	ldr	r2, [pc, #700]	@ (8014c1c <HAL_PCD_EP_DB_Transmit+0x724>)
 8014960:	4694      	mov	ip, r2
 8014962:	4463      	add	r3, ip
 8014964:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014968:	881b      	ldrh	r3, [r3, #0]
 801496a:	b29b      	uxth	r3, r3
 801496c:	059b      	lsls	r3, r3, #22
 801496e:	0d9b      	lsrs	r3, r3, #22
 8014970:	b29a      	uxth	r2, r3
 8014972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014974:	801a      	strh	r2, [r3, #0]
 8014976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	b29b      	uxth	r3, r3
 801497c:	4aa9      	ldr	r2, [pc, #676]	@ (8014c24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801497e:	4313      	orrs	r3, r2
 8014980:	b29a      	uxth	r2, r3
 8014982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014984:	801a      	strh	r2, [r3, #0]
 8014986:	e01b      	b.n	80149c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	785b      	ldrb	r3, [r3, #1]
 801498c:	2b01      	cmp	r3, #1
 801498e:	d117      	bne.n	80149c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	667b      	str	r3, [r7, #100]	@ 0x64
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	2250      	movs	r2, #80	@ 0x50
 801499c:	5a9b      	ldrh	r3, [r3, r2]
 801499e:	b29b      	uxth	r3, r3
 80149a0:	001a      	movs	r2, r3
 80149a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80149a4:	189b      	adds	r3, r3, r2
 80149a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	00da      	lsls	r2, r3, #3
 80149ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80149b0:	18d3      	adds	r3, r2, r3
 80149b2:	4a9a      	ldr	r2, [pc, #616]	@ (8014c1c <HAL_PCD_EP_DB_Transmit+0x724>)
 80149b4:	4694      	mov	ip, r2
 80149b6:	4463      	add	r3, ip
 80149b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80149ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80149bc:	2200      	movs	r2, #0
 80149be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	785b      	ldrb	r3, [r3, #1]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d12b      	bne.n	8014a26 <HAL_PCD_EP_DB_Transmit+0x52e>
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2250      	movs	r2, #80	@ 0x50
 80149da:	5a9b      	ldrh	r3, [r3, r2]
 80149dc:	b29b      	uxth	r3, r3
 80149de:	001a      	movs	r2, r3
 80149e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80149e2:	189b      	adds	r3, r3, r2
 80149e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	00da      	lsls	r2, r3, #3
 80149ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80149ee:	18d3      	adds	r3, r2, r3
 80149f0:	4a8b      	ldr	r2, [pc, #556]	@ (8014c20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80149f2:	4694      	mov	ip, r2
 80149f4:	4463      	add	r3, ip
 80149f6:	2180      	movs	r1, #128	@ 0x80
 80149f8:	187a      	adds	r2, r7, r1
 80149fa:	6013      	str	r3, [r2, #0]
 80149fc:	187b      	adds	r3, r7, r1
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	881b      	ldrh	r3, [r3, #0]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	059b      	lsls	r3, r3, #22
 8014a06:	0d9b      	lsrs	r3, r3, #22
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	187b      	adds	r3, r7, r1
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	801a      	strh	r2, [r3, #0]
 8014a10:	187b      	adds	r3, r7, r1
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	881b      	ldrh	r3, [r3, #0]
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	4a82      	ldr	r2, [pc, #520]	@ (8014c24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014a1a:	4313      	orrs	r3, r2
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	187b      	adds	r3, r7, r1
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	801a      	strh	r2, [r3, #0]
 8014a24:	e018      	b.n	8014a58 <HAL_PCD_EP_DB_Transmit+0x560>
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	785b      	ldrb	r3, [r3, #1]
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d114      	bne.n	8014a58 <HAL_PCD_EP_DB_Transmit+0x560>
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2250      	movs	r2, #80	@ 0x50
 8014a34:	5a9b      	ldrh	r3, [r3, r2]
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	001a      	movs	r2, r3
 8014a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a3c:	189b      	adds	r3, r3, r2
 8014a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	00da      	lsls	r2, r3, #3
 8014a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a48:	18d3      	adds	r3, r2, r3
 8014a4a:	4a75      	ldr	r2, [pc, #468]	@ (8014c20 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014a4c:	4694      	mov	ip, r2
 8014a4e:	4463      	add	r3, ip
 8014a50:	673b      	str	r3, [r7, #112]	@ 0x70
 8014a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014a54:	2200      	movs	r2, #0
 8014a56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	781a      	ldrb	r2, [r3, #0]
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	0011      	movs	r1, r2
 8014a60:	0018      	movs	r0, r3
 8014a62:	f008 fb43 	bl	801d0ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014a66:	1dbb      	adds	r3, r7, #6
 8014a68:	881a      	ldrh	r2, [r3, #0]
 8014a6a:	2380      	movs	r3, #128	@ 0x80
 8014a6c:	01db      	lsls	r3, r3, #7
 8014a6e:	4013      	ands	r3, r2
 8014a70:	d000      	beq.n	8014a74 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014a72:	e11e      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	001a      	movs	r2, r3
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	18d3      	adds	r3, r2, r3
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	2088      	movs	r0, #136	@ 0x88
 8014a88:	183b      	adds	r3, r7, r0
 8014a8a:	4967      	ldr	r1, [pc, #412]	@ (8014c28 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014a8c:	400a      	ands	r2, r1
 8014a8e:	801a      	strh	r2, [r3, #0]
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	001a      	movs	r2, r3
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	18d3      	adds	r3, r2, r3
 8014a9e:	183a      	adds	r2, r7, r0
 8014aa0:	8812      	ldrh	r2, [r2, #0]
 8014aa2:	4962      	ldr	r1, [pc, #392]	@ (8014c2c <HAL_PCD_EP_DB_Transmit+0x734>)
 8014aa4:	430a      	orrs	r2, r1
 8014aa6:	b292      	uxth	r2, r2
 8014aa8:	801a      	strh	r2, [r3, #0]
 8014aaa:	e102      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014aac:	1dbb      	adds	r3, r7, #6
 8014aae:	881a      	ldrh	r2, [r3, #0]
 8014ab0:	2380      	movs	r3, #128	@ 0x80
 8014ab2:	01db      	lsls	r3, r3, #7
 8014ab4:	4013      	ands	r3, r2
 8014ab6:	d11a      	bne.n	8014aee <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	001a      	movs	r2, r3
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	18d3      	adds	r3, r2, r3
 8014ac6:	881b      	ldrh	r3, [r3, #0]
 8014ac8:	b29a      	uxth	r2, r3
 8014aca:	204e      	movs	r0, #78	@ 0x4e
 8014acc:	183b      	adds	r3, r7, r0
 8014ace:	4956      	ldr	r1, [pc, #344]	@ (8014c28 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014ad0:	400a      	ands	r2, r1
 8014ad2:	801a      	strh	r2, [r3, #0]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	001a      	movs	r2, r3
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	18d3      	adds	r3, r2, r3
 8014ae2:	183a      	adds	r2, r7, r0
 8014ae4:	8812      	ldrh	r2, [r2, #0]
 8014ae6:	4951      	ldr	r1, [pc, #324]	@ (8014c2c <HAL_PCD_EP_DB_Transmit+0x734>)
 8014ae8:	430a      	orrs	r2, r1
 8014aea:	b292      	uxth	r2, r2
 8014aec:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	2224      	movs	r2, #36	@ 0x24
 8014af2:	5c9b      	ldrb	r3, [r3, r2]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d000      	beq.n	8014afa <HAL_PCD_EP_DB_Transmit+0x602>
 8014af8:	e0db      	b.n	8014cb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	695a      	ldr	r2, [r3, #20]
 8014afe:	2186      	movs	r1, #134	@ 0x86
 8014b00:	187b      	adds	r3, r7, r1
 8014b02:	881b      	ldrh	r3, [r3, #0]
 8014b04:	18d2      	adds	r2, r2, r3
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	69da      	ldr	r2, [r3, #28]
 8014b0e:	187b      	adds	r3, r7, r1
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	18d2      	adds	r2, r2, r3
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	6a1a      	ldr	r2, [r3, #32]
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	691b      	ldr	r3, [r3, #16]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d30c      	bcc.n	8014b3e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	691b      	ldr	r3, [r3, #16]
 8014b28:	218c      	movs	r1, #140	@ 0x8c
 8014b2a:	187a      	adds	r2, r7, r1
 8014b2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	6a1a      	ldr	r2, [r3, #32]
 8014b32:	187b      	adds	r3, r7, r1
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	1ad2      	subs	r2, r2, r3
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	621a      	str	r2, [r3, #32]
 8014b3c:	e01a      	b.n	8014b74 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	6a1b      	ldr	r3, [r3, #32]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d10a      	bne.n	8014b5c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014b46:	2386      	movs	r3, #134	@ 0x86
 8014b48:	18fb      	adds	r3, r7, r3
 8014b4a:	881b      	ldrh	r3, [r3, #0]
 8014b4c:	228c      	movs	r2, #140	@ 0x8c
 8014b4e:	18ba      	adds	r2, r7, r2
 8014b50:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	2224      	movs	r2, #36	@ 0x24
 8014b56:	2100      	movs	r1, #0
 8014b58:	5499      	strb	r1, [r3, r2]
 8014b5a:	e00b      	b.n	8014b74 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	6a1b      	ldr	r3, [r3, #32]
 8014b60:	228c      	movs	r2, #140	@ 0x8c
 8014b62:	18ba      	adds	r2, r7, r2
 8014b64:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	2224      	movs	r2, #36	@ 0x24
 8014b70:	2100      	movs	r1, #0
 8014b72:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	785b      	ldrb	r3, [r3, #1]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d000      	beq.n	8014b84 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014b82:	e06e      	b.n	8014c62 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2250      	movs	r2, #80	@ 0x50
 8014b90:	5a9b      	ldrh	r3, [r3, r2]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	001a      	movs	r2, r3
 8014b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b98:	189b      	adds	r3, r3, r2
 8014b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	00da      	lsls	r2, r3, #3
 8014ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ba4:	18d3      	adds	r3, r2, r3
 8014ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8014c20 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ba8:	4694      	mov	ip, r2
 8014baa:	4463      	add	r3, ip
 8014bac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014bae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bb0:	881b      	ldrh	r3, [r3, #0]
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	059b      	lsls	r3, r3, #22
 8014bb6:	0d9b      	lsrs	r3, r3, #22
 8014bb8:	b29a      	uxth	r2, r3
 8014bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bbc:	801a      	strh	r2, [r3, #0]
 8014bbe:	228c      	movs	r2, #140	@ 0x8c
 8014bc0:	18bb      	adds	r3, r7, r2
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8014bc6:	d91a      	bls.n	8014bfe <HAL_PCD_EP_DB_Transmit+0x706>
 8014bc8:	18bb      	adds	r3, r7, r2
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	095b      	lsrs	r3, r3, #5
 8014bce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014bd0:	18bb      	adds	r3, r7, r2
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	221f      	movs	r2, #31
 8014bd6:	4013      	ands	r3, r2
 8014bd8:	d102      	bne.n	8014be0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014bdc:	3b01      	subs	r3, #1
 8014bde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014be2:	881b      	ldrh	r3, [r3, #0]
 8014be4:	b29a      	uxth	r2, r3
 8014be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	029b      	lsls	r3, r3, #10
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	b29b      	uxth	r3, r3
 8014bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8014c24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014bf4:	4313      	orrs	r3, r2
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bfa:	801a      	strh	r2, [r3, #0]
 8014bfc:	e04d      	b.n	8014c9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014bfe:	238c      	movs	r3, #140	@ 0x8c
 8014c00:	18fb      	adds	r3, r7, r3
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d113      	bne.n	8014c30 <HAL_PCD_EP_DB_Transmit+0x738>
 8014c08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c0a:	881b      	ldrh	r3, [r3, #0]
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	4a05      	ldr	r2, [pc, #20]	@ (8014c24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014c10:	4313      	orrs	r3, r2
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c16:	801a      	strh	r2, [r3, #0]
 8014c18:	e03f      	b.n	8014c9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c1a:	46c0      	nop			@ (mov r8, r8)
 8014c1c:	00000402 	.word	0x00000402
 8014c20:	00000406 	.word	0x00000406
 8014c24:	ffff8000 	.word	0xffff8000
 8014c28:	ffff8f8f 	.word	0xffff8f8f
 8014c2c:	ffffc080 	.word	0xffffc080
 8014c30:	228c      	movs	r2, #140	@ 0x8c
 8014c32:	18bb      	adds	r3, r7, r2
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	085b      	lsrs	r3, r3, #1
 8014c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c3a:	18bb      	adds	r3, r7, r2
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2201      	movs	r2, #1
 8014c40:	4013      	ands	r3, r2
 8014c42:	d002      	beq.n	8014c4a <HAL_PCD_EP_DB_Transmit+0x752>
 8014c44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c46:	3301      	adds	r3, #1
 8014c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c4c:	881b      	ldrh	r3, [r3, #0]
 8014c4e:	b29a      	uxth	r2, r3
 8014c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c52:	b29b      	uxth	r3, r3
 8014c54:	029b      	lsls	r3, r3, #10
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	4313      	orrs	r3, r2
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c5e:	801a      	strh	r2, [r3, #0]
 8014c60:	e01b      	b.n	8014c9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	785b      	ldrb	r3, [r3, #1]
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d117      	bne.n	8014c9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	2250      	movs	r2, #80	@ 0x50
 8014c70:	5a9b      	ldrh	r3, [r3, r2]
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	001a      	movs	r2, r3
 8014c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c78:	189b      	adds	r3, r3, r2
 8014c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	00da      	lsls	r2, r3, #3
 8014c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c84:	18d3      	adds	r3, r2, r3
 8014c86:	4a21      	ldr	r2, [pc, #132]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x814>)
 8014c88:	4694      	mov	ip, r2
 8014c8a:	4463      	add	r3, ip
 8014c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8014c8e:	238c      	movs	r3, #140	@ 0x8c
 8014c90:	18fb      	adds	r3, r7, r3
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	b29a      	uxth	r2, r3
 8014c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c98:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	6818      	ldr	r0, [r3, #0]
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	6959      	ldr	r1, [r3, #20]
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	895a      	ldrh	r2, [r3, #10]
 8014ca6:	238c      	movs	r3, #140	@ 0x8c
 8014ca8:	18fb      	adds	r3, r7, r3
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	f006 f999 	bl	801afe4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	001a      	movs	r2, r3
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	18d3      	adds	r3, r2, r3
 8014cc0:	881b      	ldrh	r3, [r3, #0]
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	2014      	movs	r0, #20
 8014cc6:	183b      	adds	r3, r7, r0
 8014cc8:	4911      	ldr	r1, [pc, #68]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014cca:	400a      	ands	r2, r1
 8014ccc:	801a      	strh	r2, [r3, #0]
 8014cce:	183b      	adds	r3, r7, r0
 8014cd0:	183a      	adds	r2, r7, r0
 8014cd2:	8812      	ldrh	r2, [r2, #0]
 8014cd4:	2110      	movs	r1, #16
 8014cd6:	404a      	eors	r2, r1
 8014cd8:	801a      	strh	r2, [r3, #0]
 8014cda:	183b      	adds	r3, r7, r0
 8014cdc:	183a      	adds	r2, r7, r0
 8014cde:	8812      	ldrh	r2, [r2, #0]
 8014ce0:	2120      	movs	r1, #32
 8014ce2:	404a      	eors	r2, r1
 8014ce4:	801a      	strh	r2, [r3, #0]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	001a      	movs	r2, r3
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	18d3      	adds	r3, r2, r3
 8014cf4:	183a      	adds	r2, r7, r0
 8014cf6:	8812      	ldrh	r2, [r2, #0]
 8014cf8:	4906      	ldr	r1, [pc, #24]	@ (8014d14 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014cfa:	430a      	orrs	r2, r1
 8014cfc:	b292      	uxth	r2, r2
 8014cfe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014d00:	2300      	movs	r3, #0
}
 8014d02:	0018      	movs	r0, r3
 8014d04:	46bd      	mov	sp, r7
 8014d06:	b024      	add	sp, #144	@ 0x90
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	46c0      	nop			@ (mov r8, r8)
 8014d0c:	00000406 	.word	0x00000406
 8014d10:	ffff8fbf 	.word	0xffff8fbf
 8014d14:	ffff8080 	.word	0xffff8080

08014d18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014d18:	b590      	push	{r4, r7, lr}
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	0008      	movs	r0, r1
 8014d22:	0011      	movs	r1, r2
 8014d24:	607b      	str	r3, [r7, #4]
 8014d26:	240a      	movs	r4, #10
 8014d28:	193b      	adds	r3, r7, r4
 8014d2a:	1c02      	adds	r2, r0, #0
 8014d2c:	801a      	strh	r2, [r3, #0]
 8014d2e:	2308      	movs	r3, #8
 8014d30:	18fb      	adds	r3, r7, r3
 8014d32:	1c0a      	adds	r2, r1, #0
 8014d34:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014d36:	0021      	movs	r1, r4
 8014d38:	187b      	adds	r3, r7, r1
 8014d3a:	881b      	ldrh	r3, [r3, #0]
 8014d3c:	2280      	movs	r2, #128	@ 0x80
 8014d3e:	4013      	ands	r3, r2
 8014d40:	b29b      	uxth	r3, r3
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d00c      	beq.n	8014d60 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014d46:	187b      	adds	r3, r7, r1
 8014d48:	881b      	ldrh	r3, [r3, #0]
 8014d4a:	2207      	movs	r2, #7
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	1c5a      	adds	r2, r3, #1
 8014d50:	0013      	movs	r3, r2
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	189b      	adds	r3, r3, r2
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	68fa      	ldr	r2, [r7, #12]
 8014d5a:	18d3      	adds	r3, r2, r3
 8014d5c:	617b      	str	r3, [r7, #20]
 8014d5e:	e00b      	b.n	8014d78 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014d60:	230a      	movs	r3, #10
 8014d62:	18fb      	adds	r3, r7, r3
 8014d64:	881a      	ldrh	r2, [r3, #0]
 8014d66:	0013      	movs	r3, r2
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	189b      	adds	r3, r3, r2
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	3369      	adds	r3, #105	@ 0x69
 8014d70:	33ff      	adds	r3, #255	@ 0xff
 8014d72:	68fa      	ldr	r2, [r7, #12]
 8014d74:	18d3      	adds	r3, r2, r3
 8014d76:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014d78:	2308      	movs	r3, #8
 8014d7a:	18fb      	adds	r3, r7, r3
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d107      	bne.n	8014d92 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	2200      	movs	r2, #0
 8014d86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	80da      	strh	r2, [r3, #6]
 8014d90:	e00b      	b.n	8014daa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	2201      	movs	r2, #1
 8014d96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	0c1b      	lsrs	r3, r3, #16
 8014da4:	b29a      	uxth	r2, r3
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014daa:	2300      	movs	r3, #0
}
 8014dac:	0018      	movs	r0, r3
 8014dae:	46bd      	mov	sp, r7
 8014db0:	b007      	add	sp, #28
 8014db2:	bd90      	pop	{r4, r7, pc}

08014db4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	23ba      	movs	r3, #186	@ 0xba
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	2101      	movs	r1, #1
 8014dca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	23b8      	movs	r3, #184	@ 0xb8
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	2254      	movs	r2, #84	@ 0x54
 8014dda:	5a9b      	ldrh	r3, [r3, r2]
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	2201      	movs	r2, #1
 8014de0:	4313      	orrs	r3, r2
 8014de2:	b299      	uxth	r1, r3
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	2254      	movs	r2, #84	@ 0x54
 8014de8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2254      	movs	r2, #84	@ 0x54
 8014dee:	5a9b      	ldrh	r3, [r3, r2]
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	2202      	movs	r2, #2
 8014df4:	4313      	orrs	r3, r2
 8014df6:	b299      	uxth	r1, r3
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2254      	movs	r2, #84	@ 0x54
 8014dfc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014dfe:	2300      	movs	r3, #0
}
 8014e00:	0018      	movs	r0, r3
 8014e02:	46bd      	mov	sp, r7
 8014e04:	b004      	add	sp, #16
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	000a      	movs	r2, r1
 8014e12:	1cfb      	adds	r3, r7, #3
 8014e14:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014e16:	46c0      	nop			@ (mov r8, r8)
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	b002      	add	sp, #8
 8014e1c:	bd80      	pop	{r7, pc}
	...

08014e20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014e24:	4b04      	ldr	r3, [pc, #16]	@ (8014e38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	4b03      	ldr	r3, [pc, #12]	@ (8014e38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014e2a:	2180      	movs	r1, #128	@ 0x80
 8014e2c:	0049      	lsls	r1, r1, #1
 8014e2e:	430a      	orrs	r2, r1
 8014e30:	601a      	str	r2, [r3, #0]
}
 8014e32:	46c0      	nop			@ (mov r8, r8)
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	40007000 	.word	0x40007000

08014e3c <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014e40:	4b04      	ldr	r3, [pc, #16]	@ (8014e54 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	4b03      	ldr	r3, [pc, #12]	@ (8014e54 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014e46:	4904      	ldr	r1, [pc, #16]	@ (8014e58 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014e48:	400a      	ands	r2, r1
 8014e4a:	601a      	str	r2, [r3, #0]
}
 8014e4c:	46c0      	nop			@ (mov r8, r8)
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}
 8014e52:	46c0      	nop			@ (mov r8, r8)
 8014e54:	40007000 	.word	0x40007000
 8014e58:	fffffeff 	.word	0xfffffeff

08014e5c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	000a      	movs	r2, r1
 8014e66:	1cfb      	adds	r3, r7, #3
 8014e68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014e6e:	4b25      	ldr	r3, [pc, #148]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	2380      	movs	r3, #128	@ 0x80
 8014e74:	009b      	lsls	r3, r3, #2
 8014e76:	4013      	ands	r3, r2
 8014e78:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014e7a:	4b23      	ldr	r3, [pc, #140]	@ (8014f08 <HAL_PWR_EnterSTOPMode+0xac>)
 8014e7c:	6a1b      	ldr	r3, [r3, #32]
 8014e7e:	2201      	movs	r2, #1
 8014e80:	4013      	ands	r3, r2
 8014e82:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d008      	beq.n	8014e9c <HAL_PWR_EnterSTOPMode+0x40>
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d005      	beq.n	8014e9c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014e90:	4b1c      	ldr	r3, [pc, #112]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e92:	681a      	ldr	r2, [r3, #0]
 8014e94:	4b1b      	ldr	r3, [pc, #108]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e96:	491d      	ldr	r1, [pc, #116]	@ (8014f0c <HAL_PWR_EnterSTOPMode+0xb0>)
 8014e98:	400a      	ands	r2, r1
 8014e9a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014e9c:	4b19      	ldr	r3, [pc, #100]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2203      	movs	r2, #3
 8014ea6:	4393      	bics	r3, r2
 8014ea8:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014eaa:	697a      	ldr	r2, [r7, #20]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014eb2:	4b14      	ldr	r3, [pc, #80]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014eb4:	697a      	ldr	r2, [r7, #20]
 8014eb6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014eb8:	4b15      	ldr	r3, [pc, #84]	@ (8014f10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014eba:	691a      	ldr	r2, [r3, #16]
 8014ebc:	4b14      	ldr	r3, [pc, #80]	@ (8014f10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014ebe:	2104      	movs	r1, #4
 8014ec0:	430a      	orrs	r2, r1
 8014ec2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014ec4:	1cfb      	adds	r3, r7, #3
 8014ec6:	781b      	ldrb	r3, [r3, #0]
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d101      	bne.n	8014ed0 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014ecc:	bf30      	wfi
 8014ece:	e002      	b.n	8014ed6 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014ed0:	bf40      	sev
    __WFE();
 8014ed2:	bf20      	wfe
    __WFE();
 8014ed4:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8014f10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014ed8:	691a      	ldr	r2, [r3, #16]
 8014eda:	4b0d      	ldr	r3, [pc, #52]	@ (8014f10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014edc:	2104      	movs	r1, #4
 8014ede:	438a      	bics	r2, r1
 8014ee0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d009      	beq.n	8014efc <HAL_PWR_EnterSTOPMode+0xa0>
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d006      	beq.n	8014efc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014eee:	4b05      	ldr	r3, [pc, #20]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	4b04      	ldr	r3, [pc, #16]	@ (8014f04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014ef4:	2180      	movs	r1, #128	@ 0x80
 8014ef6:	0089      	lsls	r1, r1, #2
 8014ef8:	430a      	orrs	r2, r1
 8014efa:	601a      	str	r2, [r3, #0]
  }
}
 8014efc:	46c0      	nop			@ (mov r8, r8)
 8014efe:	46bd      	mov	sp, r7
 8014f00:	b006      	add	sp, #24
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	40007000 	.word	0x40007000
 8014f08:	40010000 	.word	0x40010000
 8014f0c:	fffffdff 	.word	0xfffffdff
 8014f10:	e000ed00 	.word	0xe000ed00

08014f14 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014f18:	4b07      	ldr	r3, [pc, #28]	@ (8014f38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	4b06      	ldr	r3, [pc, #24]	@ (8014f38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014f1e:	2102      	movs	r1, #2
 8014f20:	430a      	orrs	r2, r1
 8014f22:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f24:	4b05      	ldr	r3, [pc, #20]	@ (8014f3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014f26:	691a      	ldr	r2, [r3, #16]
 8014f28:	4b04      	ldr	r3, [pc, #16]	@ (8014f3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014f2a:	2104      	movs	r1, #4
 8014f2c:	430a      	orrs	r2, r1
 8014f2e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014f30:	bf30      	wfi
}
 8014f32:	46c0      	nop			@ (mov r8, r8)
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	40007000 	.word	0x40007000
 8014f3c:	e000ed00 	.word	0xe000ed00

08014f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014f40:	b5b0      	push	{r4, r5, r7, lr}
 8014f42:	b08a      	sub	sp, #40	@ 0x28
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d102      	bne.n	8014f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	f000 fbbf 	bl	80156d2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014f54:	4bc9      	ldr	r3, [pc, #804]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	220c      	movs	r2, #12
 8014f5a:	4013      	ands	r3, r2
 8014f5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014f5e:	4bc7      	ldr	r3, [pc, #796]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014f60:	68da      	ldr	r2, [r3, #12]
 8014f62:	2380      	movs	r3, #128	@ 0x80
 8014f64:	025b      	lsls	r3, r3, #9
 8014f66:	4013      	ands	r3, r2
 8014f68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2201      	movs	r2, #1
 8014f70:	4013      	ands	r3, r2
 8014f72:	d100      	bne.n	8014f76 <HAL_RCC_OscConfig+0x36>
 8014f74:	e07e      	b.n	8015074 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	2b08      	cmp	r3, #8
 8014f7a:	d007      	beq.n	8014f8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014f7c:	69fb      	ldr	r3, [r7, #28]
 8014f7e:	2b0c      	cmp	r3, #12
 8014f80:	d112      	bne.n	8014fa8 <HAL_RCC_OscConfig+0x68>
 8014f82:	69ba      	ldr	r2, [r7, #24]
 8014f84:	2380      	movs	r3, #128	@ 0x80
 8014f86:	025b      	lsls	r3, r3, #9
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d10d      	bne.n	8014fa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f8c:	4bbb      	ldr	r3, [pc, #748]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	2380      	movs	r3, #128	@ 0x80
 8014f92:	029b      	lsls	r3, r3, #10
 8014f94:	4013      	ands	r3, r2
 8014f96:	d100      	bne.n	8014f9a <HAL_RCC_OscConfig+0x5a>
 8014f98:	e06b      	b.n	8015072 <HAL_RCC_OscConfig+0x132>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d167      	bne.n	8015072 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	f000 fb95 	bl	80156d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	685a      	ldr	r2, [r3, #4]
 8014fac:	2380      	movs	r3, #128	@ 0x80
 8014fae:	025b      	lsls	r3, r3, #9
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d107      	bne.n	8014fc4 <HAL_RCC_OscConfig+0x84>
 8014fb4:	4bb1      	ldr	r3, [pc, #708]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	4bb0      	ldr	r3, [pc, #704]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014fba:	2180      	movs	r1, #128	@ 0x80
 8014fbc:	0249      	lsls	r1, r1, #9
 8014fbe:	430a      	orrs	r2, r1
 8014fc0:	601a      	str	r2, [r3, #0]
 8014fc2:	e027      	b.n	8015014 <HAL_RCC_OscConfig+0xd4>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	685a      	ldr	r2, [r3, #4]
 8014fc8:	23a0      	movs	r3, #160	@ 0xa0
 8014fca:	02db      	lsls	r3, r3, #11
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d10e      	bne.n	8014fee <HAL_RCC_OscConfig+0xae>
 8014fd0:	4baa      	ldr	r3, [pc, #680]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014fd2:	681a      	ldr	r2, [r3, #0]
 8014fd4:	4ba9      	ldr	r3, [pc, #676]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014fd6:	2180      	movs	r1, #128	@ 0x80
 8014fd8:	02c9      	lsls	r1, r1, #11
 8014fda:	430a      	orrs	r2, r1
 8014fdc:	601a      	str	r2, [r3, #0]
 8014fde:	4ba7      	ldr	r3, [pc, #668]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014fe0:	681a      	ldr	r2, [r3, #0]
 8014fe2:	4ba6      	ldr	r3, [pc, #664]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014fe4:	2180      	movs	r1, #128	@ 0x80
 8014fe6:	0249      	lsls	r1, r1, #9
 8014fe8:	430a      	orrs	r2, r1
 8014fea:	601a      	str	r2, [r3, #0]
 8014fec:	e012      	b.n	8015014 <HAL_RCC_OscConfig+0xd4>
 8014fee:	4ba3      	ldr	r3, [pc, #652]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	4ba2      	ldr	r3, [pc, #648]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014ff4:	49a2      	ldr	r1, [pc, #648]	@ (8015280 <HAL_RCC_OscConfig+0x340>)
 8014ff6:	400a      	ands	r2, r1
 8014ff8:	601a      	str	r2, [r3, #0]
 8014ffa:	4ba0      	ldr	r3, [pc, #640]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	2380      	movs	r3, #128	@ 0x80
 8015000:	025b      	lsls	r3, r3, #9
 8015002:	4013      	ands	r3, r2
 8015004:	60fb      	str	r3, [r7, #12]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	4b9c      	ldr	r3, [pc, #624]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	4b9b      	ldr	r3, [pc, #620]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 801500e:	499d      	ldr	r1, [pc, #628]	@ (8015284 <HAL_RCC_OscConfig+0x344>)
 8015010:	400a      	ands	r2, r1
 8015012:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d015      	beq.n	8015048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801501c:	f7f9 fe60 	bl	800ece0 <HAL_GetTick>
 8015020:	0003      	movs	r3, r0
 8015022:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015024:	e009      	b.n	801503a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015026:	f7f9 fe5b 	bl	800ece0 <HAL_GetTick>
 801502a:	0002      	movs	r2, r0
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	1ad3      	subs	r3, r2, r3
 8015030:	2b64      	cmp	r3, #100	@ 0x64
 8015032:	d902      	bls.n	801503a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015034:	2303      	movs	r3, #3
 8015036:	f000 fb4c 	bl	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801503a:	4b90      	ldr	r3, [pc, #576]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 801503c:	681a      	ldr	r2, [r3, #0]
 801503e:	2380      	movs	r3, #128	@ 0x80
 8015040:	029b      	lsls	r3, r3, #10
 8015042:	4013      	ands	r3, r2
 8015044:	d0ef      	beq.n	8015026 <HAL_RCC_OscConfig+0xe6>
 8015046:	e015      	b.n	8015074 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015048:	f7f9 fe4a 	bl	800ece0 <HAL_GetTick>
 801504c:	0003      	movs	r3, r0
 801504e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015050:	e008      	b.n	8015064 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015052:	f7f9 fe45 	bl	800ece0 <HAL_GetTick>
 8015056:	0002      	movs	r2, r0
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	1ad3      	subs	r3, r2, r3
 801505c:	2b64      	cmp	r3, #100	@ 0x64
 801505e:	d901      	bls.n	8015064 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8015060:	2303      	movs	r3, #3
 8015062:	e336      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015064:	4b85      	ldr	r3, [pc, #532]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	2380      	movs	r3, #128	@ 0x80
 801506a:	029b      	lsls	r3, r3, #10
 801506c:	4013      	ands	r3, r2
 801506e:	d1f0      	bne.n	8015052 <HAL_RCC_OscConfig+0x112>
 8015070:	e000      	b.n	8015074 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015072:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	2202      	movs	r2, #2
 801507a:	4013      	ands	r3, r2
 801507c:	d100      	bne.n	8015080 <HAL_RCC_OscConfig+0x140>
 801507e:	e099      	b.n	80151b4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015088:	2220      	movs	r2, #32
 801508a:	4013      	ands	r3, r2
 801508c:	d009      	beq.n	80150a2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801508e:	4b7b      	ldr	r3, [pc, #492]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	4b7a      	ldr	r3, [pc, #488]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015094:	2120      	movs	r1, #32
 8015096:	430a      	orrs	r2, r1
 8015098:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509c:	2220      	movs	r2, #32
 801509e:	4393      	bics	r3, r2
 80150a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80150a2:	69fb      	ldr	r3, [r7, #28]
 80150a4:	2b04      	cmp	r3, #4
 80150a6:	d005      	beq.n	80150b4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	2b0c      	cmp	r3, #12
 80150ac:	d13e      	bne.n	801512c <HAL_RCC_OscConfig+0x1ec>
 80150ae:	69bb      	ldr	r3, [r7, #24]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d13b      	bne.n	801512c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80150b4:	4b71      	ldr	r3, [pc, #452]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2204      	movs	r2, #4
 80150ba:	4013      	ands	r3, r2
 80150bc:	d004      	beq.n	80150c8 <HAL_RCC_OscConfig+0x188>
 80150be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d101      	bne.n	80150c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80150c4:	2301      	movs	r3, #1
 80150c6:	e304      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80150c8:	4b6c      	ldr	r3, [pc, #432]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80150ca:	685b      	ldr	r3, [r3, #4]
 80150cc:	4a6e      	ldr	r2, [pc, #440]	@ (8015288 <HAL_RCC_OscConfig+0x348>)
 80150ce:	4013      	ands	r3, r2
 80150d0:	0019      	movs	r1, r3
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	691b      	ldr	r3, [r3, #16]
 80150d6:	021a      	lsls	r2, r3, #8
 80150d8:	4b68      	ldr	r3, [pc, #416]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80150da:	430a      	orrs	r2, r1
 80150dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80150de:	4b67      	ldr	r3, [pc, #412]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	2209      	movs	r2, #9
 80150e4:	4393      	bics	r3, r2
 80150e6:	0019      	movs	r1, r3
 80150e8:	4b64      	ldr	r3, [pc, #400]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80150ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150ec:	430a      	orrs	r2, r1
 80150ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80150f0:	f000 fc42 	bl	8015978 <HAL_RCC_GetSysClockFreq>
 80150f4:	0001      	movs	r1, r0
 80150f6:	4b61      	ldr	r3, [pc, #388]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	091b      	lsrs	r3, r3, #4
 80150fc:	220f      	movs	r2, #15
 80150fe:	4013      	ands	r3, r2
 8015100:	4a62      	ldr	r2, [pc, #392]	@ (801528c <HAL_RCC_OscConfig+0x34c>)
 8015102:	5cd3      	ldrb	r3, [r2, r3]
 8015104:	000a      	movs	r2, r1
 8015106:	40da      	lsrs	r2, r3
 8015108:	4b61      	ldr	r3, [pc, #388]	@ (8015290 <HAL_RCC_OscConfig+0x350>)
 801510a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801510c:	4b61      	ldr	r3, [pc, #388]	@ (8015294 <HAL_RCC_OscConfig+0x354>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2513      	movs	r5, #19
 8015112:	197c      	adds	r4, r7, r5
 8015114:	0018      	movs	r0, r3
 8015116:	f7f9 fd9d 	bl	800ec54 <HAL_InitTick>
 801511a:	0003      	movs	r3, r0
 801511c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801511e:	197b      	adds	r3, r7, r5
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d046      	beq.n	80151b4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8015126:	197b      	adds	r3, r7, r5
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	e2d2      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801512e:	2b00      	cmp	r3, #0
 8015130:	d027      	beq.n	8015182 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015132:	4b52      	ldr	r3, [pc, #328]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2209      	movs	r2, #9
 8015138:	4393      	bics	r3, r2
 801513a:	0019      	movs	r1, r3
 801513c:	4b4f      	ldr	r3, [pc, #316]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 801513e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015140:	430a      	orrs	r2, r1
 8015142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015144:	f7f9 fdcc 	bl	800ece0 <HAL_GetTick>
 8015148:	0003      	movs	r3, r0
 801514a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801514c:	e008      	b.n	8015160 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801514e:	f7f9 fdc7 	bl	800ece0 <HAL_GetTick>
 8015152:	0002      	movs	r2, r0
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	1ad3      	subs	r3, r2, r3
 8015158:	2b02      	cmp	r3, #2
 801515a:	d901      	bls.n	8015160 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801515c:	2303      	movs	r3, #3
 801515e:	e2b8      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015160:	4b46      	ldr	r3, [pc, #280]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2204      	movs	r2, #4
 8015166:	4013      	ands	r3, r2
 8015168:	d0f1      	beq.n	801514e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801516a:	4b44      	ldr	r3, [pc, #272]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 801516c:	685b      	ldr	r3, [r3, #4]
 801516e:	4a46      	ldr	r2, [pc, #280]	@ (8015288 <HAL_RCC_OscConfig+0x348>)
 8015170:	4013      	ands	r3, r2
 8015172:	0019      	movs	r1, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	691b      	ldr	r3, [r3, #16]
 8015178:	021a      	lsls	r2, r3, #8
 801517a:	4b40      	ldr	r3, [pc, #256]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 801517c:	430a      	orrs	r2, r1
 801517e:	605a      	str	r2, [r3, #4]
 8015180:	e018      	b.n	80151b4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015182:	4b3e      	ldr	r3, [pc, #248]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	4b3d      	ldr	r3, [pc, #244]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015188:	2101      	movs	r1, #1
 801518a:	438a      	bics	r2, r1
 801518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801518e:	f7f9 fda7 	bl	800ece0 <HAL_GetTick>
 8015192:	0003      	movs	r3, r0
 8015194:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015196:	e008      	b.n	80151aa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015198:	f7f9 fda2 	bl	800ece0 <HAL_GetTick>
 801519c:	0002      	movs	r2, r0
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	1ad3      	subs	r3, r2, r3
 80151a2:	2b02      	cmp	r3, #2
 80151a4:	d901      	bls.n	80151aa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80151a6:	2303      	movs	r3, #3
 80151a8:	e293      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80151aa:	4b34      	ldr	r3, [pc, #208]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2204      	movs	r2, #4
 80151b0:	4013      	ands	r3, r2
 80151b2:	d1f1      	bne.n	8015198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2210      	movs	r2, #16
 80151ba:	4013      	ands	r3, r2
 80151bc:	d100      	bne.n	80151c0 <HAL_RCC_OscConfig+0x280>
 80151be:	e0a2      	b.n	8015306 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d140      	bne.n	8015248 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80151c6:	4b2d      	ldr	r3, [pc, #180]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	2380      	movs	r3, #128	@ 0x80
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	4013      	ands	r3, r2
 80151d0:	d005      	beq.n	80151de <HAL_RCC_OscConfig+0x29e>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	69db      	ldr	r3, [r3, #28]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d101      	bne.n	80151de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80151da:	2301      	movs	r3, #1
 80151dc:	e279      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80151de:	4b27      	ldr	r3, [pc, #156]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	4a2d      	ldr	r2, [pc, #180]	@ (8015298 <HAL_RCC_OscConfig+0x358>)
 80151e4:	4013      	ands	r3, r2
 80151e6:	0019      	movs	r1, r3
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151ec:	4b23      	ldr	r3, [pc, #140]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80151ee:	430a      	orrs	r2, r1
 80151f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80151f2:	4b22      	ldr	r3, [pc, #136]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	021b      	lsls	r3, r3, #8
 80151f8:	0a19      	lsrs	r1, r3, #8
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	6a1b      	ldr	r3, [r3, #32]
 80151fe:	061a      	lsls	r2, r3, #24
 8015200:	4b1e      	ldr	r3, [pc, #120]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015202:	430a      	orrs	r2, r1
 8015204:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801520a:	0b5b      	lsrs	r3, r3, #13
 801520c:	3301      	adds	r3, #1
 801520e:	2280      	movs	r2, #128	@ 0x80
 8015210:	0212      	lsls	r2, r2, #8
 8015212:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015214:	4b19      	ldr	r3, [pc, #100]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015216:	68db      	ldr	r3, [r3, #12]
 8015218:	091b      	lsrs	r3, r3, #4
 801521a:	210f      	movs	r1, #15
 801521c:	400b      	ands	r3, r1
 801521e:	491b      	ldr	r1, [pc, #108]	@ (801528c <HAL_RCC_OscConfig+0x34c>)
 8015220:	5ccb      	ldrb	r3, [r1, r3]
 8015222:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015224:	4b1a      	ldr	r3, [pc, #104]	@ (8015290 <HAL_RCC_OscConfig+0x350>)
 8015226:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8015228:	4b1a      	ldr	r3, [pc, #104]	@ (8015294 <HAL_RCC_OscConfig+0x354>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2513      	movs	r5, #19
 801522e:	197c      	adds	r4, r7, r5
 8015230:	0018      	movs	r0, r3
 8015232:	f7f9 fd0f 	bl	800ec54 <HAL_InitTick>
 8015236:	0003      	movs	r3, r0
 8015238:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801523a:	197b      	adds	r3, r7, r5
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d061      	beq.n	8015306 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015242:	197b      	adds	r3, r7, r5
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	e244      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	69db      	ldr	r3, [r3, #28]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d040      	beq.n	80152d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015250:	4b0a      	ldr	r3, [pc, #40]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	4b09      	ldr	r3, [pc, #36]	@ (801527c <HAL_RCC_OscConfig+0x33c>)
 8015256:	2180      	movs	r1, #128	@ 0x80
 8015258:	0049      	lsls	r1, r1, #1
 801525a:	430a      	orrs	r2, r1
 801525c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801525e:	f7f9 fd3f 	bl	800ece0 <HAL_GetTick>
 8015262:	0003      	movs	r3, r0
 8015264:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015266:	e019      	b.n	801529c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015268:	f7f9 fd3a 	bl	800ece0 <HAL_GetTick>
 801526c:	0002      	movs	r2, r0
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	2b02      	cmp	r3, #2
 8015274:	d912      	bls.n	801529c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015276:	2303      	movs	r3, #3
 8015278:	e22b      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
 801527a:	46c0      	nop			@ (mov r8, r8)
 801527c:	40021000 	.word	0x40021000
 8015280:	fffeffff 	.word	0xfffeffff
 8015284:	fffbffff 	.word	0xfffbffff
 8015288:	ffffe0ff 	.word	0xffffe0ff
 801528c:	08025604 	.word	0x08025604
 8015290:	200000cc 	.word	0x200000cc
 8015294:	200000dc 	.word	0x200000dc
 8015298:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801529c:	4bca      	ldr	r3, [pc, #808]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801529e:	681a      	ldr	r2, [r3, #0]
 80152a0:	2380      	movs	r3, #128	@ 0x80
 80152a2:	009b      	lsls	r3, r3, #2
 80152a4:	4013      	ands	r3, r2
 80152a6:	d0df      	beq.n	8015268 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80152a8:	4bc7      	ldr	r3, [pc, #796]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	4ac7      	ldr	r2, [pc, #796]	@ (80155cc <HAL_RCC_OscConfig+0x68c>)
 80152ae:	4013      	ands	r3, r2
 80152b0:	0019      	movs	r1, r3
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152b6:	4bc4      	ldr	r3, [pc, #784]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152b8:	430a      	orrs	r2, r1
 80152ba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80152bc:	4bc2      	ldr	r3, [pc, #776]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	021b      	lsls	r3, r3, #8
 80152c2:	0a19      	lsrs	r1, r3, #8
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6a1b      	ldr	r3, [r3, #32]
 80152c8:	061a      	lsls	r2, r3, #24
 80152ca:	4bbf      	ldr	r3, [pc, #764]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152cc:	430a      	orrs	r2, r1
 80152ce:	605a      	str	r2, [r3, #4]
 80152d0:	e019      	b.n	8015306 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80152d2:	4bbd      	ldr	r3, [pc, #756]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	4bbc      	ldr	r3, [pc, #752]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152d8:	49bd      	ldr	r1, [pc, #756]	@ (80155d0 <HAL_RCC_OscConfig+0x690>)
 80152da:	400a      	ands	r2, r1
 80152dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80152de:	f7f9 fcff 	bl	800ece0 <HAL_GetTick>
 80152e2:	0003      	movs	r3, r0
 80152e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80152e6:	e008      	b.n	80152fa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80152e8:	f7f9 fcfa 	bl	800ece0 <HAL_GetTick>
 80152ec:	0002      	movs	r2, r0
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	2b02      	cmp	r3, #2
 80152f4:	d901      	bls.n	80152fa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80152f6:	2303      	movs	r3, #3
 80152f8:	e1eb      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80152fa:	4bb3      	ldr	r3, [pc, #716]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80152fc:	681a      	ldr	r2, [r3, #0]
 80152fe:	2380      	movs	r3, #128	@ 0x80
 8015300:	009b      	lsls	r3, r3, #2
 8015302:	4013      	ands	r3, r2
 8015304:	d1f0      	bne.n	80152e8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2208      	movs	r2, #8
 801530c:	4013      	ands	r3, r2
 801530e:	d036      	beq.n	801537e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	695b      	ldr	r3, [r3, #20]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d019      	beq.n	801534c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015318:	4bab      	ldr	r3, [pc, #684]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801531a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801531c:	4baa      	ldr	r3, [pc, #680]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801531e:	2101      	movs	r1, #1
 8015320:	430a      	orrs	r2, r1
 8015322:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015324:	f7f9 fcdc 	bl	800ece0 <HAL_GetTick>
 8015328:	0003      	movs	r3, r0
 801532a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801532c:	e008      	b.n	8015340 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801532e:	f7f9 fcd7 	bl	800ece0 <HAL_GetTick>
 8015332:	0002      	movs	r2, r0
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	1ad3      	subs	r3, r2, r3
 8015338:	2b02      	cmp	r3, #2
 801533a:	d901      	bls.n	8015340 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801533c:	2303      	movs	r3, #3
 801533e:	e1c8      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015340:	4ba1      	ldr	r3, [pc, #644]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015344:	2202      	movs	r2, #2
 8015346:	4013      	ands	r3, r2
 8015348:	d0f1      	beq.n	801532e <HAL_RCC_OscConfig+0x3ee>
 801534a:	e018      	b.n	801537e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801534c:	4b9e      	ldr	r3, [pc, #632]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801534e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015350:	4b9d      	ldr	r3, [pc, #628]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015352:	2101      	movs	r1, #1
 8015354:	438a      	bics	r2, r1
 8015356:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015358:	f7f9 fcc2 	bl	800ece0 <HAL_GetTick>
 801535c:	0003      	movs	r3, r0
 801535e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015360:	e008      	b.n	8015374 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015362:	f7f9 fcbd 	bl	800ece0 <HAL_GetTick>
 8015366:	0002      	movs	r2, r0
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	1ad3      	subs	r3, r2, r3
 801536c:	2b02      	cmp	r3, #2
 801536e:	d901      	bls.n	8015374 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015370:	2303      	movs	r3, #3
 8015372:	e1ae      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015374:	4b94      	ldr	r3, [pc, #592]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015378:	2202      	movs	r2, #2
 801537a:	4013      	ands	r3, r2
 801537c:	d1f1      	bne.n	8015362 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2204      	movs	r2, #4
 8015384:	4013      	ands	r3, r2
 8015386:	d100      	bne.n	801538a <HAL_RCC_OscConfig+0x44a>
 8015388:	e0ae      	b.n	80154e8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801538a:	2023      	movs	r0, #35	@ 0x23
 801538c:	183b      	adds	r3, r7, r0
 801538e:	2200      	movs	r2, #0
 8015390:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015392:	4b8d      	ldr	r3, [pc, #564]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015396:	2380      	movs	r3, #128	@ 0x80
 8015398:	055b      	lsls	r3, r3, #21
 801539a:	4013      	ands	r3, r2
 801539c:	d109      	bne.n	80153b2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801539e:	4b8a      	ldr	r3, [pc, #552]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80153a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153a2:	4b89      	ldr	r3, [pc, #548]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80153a4:	2180      	movs	r1, #128	@ 0x80
 80153a6:	0549      	lsls	r1, r1, #21
 80153a8:	430a      	orrs	r2, r1
 80153aa:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80153ac:	183b      	adds	r3, r7, r0
 80153ae:	2201      	movs	r2, #1
 80153b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80153b2:	4b88      	ldr	r3, [pc, #544]	@ (80155d4 <HAL_RCC_OscConfig+0x694>)
 80153b4:	681a      	ldr	r2, [r3, #0]
 80153b6:	2380      	movs	r3, #128	@ 0x80
 80153b8:	005b      	lsls	r3, r3, #1
 80153ba:	4013      	ands	r3, r2
 80153bc:	d11a      	bne.n	80153f4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80153be:	4b85      	ldr	r3, [pc, #532]	@ (80155d4 <HAL_RCC_OscConfig+0x694>)
 80153c0:	681a      	ldr	r2, [r3, #0]
 80153c2:	4b84      	ldr	r3, [pc, #528]	@ (80155d4 <HAL_RCC_OscConfig+0x694>)
 80153c4:	2180      	movs	r1, #128	@ 0x80
 80153c6:	0049      	lsls	r1, r1, #1
 80153c8:	430a      	orrs	r2, r1
 80153ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80153cc:	f7f9 fc88 	bl	800ece0 <HAL_GetTick>
 80153d0:	0003      	movs	r3, r0
 80153d2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80153d4:	e008      	b.n	80153e8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80153d6:	f7f9 fc83 	bl	800ece0 <HAL_GetTick>
 80153da:	0002      	movs	r2, r0
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	2b64      	cmp	r3, #100	@ 0x64
 80153e2:	d901      	bls.n	80153e8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80153e4:	2303      	movs	r3, #3
 80153e6:	e174      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80153e8:	4b7a      	ldr	r3, [pc, #488]	@ (80155d4 <HAL_RCC_OscConfig+0x694>)
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	2380      	movs	r3, #128	@ 0x80
 80153ee:	005b      	lsls	r3, r3, #1
 80153f0:	4013      	ands	r3, r2
 80153f2:	d0f0      	beq.n	80153d6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	689a      	ldr	r2, [r3, #8]
 80153f8:	2380      	movs	r3, #128	@ 0x80
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d107      	bne.n	8015410 <HAL_RCC_OscConfig+0x4d0>
 8015400:	4b71      	ldr	r3, [pc, #452]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015402:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015404:	4b70      	ldr	r3, [pc, #448]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015406:	2180      	movs	r1, #128	@ 0x80
 8015408:	0049      	lsls	r1, r1, #1
 801540a:	430a      	orrs	r2, r1
 801540c:	651a      	str	r2, [r3, #80]	@ 0x50
 801540e:	e031      	b.n	8015474 <HAL_RCC_OscConfig+0x534>
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	689b      	ldr	r3, [r3, #8]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10c      	bne.n	8015432 <HAL_RCC_OscConfig+0x4f2>
 8015418:	4b6b      	ldr	r3, [pc, #428]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801541a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801541c:	4b6a      	ldr	r3, [pc, #424]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801541e:	496c      	ldr	r1, [pc, #432]	@ (80155d0 <HAL_RCC_OscConfig+0x690>)
 8015420:	400a      	ands	r2, r1
 8015422:	651a      	str	r2, [r3, #80]	@ 0x50
 8015424:	4b68      	ldr	r3, [pc, #416]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015428:	4b67      	ldr	r3, [pc, #412]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801542a:	496b      	ldr	r1, [pc, #428]	@ (80155d8 <HAL_RCC_OscConfig+0x698>)
 801542c:	400a      	ands	r2, r1
 801542e:	651a      	str	r2, [r3, #80]	@ 0x50
 8015430:	e020      	b.n	8015474 <HAL_RCC_OscConfig+0x534>
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	689a      	ldr	r2, [r3, #8]
 8015436:	23a0      	movs	r3, #160	@ 0xa0
 8015438:	00db      	lsls	r3, r3, #3
 801543a:	429a      	cmp	r2, r3
 801543c:	d10e      	bne.n	801545c <HAL_RCC_OscConfig+0x51c>
 801543e:	4b62      	ldr	r3, [pc, #392]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015442:	4b61      	ldr	r3, [pc, #388]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015444:	2180      	movs	r1, #128	@ 0x80
 8015446:	00c9      	lsls	r1, r1, #3
 8015448:	430a      	orrs	r2, r1
 801544a:	651a      	str	r2, [r3, #80]	@ 0x50
 801544c:	4b5e      	ldr	r3, [pc, #376]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801544e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015450:	4b5d      	ldr	r3, [pc, #372]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015452:	2180      	movs	r1, #128	@ 0x80
 8015454:	0049      	lsls	r1, r1, #1
 8015456:	430a      	orrs	r2, r1
 8015458:	651a      	str	r2, [r3, #80]	@ 0x50
 801545a:	e00b      	b.n	8015474 <HAL_RCC_OscConfig+0x534>
 801545c:	4b5a      	ldr	r3, [pc, #360]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801545e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015460:	4b59      	ldr	r3, [pc, #356]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015462:	495b      	ldr	r1, [pc, #364]	@ (80155d0 <HAL_RCC_OscConfig+0x690>)
 8015464:	400a      	ands	r2, r1
 8015466:	651a      	str	r2, [r3, #80]	@ 0x50
 8015468:	4b57      	ldr	r3, [pc, #348]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801546a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801546c:	4b56      	ldr	r3, [pc, #344]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801546e:	495a      	ldr	r1, [pc, #360]	@ (80155d8 <HAL_RCC_OscConfig+0x698>)
 8015470:	400a      	ands	r2, r1
 8015472:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	689b      	ldr	r3, [r3, #8]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d015      	beq.n	80154a8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801547c:	f7f9 fc30 	bl	800ece0 <HAL_GetTick>
 8015480:	0003      	movs	r3, r0
 8015482:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015484:	e009      	b.n	801549a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015486:	f7f9 fc2b 	bl	800ece0 <HAL_GetTick>
 801548a:	0002      	movs	r2, r0
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	1ad3      	subs	r3, r2, r3
 8015490:	4a52      	ldr	r2, [pc, #328]	@ (80155dc <HAL_RCC_OscConfig+0x69c>)
 8015492:	4293      	cmp	r3, r2
 8015494:	d901      	bls.n	801549a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015496:	2303      	movs	r3, #3
 8015498:	e11b      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801549a:	4b4b      	ldr	r3, [pc, #300]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801549c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801549e:	2380      	movs	r3, #128	@ 0x80
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	4013      	ands	r3, r2
 80154a4:	d0ef      	beq.n	8015486 <HAL_RCC_OscConfig+0x546>
 80154a6:	e014      	b.n	80154d2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80154a8:	f7f9 fc1a 	bl	800ece0 <HAL_GetTick>
 80154ac:	0003      	movs	r3, r0
 80154ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80154b0:	e009      	b.n	80154c6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80154b2:	f7f9 fc15 	bl	800ece0 <HAL_GetTick>
 80154b6:	0002      	movs	r2, r0
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	1ad3      	subs	r3, r2, r3
 80154bc:	4a47      	ldr	r2, [pc, #284]	@ (80155dc <HAL_RCC_OscConfig+0x69c>)
 80154be:	4293      	cmp	r3, r2
 80154c0:	d901      	bls.n	80154c6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80154c2:	2303      	movs	r3, #3
 80154c4:	e105      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80154c6:	4b40      	ldr	r3, [pc, #256]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80154c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154ca:	2380      	movs	r3, #128	@ 0x80
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	4013      	ands	r3, r2
 80154d0:	d1ef      	bne.n	80154b2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80154d2:	2323      	movs	r3, #35	@ 0x23
 80154d4:	18fb      	adds	r3, r7, r3
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	2b01      	cmp	r3, #1
 80154da:	d105      	bne.n	80154e8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80154dc:	4b3a      	ldr	r3, [pc, #232]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80154de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80154e0:	4b39      	ldr	r3, [pc, #228]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80154e2:	493f      	ldr	r1, [pc, #252]	@ (80155e0 <HAL_RCC_OscConfig+0x6a0>)
 80154e4:	400a      	ands	r2, r1
 80154e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	2220      	movs	r2, #32
 80154ee:	4013      	ands	r3, r2
 80154f0:	d049      	beq.n	8015586 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	699b      	ldr	r3, [r3, #24]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d026      	beq.n	8015548 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80154fa:	4b33      	ldr	r3, [pc, #204]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80154fc:	689a      	ldr	r2, [r3, #8]
 80154fe:	4b32      	ldr	r3, [pc, #200]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015500:	2101      	movs	r1, #1
 8015502:	430a      	orrs	r2, r1
 8015504:	609a      	str	r2, [r3, #8]
 8015506:	4b30      	ldr	r3, [pc, #192]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 8015508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801550a:	4b2f      	ldr	r3, [pc, #188]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801550c:	2101      	movs	r1, #1
 801550e:	430a      	orrs	r2, r1
 8015510:	635a      	str	r2, [r3, #52]	@ 0x34
 8015512:	4b34      	ldr	r3, [pc, #208]	@ (80155e4 <HAL_RCC_OscConfig+0x6a4>)
 8015514:	6a1a      	ldr	r2, [r3, #32]
 8015516:	4b33      	ldr	r3, [pc, #204]	@ (80155e4 <HAL_RCC_OscConfig+0x6a4>)
 8015518:	2180      	movs	r1, #128	@ 0x80
 801551a:	0189      	lsls	r1, r1, #6
 801551c:	430a      	orrs	r2, r1
 801551e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015520:	f7f9 fbde 	bl	800ece0 <HAL_GetTick>
 8015524:	0003      	movs	r3, r0
 8015526:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015528:	e008      	b.n	801553c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801552a:	f7f9 fbd9 	bl	800ece0 <HAL_GetTick>
 801552e:	0002      	movs	r2, r0
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	1ad3      	subs	r3, r2, r3
 8015534:	2b02      	cmp	r3, #2
 8015536:	d901      	bls.n	801553c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8015538:	2303      	movs	r3, #3
 801553a:	e0ca      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801553c:	4b22      	ldr	r3, [pc, #136]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801553e:	689b      	ldr	r3, [r3, #8]
 8015540:	2202      	movs	r2, #2
 8015542:	4013      	ands	r3, r2
 8015544:	d0f1      	beq.n	801552a <HAL_RCC_OscConfig+0x5ea>
 8015546:	e01e      	b.n	8015586 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8015548:	4b1f      	ldr	r3, [pc, #124]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801554a:	689a      	ldr	r2, [r3, #8]
 801554c:	4b1e      	ldr	r3, [pc, #120]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801554e:	2101      	movs	r1, #1
 8015550:	438a      	bics	r2, r1
 8015552:	609a      	str	r2, [r3, #8]
 8015554:	4b23      	ldr	r3, [pc, #140]	@ (80155e4 <HAL_RCC_OscConfig+0x6a4>)
 8015556:	6a1a      	ldr	r2, [r3, #32]
 8015558:	4b22      	ldr	r3, [pc, #136]	@ (80155e4 <HAL_RCC_OscConfig+0x6a4>)
 801555a:	4923      	ldr	r1, [pc, #140]	@ (80155e8 <HAL_RCC_OscConfig+0x6a8>)
 801555c:	400a      	ands	r2, r1
 801555e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015560:	f7f9 fbbe 	bl	800ece0 <HAL_GetTick>
 8015564:	0003      	movs	r3, r0
 8015566:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015568:	e008      	b.n	801557c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801556a:	f7f9 fbb9 	bl	800ece0 <HAL_GetTick>
 801556e:	0002      	movs	r2, r0
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	1ad3      	subs	r3, r2, r3
 8015574:	2b02      	cmp	r3, #2
 8015576:	d901      	bls.n	801557c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015578:	2303      	movs	r3, #3
 801557a:	e0aa      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801557c:	4b12      	ldr	r3, [pc, #72]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 801557e:	689b      	ldr	r3, [r3, #8]
 8015580:	2202      	movs	r2, #2
 8015582:	4013      	ands	r3, r2
 8015584:	d1f1      	bne.n	801556a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801558a:	2b00      	cmp	r3, #0
 801558c:	d100      	bne.n	8015590 <HAL_RCC_OscConfig+0x650>
 801558e:	e09f      	b.n	80156d0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	2b0c      	cmp	r3, #12
 8015594:	d100      	bne.n	8015598 <HAL_RCC_OscConfig+0x658>
 8015596:	e078      	b.n	801568a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801559c:	2b02      	cmp	r3, #2
 801559e:	d159      	bne.n	8015654 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80155a0:	4b09      	ldr	r3, [pc, #36]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	4b08      	ldr	r3, [pc, #32]	@ (80155c8 <HAL_RCC_OscConfig+0x688>)
 80155a6:	4911      	ldr	r1, [pc, #68]	@ (80155ec <HAL_RCC_OscConfig+0x6ac>)
 80155a8:	400a      	ands	r2, r1
 80155aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155ac:	f7f9 fb98 	bl	800ece0 <HAL_GetTick>
 80155b0:	0003      	movs	r3, r0
 80155b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80155b4:	e01c      	b.n	80155f0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80155b6:	f7f9 fb93 	bl	800ece0 <HAL_GetTick>
 80155ba:	0002      	movs	r2, r0
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	2b02      	cmp	r3, #2
 80155c2:	d915      	bls.n	80155f0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80155c4:	2303      	movs	r3, #3
 80155c6:	e084      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
 80155c8:	40021000 	.word	0x40021000
 80155cc:	ffff1fff 	.word	0xffff1fff
 80155d0:	fffffeff 	.word	0xfffffeff
 80155d4:	40007000 	.word	0x40007000
 80155d8:	fffffbff 	.word	0xfffffbff
 80155dc:	00001388 	.word	0x00001388
 80155e0:	efffffff 	.word	0xefffffff
 80155e4:	40010000 	.word	0x40010000
 80155e8:	ffffdfff 	.word	0xffffdfff
 80155ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80155f0:	4b3a      	ldr	r3, [pc, #232]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	2380      	movs	r3, #128	@ 0x80
 80155f6:	049b      	lsls	r3, r3, #18
 80155f8:	4013      	ands	r3, r2
 80155fa:	d1dc      	bne.n	80155b6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80155fc:	4b37      	ldr	r3, [pc, #220]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	4a37      	ldr	r2, [pc, #220]	@ (80156e0 <HAL_RCC_OscConfig+0x7a0>)
 8015602:	4013      	ands	r3, r2
 8015604:	0019      	movs	r1, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801560e:	431a      	orrs	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015614:	431a      	orrs	r2, r3
 8015616:	4b31      	ldr	r3, [pc, #196]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 8015618:	430a      	orrs	r2, r1
 801561a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801561c:	4b2f      	ldr	r3, [pc, #188]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 801561e:	681a      	ldr	r2, [r3, #0]
 8015620:	4b2e      	ldr	r3, [pc, #184]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 8015622:	2180      	movs	r1, #128	@ 0x80
 8015624:	0449      	lsls	r1, r1, #17
 8015626:	430a      	orrs	r2, r1
 8015628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801562a:	f7f9 fb59 	bl	800ece0 <HAL_GetTick>
 801562e:	0003      	movs	r3, r0
 8015630:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015632:	e008      	b.n	8015646 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015634:	f7f9 fb54 	bl	800ece0 <HAL_GetTick>
 8015638:	0002      	movs	r2, r0
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	1ad3      	subs	r3, r2, r3
 801563e:	2b02      	cmp	r3, #2
 8015640:	d901      	bls.n	8015646 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015642:	2303      	movs	r3, #3
 8015644:	e045      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015646:	4b25      	ldr	r3, [pc, #148]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	2380      	movs	r3, #128	@ 0x80
 801564c:	049b      	lsls	r3, r3, #18
 801564e:	4013      	ands	r3, r2
 8015650:	d0f0      	beq.n	8015634 <HAL_RCC_OscConfig+0x6f4>
 8015652:	e03d      	b.n	80156d0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015654:	4b21      	ldr	r3, [pc, #132]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	4b20      	ldr	r3, [pc, #128]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 801565a:	4922      	ldr	r1, [pc, #136]	@ (80156e4 <HAL_RCC_OscConfig+0x7a4>)
 801565c:	400a      	ands	r2, r1
 801565e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015660:	f7f9 fb3e 	bl	800ece0 <HAL_GetTick>
 8015664:	0003      	movs	r3, r0
 8015666:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015668:	e008      	b.n	801567c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801566a:	f7f9 fb39 	bl	800ece0 <HAL_GetTick>
 801566e:	0002      	movs	r2, r0
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	1ad3      	subs	r3, r2, r3
 8015674:	2b02      	cmp	r3, #2
 8015676:	d901      	bls.n	801567c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015678:	2303      	movs	r3, #3
 801567a:	e02a      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801567c:	4b17      	ldr	r3, [pc, #92]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	2380      	movs	r3, #128	@ 0x80
 8015682:	049b      	lsls	r3, r3, #18
 8015684:	4013      	ands	r3, r2
 8015686:	d1f0      	bne.n	801566a <HAL_RCC_OscConfig+0x72a>
 8015688:	e022      	b.n	80156d0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801568e:	2b01      	cmp	r3, #1
 8015690:	d101      	bne.n	8015696 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015692:	2301      	movs	r3, #1
 8015694:	e01d      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015696:	4b11      	ldr	r3, [pc, #68]	@ (80156dc <HAL_RCC_OscConfig+0x79c>)
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801569c:	69ba      	ldr	r2, [r7, #24]
 801569e:	2380      	movs	r3, #128	@ 0x80
 80156a0:	025b      	lsls	r3, r3, #9
 80156a2:	401a      	ands	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156a8:	429a      	cmp	r2, r3
 80156aa:	d10f      	bne.n	80156cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80156ac:	69ba      	ldr	r2, [r7, #24]
 80156ae:	23f0      	movs	r3, #240	@ 0xf0
 80156b0:	039b      	lsls	r3, r3, #14
 80156b2:	401a      	ands	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d107      	bne.n	80156cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80156bc:	69ba      	ldr	r2, [r7, #24]
 80156be:	23c0      	movs	r3, #192	@ 0xc0
 80156c0:	041b      	lsls	r3, r3, #16
 80156c2:	401a      	ands	r2, r3
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d001      	beq.n	80156d0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80156cc:	2301      	movs	r3, #1
 80156ce:	e000      	b.n	80156d2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80156d0:	2300      	movs	r3, #0
}
 80156d2:	0018      	movs	r0, r3
 80156d4:	46bd      	mov	sp, r7
 80156d6:	b00a      	add	sp, #40	@ 0x28
 80156d8:	bdb0      	pop	{r4, r5, r7, pc}
 80156da:	46c0      	nop			@ (mov r8, r8)
 80156dc:	40021000 	.word	0x40021000
 80156e0:	ff02ffff 	.word	0xff02ffff
 80156e4:	feffffff 	.word	0xfeffffff

080156e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80156e8:	b5b0      	push	{r4, r5, r7, lr}
 80156ea:	b084      	sub	sp, #16
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d101      	bne.n	80156fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80156f8:	2301      	movs	r3, #1
 80156fa:	e128      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80156fc:	4b96      	ldr	r3, [pc, #600]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2201      	movs	r2, #1
 8015702:	4013      	ands	r3, r2
 8015704:	683a      	ldr	r2, [r7, #0]
 8015706:	429a      	cmp	r2, r3
 8015708:	d91e      	bls.n	8015748 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801570a:	4b93      	ldr	r3, [pc, #588]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	2201      	movs	r2, #1
 8015710:	4393      	bics	r3, r2
 8015712:	0019      	movs	r1, r3
 8015714:	4b90      	ldr	r3, [pc, #576]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	430a      	orrs	r2, r1
 801571a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801571c:	f7f9 fae0 	bl	800ece0 <HAL_GetTick>
 8015720:	0003      	movs	r3, r0
 8015722:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015724:	e009      	b.n	801573a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015726:	f7f9 fadb 	bl	800ece0 <HAL_GetTick>
 801572a:	0002      	movs	r2, r0
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	1ad3      	subs	r3, r2, r3
 8015730:	4a8a      	ldr	r2, [pc, #552]	@ (801595c <HAL_RCC_ClockConfig+0x274>)
 8015732:	4293      	cmp	r3, r2
 8015734:	d901      	bls.n	801573a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8015736:	2303      	movs	r3, #3
 8015738:	e109      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801573a:	4b87      	ldr	r3, [pc, #540]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2201      	movs	r2, #1
 8015740:	4013      	ands	r3, r2
 8015742:	683a      	ldr	r2, [r7, #0]
 8015744:	429a      	cmp	r2, r3
 8015746:	d1ee      	bne.n	8015726 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	2202      	movs	r2, #2
 801574e:	4013      	ands	r3, r2
 8015750:	d009      	beq.n	8015766 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015752:	4b83      	ldr	r3, [pc, #524]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 8015754:	68db      	ldr	r3, [r3, #12]
 8015756:	22f0      	movs	r2, #240	@ 0xf0
 8015758:	4393      	bics	r3, r2
 801575a:	0019      	movs	r1, r3
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	689a      	ldr	r2, [r3, #8]
 8015760:	4b7f      	ldr	r3, [pc, #508]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 8015762:	430a      	orrs	r2, r1
 8015764:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	2201      	movs	r2, #1
 801576c:	4013      	ands	r3, r2
 801576e:	d100      	bne.n	8015772 <HAL_RCC_ClockConfig+0x8a>
 8015770:	e089      	b.n	8015886 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	2b02      	cmp	r3, #2
 8015778:	d107      	bne.n	801578a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801577a:	4b79      	ldr	r3, [pc, #484]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	2380      	movs	r3, #128	@ 0x80
 8015780:	029b      	lsls	r3, r3, #10
 8015782:	4013      	ands	r3, r2
 8015784:	d120      	bne.n	80157c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015786:	2301      	movs	r3, #1
 8015788:	e0e1      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	2b03      	cmp	r3, #3
 8015790:	d107      	bne.n	80157a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015792:	4b73      	ldr	r3, [pc, #460]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	2380      	movs	r3, #128	@ 0x80
 8015798:	049b      	lsls	r3, r3, #18
 801579a:	4013      	ands	r3, r2
 801579c:	d114      	bne.n	80157c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801579e:	2301      	movs	r3, #1
 80157a0:	e0d5      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	685b      	ldr	r3, [r3, #4]
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d106      	bne.n	80157b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80157aa:	4b6d      	ldr	r3, [pc, #436]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2204      	movs	r2, #4
 80157b0:	4013      	ands	r3, r2
 80157b2:	d109      	bne.n	80157c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80157b4:	2301      	movs	r3, #1
 80157b6:	e0ca      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80157b8:	4b69      	ldr	r3, [pc, #420]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	2380      	movs	r3, #128	@ 0x80
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	4013      	ands	r3, r2
 80157c2:	d101      	bne.n	80157c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80157c4:	2301      	movs	r3, #1
 80157c6:	e0c2      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80157c8:	4b65      	ldr	r3, [pc, #404]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	2203      	movs	r2, #3
 80157ce:	4393      	bics	r3, r2
 80157d0:	0019      	movs	r1, r3
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	685a      	ldr	r2, [r3, #4]
 80157d6:	4b62      	ldr	r3, [pc, #392]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80157d8:	430a      	orrs	r2, r1
 80157da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80157dc:	f7f9 fa80 	bl	800ece0 <HAL_GetTick>
 80157e0:	0003      	movs	r3, r0
 80157e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d111      	bne.n	8015810 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80157ec:	e009      	b.n	8015802 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157ee:	f7f9 fa77 	bl	800ece0 <HAL_GetTick>
 80157f2:	0002      	movs	r2, r0
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	1ad3      	subs	r3, r2, r3
 80157f8:	4a58      	ldr	r2, [pc, #352]	@ (801595c <HAL_RCC_ClockConfig+0x274>)
 80157fa:	4293      	cmp	r3, r2
 80157fc:	d901      	bls.n	8015802 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80157fe:	2303      	movs	r3, #3
 8015800:	e0a5      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015802:	4b57      	ldr	r3, [pc, #348]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 8015804:	68db      	ldr	r3, [r3, #12]
 8015806:	220c      	movs	r2, #12
 8015808:	4013      	ands	r3, r2
 801580a:	2b08      	cmp	r3, #8
 801580c:	d1ef      	bne.n	80157ee <HAL_RCC_ClockConfig+0x106>
 801580e:	e03a      	b.n	8015886 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	2b03      	cmp	r3, #3
 8015816:	d111      	bne.n	801583c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015818:	e009      	b.n	801582e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801581a:	f7f9 fa61 	bl	800ece0 <HAL_GetTick>
 801581e:	0002      	movs	r2, r0
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	1ad3      	subs	r3, r2, r3
 8015824:	4a4d      	ldr	r2, [pc, #308]	@ (801595c <HAL_RCC_ClockConfig+0x274>)
 8015826:	4293      	cmp	r3, r2
 8015828:	d901      	bls.n	801582e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801582a:	2303      	movs	r3, #3
 801582c:	e08f      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801582e:	4b4c      	ldr	r3, [pc, #304]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	220c      	movs	r2, #12
 8015834:	4013      	ands	r3, r2
 8015836:	2b0c      	cmp	r3, #12
 8015838:	d1ef      	bne.n	801581a <HAL_RCC_ClockConfig+0x132>
 801583a:	e024      	b.n	8015886 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	2b01      	cmp	r3, #1
 8015842:	d11b      	bne.n	801587c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015844:	e009      	b.n	801585a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015846:	f7f9 fa4b 	bl	800ece0 <HAL_GetTick>
 801584a:	0002      	movs	r2, r0
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	1ad3      	subs	r3, r2, r3
 8015850:	4a42      	ldr	r2, [pc, #264]	@ (801595c <HAL_RCC_ClockConfig+0x274>)
 8015852:	4293      	cmp	r3, r2
 8015854:	d901      	bls.n	801585a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015856:	2303      	movs	r3, #3
 8015858:	e079      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801585a:	4b41      	ldr	r3, [pc, #260]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 801585c:	68db      	ldr	r3, [r3, #12]
 801585e:	220c      	movs	r2, #12
 8015860:	4013      	ands	r3, r2
 8015862:	2b04      	cmp	r3, #4
 8015864:	d1ef      	bne.n	8015846 <HAL_RCC_ClockConfig+0x15e>
 8015866:	e00e      	b.n	8015886 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015868:	f7f9 fa3a 	bl	800ece0 <HAL_GetTick>
 801586c:	0002      	movs	r2, r0
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	1ad3      	subs	r3, r2, r3
 8015872:	4a3a      	ldr	r2, [pc, #232]	@ (801595c <HAL_RCC_ClockConfig+0x274>)
 8015874:	4293      	cmp	r3, r2
 8015876:	d901      	bls.n	801587c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015878:	2303      	movs	r3, #3
 801587a:	e068      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801587c:	4b38      	ldr	r3, [pc, #224]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	220c      	movs	r2, #12
 8015882:	4013      	ands	r3, r2
 8015884:	d1f0      	bne.n	8015868 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015886:	4b34      	ldr	r3, [pc, #208]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	2201      	movs	r2, #1
 801588c:	4013      	ands	r3, r2
 801588e:	683a      	ldr	r2, [r7, #0]
 8015890:	429a      	cmp	r2, r3
 8015892:	d21e      	bcs.n	80158d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015894:	4b30      	ldr	r3, [pc, #192]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	2201      	movs	r2, #1
 801589a:	4393      	bics	r3, r2
 801589c:	0019      	movs	r1, r3
 801589e:	4b2e      	ldr	r3, [pc, #184]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 80158a0:	683a      	ldr	r2, [r7, #0]
 80158a2:	430a      	orrs	r2, r1
 80158a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80158a6:	f7f9 fa1b 	bl	800ece0 <HAL_GetTick>
 80158aa:	0003      	movs	r3, r0
 80158ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80158ae:	e009      	b.n	80158c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158b0:	f7f9 fa16 	bl	800ece0 <HAL_GetTick>
 80158b4:	0002      	movs	r2, r0
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	1ad3      	subs	r3, r2, r3
 80158ba:	4a28      	ldr	r2, [pc, #160]	@ (801595c <HAL_RCC_ClockConfig+0x274>)
 80158bc:	4293      	cmp	r3, r2
 80158be:	d901      	bls.n	80158c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80158c0:	2303      	movs	r3, #3
 80158c2:	e044      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80158c4:	4b24      	ldr	r3, [pc, #144]	@ (8015958 <HAL_RCC_ClockConfig+0x270>)
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2201      	movs	r2, #1
 80158ca:	4013      	ands	r3, r2
 80158cc:	683a      	ldr	r2, [r7, #0]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d1ee      	bne.n	80158b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2204      	movs	r2, #4
 80158d8:	4013      	ands	r3, r2
 80158da:	d009      	beq.n	80158f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80158dc:	4b20      	ldr	r3, [pc, #128]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	4a20      	ldr	r2, [pc, #128]	@ (8015964 <HAL_RCC_ClockConfig+0x27c>)
 80158e2:	4013      	ands	r3, r2
 80158e4:	0019      	movs	r1, r3
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	68da      	ldr	r2, [r3, #12]
 80158ea:	4b1d      	ldr	r3, [pc, #116]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80158ec:	430a      	orrs	r2, r1
 80158ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	2208      	movs	r2, #8
 80158f6:	4013      	ands	r3, r2
 80158f8:	d00a      	beq.n	8015910 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80158fa:	4b19      	ldr	r3, [pc, #100]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	4a1a      	ldr	r2, [pc, #104]	@ (8015968 <HAL_RCC_ClockConfig+0x280>)
 8015900:	4013      	ands	r3, r2
 8015902:	0019      	movs	r1, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	691b      	ldr	r3, [r3, #16]
 8015908:	00da      	lsls	r2, r3, #3
 801590a:	4b15      	ldr	r3, [pc, #84]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 801590c:	430a      	orrs	r2, r1
 801590e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015910:	f000 f832 	bl	8015978 <HAL_RCC_GetSysClockFreq>
 8015914:	0001      	movs	r1, r0
 8015916:	4b12      	ldr	r3, [pc, #72]	@ (8015960 <HAL_RCC_ClockConfig+0x278>)
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	091b      	lsrs	r3, r3, #4
 801591c:	220f      	movs	r2, #15
 801591e:	4013      	ands	r3, r2
 8015920:	4a12      	ldr	r2, [pc, #72]	@ (801596c <HAL_RCC_ClockConfig+0x284>)
 8015922:	5cd3      	ldrb	r3, [r2, r3]
 8015924:	000a      	movs	r2, r1
 8015926:	40da      	lsrs	r2, r3
 8015928:	4b11      	ldr	r3, [pc, #68]	@ (8015970 <HAL_RCC_ClockConfig+0x288>)
 801592a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801592c:	4b11      	ldr	r3, [pc, #68]	@ (8015974 <HAL_RCC_ClockConfig+0x28c>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	250b      	movs	r5, #11
 8015932:	197c      	adds	r4, r7, r5
 8015934:	0018      	movs	r0, r3
 8015936:	f7f9 f98d 	bl	800ec54 <HAL_InitTick>
 801593a:	0003      	movs	r3, r0
 801593c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801593e:	197b      	adds	r3, r7, r5
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d002      	beq.n	801594c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015946:	197b      	adds	r3, r7, r5
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	e000      	b.n	801594e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801594c:	2300      	movs	r3, #0
}
 801594e:	0018      	movs	r0, r3
 8015950:	46bd      	mov	sp, r7
 8015952:	b004      	add	sp, #16
 8015954:	bdb0      	pop	{r4, r5, r7, pc}
 8015956:	46c0      	nop			@ (mov r8, r8)
 8015958:	40022000 	.word	0x40022000
 801595c:	00001388 	.word	0x00001388
 8015960:	40021000 	.word	0x40021000
 8015964:	fffff8ff 	.word	0xfffff8ff
 8015968:	ffffc7ff 	.word	0xffffc7ff
 801596c:	08025604 	.word	0x08025604
 8015970:	200000cc 	.word	0x200000cc
 8015974:	200000dc 	.word	0x200000dc

08015978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015978:	b5b0      	push	{r4, r5, r7, lr}
 801597a:	b08e      	sub	sp, #56	@ 0x38
 801597c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801597e:	4b4c      	ldr	r3, [pc, #304]	@ (8015ab0 <HAL_RCC_GetSysClockFreq+0x138>)
 8015980:	68db      	ldr	r3, [r3, #12]
 8015982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015986:	230c      	movs	r3, #12
 8015988:	4013      	ands	r3, r2
 801598a:	2b0c      	cmp	r3, #12
 801598c:	d014      	beq.n	80159b8 <HAL_RCC_GetSysClockFreq+0x40>
 801598e:	d900      	bls.n	8015992 <HAL_RCC_GetSysClockFreq+0x1a>
 8015990:	e07b      	b.n	8015a8a <HAL_RCC_GetSysClockFreq+0x112>
 8015992:	2b04      	cmp	r3, #4
 8015994:	d002      	beq.n	801599c <HAL_RCC_GetSysClockFreq+0x24>
 8015996:	2b08      	cmp	r3, #8
 8015998:	d00b      	beq.n	80159b2 <HAL_RCC_GetSysClockFreq+0x3a>
 801599a:	e076      	b.n	8015a8a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801599c:	4b44      	ldr	r3, [pc, #272]	@ (8015ab0 <HAL_RCC_GetSysClockFreq+0x138>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2210      	movs	r2, #16
 80159a2:	4013      	ands	r3, r2
 80159a4:	d002      	beq.n	80159ac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80159a6:	4b43      	ldr	r3, [pc, #268]	@ (8015ab4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80159a8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80159aa:	e07c      	b.n	8015aa6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80159ac:	4b42      	ldr	r3, [pc, #264]	@ (8015ab8 <HAL_RCC_GetSysClockFreq+0x140>)
 80159ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80159b0:	e079      	b.n	8015aa6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80159b2:	4b42      	ldr	r3, [pc, #264]	@ (8015abc <HAL_RCC_GetSysClockFreq+0x144>)
 80159b4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80159b6:	e076      	b.n	8015aa6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80159b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ba:	0c9a      	lsrs	r2, r3, #18
 80159bc:	230f      	movs	r3, #15
 80159be:	401a      	ands	r2, r3
 80159c0:	4b3f      	ldr	r3, [pc, #252]	@ (8015ac0 <HAL_RCC_GetSysClockFreq+0x148>)
 80159c2:	5c9b      	ldrb	r3, [r3, r2]
 80159c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80159c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159c8:	0d9a      	lsrs	r2, r3, #22
 80159ca:	2303      	movs	r3, #3
 80159cc:	4013      	ands	r3, r2
 80159ce:	3301      	adds	r3, #1
 80159d0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80159d2:	4b37      	ldr	r3, [pc, #220]	@ (8015ab0 <HAL_RCC_GetSysClockFreq+0x138>)
 80159d4:	68da      	ldr	r2, [r3, #12]
 80159d6:	2380      	movs	r3, #128	@ 0x80
 80159d8:	025b      	lsls	r3, r3, #9
 80159da:	4013      	ands	r3, r2
 80159dc:	d01a      	beq.n	8015a14 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80159de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e0:	61bb      	str	r3, [r7, #24]
 80159e2:	2300      	movs	r3, #0
 80159e4:	61fb      	str	r3, [r7, #28]
 80159e6:	4a35      	ldr	r2, [pc, #212]	@ (8015abc <HAL_RCC_GetSysClockFreq+0x144>)
 80159e8:	2300      	movs	r3, #0
 80159ea:	69b8      	ldr	r0, [r7, #24]
 80159ec:	69f9      	ldr	r1, [r7, #28]
 80159ee:	f7ea fde7 	bl	80005c0 <__aeabi_lmul>
 80159f2:	0002      	movs	r2, r0
 80159f4:	000b      	movs	r3, r1
 80159f6:	0010      	movs	r0, r2
 80159f8:	0019      	movs	r1, r3
 80159fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fc:	613b      	str	r3, [r7, #16]
 80159fe:	2300      	movs	r3, #0
 8015a00:	617b      	str	r3, [r7, #20]
 8015a02:	693a      	ldr	r2, [r7, #16]
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	f7ea fdbb 	bl	8000580 <__aeabi_uldivmod>
 8015a0a:	0002      	movs	r2, r0
 8015a0c:	000b      	movs	r3, r1
 8015a0e:	0013      	movs	r3, r2
 8015a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8015a12:	e037      	b.n	8015a84 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015a14:	4b26      	ldr	r3, [pc, #152]	@ (8015ab0 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	2210      	movs	r2, #16
 8015a1a:	4013      	ands	r3, r2
 8015a1c:	d01a      	beq.n	8015a54 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a20:	60bb      	str	r3, [r7, #8]
 8015a22:	2300      	movs	r3, #0
 8015a24:	60fb      	str	r3, [r7, #12]
 8015a26:	4a23      	ldr	r2, [pc, #140]	@ (8015ab4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015a28:	2300      	movs	r3, #0
 8015a2a:	68b8      	ldr	r0, [r7, #8]
 8015a2c:	68f9      	ldr	r1, [r7, #12]
 8015a2e:	f7ea fdc7 	bl	80005c0 <__aeabi_lmul>
 8015a32:	0002      	movs	r2, r0
 8015a34:	000b      	movs	r3, r1
 8015a36:	0010      	movs	r0, r2
 8015a38:	0019      	movs	r1, r3
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a3c:	603b      	str	r3, [r7, #0]
 8015a3e:	2300      	movs	r3, #0
 8015a40:	607b      	str	r3, [r7, #4]
 8015a42:	683a      	ldr	r2, [r7, #0]
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f7ea fd9b 	bl	8000580 <__aeabi_uldivmod>
 8015a4a:	0002      	movs	r2, r0
 8015a4c:	000b      	movs	r3, r1
 8015a4e:	0013      	movs	r3, r2
 8015a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8015a52:	e017      	b.n	8015a84 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a56:	0018      	movs	r0, r3
 8015a58:	2300      	movs	r3, #0
 8015a5a:	0019      	movs	r1, r3
 8015a5c:	4a16      	ldr	r2, [pc, #88]	@ (8015ab8 <HAL_RCC_GetSysClockFreq+0x140>)
 8015a5e:	2300      	movs	r3, #0
 8015a60:	f7ea fdae 	bl	80005c0 <__aeabi_lmul>
 8015a64:	0002      	movs	r2, r0
 8015a66:	000b      	movs	r3, r1
 8015a68:	0010      	movs	r0, r2
 8015a6a:	0019      	movs	r1, r3
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a6e:	001c      	movs	r4, r3
 8015a70:	2300      	movs	r3, #0
 8015a72:	001d      	movs	r5, r3
 8015a74:	0022      	movs	r2, r4
 8015a76:	002b      	movs	r3, r5
 8015a78:	f7ea fd82 	bl	8000580 <__aeabi_uldivmod>
 8015a7c:	0002      	movs	r2, r0
 8015a7e:	000b      	movs	r3, r1
 8015a80:	0013      	movs	r3, r2
 8015a82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a86:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a88:	e00d      	b.n	8015aa6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015a8a:	4b09      	ldr	r3, [pc, #36]	@ (8015ab0 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a8c:	685b      	ldr	r3, [r3, #4]
 8015a8e:	0b5b      	lsrs	r3, r3, #13
 8015a90:	2207      	movs	r2, #7
 8015a92:	4013      	ands	r3, r2
 8015a94:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015a96:	6a3b      	ldr	r3, [r7, #32]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	2280      	movs	r2, #128	@ 0x80
 8015a9c:	0212      	lsls	r2, r2, #8
 8015a9e:	409a      	lsls	r2, r3
 8015aa0:	0013      	movs	r3, r2
 8015aa2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015aa4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015aa8:	0018      	movs	r0, r3
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	b00e      	add	sp, #56	@ 0x38
 8015aae:	bdb0      	pop	{r4, r5, r7, pc}
 8015ab0:	40021000 	.word	0x40021000
 8015ab4:	003d0900 	.word	0x003d0900
 8015ab8:	00f42400 	.word	0x00f42400
 8015abc:	007a1200 	.word	0x007a1200
 8015ac0:	0802561c 	.word	0x0802561c

08015ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015ac8:	4b02      	ldr	r3, [pc, #8]	@ (8015ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8015aca:	681b      	ldr	r3, [r3, #0]
}
 8015acc:	0018      	movs	r0, r3
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	46c0      	nop			@ (mov r8, r8)
 8015ad4:	200000cc 	.word	0x200000cc

08015ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015adc:	f7ff fff2 	bl	8015ac4 <HAL_RCC_GetHCLKFreq>
 8015ae0:	0001      	movs	r1, r0
 8015ae2:	4b06      	ldr	r3, [pc, #24]	@ (8015afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8015ae4:	68db      	ldr	r3, [r3, #12]
 8015ae6:	0a1b      	lsrs	r3, r3, #8
 8015ae8:	2207      	movs	r2, #7
 8015aea:	4013      	ands	r3, r2
 8015aec:	4a04      	ldr	r2, [pc, #16]	@ (8015b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015aee:	5cd3      	ldrb	r3, [r2, r3]
 8015af0:	40d9      	lsrs	r1, r3
 8015af2:	000b      	movs	r3, r1
}
 8015af4:	0018      	movs	r0, r3
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	46c0      	nop			@ (mov r8, r8)
 8015afc:	40021000 	.word	0x40021000
 8015b00:	08025614 	.word	0x08025614

08015b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015b08:	f7ff ffdc 	bl	8015ac4 <HAL_RCC_GetHCLKFreq>
 8015b0c:	0001      	movs	r1, r0
 8015b0e:	4b06      	ldr	r3, [pc, #24]	@ (8015b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015b10:	68db      	ldr	r3, [r3, #12]
 8015b12:	0adb      	lsrs	r3, r3, #11
 8015b14:	2207      	movs	r2, #7
 8015b16:	4013      	ands	r3, r2
 8015b18:	4a04      	ldr	r2, [pc, #16]	@ (8015b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8015b1a:	5cd3      	ldrb	r3, [r2, r3]
 8015b1c:	40d9      	lsrs	r1, r3
 8015b1e:	000b      	movs	r3, r1
}
 8015b20:	0018      	movs	r0, r3
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	46c0      	nop			@ (mov r8, r8)
 8015b28:	40021000 	.word	0x40021000
 8015b2c:	08025614 	.word	0x08025614

08015b30 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015b38:	2017      	movs	r0, #23
 8015b3a:	183b      	adds	r3, r7, r0
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	2220      	movs	r2, #32
 8015b46:	4013      	ands	r3, r2
 8015b48:	d100      	bne.n	8015b4c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015b4a:	e0c7      	b.n	8015cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015b4c:	4b9b      	ldr	r3, [pc, #620]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b50:	2380      	movs	r3, #128	@ 0x80
 8015b52:	055b      	lsls	r3, r3, #21
 8015b54:	4013      	ands	r3, r2
 8015b56:	d109      	bne.n	8015b6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015b58:	4b98      	ldr	r3, [pc, #608]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b5c:	4b97      	ldr	r3, [pc, #604]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b5e:	2180      	movs	r1, #128	@ 0x80
 8015b60:	0549      	lsls	r1, r1, #21
 8015b62:	430a      	orrs	r2, r1
 8015b64:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015b66:	183b      	adds	r3, r7, r0
 8015b68:	2201      	movs	r2, #1
 8015b6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b6c:	4b94      	ldr	r3, [pc, #592]	@ (8015dc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	2380      	movs	r3, #128	@ 0x80
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	4013      	ands	r3, r2
 8015b76:	d11a      	bne.n	8015bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015b78:	4b91      	ldr	r3, [pc, #580]	@ (8015dc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b7a:	681a      	ldr	r2, [r3, #0]
 8015b7c:	4b90      	ldr	r3, [pc, #576]	@ (8015dc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b7e:	2180      	movs	r1, #128	@ 0x80
 8015b80:	0049      	lsls	r1, r1, #1
 8015b82:	430a      	orrs	r2, r1
 8015b84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015b86:	f7f9 f8ab 	bl	800ece0 <HAL_GetTick>
 8015b8a:	0003      	movs	r3, r0
 8015b8c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b8e:	e008      	b.n	8015ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b90:	f7f9 f8a6 	bl	800ece0 <HAL_GetTick>
 8015b94:	0002      	movs	r2, r0
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	1ad3      	subs	r3, r2, r3
 8015b9a:	2b64      	cmp	r3, #100	@ 0x64
 8015b9c:	d901      	bls.n	8015ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015b9e:	2303      	movs	r3, #3
 8015ba0:	e107      	b.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015ba2:	4b87      	ldr	r3, [pc, #540]	@ (8015dc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	2380      	movs	r3, #128	@ 0x80
 8015ba8:	005b      	lsls	r3, r3, #1
 8015baa:	4013      	ands	r3, r2
 8015bac:	d0f0      	beq.n	8015b90 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015bae:	4b83      	ldr	r3, [pc, #524]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	23c0      	movs	r3, #192	@ 0xc0
 8015bb4:	039b      	lsls	r3, r3, #14
 8015bb6:	4013      	ands	r3, r2
 8015bb8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	685a      	ldr	r2, [r3, #4]
 8015bbe:	23c0      	movs	r3, #192	@ 0xc0
 8015bc0:	039b      	lsls	r3, r3, #14
 8015bc2:	4013      	ands	r3, r2
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d013      	beq.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	685a      	ldr	r2, [r3, #4]
 8015bce:	23c0      	movs	r3, #192	@ 0xc0
 8015bd0:	029b      	lsls	r3, r3, #10
 8015bd2:	401a      	ands	r2, r3
 8015bd4:	23c0      	movs	r3, #192	@ 0xc0
 8015bd6:	029b      	lsls	r3, r3, #10
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d10a      	bne.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015bdc:	4b77      	ldr	r3, [pc, #476]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	2380      	movs	r3, #128	@ 0x80
 8015be2:	029b      	lsls	r3, r3, #10
 8015be4:	401a      	ands	r2, r3
 8015be6:	2380      	movs	r3, #128	@ 0x80
 8015be8:	029b      	lsls	r3, r3, #10
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d101      	bne.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015bee:	2301      	movs	r3, #1
 8015bf0:	e0df      	b.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015bf2:	4b72      	ldr	r3, [pc, #456]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bf6:	23c0      	movs	r3, #192	@ 0xc0
 8015bf8:	029b      	lsls	r3, r3, #10
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d03b      	beq.n	8015c7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	685a      	ldr	r2, [r3, #4]
 8015c08:	23c0      	movs	r3, #192	@ 0xc0
 8015c0a:	029b      	lsls	r3, r3, #10
 8015c0c:	4013      	ands	r3, r2
 8015c0e:	68fa      	ldr	r2, [r7, #12]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d033      	beq.n	8015c7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	2220      	movs	r2, #32
 8015c1a:	4013      	ands	r3, r2
 8015c1c:	d02e      	beq.n	8015c7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015c1e:	4b67      	ldr	r3, [pc, #412]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c22:	4a68      	ldr	r2, [pc, #416]	@ (8015dc4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015c24:	4013      	ands	r3, r2
 8015c26:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015c28:	4b64      	ldr	r3, [pc, #400]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c2c:	4b63      	ldr	r3, [pc, #396]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c2e:	2180      	movs	r1, #128	@ 0x80
 8015c30:	0309      	lsls	r1, r1, #12
 8015c32:	430a      	orrs	r2, r1
 8015c34:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015c36:	4b61      	ldr	r3, [pc, #388]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c3a:	4b60      	ldr	r3, [pc, #384]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c3c:	4962      	ldr	r1, [pc, #392]	@ (8015dc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015c3e:	400a      	ands	r2, r1
 8015c40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015c42:	4b5e      	ldr	r3, [pc, #376]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c44:	68fa      	ldr	r2, [r7, #12]
 8015c46:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	2380      	movs	r3, #128	@ 0x80
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	4013      	ands	r3, r2
 8015c50:	d014      	beq.n	8015c7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c52:	f7f9 f845 	bl	800ece0 <HAL_GetTick>
 8015c56:	0003      	movs	r3, r0
 8015c58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c5a:	e009      	b.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015c5c:	f7f9 f840 	bl	800ece0 <HAL_GetTick>
 8015c60:	0002      	movs	r2, r0
 8015c62:	693b      	ldr	r3, [r7, #16]
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	4a59      	ldr	r2, [pc, #356]	@ (8015dcc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015c68:	4293      	cmp	r3, r2
 8015c6a:	d901      	bls.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015c6c:	2303      	movs	r3, #3
 8015c6e:	e0a0      	b.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c70:	4b52      	ldr	r3, [pc, #328]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c74:	2380      	movs	r3, #128	@ 0x80
 8015c76:	009b      	lsls	r3, r3, #2
 8015c78:	4013      	ands	r3, r2
 8015c7a:	d0ef      	beq.n	8015c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2220      	movs	r2, #32
 8015c82:	4013      	ands	r3, r2
 8015c84:	d01f      	beq.n	8015cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	685a      	ldr	r2, [r3, #4]
 8015c8a:	23c0      	movs	r3, #192	@ 0xc0
 8015c8c:	029b      	lsls	r3, r3, #10
 8015c8e:	401a      	ands	r2, r3
 8015c90:	23c0      	movs	r3, #192	@ 0xc0
 8015c92:	029b      	lsls	r3, r3, #10
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d10c      	bne.n	8015cb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015c98:	4b48      	ldr	r3, [pc, #288]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	4a4c      	ldr	r2, [pc, #304]	@ (8015dd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015c9e:	4013      	ands	r3, r2
 8015ca0:	0019      	movs	r1, r3
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	685a      	ldr	r2, [r3, #4]
 8015ca6:	23c0      	movs	r3, #192	@ 0xc0
 8015ca8:	039b      	lsls	r3, r3, #14
 8015caa:	401a      	ands	r2, r3
 8015cac:	4b43      	ldr	r3, [pc, #268]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cae:	430a      	orrs	r2, r1
 8015cb0:	601a      	str	r2, [r3, #0]
 8015cb2:	4b42      	ldr	r3, [pc, #264]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	685a      	ldr	r2, [r3, #4]
 8015cba:	23c0      	movs	r3, #192	@ 0xc0
 8015cbc:	029b      	lsls	r3, r3, #10
 8015cbe:	401a      	ands	r2, r3
 8015cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cc2:	430a      	orrs	r2, r1
 8015cc4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015cc6:	2317      	movs	r3, #23
 8015cc8:	18fb      	adds	r3, r7, r3
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d105      	bne.n	8015cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015cd4:	4b39      	ldr	r3, [pc, #228]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cd6:	493f      	ldr	r1, [pc, #252]	@ (8015dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015cd8:	400a      	ands	r2, r1
 8015cda:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	4013      	ands	r3, r2
 8015ce4:	d009      	beq.n	8015cfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015ce6:	4b35      	ldr	r3, [pc, #212]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015cea:	2203      	movs	r2, #3
 8015cec:	4393      	bics	r3, r2
 8015cee:	0019      	movs	r1, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	689a      	ldr	r2, [r3, #8]
 8015cf4:	4b31      	ldr	r3, [pc, #196]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cf6:	430a      	orrs	r2, r1
 8015cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2202      	movs	r2, #2
 8015d00:	4013      	ands	r3, r2
 8015d02:	d009      	beq.n	8015d18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015d04:	4b2d      	ldr	r3, [pc, #180]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d08:	220c      	movs	r2, #12
 8015d0a:	4393      	bics	r3, r2
 8015d0c:	0019      	movs	r1, r3
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	68da      	ldr	r2, [r3, #12]
 8015d12:	4b2a      	ldr	r3, [pc, #168]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d14:	430a      	orrs	r2, r1
 8015d16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2204      	movs	r2, #4
 8015d1e:	4013      	ands	r3, r2
 8015d20:	d009      	beq.n	8015d36 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015d22:	4b26      	ldr	r3, [pc, #152]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d26:	4a2c      	ldr	r2, [pc, #176]	@ (8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015d28:	4013      	ands	r3, r2
 8015d2a:	0019      	movs	r1, r3
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	691a      	ldr	r2, [r3, #16]
 8015d30:	4b22      	ldr	r3, [pc, #136]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d32:	430a      	orrs	r2, r1
 8015d34:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	2208      	movs	r2, #8
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	d009      	beq.n	8015d54 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015d40:	4b1e      	ldr	r3, [pc, #120]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d44:	4a25      	ldr	r2, [pc, #148]	@ (8015ddc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015d46:	4013      	ands	r3, r2
 8015d48:	0019      	movs	r1, r3
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	695a      	ldr	r2, [r3, #20]
 8015d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d50:	430a      	orrs	r2, r1
 8015d52:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681a      	ldr	r2, [r3, #0]
 8015d58:	2380      	movs	r3, #128	@ 0x80
 8015d5a:	005b      	lsls	r3, r3, #1
 8015d5c:	4013      	ands	r3, r2
 8015d5e:	d009      	beq.n	8015d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015d60:	4b16      	ldr	r3, [pc, #88]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d64:	4a17      	ldr	r2, [pc, #92]	@ (8015dc4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015d66:	4013      	ands	r3, r2
 8015d68:	0019      	movs	r1, r3
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	699a      	ldr	r2, [r3, #24]
 8015d6e:	4b13      	ldr	r3, [pc, #76]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d70:	430a      	orrs	r2, r1
 8015d72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2240      	movs	r2, #64	@ 0x40
 8015d7a:	4013      	ands	r3, r2
 8015d7c:	d009      	beq.n	8015d92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d82:	4a17      	ldr	r2, [pc, #92]	@ (8015de0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015d84:	4013      	ands	r3, r2
 8015d86:	0019      	movs	r1, r3
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6a1a      	ldr	r2, [r3, #32]
 8015d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d8e:	430a      	orrs	r2, r1
 8015d90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2280      	movs	r2, #128	@ 0x80
 8015d98:	4013      	ands	r3, r2
 8015d9a:	d009      	beq.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015d9c:	4b07      	ldr	r3, [pc, #28]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015da0:	4a10      	ldr	r2, [pc, #64]	@ (8015de4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015da2:	4013      	ands	r3, r2
 8015da4:	0019      	movs	r1, r3
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	69da      	ldr	r2, [r3, #28]
 8015daa:	4b04      	ldr	r3, [pc, #16]	@ (8015dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dac:	430a      	orrs	r2, r1
 8015dae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	0018      	movs	r0, r3
 8015db4:	46bd      	mov	sp, r7
 8015db6:	b006      	add	sp, #24
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	46c0      	nop			@ (mov r8, r8)
 8015dbc:	40021000 	.word	0x40021000
 8015dc0:	40007000 	.word	0x40007000
 8015dc4:	fffcffff 	.word	0xfffcffff
 8015dc8:	fff7ffff 	.word	0xfff7ffff
 8015dcc:	00001388 	.word	0x00001388
 8015dd0:	ffcfffff 	.word	0xffcfffff
 8015dd4:	efffffff 	.word	0xefffffff
 8015dd8:	fffff3ff 	.word	0xfffff3ff
 8015ddc:	ffffcfff 	.word	0xffffcfff
 8015de0:	fbffffff 	.word	0xfbffffff
 8015de4:	fff3ffff 	.word	0xfff3ffff

08015de8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015de8:	b5b0      	push	{r4, r5, r7, lr}
 8015dea:	b084      	sub	sp, #16
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015df0:	230f      	movs	r3, #15
 8015df2:	18fb      	adds	r3, r7, r3
 8015df4:	2201      	movs	r2, #1
 8015df6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d101      	bne.n	8015e02 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	e088      	b.n	8015f14 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2221      	movs	r2, #33	@ 0x21
 8015e06:	5c9b      	ldrb	r3, [r3, r2]
 8015e08:	b2db      	uxtb	r3, r3
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d107      	bne.n	8015e1e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2220      	movs	r2, #32
 8015e12:	2100      	movs	r1, #0
 8015e14:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	0018      	movs	r0, r3
 8015e1a:	f7f3 f8d9 	bl	8008fd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2221      	movs	r2, #33	@ 0x21
 8015e22:	2102      	movs	r1, #2
 8015e24:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	68db      	ldr	r3, [r3, #12]
 8015e2c:	2210      	movs	r2, #16
 8015e2e:	4013      	ands	r3, r2
 8015e30:	2b10      	cmp	r3, #16
 8015e32:	d05f      	beq.n	8015ef4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	22ca      	movs	r2, #202	@ 0xca
 8015e3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2253      	movs	r2, #83	@ 0x53
 8015e42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015e44:	250f      	movs	r5, #15
 8015e46:	197c      	adds	r4, r7, r5
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	0018      	movs	r0, r3
 8015e4c:	f000 fa7c 	bl	8016348 <RTC_EnterInitMode>
 8015e50:	0003      	movs	r3, r0
 8015e52:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015e54:	0028      	movs	r0, r5
 8015e56:	183b      	adds	r3, r7, r0
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d12c      	bne.n	8015eb8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	689a      	ldr	r2, [r3, #8]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	492c      	ldr	r1, [pc, #176]	@ (8015f1c <HAL_RTC_Init+0x134>)
 8015e6a:	400a      	ands	r2, r1
 8015e6c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	6899      	ldr	r1, [r3, #8]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	685a      	ldr	r2, [r3, #4]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	691b      	ldr	r3, [r3, #16]
 8015e7c:	431a      	orrs	r2, r3
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	699b      	ldr	r3, [r3, #24]
 8015e82:	431a      	orrs	r2, r3
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	430a      	orrs	r2, r1
 8015e8a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	68d2      	ldr	r2, [r2, #12]
 8015e94:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	6919      	ldr	r1, [r3, #16]
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	689b      	ldr	r3, [r3, #8]
 8015ea0:	041a      	lsls	r2, r3, #16
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	430a      	orrs	r2, r1
 8015ea8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015eaa:	183c      	adds	r4, r7, r0
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	0018      	movs	r0, r3
 8015eb0:	f000 fa8e 	bl	80163d0 <RTC_ExitInitMode>
 8015eb4:	0003      	movs	r3, r0
 8015eb6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015eb8:	230f      	movs	r3, #15
 8015eba:	18fb      	adds	r3, r7, r3
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d113      	bne.n	8015eea <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2103      	movs	r1, #3
 8015ece:	438a      	bics	r2, r1
 8015ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	69da      	ldr	r2, [r3, #28]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	695b      	ldr	r3, [r3, #20]
 8015ee0:	431a      	orrs	r2, r3
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	430a      	orrs	r2, r1
 8015ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	22ff      	movs	r2, #255	@ 0xff
 8015ef0:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ef2:	e003      	b.n	8015efc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015ef4:	230f      	movs	r3, #15
 8015ef6:	18fb      	adds	r3, r7, r3
 8015ef8:	2200      	movs	r2, #0
 8015efa:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015efc:	230f      	movs	r3, #15
 8015efe:	18fb      	adds	r3, r7, r3
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d103      	bne.n	8015f0e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2221      	movs	r2, #33	@ 0x21
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015f0e:	230f      	movs	r3, #15
 8015f10:	18fb      	adds	r3, r7, r3
 8015f12:	781b      	ldrb	r3, [r3, #0]
}
 8015f14:	0018      	movs	r0, r3
 8015f16:	46bd      	mov	sp, r7
 8015f18:	b004      	add	sp, #16
 8015f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015f1c:	ff8fffbf 	.word	0xff8fffbf

08015f20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015f20:	b5b0      	push	{r4, r5, r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	2220      	movs	r2, #32
 8015f34:	5c9b      	ldrb	r3, [r3, r2]
 8015f36:	2b01      	cmp	r3, #1
 8015f38:	d101      	bne.n	8015f3e <HAL_RTC_SetTime+0x1e>
 8015f3a:	2302      	movs	r3, #2
 8015f3c:	e092      	b.n	8016064 <HAL_RTC_SetTime+0x144>
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2220      	movs	r2, #32
 8015f42:	2101      	movs	r1, #1
 8015f44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2221      	movs	r2, #33	@ 0x21
 8015f4a:	2102      	movs	r1, #2
 8015f4c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d125      	bne.n	8015fa0 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	689b      	ldr	r3, [r3, #8]
 8015f5a:	2240      	movs	r2, #64	@ 0x40
 8015f5c:	4013      	ands	r3, r2
 8015f5e:	d102      	bne.n	8015f66 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	2200      	movs	r2, #0
 8015f64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	0018      	movs	r0, r3
 8015f6c:	f000 fa5a 	bl	8016424 <RTC_ByteToBcd2>
 8015f70:	0003      	movs	r3, r0
 8015f72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	785b      	ldrb	r3, [r3, #1]
 8015f78:	0018      	movs	r0, r3
 8015f7a:	f000 fa53 	bl	8016424 <RTC_ByteToBcd2>
 8015f7e:	0003      	movs	r3, r0
 8015f80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	789b      	ldrb	r3, [r3, #2]
 8015f88:	0018      	movs	r0, r3
 8015f8a:	f000 fa4b 	bl	8016424 <RTC_ByteToBcd2>
 8015f8e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015f90:	0022      	movs	r2, r4
 8015f92:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	78db      	ldrb	r3, [r3, #3]
 8015f98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f9a:	4313      	orrs	r3, r2
 8015f9c:	617b      	str	r3, [r7, #20]
 8015f9e:	e017      	b.n	8015fd0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	689b      	ldr	r3, [r3, #8]
 8015fa6:	2240      	movs	r2, #64	@ 0x40
 8015fa8:	4013      	ands	r3, r2
 8015faa:	d102      	bne.n	8015fb2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015fb2:	68bb      	ldr	r3, [r7, #8]
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	785b      	ldrb	r3, [r3, #1]
 8015fbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015fbe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015fc0:	68ba      	ldr	r2, [r7, #8]
 8015fc2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015fc4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	78db      	ldrb	r3, [r3, #3]
 8015fca:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015fcc:	4313      	orrs	r3, r2
 8015fce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	22ca      	movs	r2, #202	@ 0xca
 8015fd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2253      	movs	r2, #83	@ 0x53
 8015fde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015fe0:	2513      	movs	r5, #19
 8015fe2:	197c      	adds	r4, r7, r5
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	0018      	movs	r0, r3
 8015fe8:	f000 f9ae 	bl	8016348 <RTC_EnterInitMode>
 8015fec:	0003      	movs	r3, r0
 8015fee:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015ff0:	0028      	movs	r0, r5
 8015ff2:	183b      	adds	r3, r7, r0
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d120      	bne.n	801603c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	697a      	ldr	r2, [r7, #20]
 8016000:	491a      	ldr	r1, [pc, #104]	@ (801606c <HAL_RTC_SetTime+0x14c>)
 8016002:	400a      	ands	r2, r1
 8016004:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	689a      	ldr	r2, [r3, #8]
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4917      	ldr	r1, [pc, #92]	@ (8016070 <HAL_RTC_SetTime+0x150>)
 8016012:	400a      	ands	r2, r1
 8016014:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	6899      	ldr	r1, [r3, #8]
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	68da      	ldr	r2, [r3, #12]
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	691b      	ldr	r3, [r3, #16]
 8016024:	431a      	orrs	r2, r3
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	430a      	orrs	r2, r1
 801602c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801602e:	183c      	adds	r4, r7, r0
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	0018      	movs	r0, r3
 8016034:	f000 f9cc 	bl	80163d0 <RTC_ExitInitMode>
 8016038:	0003      	movs	r3, r0
 801603a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801603c:	2313      	movs	r3, #19
 801603e:	18fb      	adds	r3, r7, r3
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d103      	bne.n	801604e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2221      	movs	r2, #33	@ 0x21
 801604a:	2101      	movs	r1, #1
 801604c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	22ff      	movs	r2, #255	@ 0xff
 8016054:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2220      	movs	r2, #32
 801605a:	2100      	movs	r1, #0
 801605c:	5499      	strb	r1, [r3, r2]

  return status;
 801605e:	2313      	movs	r3, #19
 8016060:	18fb      	adds	r3, r7, r3
 8016062:	781b      	ldrb	r3, [r3, #0]
}
 8016064:	0018      	movs	r0, r3
 8016066:	46bd      	mov	sp, r7
 8016068:	b006      	add	sp, #24
 801606a:	bdb0      	pop	{r4, r5, r7, pc}
 801606c:	007f7f7f 	.word	0x007f7f7f
 8016070:	fffbffff 	.word	0xfffbffff

08016074 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b086      	sub	sp, #24
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016080:	2300      	movs	r3, #0
 8016082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	691b      	ldr	r3, [r3, #16]
 8016094:	045b      	lsls	r3, r3, #17
 8016096:	0c5a      	lsrs	r2, r3, #17
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	4a22      	ldr	r2, [pc, #136]	@ (801612c <HAL_RTC_GetTime+0xb8>)
 80160a4:	4013      	ands	r3, r2
 80160a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80160a8:	697b      	ldr	r3, [r7, #20]
 80160aa:	0c1b      	lsrs	r3, r3, #16
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	223f      	movs	r2, #63	@ 0x3f
 80160b0:	4013      	ands	r3, r2
 80160b2:	b2da      	uxtb	r2, r3
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	0a1b      	lsrs	r3, r3, #8
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	227f      	movs	r2, #127	@ 0x7f
 80160c0:	4013      	ands	r3, r2
 80160c2:	b2da      	uxtb	r2, r3
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	227f      	movs	r2, #127	@ 0x7f
 80160ce:	4013      	ands	r3, r2
 80160d0:	b2da      	uxtb	r2, r3
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	0d9b      	lsrs	r3, r3, #22
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	2201      	movs	r2, #1
 80160de:	4013      	ands	r3, r2
 80160e0:	b2da      	uxtb	r2, r3
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d11a      	bne.n	8016122 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	0018      	movs	r0, r3
 80160f2:	f000 f9b8 	bl	8016466 <RTC_Bcd2ToByte>
 80160f6:	0003      	movs	r3, r0
 80160f8:	001a      	movs	r2, r3
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	785b      	ldrb	r3, [r3, #1]
 8016102:	0018      	movs	r0, r3
 8016104:	f000 f9af 	bl	8016466 <RTC_Bcd2ToByte>
 8016108:	0003      	movs	r3, r0
 801610a:	001a      	movs	r2, r3
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	789b      	ldrb	r3, [r3, #2]
 8016114:	0018      	movs	r0, r3
 8016116:	f000 f9a6 	bl	8016466 <RTC_Bcd2ToByte>
 801611a:	0003      	movs	r3, r0
 801611c:	001a      	movs	r2, r3
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016122:	2300      	movs	r3, #0
}
 8016124:	0018      	movs	r0, r3
 8016126:	46bd      	mov	sp, r7
 8016128:	b006      	add	sp, #24
 801612a:	bd80      	pop	{r7, pc}
 801612c:	007f7f7f 	.word	0x007f7f7f

08016130 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016130:	b5b0      	push	{r4, r5, r7, lr}
 8016132:	b086      	sub	sp, #24
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	60b9      	str	r1, [r7, #8]
 801613a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801613c:	2300      	movs	r3, #0
 801613e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2220      	movs	r2, #32
 8016144:	5c9b      	ldrb	r3, [r3, r2]
 8016146:	2b01      	cmp	r3, #1
 8016148:	d101      	bne.n	801614e <HAL_RTC_SetDate+0x1e>
 801614a:	2302      	movs	r3, #2
 801614c:	e07e      	b.n	801624c <HAL_RTC_SetDate+0x11c>
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2220      	movs	r2, #32
 8016152:	2101      	movs	r1, #1
 8016154:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2221      	movs	r2, #33	@ 0x21
 801615a:	2102      	movs	r1, #2
 801615c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d10e      	bne.n	8016182 <HAL_RTC_SetDate+0x52>
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	785b      	ldrb	r3, [r3, #1]
 8016168:	001a      	movs	r2, r3
 801616a:	2310      	movs	r3, #16
 801616c:	4013      	ands	r3, r2
 801616e:	d008      	beq.n	8016182 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	785b      	ldrb	r3, [r3, #1]
 8016174:	2210      	movs	r2, #16
 8016176:	4393      	bics	r3, r2
 8016178:	b2db      	uxtb	r3, r3
 801617a:	330a      	adds	r3, #10
 801617c:	b2da      	uxtb	r2, r3
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d11c      	bne.n	80161c2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	78db      	ldrb	r3, [r3, #3]
 801618c:	0018      	movs	r0, r3
 801618e:	f000 f949 	bl	8016424 <RTC_ByteToBcd2>
 8016192:	0003      	movs	r3, r0
 8016194:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	785b      	ldrb	r3, [r3, #1]
 801619a:	0018      	movs	r0, r3
 801619c:	f000 f942 	bl	8016424 <RTC_ByteToBcd2>
 80161a0:	0003      	movs	r3, r0
 80161a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80161a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	789b      	ldrb	r3, [r3, #2]
 80161aa:	0018      	movs	r0, r3
 80161ac:	f000 f93a 	bl	8016424 <RTC_ByteToBcd2>
 80161b0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80161b2:	0022      	movs	r2, r4
 80161b4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80161bc:	4313      	orrs	r3, r2
 80161be:	617b      	str	r3, [r7, #20]
 80161c0:	e00e      	b.n	80161e0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	78db      	ldrb	r3, [r3, #3]
 80161c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	785b      	ldrb	r3, [r3, #1]
 80161cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80161ce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80161d0:	68ba      	ldr	r2, [r7, #8]
 80161d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80161d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80161dc:	4313      	orrs	r3, r2
 80161de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	22ca      	movs	r2, #202	@ 0xca
 80161e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	2253      	movs	r2, #83	@ 0x53
 80161ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80161f0:	2513      	movs	r5, #19
 80161f2:	197c      	adds	r4, r7, r5
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	0018      	movs	r0, r3
 80161f8:	f000 f8a6 	bl	8016348 <RTC_EnterInitMode>
 80161fc:	0003      	movs	r3, r0
 80161fe:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016200:	0028      	movs	r0, r5
 8016202:	183b      	adds	r3, r7, r0
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d10c      	bne.n	8016224 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	697a      	ldr	r2, [r7, #20]
 8016210:	4910      	ldr	r1, [pc, #64]	@ (8016254 <HAL_RTC_SetDate+0x124>)
 8016212:	400a      	ands	r2, r1
 8016214:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016216:	183c      	adds	r4, r7, r0
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	0018      	movs	r0, r3
 801621c:	f000 f8d8 	bl	80163d0 <RTC_ExitInitMode>
 8016220:	0003      	movs	r3, r0
 8016222:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016224:	2313      	movs	r3, #19
 8016226:	18fb      	adds	r3, r7, r3
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d103      	bne.n	8016236 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2221      	movs	r2, #33	@ 0x21
 8016232:	2101      	movs	r1, #1
 8016234:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	22ff      	movs	r2, #255	@ 0xff
 801623c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2220      	movs	r2, #32
 8016242:	2100      	movs	r1, #0
 8016244:	5499      	strb	r1, [r3, r2]

  return status;
 8016246:	2313      	movs	r3, #19
 8016248:	18fb      	adds	r3, r7, r3
 801624a:	781b      	ldrb	r3, [r3, #0]
}
 801624c:	0018      	movs	r0, r3
 801624e:	46bd      	mov	sp, r7
 8016250:	b006      	add	sp, #24
 8016252:	bdb0      	pop	{r4, r5, r7, pc}
 8016254:	00ffff3f 	.word	0x00ffff3f

08016258 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b086      	sub	sp, #24
 801625c:	af00      	add	r7, sp, #0
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016264:	2300      	movs	r3, #0
 8016266:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	4a21      	ldr	r2, [pc, #132]	@ (80162f4 <HAL_RTC_GetDate+0x9c>)
 8016270:	4013      	ands	r3, r2
 8016272:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	0c1b      	lsrs	r3, r3, #16
 8016278:	b2da      	uxtb	r2, r3
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	0a1b      	lsrs	r3, r3, #8
 8016282:	b2db      	uxtb	r3, r3
 8016284:	221f      	movs	r2, #31
 8016286:	4013      	ands	r3, r2
 8016288:	b2da      	uxtb	r2, r3
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	b2db      	uxtb	r3, r3
 8016292:	223f      	movs	r2, #63	@ 0x3f
 8016294:	4013      	ands	r3, r2
 8016296:	b2da      	uxtb	r2, r3
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	0b5b      	lsrs	r3, r3, #13
 80162a0:	b2db      	uxtb	r3, r3
 80162a2:	2207      	movs	r2, #7
 80162a4:	4013      	ands	r3, r2
 80162a6:	b2da      	uxtb	r2, r3
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d11a      	bne.n	80162e8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80162b2:	68bb      	ldr	r3, [r7, #8]
 80162b4:	78db      	ldrb	r3, [r3, #3]
 80162b6:	0018      	movs	r0, r3
 80162b8:	f000 f8d5 	bl	8016466 <RTC_Bcd2ToByte>
 80162bc:	0003      	movs	r3, r0
 80162be:	001a      	movs	r2, r3
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80162c4:	68bb      	ldr	r3, [r7, #8]
 80162c6:	785b      	ldrb	r3, [r3, #1]
 80162c8:	0018      	movs	r0, r3
 80162ca:	f000 f8cc 	bl	8016466 <RTC_Bcd2ToByte>
 80162ce:	0003      	movs	r3, r0
 80162d0:	001a      	movs	r2, r3
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	789b      	ldrb	r3, [r3, #2]
 80162da:	0018      	movs	r0, r3
 80162dc:	f000 f8c3 	bl	8016466 <RTC_Bcd2ToByte>
 80162e0:	0003      	movs	r3, r0
 80162e2:	001a      	movs	r2, r3
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80162e8:	2300      	movs	r3, #0
}
 80162ea:	0018      	movs	r0, r3
 80162ec:	46bd      	mov	sp, r7
 80162ee:	b006      	add	sp, #24
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	46c0      	nop			@ (mov r8, r8)
 80162f4:	00ffff3f 	.word	0x00ffff3f

080162f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016300:	2300      	movs	r3, #0
 8016302:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4a0e      	ldr	r2, [pc, #56]	@ (8016344 <HAL_RTC_WaitForSynchro+0x4c>)
 801630a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801630c:	f7f8 fce8 	bl	800ece0 <HAL_GetTick>
 8016310:	0003      	movs	r3, r0
 8016312:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016314:	e00a      	b.n	801632c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016316:	f7f8 fce3 	bl	800ece0 <HAL_GetTick>
 801631a:	0002      	movs	r2, r0
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	1ad2      	subs	r2, r2, r3
 8016320:	23fa      	movs	r3, #250	@ 0xfa
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	429a      	cmp	r2, r3
 8016326:	d901      	bls.n	801632c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8016328:	2303      	movs	r3, #3
 801632a:	e006      	b.n	801633a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	68db      	ldr	r3, [r3, #12]
 8016332:	2220      	movs	r2, #32
 8016334:	4013      	ands	r3, r2
 8016336:	d0ee      	beq.n	8016316 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8016338:	2300      	movs	r3, #0
}
 801633a:	0018      	movs	r0, r3
 801633c:	46bd      	mov	sp, r7
 801633e:	b004      	add	sp, #16
 8016340:	bd80      	pop	{r7, pc}
 8016342:	46c0      	nop			@ (mov r8, r8)
 8016344:	0001ff5f 	.word	0x0001ff5f

08016348 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b084      	sub	sp, #16
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016350:	2300      	movs	r3, #0
 8016352:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016354:	230f      	movs	r3, #15
 8016356:	18fb      	adds	r3, r7, r3
 8016358:	2200      	movs	r2, #0
 801635a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	68db      	ldr	r3, [r3, #12]
 8016362:	2240      	movs	r2, #64	@ 0x40
 8016364:	4013      	ands	r3, r2
 8016366:	d12c      	bne.n	80163c2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	68da      	ldr	r2, [r3, #12]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	2180      	movs	r1, #128	@ 0x80
 8016374:	430a      	orrs	r2, r1
 8016376:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016378:	f7f8 fcb2 	bl	800ece0 <HAL_GetTick>
 801637c:	0003      	movs	r3, r0
 801637e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016380:	e014      	b.n	80163ac <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016382:	f7f8 fcad 	bl	800ece0 <HAL_GetTick>
 8016386:	0002      	movs	r2, r0
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	1ad2      	subs	r2, r2, r3
 801638c:	200f      	movs	r0, #15
 801638e:	183b      	adds	r3, r7, r0
 8016390:	1839      	adds	r1, r7, r0
 8016392:	7809      	ldrb	r1, [r1, #0]
 8016394:	7019      	strb	r1, [r3, #0]
 8016396:	23fa      	movs	r3, #250	@ 0xfa
 8016398:	009b      	lsls	r3, r3, #2
 801639a:	429a      	cmp	r2, r3
 801639c:	d906      	bls.n	80163ac <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2221      	movs	r2, #33	@ 0x21
 80163a2:	2104      	movs	r1, #4
 80163a4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80163a6:	183b      	adds	r3, r7, r0
 80163a8:	2201      	movs	r2, #1
 80163aa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	68db      	ldr	r3, [r3, #12]
 80163b2:	2240      	movs	r2, #64	@ 0x40
 80163b4:	4013      	ands	r3, r2
 80163b6:	d104      	bne.n	80163c2 <RTC_EnterInitMode+0x7a>
 80163b8:	230f      	movs	r3, #15
 80163ba:	18fb      	adds	r3, r7, r3
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d1df      	bne.n	8016382 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80163c2:	230f      	movs	r3, #15
 80163c4:	18fb      	adds	r3, r7, r3
 80163c6:	781b      	ldrb	r3, [r3, #0]
}
 80163c8:	0018      	movs	r0, r3
 80163ca:	46bd      	mov	sp, r7
 80163cc:	b004      	add	sp, #16
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80163d0:	b590      	push	{r4, r7, lr}
 80163d2:	b085      	sub	sp, #20
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80163d8:	240f      	movs	r4, #15
 80163da:	193b      	adds	r3, r7, r4
 80163dc:	2200      	movs	r2, #0
 80163de:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	68da      	ldr	r2, [r3, #12]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2180      	movs	r1, #128	@ 0x80
 80163ec:	438a      	bics	r2, r1
 80163ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	689b      	ldr	r3, [r3, #8]
 80163f6:	2220      	movs	r2, #32
 80163f8:	4013      	ands	r3, r2
 80163fa:	d10c      	bne.n	8016416 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	0018      	movs	r0, r3
 8016400:	f7ff ff7a 	bl	80162f8 <HAL_RTC_WaitForSynchro>
 8016404:	1e03      	subs	r3, r0, #0
 8016406:	d006      	beq.n	8016416 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2221      	movs	r2, #33	@ 0x21
 801640c:	2104      	movs	r1, #4
 801640e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016410:	193b      	adds	r3, r7, r4
 8016412:	2201      	movs	r2, #1
 8016414:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8016416:	230f      	movs	r3, #15
 8016418:	18fb      	adds	r3, r7, r3
 801641a:	781b      	ldrb	r3, [r3, #0]
}
 801641c:	0018      	movs	r0, r3
 801641e:	46bd      	mov	sp, r7
 8016420:	b005      	add	sp, #20
 8016422:	bd90      	pop	{r4, r7, pc}

08016424 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b084      	sub	sp, #16
 8016428:	af00      	add	r7, sp, #0
 801642a:	0002      	movs	r2, r0
 801642c:	1dfb      	adds	r3, r7, #7
 801642e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016430:	2300      	movs	r3, #0
 8016432:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8016434:	e007      	b.n	8016446 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	3301      	adds	r3, #1
 801643a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801643c:	1dfb      	adds	r3, r7, #7
 801643e:	1dfa      	adds	r2, r7, #7
 8016440:	7812      	ldrb	r2, [r2, #0]
 8016442:	3a0a      	subs	r2, #10
 8016444:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8016446:	1dfb      	adds	r3, r7, #7
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	2b09      	cmp	r3, #9
 801644c:	d8f3      	bhi.n	8016436 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	b2db      	uxtb	r3, r3
 8016452:	011b      	lsls	r3, r3, #4
 8016454:	b2da      	uxtb	r2, r3
 8016456:	1dfb      	adds	r3, r7, #7
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	4313      	orrs	r3, r2
 801645c:	b2db      	uxtb	r3, r3
}
 801645e:	0018      	movs	r0, r3
 8016460:	46bd      	mov	sp, r7
 8016462:	b004      	add	sp, #16
 8016464:	bd80      	pop	{r7, pc}

08016466 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016466:	b580      	push	{r7, lr}
 8016468:	b084      	sub	sp, #16
 801646a:	af00      	add	r7, sp, #0
 801646c:	0002      	movs	r2, r0
 801646e:	1dfb      	adds	r3, r7, #7
 8016470:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016472:	2300      	movs	r3, #0
 8016474:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016476:	1dfb      	adds	r3, r7, #7
 8016478:	781b      	ldrb	r3, [r3, #0]
 801647a:	091b      	lsrs	r3, r3, #4
 801647c:	b2db      	uxtb	r3, r3
 801647e:	001a      	movs	r2, r3
 8016480:	0013      	movs	r3, r2
 8016482:	009b      	lsls	r3, r3, #2
 8016484:	189b      	adds	r3, r3, r2
 8016486:	005b      	lsls	r3, r3, #1
 8016488:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	b2da      	uxtb	r2, r3
 801648e:	1dfb      	adds	r3, r7, #7
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	210f      	movs	r1, #15
 8016494:	400b      	ands	r3, r1
 8016496:	b2db      	uxtb	r3, r3
 8016498:	18d3      	adds	r3, r2, r3
 801649a:	b2db      	uxtb	r3, r3
}
 801649c:	0018      	movs	r0, r3
 801649e:	46bd      	mov	sp, r7
 80164a0:	b004      	add	sp, #16
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b086      	sub	sp, #24
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80164b0:	4b64      	ldr	r3, [pc, #400]	@ (8016644 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	22fa      	movs	r2, #250	@ 0xfa
 80164b6:	01d1      	lsls	r1, r2, #7
 80164b8:	0018      	movs	r0, r3
 80164ba:	f7e9 fe73 	bl	80001a4 <__udivsi3>
 80164be:	0003      	movs	r3, r0
 80164c0:	001a      	movs	r2, r3
 80164c2:	0013      	movs	r3, r2
 80164c4:	015b      	lsls	r3, r3, #5
 80164c6:	1a9b      	subs	r3, r3, r2
 80164c8:	009b      	lsls	r3, r3, #2
 80164ca:	189b      	adds	r3, r3, r2
 80164cc:	00db      	lsls	r3, r3, #3
 80164ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	2220      	movs	r2, #32
 80164d4:	5c9b      	ldrb	r3, [r3, r2]
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d101      	bne.n	80164de <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80164da:	2302      	movs	r3, #2
 80164dc:	e0ad      	b.n	801663a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	2220      	movs	r2, #32
 80164e2:	2101      	movs	r1, #1
 80164e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	2221      	movs	r2, #33	@ 0x21
 80164ea:	2102      	movs	r1, #2
 80164ec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	22ca      	movs	r2, #202	@ 0xca
 80164f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	2253      	movs	r2, #83	@ 0x53
 80164fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	689a      	ldr	r2, [r3, #8]
 8016504:	2380      	movs	r3, #128	@ 0x80
 8016506:	00db      	lsls	r3, r3, #3
 8016508:	4013      	ands	r3, r2
 801650a:	d019      	beq.n	8016540 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	3b01      	subs	r3, #1
 8016510:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d10d      	bne.n	8016534 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	22ff      	movs	r2, #255	@ 0xff
 801651e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	2221      	movs	r2, #33	@ 0x21
 8016524:	2103      	movs	r1, #3
 8016526:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2220      	movs	r2, #32
 801652c:	2100      	movs	r1, #0
 801652e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016530:	2303      	movs	r3, #3
 8016532:	e082      	b.n	801663a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	68db      	ldr	r3, [r3, #12]
 801653a:	2204      	movs	r2, #4
 801653c:	4013      	ands	r3, r2
 801653e:	d1e5      	bne.n	801650c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	689a      	ldr	r2, [r3, #8]
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	493f      	ldr	r1, [pc, #252]	@ (8016648 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801654c:	400a      	ands	r2, r1
 801654e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	68db      	ldr	r3, [r3, #12]
 8016556:	22ff      	movs	r2, #255	@ 0xff
 8016558:	401a      	ands	r2, r3
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	493b      	ldr	r1, [pc, #236]	@ (801664c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016560:	430a      	orrs	r2, r1
 8016562:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016564:	4b37      	ldr	r3, [pc, #220]	@ (8016644 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	22fa      	movs	r2, #250	@ 0xfa
 801656a:	01d1      	lsls	r1, r2, #7
 801656c:	0018      	movs	r0, r3
 801656e:	f7e9 fe19 	bl	80001a4 <__udivsi3>
 8016572:	0003      	movs	r3, r0
 8016574:	001a      	movs	r2, r3
 8016576:	0013      	movs	r3, r2
 8016578:	015b      	lsls	r3, r3, #5
 801657a:	1a9b      	subs	r3, r3, r2
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	189b      	adds	r3, r3, r2
 8016580:	00db      	lsls	r3, r3, #3
 8016582:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	3b01      	subs	r3, #1
 8016588:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801658a:	697b      	ldr	r3, [r7, #20]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d10d      	bne.n	80165ac <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	22ff      	movs	r2, #255	@ 0xff
 8016596:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	2221      	movs	r2, #33	@ 0x21
 801659c:	2103      	movs	r1, #3
 801659e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	2220      	movs	r2, #32
 80165a4:	2100      	movs	r1, #0
 80165a6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80165a8:	2303      	movs	r3, #3
 80165aa:	e046      	b.n	801663a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	68db      	ldr	r3, [r3, #12]
 80165b2:	2204      	movs	r2, #4
 80165b4:	4013      	ands	r3, r2
 80165b6:	d0e5      	beq.n	8016584 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	689a      	ldr	r2, [r3, #8]
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2107      	movs	r1, #7
 80165c4:	438a      	bics	r2, r1
 80165c6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	6899      	ldr	r1, [r3, #8]
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	687a      	ldr	r2, [r7, #4]
 80165d4:	430a      	orrs	r2, r1
 80165d6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	68ba      	ldr	r2, [r7, #8]
 80165de:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80165e0:	4b1b      	ldr	r3, [pc, #108]	@ (8016650 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165e2:	681a      	ldr	r2, [r3, #0]
 80165e4:	4b1a      	ldr	r3, [pc, #104]	@ (8016650 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165e6:	2180      	movs	r1, #128	@ 0x80
 80165e8:	0349      	lsls	r1, r1, #13
 80165ea:	430a      	orrs	r2, r1
 80165ec:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80165ee:	4b18      	ldr	r3, [pc, #96]	@ (8016650 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165f0:	689a      	ldr	r2, [r3, #8]
 80165f2:	4b17      	ldr	r3, [pc, #92]	@ (8016650 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165f4:	2180      	movs	r1, #128	@ 0x80
 80165f6:	0349      	lsls	r1, r1, #13
 80165f8:	430a      	orrs	r2, r1
 80165fa:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	689a      	ldr	r2, [r3, #8]
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2180      	movs	r1, #128	@ 0x80
 8016608:	01c9      	lsls	r1, r1, #7
 801660a:	430a      	orrs	r2, r1
 801660c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	689a      	ldr	r2, [r3, #8]
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	2180      	movs	r1, #128	@ 0x80
 801661a:	00c9      	lsls	r1, r1, #3
 801661c:	430a      	orrs	r2, r1
 801661e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	22ff      	movs	r2, #255	@ 0xff
 8016626:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2221      	movs	r2, #33	@ 0x21
 801662c:	2101      	movs	r1, #1
 801662e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2220      	movs	r2, #32
 8016634:	2100      	movs	r1, #0
 8016636:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016638:	2300      	movs	r3, #0
}
 801663a:	0018      	movs	r0, r3
 801663c:	46bd      	mov	sp, r7
 801663e:	b006      	add	sp, #24
 8016640:	bd80      	pop	{r7, pc}
 8016642:	46c0      	nop			@ (mov r8, r8)
 8016644:	200000cc 	.word	0x200000cc
 8016648:	fffffbff 	.word	0xfffffbff
 801664c:	fffffb7f 	.word	0xfffffb7f
 8016650:	40010400 	.word	0x40010400

08016654 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b084      	sub	sp, #16
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801665c:	2300      	movs	r3, #0
 801665e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2220      	movs	r2, #32
 8016664:	5c9b      	ldrb	r3, [r3, r2]
 8016666:	2b01      	cmp	r3, #1
 8016668:	d101      	bne.n	801666e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801666a:	2302      	movs	r3, #2
 801666c:	e04e      	b.n	801670c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2220      	movs	r2, #32
 8016672:	2101      	movs	r1, #1
 8016674:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2221      	movs	r2, #33	@ 0x21
 801667a:	2102      	movs	r1, #2
 801667c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	22ca      	movs	r2, #202	@ 0xca
 8016684:	625a      	str	r2, [r3, #36]	@ 0x24
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	2253      	movs	r2, #83	@ 0x53
 801668c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	689a      	ldr	r2, [r3, #8]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	491e      	ldr	r1, [pc, #120]	@ (8016714 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801669a:	400a      	ands	r2, r1
 801669c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	689a      	ldr	r2, [r3, #8]
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	491b      	ldr	r1, [pc, #108]	@ (8016718 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80166aa:	400a      	ands	r2, r1
 80166ac:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80166ae:	f7f8 fb17 	bl	800ece0 <HAL_GetTick>
 80166b2:	0003      	movs	r3, r0
 80166b4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80166b6:	e016      	b.n	80166e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80166b8:	f7f8 fb12 	bl	800ece0 <HAL_GetTick>
 80166bc:	0002      	movs	r2, r0
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	1ad2      	subs	r2, r2, r3
 80166c2:	23fa      	movs	r3, #250	@ 0xfa
 80166c4:	009b      	lsls	r3, r3, #2
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d90d      	bls.n	80166e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	22ff      	movs	r2, #255	@ 0xff
 80166d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2221      	movs	r2, #33	@ 0x21
 80166d6:	2103      	movs	r1, #3
 80166d8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2220      	movs	r2, #32
 80166de:	2100      	movs	r1, #0
 80166e0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80166e2:	2303      	movs	r3, #3
 80166e4:	e012      	b.n	801670c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	2204      	movs	r2, #4
 80166ee:	4013      	ands	r3, r2
 80166f0:	d0e2      	beq.n	80166b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	22ff      	movs	r2, #255	@ 0xff
 80166f8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2221      	movs	r2, #33	@ 0x21
 80166fe:	2101      	movs	r1, #1
 8016700:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2220      	movs	r2, #32
 8016706:	2100      	movs	r1, #0
 8016708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801670a:	2300      	movs	r3, #0
}
 801670c:	0018      	movs	r0, r3
 801670e:	46bd      	mov	sp, r7
 8016710:	b004      	add	sp, #16
 8016712:	bd80      	pop	{r7, pc}
 8016714:	fffffbff 	.word	0xfffffbff
 8016718:	ffffbfff 	.word	0xffffbfff

0801671c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016724:	4b13      	ldr	r3, [pc, #76]	@ (8016774 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8016726:	2280      	movs	r2, #128	@ 0x80
 8016728:	0352      	lsls	r2, r2, #13
 801672a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	689a      	ldr	r2, [r3, #8]
 8016732:	2380      	movs	r3, #128	@ 0x80
 8016734:	01db      	lsls	r3, r3, #7
 8016736:	4013      	ands	r3, r2
 8016738:	d014      	beq.n	8016764 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	68da      	ldr	r2, [r3, #12]
 8016740:	2380      	movs	r3, #128	@ 0x80
 8016742:	00db      	lsls	r3, r3, #3
 8016744:	4013      	ands	r3, r2
 8016746:	d00d      	beq.n	8016764 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	68db      	ldr	r3, [r3, #12]
 801674e:	22ff      	movs	r2, #255	@ 0xff
 8016750:	401a      	ands	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	4908      	ldr	r1, [pc, #32]	@ (8016778 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016758:	430a      	orrs	r2, r1
 801675a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	0018      	movs	r0, r3
 8016760:	f000 f80c 	bl	801677c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2221      	movs	r2, #33	@ 0x21
 8016768:	2101      	movs	r1, #1
 801676a:	5499      	strb	r1, [r3, r2]
}
 801676c:	46c0      	nop			@ (mov r8, r8)
 801676e:	46bd      	mov	sp, r7
 8016770:	b002      	add	sp, #8
 8016772:	bd80      	pop	{r7, pc}
 8016774:	40010400 	.word	0x40010400
 8016778:	fffffb7f 	.word	0xfffffb7f

0801677c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b082      	sub	sp, #8
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016784:	46c0      	nop			@ (mov r8, r8)
 8016786:	46bd      	mov	sp, r7
 8016788:	b002      	add	sp, #8
 801678a:	bd80      	pop	{r7, pc}

0801678c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b086      	sub	sp, #24
 8016790:	af00      	add	r7, sp, #0
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	60b9      	str	r1, [r7, #8]
 8016796:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016798:	2300      	movs	r3, #0
 801679a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	3350      	adds	r3, #80	@ 0x50
 80167a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	009b      	lsls	r3, r3, #2
 80167a8:	697a      	ldr	r2, [r7, #20]
 80167aa:	18d3      	adds	r3, r2, r3
 80167ac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80167ae:	697b      	ldr	r3, [r7, #20]
 80167b0:	687a      	ldr	r2, [r7, #4]
 80167b2:	601a      	str	r2, [r3, #0]
}
 80167b4:	46c0      	nop			@ (mov r8, r8)
 80167b6:	46bd      	mov	sp, r7
 80167b8:	b006      	add	sp, #24
 80167ba:	bd80      	pop	{r7, pc}

080167bc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80167c6:	2300      	movs	r3, #0
 80167c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	3350      	adds	r3, #80	@ 0x50
 80167d0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	009b      	lsls	r3, r3, #2
 80167d6:	68fa      	ldr	r2, [r7, #12]
 80167d8:	18d3      	adds	r3, r2, r3
 80167da:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
}
 80167e0:	0018      	movs	r0, r3
 80167e2:	46bd      	mov	sp, r7
 80167e4:	b004      	add	sp, #16
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d101      	bne.n	80167fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80167f6:	2301      	movs	r3, #1
 80167f8:	e032      	b.n	8016860 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2239      	movs	r2, #57	@ 0x39
 80167fe:	5c9b      	ldrb	r3, [r3, r2]
 8016800:	b2db      	uxtb	r3, r3
 8016802:	2b00      	cmp	r3, #0
 8016804:	d107      	bne.n	8016816 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	2238      	movs	r2, #56	@ 0x38
 801680a:	2100      	movs	r1, #0
 801680c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	0018      	movs	r0, r3
 8016812:	f7f7 fb77 	bl	800df04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2239      	movs	r2, #57	@ 0x39
 801681a:	2102      	movs	r1, #2
 801681c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	3304      	adds	r3, #4
 8016826:	0019      	movs	r1, r3
 8016828:	0010      	movs	r0, r2
 801682a:	f000 fa1d 	bl	8016c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	223e      	movs	r2, #62	@ 0x3e
 8016832:	2101      	movs	r1, #1
 8016834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	223a      	movs	r2, #58	@ 0x3a
 801683a:	2101      	movs	r1, #1
 801683c:	5499      	strb	r1, [r3, r2]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	223b      	movs	r2, #59	@ 0x3b
 8016842:	2101      	movs	r1, #1
 8016844:	5499      	strb	r1, [r3, r2]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	223c      	movs	r2, #60	@ 0x3c
 801684a:	2101      	movs	r1, #1
 801684c:	5499      	strb	r1, [r3, r2]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	223d      	movs	r2, #61	@ 0x3d
 8016852:	2101      	movs	r1, #1
 8016854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2239      	movs	r2, #57	@ 0x39
 801685a:	2101      	movs	r1, #1
 801685c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801685e:	2300      	movs	r3, #0
}
 8016860:	0018      	movs	r0, r3
 8016862:	46bd      	mov	sp, r7
 8016864:	b002      	add	sp, #8
 8016866:	bd80      	pop	{r7, pc}

08016868 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b084      	sub	sp, #16
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2239      	movs	r2, #57	@ 0x39
 8016874:	5c9b      	ldrb	r3, [r3, r2]
 8016876:	b2db      	uxtb	r3, r3
 8016878:	2b01      	cmp	r3, #1
 801687a:	d001      	beq.n	8016880 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801687c:	2301      	movs	r3, #1
 801687e:	e033      	b.n	80168e8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2239      	movs	r2, #57	@ 0x39
 8016884:	2102      	movs	r1, #2
 8016886:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	2380      	movs	r3, #128	@ 0x80
 801688e:	05db      	lsls	r3, r3, #23
 8016890:	429a      	cmp	r2, r3
 8016892:	d00e      	beq.n	80168b2 <HAL_TIM_Base_Start+0x4a>
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	4a15      	ldr	r2, [pc, #84]	@ (80168f0 <HAL_TIM_Base_Start+0x88>)
 801689a:	4293      	cmp	r3, r2
 801689c:	d009      	beq.n	80168b2 <HAL_TIM_Base_Start+0x4a>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	4a14      	ldr	r2, [pc, #80]	@ (80168f4 <HAL_TIM_Base_Start+0x8c>)
 80168a4:	4293      	cmp	r3, r2
 80168a6:	d004      	beq.n	80168b2 <HAL_TIM_Base_Start+0x4a>
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	4a12      	ldr	r2, [pc, #72]	@ (80168f8 <HAL_TIM_Base_Start+0x90>)
 80168ae:	4293      	cmp	r3, r2
 80168b0:	d111      	bne.n	80168d6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	689b      	ldr	r3, [r3, #8]
 80168b8:	2207      	movs	r2, #7
 80168ba:	4013      	ands	r3, r2
 80168bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2b06      	cmp	r3, #6
 80168c2:	d010      	beq.n	80168e6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	2101      	movs	r1, #1
 80168d0:	430a      	orrs	r2, r1
 80168d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80168d4:	e007      	b.n	80168e6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	681a      	ldr	r2, [r3, #0]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2101      	movs	r1, #1
 80168e2:	430a      	orrs	r2, r1
 80168e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80168e6:	2300      	movs	r3, #0
}
 80168e8:	0018      	movs	r0, r3
 80168ea:	46bd      	mov	sp, r7
 80168ec:	b004      	add	sp, #16
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	40000400 	.word	0x40000400
 80168f4:	40010800 	.word	0x40010800
 80168f8:	40011400 	.word	0x40011400

080168fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	6a1b      	ldr	r3, [r3, #32]
 801690a:	4a0a      	ldr	r2, [pc, #40]	@ (8016934 <HAL_TIM_Base_Stop+0x38>)
 801690c:	4013      	ands	r3, r2
 801690e:	d107      	bne.n	8016920 <HAL_TIM_Base_Stop+0x24>
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	681a      	ldr	r2, [r3, #0]
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2101      	movs	r1, #1
 801691c:	438a      	bics	r2, r1
 801691e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2239      	movs	r2, #57	@ 0x39
 8016924:	2101      	movs	r1, #1
 8016926:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016928:	2300      	movs	r3, #0
}
 801692a:	0018      	movs	r0, r3
 801692c:	46bd      	mov	sp, r7
 801692e:	b002      	add	sp, #8
 8016930:	bd80      	pop	{r7, pc}
 8016932:	46c0      	nop			@ (mov r8, r8)
 8016934:	00001111 	.word	0x00001111

08016938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d101      	bne.n	801694a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016946:	2301      	movs	r3, #1
 8016948:	e032      	b.n	80169b0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2239      	movs	r2, #57	@ 0x39
 801694e:	5c9b      	ldrb	r3, [r3, r2]
 8016950:	b2db      	uxtb	r3, r3
 8016952:	2b00      	cmp	r3, #0
 8016954:	d107      	bne.n	8016966 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2238      	movs	r2, #56	@ 0x38
 801695a:	2100      	movs	r1, #0
 801695c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	0018      	movs	r0, r3
 8016962:	f7f7 faab 	bl	800debc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2239      	movs	r2, #57	@ 0x39
 801696a:	2102      	movs	r1, #2
 801696c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681a      	ldr	r2, [r3, #0]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	3304      	adds	r3, #4
 8016976:	0019      	movs	r1, r3
 8016978:	0010      	movs	r0, r2
 801697a:	f000 f975 	bl	8016c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	223e      	movs	r2, #62	@ 0x3e
 8016982:	2101      	movs	r1, #1
 8016984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	223a      	movs	r2, #58	@ 0x3a
 801698a:	2101      	movs	r1, #1
 801698c:	5499      	strb	r1, [r3, r2]
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	223b      	movs	r2, #59	@ 0x3b
 8016992:	2101      	movs	r1, #1
 8016994:	5499      	strb	r1, [r3, r2]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	223c      	movs	r2, #60	@ 0x3c
 801699a:	2101      	movs	r1, #1
 801699c:	5499      	strb	r1, [r3, r2]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	223d      	movs	r2, #61	@ 0x3d
 80169a2:	2101      	movs	r1, #1
 80169a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2239      	movs	r2, #57	@ 0x39
 80169aa:	2101      	movs	r1, #1
 80169ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80169ae:	2300      	movs	r3, #0
}
 80169b0:	0018      	movs	r0, r3
 80169b2:	46bd      	mov	sp, r7
 80169b4:	b002      	add	sp, #8
 80169b6:	bd80      	pop	{r7, pc}

080169b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b084      	sub	sp, #16
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d108      	bne.n	80169da <HAL_TIM_PWM_Start+0x22>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	223a      	movs	r2, #58	@ 0x3a
 80169cc:	5c9b      	ldrb	r3, [r3, r2]
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	3b01      	subs	r3, #1
 80169d2:	1e5a      	subs	r2, r3, #1
 80169d4:	4193      	sbcs	r3, r2
 80169d6:	b2db      	uxtb	r3, r3
 80169d8:	e01f      	b.n	8016a1a <HAL_TIM_PWM_Start+0x62>
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	2b04      	cmp	r3, #4
 80169de:	d108      	bne.n	80169f2 <HAL_TIM_PWM_Start+0x3a>
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	223b      	movs	r2, #59	@ 0x3b
 80169e4:	5c9b      	ldrb	r3, [r3, r2]
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	3b01      	subs	r3, #1
 80169ea:	1e5a      	subs	r2, r3, #1
 80169ec:	4193      	sbcs	r3, r2
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	e013      	b.n	8016a1a <HAL_TIM_PWM_Start+0x62>
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	2b08      	cmp	r3, #8
 80169f6:	d108      	bne.n	8016a0a <HAL_TIM_PWM_Start+0x52>
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	223c      	movs	r2, #60	@ 0x3c
 80169fc:	5c9b      	ldrb	r3, [r3, r2]
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	3b01      	subs	r3, #1
 8016a02:	1e5a      	subs	r2, r3, #1
 8016a04:	4193      	sbcs	r3, r2
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	e007      	b.n	8016a1a <HAL_TIM_PWM_Start+0x62>
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	223d      	movs	r2, #61	@ 0x3d
 8016a0e:	5c9b      	ldrb	r3, [r3, r2]
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	3b01      	subs	r3, #1
 8016a14:	1e5a      	subs	r2, r3, #1
 8016a16:	4193      	sbcs	r3, r2
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d001      	beq.n	8016a22 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016a1e:	2301      	movs	r3, #1
 8016a20:	e052      	b.n	8016ac8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d104      	bne.n	8016a32 <HAL_TIM_PWM_Start+0x7a>
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	223a      	movs	r2, #58	@ 0x3a
 8016a2c:	2102      	movs	r1, #2
 8016a2e:	5499      	strb	r1, [r3, r2]
 8016a30:	e013      	b.n	8016a5a <HAL_TIM_PWM_Start+0xa2>
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	2b04      	cmp	r3, #4
 8016a36:	d104      	bne.n	8016a42 <HAL_TIM_PWM_Start+0x8a>
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	223b      	movs	r2, #59	@ 0x3b
 8016a3c:	2102      	movs	r1, #2
 8016a3e:	5499      	strb	r1, [r3, r2]
 8016a40:	e00b      	b.n	8016a5a <HAL_TIM_PWM_Start+0xa2>
 8016a42:	683b      	ldr	r3, [r7, #0]
 8016a44:	2b08      	cmp	r3, #8
 8016a46:	d104      	bne.n	8016a52 <HAL_TIM_PWM_Start+0x9a>
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	223c      	movs	r2, #60	@ 0x3c
 8016a4c:	2102      	movs	r1, #2
 8016a4e:	5499      	strb	r1, [r3, r2]
 8016a50:	e003      	b.n	8016a5a <HAL_TIM_PWM_Start+0xa2>
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	223d      	movs	r2, #61	@ 0x3d
 8016a56:	2102      	movs	r1, #2
 8016a58:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	6839      	ldr	r1, [r7, #0]
 8016a60:	2201      	movs	r2, #1
 8016a62:	0018      	movs	r0, r3
 8016a64:	f000 fa62 	bl	8016f2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	2380      	movs	r3, #128	@ 0x80
 8016a6e:	05db      	lsls	r3, r3, #23
 8016a70:	429a      	cmp	r2, r3
 8016a72:	d00e      	beq.n	8016a92 <HAL_TIM_PWM_Start+0xda>
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	4a15      	ldr	r2, [pc, #84]	@ (8016ad0 <HAL_TIM_PWM_Start+0x118>)
 8016a7a:	4293      	cmp	r3, r2
 8016a7c:	d009      	beq.n	8016a92 <HAL_TIM_PWM_Start+0xda>
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	4a14      	ldr	r2, [pc, #80]	@ (8016ad4 <HAL_TIM_PWM_Start+0x11c>)
 8016a84:	4293      	cmp	r3, r2
 8016a86:	d004      	beq.n	8016a92 <HAL_TIM_PWM_Start+0xda>
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	4a12      	ldr	r2, [pc, #72]	@ (8016ad8 <HAL_TIM_PWM_Start+0x120>)
 8016a8e:	4293      	cmp	r3, r2
 8016a90:	d111      	bne.n	8016ab6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	689b      	ldr	r3, [r3, #8]
 8016a98:	2207      	movs	r2, #7
 8016a9a:	4013      	ands	r3, r2
 8016a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	2b06      	cmp	r3, #6
 8016aa2:	d010      	beq.n	8016ac6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	681a      	ldr	r2, [r3, #0]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2101      	movs	r1, #1
 8016ab0:	430a      	orrs	r2, r1
 8016ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016ab4:	e007      	b.n	8016ac6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	681a      	ldr	r2, [r3, #0]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2101      	movs	r1, #1
 8016ac2:	430a      	orrs	r2, r1
 8016ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016ac6:	2300      	movs	r3, #0
}
 8016ac8:	0018      	movs	r0, r3
 8016aca:	46bd      	mov	sp, r7
 8016acc:	b004      	add	sp, #16
 8016ace:	bd80      	pop	{r7, pc}
 8016ad0:	40000400 	.word	0x40000400
 8016ad4:	40010800 	.word	0x40010800
 8016ad8:	40011400 	.word	0x40011400

08016adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b086      	sub	sp, #24
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	60b9      	str	r1, [r7, #8]
 8016ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016ae8:	2317      	movs	r3, #23
 8016aea:	18fb      	adds	r3, r7, r3
 8016aec:	2200      	movs	r2, #0
 8016aee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	2238      	movs	r2, #56	@ 0x38
 8016af4:	5c9b      	ldrb	r3, [r3, r2]
 8016af6:	2b01      	cmp	r3, #1
 8016af8:	d101      	bne.n	8016afe <HAL_TIM_PWM_ConfigChannel+0x22>
 8016afa:	2302      	movs	r3, #2
 8016afc:	e0ad      	b.n	8016c5a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	2238      	movs	r2, #56	@ 0x38
 8016b02:	2101      	movs	r1, #1
 8016b04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	2b0c      	cmp	r3, #12
 8016b0a:	d100      	bne.n	8016b0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8016b0c:	e076      	b.n	8016bfc <HAL_TIM_PWM_ConfigChannel+0x120>
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2b0c      	cmp	r3, #12
 8016b12:	d900      	bls.n	8016b16 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016b14:	e095      	b.n	8016c42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	2b08      	cmp	r3, #8
 8016b1a:	d04e      	beq.n	8016bba <HAL_TIM_PWM_ConfigChannel+0xde>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2b08      	cmp	r3, #8
 8016b20:	d900      	bls.n	8016b24 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016b22:	e08e      	b.n	8016c42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d003      	beq.n	8016b32 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2b04      	cmp	r3, #4
 8016b2e:	d021      	beq.n	8016b74 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016b30:	e087      	b.n	8016c42 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	68ba      	ldr	r2, [r7, #8]
 8016b38:	0011      	movs	r1, r2
 8016b3a:	0018      	movs	r0, r3
 8016b3c:	f000 f8f2 	bl	8016d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	699a      	ldr	r2, [r3, #24]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2108      	movs	r1, #8
 8016b4c:	430a      	orrs	r2, r1
 8016b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	699a      	ldr	r2, [r3, #24]
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2104      	movs	r1, #4
 8016b5c:	438a      	bics	r2, r1
 8016b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	6999      	ldr	r1, [r3, #24]
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	68da      	ldr	r2, [r3, #12]
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	430a      	orrs	r2, r1
 8016b70:	619a      	str	r2, [r3, #24]
      break;
 8016b72:	e06b      	b.n	8016c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	68ba      	ldr	r2, [r7, #8]
 8016b7a:	0011      	movs	r1, r2
 8016b7c:	0018      	movs	r0, r3
 8016b7e:	f000 f90d 	bl	8016d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	699a      	ldr	r2, [r3, #24]
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2180      	movs	r1, #128	@ 0x80
 8016b8e:	0109      	lsls	r1, r1, #4
 8016b90:	430a      	orrs	r2, r1
 8016b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	699a      	ldr	r2, [r3, #24]
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	4931      	ldr	r1, [pc, #196]	@ (8016c64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016ba0:	400a      	ands	r2, r1
 8016ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	6999      	ldr	r1, [r3, #24]
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	021a      	lsls	r2, r3, #8
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	430a      	orrs	r2, r1
 8016bb6:	619a      	str	r2, [r3, #24]
      break;
 8016bb8:	e048      	b.n	8016c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	68ba      	ldr	r2, [r7, #8]
 8016bc0:	0011      	movs	r1, r2
 8016bc2:	0018      	movs	r0, r3
 8016bc4:	f000 f92c 	bl	8016e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	69da      	ldr	r2, [r3, #28]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	2108      	movs	r1, #8
 8016bd4:	430a      	orrs	r2, r1
 8016bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	69da      	ldr	r2, [r3, #28]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	2104      	movs	r1, #4
 8016be4:	438a      	bics	r2, r1
 8016be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	69d9      	ldr	r1, [r3, #28]
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	68da      	ldr	r2, [r3, #12]
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	430a      	orrs	r2, r1
 8016bf8:	61da      	str	r2, [r3, #28]
      break;
 8016bfa:	e027      	b.n	8016c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	68ba      	ldr	r2, [r7, #8]
 8016c02:	0011      	movs	r1, r2
 8016c04:	0018      	movs	r0, r3
 8016c06:	f000 f94b 	bl	8016ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	69da      	ldr	r2, [r3, #28]
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2180      	movs	r1, #128	@ 0x80
 8016c16:	0109      	lsls	r1, r1, #4
 8016c18:	430a      	orrs	r2, r1
 8016c1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	69da      	ldr	r2, [r3, #28]
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	490f      	ldr	r1, [pc, #60]	@ (8016c64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016c28:	400a      	ands	r2, r1
 8016c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	69d9      	ldr	r1, [r3, #28]
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	021a      	lsls	r2, r3, #8
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	430a      	orrs	r2, r1
 8016c3e:	61da      	str	r2, [r3, #28]
      break;
 8016c40:	e004      	b.n	8016c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016c42:	2317      	movs	r3, #23
 8016c44:	18fb      	adds	r3, r7, r3
 8016c46:	2201      	movs	r2, #1
 8016c48:	701a      	strb	r2, [r3, #0]
      break;
 8016c4a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	2238      	movs	r2, #56	@ 0x38
 8016c50:	2100      	movs	r1, #0
 8016c52:	5499      	strb	r1, [r3, r2]

  return status;
 8016c54:	2317      	movs	r3, #23
 8016c56:	18fb      	adds	r3, r7, r3
 8016c58:	781b      	ldrb	r3, [r3, #0]
}
 8016c5a:	0018      	movs	r0, r3
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	b006      	add	sp, #24
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	46c0      	nop			@ (mov r8, r8)
 8016c64:	fffffbff 	.word	0xfffffbff

08016c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b084      	sub	sp, #16
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016c78:	687a      	ldr	r2, [r7, #4]
 8016c7a:	2380      	movs	r3, #128	@ 0x80
 8016c7c:	05db      	lsls	r3, r3, #23
 8016c7e:	429a      	cmp	r2, r3
 8016c80:	d00b      	beq.n	8016c9a <TIM_Base_SetConfig+0x32>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	4a23      	ldr	r2, [pc, #140]	@ (8016d14 <TIM_Base_SetConfig+0xac>)
 8016c86:	4293      	cmp	r3, r2
 8016c88:	d007      	beq.n	8016c9a <TIM_Base_SetConfig+0x32>
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	4a22      	ldr	r2, [pc, #136]	@ (8016d18 <TIM_Base_SetConfig+0xb0>)
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	d003      	beq.n	8016c9a <TIM_Base_SetConfig+0x32>
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	4a21      	ldr	r2, [pc, #132]	@ (8016d1c <TIM_Base_SetConfig+0xb4>)
 8016c96:	4293      	cmp	r3, r2
 8016c98:	d108      	bne.n	8016cac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	2270      	movs	r2, #112	@ 0x70
 8016c9e:	4393      	bics	r3, r2
 8016ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	685b      	ldr	r3, [r3, #4]
 8016ca6:	68fa      	ldr	r2, [r7, #12]
 8016ca8:	4313      	orrs	r3, r2
 8016caa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	2380      	movs	r3, #128	@ 0x80
 8016cb0:	05db      	lsls	r3, r3, #23
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d00b      	beq.n	8016cce <TIM_Base_SetConfig+0x66>
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	4a16      	ldr	r2, [pc, #88]	@ (8016d14 <TIM_Base_SetConfig+0xac>)
 8016cba:	4293      	cmp	r3, r2
 8016cbc:	d007      	beq.n	8016cce <TIM_Base_SetConfig+0x66>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	4a15      	ldr	r2, [pc, #84]	@ (8016d18 <TIM_Base_SetConfig+0xb0>)
 8016cc2:	4293      	cmp	r3, r2
 8016cc4:	d003      	beq.n	8016cce <TIM_Base_SetConfig+0x66>
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	4a14      	ldr	r2, [pc, #80]	@ (8016d1c <TIM_Base_SetConfig+0xb4>)
 8016cca:	4293      	cmp	r3, r2
 8016ccc:	d108      	bne.n	8016ce0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	4a13      	ldr	r2, [pc, #76]	@ (8016d20 <TIM_Base_SetConfig+0xb8>)
 8016cd2:	4013      	ands	r3, r2
 8016cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016cd6:	683b      	ldr	r3, [r7, #0]
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	68fa      	ldr	r2, [r7, #12]
 8016cdc:	4313      	orrs	r3, r2
 8016cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	2280      	movs	r2, #128	@ 0x80
 8016ce4:	4393      	bics	r3, r2
 8016ce6:	001a      	movs	r2, r3
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	691b      	ldr	r3, [r3, #16]
 8016cec:	4313      	orrs	r3, r2
 8016cee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	68fa      	ldr	r2, [r7, #12]
 8016cf4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	689a      	ldr	r2, [r3, #8]
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	681a      	ldr	r2, [r3, #0]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2201      	movs	r2, #1
 8016d0a:	615a      	str	r2, [r3, #20]
}
 8016d0c:	46c0      	nop			@ (mov r8, r8)
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	b004      	add	sp, #16
 8016d12:	bd80      	pop	{r7, pc}
 8016d14:	40000400 	.word	0x40000400
 8016d18:	40010800 	.word	0x40010800
 8016d1c:	40011400 	.word	0x40011400
 8016d20:	fffffcff 	.word	0xfffffcff

08016d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b086      	sub	sp, #24
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6a1b      	ldr	r3, [r3, #32]
 8016d32:	2201      	movs	r2, #1
 8016d34:	4393      	bics	r3, r2
 8016d36:	001a      	movs	r2, r3
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6a1b      	ldr	r3, [r3, #32]
 8016d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	699b      	ldr	r3, [r3, #24]
 8016d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2270      	movs	r2, #112	@ 0x70
 8016d52:	4393      	bics	r3, r2
 8016d54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	2203      	movs	r2, #3
 8016d5a:	4393      	bics	r3, r2
 8016d5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	68fa      	ldr	r2, [r7, #12]
 8016d64:	4313      	orrs	r3, r2
 8016d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016d68:	697b      	ldr	r3, [r7, #20]
 8016d6a:	2202      	movs	r2, #2
 8016d6c:	4393      	bics	r3, r2
 8016d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	689b      	ldr	r3, [r3, #8]
 8016d74:	697a      	ldr	r2, [r7, #20]
 8016d76:	4313      	orrs	r3, r2
 8016d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	693a      	ldr	r2, [r7, #16]
 8016d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	68fa      	ldr	r2, [r7, #12]
 8016d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	685a      	ldr	r2, [r3, #4]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	697a      	ldr	r2, [r7, #20]
 8016d92:	621a      	str	r2, [r3, #32]
}
 8016d94:	46c0      	nop			@ (mov r8, r8)
 8016d96:	46bd      	mov	sp, r7
 8016d98:	b006      	add	sp, #24
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b086      	sub	sp, #24
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	6a1b      	ldr	r3, [r3, #32]
 8016daa:	2210      	movs	r2, #16
 8016dac:	4393      	bics	r3, r2
 8016dae:	001a      	movs	r2, r3
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6a1b      	ldr	r3, [r3, #32]
 8016db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	699b      	ldr	r3, [r3, #24]
 8016dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	4a13      	ldr	r2, [pc, #76]	@ (8016e18 <TIM_OC2_SetConfig+0x7c>)
 8016dca:	4013      	ands	r3, r2
 8016dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	4a12      	ldr	r2, [pc, #72]	@ (8016e1c <TIM_OC2_SetConfig+0x80>)
 8016dd2:	4013      	ands	r3, r2
 8016dd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	021b      	lsls	r3, r3, #8
 8016ddc:	68fa      	ldr	r2, [r7, #12]
 8016dde:	4313      	orrs	r3, r2
 8016de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	2220      	movs	r2, #32
 8016de6:	4393      	bics	r3, r2
 8016de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	689b      	ldr	r3, [r3, #8]
 8016dee:	011b      	lsls	r3, r3, #4
 8016df0:	697a      	ldr	r2, [r7, #20]
 8016df2:	4313      	orrs	r3, r2
 8016df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	693a      	ldr	r2, [r7, #16]
 8016dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	68fa      	ldr	r2, [r7, #12]
 8016e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	685a      	ldr	r2, [r3, #4]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	697a      	ldr	r2, [r7, #20]
 8016e0e:	621a      	str	r2, [r3, #32]
}
 8016e10:	46c0      	nop			@ (mov r8, r8)
 8016e12:	46bd      	mov	sp, r7
 8016e14:	b006      	add	sp, #24
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	ffff8fff 	.word	0xffff8fff
 8016e1c:	fffffcff 	.word	0xfffffcff

08016e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b086      	sub	sp, #24
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	6a1b      	ldr	r3, [r3, #32]
 8016e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8016e98 <TIM_OC3_SetConfig+0x78>)
 8016e30:	401a      	ands	r2, r3
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	6a1b      	ldr	r3, [r3, #32]
 8016e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	69db      	ldr	r3, [r3, #28]
 8016e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	2270      	movs	r2, #112	@ 0x70
 8016e4c:	4393      	bics	r3, r2
 8016e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	2203      	movs	r2, #3
 8016e54:	4393      	bics	r3, r2
 8016e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	68fa      	ldr	r2, [r7, #12]
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016e62:	697b      	ldr	r3, [r7, #20]
 8016e64:	4a0d      	ldr	r2, [pc, #52]	@ (8016e9c <TIM_OC3_SetConfig+0x7c>)
 8016e66:	4013      	ands	r3, r2
 8016e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	689b      	ldr	r3, [r3, #8]
 8016e6e:	021b      	lsls	r3, r3, #8
 8016e70:	697a      	ldr	r2, [r7, #20]
 8016e72:	4313      	orrs	r3, r2
 8016e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	693a      	ldr	r2, [r7, #16]
 8016e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	68fa      	ldr	r2, [r7, #12]
 8016e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	685a      	ldr	r2, [r3, #4]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	697a      	ldr	r2, [r7, #20]
 8016e8e:	621a      	str	r2, [r3, #32]
}
 8016e90:	46c0      	nop			@ (mov r8, r8)
 8016e92:	46bd      	mov	sp, r7
 8016e94:	b006      	add	sp, #24
 8016e96:	bd80      	pop	{r7, pc}
 8016e98:	fffffeff 	.word	0xfffffeff
 8016e9c:	fffffdff 	.word	0xfffffdff

08016ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b086      	sub	sp, #24
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6a1b      	ldr	r3, [r3, #32]
 8016eae:	4a1b      	ldr	r2, [pc, #108]	@ (8016f1c <TIM_OC4_SetConfig+0x7c>)
 8016eb0:	401a      	ands	r2, r3
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6a1b      	ldr	r3, [r3, #32]
 8016eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	69db      	ldr	r3, [r3, #28]
 8016ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	4a15      	ldr	r2, [pc, #84]	@ (8016f20 <TIM_OC4_SetConfig+0x80>)
 8016ecc:	4013      	ands	r3, r2
 8016ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	4a14      	ldr	r2, [pc, #80]	@ (8016f24 <TIM_OC4_SetConfig+0x84>)
 8016ed4:	4013      	ands	r3, r2
 8016ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	021b      	lsls	r3, r3, #8
 8016ede:	68fa      	ldr	r2, [r7, #12]
 8016ee0:	4313      	orrs	r3, r2
 8016ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016ee4:	697b      	ldr	r3, [r7, #20]
 8016ee6:	4a10      	ldr	r2, [pc, #64]	@ (8016f28 <TIM_OC4_SetConfig+0x88>)
 8016ee8:	4013      	ands	r3, r2
 8016eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	689b      	ldr	r3, [r3, #8]
 8016ef0:	031b      	lsls	r3, r3, #12
 8016ef2:	697a      	ldr	r2, [r7, #20]
 8016ef4:	4313      	orrs	r3, r2
 8016ef6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	693a      	ldr	r2, [r7, #16]
 8016efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	68fa      	ldr	r2, [r7, #12]
 8016f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	685a      	ldr	r2, [r3, #4]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	697a      	ldr	r2, [r7, #20]
 8016f10:	621a      	str	r2, [r3, #32]
}
 8016f12:	46c0      	nop			@ (mov r8, r8)
 8016f14:	46bd      	mov	sp, r7
 8016f16:	b006      	add	sp, #24
 8016f18:	bd80      	pop	{r7, pc}
 8016f1a:	46c0      	nop			@ (mov r8, r8)
 8016f1c:	ffffefff 	.word	0xffffefff
 8016f20:	ffff8fff 	.word	0xffff8fff
 8016f24:	fffffcff 	.word	0xfffffcff
 8016f28:	ffffdfff 	.word	0xffffdfff

08016f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b086      	sub	sp, #24
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	60f8      	str	r0, [r7, #12]
 8016f34:	60b9      	str	r1, [r7, #8]
 8016f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	221f      	movs	r2, #31
 8016f3c:	4013      	ands	r3, r2
 8016f3e:	2201      	movs	r2, #1
 8016f40:	409a      	lsls	r2, r3
 8016f42:	0013      	movs	r3, r2
 8016f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	6a1b      	ldr	r3, [r3, #32]
 8016f4a:	697a      	ldr	r2, [r7, #20]
 8016f4c:	43d2      	mvns	r2, r2
 8016f4e:	401a      	ands	r2, r3
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	6a1a      	ldr	r2, [r3, #32]
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	211f      	movs	r1, #31
 8016f5c:	400b      	ands	r3, r1
 8016f5e:	6879      	ldr	r1, [r7, #4]
 8016f60:	4099      	lsls	r1, r3
 8016f62:	000b      	movs	r3, r1
 8016f64:	431a      	orrs	r2, r3
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	621a      	str	r2, [r3, #32]
}
 8016f6a:	46c0      	nop			@ (mov r8, r8)
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	b006      	add	sp, #24
 8016f70:	bd80      	pop	{r7, pc}
	...

08016f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b084      	sub	sp, #16
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2238      	movs	r2, #56	@ 0x38
 8016f82:	5c9b      	ldrb	r3, [r3, r2]
 8016f84:	2b01      	cmp	r3, #1
 8016f86:	d101      	bne.n	8016f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016f88:	2302      	movs	r3, #2
 8016f8a:	e047      	b.n	801701c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2238      	movs	r2, #56	@ 0x38
 8016f90:	2101      	movs	r1, #1
 8016f92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2239      	movs	r2, #57	@ 0x39
 8016f98:	2102      	movs	r1, #2
 8016f9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	689b      	ldr	r3, [r3, #8]
 8016faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2270      	movs	r2, #112	@ 0x70
 8016fb0:	4393      	bics	r3, r2
 8016fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	68fa      	ldr	r2, [r7, #12]
 8016fba:	4313      	orrs	r3, r2
 8016fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	68fa      	ldr	r2, [r7, #12]
 8016fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681a      	ldr	r2, [r3, #0]
 8016fca:	2380      	movs	r3, #128	@ 0x80
 8016fcc:	05db      	lsls	r3, r3, #23
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d00e      	beq.n	8016ff0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	4a13      	ldr	r2, [pc, #76]	@ (8017024 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016fd8:	4293      	cmp	r3, r2
 8016fda:	d009      	beq.n	8016ff0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	4a11      	ldr	r2, [pc, #68]	@ (8017028 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8016fe2:	4293      	cmp	r3, r2
 8016fe4:	d004      	beq.n	8016ff0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	4a10      	ldr	r2, [pc, #64]	@ (801702c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8016fec:	4293      	cmp	r3, r2
 8016fee:	d10c      	bne.n	801700a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	2280      	movs	r2, #128	@ 0x80
 8016ff4:	4393      	bics	r3, r2
 8016ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	68ba      	ldr	r2, [r7, #8]
 8016ffe:	4313      	orrs	r3, r2
 8017000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	68ba      	ldr	r2, [r7, #8]
 8017008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	2239      	movs	r2, #57	@ 0x39
 801700e:	2101      	movs	r1, #1
 8017010:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2238      	movs	r2, #56	@ 0x38
 8017016:	2100      	movs	r1, #0
 8017018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801701a:	2300      	movs	r3, #0
}
 801701c:	0018      	movs	r0, r3
 801701e:	46bd      	mov	sp, r7
 8017020:	b004      	add	sp, #16
 8017022:	bd80      	pop	{r7, pc}
 8017024:	40000400 	.word	0x40000400
 8017028:	40010800 	.word	0x40010800
 801702c:	40011400 	.word	0x40011400

08017030 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b082      	sub	sp, #8
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2238      	movs	r2, #56	@ 0x38
 801703e:	5c9b      	ldrb	r3, [r3, r2]
 8017040:	2b01      	cmp	r3, #1
 8017042:	d101      	bne.n	8017048 <HAL_TIMEx_RemapConfig+0x18>
 8017044:	2302      	movs	r3, #2
 8017046:	e00c      	b.n	8017062 <HAL_TIMEx_RemapConfig+0x32>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2238      	movs	r2, #56	@ 0x38
 801704c:	2101      	movs	r1, #1
 801704e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	683a      	ldr	r2, [r7, #0]
 8017056:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2238      	movs	r2, #56	@ 0x38
 801705c:	2100      	movs	r1, #0
 801705e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017060:	2300      	movs	r3, #0
}
 8017062:	0018      	movs	r0, r3
 8017064:	46bd      	mov	sp, r7
 8017066:	b002      	add	sp, #8
 8017068:	bd80      	pop	{r7, pc}
	...

0801706c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b082      	sub	sp, #8
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d101      	bne.n	801707e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801707a:	2301      	movs	r3, #1
 801707c:	e053      	b.n	8017126 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017082:	2b00      	cmp	r3, #0
 8017084:	d116      	bne.n	80170b4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2278      	movs	r2, #120	@ 0x78
 801708a:	2100      	movs	r1, #0
 801708c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	0018      	movs	r0, r3
 8017092:	f000 fd65 	bl	8017b60 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	22b0      	movs	r2, #176	@ 0xb0
 801709a:	589b      	ldr	r3, [r3, r2]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d103      	bne.n	80170a8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	21b0      	movs	r1, #176	@ 0xb0
 80170a4:	4a22      	ldr	r2, [pc, #136]	@ (8017130 <HAL_UART_Init+0xc4>)
 80170a6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	22b0      	movs	r2, #176	@ 0xb0
 80170ac:	589b      	ldr	r3, [r3, r2]
 80170ae:	687a      	ldr	r2, [r7, #4]
 80170b0:	0010      	movs	r0, r2
 80170b2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2224      	movs	r2, #36	@ 0x24
 80170b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	681a      	ldr	r2, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2101      	movs	r1, #1
 80170c6:	438a      	bics	r2, r1
 80170c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	0018      	movs	r0, r3
 80170ce:	f000 fd8b 	bl	8017be8 <UART_SetConfig>
 80170d2:	0003      	movs	r3, r0
 80170d4:	2b01      	cmp	r3, #1
 80170d6:	d101      	bne.n	80170dc <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80170d8:	2301      	movs	r3, #1
 80170da:	e024      	b.n	8017126 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d003      	beq.n	80170ec <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	0018      	movs	r0, r3
 80170e8:	f001 f81c 	bl	8018124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	685a      	ldr	r2, [r3, #4]
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	490f      	ldr	r1, [pc, #60]	@ (8017134 <HAL_UART_Init+0xc8>)
 80170f8:	400a      	ands	r2, r1
 80170fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	689a      	ldr	r2, [r3, #8]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	212a      	movs	r1, #42	@ 0x2a
 8017108:	438a      	bics	r2, r1
 801710a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	2101      	movs	r1, #1
 8017118:	430a      	orrs	r2, r1
 801711a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	0018      	movs	r0, r3
 8017120:	f001 f8b4 	bl	801828c <UART_CheckIdleState>
 8017124:	0003      	movs	r3, r0
}
 8017126:	0018      	movs	r0, r3
 8017128:	46bd      	mov	sp, r7
 801712a:	b002      	add	sp, #8
 801712c:	bd80      	pop	{r7, pc}
 801712e:	46c0      	nop			@ (mov r8, r8)
 8017130:	0800e139 	.word	0x0800e139
 8017134:	ffffb7ff 	.word	0xffffb7ff

08017138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08a      	sub	sp, #40	@ 0x28
 801713c:	af02      	add	r7, sp, #8
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	60b9      	str	r1, [r7, #8]
 8017142:	603b      	str	r3, [r7, #0]
 8017144:	1dbb      	adds	r3, r7, #6
 8017146:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801714c:	2b20      	cmp	r3, #32
 801714e:	d000      	beq.n	8017152 <HAL_UART_Transmit+0x1a>
 8017150:	e08c      	b.n	801726c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d003      	beq.n	8017160 <HAL_UART_Transmit+0x28>
 8017158:	1dbb      	adds	r3, r7, #6
 801715a:	881b      	ldrh	r3, [r3, #0]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d101      	bne.n	8017164 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017160:	2301      	movs	r3, #1
 8017162:	e084      	b.n	801726e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	689a      	ldr	r2, [r3, #8]
 8017168:	2380      	movs	r3, #128	@ 0x80
 801716a:	015b      	lsls	r3, r3, #5
 801716c:	429a      	cmp	r2, r3
 801716e:	d109      	bne.n	8017184 <HAL_UART_Transmit+0x4c>
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	691b      	ldr	r3, [r3, #16]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d105      	bne.n	8017184 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	2201      	movs	r2, #1
 801717c:	4013      	ands	r3, r2
 801717e:	d001      	beq.n	8017184 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017180:	2301      	movs	r3, #1
 8017182:	e074      	b.n	801726e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	2284      	movs	r2, #132	@ 0x84
 8017188:	2100      	movs	r1, #0
 801718a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	2221      	movs	r2, #33	@ 0x21
 8017190:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017192:	f7f7 fda5 	bl	800ece0 <HAL_GetTick>
 8017196:	0003      	movs	r3, r0
 8017198:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	1dba      	adds	r2, r7, #6
 801719e:	2150      	movs	r1, #80	@ 0x50
 80171a0:	8812      	ldrh	r2, [r2, #0]
 80171a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	1dba      	adds	r2, r7, #6
 80171a8:	2152      	movs	r1, #82	@ 0x52
 80171aa:	8812      	ldrh	r2, [r2, #0]
 80171ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	689a      	ldr	r2, [r3, #8]
 80171b2:	2380      	movs	r3, #128	@ 0x80
 80171b4:	015b      	lsls	r3, r3, #5
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d108      	bne.n	80171cc <HAL_UART_Transmit+0x94>
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	691b      	ldr	r3, [r3, #16]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d104      	bne.n	80171cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80171c2:	2300      	movs	r3, #0
 80171c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	61bb      	str	r3, [r7, #24]
 80171ca:	e003      	b.n	80171d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80171d0:	2300      	movs	r3, #0
 80171d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80171d4:	e02f      	b.n	8017236 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80171d6:	697a      	ldr	r2, [r7, #20]
 80171d8:	68f8      	ldr	r0, [r7, #12]
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	0013      	movs	r3, r2
 80171e0:	2200      	movs	r2, #0
 80171e2:	2180      	movs	r1, #128	@ 0x80
 80171e4:	f001 f8fa 	bl	80183dc <UART_WaitOnFlagUntilTimeout>
 80171e8:	1e03      	subs	r3, r0, #0
 80171ea:	d004      	beq.n	80171f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	2220      	movs	r2, #32
 80171f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80171f2:	2303      	movs	r3, #3
 80171f4:	e03b      	b.n	801726e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80171f6:	69fb      	ldr	r3, [r7, #28]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10b      	bne.n	8017214 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	881b      	ldrh	r3, [r3, #0]
 8017200:	001a      	movs	r2, r3
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	05d2      	lsls	r2, r2, #23
 8017208:	0dd2      	lsrs	r2, r2, #23
 801720a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801720c:	69bb      	ldr	r3, [r7, #24]
 801720e:	3302      	adds	r3, #2
 8017210:	61bb      	str	r3, [r7, #24]
 8017212:	e007      	b.n	8017224 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017214:	69fb      	ldr	r3, [r7, #28]
 8017216:	781a      	ldrb	r2, [r3, #0]
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801721e:	69fb      	ldr	r3, [r7, #28]
 8017220:	3301      	adds	r3, #1
 8017222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	2252      	movs	r2, #82	@ 0x52
 8017228:	5a9b      	ldrh	r3, [r3, r2]
 801722a:	b29b      	uxth	r3, r3
 801722c:	3b01      	subs	r3, #1
 801722e:	b299      	uxth	r1, r3
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	2252      	movs	r2, #82	@ 0x52
 8017234:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	2252      	movs	r2, #82	@ 0x52
 801723a:	5a9b      	ldrh	r3, [r3, r2]
 801723c:	b29b      	uxth	r3, r3
 801723e:	2b00      	cmp	r3, #0
 8017240:	d1c9      	bne.n	80171d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017242:	697a      	ldr	r2, [r7, #20]
 8017244:	68f8      	ldr	r0, [r7, #12]
 8017246:	683b      	ldr	r3, [r7, #0]
 8017248:	9300      	str	r3, [sp, #0]
 801724a:	0013      	movs	r3, r2
 801724c:	2200      	movs	r2, #0
 801724e:	2140      	movs	r1, #64	@ 0x40
 8017250:	f001 f8c4 	bl	80183dc <UART_WaitOnFlagUntilTimeout>
 8017254:	1e03      	subs	r3, r0, #0
 8017256:	d004      	beq.n	8017262 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	2220      	movs	r2, #32
 801725c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801725e:	2303      	movs	r3, #3
 8017260:	e005      	b.n	801726e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2220      	movs	r2, #32
 8017266:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017268:	2300      	movs	r3, #0
 801726a:	e000      	b.n	801726e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801726c:	2302      	movs	r3, #2
  }
}
 801726e:	0018      	movs	r0, r3
 8017270:	46bd      	mov	sp, r7
 8017272:	b008      	add	sp, #32
 8017274:	bd80      	pop	{r7, pc}
	...

08017278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b088      	sub	sp, #32
 801727c:	af00      	add	r7, sp, #0
 801727e:	60f8      	str	r0, [r7, #12]
 8017280:	60b9      	str	r1, [r7, #8]
 8017282:	1dbb      	adds	r3, r7, #6
 8017284:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2280      	movs	r2, #128	@ 0x80
 801728a:	589b      	ldr	r3, [r3, r2]
 801728c:	2b20      	cmp	r3, #32
 801728e:	d14a      	bne.n	8017326 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d003      	beq.n	801729e <HAL_UART_Receive_IT+0x26>
 8017296:	1dbb      	adds	r3, r7, #6
 8017298:	881b      	ldrh	r3, [r3, #0]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d101      	bne.n	80172a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801729e:	2301      	movs	r3, #1
 80172a0:	e042      	b.n	8017328 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	689a      	ldr	r2, [r3, #8]
 80172a6:	2380      	movs	r3, #128	@ 0x80
 80172a8:	015b      	lsls	r3, r3, #5
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d109      	bne.n	80172c2 <HAL_UART_Receive_IT+0x4a>
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	691b      	ldr	r3, [r3, #16]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d105      	bne.n	80172c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	2201      	movs	r2, #1
 80172ba:	4013      	ands	r3, r2
 80172bc:	d001      	beq.n	80172c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80172be:	2301      	movs	r3, #1
 80172c0:	e032      	b.n	8017328 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2200      	movs	r2, #0
 80172c6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	4a18      	ldr	r2, [pc, #96]	@ (8017330 <HAL_UART_Receive_IT+0xb8>)
 80172ce:	4293      	cmp	r3, r2
 80172d0:	d020      	beq.n	8017314 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	685a      	ldr	r2, [r3, #4]
 80172d8:	2380      	movs	r3, #128	@ 0x80
 80172da:	041b      	lsls	r3, r3, #16
 80172dc:	4013      	ands	r3, r2
 80172de:	d019      	beq.n	8017314 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172e0:	f3ef 8310 	mrs	r3, PRIMASK
 80172e4:	613b      	str	r3, [r7, #16]
  return(result);
 80172e6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80172e8:	61fb      	str	r3, [r7, #28]
 80172ea:	2301      	movs	r3, #1
 80172ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	f383 8810 	msr	PRIMASK, r3
}
 80172f4:	46c0      	nop			@ (mov r8, r8)
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	2180      	movs	r1, #128	@ 0x80
 8017302:	04c9      	lsls	r1, r1, #19
 8017304:	430a      	orrs	r2, r1
 8017306:	601a      	str	r2, [r3, #0]
 8017308:	69fb      	ldr	r3, [r7, #28]
 801730a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801730c:	69bb      	ldr	r3, [r7, #24]
 801730e:	f383 8810 	msr	PRIMASK, r3
}
 8017312:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017314:	1dbb      	adds	r3, r7, #6
 8017316:	881a      	ldrh	r2, [r3, #0]
 8017318:	68b9      	ldr	r1, [r7, #8]
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	0018      	movs	r0, r3
 801731e:	f001 f8c7 	bl	80184b0 <UART_Start_Receive_IT>
 8017322:	0003      	movs	r3, r0
 8017324:	e000      	b.n	8017328 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017326:	2302      	movs	r3, #2
  }
}
 8017328:	0018      	movs	r0, r3
 801732a:	46bd      	mov	sp, r7
 801732c:	b008      	add	sp, #32
 801732e:	bd80      	pop	{r7, pc}
 8017330:	40004800 	.word	0x40004800

08017334 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b088      	sub	sp, #32
 8017338:	af00      	add	r7, sp, #0
 801733a:	60f8      	str	r0, [r7, #12]
 801733c:	60b9      	str	r1, [r7, #8]
 801733e:	1dbb      	adds	r3, r7, #6
 8017340:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017346:	2b20      	cmp	r3, #32
 8017348:	d000      	beq.n	801734c <HAL_UART_Transmit_DMA+0x18>
 801734a:	e077      	b.n	801743c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d003      	beq.n	801735a <HAL_UART_Transmit_DMA+0x26>
 8017352:	1dbb      	adds	r3, r7, #6
 8017354:	881b      	ldrh	r3, [r3, #0]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d101      	bne.n	801735e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801735a:	2301      	movs	r3, #1
 801735c:	e06f      	b.n	801743e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	689a      	ldr	r2, [r3, #8]
 8017362:	2380      	movs	r3, #128	@ 0x80
 8017364:	015b      	lsls	r3, r3, #5
 8017366:	429a      	cmp	r2, r3
 8017368:	d109      	bne.n	801737e <HAL_UART_Transmit_DMA+0x4a>
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	691b      	ldr	r3, [r3, #16]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d105      	bne.n	801737e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	2201      	movs	r2, #1
 8017376:	4013      	ands	r3, r2
 8017378:	d001      	beq.n	801737e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801737a:	2301      	movs	r3, #1
 801737c:	e05f      	b.n	801743e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	68ba      	ldr	r2, [r7, #8]
 8017382:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	1dba      	adds	r2, r7, #6
 8017388:	2150      	movs	r1, #80	@ 0x50
 801738a:	8812      	ldrh	r2, [r2, #0]
 801738c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	1dba      	adds	r2, r7, #6
 8017392:	2152      	movs	r1, #82	@ 0x52
 8017394:	8812      	ldrh	r2, [r2, #0]
 8017396:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	2284      	movs	r2, #132	@ 0x84
 801739c:	2100      	movs	r1, #0
 801739e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2221      	movs	r2, #33	@ 0x21
 80173a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d027      	beq.n	80173fe <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173b2:	4a25      	ldr	r2, [pc, #148]	@ (8017448 <HAL_UART_Transmit_DMA+0x114>)
 80173b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173ba:	4a24      	ldr	r2, [pc, #144]	@ (801744c <HAL_UART_Transmit_DMA+0x118>)
 80173bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173c2:	4a23      	ldr	r2, [pc, #140]	@ (8017450 <HAL_UART_Transmit_DMA+0x11c>)
 80173c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173ca:	2200      	movs	r2, #0
 80173cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80173d6:	0019      	movs	r1, r3
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	3328      	adds	r3, #40	@ 0x28
 80173de:	001a      	movs	r2, r3
 80173e0:	1dbb      	adds	r3, r7, #6
 80173e2:	881b      	ldrh	r3, [r3, #0]
 80173e4:	f7f8 f9ce 	bl	800f784 <HAL_DMA_Start_IT>
 80173e8:	1e03      	subs	r3, r0, #0
 80173ea:	d008      	beq.n	80173fe <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2284      	movs	r2, #132	@ 0x84
 80173f0:	2110      	movs	r1, #16
 80173f2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	2220      	movs	r2, #32
 80173f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80173fa:	2301      	movs	r3, #1
 80173fc:	e01f      	b.n	801743e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	2240      	movs	r2, #64	@ 0x40
 8017404:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017406:	f3ef 8310 	mrs	r3, PRIMASK
 801740a:	613b      	str	r3, [r7, #16]
  return(result);
 801740c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801740e:	61fb      	str	r3, [r7, #28]
 8017410:	2301      	movs	r3, #1
 8017412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	f383 8810 	msr	PRIMASK, r3
}
 801741a:	46c0      	nop			@ (mov r8, r8)
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	689a      	ldr	r2, [r3, #8]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2180      	movs	r1, #128	@ 0x80
 8017428:	430a      	orrs	r2, r1
 801742a:	609a      	str	r2, [r3, #8]
 801742c:	69fb      	ldr	r3, [r7, #28]
 801742e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017430:	69bb      	ldr	r3, [r7, #24]
 8017432:	f383 8810 	msr	PRIMASK, r3
}
 8017436:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8017438:	2300      	movs	r3, #0
 801743a:	e000      	b.n	801743e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801743c:	2302      	movs	r3, #2
  }
}
 801743e:	0018      	movs	r0, r3
 8017440:	46bd      	mov	sp, r7
 8017442:	b008      	add	sp, #32
 8017444:	bd80      	pop	{r7, pc}
 8017446:	46c0      	nop			@ (mov r8, r8)
 8017448:	08018895 	.word	0x08018895
 801744c:	08018931 	.word	0x08018931
 8017450:	08018ad1 	.word	0x08018ad1

08017454 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b088      	sub	sp, #32
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	1dbb      	adds	r3, r7, #6
 8017460:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2280      	movs	r2, #128	@ 0x80
 8017466:	589b      	ldr	r3, [r3, r2]
 8017468:	2b20      	cmp	r3, #32
 801746a:	d14a      	bne.n	8017502 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d003      	beq.n	801747a <HAL_UART_Receive_DMA+0x26>
 8017472:	1dbb      	adds	r3, r7, #6
 8017474:	881b      	ldrh	r3, [r3, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d101      	bne.n	801747e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801747a:	2301      	movs	r3, #1
 801747c:	e042      	b.n	8017504 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	689a      	ldr	r2, [r3, #8]
 8017482:	2380      	movs	r3, #128	@ 0x80
 8017484:	015b      	lsls	r3, r3, #5
 8017486:	429a      	cmp	r2, r3
 8017488:	d109      	bne.n	801749e <HAL_UART_Receive_DMA+0x4a>
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	691b      	ldr	r3, [r3, #16]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d105      	bne.n	801749e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	2201      	movs	r2, #1
 8017496:	4013      	ands	r3, r2
 8017498:	d001      	beq.n	801749e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801749a:	2301      	movs	r3, #1
 801749c:	e032      	b.n	8017504 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	2200      	movs	r2, #0
 80174a2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	4a18      	ldr	r2, [pc, #96]	@ (801750c <HAL_UART_Receive_DMA+0xb8>)
 80174aa:	4293      	cmp	r3, r2
 80174ac:	d020      	beq.n	80174f0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	685a      	ldr	r2, [r3, #4]
 80174b4:	2380      	movs	r3, #128	@ 0x80
 80174b6:	041b      	lsls	r3, r3, #16
 80174b8:	4013      	ands	r3, r2
 80174ba:	d019      	beq.n	80174f0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174bc:	f3ef 8310 	mrs	r3, PRIMASK
 80174c0:	613b      	str	r3, [r7, #16]
  return(result);
 80174c2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174c4:	61fb      	str	r3, [r7, #28]
 80174c6:	2301      	movs	r3, #1
 80174c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	f383 8810 	msr	PRIMASK, r3
}
 80174d0:	46c0      	nop			@ (mov r8, r8)
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	681a      	ldr	r2, [r3, #0]
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	2180      	movs	r1, #128	@ 0x80
 80174de:	04c9      	lsls	r1, r1, #19
 80174e0:	430a      	orrs	r2, r1
 80174e2:	601a      	str	r2, [r3, #0]
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174e8:	69bb      	ldr	r3, [r7, #24]
 80174ea:	f383 8810 	msr	PRIMASK, r3
}
 80174ee:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80174f0:	1dbb      	adds	r3, r7, #6
 80174f2:	881a      	ldrh	r2, [r3, #0]
 80174f4:	68b9      	ldr	r1, [r7, #8]
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	0018      	movs	r0, r3
 80174fa:	f001 f8a3 	bl	8018644 <UART_Start_Receive_DMA>
 80174fe:	0003      	movs	r3, r0
 8017500:	e000      	b.n	8017504 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017502:	2302      	movs	r3, #2
  }
}
 8017504:	0018      	movs	r0, r3
 8017506:	46bd      	mov	sp, r7
 8017508:	b008      	add	sp, #32
 801750a:	bd80      	pop	{r7, pc}
 801750c:	40004800 	.word	0x40004800

08017510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017510:	b590      	push	{r4, r7, lr}
 8017512:	b0ab      	sub	sp, #172	@ 0xac
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	69db      	ldr	r3, [r3, #28]
 801751e:	22a4      	movs	r2, #164	@ 0xa4
 8017520:	18b9      	adds	r1, r7, r2
 8017522:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	20a0      	movs	r0, #160	@ 0xa0
 801752c:	1839      	adds	r1, r7, r0
 801752e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	689b      	ldr	r3, [r3, #8]
 8017536:	219c      	movs	r1, #156	@ 0x9c
 8017538:	1879      	adds	r1, r7, r1
 801753a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801753c:	0011      	movs	r1, r2
 801753e:	18bb      	adds	r3, r7, r2
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	4a9c      	ldr	r2, [pc, #624]	@ (80177b4 <HAL_UART_IRQHandler+0x2a4>)
 8017544:	4013      	ands	r3, r2
 8017546:	2298      	movs	r2, #152	@ 0x98
 8017548:	18bc      	adds	r4, r7, r2
 801754a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801754c:	18bb      	adds	r3, r7, r2
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d114      	bne.n	801757e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017554:	187b      	adds	r3, r7, r1
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2220      	movs	r2, #32
 801755a:	4013      	ands	r3, r2
 801755c:	d00f      	beq.n	801757e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801755e:	183b      	adds	r3, r7, r0
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	2220      	movs	r2, #32
 8017564:	4013      	ands	r3, r2
 8017566:	d00a      	beq.n	801757e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801756c:	2b00      	cmp	r3, #0
 801756e:	d100      	bne.n	8017572 <HAL_UART_IRQHandler+0x62>
 8017570:	e2aa      	b.n	8017ac8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	0010      	movs	r0, r2
 801757a:	4798      	blx	r3
      }
      return;
 801757c:	e2a4      	b.n	8017ac8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801757e:	2398      	movs	r3, #152	@ 0x98
 8017580:	18fb      	adds	r3, r7, r3
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d100      	bne.n	801758a <HAL_UART_IRQHandler+0x7a>
 8017588:	e11a      	b.n	80177c0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801758a:	239c      	movs	r3, #156	@ 0x9c
 801758c:	18fb      	adds	r3, r7, r3
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2201      	movs	r2, #1
 8017592:	4013      	ands	r3, r2
 8017594:	d106      	bne.n	80175a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017596:	23a0      	movs	r3, #160	@ 0xa0
 8017598:	18fb      	adds	r3, r7, r3
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	4a86      	ldr	r2, [pc, #536]	@ (80177b8 <HAL_UART_IRQHandler+0x2a8>)
 801759e:	4013      	ands	r3, r2
 80175a0:	d100      	bne.n	80175a4 <HAL_UART_IRQHandler+0x94>
 80175a2:	e10d      	b.n	80177c0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80175a4:	23a4      	movs	r3, #164	@ 0xa4
 80175a6:	18fb      	adds	r3, r7, r3
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	2201      	movs	r2, #1
 80175ac:	4013      	ands	r3, r2
 80175ae:	d012      	beq.n	80175d6 <HAL_UART_IRQHandler+0xc6>
 80175b0:	23a0      	movs	r3, #160	@ 0xa0
 80175b2:	18fb      	adds	r3, r7, r3
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	2380      	movs	r3, #128	@ 0x80
 80175b8:	005b      	lsls	r3, r3, #1
 80175ba:	4013      	ands	r3, r2
 80175bc:	d00b      	beq.n	80175d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2201      	movs	r2, #1
 80175c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	2284      	movs	r2, #132	@ 0x84
 80175ca:	589b      	ldr	r3, [r3, r2]
 80175cc:	2201      	movs	r2, #1
 80175ce:	431a      	orrs	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2184      	movs	r1, #132	@ 0x84
 80175d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80175d6:	23a4      	movs	r3, #164	@ 0xa4
 80175d8:	18fb      	adds	r3, r7, r3
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	2202      	movs	r2, #2
 80175de:	4013      	ands	r3, r2
 80175e0:	d011      	beq.n	8017606 <HAL_UART_IRQHandler+0xf6>
 80175e2:	239c      	movs	r3, #156	@ 0x9c
 80175e4:	18fb      	adds	r3, r7, r3
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	2201      	movs	r2, #1
 80175ea:	4013      	ands	r3, r2
 80175ec:	d00b      	beq.n	8017606 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2202      	movs	r2, #2
 80175f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2284      	movs	r2, #132	@ 0x84
 80175fa:	589b      	ldr	r3, [r3, r2]
 80175fc:	2204      	movs	r2, #4
 80175fe:	431a      	orrs	r2, r3
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2184      	movs	r1, #132	@ 0x84
 8017604:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017606:	23a4      	movs	r3, #164	@ 0xa4
 8017608:	18fb      	adds	r3, r7, r3
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	2204      	movs	r2, #4
 801760e:	4013      	ands	r3, r2
 8017610:	d011      	beq.n	8017636 <HAL_UART_IRQHandler+0x126>
 8017612:	239c      	movs	r3, #156	@ 0x9c
 8017614:	18fb      	adds	r3, r7, r3
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2201      	movs	r2, #1
 801761a:	4013      	ands	r3, r2
 801761c:	d00b      	beq.n	8017636 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	2204      	movs	r2, #4
 8017624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	2284      	movs	r2, #132	@ 0x84
 801762a:	589b      	ldr	r3, [r3, r2]
 801762c:	2202      	movs	r2, #2
 801762e:	431a      	orrs	r2, r3
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2184      	movs	r1, #132	@ 0x84
 8017634:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017636:	23a4      	movs	r3, #164	@ 0xa4
 8017638:	18fb      	adds	r3, r7, r3
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	2208      	movs	r2, #8
 801763e:	4013      	ands	r3, r2
 8017640:	d017      	beq.n	8017672 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017642:	23a0      	movs	r3, #160	@ 0xa0
 8017644:	18fb      	adds	r3, r7, r3
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	2220      	movs	r2, #32
 801764a:	4013      	ands	r3, r2
 801764c:	d105      	bne.n	801765a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801764e:	239c      	movs	r3, #156	@ 0x9c
 8017650:	18fb      	adds	r3, r7, r3
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2201      	movs	r2, #1
 8017656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017658:	d00b      	beq.n	8017672 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	2208      	movs	r2, #8
 8017660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2284      	movs	r2, #132	@ 0x84
 8017666:	589b      	ldr	r3, [r3, r2]
 8017668:	2208      	movs	r2, #8
 801766a:	431a      	orrs	r2, r3
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2184      	movs	r1, #132	@ 0x84
 8017670:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017672:	23a4      	movs	r3, #164	@ 0xa4
 8017674:	18fb      	adds	r3, r7, r3
 8017676:	681a      	ldr	r2, [r3, #0]
 8017678:	2380      	movs	r3, #128	@ 0x80
 801767a:	011b      	lsls	r3, r3, #4
 801767c:	4013      	ands	r3, r2
 801767e:	d013      	beq.n	80176a8 <HAL_UART_IRQHandler+0x198>
 8017680:	23a0      	movs	r3, #160	@ 0xa0
 8017682:	18fb      	adds	r3, r7, r3
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	2380      	movs	r3, #128	@ 0x80
 8017688:	04db      	lsls	r3, r3, #19
 801768a:	4013      	ands	r3, r2
 801768c:	d00c      	beq.n	80176a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	2280      	movs	r2, #128	@ 0x80
 8017694:	0112      	lsls	r2, r2, #4
 8017696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	2284      	movs	r2, #132	@ 0x84
 801769c:	589b      	ldr	r3, [r3, r2]
 801769e:	2220      	movs	r2, #32
 80176a0:	431a      	orrs	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2184      	movs	r1, #132	@ 0x84
 80176a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	2284      	movs	r2, #132	@ 0x84
 80176ac:	589b      	ldr	r3, [r3, r2]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d100      	bne.n	80176b4 <HAL_UART_IRQHandler+0x1a4>
 80176b2:	e20b      	b.n	8017acc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80176b4:	23a4      	movs	r3, #164	@ 0xa4
 80176b6:	18fb      	adds	r3, r7, r3
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	2220      	movs	r2, #32
 80176bc:	4013      	ands	r3, r2
 80176be:	d00e      	beq.n	80176de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80176c0:	23a0      	movs	r3, #160	@ 0xa0
 80176c2:	18fb      	adds	r3, r7, r3
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	2220      	movs	r2, #32
 80176c8:	4013      	ands	r3, r2
 80176ca:	d008      	beq.n	80176de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d004      	beq.n	80176de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	0010      	movs	r0, r2
 80176dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2284      	movs	r2, #132	@ 0x84
 80176e2:	589b      	ldr	r3, [r3, r2]
 80176e4:	2194      	movs	r1, #148	@ 0x94
 80176e6:	187a      	adds	r2, r7, r1
 80176e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	689b      	ldr	r3, [r3, #8]
 80176f0:	2240      	movs	r2, #64	@ 0x40
 80176f2:	4013      	ands	r3, r2
 80176f4:	2b40      	cmp	r3, #64	@ 0x40
 80176f6:	d004      	beq.n	8017702 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80176f8:	187b      	adds	r3, r7, r1
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	2228      	movs	r2, #40	@ 0x28
 80176fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017700:	d04b      	beq.n	801779a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	0018      	movs	r0, r3
 8017706:	f001 f861 	bl	80187cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	689b      	ldr	r3, [r3, #8]
 8017710:	2240      	movs	r2, #64	@ 0x40
 8017712:	4013      	ands	r3, r2
 8017714:	2b40      	cmp	r3, #64	@ 0x40
 8017716:	d139      	bne.n	801778c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017718:	f3ef 8310 	mrs	r3, PRIMASK
 801771c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801771e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017720:	2090      	movs	r0, #144	@ 0x90
 8017722:	183a      	adds	r2, r7, r0
 8017724:	6013      	str	r3, [r2, #0]
 8017726:	2301      	movs	r3, #1
 8017728:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801772a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801772c:	f383 8810 	msr	PRIMASK, r3
}
 8017730:	46c0      	nop			@ (mov r8, r8)
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	689a      	ldr	r2, [r3, #8]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	2140      	movs	r1, #64	@ 0x40
 801773e:	438a      	bics	r2, r1
 8017740:	609a      	str	r2, [r3, #8]
 8017742:	183b      	adds	r3, r7, r0
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801774a:	f383 8810 	msr	PRIMASK, r3
}
 801774e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017754:	2b00      	cmp	r3, #0
 8017756:	d012      	beq.n	801777e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801775c:	4a17      	ldr	r2, [pc, #92]	@ (80177bc <HAL_UART_IRQHandler+0x2ac>)
 801775e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017764:	0018      	movs	r0, r3
 8017766:	f7f8 f8b3 	bl	800f8d0 <HAL_DMA_Abort_IT>
 801776a:	1e03      	subs	r3, r0, #0
 801776c:	d020      	beq.n	80177b0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017778:	0018      	movs	r0, r3
 801777a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801777c:	e018      	b.n	80177b0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2298      	movs	r2, #152	@ 0x98
 8017782:	589b      	ldr	r3, [r3, r2]
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	0010      	movs	r0, r2
 8017788:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801778a:	e011      	b.n	80177b0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2298      	movs	r2, #152	@ 0x98
 8017790:	589b      	ldr	r3, [r3, r2]
 8017792:	687a      	ldr	r2, [r7, #4]
 8017794:	0010      	movs	r0, r2
 8017796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017798:	e00a      	b.n	80177b0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2298      	movs	r2, #152	@ 0x98
 801779e:	589b      	ldr	r3, [r3, r2]
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	0010      	movs	r0, r2
 80177a4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2284      	movs	r2, #132	@ 0x84
 80177aa:	2100      	movs	r1, #0
 80177ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80177ae:	e18d      	b.n	8017acc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80177b2:	e18b      	b.n	8017acc <HAL_UART_IRQHandler+0x5bc>
 80177b4:	0000080f 	.word	0x0000080f
 80177b8:	04000120 	.word	0x04000120
 80177bc:	08018b59 	.word	0x08018b59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80177c4:	2b01      	cmp	r3, #1
 80177c6:	d000      	beq.n	80177ca <HAL_UART_IRQHandler+0x2ba>
 80177c8:	e13d      	b.n	8017a46 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80177ca:	23a4      	movs	r3, #164	@ 0xa4
 80177cc:	18fb      	adds	r3, r7, r3
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	2210      	movs	r2, #16
 80177d2:	4013      	ands	r3, r2
 80177d4:	d100      	bne.n	80177d8 <HAL_UART_IRQHandler+0x2c8>
 80177d6:	e136      	b.n	8017a46 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80177d8:	23a0      	movs	r3, #160	@ 0xa0
 80177da:	18fb      	adds	r3, r7, r3
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	2210      	movs	r2, #16
 80177e0:	4013      	ands	r3, r2
 80177e2:	d100      	bne.n	80177e6 <HAL_UART_IRQHandler+0x2d6>
 80177e4:	e12f      	b.n	8017a46 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	2210      	movs	r2, #16
 80177ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	689b      	ldr	r3, [r3, #8]
 80177f4:	2240      	movs	r2, #64	@ 0x40
 80177f6:	4013      	ands	r3, r2
 80177f8:	2b40      	cmp	r3, #64	@ 0x40
 80177fa:	d000      	beq.n	80177fe <HAL_UART_IRQHandler+0x2ee>
 80177fc:	e0a2      	b.n	8017944 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	685a      	ldr	r2, [r3, #4]
 8017806:	217e      	movs	r1, #126	@ 0x7e
 8017808:	187b      	adds	r3, r7, r1
 801780a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801780c:	187b      	adds	r3, r7, r1
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d100      	bne.n	8017816 <HAL_UART_IRQHandler+0x306>
 8017814:	e15c      	b.n	8017ad0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	2258      	movs	r2, #88	@ 0x58
 801781a:	5a9b      	ldrh	r3, [r3, r2]
 801781c:	187a      	adds	r2, r7, r1
 801781e:	8812      	ldrh	r2, [r2, #0]
 8017820:	429a      	cmp	r2, r3
 8017822:	d300      	bcc.n	8017826 <HAL_UART_IRQHandler+0x316>
 8017824:	e154      	b.n	8017ad0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	187a      	adds	r2, r7, r1
 801782a:	215a      	movs	r1, #90	@ 0x5a
 801782c:	8812      	ldrh	r2, [r2, #0]
 801782e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	2220      	movs	r2, #32
 801783a:	4013      	ands	r3, r2
 801783c:	d16f      	bne.n	801791e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801783e:	f3ef 8310 	mrs	r3, PRIMASK
 8017842:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017846:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017848:	2301      	movs	r3, #1
 801784a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801784e:	f383 8810 	msr	PRIMASK, r3
}
 8017852:	46c0      	nop			@ (mov r8, r8)
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	681a      	ldr	r2, [r3, #0]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	49a0      	ldr	r1, [pc, #640]	@ (8017ae0 <HAL_UART_IRQHandler+0x5d0>)
 8017860:	400a      	ands	r2, r1
 8017862:	601a      	str	r2, [r3, #0]
 8017864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017866:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801786a:	f383 8810 	msr	PRIMASK, r3
}
 801786e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017870:	f3ef 8310 	mrs	r3, PRIMASK
 8017874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017878:	677b      	str	r3, [r7, #116]	@ 0x74
 801787a:	2301      	movs	r3, #1
 801787c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801787e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017880:	f383 8810 	msr	PRIMASK, r3
}
 8017884:	46c0      	nop			@ (mov r8, r8)
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	689a      	ldr	r2, [r3, #8]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	2101      	movs	r1, #1
 8017892:	438a      	bics	r2, r1
 8017894:	609a      	str	r2, [r3, #8]
 8017896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017898:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801789a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801789c:	f383 8810 	msr	PRIMASK, r3
}
 80178a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178a2:	f3ef 8310 	mrs	r3, PRIMASK
 80178a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80178a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80178ac:	2301      	movs	r3, #1
 80178ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80178b2:	f383 8810 	msr	PRIMASK, r3
}
 80178b6:	46c0      	nop			@ (mov r8, r8)
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	689a      	ldr	r2, [r3, #8]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	2140      	movs	r1, #64	@ 0x40
 80178c4:	438a      	bics	r2, r1
 80178c6:	609a      	str	r2, [r3, #8]
 80178c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80178ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178ce:	f383 8810 	msr	PRIMASK, r3
}
 80178d2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2280      	movs	r2, #128	@ 0x80
 80178d8:	2120      	movs	r1, #32
 80178da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2200      	movs	r2, #0
 80178e0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178e2:	f3ef 8310 	mrs	r3, PRIMASK
 80178e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80178e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80178ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80178ec:	2301      	movs	r3, #1
 80178ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80178f2:	f383 8810 	msr	PRIMASK, r3
}
 80178f6:	46c0      	nop			@ (mov r8, r8)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	2110      	movs	r1, #16
 8017904:	438a      	bics	r2, r1
 8017906:	601a      	str	r2, [r3, #0]
 8017908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801790a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801790c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801790e:	f383 8810 	msr	PRIMASK, r3
}
 8017912:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017918:	0018      	movs	r0, r3
 801791a:	f7f7 ff99 	bl	800f850 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2202      	movs	r2, #2
 8017922:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	22ac      	movs	r2, #172	@ 0xac
 8017928:	589b      	ldr	r3, [r3, r2]
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	2158      	movs	r1, #88	@ 0x58
 801792e:	5a51      	ldrh	r1, [r2, r1]
 8017930:	687a      	ldr	r2, [r7, #4]
 8017932:	205a      	movs	r0, #90	@ 0x5a
 8017934:	5a12      	ldrh	r2, [r2, r0]
 8017936:	b292      	uxth	r2, r2
 8017938:	1a8a      	subs	r2, r1, r2
 801793a:	b291      	uxth	r1, r2
 801793c:	687a      	ldr	r2, [r7, #4]
 801793e:	0010      	movs	r0, r2
 8017940:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017942:	e0c5      	b.n	8017ad0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2258      	movs	r2, #88	@ 0x58
 8017948:	5a99      	ldrh	r1, [r3, r2]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	225a      	movs	r2, #90	@ 0x5a
 801794e:	5a9b      	ldrh	r3, [r3, r2]
 8017950:	b29a      	uxth	r2, r3
 8017952:	208e      	movs	r0, #142	@ 0x8e
 8017954:	183b      	adds	r3, r7, r0
 8017956:	1a8a      	subs	r2, r1, r2
 8017958:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	225a      	movs	r2, #90	@ 0x5a
 801795e:	5a9b      	ldrh	r3, [r3, r2]
 8017960:	b29b      	uxth	r3, r3
 8017962:	2b00      	cmp	r3, #0
 8017964:	d100      	bne.n	8017968 <HAL_UART_IRQHandler+0x458>
 8017966:	e0b5      	b.n	8017ad4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017968:	183b      	adds	r3, r7, r0
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d100      	bne.n	8017972 <HAL_UART_IRQHandler+0x462>
 8017970:	e0b0      	b.n	8017ad4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017972:	f3ef 8310 	mrs	r3, PRIMASK
 8017976:	60fb      	str	r3, [r7, #12]
  return(result);
 8017978:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801797a:	2488      	movs	r4, #136	@ 0x88
 801797c:	193a      	adds	r2, r7, r4
 801797e:	6013      	str	r3, [r2, #0]
 8017980:	2301      	movs	r3, #1
 8017982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017984:	693b      	ldr	r3, [r7, #16]
 8017986:	f383 8810 	msr	PRIMASK, r3
}
 801798a:	46c0      	nop			@ (mov r8, r8)
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	4953      	ldr	r1, [pc, #332]	@ (8017ae4 <HAL_UART_IRQHandler+0x5d4>)
 8017998:	400a      	ands	r2, r1
 801799a:	601a      	str	r2, [r3, #0]
 801799c:	193b      	adds	r3, r7, r4
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	f383 8810 	msr	PRIMASK, r3
}
 80179a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179aa:	f3ef 8310 	mrs	r3, PRIMASK
 80179ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80179b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80179b2:	2484      	movs	r4, #132	@ 0x84
 80179b4:	193a      	adds	r2, r7, r4
 80179b6:	6013      	str	r3, [r2, #0]
 80179b8:	2301      	movs	r3, #1
 80179ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	f383 8810 	msr	PRIMASK, r3
}
 80179c2:	46c0      	nop			@ (mov r8, r8)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	689a      	ldr	r2, [r3, #8]
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	2101      	movs	r1, #1
 80179d0:	438a      	bics	r2, r1
 80179d2:	609a      	str	r2, [r3, #8]
 80179d4:	193b      	adds	r3, r7, r4
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179da:	6a3b      	ldr	r3, [r7, #32]
 80179dc:	f383 8810 	msr	PRIMASK, r3
}
 80179e0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	2280      	movs	r2, #128	@ 0x80
 80179e6:	2120      	movs	r1, #32
 80179e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2200      	movs	r2, #0
 80179ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2200      	movs	r2, #0
 80179f4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179f6:	f3ef 8310 	mrs	r3, PRIMASK
 80179fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80179fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179fe:	2480      	movs	r4, #128	@ 0x80
 8017a00:	193a      	adds	r2, r7, r4
 8017a02:	6013      	str	r3, [r2, #0]
 8017a04:	2301      	movs	r3, #1
 8017a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a0a:	f383 8810 	msr	PRIMASK, r3
}
 8017a0e:	46c0      	nop			@ (mov r8, r8)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	2110      	movs	r1, #16
 8017a1c:	438a      	bics	r2, r1
 8017a1e:	601a      	str	r2, [r3, #0]
 8017a20:	193b      	adds	r3, r7, r4
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a28:	f383 8810 	msr	PRIMASK, r3
}
 8017a2c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2202      	movs	r2, #2
 8017a32:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	22ac      	movs	r2, #172	@ 0xac
 8017a38:	589b      	ldr	r3, [r3, r2]
 8017a3a:	183a      	adds	r2, r7, r0
 8017a3c:	8811      	ldrh	r1, [r2, #0]
 8017a3e:	687a      	ldr	r2, [r7, #4]
 8017a40:	0010      	movs	r0, r2
 8017a42:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017a44:	e046      	b.n	8017ad4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017a46:	23a4      	movs	r3, #164	@ 0xa4
 8017a48:	18fb      	adds	r3, r7, r3
 8017a4a:	681a      	ldr	r2, [r3, #0]
 8017a4c:	2380      	movs	r3, #128	@ 0x80
 8017a4e:	035b      	lsls	r3, r3, #13
 8017a50:	4013      	ands	r3, r2
 8017a52:	d012      	beq.n	8017a7a <HAL_UART_IRQHandler+0x56a>
 8017a54:	239c      	movs	r3, #156	@ 0x9c
 8017a56:	18fb      	adds	r3, r7, r3
 8017a58:	681a      	ldr	r2, [r3, #0]
 8017a5a:	2380      	movs	r3, #128	@ 0x80
 8017a5c:	03db      	lsls	r3, r3, #15
 8017a5e:	4013      	ands	r3, r2
 8017a60:	d00b      	beq.n	8017a7a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	2280      	movs	r2, #128	@ 0x80
 8017a68:	0352      	lsls	r2, r2, #13
 8017a6a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	22a8      	movs	r2, #168	@ 0xa8
 8017a70:	589b      	ldr	r3, [r3, r2]
 8017a72:	687a      	ldr	r2, [r7, #4]
 8017a74:	0010      	movs	r0, r2
 8017a76:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017a78:	e02f      	b.n	8017ada <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017a7a:	23a4      	movs	r3, #164	@ 0xa4
 8017a7c:	18fb      	adds	r3, r7, r3
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2280      	movs	r2, #128	@ 0x80
 8017a82:	4013      	ands	r3, r2
 8017a84:	d00f      	beq.n	8017aa6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017a86:	23a0      	movs	r3, #160	@ 0xa0
 8017a88:	18fb      	adds	r3, r7, r3
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	2280      	movs	r2, #128	@ 0x80
 8017a8e:	4013      	ands	r3, r2
 8017a90:	d009      	beq.n	8017aa6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d01e      	beq.n	8017ad8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	0010      	movs	r0, r2
 8017aa2:	4798      	blx	r3
    }
    return;
 8017aa4:	e018      	b.n	8017ad8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017aa6:	23a4      	movs	r3, #164	@ 0xa4
 8017aa8:	18fb      	adds	r3, r7, r3
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2240      	movs	r2, #64	@ 0x40
 8017aae:	4013      	ands	r3, r2
 8017ab0:	d013      	beq.n	8017ada <HAL_UART_IRQHandler+0x5ca>
 8017ab2:	23a0      	movs	r3, #160	@ 0xa0
 8017ab4:	18fb      	adds	r3, r7, r3
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2240      	movs	r2, #64	@ 0x40
 8017aba:	4013      	ands	r3, r2
 8017abc:	d00d      	beq.n	8017ada <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	0018      	movs	r0, r3
 8017ac2:	f001 f862 	bl	8018b8a <UART_EndTransmit_IT>
    return;
 8017ac6:	e008      	b.n	8017ada <HAL_UART_IRQHandler+0x5ca>
      return;
 8017ac8:	46c0      	nop			@ (mov r8, r8)
 8017aca:	e006      	b.n	8017ada <HAL_UART_IRQHandler+0x5ca>
    return;
 8017acc:	46c0      	nop			@ (mov r8, r8)
 8017ace:	e004      	b.n	8017ada <HAL_UART_IRQHandler+0x5ca>
      return;
 8017ad0:	46c0      	nop			@ (mov r8, r8)
 8017ad2:	e002      	b.n	8017ada <HAL_UART_IRQHandler+0x5ca>
      return;
 8017ad4:	46c0      	nop			@ (mov r8, r8)
 8017ad6:	e000      	b.n	8017ada <HAL_UART_IRQHandler+0x5ca>
    return;
 8017ad8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017ada:	46bd      	mov	sp, r7
 8017adc:	b02b      	add	sp, #172	@ 0xac
 8017ade:	bd90      	pop	{r4, r7, pc}
 8017ae0:	fffffeff 	.word	0xfffffeff
 8017ae4:	fffffedf 	.word	0xfffffedf

08017ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b082      	sub	sp, #8
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017af0:	46c0      	nop			@ (mov r8, r8)
 8017af2:	46bd      	mov	sp, r7
 8017af4:	b002      	add	sp, #8
 8017af6:	bd80      	pop	{r7, pc}

08017af8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b082      	sub	sp, #8
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017b00:	46c0      	nop			@ (mov r8, r8)
 8017b02:	46bd      	mov	sp, r7
 8017b04:	b002      	add	sp, #8
 8017b06:	bd80      	pop	{r7, pc}

08017b08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017b10:	46c0      	nop			@ (mov r8, r8)
 8017b12:	46bd      	mov	sp, r7
 8017b14:	b002      	add	sp, #8
 8017b16:	bd80      	pop	{r7, pc}

08017b18 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017b20:	46c0      	nop			@ (mov r8, r8)
 8017b22:	46bd      	mov	sp, r7
 8017b24:	b002      	add	sp, #8
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017b30:	46c0      	nop			@ (mov r8, r8)
 8017b32:	46bd      	mov	sp, r7
 8017b34:	b002      	add	sp, #8
 8017b36:	bd80      	pop	{r7, pc}

08017b38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017b40:	46c0      	nop			@ (mov r8, r8)
 8017b42:	46bd      	mov	sp, r7
 8017b44:	b002      	add	sp, #8
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b082      	sub	sp, #8
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
 8017b50:	000a      	movs	r2, r1
 8017b52:	1cbb      	adds	r3, r7, #2
 8017b54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017b56:	46c0      	nop			@ (mov r8, r8)
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	b002      	add	sp, #8
 8017b5c:	bd80      	pop	{r7, pc}
	...

08017b60 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b082      	sub	sp, #8
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2188      	movs	r1, #136	@ 0x88
 8017b6c:	4a14      	ldr	r2, [pc, #80]	@ (8017bc0 <UART_InitCallbacksToDefault+0x60>)
 8017b6e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	218c      	movs	r1, #140	@ 0x8c
 8017b74:	4a13      	ldr	r2, [pc, #76]	@ (8017bc4 <UART_InitCallbacksToDefault+0x64>)
 8017b76:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2190      	movs	r1, #144	@ 0x90
 8017b7c:	4a12      	ldr	r2, [pc, #72]	@ (8017bc8 <UART_InitCallbacksToDefault+0x68>)
 8017b7e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	2194      	movs	r1, #148	@ 0x94
 8017b84:	4a11      	ldr	r2, [pc, #68]	@ (8017bcc <UART_InitCallbacksToDefault+0x6c>)
 8017b86:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	2198      	movs	r1, #152	@ 0x98
 8017b8c:	4a10      	ldr	r2, [pc, #64]	@ (8017bd0 <UART_InitCallbacksToDefault+0x70>)
 8017b8e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	219c      	movs	r1, #156	@ 0x9c
 8017b94:	4a0f      	ldr	r2, [pc, #60]	@ (8017bd4 <UART_InitCallbacksToDefault+0x74>)
 8017b96:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	21a0      	movs	r1, #160	@ 0xa0
 8017b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8017bd8 <UART_InitCallbacksToDefault+0x78>)
 8017b9e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	21a4      	movs	r1, #164	@ 0xa4
 8017ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8017bdc <UART_InitCallbacksToDefault+0x7c>)
 8017ba6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	21a8      	movs	r1, #168	@ 0xa8
 8017bac:	4a0c      	ldr	r2, [pc, #48]	@ (8017be0 <UART_InitCallbacksToDefault+0x80>)
 8017bae:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	21ac      	movs	r1, #172	@ 0xac
 8017bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8017be4 <UART_InitCallbacksToDefault+0x84>)
 8017bb6:	505a      	str	r2, [r3, r1]

}
 8017bb8:	46c0      	nop			@ (mov r8, r8)
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	b002      	add	sp, #8
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	08017af9 	.word	0x08017af9
 8017bc4:	08017ae9 	.word	0x08017ae9
 8017bc8:	08017b09 	.word	0x08017b09
 8017bcc:	08008291 	.word	0x08008291
 8017bd0:	08003d39 	.word	0x08003d39
 8017bd4:	08017b19 	.word	0x08017b19
 8017bd8:	08017b29 	.word	0x08017b29
 8017bdc:	08017b39 	.word	0x08017b39
 8017be0:	08018f7d 	.word	0x08018f7d
 8017be4:	08017b49 	.word	0x08017b49

08017be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017be8:	b5b0      	push	{r4, r5, r7, lr}
 8017bea:	b08e      	sub	sp, #56	@ 0x38
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017bf0:	231a      	movs	r3, #26
 8017bf2:	2218      	movs	r2, #24
 8017bf4:	189b      	adds	r3, r3, r2
 8017bf6:	19db      	adds	r3, r3, r7
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017bfc:	69fb      	ldr	r3, [r7, #28]
 8017bfe:	689a      	ldr	r2, [r3, #8]
 8017c00:	69fb      	ldr	r3, [r7, #28]
 8017c02:	691b      	ldr	r3, [r3, #16]
 8017c04:	431a      	orrs	r2, r3
 8017c06:	69fb      	ldr	r3, [r7, #28]
 8017c08:	695b      	ldr	r3, [r3, #20]
 8017c0a:	431a      	orrs	r2, r3
 8017c0c:	69fb      	ldr	r3, [r7, #28]
 8017c0e:	69db      	ldr	r3, [r3, #28]
 8017c10:	4313      	orrs	r3, r2
 8017c12:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017c14:	69fb      	ldr	r3, [r7, #28]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	4ac3      	ldr	r2, [pc, #780]	@ (8017f28 <UART_SetConfig+0x340>)
 8017c1c:	4013      	ands	r3, r2
 8017c1e:	0019      	movs	r1, r3
 8017c20:	69fb      	ldr	r3, [r7, #28]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c26:	430a      	orrs	r2, r1
 8017c28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017c2a:	69fb      	ldr	r3, [r7, #28]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	4abe      	ldr	r2, [pc, #760]	@ (8017f2c <UART_SetConfig+0x344>)
 8017c32:	4013      	ands	r3, r2
 8017c34:	0019      	movs	r1, r3
 8017c36:	69fb      	ldr	r3, [r7, #28]
 8017c38:	68da      	ldr	r2, [r3, #12]
 8017c3a:	69fb      	ldr	r3, [r7, #28]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	430a      	orrs	r2, r1
 8017c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017c42:	69fb      	ldr	r3, [r7, #28]
 8017c44:	699b      	ldr	r3, [r3, #24]
 8017c46:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017c48:	69fb      	ldr	r3, [r7, #28]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	4ab8      	ldr	r2, [pc, #736]	@ (8017f30 <UART_SetConfig+0x348>)
 8017c4e:	4293      	cmp	r3, r2
 8017c50:	d004      	beq.n	8017c5c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017c52:	69fb      	ldr	r3, [r7, #28]
 8017c54:	6a1b      	ldr	r3, [r3, #32]
 8017c56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c58:	4313      	orrs	r3, r2
 8017c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017c5c:	69fb      	ldr	r3, [r7, #28]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	689b      	ldr	r3, [r3, #8]
 8017c62:	4ab4      	ldr	r2, [pc, #720]	@ (8017f34 <UART_SetConfig+0x34c>)
 8017c64:	4013      	ands	r3, r2
 8017c66:	0019      	movs	r1, r3
 8017c68:	69fb      	ldr	r3, [r7, #28]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c6e:	430a      	orrs	r2, r1
 8017c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017c72:	69fb      	ldr	r3, [r7, #28]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	4ab0      	ldr	r2, [pc, #704]	@ (8017f38 <UART_SetConfig+0x350>)
 8017c78:	4293      	cmp	r3, r2
 8017c7a:	d131      	bne.n	8017ce0 <UART_SetConfig+0xf8>
 8017c7c:	4baf      	ldr	r3, [pc, #700]	@ (8017f3c <UART_SetConfig+0x354>)
 8017c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c80:	2203      	movs	r2, #3
 8017c82:	4013      	ands	r3, r2
 8017c84:	2b03      	cmp	r3, #3
 8017c86:	d01d      	beq.n	8017cc4 <UART_SetConfig+0xdc>
 8017c88:	d823      	bhi.n	8017cd2 <UART_SetConfig+0xea>
 8017c8a:	2b02      	cmp	r3, #2
 8017c8c:	d00c      	beq.n	8017ca8 <UART_SetConfig+0xc0>
 8017c8e:	d820      	bhi.n	8017cd2 <UART_SetConfig+0xea>
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d002      	beq.n	8017c9a <UART_SetConfig+0xb2>
 8017c94:	2b01      	cmp	r3, #1
 8017c96:	d00e      	beq.n	8017cb6 <UART_SetConfig+0xce>
 8017c98:	e01b      	b.n	8017cd2 <UART_SetConfig+0xea>
 8017c9a:	231b      	movs	r3, #27
 8017c9c:	2218      	movs	r2, #24
 8017c9e:	189b      	adds	r3, r3, r2
 8017ca0:	19db      	adds	r3, r3, r7
 8017ca2:	2201      	movs	r2, #1
 8017ca4:	701a      	strb	r2, [r3, #0]
 8017ca6:	e0b4      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017ca8:	231b      	movs	r3, #27
 8017caa:	2218      	movs	r2, #24
 8017cac:	189b      	adds	r3, r3, r2
 8017cae:	19db      	adds	r3, r3, r7
 8017cb0:	2202      	movs	r2, #2
 8017cb2:	701a      	strb	r2, [r3, #0]
 8017cb4:	e0ad      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017cb6:	231b      	movs	r3, #27
 8017cb8:	2218      	movs	r2, #24
 8017cba:	189b      	adds	r3, r3, r2
 8017cbc:	19db      	adds	r3, r3, r7
 8017cbe:	2204      	movs	r2, #4
 8017cc0:	701a      	strb	r2, [r3, #0]
 8017cc2:	e0a6      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017cc4:	231b      	movs	r3, #27
 8017cc6:	2218      	movs	r2, #24
 8017cc8:	189b      	adds	r3, r3, r2
 8017cca:	19db      	adds	r3, r3, r7
 8017ccc:	2208      	movs	r2, #8
 8017cce:	701a      	strb	r2, [r3, #0]
 8017cd0:	e09f      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017cd2:	231b      	movs	r3, #27
 8017cd4:	2218      	movs	r2, #24
 8017cd6:	189b      	adds	r3, r3, r2
 8017cd8:	19db      	adds	r3, r3, r7
 8017cda:	2210      	movs	r2, #16
 8017cdc:	701a      	strb	r2, [r3, #0]
 8017cde:	e098      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a96      	ldr	r2, [pc, #600]	@ (8017f40 <UART_SetConfig+0x358>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d131      	bne.n	8017d4e <UART_SetConfig+0x166>
 8017cea:	4b94      	ldr	r3, [pc, #592]	@ (8017f3c <UART_SetConfig+0x354>)
 8017cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017cee:	220c      	movs	r2, #12
 8017cf0:	4013      	ands	r3, r2
 8017cf2:	2b0c      	cmp	r3, #12
 8017cf4:	d01d      	beq.n	8017d32 <UART_SetConfig+0x14a>
 8017cf6:	d823      	bhi.n	8017d40 <UART_SetConfig+0x158>
 8017cf8:	2b08      	cmp	r3, #8
 8017cfa:	d00c      	beq.n	8017d16 <UART_SetConfig+0x12e>
 8017cfc:	d820      	bhi.n	8017d40 <UART_SetConfig+0x158>
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d002      	beq.n	8017d08 <UART_SetConfig+0x120>
 8017d02:	2b04      	cmp	r3, #4
 8017d04:	d00e      	beq.n	8017d24 <UART_SetConfig+0x13c>
 8017d06:	e01b      	b.n	8017d40 <UART_SetConfig+0x158>
 8017d08:	231b      	movs	r3, #27
 8017d0a:	2218      	movs	r2, #24
 8017d0c:	189b      	adds	r3, r3, r2
 8017d0e:	19db      	adds	r3, r3, r7
 8017d10:	2200      	movs	r2, #0
 8017d12:	701a      	strb	r2, [r3, #0]
 8017d14:	e07d      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d16:	231b      	movs	r3, #27
 8017d18:	2218      	movs	r2, #24
 8017d1a:	189b      	adds	r3, r3, r2
 8017d1c:	19db      	adds	r3, r3, r7
 8017d1e:	2202      	movs	r2, #2
 8017d20:	701a      	strb	r2, [r3, #0]
 8017d22:	e076      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d24:	231b      	movs	r3, #27
 8017d26:	2218      	movs	r2, #24
 8017d28:	189b      	adds	r3, r3, r2
 8017d2a:	19db      	adds	r3, r3, r7
 8017d2c:	2204      	movs	r2, #4
 8017d2e:	701a      	strb	r2, [r3, #0]
 8017d30:	e06f      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d32:	231b      	movs	r3, #27
 8017d34:	2218      	movs	r2, #24
 8017d36:	189b      	adds	r3, r3, r2
 8017d38:	19db      	adds	r3, r3, r7
 8017d3a:	2208      	movs	r2, #8
 8017d3c:	701a      	strb	r2, [r3, #0]
 8017d3e:	e068      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d40:	231b      	movs	r3, #27
 8017d42:	2218      	movs	r2, #24
 8017d44:	189b      	adds	r3, r3, r2
 8017d46:	19db      	adds	r3, r3, r7
 8017d48:	2210      	movs	r2, #16
 8017d4a:	701a      	strb	r2, [r3, #0]
 8017d4c:	e061      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d4e:	69fb      	ldr	r3, [r7, #28]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	4a7c      	ldr	r2, [pc, #496]	@ (8017f44 <UART_SetConfig+0x35c>)
 8017d54:	4293      	cmp	r3, r2
 8017d56:	d106      	bne.n	8017d66 <UART_SetConfig+0x17e>
 8017d58:	231b      	movs	r3, #27
 8017d5a:	2218      	movs	r2, #24
 8017d5c:	189b      	adds	r3, r3, r2
 8017d5e:	19db      	adds	r3, r3, r7
 8017d60:	2200      	movs	r2, #0
 8017d62:	701a      	strb	r2, [r3, #0]
 8017d64:	e055      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4a77      	ldr	r2, [pc, #476]	@ (8017f48 <UART_SetConfig+0x360>)
 8017d6c:	4293      	cmp	r3, r2
 8017d6e:	d106      	bne.n	8017d7e <UART_SetConfig+0x196>
 8017d70:	231b      	movs	r3, #27
 8017d72:	2218      	movs	r2, #24
 8017d74:	189b      	adds	r3, r3, r2
 8017d76:	19db      	adds	r3, r3, r7
 8017d78:	2200      	movs	r2, #0
 8017d7a:	701a      	strb	r2, [r3, #0]
 8017d7c:	e049      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017d7e:	69fb      	ldr	r3, [r7, #28]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	4a6b      	ldr	r2, [pc, #428]	@ (8017f30 <UART_SetConfig+0x348>)
 8017d84:	4293      	cmp	r3, r2
 8017d86:	d13e      	bne.n	8017e06 <UART_SetConfig+0x21e>
 8017d88:	4b6c      	ldr	r3, [pc, #432]	@ (8017f3c <UART_SetConfig+0x354>)
 8017d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017d8c:	23c0      	movs	r3, #192	@ 0xc0
 8017d8e:	011b      	lsls	r3, r3, #4
 8017d90:	4013      	ands	r3, r2
 8017d92:	22c0      	movs	r2, #192	@ 0xc0
 8017d94:	0112      	lsls	r2, r2, #4
 8017d96:	4293      	cmp	r3, r2
 8017d98:	d027      	beq.n	8017dea <UART_SetConfig+0x202>
 8017d9a:	22c0      	movs	r2, #192	@ 0xc0
 8017d9c:	0112      	lsls	r2, r2, #4
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d82a      	bhi.n	8017df8 <UART_SetConfig+0x210>
 8017da2:	2280      	movs	r2, #128	@ 0x80
 8017da4:	0112      	lsls	r2, r2, #4
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d011      	beq.n	8017dce <UART_SetConfig+0x1e6>
 8017daa:	2280      	movs	r2, #128	@ 0x80
 8017dac:	0112      	lsls	r2, r2, #4
 8017dae:	4293      	cmp	r3, r2
 8017db0:	d822      	bhi.n	8017df8 <UART_SetConfig+0x210>
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d004      	beq.n	8017dc0 <UART_SetConfig+0x1d8>
 8017db6:	2280      	movs	r2, #128	@ 0x80
 8017db8:	00d2      	lsls	r2, r2, #3
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d00e      	beq.n	8017ddc <UART_SetConfig+0x1f4>
 8017dbe:	e01b      	b.n	8017df8 <UART_SetConfig+0x210>
 8017dc0:	231b      	movs	r3, #27
 8017dc2:	2218      	movs	r2, #24
 8017dc4:	189b      	adds	r3, r3, r2
 8017dc6:	19db      	adds	r3, r3, r7
 8017dc8:	2200      	movs	r2, #0
 8017dca:	701a      	strb	r2, [r3, #0]
 8017dcc:	e021      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017dce:	231b      	movs	r3, #27
 8017dd0:	2218      	movs	r2, #24
 8017dd2:	189b      	adds	r3, r3, r2
 8017dd4:	19db      	adds	r3, r3, r7
 8017dd6:	2202      	movs	r2, #2
 8017dd8:	701a      	strb	r2, [r3, #0]
 8017dda:	e01a      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017ddc:	231b      	movs	r3, #27
 8017dde:	2218      	movs	r2, #24
 8017de0:	189b      	adds	r3, r3, r2
 8017de2:	19db      	adds	r3, r3, r7
 8017de4:	2204      	movs	r2, #4
 8017de6:	701a      	strb	r2, [r3, #0]
 8017de8:	e013      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017dea:	231b      	movs	r3, #27
 8017dec:	2218      	movs	r2, #24
 8017dee:	189b      	adds	r3, r3, r2
 8017df0:	19db      	adds	r3, r3, r7
 8017df2:	2208      	movs	r2, #8
 8017df4:	701a      	strb	r2, [r3, #0]
 8017df6:	e00c      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017df8:	231b      	movs	r3, #27
 8017dfa:	2218      	movs	r2, #24
 8017dfc:	189b      	adds	r3, r3, r2
 8017dfe:	19db      	adds	r3, r3, r7
 8017e00:	2210      	movs	r2, #16
 8017e02:	701a      	strb	r2, [r3, #0]
 8017e04:	e005      	b.n	8017e12 <UART_SetConfig+0x22a>
 8017e06:	231b      	movs	r3, #27
 8017e08:	2218      	movs	r2, #24
 8017e0a:	189b      	adds	r3, r3, r2
 8017e0c:	19db      	adds	r3, r3, r7
 8017e0e:	2210      	movs	r2, #16
 8017e10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017e12:	69fb      	ldr	r3, [r7, #28]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	4a46      	ldr	r2, [pc, #280]	@ (8017f30 <UART_SetConfig+0x348>)
 8017e18:	4293      	cmp	r3, r2
 8017e1a:	d000      	beq.n	8017e1e <UART_SetConfig+0x236>
 8017e1c:	e09a      	b.n	8017f54 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017e1e:	231b      	movs	r3, #27
 8017e20:	2218      	movs	r2, #24
 8017e22:	189b      	adds	r3, r3, r2
 8017e24:	19db      	adds	r3, r3, r7
 8017e26:	781b      	ldrb	r3, [r3, #0]
 8017e28:	2b08      	cmp	r3, #8
 8017e2a:	d01d      	beq.n	8017e68 <UART_SetConfig+0x280>
 8017e2c:	dc20      	bgt.n	8017e70 <UART_SetConfig+0x288>
 8017e2e:	2b04      	cmp	r3, #4
 8017e30:	d015      	beq.n	8017e5e <UART_SetConfig+0x276>
 8017e32:	dc1d      	bgt.n	8017e70 <UART_SetConfig+0x288>
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d002      	beq.n	8017e3e <UART_SetConfig+0x256>
 8017e38:	2b02      	cmp	r3, #2
 8017e3a:	d005      	beq.n	8017e48 <UART_SetConfig+0x260>
 8017e3c:	e018      	b.n	8017e70 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017e3e:	f7fd fe4b 	bl	8015ad8 <HAL_RCC_GetPCLK1Freq>
 8017e42:	0003      	movs	r3, r0
 8017e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e46:	e01c      	b.n	8017e82 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017e48:	4b3c      	ldr	r3, [pc, #240]	@ (8017f3c <UART_SetConfig+0x354>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2210      	movs	r2, #16
 8017e4e:	4013      	ands	r3, r2
 8017e50:	d002      	beq.n	8017e58 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017e52:	4b3e      	ldr	r3, [pc, #248]	@ (8017f4c <UART_SetConfig+0x364>)
 8017e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017e56:	e014      	b.n	8017e82 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017e58:	4b3d      	ldr	r3, [pc, #244]	@ (8017f50 <UART_SetConfig+0x368>)
 8017e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e5c:	e011      	b.n	8017e82 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017e5e:	f7fd fd8b 	bl	8015978 <HAL_RCC_GetSysClockFreq>
 8017e62:	0003      	movs	r3, r0
 8017e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e66:	e00c      	b.n	8017e82 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017e68:	2380      	movs	r3, #128	@ 0x80
 8017e6a:	021b      	lsls	r3, r3, #8
 8017e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e6e:	e008      	b.n	8017e82 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017e70:	2300      	movs	r3, #0
 8017e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017e74:	231a      	movs	r3, #26
 8017e76:	2218      	movs	r2, #24
 8017e78:	189b      	adds	r3, r3, r2
 8017e7a:	19db      	adds	r3, r3, r7
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	701a      	strb	r2, [r3, #0]
        break;
 8017e80:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d100      	bne.n	8017e8a <UART_SetConfig+0x2a2>
 8017e88:	e133      	b.n	80180f2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017e8a:	69fb      	ldr	r3, [r7, #28]
 8017e8c:	685a      	ldr	r2, [r3, #4]
 8017e8e:	0013      	movs	r3, r2
 8017e90:	005b      	lsls	r3, r3, #1
 8017e92:	189b      	adds	r3, r3, r2
 8017e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d305      	bcc.n	8017ea6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	685b      	ldr	r3, [r3, #4]
 8017e9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d906      	bls.n	8017eb4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017ea6:	231a      	movs	r3, #26
 8017ea8:	2218      	movs	r2, #24
 8017eaa:	189b      	adds	r3, r3, r2
 8017eac:	19db      	adds	r3, r3, r7
 8017eae:	2201      	movs	r2, #1
 8017eb0:	701a      	strb	r2, [r3, #0]
 8017eb2:	e11e      	b.n	80180f2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eb6:	613b      	str	r3, [r7, #16]
 8017eb8:	2300      	movs	r3, #0
 8017eba:	617b      	str	r3, [r7, #20]
 8017ebc:	6939      	ldr	r1, [r7, #16]
 8017ebe:	697a      	ldr	r2, [r7, #20]
 8017ec0:	000b      	movs	r3, r1
 8017ec2:	0e1b      	lsrs	r3, r3, #24
 8017ec4:	0010      	movs	r0, r2
 8017ec6:	0205      	lsls	r5, r0, #8
 8017ec8:	431d      	orrs	r5, r3
 8017eca:	000b      	movs	r3, r1
 8017ecc:	021c      	lsls	r4, r3, #8
 8017ece:	69fb      	ldr	r3, [r7, #28]
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	085b      	lsrs	r3, r3, #1
 8017ed4:	60bb      	str	r3, [r7, #8]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	60fb      	str	r3, [r7, #12]
 8017eda:	68b8      	ldr	r0, [r7, #8]
 8017edc:	68f9      	ldr	r1, [r7, #12]
 8017ede:	1900      	adds	r0, r0, r4
 8017ee0:	4169      	adcs	r1, r5
 8017ee2:	69fb      	ldr	r3, [r7, #28]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	603b      	str	r3, [r7, #0]
 8017ee8:	2300      	movs	r3, #0
 8017eea:	607b      	str	r3, [r7, #4]
 8017eec:	683a      	ldr	r2, [r7, #0]
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f7e8 fb46 	bl	8000580 <__aeabi_uldivmod>
 8017ef4:	0002      	movs	r2, r0
 8017ef6:	000b      	movs	r3, r1
 8017ef8:	0013      	movs	r3, r2
 8017efa:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017efe:	23c0      	movs	r3, #192	@ 0xc0
 8017f00:	009b      	lsls	r3, r3, #2
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d309      	bcc.n	8017f1a <UART_SetConfig+0x332>
 8017f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f08:	2380      	movs	r3, #128	@ 0x80
 8017f0a:	035b      	lsls	r3, r3, #13
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d204      	bcs.n	8017f1a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017f10:	69fb      	ldr	r3, [r7, #28]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f16:	60da      	str	r2, [r3, #12]
 8017f18:	e0eb      	b.n	80180f2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017f1a:	231a      	movs	r3, #26
 8017f1c:	2218      	movs	r2, #24
 8017f1e:	189b      	adds	r3, r3, r2
 8017f20:	19db      	adds	r3, r3, r7
 8017f22:	2201      	movs	r2, #1
 8017f24:	701a      	strb	r2, [r3, #0]
 8017f26:	e0e4      	b.n	80180f2 <UART_SetConfig+0x50a>
 8017f28:	efff69f3 	.word	0xefff69f3
 8017f2c:	ffffcfff 	.word	0xffffcfff
 8017f30:	40004800 	.word	0x40004800
 8017f34:	fffff4ff 	.word	0xfffff4ff
 8017f38:	40013800 	.word	0x40013800
 8017f3c:	40021000 	.word	0x40021000
 8017f40:	40004400 	.word	0x40004400
 8017f44:	40004c00 	.word	0x40004c00
 8017f48:	40005000 	.word	0x40005000
 8017f4c:	003d0900 	.word	0x003d0900
 8017f50:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	69da      	ldr	r2, [r3, #28]
 8017f58:	2380      	movs	r3, #128	@ 0x80
 8017f5a:	021b      	lsls	r3, r3, #8
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d000      	beq.n	8017f62 <UART_SetConfig+0x37a>
 8017f60:	e070      	b.n	8018044 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017f62:	231b      	movs	r3, #27
 8017f64:	2218      	movs	r2, #24
 8017f66:	189b      	adds	r3, r3, r2
 8017f68:	19db      	adds	r3, r3, r7
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	2b08      	cmp	r3, #8
 8017f6e:	d822      	bhi.n	8017fb6 <UART_SetConfig+0x3ce>
 8017f70:	009a      	lsls	r2, r3, #2
 8017f72:	4b67      	ldr	r3, [pc, #412]	@ (8018110 <UART_SetConfig+0x528>)
 8017f74:	18d3      	adds	r3, r2, r3
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017f7a:	f7fd fdad 	bl	8015ad8 <HAL_RCC_GetPCLK1Freq>
 8017f7e:	0003      	movs	r3, r0
 8017f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f82:	e021      	b.n	8017fc8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017f84:	f7fd fdbe 	bl	8015b04 <HAL_RCC_GetPCLK2Freq>
 8017f88:	0003      	movs	r3, r0
 8017f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f8c:	e01c      	b.n	8017fc8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017f8e:	4b61      	ldr	r3, [pc, #388]	@ (8018114 <UART_SetConfig+0x52c>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	2210      	movs	r2, #16
 8017f94:	4013      	ands	r3, r2
 8017f96:	d002      	beq.n	8017f9e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017f98:	4b5f      	ldr	r3, [pc, #380]	@ (8018118 <UART_SetConfig+0x530>)
 8017f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017f9c:	e014      	b.n	8017fc8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8017f9e:	4b5f      	ldr	r3, [pc, #380]	@ (801811c <UART_SetConfig+0x534>)
 8017fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017fa2:	e011      	b.n	8017fc8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017fa4:	f7fd fce8 	bl	8015978 <HAL_RCC_GetSysClockFreq>
 8017fa8:	0003      	movs	r3, r0
 8017faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017fac:	e00c      	b.n	8017fc8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017fae:	2380      	movs	r3, #128	@ 0x80
 8017fb0:	021b      	lsls	r3, r3, #8
 8017fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017fb4:	e008      	b.n	8017fc8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017fba:	231a      	movs	r3, #26
 8017fbc:	2218      	movs	r2, #24
 8017fbe:	189b      	adds	r3, r3, r2
 8017fc0:	19db      	adds	r3, r3, r7
 8017fc2:	2201      	movs	r2, #1
 8017fc4:	701a      	strb	r2, [r3, #0]
        break;
 8017fc6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d100      	bne.n	8017fd0 <UART_SetConfig+0x3e8>
 8017fce:	e090      	b.n	80180f2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fd2:	005a      	lsls	r2, r3, #1
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	685b      	ldr	r3, [r3, #4]
 8017fd8:	085b      	lsrs	r3, r3, #1
 8017fda:	18d2      	adds	r2, r2, r3
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	685b      	ldr	r3, [r3, #4]
 8017fe0:	0019      	movs	r1, r3
 8017fe2:	0010      	movs	r0, r2
 8017fe4:	f7e8 f8de 	bl	80001a4 <__udivsi3>
 8017fe8:	0003      	movs	r3, r0
 8017fea:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fee:	2b0f      	cmp	r3, #15
 8017ff0:	d921      	bls.n	8018036 <UART_SetConfig+0x44e>
 8017ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ff4:	2380      	movs	r3, #128	@ 0x80
 8017ff6:	025b      	lsls	r3, r3, #9
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d21c      	bcs.n	8018036 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ffe:	b29a      	uxth	r2, r3
 8018000:	200e      	movs	r0, #14
 8018002:	2418      	movs	r4, #24
 8018004:	1903      	adds	r3, r0, r4
 8018006:	19db      	adds	r3, r3, r7
 8018008:	210f      	movs	r1, #15
 801800a:	438a      	bics	r2, r1
 801800c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801800e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018010:	085b      	lsrs	r3, r3, #1
 8018012:	b29b      	uxth	r3, r3
 8018014:	2207      	movs	r2, #7
 8018016:	4013      	ands	r3, r2
 8018018:	b299      	uxth	r1, r3
 801801a:	1903      	adds	r3, r0, r4
 801801c:	19db      	adds	r3, r3, r7
 801801e:	1902      	adds	r2, r0, r4
 8018020:	19d2      	adds	r2, r2, r7
 8018022:	8812      	ldrh	r2, [r2, #0]
 8018024:	430a      	orrs	r2, r1
 8018026:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8018028:	69fb      	ldr	r3, [r7, #28]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	1902      	adds	r2, r0, r4
 801802e:	19d2      	adds	r2, r2, r7
 8018030:	8812      	ldrh	r2, [r2, #0]
 8018032:	60da      	str	r2, [r3, #12]
 8018034:	e05d      	b.n	80180f2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018036:	231a      	movs	r3, #26
 8018038:	2218      	movs	r2, #24
 801803a:	189b      	adds	r3, r3, r2
 801803c:	19db      	adds	r3, r3, r7
 801803e:	2201      	movs	r2, #1
 8018040:	701a      	strb	r2, [r3, #0]
 8018042:	e056      	b.n	80180f2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018044:	231b      	movs	r3, #27
 8018046:	2218      	movs	r2, #24
 8018048:	189b      	adds	r3, r3, r2
 801804a:	19db      	adds	r3, r3, r7
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	2b08      	cmp	r3, #8
 8018050:	d822      	bhi.n	8018098 <UART_SetConfig+0x4b0>
 8018052:	009a      	lsls	r2, r3, #2
 8018054:	4b32      	ldr	r3, [pc, #200]	@ (8018120 <UART_SetConfig+0x538>)
 8018056:	18d3      	adds	r3, r2, r3
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801805c:	f7fd fd3c 	bl	8015ad8 <HAL_RCC_GetPCLK1Freq>
 8018060:	0003      	movs	r3, r0
 8018062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018064:	e021      	b.n	80180aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018066:	f7fd fd4d 	bl	8015b04 <HAL_RCC_GetPCLK2Freq>
 801806a:	0003      	movs	r3, r0
 801806c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801806e:	e01c      	b.n	80180aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018070:	4b28      	ldr	r3, [pc, #160]	@ (8018114 <UART_SetConfig+0x52c>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2210      	movs	r2, #16
 8018076:	4013      	ands	r3, r2
 8018078:	d002      	beq.n	8018080 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801807a:	4b27      	ldr	r3, [pc, #156]	@ (8018118 <UART_SetConfig+0x530>)
 801807c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801807e:	e014      	b.n	80180aa <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018080:	4b26      	ldr	r3, [pc, #152]	@ (801811c <UART_SetConfig+0x534>)
 8018082:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018084:	e011      	b.n	80180aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018086:	f7fd fc77 	bl	8015978 <HAL_RCC_GetSysClockFreq>
 801808a:	0003      	movs	r3, r0
 801808c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801808e:	e00c      	b.n	80180aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018090:	2380      	movs	r3, #128	@ 0x80
 8018092:	021b      	lsls	r3, r3, #8
 8018094:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018096:	e008      	b.n	80180aa <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018098:	2300      	movs	r3, #0
 801809a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801809c:	231a      	movs	r3, #26
 801809e:	2218      	movs	r2, #24
 80180a0:	189b      	adds	r3, r3, r2
 80180a2:	19db      	adds	r3, r3, r7
 80180a4:	2201      	movs	r2, #1
 80180a6:	701a      	strb	r2, [r3, #0]
        break;
 80180a8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80180aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d020      	beq.n	80180f2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	685b      	ldr	r3, [r3, #4]
 80180b4:	085a      	lsrs	r2, r3, #1
 80180b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180b8:	18d2      	adds	r2, r2, r3
 80180ba:	69fb      	ldr	r3, [r7, #28]
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	0019      	movs	r1, r3
 80180c0:	0010      	movs	r0, r2
 80180c2:	f7e8 f86f 	bl	80001a4 <__udivsi3>
 80180c6:	0003      	movs	r3, r0
 80180c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80180ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180cc:	2b0f      	cmp	r3, #15
 80180ce:	d90a      	bls.n	80180e6 <UART_SetConfig+0x4fe>
 80180d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180d2:	2380      	movs	r3, #128	@ 0x80
 80180d4:	025b      	lsls	r3, r3, #9
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d205      	bcs.n	80180e6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80180da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180dc:	b29a      	uxth	r2, r3
 80180de:	69fb      	ldr	r3, [r7, #28]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	60da      	str	r2, [r3, #12]
 80180e4:	e005      	b.n	80180f2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80180e6:	231a      	movs	r3, #26
 80180e8:	2218      	movs	r2, #24
 80180ea:	189b      	adds	r3, r3, r2
 80180ec:	19db      	adds	r3, r3, r7
 80180ee:	2201      	movs	r2, #1
 80180f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80180f2:	69fb      	ldr	r3, [r7, #28]
 80180f4:	2200      	movs	r2, #0
 80180f6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80180f8:	69fb      	ldr	r3, [r7, #28]
 80180fa:	2200      	movs	r2, #0
 80180fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80180fe:	231a      	movs	r3, #26
 8018100:	2218      	movs	r2, #24
 8018102:	189b      	adds	r3, r3, r2
 8018104:	19db      	adds	r3, r3, r7
 8018106:	781b      	ldrb	r3, [r3, #0]
}
 8018108:	0018      	movs	r0, r3
 801810a:	46bd      	mov	sp, r7
 801810c:	b00e      	add	sp, #56	@ 0x38
 801810e:	bdb0      	pop	{r4, r5, r7, pc}
 8018110:	08025650 	.word	0x08025650
 8018114:	40021000 	.word	0x40021000
 8018118:	003d0900 	.word	0x003d0900
 801811c:	00f42400 	.word	0x00f42400
 8018120:	08025674 	.word	0x08025674

08018124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018130:	2201      	movs	r2, #1
 8018132:	4013      	ands	r3, r2
 8018134:	d00b      	beq.n	801814e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	685b      	ldr	r3, [r3, #4]
 801813c:	4a4a      	ldr	r2, [pc, #296]	@ (8018268 <UART_AdvFeatureConfig+0x144>)
 801813e:	4013      	ands	r3, r2
 8018140:	0019      	movs	r1, r3
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	430a      	orrs	r2, r1
 801814c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018152:	2202      	movs	r2, #2
 8018154:	4013      	ands	r3, r2
 8018156:	d00b      	beq.n	8018170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	4a43      	ldr	r2, [pc, #268]	@ (801826c <UART_AdvFeatureConfig+0x148>)
 8018160:	4013      	ands	r3, r2
 8018162:	0019      	movs	r1, r3
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	430a      	orrs	r2, r1
 801816e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018174:	2204      	movs	r2, #4
 8018176:	4013      	ands	r3, r2
 8018178:	d00b      	beq.n	8018192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	4a3b      	ldr	r2, [pc, #236]	@ (8018270 <UART_AdvFeatureConfig+0x14c>)
 8018182:	4013      	ands	r3, r2
 8018184:	0019      	movs	r1, r3
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	430a      	orrs	r2, r1
 8018190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018196:	2208      	movs	r2, #8
 8018198:	4013      	ands	r3, r2
 801819a:	d00b      	beq.n	80181b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	4a34      	ldr	r2, [pc, #208]	@ (8018274 <UART_AdvFeatureConfig+0x150>)
 80181a4:	4013      	ands	r3, r2
 80181a6:	0019      	movs	r1, r3
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	430a      	orrs	r2, r1
 80181b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181b8:	2210      	movs	r2, #16
 80181ba:	4013      	ands	r3, r2
 80181bc:	d00b      	beq.n	80181d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	689b      	ldr	r3, [r3, #8]
 80181c4:	4a2c      	ldr	r2, [pc, #176]	@ (8018278 <UART_AdvFeatureConfig+0x154>)
 80181c6:	4013      	ands	r3, r2
 80181c8:	0019      	movs	r1, r3
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	430a      	orrs	r2, r1
 80181d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181da:	2220      	movs	r2, #32
 80181dc:	4013      	ands	r3, r2
 80181de:	d00b      	beq.n	80181f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	689b      	ldr	r3, [r3, #8]
 80181e6:	4a25      	ldr	r2, [pc, #148]	@ (801827c <UART_AdvFeatureConfig+0x158>)
 80181e8:	4013      	ands	r3, r2
 80181ea:	0019      	movs	r1, r3
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	430a      	orrs	r2, r1
 80181f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181fc:	2240      	movs	r2, #64	@ 0x40
 80181fe:	4013      	ands	r3, r2
 8018200:	d01d      	beq.n	801823e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	4a1d      	ldr	r2, [pc, #116]	@ (8018280 <UART_AdvFeatureConfig+0x15c>)
 801820a:	4013      	ands	r3, r2
 801820c:	0019      	movs	r1, r3
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	430a      	orrs	r2, r1
 8018218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801821e:	2380      	movs	r3, #128	@ 0x80
 8018220:	035b      	lsls	r3, r3, #13
 8018222:	429a      	cmp	r2, r3
 8018224:	d10b      	bne.n	801823e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	4a15      	ldr	r2, [pc, #84]	@ (8018284 <UART_AdvFeatureConfig+0x160>)
 801822e:	4013      	ands	r3, r2
 8018230:	0019      	movs	r1, r3
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	430a      	orrs	r2, r1
 801823c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018242:	2280      	movs	r2, #128	@ 0x80
 8018244:	4013      	ands	r3, r2
 8018246:	d00b      	beq.n	8018260 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	685b      	ldr	r3, [r3, #4]
 801824e:	4a0e      	ldr	r2, [pc, #56]	@ (8018288 <UART_AdvFeatureConfig+0x164>)
 8018250:	4013      	ands	r3, r2
 8018252:	0019      	movs	r1, r3
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	430a      	orrs	r2, r1
 801825e:	605a      	str	r2, [r3, #4]
  }
}
 8018260:	46c0      	nop			@ (mov r8, r8)
 8018262:	46bd      	mov	sp, r7
 8018264:	b002      	add	sp, #8
 8018266:	bd80      	pop	{r7, pc}
 8018268:	fffdffff 	.word	0xfffdffff
 801826c:	fffeffff 	.word	0xfffeffff
 8018270:	fffbffff 	.word	0xfffbffff
 8018274:	ffff7fff 	.word	0xffff7fff
 8018278:	ffffefff 	.word	0xffffefff
 801827c:	ffffdfff 	.word	0xffffdfff
 8018280:	ffefffff 	.word	0xffefffff
 8018284:	ff9fffff 	.word	0xff9fffff
 8018288:	fff7ffff 	.word	0xfff7ffff

0801828c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b092      	sub	sp, #72	@ 0x48
 8018290:	af02      	add	r7, sp, #8
 8018292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2284      	movs	r2, #132	@ 0x84
 8018298:	2100      	movs	r1, #0
 801829a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801829c:	f7f6 fd20 	bl	800ece0 <HAL_GetTick>
 80182a0:	0003      	movs	r3, r0
 80182a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	2208      	movs	r2, #8
 80182ac:	4013      	ands	r3, r2
 80182ae:	2b08      	cmp	r3, #8
 80182b0:	d12c      	bne.n	801830c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80182b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182b4:	2280      	movs	r2, #128	@ 0x80
 80182b6:	0391      	lsls	r1, r2, #14
 80182b8:	6878      	ldr	r0, [r7, #4]
 80182ba:	4a46      	ldr	r2, [pc, #280]	@ (80183d4 <UART_CheckIdleState+0x148>)
 80182bc:	9200      	str	r2, [sp, #0]
 80182be:	2200      	movs	r2, #0
 80182c0:	f000 f88c 	bl	80183dc <UART_WaitOnFlagUntilTimeout>
 80182c4:	1e03      	subs	r3, r0, #0
 80182c6:	d021      	beq.n	801830c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182c8:	f3ef 8310 	mrs	r3, PRIMASK
 80182cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80182ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80182d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80182d2:	2301      	movs	r3, #1
 80182d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182d8:	f383 8810 	msr	PRIMASK, r3
}
 80182dc:	46c0      	nop			@ (mov r8, r8)
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	681a      	ldr	r2, [r3, #0]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2180      	movs	r1, #128	@ 0x80
 80182ea:	438a      	bics	r2, r1
 80182ec:	601a      	str	r2, [r3, #0]
 80182ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182f4:	f383 8810 	msr	PRIMASK, r3
}
 80182f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2220      	movs	r2, #32
 80182fe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2278      	movs	r2, #120	@ 0x78
 8018304:	2100      	movs	r1, #0
 8018306:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018308:	2303      	movs	r3, #3
 801830a:	e05f      	b.n	80183cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	2204      	movs	r2, #4
 8018314:	4013      	ands	r3, r2
 8018316:	2b04      	cmp	r3, #4
 8018318:	d146      	bne.n	80183a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801831a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801831c:	2280      	movs	r2, #128	@ 0x80
 801831e:	03d1      	lsls	r1, r2, #15
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	4a2c      	ldr	r2, [pc, #176]	@ (80183d4 <UART_CheckIdleState+0x148>)
 8018324:	9200      	str	r2, [sp, #0]
 8018326:	2200      	movs	r2, #0
 8018328:	f000 f858 	bl	80183dc <UART_WaitOnFlagUntilTimeout>
 801832c:	1e03      	subs	r3, r0, #0
 801832e:	d03b      	beq.n	80183a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018330:	f3ef 8310 	mrs	r3, PRIMASK
 8018334:	60fb      	str	r3, [r7, #12]
  return(result);
 8018336:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018338:	637b      	str	r3, [r7, #52]	@ 0x34
 801833a:	2301      	movs	r3, #1
 801833c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	f383 8810 	msr	PRIMASK, r3
}
 8018344:	46c0      	nop			@ (mov r8, r8)
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	681a      	ldr	r2, [r3, #0]
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4921      	ldr	r1, [pc, #132]	@ (80183d8 <UART_CheckIdleState+0x14c>)
 8018352:	400a      	ands	r2, r1
 8018354:	601a      	str	r2, [r3, #0]
 8018356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	f383 8810 	msr	PRIMASK, r3
}
 8018360:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018362:	f3ef 8310 	mrs	r3, PRIMASK
 8018366:	61bb      	str	r3, [r7, #24]
  return(result);
 8018368:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801836a:	633b      	str	r3, [r7, #48]	@ 0x30
 801836c:	2301      	movs	r3, #1
 801836e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018370:	69fb      	ldr	r3, [r7, #28]
 8018372:	f383 8810 	msr	PRIMASK, r3
}
 8018376:	46c0      	nop			@ (mov r8, r8)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	689a      	ldr	r2, [r3, #8]
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	2101      	movs	r1, #1
 8018384:	438a      	bics	r2, r1
 8018386:	609a      	str	r2, [r3, #8]
 8018388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801838a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801838c:	6a3b      	ldr	r3, [r7, #32]
 801838e:	f383 8810 	msr	PRIMASK, r3
}
 8018392:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	2280      	movs	r2, #128	@ 0x80
 8018398:	2120      	movs	r1, #32
 801839a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2278      	movs	r2, #120	@ 0x78
 80183a0:	2100      	movs	r1, #0
 80183a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80183a4:	2303      	movs	r3, #3
 80183a6:	e011      	b.n	80183cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2220      	movs	r2, #32
 80183ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	2280      	movs	r2, #128	@ 0x80
 80183b2:	2120      	movs	r1, #32
 80183b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2200      	movs	r2, #0
 80183ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2200      	movs	r2, #0
 80183c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	2278      	movs	r2, #120	@ 0x78
 80183c6:	2100      	movs	r1, #0
 80183c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80183ca:	2300      	movs	r3, #0
}
 80183cc:	0018      	movs	r0, r3
 80183ce:	46bd      	mov	sp, r7
 80183d0:	b010      	add	sp, #64	@ 0x40
 80183d2:	bd80      	pop	{r7, pc}
 80183d4:	01ffffff 	.word	0x01ffffff
 80183d8:	fffffedf 	.word	0xfffffedf

080183dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b084      	sub	sp, #16
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	60f8      	str	r0, [r7, #12]
 80183e4:	60b9      	str	r1, [r7, #8]
 80183e6:	603b      	str	r3, [r7, #0]
 80183e8:	1dfb      	adds	r3, r7, #7
 80183ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80183ec:	e04b      	b.n	8018486 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80183ee:	69bb      	ldr	r3, [r7, #24]
 80183f0:	3301      	adds	r3, #1
 80183f2:	d048      	beq.n	8018486 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80183f4:	f7f6 fc74 	bl	800ece0 <HAL_GetTick>
 80183f8:	0002      	movs	r2, r0
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	1ad3      	subs	r3, r2, r3
 80183fe:	69ba      	ldr	r2, [r7, #24]
 8018400:	429a      	cmp	r2, r3
 8018402:	d302      	bcc.n	801840a <UART_WaitOnFlagUntilTimeout+0x2e>
 8018404:	69bb      	ldr	r3, [r7, #24]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d101      	bne.n	801840e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801840a:	2303      	movs	r3, #3
 801840c:	e04b      	b.n	80184a6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2204      	movs	r2, #4
 8018416:	4013      	ands	r3, r2
 8018418:	d035      	beq.n	8018486 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	69db      	ldr	r3, [r3, #28]
 8018420:	2208      	movs	r2, #8
 8018422:	4013      	ands	r3, r2
 8018424:	2b08      	cmp	r3, #8
 8018426:	d111      	bne.n	801844c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	2208      	movs	r2, #8
 801842e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	0018      	movs	r0, r3
 8018434:	f000 f9ca 	bl	80187cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	2284      	movs	r2, #132	@ 0x84
 801843c:	2108      	movs	r1, #8
 801843e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	2278      	movs	r2, #120	@ 0x78
 8018444:	2100      	movs	r1, #0
 8018446:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8018448:	2301      	movs	r3, #1
 801844a:	e02c      	b.n	80184a6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	69da      	ldr	r2, [r3, #28]
 8018452:	2380      	movs	r3, #128	@ 0x80
 8018454:	011b      	lsls	r3, r3, #4
 8018456:	401a      	ands	r2, r3
 8018458:	2380      	movs	r3, #128	@ 0x80
 801845a:	011b      	lsls	r3, r3, #4
 801845c:	429a      	cmp	r2, r3
 801845e:	d112      	bne.n	8018486 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	2280      	movs	r2, #128	@ 0x80
 8018466:	0112      	lsls	r2, r2, #4
 8018468:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	0018      	movs	r0, r3
 801846e:	f000 f9ad 	bl	80187cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	2284      	movs	r2, #132	@ 0x84
 8018476:	2120      	movs	r1, #32
 8018478:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	2278      	movs	r2, #120	@ 0x78
 801847e:	2100      	movs	r1, #0
 8018480:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018482:	2303      	movs	r3, #3
 8018484:	e00f      	b.n	80184a6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	69db      	ldr	r3, [r3, #28]
 801848c:	68ba      	ldr	r2, [r7, #8]
 801848e:	4013      	ands	r3, r2
 8018490:	68ba      	ldr	r2, [r7, #8]
 8018492:	1ad3      	subs	r3, r2, r3
 8018494:	425a      	negs	r2, r3
 8018496:	4153      	adcs	r3, r2
 8018498:	b2db      	uxtb	r3, r3
 801849a:	001a      	movs	r2, r3
 801849c:	1dfb      	adds	r3, r7, #7
 801849e:	781b      	ldrb	r3, [r3, #0]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d0a4      	beq.n	80183ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80184a4:	2300      	movs	r3, #0
}
 80184a6:	0018      	movs	r0, r3
 80184a8:	46bd      	mov	sp, r7
 80184aa:	b004      	add	sp, #16
 80184ac:	bd80      	pop	{r7, pc}
	...

080184b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b090      	sub	sp, #64	@ 0x40
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	60f8      	str	r0, [r7, #12]
 80184b8:	60b9      	str	r1, [r7, #8]
 80184ba:	1dbb      	adds	r3, r7, #6
 80184bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	68ba      	ldr	r2, [r7, #8]
 80184c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	1dba      	adds	r2, r7, #6
 80184c8:	2158      	movs	r1, #88	@ 0x58
 80184ca:	8812      	ldrh	r2, [r2, #0]
 80184cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	1dba      	adds	r2, r7, #6
 80184d2:	215a      	movs	r1, #90	@ 0x5a
 80184d4:	8812      	ldrh	r2, [r2, #0]
 80184d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	2200      	movs	r2, #0
 80184dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	689a      	ldr	r2, [r3, #8]
 80184e2:	2380      	movs	r3, #128	@ 0x80
 80184e4:	015b      	lsls	r3, r3, #5
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d10d      	bne.n	8018506 <UART_Start_Receive_IT+0x56>
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	691b      	ldr	r3, [r3, #16]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d104      	bne.n	80184fc <UART_Start_Receive_IT+0x4c>
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	225c      	movs	r2, #92	@ 0x5c
 80184f6:	4950      	ldr	r1, [pc, #320]	@ (8018638 <UART_Start_Receive_IT+0x188>)
 80184f8:	5299      	strh	r1, [r3, r2]
 80184fa:	e02e      	b.n	801855a <UART_Start_Receive_IT+0xaa>
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	225c      	movs	r2, #92	@ 0x5c
 8018500:	21ff      	movs	r1, #255	@ 0xff
 8018502:	5299      	strh	r1, [r3, r2]
 8018504:	e029      	b.n	801855a <UART_Start_Receive_IT+0xaa>
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	689b      	ldr	r3, [r3, #8]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d10d      	bne.n	801852a <UART_Start_Receive_IT+0x7a>
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	691b      	ldr	r3, [r3, #16]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d104      	bne.n	8018520 <UART_Start_Receive_IT+0x70>
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	225c      	movs	r2, #92	@ 0x5c
 801851a:	21ff      	movs	r1, #255	@ 0xff
 801851c:	5299      	strh	r1, [r3, r2]
 801851e:	e01c      	b.n	801855a <UART_Start_Receive_IT+0xaa>
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	225c      	movs	r2, #92	@ 0x5c
 8018524:	217f      	movs	r1, #127	@ 0x7f
 8018526:	5299      	strh	r1, [r3, r2]
 8018528:	e017      	b.n	801855a <UART_Start_Receive_IT+0xaa>
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	689a      	ldr	r2, [r3, #8]
 801852e:	2380      	movs	r3, #128	@ 0x80
 8018530:	055b      	lsls	r3, r3, #21
 8018532:	429a      	cmp	r2, r3
 8018534:	d10d      	bne.n	8018552 <UART_Start_Receive_IT+0xa2>
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	691b      	ldr	r3, [r3, #16]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d104      	bne.n	8018548 <UART_Start_Receive_IT+0x98>
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	225c      	movs	r2, #92	@ 0x5c
 8018542:	217f      	movs	r1, #127	@ 0x7f
 8018544:	5299      	strh	r1, [r3, r2]
 8018546:	e008      	b.n	801855a <UART_Start_Receive_IT+0xaa>
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	225c      	movs	r2, #92	@ 0x5c
 801854c:	213f      	movs	r1, #63	@ 0x3f
 801854e:	5299      	strh	r1, [r3, r2]
 8018550:	e003      	b.n	801855a <UART_Start_Receive_IT+0xaa>
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	225c      	movs	r2, #92	@ 0x5c
 8018556:	2100      	movs	r1, #0
 8018558:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	2284      	movs	r2, #132	@ 0x84
 801855e:	2100      	movs	r1, #0
 8018560:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	2280      	movs	r2, #128	@ 0x80
 8018566:	2122      	movs	r1, #34	@ 0x22
 8018568:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801856a:	f3ef 8310 	mrs	r3, PRIMASK
 801856e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018570:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018574:	2301      	movs	r3, #1
 8018576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801857a:	f383 8810 	msr	PRIMASK, r3
}
 801857e:	46c0      	nop			@ (mov r8, r8)
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	689a      	ldr	r2, [r3, #8]
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	2101      	movs	r1, #1
 801858c:	430a      	orrs	r2, r1
 801858e:	609a      	str	r2, [r3, #8]
 8018590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018592:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018596:	f383 8810 	msr	PRIMASK, r3
}
 801859a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	689a      	ldr	r2, [r3, #8]
 80185a0:	2380      	movs	r3, #128	@ 0x80
 80185a2:	015b      	lsls	r3, r3, #5
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d107      	bne.n	80185b8 <UART_Start_Receive_IT+0x108>
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	691b      	ldr	r3, [r3, #16]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d103      	bne.n	80185b8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	4a22      	ldr	r2, [pc, #136]	@ (801863c <UART_Start_Receive_IT+0x18c>)
 80185b4:	669a      	str	r2, [r3, #104]	@ 0x68
 80185b6:	e002      	b.n	80185be <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	4a21      	ldr	r2, [pc, #132]	@ (8018640 <UART_Start_Receive_IT+0x190>)
 80185bc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	691b      	ldr	r3, [r3, #16]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d019      	beq.n	80185fa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185c6:	f3ef 8310 	mrs	r3, PRIMASK
 80185ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80185cc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80185ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80185d0:	2301      	movs	r3, #1
 80185d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185d4:	6a3b      	ldr	r3, [r7, #32]
 80185d6:	f383 8810 	msr	PRIMASK, r3
}
 80185da:	46c0      	nop			@ (mov r8, r8)
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	681a      	ldr	r2, [r3, #0]
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	2190      	movs	r1, #144	@ 0x90
 80185e8:	0049      	lsls	r1, r1, #1
 80185ea:	430a      	orrs	r2, r1
 80185ec:	601a      	str	r2, [r3, #0]
 80185ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f4:	f383 8810 	msr	PRIMASK, r3
}
 80185f8:	e018      	b.n	801862c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185fa:	f3ef 8310 	mrs	r3, PRIMASK
 80185fe:	613b      	str	r3, [r7, #16]
  return(result);
 8018600:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018604:	2301      	movs	r3, #1
 8018606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	f383 8810 	msr	PRIMASK, r3
}
 801860e:	46c0      	nop			@ (mov r8, r8)
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	681a      	ldr	r2, [r3, #0]
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	2120      	movs	r1, #32
 801861c:	430a      	orrs	r2, r1
 801861e:	601a      	str	r2, [r3, #0]
 8018620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018622:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018624:	69bb      	ldr	r3, [r7, #24]
 8018626:	f383 8810 	msr	PRIMASK, r3
}
 801862a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801862c:	2300      	movs	r3, #0
}
 801862e:	0018      	movs	r0, r3
 8018630:	46bd      	mov	sp, r7
 8018632:	b010      	add	sp, #64	@ 0x40
 8018634:	bd80      	pop	{r7, pc}
 8018636:	46c0      	nop			@ (mov r8, r8)
 8018638:	000001ff 	.word	0x000001ff
 801863c:	08018db1 	.word	0x08018db1
 8018640:	08018be5 	.word	0x08018be5

08018644 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b090      	sub	sp, #64	@ 0x40
 8018648:	af00      	add	r7, sp, #0
 801864a:	60f8      	str	r0, [r7, #12]
 801864c:	60b9      	str	r1, [r7, #8]
 801864e:	1dbb      	adds	r3, r7, #6
 8018650:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	68ba      	ldr	r2, [r7, #8]
 8018656:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	1dba      	adds	r2, r7, #6
 801865c:	2158      	movs	r1, #88	@ 0x58
 801865e:	8812      	ldrh	r2, [r2, #0]
 8018660:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	2284      	movs	r2, #132	@ 0x84
 8018666:	2100      	movs	r1, #0
 8018668:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	2280      	movs	r2, #128	@ 0x80
 801866e:	2122      	movs	r1, #34	@ 0x22
 8018670:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018676:	2b00      	cmp	r3, #0
 8018678:	d028      	beq.n	80186cc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801867e:	4a3e      	ldr	r2, [pc, #248]	@ (8018778 <UART_Start_Receive_DMA+0x134>)
 8018680:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018686:	4a3d      	ldr	r2, [pc, #244]	@ (801877c <UART_Start_Receive_DMA+0x138>)
 8018688:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801868e:	4a3c      	ldr	r2, [pc, #240]	@ (8018780 <UART_Start_Receive_DMA+0x13c>)
 8018690:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018696:	2200      	movs	r2, #0
 8018698:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	3324      	adds	r3, #36	@ 0x24
 80186a4:	0019      	movs	r1, r3
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80186aa:	001a      	movs	r2, r3
 80186ac:	1dbb      	adds	r3, r7, #6
 80186ae:	881b      	ldrh	r3, [r3, #0]
 80186b0:	f7f7 f868 	bl	800f784 <HAL_DMA_Start_IT>
 80186b4:	1e03      	subs	r3, r0, #0
 80186b6:	d009      	beq.n	80186cc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	2284      	movs	r2, #132	@ 0x84
 80186bc:	2110      	movs	r1, #16
 80186be:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2280      	movs	r2, #128	@ 0x80
 80186c4:	2120      	movs	r1, #32
 80186c6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80186c8:	2301      	movs	r3, #1
 80186ca:	e050      	b.n	801876e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	691b      	ldr	r3, [r3, #16]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d019      	beq.n	8018708 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186d4:	f3ef 8310 	mrs	r3, PRIMASK
 80186d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80186da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80186dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80186de:	2301      	movs	r3, #1
 80186e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186e4:	f383 8810 	msr	PRIMASK, r3
}
 80186e8:	46c0      	nop			@ (mov r8, r8)
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	681a      	ldr	r2, [r3, #0]
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	2180      	movs	r1, #128	@ 0x80
 80186f6:	0049      	lsls	r1, r1, #1
 80186f8:	430a      	orrs	r2, r1
 80186fa:	601a      	str	r2, [r3, #0]
 80186fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018702:	f383 8810 	msr	PRIMASK, r3
}
 8018706:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018708:	f3ef 8310 	mrs	r3, PRIMASK
 801870c:	613b      	str	r3, [r7, #16]
  return(result);
 801870e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018710:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018712:	2301      	movs	r3, #1
 8018714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018716:	697b      	ldr	r3, [r7, #20]
 8018718:	f383 8810 	msr	PRIMASK, r3
}
 801871c:	46c0      	nop			@ (mov r8, r8)
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	689a      	ldr	r2, [r3, #8]
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	2101      	movs	r1, #1
 801872a:	430a      	orrs	r2, r1
 801872c:	609a      	str	r2, [r3, #8]
 801872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018730:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018732:	69bb      	ldr	r3, [r7, #24]
 8018734:	f383 8810 	msr	PRIMASK, r3
}
 8018738:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801873a:	f3ef 8310 	mrs	r3, PRIMASK
 801873e:	61fb      	str	r3, [r7, #28]
  return(result);
 8018740:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018742:	637b      	str	r3, [r7, #52]	@ 0x34
 8018744:	2301      	movs	r3, #1
 8018746:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018748:	6a3b      	ldr	r3, [r7, #32]
 801874a:	f383 8810 	msr	PRIMASK, r3
}
 801874e:	46c0      	nop			@ (mov r8, r8)
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	689a      	ldr	r2, [r3, #8]
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	2140      	movs	r1, #64	@ 0x40
 801875c:	430a      	orrs	r2, r1
 801875e:	609a      	str	r2, [r3, #8]
 8018760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018762:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018766:	f383 8810 	msr	PRIMASK, r3
}
 801876a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801876c:	2300      	movs	r3, #0
}
 801876e:	0018      	movs	r0, r3
 8018770:	46bd      	mov	sp, r7
 8018772:	b010      	add	sp, #64	@ 0x40
 8018774:	bd80      	pop	{r7, pc}
 8018776:	46c0      	nop			@ (mov r8, r8)
 8018778:	08018955 	.word	0x08018955
 801877c:	08018a89 	.word	0x08018a89
 8018780:	08018ad1 	.word	0x08018ad1

08018784 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b086      	sub	sp, #24
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801878c:	f3ef 8310 	mrs	r3, PRIMASK
 8018790:	60bb      	str	r3, [r7, #8]
  return(result);
 8018792:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018794:	617b      	str	r3, [r7, #20]
 8018796:	2301      	movs	r3, #1
 8018798:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	f383 8810 	msr	PRIMASK, r3
}
 80187a0:	46c0      	nop			@ (mov r8, r8)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	681a      	ldr	r2, [r3, #0]
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	21c0      	movs	r1, #192	@ 0xc0
 80187ae:	438a      	bics	r2, r1
 80187b0:	601a      	str	r2, [r3, #0]
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187b6:	693b      	ldr	r3, [r7, #16]
 80187b8:	f383 8810 	msr	PRIMASK, r3
}
 80187bc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	2220      	movs	r2, #32
 80187c2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80187c4:	46c0      	nop			@ (mov r8, r8)
 80187c6:	46bd      	mov	sp, r7
 80187c8:	b006      	add	sp, #24
 80187ca:	bd80      	pop	{r7, pc}

080187cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b08e      	sub	sp, #56	@ 0x38
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187d4:	f3ef 8310 	mrs	r3, PRIMASK
 80187d8:	617b      	str	r3, [r7, #20]
  return(result);
 80187da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80187dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80187de:	2301      	movs	r3, #1
 80187e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187e2:	69bb      	ldr	r3, [r7, #24]
 80187e4:	f383 8810 	msr	PRIMASK, r3
}
 80187e8:	46c0      	nop			@ (mov r8, r8)
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	681a      	ldr	r2, [r3, #0]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	4926      	ldr	r1, [pc, #152]	@ (8018890 <UART_EndRxTransfer+0xc4>)
 80187f6:	400a      	ands	r2, r1
 80187f8:	601a      	str	r2, [r3, #0]
 80187fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187fe:	69fb      	ldr	r3, [r7, #28]
 8018800:	f383 8810 	msr	PRIMASK, r3
}
 8018804:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018806:	f3ef 8310 	mrs	r3, PRIMASK
 801880a:	623b      	str	r3, [r7, #32]
  return(result);
 801880c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801880e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018810:	2301      	movs	r3, #1
 8018812:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018816:	f383 8810 	msr	PRIMASK, r3
}
 801881a:	46c0      	nop			@ (mov r8, r8)
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	689a      	ldr	r2, [r3, #8]
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	2101      	movs	r1, #1
 8018828:	438a      	bics	r2, r1
 801882a:	609a      	str	r2, [r3, #8]
 801882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801882e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018832:	f383 8810 	msr	PRIMASK, r3
}
 8018836:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801883c:	2b01      	cmp	r3, #1
 801883e:	d118      	bne.n	8018872 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018840:	f3ef 8310 	mrs	r3, PRIMASK
 8018844:	60bb      	str	r3, [r7, #8]
  return(result);
 8018846:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801884a:	2301      	movs	r3, #1
 801884c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	f383 8810 	msr	PRIMASK, r3
}
 8018854:	46c0      	nop			@ (mov r8, r8)
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	681a      	ldr	r2, [r3, #0]
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	2110      	movs	r1, #16
 8018862:	438a      	bics	r2, r1
 8018864:	601a      	str	r2, [r3, #0]
 8018866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801886a:	693b      	ldr	r3, [r7, #16]
 801886c:	f383 8810 	msr	PRIMASK, r3
}
 8018870:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	2280      	movs	r2, #128	@ 0x80
 8018876:	2120      	movs	r1, #32
 8018878:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2200      	movs	r2, #0
 801887e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	2200      	movs	r2, #0
 8018884:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018886:	46c0      	nop			@ (mov r8, r8)
 8018888:	46bd      	mov	sp, r7
 801888a:	b00e      	add	sp, #56	@ 0x38
 801888c:	bd80      	pop	{r7, pc}
 801888e:	46c0      	nop			@ (mov r8, r8)
 8018890:	fffffedf 	.word	0xfffffedf

08018894 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b08c      	sub	sp, #48	@ 0x30
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	2220      	movs	r2, #32
 80188aa:	4013      	ands	r3, r2
 80188ac:	d135      	bne.n	801891a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80188ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188b0:	2252      	movs	r2, #82	@ 0x52
 80188b2:	2100      	movs	r1, #0
 80188b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188b6:	f3ef 8310 	mrs	r3, PRIMASK
 80188ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80188bc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80188be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80188c0:	2301      	movs	r3, #1
 80188c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188c4:	693b      	ldr	r3, [r7, #16]
 80188c6:	f383 8810 	msr	PRIMASK, r3
}
 80188ca:	46c0      	nop			@ (mov r8, r8)
 80188cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	689a      	ldr	r2, [r3, #8]
 80188d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	2180      	movs	r1, #128	@ 0x80
 80188d8:	438a      	bics	r2, r1
 80188da:	609a      	str	r2, [r3, #8]
 80188dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	f383 8810 	msr	PRIMASK, r3
}
 80188e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188e8:	f3ef 8310 	mrs	r3, PRIMASK
 80188ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80188ee:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80188f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80188f2:	2301      	movs	r3, #1
 80188f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188f6:	69fb      	ldr	r3, [r7, #28]
 80188f8:	f383 8810 	msr	PRIMASK, r3
}
 80188fc:	46c0      	nop			@ (mov r8, r8)
 80188fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	681a      	ldr	r2, [r3, #0]
 8018904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2140      	movs	r1, #64	@ 0x40
 801890a:	430a      	orrs	r2, r1
 801890c:	601a      	str	r2, [r3, #0]
 801890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018910:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018912:	6a3b      	ldr	r3, [r7, #32]
 8018914:	f383 8810 	msr	PRIMASK, r3
}
 8018918:	e006      	b.n	8018928 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801891a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801891c:	228c      	movs	r2, #140	@ 0x8c
 801891e:	589b      	ldr	r3, [r3, r2]
 8018920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018922:	0010      	movs	r0, r2
 8018924:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018926:	46c0      	nop			@ (mov r8, r8)
 8018928:	46c0      	nop			@ (mov r8, r8)
 801892a:	46bd      	mov	sp, r7
 801892c:	b00c      	add	sp, #48	@ 0x30
 801892e:	bd80      	pop	{r7, pc}

08018930 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801893c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	2288      	movs	r2, #136	@ 0x88
 8018942:	589b      	ldr	r3, [r3, r2]
 8018944:	68fa      	ldr	r2, [r7, #12]
 8018946:	0010      	movs	r0, r2
 8018948:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801894a:	46c0      	nop			@ (mov r8, r8)
 801894c:	46bd      	mov	sp, r7
 801894e:	b004      	add	sp, #16
 8018950:	bd80      	pop	{r7, pc}
	...

08018954 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b094      	sub	sp, #80	@ 0x50
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018960:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	2220      	movs	r2, #32
 801896a:	4013      	ands	r3, r2
 801896c:	d16f      	bne.n	8018a4e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801896e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018970:	225a      	movs	r2, #90	@ 0x5a
 8018972:	2100      	movs	r1, #0
 8018974:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018976:	f3ef 8310 	mrs	r3, PRIMASK
 801897a:	61bb      	str	r3, [r7, #24]
  return(result);
 801897c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801897e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018980:	2301      	movs	r3, #1
 8018982:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	f383 8810 	msr	PRIMASK, r3
}
 801898a:	46c0      	nop			@ (mov r8, r8)
 801898c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	681a      	ldr	r2, [r3, #0]
 8018992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	493b      	ldr	r1, [pc, #236]	@ (8018a84 <UART_DMAReceiveCplt+0x130>)
 8018998:	400a      	ands	r2, r1
 801899a:	601a      	str	r2, [r3, #0]
 801899c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801899e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189a0:	6a3b      	ldr	r3, [r7, #32]
 80189a2:	f383 8810 	msr	PRIMASK, r3
}
 80189a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189a8:	f3ef 8310 	mrs	r3, PRIMASK
 80189ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80189ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80189b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80189b2:	2301      	movs	r3, #1
 80189b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189b8:	f383 8810 	msr	PRIMASK, r3
}
 80189bc:	46c0      	nop			@ (mov r8, r8)
 80189be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	689a      	ldr	r2, [r3, #8]
 80189c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2101      	movs	r1, #1
 80189ca:	438a      	bics	r2, r1
 80189cc:	609a      	str	r2, [r3, #8]
 80189ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80189d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189d4:	f383 8810 	msr	PRIMASK, r3
}
 80189d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189da:	f3ef 8310 	mrs	r3, PRIMASK
 80189de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80189e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80189e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80189e4:	2301      	movs	r3, #1
 80189e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189ea:	f383 8810 	msr	PRIMASK, r3
}
 80189ee:	46c0      	nop			@ (mov r8, r8)
 80189f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	689a      	ldr	r2, [r3, #8]
 80189f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2140      	movs	r1, #64	@ 0x40
 80189fc:	438a      	bics	r2, r1
 80189fe:	609a      	str	r2, [r3, #8]
 8018a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a06:	f383 8810 	msr	PRIMASK, r3
}
 8018a0a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a0e:	2280      	movs	r2, #128	@ 0x80
 8018a10:	2120      	movs	r1, #32
 8018a12:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a18:	2b01      	cmp	r3, #1
 8018a1a:	d118      	bne.n	8018a4e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8018a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a22:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018a26:	2301      	movs	r3, #1
 8018a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	f383 8810 	msr	PRIMASK, r3
}
 8018a30:	46c0      	nop			@ (mov r8, r8)
 8018a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	681a      	ldr	r2, [r3, #0]
 8018a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2110      	movs	r1, #16
 8018a3e:	438a      	bics	r2, r1
 8018a40:	601a      	str	r2, [r3, #0]
 8018a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	f383 8810 	msr	PRIMASK, r3
}
 8018a4c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a50:	2200      	movs	r2, #0
 8018a52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a58:	2b01      	cmp	r3, #1
 8018a5a:	d109      	bne.n	8018a70 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a5e:	22ac      	movs	r2, #172	@ 0xac
 8018a60:	589b      	ldr	r3, [r3, r2]
 8018a62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a64:	2158      	movs	r1, #88	@ 0x58
 8018a66:	5a51      	ldrh	r1, [r2, r1]
 8018a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a6a:	0010      	movs	r0, r2
 8018a6c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018a6e:	e005      	b.n	8018a7c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a72:	2294      	movs	r2, #148	@ 0x94
 8018a74:	589b      	ldr	r3, [r3, r2]
 8018a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a78:	0010      	movs	r0, r2
 8018a7a:	4798      	blx	r3
}
 8018a7c:	46c0      	nop			@ (mov r8, r8)
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	b014      	add	sp, #80	@ 0x50
 8018a82:	bd80      	pop	{r7, pc}
 8018a84:	fffffeff 	.word	0xfffffeff

08018a88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	2201      	movs	r2, #1
 8018a9a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018aa0:	2b01      	cmp	r3, #1
 8018aa2:	d10b      	bne.n	8018abc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	22ac      	movs	r2, #172	@ 0xac
 8018aa8:	589b      	ldr	r3, [r3, r2]
 8018aaa:	68fa      	ldr	r2, [r7, #12]
 8018aac:	2158      	movs	r1, #88	@ 0x58
 8018aae:	5a52      	ldrh	r2, [r2, r1]
 8018ab0:	0852      	lsrs	r2, r2, #1
 8018ab2:	b291      	uxth	r1, r2
 8018ab4:	68fa      	ldr	r2, [r7, #12]
 8018ab6:	0010      	movs	r0, r2
 8018ab8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018aba:	e005      	b.n	8018ac8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	2290      	movs	r2, #144	@ 0x90
 8018ac0:	589b      	ldr	r3, [r3, r2]
 8018ac2:	68fa      	ldr	r2, [r7, #12]
 8018ac4:	0010      	movs	r0, r2
 8018ac6:	4798      	blx	r3
}
 8018ac8:	46c0      	nop			@ (mov r8, r8)
 8018aca:	46bd      	mov	sp, r7
 8018acc:	b004      	add	sp, #16
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b086      	sub	sp, #24
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018adc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018ae2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	2280      	movs	r2, #128	@ 0x80
 8018ae8:	589b      	ldr	r3, [r3, r2]
 8018aea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	689b      	ldr	r3, [r3, #8]
 8018af2:	2280      	movs	r2, #128	@ 0x80
 8018af4:	4013      	ands	r3, r2
 8018af6:	2b80      	cmp	r3, #128	@ 0x80
 8018af8:	d10a      	bne.n	8018b10 <UART_DMAError+0x40>
 8018afa:	693b      	ldr	r3, [r7, #16]
 8018afc:	2b21      	cmp	r3, #33	@ 0x21
 8018afe:	d107      	bne.n	8018b10 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2252      	movs	r2, #82	@ 0x52
 8018b04:	2100      	movs	r1, #0
 8018b06:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	0018      	movs	r0, r3
 8018b0c:	f7ff fe3a 	bl	8018784 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018b10:	697b      	ldr	r3, [r7, #20]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	689b      	ldr	r3, [r3, #8]
 8018b16:	2240      	movs	r2, #64	@ 0x40
 8018b18:	4013      	ands	r3, r2
 8018b1a:	2b40      	cmp	r3, #64	@ 0x40
 8018b1c:	d10a      	bne.n	8018b34 <UART_DMAError+0x64>
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	2b22      	cmp	r3, #34	@ 0x22
 8018b22:	d107      	bne.n	8018b34 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	225a      	movs	r2, #90	@ 0x5a
 8018b28:	2100      	movs	r1, #0
 8018b2a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018b2c:	697b      	ldr	r3, [r7, #20]
 8018b2e:	0018      	movs	r0, r3
 8018b30:	f7ff fe4c 	bl	80187cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	2284      	movs	r2, #132	@ 0x84
 8018b38:	589b      	ldr	r3, [r3, r2]
 8018b3a:	2210      	movs	r2, #16
 8018b3c:	431a      	orrs	r2, r3
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	2184      	movs	r1, #132	@ 0x84
 8018b42:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	2298      	movs	r2, #152	@ 0x98
 8018b48:	589b      	ldr	r3, [r3, r2]
 8018b4a:	697a      	ldr	r2, [r7, #20]
 8018b4c:	0010      	movs	r0, r2
 8018b4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b50:	46c0      	nop			@ (mov r8, r8)
 8018b52:	46bd      	mov	sp, r7
 8018b54:	b006      	add	sp, #24
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	225a      	movs	r2, #90	@ 0x5a
 8018b6a:	2100      	movs	r1, #0
 8018b6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	2252      	movs	r2, #82	@ 0x52
 8018b72:	2100      	movs	r1, #0
 8018b74:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2298      	movs	r2, #152	@ 0x98
 8018b7a:	589b      	ldr	r3, [r3, r2]
 8018b7c:	68fa      	ldr	r2, [r7, #12]
 8018b7e:	0010      	movs	r0, r2
 8018b80:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b82:	46c0      	nop			@ (mov r8, r8)
 8018b84:	46bd      	mov	sp, r7
 8018b86:	b004      	add	sp, #16
 8018b88:	bd80      	pop	{r7, pc}

08018b8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018b8a:	b580      	push	{r7, lr}
 8018b8c:	b086      	sub	sp, #24
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b92:	f3ef 8310 	mrs	r3, PRIMASK
 8018b96:	60bb      	str	r3, [r7, #8]
  return(result);
 8018b98:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018b9a:	617b      	str	r3, [r7, #20]
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	f383 8810 	msr	PRIMASK, r3
}
 8018ba6:	46c0      	nop			@ (mov r8, r8)
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	681a      	ldr	r2, [r3, #0]
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	2140      	movs	r1, #64	@ 0x40
 8018bb4:	438a      	bics	r2, r1
 8018bb6:	601a      	str	r2, [r3, #0]
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bbc:	693b      	ldr	r3, [r7, #16]
 8018bbe:	f383 8810 	msr	PRIMASK, r3
}
 8018bc2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2220      	movs	r2, #32
 8018bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2200      	movs	r2, #0
 8018bce:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	228c      	movs	r2, #140	@ 0x8c
 8018bd4:	589b      	ldr	r3, [r3, r2]
 8018bd6:	687a      	ldr	r2, [r7, #4]
 8018bd8:	0010      	movs	r0, r2
 8018bda:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018bdc:	46c0      	nop			@ (mov r8, r8)
 8018bde:	46bd      	mov	sp, r7
 8018be0:	b006      	add	sp, #24
 8018be2:	bd80      	pop	{r7, pc}

08018be4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b094      	sub	sp, #80	@ 0x50
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018bec:	204e      	movs	r0, #78	@ 0x4e
 8018bee:	183b      	adds	r3, r7, r0
 8018bf0:	687a      	ldr	r2, [r7, #4]
 8018bf2:	215c      	movs	r1, #92	@ 0x5c
 8018bf4:	5a52      	ldrh	r2, [r2, r1]
 8018bf6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2280      	movs	r2, #128	@ 0x80
 8018bfc:	589b      	ldr	r3, [r3, r2]
 8018bfe:	2b22      	cmp	r3, #34	@ 0x22
 8018c00:	d000      	beq.n	8018c04 <UART_RxISR_8BIT+0x20>
 8018c02:	e0c2      	b.n	8018d8a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018c0a:	214c      	movs	r1, #76	@ 0x4c
 8018c0c:	187b      	adds	r3, r7, r1
 8018c0e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018c10:	187b      	adds	r3, r7, r1
 8018c12:	881b      	ldrh	r3, [r3, #0]
 8018c14:	b2da      	uxtb	r2, r3
 8018c16:	183b      	adds	r3, r7, r0
 8018c18:	881b      	ldrh	r3, [r3, #0]
 8018c1a:	b2d9      	uxtb	r1, r3
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c20:	400a      	ands	r2, r1
 8018c22:	b2d2      	uxtb	r2, r2
 8018c24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c2a:	1c5a      	adds	r2, r3, #1
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	225a      	movs	r2, #90	@ 0x5a
 8018c34:	5a9b      	ldrh	r3, [r3, r2]
 8018c36:	b29b      	uxth	r3, r3
 8018c38:	3b01      	subs	r3, #1
 8018c3a:	b299      	uxth	r1, r3
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	225a      	movs	r2, #90	@ 0x5a
 8018c40:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	225a      	movs	r2, #90	@ 0x5a
 8018c46:	5a9b      	ldrh	r3, [r3, r2]
 8018c48:	b29b      	uxth	r3, r3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d000      	beq.n	8018c50 <UART_RxISR_8BIT+0x6c>
 8018c4e:	e0a4      	b.n	8018d9a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c50:	f3ef 8310 	mrs	r3, PRIMASK
 8018c54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018c5a:	2301      	movs	r3, #1
 8018c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c60:	f383 8810 	msr	PRIMASK, r3
}
 8018c64:	46c0      	nop			@ (mov r8, r8)
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	681a      	ldr	r2, [r3, #0]
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	494c      	ldr	r1, [pc, #304]	@ (8018da4 <UART_RxISR_8BIT+0x1c0>)
 8018c72:	400a      	ands	r2, r1
 8018c74:	601a      	str	r2, [r3, #0]
 8018c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c7c:	f383 8810 	msr	PRIMASK, r3
}
 8018c80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c82:	f3ef 8310 	mrs	r3, PRIMASK
 8018c86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c92:	f383 8810 	msr	PRIMASK, r3
}
 8018c96:	46c0      	nop			@ (mov r8, r8)
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	689a      	ldr	r2, [r3, #8]
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	2101      	movs	r1, #1
 8018ca4:	438a      	bics	r2, r1
 8018ca6:	609a      	str	r2, [r3, #8]
 8018ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cae:	f383 8810 	msr	PRIMASK, r3
}
 8018cb2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	2280      	movs	r2, #128	@ 0x80
 8018cb8:	2120      	movs	r1, #32
 8018cba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	4a36      	ldr	r2, [pc, #216]	@ (8018da8 <UART_RxISR_8BIT+0x1c4>)
 8018cce:	4293      	cmp	r3, r2
 8018cd0:	d01f      	beq.n	8018d12 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	685a      	ldr	r2, [r3, #4]
 8018cd8:	2380      	movs	r3, #128	@ 0x80
 8018cda:	041b      	lsls	r3, r3, #16
 8018cdc:	4013      	ands	r3, r2
 8018cde:	d018      	beq.n	8018d12 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8018ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8018ce6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8018cea:	2301      	movs	r3, #1
 8018cec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cee:	69fb      	ldr	r3, [r7, #28]
 8018cf0:	f383 8810 	msr	PRIMASK, r3
}
 8018cf4:	46c0      	nop			@ (mov r8, r8)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	492a      	ldr	r1, [pc, #168]	@ (8018dac <UART_RxISR_8BIT+0x1c8>)
 8018d02:	400a      	ands	r2, r1
 8018d04:	601a      	str	r2, [r3, #0]
 8018d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018d08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d0a:	6a3b      	ldr	r3, [r7, #32]
 8018d0c:	f383 8810 	msr	PRIMASK, r3
}
 8018d10:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d16:	2b01      	cmp	r3, #1
 8018d18:	d130      	bne.n	8018d7c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d20:	f3ef 8310 	mrs	r3, PRIMASK
 8018d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8018d26:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018d2a:	2301      	movs	r3, #1
 8018d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d2e:	693b      	ldr	r3, [r7, #16]
 8018d30:	f383 8810 	msr	PRIMASK, r3
}
 8018d34:	46c0      	nop			@ (mov r8, r8)
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	681a      	ldr	r2, [r3, #0]
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	2110      	movs	r1, #16
 8018d42:	438a      	bics	r2, r1
 8018d44:	601a      	str	r2, [r3, #0]
 8018d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d4a:	697b      	ldr	r3, [r7, #20]
 8018d4c:	f383 8810 	msr	PRIMASK, r3
}
 8018d50:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	69db      	ldr	r3, [r3, #28]
 8018d58:	2210      	movs	r2, #16
 8018d5a:	4013      	ands	r3, r2
 8018d5c:	2b10      	cmp	r3, #16
 8018d5e:	d103      	bne.n	8018d68 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2210      	movs	r2, #16
 8018d66:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	22ac      	movs	r2, #172	@ 0xac
 8018d6c:	589b      	ldr	r3, [r3, r2]
 8018d6e:	687a      	ldr	r2, [r7, #4]
 8018d70:	2158      	movs	r1, #88	@ 0x58
 8018d72:	5a51      	ldrh	r1, [r2, r1]
 8018d74:	687a      	ldr	r2, [r7, #4]
 8018d76:	0010      	movs	r0, r2
 8018d78:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018d7a:	e00e      	b.n	8018d9a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2294      	movs	r2, #148	@ 0x94
 8018d80:	589b      	ldr	r3, [r3, r2]
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	0010      	movs	r0, r2
 8018d86:	4798      	blx	r3
}
 8018d88:	e007      	b.n	8018d9a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	699a      	ldr	r2, [r3, #24]
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	2108      	movs	r1, #8
 8018d96:	430a      	orrs	r2, r1
 8018d98:	619a      	str	r2, [r3, #24]
}
 8018d9a:	46c0      	nop			@ (mov r8, r8)
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	b014      	add	sp, #80	@ 0x50
 8018da0:	bd80      	pop	{r7, pc}
 8018da2:	46c0      	nop			@ (mov r8, r8)
 8018da4:	fffffedf 	.word	0xfffffedf
 8018da8:	40004800 	.word	0x40004800
 8018dac:	fbffffff 	.word	0xfbffffff

08018db0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b094      	sub	sp, #80	@ 0x50
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018db8:	204e      	movs	r0, #78	@ 0x4e
 8018dba:	183b      	adds	r3, r7, r0
 8018dbc:	687a      	ldr	r2, [r7, #4]
 8018dbe:	215c      	movs	r1, #92	@ 0x5c
 8018dc0:	5a52      	ldrh	r2, [r2, r1]
 8018dc2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2280      	movs	r2, #128	@ 0x80
 8018dc8:	589b      	ldr	r3, [r3, r2]
 8018dca:	2b22      	cmp	r3, #34	@ 0x22
 8018dcc:	d000      	beq.n	8018dd0 <UART_RxISR_16BIT+0x20>
 8018dce:	e0c2      	b.n	8018f56 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018dd6:	214c      	movs	r1, #76	@ 0x4c
 8018dd8:	187b      	adds	r3, r7, r1
 8018dda:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018de0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018de2:	187b      	adds	r3, r7, r1
 8018de4:	183a      	adds	r2, r7, r0
 8018de6:	881b      	ldrh	r3, [r3, #0]
 8018de8:	8812      	ldrh	r2, [r2, #0]
 8018dea:	4013      	ands	r3, r2
 8018dec:	b29a      	uxth	r2, r3
 8018dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018df0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018df6:	1c9a      	adds	r2, r3, #2
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	225a      	movs	r2, #90	@ 0x5a
 8018e00:	5a9b      	ldrh	r3, [r3, r2]
 8018e02:	b29b      	uxth	r3, r3
 8018e04:	3b01      	subs	r3, #1
 8018e06:	b299      	uxth	r1, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	225a      	movs	r2, #90	@ 0x5a
 8018e0c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	225a      	movs	r2, #90	@ 0x5a
 8018e12:	5a9b      	ldrh	r3, [r3, r2]
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d000      	beq.n	8018e1c <UART_RxISR_16BIT+0x6c>
 8018e1a:	e0a4      	b.n	8018f66 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8018e20:	623b      	str	r3, [r7, #32]
  return(result);
 8018e22:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e26:	2301      	movs	r3, #1
 8018e28:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e2c:	f383 8810 	msr	PRIMASK, r3
}
 8018e30:	46c0      	nop			@ (mov r8, r8)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	681a      	ldr	r2, [r3, #0]
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	494c      	ldr	r1, [pc, #304]	@ (8018f70 <UART_RxISR_16BIT+0x1c0>)
 8018e3e:	400a      	ands	r2, r1
 8018e40:	601a      	str	r2, [r3, #0]
 8018e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e48:	f383 8810 	msr	PRIMASK, r3
}
 8018e4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8018e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8018e58:	2301      	movs	r3, #1
 8018e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e5e:	f383 8810 	msr	PRIMASK, r3
}
 8018e62:	46c0      	nop			@ (mov r8, r8)
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	689a      	ldr	r2, [r3, #8]
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2101      	movs	r1, #1
 8018e70:	438a      	bics	r2, r1
 8018e72:	609a      	str	r2, [r3, #8]
 8018e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e76:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e7a:	f383 8810 	msr	PRIMASK, r3
}
 8018e7e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2280      	movs	r2, #128	@ 0x80
 8018e84:	2120      	movs	r1, #32
 8018e86:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2200      	movs	r2, #0
 8018e92:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	4a36      	ldr	r2, [pc, #216]	@ (8018f74 <UART_RxISR_16BIT+0x1c4>)
 8018e9a:	4293      	cmp	r3, r2
 8018e9c:	d01f      	beq.n	8018ede <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	685a      	ldr	r2, [r3, #4]
 8018ea4:	2380      	movs	r3, #128	@ 0x80
 8018ea6:	041b      	lsls	r3, r3, #16
 8018ea8:	4013      	ands	r3, r2
 8018eaa:	d018      	beq.n	8018ede <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eac:	f3ef 8310 	mrs	r3, PRIMASK
 8018eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8018eb2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eba:	69bb      	ldr	r3, [r7, #24]
 8018ebc:	f383 8810 	msr	PRIMASK, r3
}
 8018ec0:	46c0      	nop			@ (mov r8, r8)
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	681a      	ldr	r2, [r3, #0]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	492a      	ldr	r1, [pc, #168]	@ (8018f78 <UART_RxISR_16BIT+0x1c8>)
 8018ece:	400a      	ands	r2, r1
 8018ed0:	601a      	str	r2, [r3, #0]
 8018ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ed6:	69fb      	ldr	r3, [r7, #28]
 8018ed8:	f383 8810 	msr	PRIMASK, r3
}
 8018edc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ee2:	2b01      	cmp	r3, #1
 8018ee4:	d130      	bne.n	8018f48 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eec:	f3ef 8310 	mrs	r3, PRIMASK
 8018ef0:	60bb      	str	r3, [r7, #8]
  return(result);
 8018ef2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	f383 8810 	msr	PRIMASK, r3
}
 8018f00:	46c0      	nop			@ (mov r8, r8)
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2110      	movs	r1, #16
 8018f0e:	438a      	bics	r2, r1
 8018f10:	601a      	str	r2, [r3, #0]
 8018f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	f383 8810 	msr	PRIMASK, r3
}
 8018f1c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	69db      	ldr	r3, [r3, #28]
 8018f24:	2210      	movs	r2, #16
 8018f26:	4013      	ands	r3, r2
 8018f28:	2b10      	cmp	r3, #16
 8018f2a:	d103      	bne.n	8018f34 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	2210      	movs	r2, #16
 8018f32:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	22ac      	movs	r2, #172	@ 0xac
 8018f38:	589b      	ldr	r3, [r3, r2]
 8018f3a:	687a      	ldr	r2, [r7, #4]
 8018f3c:	2158      	movs	r1, #88	@ 0x58
 8018f3e:	5a51      	ldrh	r1, [r2, r1]
 8018f40:	687a      	ldr	r2, [r7, #4]
 8018f42:	0010      	movs	r0, r2
 8018f44:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018f46:	e00e      	b.n	8018f66 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	2294      	movs	r2, #148	@ 0x94
 8018f4c:	589b      	ldr	r3, [r3, r2]
 8018f4e:	687a      	ldr	r2, [r7, #4]
 8018f50:	0010      	movs	r0, r2
 8018f52:	4798      	blx	r3
}
 8018f54:	e007      	b.n	8018f66 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	699a      	ldr	r2, [r3, #24]
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	2108      	movs	r1, #8
 8018f62:	430a      	orrs	r2, r1
 8018f64:	619a      	str	r2, [r3, #24]
}
 8018f66:	46c0      	nop			@ (mov r8, r8)
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	b014      	add	sp, #80	@ 0x50
 8018f6c:	bd80      	pop	{r7, pc}
 8018f6e:	46c0      	nop			@ (mov r8, r8)
 8018f70:	fffffedf 	.word	0xfffffedf
 8018f74:	40004800 	.word	0x40004800
 8018f78:	fbffffff 	.word	0xfbffffff

08018f7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b082      	sub	sp, #8
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018f84:	46c0      	nop			@ (mov r8, r8)
 8018f86:	46bd      	mov	sp, r7
 8018f88:	b002      	add	sp, #8
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b084      	sub	sp, #16
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2244      	movs	r2, #68	@ 0x44
 8018f98:	2100      	movs	r1, #0
 8018f9a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018f9c:	4b05      	ldr	r3, [pc, #20]	@ (8018fb4 <USB_EnableGlobalInt+0x28>)
 8018f9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	b299      	uxth	r1, r3
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2240      	movs	r2, #64	@ 0x40
 8018fa8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018faa:	2300      	movs	r3, #0
}
 8018fac:	0018      	movs	r0, r3
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	b004      	add	sp, #16
 8018fb2:	bd80      	pop	{r7, pc}
 8018fb4:	0000bf80 	.word	0x0000bf80

08018fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b084      	sub	sp, #16
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018fc0:	4b09      	ldr	r3, [pc, #36]	@ (8018fe8 <USB_DisableGlobalInt+0x30>)
 8018fc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	2240      	movs	r2, #64	@ 0x40
 8018fc8:	5a9b      	ldrh	r3, [r3, r2]
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	68fa      	ldr	r2, [r7, #12]
 8018fce:	b292      	uxth	r2, r2
 8018fd0:	43d2      	mvns	r2, r2
 8018fd2:	b292      	uxth	r2, r2
 8018fd4:	4013      	ands	r3, r2
 8018fd6:	b299      	uxth	r1, r3
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2240      	movs	r2, #64	@ 0x40
 8018fdc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018fde:	2300      	movs	r3, #0
}
 8018fe0:	0018      	movs	r0, r3
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	b004      	add	sp, #16
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	0000bf80 	.word	0x0000bf80

08018fec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018fec:	b084      	sub	sp, #16
 8018fee:	b590      	push	{r4, r7, lr}
 8018ff0:	b083      	sub	sp, #12
 8018ff2:	af00      	add	r7, sp, #0
 8018ff4:	6078      	str	r0, [r7, #4]
 8018ff6:	2004      	movs	r0, #4
 8018ff8:	2410      	movs	r4, #16
 8018ffa:	1900      	adds	r0, r0, r4
 8018ffc:	2408      	movs	r4, #8
 8018ffe:	46a4      	mov	ip, r4
 8019000:	44bc      	add	ip, r7
 8019002:	4460      	add	r0, ip
 8019004:	6001      	str	r1, [r0, #0]
 8019006:	6042      	str	r2, [r0, #4]
 8019008:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2240      	movs	r2, #64	@ 0x40
 801900e:	2101      	movs	r1, #1
 8019010:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	2240      	movs	r2, #64	@ 0x40
 8019016:	2100      	movs	r1, #0
 8019018:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	2244      	movs	r2, #68	@ 0x44
 801901e:	2100      	movs	r1, #0
 8019020:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	2250      	movs	r2, #80	@ 0x50
 8019026:	2100      	movs	r1, #0
 8019028:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801902a:	2300      	movs	r3, #0
}
 801902c:	0018      	movs	r0, r3
 801902e:	46bd      	mov	sp, r7
 8019030:	b003      	add	sp, #12
 8019032:	bc90      	pop	{r4, r7}
 8019034:	bc08      	pop	{r3}
 8019036:	b004      	add	sp, #16
 8019038:	4718      	bx	r3
	...

0801903c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b09c      	sub	sp, #112	@ 0x70
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8019046:	236f      	movs	r3, #111	@ 0x6f
 8019048:	18fb      	adds	r3, r7, r3
 801904a:	2200      	movs	r2, #0
 801904c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801904e:	687a      	ldr	r2, [r7, #4]
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	009b      	lsls	r3, r3, #2
 8019056:	18d3      	adds	r3, r2, r3
 8019058:	881b      	ldrh	r3, [r3, #0]
 801905a:	b29a      	uxth	r2, r3
 801905c:	236c      	movs	r3, #108	@ 0x6c
 801905e:	18fb      	adds	r3, r7, r3
 8019060:	49a3      	ldr	r1, [pc, #652]	@ (80192f0 <USB_ActivateEndpoint+0x2b4>)
 8019062:	400a      	ands	r2, r1
 8019064:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	78db      	ldrb	r3, [r3, #3]
 801906a:	2b03      	cmp	r3, #3
 801906c:	d017      	beq.n	801909e <USB_ActivateEndpoint+0x62>
 801906e:	dc28      	bgt.n	80190c2 <USB_ActivateEndpoint+0x86>
 8019070:	2b02      	cmp	r3, #2
 8019072:	d00e      	beq.n	8019092 <USB_ActivateEndpoint+0x56>
 8019074:	dc25      	bgt.n	80190c2 <USB_ActivateEndpoint+0x86>
 8019076:	2b00      	cmp	r3, #0
 8019078:	d002      	beq.n	8019080 <USB_ActivateEndpoint+0x44>
 801907a:	2b01      	cmp	r3, #1
 801907c:	d018      	beq.n	80190b0 <USB_ActivateEndpoint+0x74>
 801907e:	e020      	b.n	80190c2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019080:	226c      	movs	r2, #108	@ 0x6c
 8019082:	18bb      	adds	r3, r7, r2
 8019084:	18ba      	adds	r2, r7, r2
 8019086:	8812      	ldrh	r2, [r2, #0]
 8019088:	2180      	movs	r1, #128	@ 0x80
 801908a:	0089      	lsls	r1, r1, #2
 801908c:	430a      	orrs	r2, r1
 801908e:	801a      	strh	r2, [r3, #0]
      break;
 8019090:	e01c      	b.n	80190cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019092:	226c      	movs	r2, #108	@ 0x6c
 8019094:	18bb      	adds	r3, r7, r2
 8019096:	18ba      	adds	r2, r7, r2
 8019098:	8812      	ldrh	r2, [r2, #0]
 801909a:	801a      	strh	r2, [r3, #0]
      break;
 801909c:	e016      	b.n	80190cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801909e:	226c      	movs	r2, #108	@ 0x6c
 80190a0:	18bb      	adds	r3, r7, r2
 80190a2:	18ba      	adds	r2, r7, r2
 80190a4:	8812      	ldrh	r2, [r2, #0]
 80190a6:	21c0      	movs	r1, #192	@ 0xc0
 80190a8:	00c9      	lsls	r1, r1, #3
 80190aa:	430a      	orrs	r2, r1
 80190ac:	801a      	strh	r2, [r3, #0]
      break;
 80190ae:	e00d      	b.n	80190cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80190b0:	226c      	movs	r2, #108	@ 0x6c
 80190b2:	18bb      	adds	r3, r7, r2
 80190b4:	18ba      	adds	r2, r7, r2
 80190b6:	8812      	ldrh	r2, [r2, #0]
 80190b8:	2180      	movs	r1, #128	@ 0x80
 80190ba:	00c9      	lsls	r1, r1, #3
 80190bc:	430a      	orrs	r2, r1
 80190be:	801a      	strh	r2, [r3, #0]
      break;
 80190c0:	e004      	b.n	80190cc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80190c2:	236f      	movs	r3, #111	@ 0x6f
 80190c4:	18fb      	adds	r3, r7, r3
 80190c6:	2201      	movs	r2, #1
 80190c8:	701a      	strb	r2, [r3, #0]
      break;
 80190ca:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80190cc:	687a      	ldr	r2, [r7, #4]
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	009b      	lsls	r3, r3, #2
 80190d4:	18d3      	adds	r3, r2, r3
 80190d6:	226c      	movs	r2, #108	@ 0x6c
 80190d8:	18ba      	adds	r2, r7, r2
 80190da:	8812      	ldrh	r2, [r2, #0]
 80190dc:	4985      	ldr	r1, [pc, #532]	@ (80192f4 <USB_ActivateEndpoint+0x2b8>)
 80190de:	430a      	orrs	r2, r1
 80190e0:	b292      	uxth	r2, r2
 80190e2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80190e4:	687a      	ldr	r2, [r7, #4]
 80190e6:	683b      	ldr	r3, [r7, #0]
 80190e8:	781b      	ldrb	r3, [r3, #0]
 80190ea:	009b      	lsls	r3, r3, #2
 80190ec:	18d3      	adds	r3, r2, r3
 80190ee:	881b      	ldrh	r3, [r3, #0]
 80190f0:	b29b      	uxth	r3, r3
 80190f2:	b21b      	sxth	r3, r3
 80190f4:	4a80      	ldr	r2, [pc, #512]	@ (80192f8 <USB_ActivateEndpoint+0x2bc>)
 80190f6:	4013      	ands	r3, r2
 80190f8:	b21a      	sxth	r2, r3
 80190fa:	683b      	ldr	r3, [r7, #0]
 80190fc:	781b      	ldrb	r3, [r3, #0]
 80190fe:	b21b      	sxth	r3, r3
 8019100:	4313      	orrs	r3, r2
 8019102:	b21a      	sxth	r2, r3
 8019104:	2166      	movs	r1, #102	@ 0x66
 8019106:	187b      	adds	r3, r7, r1
 8019108:	801a      	strh	r2, [r3, #0]
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	781b      	ldrb	r3, [r3, #0]
 8019110:	009b      	lsls	r3, r3, #2
 8019112:	18d3      	adds	r3, r2, r3
 8019114:	187a      	adds	r2, r7, r1
 8019116:	8812      	ldrh	r2, [r2, #0]
 8019118:	4976      	ldr	r1, [pc, #472]	@ (80192f4 <USB_ActivateEndpoint+0x2b8>)
 801911a:	430a      	orrs	r2, r1
 801911c:	b292      	uxth	r2, r2
 801911e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	7b1b      	ldrb	r3, [r3, #12]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d000      	beq.n	801912a <USB_ActivateEndpoint+0xee>
 8019128:	e178      	b.n	801941c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	785b      	ldrb	r3, [r3, #1]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d100      	bne.n	8019134 <USB_ActivateEndpoint+0xf8>
 8019132:	e07a      	b.n	801922a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	61bb      	str	r3, [r7, #24]
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	2250      	movs	r2, #80	@ 0x50
 801913c:	5a9b      	ldrh	r3, [r3, r2]
 801913e:	b29b      	uxth	r3, r3
 8019140:	001a      	movs	r2, r3
 8019142:	69bb      	ldr	r3, [r7, #24]
 8019144:	189b      	adds	r3, r3, r2
 8019146:	61bb      	str	r3, [r7, #24]
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	781b      	ldrb	r3, [r3, #0]
 801914c:	00da      	lsls	r2, r3, #3
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	18d3      	adds	r3, r2, r3
 8019152:	2280      	movs	r2, #128	@ 0x80
 8019154:	00d2      	lsls	r2, r2, #3
 8019156:	4694      	mov	ip, r2
 8019158:	4463      	add	r3, ip
 801915a:	617b      	str	r3, [r7, #20]
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	88db      	ldrh	r3, [r3, #6]
 8019160:	085b      	lsrs	r3, r3, #1
 8019162:	b29b      	uxth	r3, r3
 8019164:	18db      	adds	r3, r3, r3
 8019166:	b29a      	uxth	r2, r3
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801916c:	687a      	ldr	r2, [r7, #4]
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	009b      	lsls	r3, r3, #2
 8019174:	18d2      	adds	r2, r2, r3
 8019176:	2112      	movs	r1, #18
 8019178:	187b      	adds	r3, r7, r1
 801917a:	8812      	ldrh	r2, [r2, #0]
 801917c:	801a      	strh	r2, [r3, #0]
 801917e:	187b      	adds	r3, r7, r1
 8019180:	881b      	ldrh	r3, [r3, #0]
 8019182:	2240      	movs	r2, #64	@ 0x40
 8019184:	4013      	ands	r3, r2
 8019186:	d016      	beq.n	80191b6 <USB_ActivateEndpoint+0x17a>
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	683b      	ldr	r3, [r7, #0]
 801918c:	781b      	ldrb	r3, [r3, #0]
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	18d3      	adds	r3, r2, r3
 8019192:	881b      	ldrh	r3, [r3, #0]
 8019194:	b29a      	uxth	r2, r3
 8019196:	2010      	movs	r0, #16
 8019198:	183b      	adds	r3, r7, r0
 801919a:	4957      	ldr	r1, [pc, #348]	@ (80192f8 <USB_ActivateEndpoint+0x2bc>)
 801919c:	400a      	ands	r2, r1
 801919e:	801a      	strh	r2, [r3, #0]
 80191a0:	687a      	ldr	r2, [r7, #4]
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	781b      	ldrb	r3, [r3, #0]
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	18d3      	adds	r3, r2, r3
 80191aa:	183a      	adds	r2, r7, r0
 80191ac:	8812      	ldrh	r2, [r2, #0]
 80191ae:	4953      	ldr	r1, [pc, #332]	@ (80192fc <USB_ActivateEndpoint+0x2c0>)
 80191b0:	430a      	orrs	r2, r1
 80191b2:	b292      	uxth	r2, r2
 80191b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	78db      	ldrb	r3, [r3, #3]
 80191ba:	2b01      	cmp	r3, #1
 80191bc:	d01d      	beq.n	80191fa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	009b      	lsls	r3, r3, #2
 80191c6:	18d3      	adds	r3, r2, r3
 80191c8:	881b      	ldrh	r3, [r3, #0]
 80191ca:	b29a      	uxth	r2, r3
 80191cc:	200c      	movs	r0, #12
 80191ce:	183b      	adds	r3, r7, r0
 80191d0:	494b      	ldr	r1, [pc, #300]	@ (8019300 <USB_ActivateEndpoint+0x2c4>)
 80191d2:	400a      	ands	r2, r1
 80191d4:	801a      	strh	r2, [r3, #0]
 80191d6:	183b      	adds	r3, r7, r0
 80191d8:	183a      	adds	r2, r7, r0
 80191da:	8812      	ldrh	r2, [r2, #0]
 80191dc:	2120      	movs	r1, #32
 80191de:	404a      	eors	r2, r1
 80191e0:	801a      	strh	r2, [r3, #0]
 80191e2:	687a      	ldr	r2, [r7, #4]
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	781b      	ldrb	r3, [r3, #0]
 80191e8:	009b      	lsls	r3, r3, #2
 80191ea:	18d3      	adds	r3, r2, r3
 80191ec:	183a      	adds	r2, r7, r0
 80191ee:	8812      	ldrh	r2, [r2, #0]
 80191f0:	4940      	ldr	r1, [pc, #256]	@ (80192f4 <USB_ActivateEndpoint+0x2b8>)
 80191f2:	430a      	orrs	r2, r1
 80191f4:	b292      	uxth	r2, r2
 80191f6:	801a      	strh	r2, [r3, #0]
 80191f8:	e2b4      	b.n	8019764 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80191fa:	687a      	ldr	r2, [r7, #4]
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	781b      	ldrb	r3, [r3, #0]
 8019200:	009b      	lsls	r3, r3, #2
 8019202:	18d3      	adds	r3, r2, r3
 8019204:	881b      	ldrh	r3, [r3, #0]
 8019206:	b29a      	uxth	r2, r3
 8019208:	200e      	movs	r0, #14
 801920a:	183b      	adds	r3, r7, r0
 801920c:	493c      	ldr	r1, [pc, #240]	@ (8019300 <USB_ActivateEndpoint+0x2c4>)
 801920e:	400a      	ands	r2, r1
 8019210:	801a      	strh	r2, [r3, #0]
 8019212:	687a      	ldr	r2, [r7, #4]
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	781b      	ldrb	r3, [r3, #0]
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	18d3      	adds	r3, r2, r3
 801921c:	183a      	adds	r2, r7, r0
 801921e:	8812      	ldrh	r2, [r2, #0]
 8019220:	4934      	ldr	r1, [pc, #208]	@ (80192f4 <USB_ActivateEndpoint+0x2b8>)
 8019222:	430a      	orrs	r2, r1
 8019224:	b292      	uxth	r2, r2
 8019226:	801a      	strh	r2, [r3, #0]
 8019228:	e29c      	b.n	8019764 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	633b      	str	r3, [r7, #48]	@ 0x30
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	2250      	movs	r2, #80	@ 0x50
 8019232:	5a9b      	ldrh	r3, [r3, r2]
 8019234:	b29b      	uxth	r3, r3
 8019236:	001a      	movs	r2, r3
 8019238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801923a:	189b      	adds	r3, r3, r2
 801923c:	633b      	str	r3, [r7, #48]	@ 0x30
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	781b      	ldrb	r3, [r3, #0]
 8019242:	00da      	lsls	r2, r3, #3
 8019244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019246:	18d3      	adds	r3, r2, r3
 8019248:	4a2e      	ldr	r2, [pc, #184]	@ (8019304 <USB_ActivateEndpoint+0x2c8>)
 801924a:	4694      	mov	ip, r2
 801924c:	4463      	add	r3, ip
 801924e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	88db      	ldrh	r3, [r3, #6]
 8019254:	085b      	lsrs	r3, r3, #1
 8019256:	b29b      	uxth	r3, r3
 8019258:	18db      	adds	r3, r3, r3
 801925a:	b29a      	uxth	r2, r3
 801925c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801925e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2250      	movs	r2, #80	@ 0x50
 8019268:	5a9b      	ldrh	r3, [r3, r2]
 801926a:	b29b      	uxth	r3, r3
 801926c:	001a      	movs	r2, r3
 801926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019270:	189b      	adds	r3, r3, r2
 8019272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019274:	683b      	ldr	r3, [r7, #0]
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	00da      	lsls	r2, r3, #3
 801927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801927c:	18d3      	adds	r3, r2, r3
 801927e:	4a22      	ldr	r2, [pc, #136]	@ (8019308 <USB_ActivateEndpoint+0x2cc>)
 8019280:	4694      	mov	ip, r2
 8019282:	4463      	add	r3, ip
 8019284:	627b      	str	r3, [r7, #36]	@ 0x24
 8019286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019288:	881b      	ldrh	r3, [r3, #0]
 801928a:	b29b      	uxth	r3, r3
 801928c:	059b      	lsls	r3, r3, #22
 801928e:	0d9b      	lsrs	r3, r3, #22
 8019290:	b29a      	uxth	r2, r3
 8019292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019294:	801a      	strh	r2, [r3, #0]
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	691b      	ldr	r3, [r3, #16]
 801929a:	2b3e      	cmp	r3, #62	@ 0x3e
 801929c:	d91a      	bls.n	80192d4 <USB_ActivateEndpoint+0x298>
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	691b      	ldr	r3, [r3, #16]
 80192a2:	095b      	lsrs	r3, r3, #5
 80192a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	691b      	ldr	r3, [r3, #16]
 80192aa:	221f      	movs	r2, #31
 80192ac:	4013      	ands	r3, r2
 80192ae:	d102      	bne.n	80192b6 <USB_ActivateEndpoint+0x27a>
 80192b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192b2:	3b01      	subs	r3, #1
 80192b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80192b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192b8:	881b      	ldrh	r3, [r3, #0]
 80192ba:	b29a      	uxth	r2, r3
 80192bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192be:	b29b      	uxth	r3, r3
 80192c0:	029b      	lsls	r3, r3, #10
 80192c2:	b29b      	uxth	r3, r3
 80192c4:	4313      	orrs	r3, r2
 80192c6:	b29b      	uxth	r3, r3
 80192c8:	4a10      	ldr	r2, [pc, #64]	@ (801930c <USB_ActivateEndpoint+0x2d0>)
 80192ca:	4313      	orrs	r3, r2
 80192cc:	b29a      	uxth	r2, r3
 80192ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d0:	801a      	strh	r2, [r3, #0]
 80192d2:	e034      	b.n	801933e <USB_ActivateEndpoint+0x302>
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	691b      	ldr	r3, [r3, #16]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d119      	bne.n	8019310 <USB_ActivateEndpoint+0x2d4>
 80192dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192de:	881b      	ldrh	r3, [r3, #0]
 80192e0:	b29b      	uxth	r3, r3
 80192e2:	4a0a      	ldr	r2, [pc, #40]	@ (801930c <USB_ActivateEndpoint+0x2d0>)
 80192e4:	4313      	orrs	r3, r2
 80192e6:	b29a      	uxth	r2, r3
 80192e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ea:	801a      	strh	r2, [r3, #0]
 80192ec:	e027      	b.n	801933e <USB_ActivateEndpoint+0x302>
 80192ee:	46c0      	nop			@ (mov r8, r8)
 80192f0:	ffff898f 	.word	0xffff898f
 80192f4:	ffff8080 	.word	0xffff8080
 80192f8:	ffff8f8f 	.word	0xffff8f8f
 80192fc:	ffff80c0 	.word	0xffff80c0
 8019300:	ffff8fbf 	.word	0xffff8fbf
 8019304:	00000404 	.word	0x00000404
 8019308:	00000406 	.word	0x00000406
 801930c:	ffff8000 	.word	0xffff8000
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	691b      	ldr	r3, [r3, #16]
 8019314:	085b      	lsrs	r3, r3, #1
 8019316:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	691b      	ldr	r3, [r3, #16]
 801931c:	2201      	movs	r2, #1
 801931e:	4013      	ands	r3, r2
 8019320:	d002      	beq.n	8019328 <USB_ActivateEndpoint+0x2ec>
 8019322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019324:	3301      	adds	r3, #1
 8019326:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801932a:	881b      	ldrh	r3, [r3, #0]
 801932c:	b29a      	uxth	r2, r3
 801932e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019330:	b29b      	uxth	r3, r3
 8019332:	029b      	lsls	r3, r3, #10
 8019334:	b29b      	uxth	r3, r3
 8019336:	4313      	orrs	r3, r2
 8019338:	b29a      	uxth	r2, r3
 801933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801933c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	781b      	ldrb	r3, [r3, #0]
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	18d2      	adds	r2, r2, r3
 8019348:	2122      	movs	r1, #34	@ 0x22
 801934a:	187b      	adds	r3, r7, r1
 801934c:	8812      	ldrh	r2, [r2, #0]
 801934e:	801a      	strh	r2, [r3, #0]
 8019350:	187b      	adds	r3, r7, r1
 8019352:	881a      	ldrh	r2, [r3, #0]
 8019354:	2380      	movs	r3, #128	@ 0x80
 8019356:	01db      	lsls	r3, r3, #7
 8019358:	4013      	ands	r3, r2
 801935a:	d016      	beq.n	801938a <USB_ActivateEndpoint+0x34e>
 801935c:	687a      	ldr	r2, [r7, #4]
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	781b      	ldrb	r3, [r3, #0]
 8019362:	009b      	lsls	r3, r3, #2
 8019364:	18d3      	adds	r3, r2, r3
 8019366:	881b      	ldrh	r3, [r3, #0]
 8019368:	b29a      	uxth	r2, r3
 801936a:	2020      	movs	r0, #32
 801936c:	183b      	adds	r3, r7, r0
 801936e:	49dd      	ldr	r1, [pc, #884]	@ (80196e4 <USB_ActivateEndpoint+0x6a8>)
 8019370:	400a      	ands	r2, r1
 8019372:	801a      	strh	r2, [r3, #0]
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	009b      	lsls	r3, r3, #2
 801937c:	18d3      	adds	r3, r2, r3
 801937e:	183a      	adds	r2, r7, r0
 8019380:	8812      	ldrh	r2, [r2, #0]
 8019382:	49d9      	ldr	r1, [pc, #868]	@ (80196e8 <USB_ActivateEndpoint+0x6ac>)
 8019384:	430a      	orrs	r2, r1
 8019386:	b292      	uxth	r2, r2
 8019388:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d125      	bne.n	80193de <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019392:	687a      	ldr	r2, [r7, #4]
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	781b      	ldrb	r3, [r3, #0]
 8019398:	009b      	lsls	r3, r3, #2
 801939a:	18d3      	adds	r3, r2, r3
 801939c:	881b      	ldrh	r3, [r3, #0]
 801939e:	b29a      	uxth	r2, r3
 80193a0:	201c      	movs	r0, #28
 80193a2:	183b      	adds	r3, r7, r0
 80193a4:	49d1      	ldr	r1, [pc, #836]	@ (80196ec <USB_ActivateEndpoint+0x6b0>)
 80193a6:	400a      	ands	r2, r1
 80193a8:	801a      	strh	r2, [r3, #0]
 80193aa:	183b      	adds	r3, r7, r0
 80193ac:	183a      	adds	r2, r7, r0
 80193ae:	8812      	ldrh	r2, [r2, #0]
 80193b0:	2180      	movs	r1, #128	@ 0x80
 80193b2:	0149      	lsls	r1, r1, #5
 80193b4:	404a      	eors	r2, r1
 80193b6:	801a      	strh	r2, [r3, #0]
 80193b8:	183b      	adds	r3, r7, r0
 80193ba:	183a      	adds	r2, r7, r0
 80193bc:	8812      	ldrh	r2, [r2, #0]
 80193be:	2180      	movs	r1, #128	@ 0x80
 80193c0:	0189      	lsls	r1, r1, #6
 80193c2:	404a      	eors	r2, r1
 80193c4:	801a      	strh	r2, [r3, #0]
 80193c6:	687a      	ldr	r2, [r7, #4]
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	009b      	lsls	r3, r3, #2
 80193ce:	18d3      	adds	r3, r2, r3
 80193d0:	183a      	adds	r2, r7, r0
 80193d2:	8812      	ldrh	r2, [r2, #0]
 80193d4:	49c6      	ldr	r1, [pc, #792]	@ (80196f0 <USB_ActivateEndpoint+0x6b4>)
 80193d6:	430a      	orrs	r2, r1
 80193d8:	b292      	uxth	r2, r2
 80193da:	801a      	strh	r2, [r3, #0]
 80193dc:	e1c2      	b.n	8019764 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80193de:	687a      	ldr	r2, [r7, #4]
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	009b      	lsls	r3, r3, #2
 80193e6:	18d3      	adds	r3, r2, r3
 80193e8:	881b      	ldrh	r3, [r3, #0]
 80193ea:	b29a      	uxth	r2, r3
 80193ec:	201e      	movs	r0, #30
 80193ee:	183b      	adds	r3, r7, r0
 80193f0:	49be      	ldr	r1, [pc, #760]	@ (80196ec <USB_ActivateEndpoint+0x6b0>)
 80193f2:	400a      	ands	r2, r1
 80193f4:	801a      	strh	r2, [r3, #0]
 80193f6:	183b      	adds	r3, r7, r0
 80193f8:	183a      	adds	r2, r7, r0
 80193fa:	8812      	ldrh	r2, [r2, #0]
 80193fc:	2180      	movs	r1, #128	@ 0x80
 80193fe:	0189      	lsls	r1, r1, #6
 8019400:	404a      	eors	r2, r1
 8019402:	801a      	strh	r2, [r3, #0]
 8019404:	687a      	ldr	r2, [r7, #4]
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	009b      	lsls	r3, r3, #2
 801940c:	18d3      	adds	r3, r2, r3
 801940e:	183a      	adds	r2, r7, r0
 8019410:	8812      	ldrh	r2, [r2, #0]
 8019412:	49b7      	ldr	r1, [pc, #732]	@ (80196f0 <USB_ActivateEndpoint+0x6b4>)
 8019414:	430a      	orrs	r2, r1
 8019416:	b292      	uxth	r2, r2
 8019418:	801a      	strh	r2, [r3, #0]
 801941a:	e1a3      	b.n	8019764 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801941c:	683b      	ldr	r3, [r7, #0]
 801941e:	78db      	ldrb	r3, [r3, #3]
 8019420:	2b02      	cmp	r3, #2
 8019422:	d117      	bne.n	8019454 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019424:	687a      	ldr	r2, [r7, #4]
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	009b      	lsls	r3, r3, #2
 801942c:	18d3      	adds	r3, r2, r3
 801942e:	881b      	ldrh	r3, [r3, #0]
 8019430:	b29a      	uxth	r2, r3
 8019432:	2062      	movs	r0, #98	@ 0x62
 8019434:	183b      	adds	r3, r7, r0
 8019436:	49ab      	ldr	r1, [pc, #684]	@ (80196e4 <USB_ActivateEndpoint+0x6a8>)
 8019438:	400a      	ands	r2, r1
 801943a:	801a      	strh	r2, [r3, #0]
 801943c:	687a      	ldr	r2, [r7, #4]
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	009b      	lsls	r3, r3, #2
 8019444:	18d3      	adds	r3, r2, r3
 8019446:	183a      	adds	r2, r7, r0
 8019448:	8812      	ldrh	r2, [r2, #0]
 801944a:	49aa      	ldr	r1, [pc, #680]	@ (80196f4 <USB_ActivateEndpoint+0x6b8>)
 801944c:	430a      	orrs	r2, r1
 801944e:	b292      	uxth	r2, r2
 8019450:	801a      	strh	r2, [r3, #0]
 8019452:	e016      	b.n	8019482 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019454:	687a      	ldr	r2, [r7, #4]
 8019456:	683b      	ldr	r3, [r7, #0]
 8019458:	781b      	ldrb	r3, [r3, #0]
 801945a:	009b      	lsls	r3, r3, #2
 801945c:	18d3      	adds	r3, r2, r3
 801945e:	881b      	ldrh	r3, [r3, #0]
 8019460:	b29a      	uxth	r2, r3
 8019462:	2064      	movs	r0, #100	@ 0x64
 8019464:	183b      	adds	r3, r7, r0
 8019466:	49a4      	ldr	r1, [pc, #656]	@ (80196f8 <USB_ActivateEndpoint+0x6bc>)
 8019468:	400a      	ands	r2, r1
 801946a:	801a      	strh	r2, [r3, #0]
 801946c:	687a      	ldr	r2, [r7, #4]
 801946e:	683b      	ldr	r3, [r7, #0]
 8019470:	781b      	ldrb	r3, [r3, #0]
 8019472:	009b      	lsls	r3, r3, #2
 8019474:	18d3      	adds	r3, r2, r3
 8019476:	183a      	adds	r2, r7, r0
 8019478:	8812      	ldrh	r2, [r2, #0]
 801947a:	499d      	ldr	r1, [pc, #628]	@ (80196f0 <USB_ActivateEndpoint+0x6b4>)
 801947c:	430a      	orrs	r2, r1
 801947e:	b292      	uxth	r2, r2
 8019480:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	2250      	movs	r2, #80	@ 0x50
 801948a:	5a9b      	ldrh	r3, [r3, r2]
 801948c:	b29b      	uxth	r3, r3
 801948e:	001a      	movs	r2, r3
 8019490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019492:	189b      	adds	r3, r3, r2
 8019494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	00da      	lsls	r2, r3, #3
 801949c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801949e:	18d3      	adds	r3, r2, r3
 80194a0:	2280      	movs	r2, #128	@ 0x80
 80194a2:	00d2      	lsls	r2, r2, #3
 80194a4:	4694      	mov	ip, r2
 80194a6:	4463      	add	r3, ip
 80194a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	891b      	ldrh	r3, [r3, #8]
 80194ae:	085b      	lsrs	r3, r3, #1
 80194b0:	b29b      	uxth	r3, r3
 80194b2:	18db      	adds	r3, r3, r3
 80194b4:	b29a      	uxth	r2, r3
 80194b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80194b8:	801a      	strh	r2, [r3, #0]
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	2250      	movs	r2, #80	@ 0x50
 80194c2:	5a9b      	ldrh	r3, [r3, r2]
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	001a      	movs	r2, r3
 80194c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ca:	189b      	adds	r3, r3, r2
 80194cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	781b      	ldrb	r3, [r3, #0]
 80194d2:	00da      	lsls	r2, r3, #3
 80194d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194d6:	18d3      	adds	r3, r2, r3
 80194d8:	4a88      	ldr	r2, [pc, #544]	@ (80196fc <USB_ActivateEndpoint+0x6c0>)
 80194da:	4694      	mov	ip, r2
 80194dc:	4463      	add	r3, ip
 80194de:	653b      	str	r3, [r7, #80]	@ 0x50
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	895b      	ldrh	r3, [r3, #10]
 80194e4:	085b      	lsrs	r3, r3, #1
 80194e6:	b29b      	uxth	r3, r3
 80194e8:	18db      	adds	r3, r3, r3
 80194ea:	b29a      	uxth	r2, r3
 80194ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	785b      	ldrb	r3, [r3, #1]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d000      	beq.n	80194fa <USB_ActivateEndpoint+0x4be>
 80194f8:	e087      	b.n	801960a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80194fa:	687a      	ldr	r2, [r7, #4]
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	781b      	ldrb	r3, [r3, #0]
 8019500:	009b      	lsls	r3, r3, #2
 8019502:	18d2      	adds	r2, r2, r3
 8019504:	2140      	movs	r1, #64	@ 0x40
 8019506:	187b      	adds	r3, r7, r1
 8019508:	8812      	ldrh	r2, [r2, #0]
 801950a:	801a      	strh	r2, [r3, #0]
 801950c:	187b      	adds	r3, r7, r1
 801950e:	881a      	ldrh	r2, [r3, #0]
 8019510:	2380      	movs	r3, #128	@ 0x80
 8019512:	01db      	lsls	r3, r3, #7
 8019514:	4013      	ands	r3, r2
 8019516:	d016      	beq.n	8019546 <USB_ActivateEndpoint+0x50a>
 8019518:	687a      	ldr	r2, [r7, #4]
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	009b      	lsls	r3, r3, #2
 8019520:	18d3      	adds	r3, r2, r3
 8019522:	881b      	ldrh	r3, [r3, #0]
 8019524:	b29a      	uxth	r2, r3
 8019526:	203e      	movs	r0, #62	@ 0x3e
 8019528:	183b      	adds	r3, r7, r0
 801952a:	496e      	ldr	r1, [pc, #440]	@ (80196e4 <USB_ActivateEndpoint+0x6a8>)
 801952c:	400a      	ands	r2, r1
 801952e:	801a      	strh	r2, [r3, #0]
 8019530:	687a      	ldr	r2, [r7, #4]
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	781b      	ldrb	r3, [r3, #0]
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	18d3      	adds	r3, r2, r3
 801953a:	183a      	adds	r2, r7, r0
 801953c:	8812      	ldrh	r2, [r2, #0]
 801953e:	496a      	ldr	r1, [pc, #424]	@ (80196e8 <USB_ActivateEndpoint+0x6ac>)
 8019540:	430a      	orrs	r2, r1
 8019542:	b292      	uxth	r2, r2
 8019544:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019546:	687a      	ldr	r2, [r7, #4]
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	781b      	ldrb	r3, [r3, #0]
 801954c:	009b      	lsls	r3, r3, #2
 801954e:	18d2      	adds	r2, r2, r3
 8019550:	213c      	movs	r1, #60	@ 0x3c
 8019552:	187b      	adds	r3, r7, r1
 8019554:	8812      	ldrh	r2, [r2, #0]
 8019556:	801a      	strh	r2, [r3, #0]
 8019558:	187b      	adds	r3, r7, r1
 801955a:	881b      	ldrh	r3, [r3, #0]
 801955c:	2240      	movs	r2, #64	@ 0x40
 801955e:	4013      	ands	r3, r2
 8019560:	d016      	beq.n	8019590 <USB_ActivateEndpoint+0x554>
 8019562:	687a      	ldr	r2, [r7, #4]
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	009b      	lsls	r3, r3, #2
 801956a:	18d3      	adds	r3, r2, r3
 801956c:	881b      	ldrh	r3, [r3, #0]
 801956e:	b29a      	uxth	r2, r3
 8019570:	203a      	movs	r0, #58	@ 0x3a
 8019572:	183b      	adds	r3, r7, r0
 8019574:	495b      	ldr	r1, [pc, #364]	@ (80196e4 <USB_ActivateEndpoint+0x6a8>)
 8019576:	400a      	ands	r2, r1
 8019578:	801a      	strh	r2, [r3, #0]
 801957a:	687a      	ldr	r2, [r7, #4]
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	009b      	lsls	r3, r3, #2
 8019582:	18d3      	adds	r3, r2, r3
 8019584:	183a      	adds	r2, r7, r0
 8019586:	8812      	ldrh	r2, [r2, #0]
 8019588:	495d      	ldr	r1, [pc, #372]	@ (8019700 <USB_ActivateEndpoint+0x6c4>)
 801958a:	430a      	orrs	r2, r1
 801958c:	b292      	uxth	r2, r2
 801958e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	781b      	ldrb	r3, [r3, #0]
 8019596:	009b      	lsls	r3, r3, #2
 8019598:	18d3      	adds	r3, r2, r3
 801959a:	881b      	ldrh	r3, [r3, #0]
 801959c:	b29a      	uxth	r2, r3
 801959e:	2038      	movs	r0, #56	@ 0x38
 80195a0:	183b      	adds	r3, r7, r0
 80195a2:	4952      	ldr	r1, [pc, #328]	@ (80196ec <USB_ActivateEndpoint+0x6b0>)
 80195a4:	400a      	ands	r2, r1
 80195a6:	801a      	strh	r2, [r3, #0]
 80195a8:	183b      	adds	r3, r7, r0
 80195aa:	183a      	adds	r2, r7, r0
 80195ac:	8812      	ldrh	r2, [r2, #0]
 80195ae:	2180      	movs	r1, #128	@ 0x80
 80195b0:	0149      	lsls	r1, r1, #5
 80195b2:	404a      	eors	r2, r1
 80195b4:	801a      	strh	r2, [r3, #0]
 80195b6:	183b      	adds	r3, r7, r0
 80195b8:	183a      	adds	r2, r7, r0
 80195ba:	8812      	ldrh	r2, [r2, #0]
 80195bc:	2180      	movs	r1, #128	@ 0x80
 80195be:	0189      	lsls	r1, r1, #6
 80195c0:	404a      	eors	r2, r1
 80195c2:	801a      	strh	r2, [r3, #0]
 80195c4:	687a      	ldr	r2, [r7, #4]
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	18d3      	adds	r3, r2, r3
 80195ce:	183a      	adds	r2, r7, r0
 80195d0:	8812      	ldrh	r2, [r2, #0]
 80195d2:	4947      	ldr	r1, [pc, #284]	@ (80196f0 <USB_ActivateEndpoint+0x6b4>)
 80195d4:	430a      	orrs	r2, r1
 80195d6:	b292      	uxth	r2, r2
 80195d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80195da:	687a      	ldr	r2, [r7, #4]
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	781b      	ldrb	r3, [r3, #0]
 80195e0:	009b      	lsls	r3, r3, #2
 80195e2:	18d3      	adds	r3, r2, r3
 80195e4:	881b      	ldrh	r3, [r3, #0]
 80195e6:	b29a      	uxth	r2, r3
 80195e8:	2036      	movs	r0, #54	@ 0x36
 80195ea:	183b      	adds	r3, r7, r0
 80195ec:	4945      	ldr	r1, [pc, #276]	@ (8019704 <USB_ActivateEndpoint+0x6c8>)
 80195ee:	400a      	ands	r2, r1
 80195f0:	801a      	strh	r2, [r3, #0]
 80195f2:	687a      	ldr	r2, [r7, #4]
 80195f4:	683b      	ldr	r3, [r7, #0]
 80195f6:	781b      	ldrb	r3, [r3, #0]
 80195f8:	009b      	lsls	r3, r3, #2
 80195fa:	18d3      	adds	r3, r2, r3
 80195fc:	183a      	adds	r2, r7, r0
 80195fe:	8812      	ldrh	r2, [r2, #0]
 8019600:	493b      	ldr	r1, [pc, #236]	@ (80196f0 <USB_ActivateEndpoint+0x6b4>)
 8019602:	430a      	orrs	r2, r1
 8019604:	b292      	uxth	r2, r2
 8019606:	801a      	strh	r2, [r3, #0]
 8019608:	e0ac      	b.n	8019764 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801960a:	687a      	ldr	r2, [r7, #4]
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	781b      	ldrb	r3, [r3, #0]
 8019610:	009b      	lsls	r3, r3, #2
 8019612:	18d2      	adds	r2, r2, r3
 8019614:	214e      	movs	r1, #78	@ 0x4e
 8019616:	187b      	adds	r3, r7, r1
 8019618:	8812      	ldrh	r2, [r2, #0]
 801961a:	801a      	strh	r2, [r3, #0]
 801961c:	187b      	adds	r3, r7, r1
 801961e:	881a      	ldrh	r2, [r3, #0]
 8019620:	2380      	movs	r3, #128	@ 0x80
 8019622:	01db      	lsls	r3, r3, #7
 8019624:	4013      	ands	r3, r2
 8019626:	d016      	beq.n	8019656 <USB_ActivateEndpoint+0x61a>
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	009b      	lsls	r3, r3, #2
 8019630:	18d3      	adds	r3, r2, r3
 8019632:	881b      	ldrh	r3, [r3, #0]
 8019634:	b29a      	uxth	r2, r3
 8019636:	204c      	movs	r0, #76	@ 0x4c
 8019638:	183b      	adds	r3, r7, r0
 801963a:	492a      	ldr	r1, [pc, #168]	@ (80196e4 <USB_ActivateEndpoint+0x6a8>)
 801963c:	400a      	ands	r2, r1
 801963e:	801a      	strh	r2, [r3, #0]
 8019640:	687a      	ldr	r2, [r7, #4]
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	781b      	ldrb	r3, [r3, #0]
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	18d3      	adds	r3, r2, r3
 801964a:	183a      	adds	r2, r7, r0
 801964c:	8812      	ldrh	r2, [r2, #0]
 801964e:	4926      	ldr	r1, [pc, #152]	@ (80196e8 <USB_ActivateEndpoint+0x6ac>)
 8019650:	430a      	orrs	r2, r1
 8019652:	b292      	uxth	r2, r2
 8019654:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019656:	687a      	ldr	r2, [r7, #4]
 8019658:	683b      	ldr	r3, [r7, #0]
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	009b      	lsls	r3, r3, #2
 801965e:	18d2      	adds	r2, r2, r3
 8019660:	214a      	movs	r1, #74	@ 0x4a
 8019662:	187b      	adds	r3, r7, r1
 8019664:	8812      	ldrh	r2, [r2, #0]
 8019666:	801a      	strh	r2, [r3, #0]
 8019668:	187b      	adds	r3, r7, r1
 801966a:	881b      	ldrh	r3, [r3, #0]
 801966c:	2240      	movs	r2, #64	@ 0x40
 801966e:	4013      	ands	r3, r2
 8019670:	d016      	beq.n	80196a0 <USB_ActivateEndpoint+0x664>
 8019672:	687a      	ldr	r2, [r7, #4]
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	18d3      	adds	r3, r2, r3
 801967c:	881b      	ldrh	r3, [r3, #0]
 801967e:	b29a      	uxth	r2, r3
 8019680:	2048      	movs	r0, #72	@ 0x48
 8019682:	183b      	adds	r3, r7, r0
 8019684:	4917      	ldr	r1, [pc, #92]	@ (80196e4 <USB_ActivateEndpoint+0x6a8>)
 8019686:	400a      	ands	r2, r1
 8019688:	801a      	strh	r2, [r3, #0]
 801968a:	687a      	ldr	r2, [r7, #4]
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	781b      	ldrb	r3, [r3, #0]
 8019690:	009b      	lsls	r3, r3, #2
 8019692:	18d3      	adds	r3, r2, r3
 8019694:	183a      	adds	r2, r7, r0
 8019696:	8812      	ldrh	r2, [r2, #0]
 8019698:	4919      	ldr	r1, [pc, #100]	@ (8019700 <USB_ActivateEndpoint+0x6c4>)
 801969a:	430a      	orrs	r2, r1
 801969c:	b292      	uxth	r2, r2
 801969e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	78db      	ldrb	r3, [r3, #3]
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d02f      	beq.n	8019708 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80196a8:	687a      	ldr	r2, [r7, #4]
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	781b      	ldrb	r3, [r3, #0]
 80196ae:	009b      	lsls	r3, r3, #2
 80196b0:	18d3      	adds	r3, r2, r3
 80196b2:	881b      	ldrh	r3, [r3, #0]
 80196b4:	b29a      	uxth	r2, r3
 80196b6:	2044      	movs	r0, #68	@ 0x44
 80196b8:	183b      	adds	r3, r7, r0
 80196ba:	4912      	ldr	r1, [pc, #72]	@ (8019704 <USB_ActivateEndpoint+0x6c8>)
 80196bc:	400a      	ands	r2, r1
 80196be:	801a      	strh	r2, [r3, #0]
 80196c0:	183b      	adds	r3, r7, r0
 80196c2:	183a      	adds	r2, r7, r0
 80196c4:	8812      	ldrh	r2, [r2, #0]
 80196c6:	2120      	movs	r1, #32
 80196c8:	404a      	eors	r2, r1
 80196ca:	801a      	strh	r2, [r3, #0]
 80196cc:	687a      	ldr	r2, [r7, #4]
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	781b      	ldrb	r3, [r3, #0]
 80196d2:	009b      	lsls	r3, r3, #2
 80196d4:	18d3      	adds	r3, r2, r3
 80196d6:	183a      	adds	r2, r7, r0
 80196d8:	8812      	ldrh	r2, [r2, #0]
 80196da:	4905      	ldr	r1, [pc, #20]	@ (80196f0 <USB_ActivateEndpoint+0x6b4>)
 80196dc:	430a      	orrs	r2, r1
 80196de:	b292      	uxth	r2, r2
 80196e0:	801a      	strh	r2, [r3, #0]
 80196e2:	e028      	b.n	8019736 <USB_ActivateEndpoint+0x6fa>
 80196e4:	ffff8f8f 	.word	0xffff8f8f
 80196e8:	ffffc080 	.word	0xffffc080
 80196ec:	ffffbf8f 	.word	0xffffbf8f
 80196f0:	ffff8080 	.word	0xffff8080
 80196f4:	ffff8180 	.word	0xffff8180
 80196f8:	ffff8e8f 	.word	0xffff8e8f
 80196fc:	00000404 	.word	0x00000404
 8019700:	ffff80c0 	.word	0xffff80c0
 8019704:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019708:	687a      	ldr	r2, [r7, #4]
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	781b      	ldrb	r3, [r3, #0]
 801970e:	009b      	lsls	r3, r3, #2
 8019710:	18d3      	adds	r3, r2, r3
 8019712:	881b      	ldrh	r3, [r3, #0]
 8019714:	b29a      	uxth	r2, r3
 8019716:	2046      	movs	r0, #70	@ 0x46
 8019718:	183b      	adds	r3, r7, r0
 801971a:	4916      	ldr	r1, [pc, #88]	@ (8019774 <USB_ActivateEndpoint+0x738>)
 801971c:	400a      	ands	r2, r1
 801971e:	801a      	strh	r2, [r3, #0]
 8019720:	687a      	ldr	r2, [r7, #4]
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	781b      	ldrb	r3, [r3, #0]
 8019726:	009b      	lsls	r3, r3, #2
 8019728:	18d3      	adds	r3, r2, r3
 801972a:	183a      	adds	r2, r7, r0
 801972c:	8812      	ldrh	r2, [r2, #0]
 801972e:	4912      	ldr	r1, [pc, #72]	@ (8019778 <USB_ActivateEndpoint+0x73c>)
 8019730:	430a      	orrs	r2, r1
 8019732:	b292      	uxth	r2, r2
 8019734:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019736:	687a      	ldr	r2, [r7, #4]
 8019738:	683b      	ldr	r3, [r7, #0]
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	009b      	lsls	r3, r3, #2
 801973e:	18d3      	adds	r3, r2, r3
 8019740:	881b      	ldrh	r3, [r3, #0]
 8019742:	b29a      	uxth	r2, r3
 8019744:	2042      	movs	r0, #66	@ 0x42
 8019746:	183b      	adds	r3, r7, r0
 8019748:	490c      	ldr	r1, [pc, #48]	@ (801977c <USB_ActivateEndpoint+0x740>)
 801974a:	400a      	ands	r2, r1
 801974c:	801a      	strh	r2, [r3, #0]
 801974e:	687a      	ldr	r2, [r7, #4]
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	781b      	ldrb	r3, [r3, #0]
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	18d3      	adds	r3, r2, r3
 8019758:	183a      	adds	r2, r7, r0
 801975a:	8812      	ldrh	r2, [r2, #0]
 801975c:	4906      	ldr	r1, [pc, #24]	@ (8019778 <USB_ActivateEndpoint+0x73c>)
 801975e:	430a      	orrs	r2, r1
 8019760:	b292      	uxth	r2, r2
 8019762:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019764:	236f      	movs	r3, #111	@ 0x6f
 8019766:	18fb      	adds	r3, r7, r3
 8019768:	781b      	ldrb	r3, [r3, #0]
}
 801976a:	0018      	movs	r0, r3
 801976c:	46bd      	mov	sp, r7
 801976e:	b01c      	add	sp, #112	@ 0x70
 8019770:	bd80      	pop	{r7, pc}
 8019772:	46c0      	nop			@ (mov r8, r8)
 8019774:	ffff8fbf 	.word	0xffff8fbf
 8019778:	ffff8080 	.word	0xffff8080
 801977c:	ffffbf8f 	.word	0xffffbf8f

08019780 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b08c      	sub	sp, #48	@ 0x30
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	7b1b      	ldrb	r3, [r3, #12]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d000      	beq.n	8019794 <USB_DeactivateEndpoint+0x14>
 8019792:	e07e      	b.n	8019892 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019794:	683b      	ldr	r3, [r7, #0]
 8019796:	785b      	ldrb	r3, [r3, #1]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d03c      	beq.n	8019816 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801979c:	687a      	ldr	r2, [r7, #4]
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	18d2      	adds	r2, r2, r3
 80197a6:	210c      	movs	r1, #12
 80197a8:	187b      	adds	r3, r7, r1
 80197aa:	8812      	ldrh	r2, [r2, #0]
 80197ac:	801a      	strh	r2, [r3, #0]
 80197ae:	187b      	adds	r3, r7, r1
 80197b0:	881b      	ldrh	r3, [r3, #0]
 80197b2:	2240      	movs	r2, #64	@ 0x40
 80197b4:	4013      	ands	r3, r2
 80197b6:	d016      	beq.n	80197e6 <USB_DeactivateEndpoint+0x66>
 80197b8:	687a      	ldr	r2, [r7, #4]
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	781b      	ldrb	r3, [r3, #0]
 80197be:	009b      	lsls	r3, r3, #2
 80197c0:	18d3      	adds	r3, r2, r3
 80197c2:	881b      	ldrh	r3, [r3, #0]
 80197c4:	b29a      	uxth	r2, r3
 80197c6:	200a      	movs	r0, #10
 80197c8:	183b      	adds	r3, r7, r0
 80197ca:	49c7      	ldr	r1, [pc, #796]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 80197cc:	400a      	ands	r2, r1
 80197ce:	801a      	strh	r2, [r3, #0]
 80197d0:	687a      	ldr	r2, [r7, #4]
 80197d2:	683b      	ldr	r3, [r7, #0]
 80197d4:	781b      	ldrb	r3, [r3, #0]
 80197d6:	009b      	lsls	r3, r3, #2
 80197d8:	18d3      	adds	r3, r2, r3
 80197da:	183a      	adds	r2, r7, r0
 80197dc:	8812      	ldrh	r2, [r2, #0]
 80197de:	49c3      	ldr	r1, [pc, #780]	@ (8019aec <USB_DeactivateEndpoint+0x36c>)
 80197e0:	430a      	orrs	r2, r1
 80197e2:	b292      	uxth	r2, r2
 80197e4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80197e6:	687a      	ldr	r2, [r7, #4]
 80197e8:	683b      	ldr	r3, [r7, #0]
 80197ea:	781b      	ldrb	r3, [r3, #0]
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	18d3      	adds	r3, r2, r3
 80197f0:	881b      	ldrh	r3, [r3, #0]
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	2008      	movs	r0, #8
 80197f6:	183b      	adds	r3, r7, r0
 80197f8:	49bd      	ldr	r1, [pc, #756]	@ (8019af0 <USB_DeactivateEndpoint+0x370>)
 80197fa:	400a      	ands	r2, r1
 80197fc:	801a      	strh	r2, [r3, #0]
 80197fe:	687a      	ldr	r2, [r7, #4]
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	781b      	ldrb	r3, [r3, #0]
 8019804:	009b      	lsls	r3, r3, #2
 8019806:	18d3      	adds	r3, r2, r3
 8019808:	183a      	adds	r2, r7, r0
 801980a:	8812      	ldrh	r2, [r2, #0]
 801980c:	49b9      	ldr	r1, [pc, #740]	@ (8019af4 <USB_DeactivateEndpoint+0x374>)
 801980e:	430a      	orrs	r2, r1
 8019810:	b292      	uxth	r2, r2
 8019812:	801a      	strh	r2, [r3, #0]
 8019814:	e163      	b.n	8019ade <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019816:	687a      	ldr	r2, [r7, #4]
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	009b      	lsls	r3, r3, #2
 801981e:	18d2      	adds	r2, r2, r3
 8019820:	2112      	movs	r1, #18
 8019822:	187b      	adds	r3, r7, r1
 8019824:	8812      	ldrh	r2, [r2, #0]
 8019826:	801a      	strh	r2, [r3, #0]
 8019828:	187b      	adds	r3, r7, r1
 801982a:	881a      	ldrh	r2, [r3, #0]
 801982c:	2380      	movs	r3, #128	@ 0x80
 801982e:	01db      	lsls	r3, r3, #7
 8019830:	4013      	ands	r3, r2
 8019832:	d016      	beq.n	8019862 <USB_DeactivateEndpoint+0xe2>
 8019834:	687a      	ldr	r2, [r7, #4]
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	18d3      	adds	r3, r2, r3
 801983e:	881b      	ldrh	r3, [r3, #0]
 8019840:	b29a      	uxth	r2, r3
 8019842:	2010      	movs	r0, #16
 8019844:	183b      	adds	r3, r7, r0
 8019846:	49a8      	ldr	r1, [pc, #672]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 8019848:	400a      	ands	r2, r1
 801984a:	801a      	strh	r2, [r3, #0]
 801984c:	687a      	ldr	r2, [r7, #4]
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	781b      	ldrb	r3, [r3, #0]
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	18d3      	adds	r3, r2, r3
 8019856:	183a      	adds	r2, r7, r0
 8019858:	8812      	ldrh	r2, [r2, #0]
 801985a:	49a7      	ldr	r1, [pc, #668]	@ (8019af8 <USB_DeactivateEndpoint+0x378>)
 801985c:	430a      	orrs	r2, r1
 801985e:	b292      	uxth	r2, r2
 8019860:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	18d3      	adds	r3, r2, r3
 801986c:	881b      	ldrh	r3, [r3, #0]
 801986e:	b29a      	uxth	r2, r3
 8019870:	200e      	movs	r0, #14
 8019872:	183b      	adds	r3, r7, r0
 8019874:	49a1      	ldr	r1, [pc, #644]	@ (8019afc <USB_DeactivateEndpoint+0x37c>)
 8019876:	400a      	ands	r2, r1
 8019878:	801a      	strh	r2, [r3, #0]
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	009b      	lsls	r3, r3, #2
 8019882:	18d3      	adds	r3, r2, r3
 8019884:	183a      	adds	r2, r7, r0
 8019886:	8812      	ldrh	r2, [r2, #0]
 8019888:	499a      	ldr	r1, [pc, #616]	@ (8019af4 <USB_DeactivateEndpoint+0x374>)
 801988a:	430a      	orrs	r2, r1
 801988c:	b292      	uxth	r2, r2
 801988e:	801a      	strh	r2, [r3, #0]
 8019890:	e125      	b.n	8019ade <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	785b      	ldrb	r3, [r3, #1]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d000      	beq.n	801989c <USB_DeactivateEndpoint+0x11c>
 801989a:	e090      	b.n	80199be <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801989c:	687a      	ldr	r2, [r7, #4]
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	009b      	lsls	r3, r3, #2
 80198a4:	18d2      	adds	r2, r2, r3
 80198a6:	2120      	movs	r1, #32
 80198a8:	187b      	adds	r3, r7, r1
 80198aa:	8812      	ldrh	r2, [r2, #0]
 80198ac:	801a      	strh	r2, [r3, #0]
 80198ae:	187b      	adds	r3, r7, r1
 80198b0:	881a      	ldrh	r2, [r3, #0]
 80198b2:	2380      	movs	r3, #128	@ 0x80
 80198b4:	01db      	lsls	r3, r3, #7
 80198b6:	4013      	ands	r3, r2
 80198b8:	d016      	beq.n	80198e8 <USB_DeactivateEndpoint+0x168>
 80198ba:	687a      	ldr	r2, [r7, #4]
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	781b      	ldrb	r3, [r3, #0]
 80198c0:	009b      	lsls	r3, r3, #2
 80198c2:	18d3      	adds	r3, r2, r3
 80198c4:	881b      	ldrh	r3, [r3, #0]
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	201e      	movs	r0, #30
 80198ca:	183b      	adds	r3, r7, r0
 80198cc:	4986      	ldr	r1, [pc, #536]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 80198ce:	400a      	ands	r2, r1
 80198d0:	801a      	strh	r2, [r3, #0]
 80198d2:	687a      	ldr	r2, [r7, #4]
 80198d4:	683b      	ldr	r3, [r7, #0]
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	009b      	lsls	r3, r3, #2
 80198da:	18d3      	adds	r3, r2, r3
 80198dc:	183a      	adds	r2, r7, r0
 80198de:	8812      	ldrh	r2, [r2, #0]
 80198e0:	4985      	ldr	r1, [pc, #532]	@ (8019af8 <USB_DeactivateEndpoint+0x378>)
 80198e2:	430a      	orrs	r2, r1
 80198e4:	b292      	uxth	r2, r2
 80198e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80198e8:	687a      	ldr	r2, [r7, #4]
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	781b      	ldrb	r3, [r3, #0]
 80198ee:	009b      	lsls	r3, r3, #2
 80198f0:	18d2      	adds	r2, r2, r3
 80198f2:	211c      	movs	r1, #28
 80198f4:	187b      	adds	r3, r7, r1
 80198f6:	8812      	ldrh	r2, [r2, #0]
 80198f8:	801a      	strh	r2, [r3, #0]
 80198fa:	187b      	adds	r3, r7, r1
 80198fc:	881b      	ldrh	r3, [r3, #0]
 80198fe:	2240      	movs	r2, #64	@ 0x40
 8019900:	4013      	ands	r3, r2
 8019902:	d016      	beq.n	8019932 <USB_DeactivateEndpoint+0x1b2>
 8019904:	687a      	ldr	r2, [r7, #4]
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	781b      	ldrb	r3, [r3, #0]
 801990a:	009b      	lsls	r3, r3, #2
 801990c:	18d3      	adds	r3, r2, r3
 801990e:	881b      	ldrh	r3, [r3, #0]
 8019910:	b29a      	uxth	r2, r3
 8019912:	201a      	movs	r0, #26
 8019914:	183b      	adds	r3, r7, r0
 8019916:	4974      	ldr	r1, [pc, #464]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 8019918:	400a      	ands	r2, r1
 801991a:	801a      	strh	r2, [r3, #0]
 801991c:	687a      	ldr	r2, [r7, #4]
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	009b      	lsls	r3, r3, #2
 8019924:	18d3      	adds	r3, r2, r3
 8019926:	183a      	adds	r2, r7, r0
 8019928:	8812      	ldrh	r2, [r2, #0]
 801992a:	4970      	ldr	r1, [pc, #448]	@ (8019aec <USB_DeactivateEndpoint+0x36c>)
 801992c:	430a      	orrs	r2, r1
 801992e:	b292      	uxth	r2, r2
 8019930:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019932:	687a      	ldr	r2, [r7, #4]
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	781b      	ldrb	r3, [r3, #0]
 8019938:	009b      	lsls	r3, r3, #2
 801993a:	18d3      	adds	r3, r2, r3
 801993c:	881b      	ldrh	r3, [r3, #0]
 801993e:	b29a      	uxth	r2, r3
 8019940:	2018      	movs	r0, #24
 8019942:	183b      	adds	r3, r7, r0
 8019944:	4968      	ldr	r1, [pc, #416]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 8019946:	400a      	ands	r2, r1
 8019948:	801a      	strh	r2, [r3, #0]
 801994a:	687a      	ldr	r2, [r7, #4]
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	009b      	lsls	r3, r3, #2
 8019952:	18d3      	adds	r3, r2, r3
 8019954:	183a      	adds	r2, r7, r0
 8019956:	8812      	ldrh	r2, [r2, #0]
 8019958:	4964      	ldr	r1, [pc, #400]	@ (8019aec <USB_DeactivateEndpoint+0x36c>)
 801995a:	430a      	orrs	r2, r1
 801995c:	b292      	uxth	r2, r2
 801995e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019960:	687a      	ldr	r2, [r7, #4]
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	781b      	ldrb	r3, [r3, #0]
 8019966:	009b      	lsls	r3, r3, #2
 8019968:	18d3      	adds	r3, r2, r3
 801996a:	881b      	ldrh	r3, [r3, #0]
 801996c:	b29a      	uxth	r2, r3
 801996e:	2016      	movs	r0, #22
 8019970:	183b      	adds	r3, r7, r0
 8019972:	4962      	ldr	r1, [pc, #392]	@ (8019afc <USB_DeactivateEndpoint+0x37c>)
 8019974:	400a      	ands	r2, r1
 8019976:	801a      	strh	r2, [r3, #0]
 8019978:	687a      	ldr	r2, [r7, #4]
 801997a:	683b      	ldr	r3, [r7, #0]
 801997c:	781b      	ldrb	r3, [r3, #0]
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	18d3      	adds	r3, r2, r3
 8019982:	183a      	adds	r2, r7, r0
 8019984:	8812      	ldrh	r2, [r2, #0]
 8019986:	495b      	ldr	r1, [pc, #364]	@ (8019af4 <USB_DeactivateEndpoint+0x374>)
 8019988:	430a      	orrs	r2, r1
 801998a:	b292      	uxth	r2, r2
 801998c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	781b      	ldrb	r3, [r3, #0]
 8019994:	009b      	lsls	r3, r3, #2
 8019996:	18d3      	adds	r3, r2, r3
 8019998:	881b      	ldrh	r3, [r3, #0]
 801999a:	b29a      	uxth	r2, r3
 801999c:	2014      	movs	r0, #20
 801999e:	183b      	adds	r3, r7, r0
 80199a0:	4953      	ldr	r1, [pc, #332]	@ (8019af0 <USB_DeactivateEndpoint+0x370>)
 80199a2:	400a      	ands	r2, r1
 80199a4:	801a      	strh	r2, [r3, #0]
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	683b      	ldr	r3, [r7, #0]
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	009b      	lsls	r3, r3, #2
 80199ae:	18d3      	adds	r3, r2, r3
 80199b0:	183a      	adds	r2, r7, r0
 80199b2:	8812      	ldrh	r2, [r2, #0]
 80199b4:	494f      	ldr	r1, [pc, #316]	@ (8019af4 <USB_DeactivateEndpoint+0x374>)
 80199b6:	430a      	orrs	r2, r1
 80199b8:	b292      	uxth	r2, r2
 80199ba:	801a      	strh	r2, [r3, #0]
 80199bc:	e08f      	b.n	8019ade <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	009b      	lsls	r3, r3, #2
 80199c6:	18d2      	adds	r2, r2, r3
 80199c8:	212e      	movs	r1, #46	@ 0x2e
 80199ca:	187b      	adds	r3, r7, r1
 80199cc:	8812      	ldrh	r2, [r2, #0]
 80199ce:	801a      	strh	r2, [r3, #0]
 80199d0:	187b      	adds	r3, r7, r1
 80199d2:	881a      	ldrh	r2, [r3, #0]
 80199d4:	2380      	movs	r3, #128	@ 0x80
 80199d6:	01db      	lsls	r3, r3, #7
 80199d8:	4013      	ands	r3, r2
 80199da:	d016      	beq.n	8019a0a <USB_DeactivateEndpoint+0x28a>
 80199dc:	687a      	ldr	r2, [r7, #4]
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	009b      	lsls	r3, r3, #2
 80199e4:	18d3      	adds	r3, r2, r3
 80199e6:	881b      	ldrh	r3, [r3, #0]
 80199e8:	b29a      	uxth	r2, r3
 80199ea:	202c      	movs	r0, #44	@ 0x2c
 80199ec:	183b      	adds	r3, r7, r0
 80199ee:	493e      	ldr	r1, [pc, #248]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 80199f0:	400a      	ands	r2, r1
 80199f2:	801a      	strh	r2, [r3, #0]
 80199f4:	687a      	ldr	r2, [r7, #4]
 80199f6:	683b      	ldr	r3, [r7, #0]
 80199f8:	781b      	ldrb	r3, [r3, #0]
 80199fa:	009b      	lsls	r3, r3, #2
 80199fc:	18d3      	adds	r3, r2, r3
 80199fe:	183a      	adds	r2, r7, r0
 8019a00:	8812      	ldrh	r2, [r2, #0]
 8019a02:	493d      	ldr	r1, [pc, #244]	@ (8019af8 <USB_DeactivateEndpoint+0x378>)
 8019a04:	430a      	orrs	r2, r1
 8019a06:	b292      	uxth	r2, r2
 8019a08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019a0a:	687a      	ldr	r2, [r7, #4]
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	009b      	lsls	r3, r3, #2
 8019a12:	18d2      	adds	r2, r2, r3
 8019a14:	212a      	movs	r1, #42	@ 0x2a
 8019a16:	187b      	adds	r3, r7, r1
 8019a18:	8812      	ldrh	r2, [r2, #0]
 8019a1a:	801a      	strh	r2, [r3, #0]
 8019a1c:	187b      	adds	r3, r7, r1
 8019a1e:	881b      	ldrh	r3, [r3, #0]
 8019a20:	2240      	movs	r2, #64	@ 0x40
 8019a22:	4013      	ands	r3, r2
 8019a24:	d016      	beq.n	8019a54 <USB_DeactivateEndpoint+0x2d4>
 8019a26:	687a      	ldr	r2, [r7, #4]
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	18d3      	adds	r3, r2, r3
 8019a30:	881b      	ldrh	r3, [r3, #0]
 8019a32:	b29a      	uxth	r2, r3
 8019a34:	2028      	movs	r0, #40	@ 0x28
 8019a36:	183b      	adds	r3, r7, r0
 8019a38:	492b      	ldr	r1, [pc, #172]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 8019a3a:	400a      	ands	r2, r1
 8019a3c:	801a      	strh	r2, [r3, #0]
 8019a3e:	687a      	ldr	r2, [r7, #4]
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	009b      	lsls	r3, r3, #2
 8019a46:	18d3      	adds	r3, r2, r3
 8019a48:	183a      	adds	r2, r7, r0
 8019a4a:	8812      	ldrh	r2, [r2, #0]
 8019a4c:	4927      	ldr	r1, [pc, #156]	@ (8019aec <USB_DeactivateEndpoint+0x36c>)
 8019a4e:	430a      	orrs	r2, r1
 8019a50:	b292      	uxth	r2, r2
 8019a52:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019a54:	687a      	ldr	r2, [r7, #4]
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	781b      	ldrb	r3, [r3, #0]
 8019a5a:	009b      	lsls	r3, r3, #2
 8019a5c:	18d3      	adds	r3, r2, r3
 8019a5e:	881b      	ldrh	r3, [r3, #0]
 8019a60:	b29a      	uxth	r2, r3
 8019a62:	2026      	movs	r0, #38	@ 0x26
 8019a64:	183b      	adds	r3, r7, r0
 8019a66:	4920      	ldr	r1, [pc, #128]	@ (8019ae8 <USB_DeactivateEndpoint+0x368>)
 8019a68:	400a      	ands	r2, r1
 8019a6a:	801a      	strh	r2, [r3, #0]
 8019a6c:	687a      	ldr	r2, [r7, #4]
 8019a6e:	683b      	ldr	r3, [r7, #0]
 8019a70:	781b      	ldrb	r3, [r3, #0]
 8019a72:	009b      	lsls	r3, r3, #2
 8019a74:	18d3      	adds	r3, r2, r3
 8019a76:	183a      	adds	r2, r7, r0
 8019a78:	8812      	ldrh	r2, [r2, #0]
 8019a7a:	491f      	ldr	r1, [pc, #124]	@ (8019af8 <USB_DeactivateEndpoint+0x378>)
 8019a7c:	430a      	orrs	r2, r1
 8019a7e:	b292      	uxth	r2, r2
 8019a80:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019a82:	687a      	ldr	r2, [r7, #4]
 8019a84:	683b      	ldr	r3, [r7, #0]
 8019a86:	781b      	ldrb	r3, [r3, #0]
 8019a88:	009b      	lsls	r3, r3, #2
 8019a8a:	18d3      	adds	r3, r2, r3
 8019a8c:	881b      	ldrh	r3, [r3, #0]
 8019a8e:	b29a      	uxth	r2, r3
 8019a90:	2024      	movs	r0, #36	@ 0x24
 8019a92:	183b      	adds	r3, r7, r0
 8019a94:	4916      	ldr	r1, [pc, #88]	@ (8019af0 <USB_DeactivateEndpoint+0x370>)
 8019a96:	400a      	ands	r2, r1
 8019a98:	801a      	strh	r2, [r3, #0]
 8019a9a:	687a      	ldr	r2, [r7, #4]
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	781b      	ldrb	r3, [r3, #0]
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	18d3      	adds	r3, r2, r3
 8019aa4:	183a      	adds	r2, r7, r0
 8019aa6:	8812      	ldrh	r2, [r2, #0]
 8019aa8:	4912      	ldr	r1, [pc, #72]	@ (8019af4 <USB_DeactivateEndpoint+0x374>)
 8019aaa:	430a      	orrs	r2, r1
 8019aac:	b292      	uxth	r2, r2
 8019aae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019ab0:	687a      	ldr	r2, [r7, #4]
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	781b      	ldrb	r3, [r3, #0]
 8019ab6:	009b      	lsls	r3, r3, #2
 8019ab8:	18d3      	adds	r3, r2, r3
 8019aba:	881b      	ldrh	r3, [r3, #0]
 8019abc:	b29a      	uxth	r2, r3
 8019abe:	2022      	movs	r0, #34	@ 0x22
 8019ac0:	183b      	adds	r3, r7, r0
 8019ac2:	490e      	ldr	r1, [pc, #56]	@ (8019afc <USB_DeactivateEndpoint+0x37c>)
 8019ac4:	400a      	ands	r2, r1
 8019ac6:	801a      	strh	r2, [r3, #0]
 8019ac8:	687a      	ldr	r2, [r7, #4]
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	18d3      	adds	r3, r2, r3
 8019ad2:	183a      	adds	r2, r7, r0
 8019ad4:	8812      	ldrh	r2, [r2, #0]
 8019ad6:	4907      	ldr	r1, [pc, #28]	@ (8019af4 <USB_DeactivateEndpoint+0x374>)
 8019ad8:	430a      	orrs	r2, r1
 8019ada:	b292      	uxth	r2, r2
 8019adc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019ade:	2300      	movs	r3, #0
}
 8019ae0:	0018      	movs	r0, r3
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	b00c      	add	sp, #48	@ 0x30
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	ffff8f8f 	.word	0xffff8f8f
 8019aec:	ffff80c0 	.word	0xffff80c0
 8019af0:	ffff8fbf 	.word	0xffff8fbf
 8019af4:	ffff8080 	.word	0xffff8080
 8019af8:	ffffc080 	.word	0xffffc080
 8019afc:	ffffbf8f 	.word	0xffffbf8f

08019b00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019b00:	b590      	push	{r4, r7, lr}
 8019b02:	b0c3      	sub	sp, #268	@ 0x10c
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	785b      	ldrb	r3, [r3, #1]
 8019b0e:	2b01      	cmp	r3, #1
 8019b10:	d001      	beq.n	8019b16 <USB_EPStartXfer+0x16>
 8019b12:	f000 fd2d 	bl	801a570 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	699a      	ldr	r2, [r3, #24]
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	691b      	ldr	r3, [r3, #16]
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	d905      	bls.n	8019b2e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	691b      	ldr	r3, [r3, #16]
 8019b26:	1d7a      	adds	r2, r7, #5
 8019b28:	32ff      	adds	r2, #255	@ 0xff
 8019b2a:	6013      	str	r3, [r2, #0]
 8019b2c:	e004      	b.n	8019b38 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	699b      	ldr	r3, [r3, #24]
 8019b32:	1d7a      	adds	r2, r7, #5
 8019b34:	32ff      	adds	r2, #255	@ 0xff
 8019b36:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	7b1b      	ldrb	r3, [r3, #12]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d125      	bne.n	8019b8c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	6959      	ldr	r1, [r3, #20]
 8019b44:	683b      	ldr	r3, [r7, #0]
 8019b46:	88da      	ldrh	r2, [r3, #6]
 8019b48:	1d7b      	adds	r3, r7, #5
 8019b4a:	33ff      	adds	r3, #255	@ 0xff
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f001 fa47 	bl	801afe4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	613b      	str	r3, [r7, #16]
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	2250      	movs	r2, #80	@ 0x50
 8019b5e:	5a9b      	ldrh	r3, [r3, r2]
 8019b60:	b29b      	uxth	r3, r3
 8019b62:	001a      	movs	r2, r3
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	189b      	adds	r3, r3, r2
 8019b68:	613b      	str	r3, [r7, #16]
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	00da      	lsls	r2, r3, #3
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	18d3      	adds	r3, r2, r3
 8019b74:	4ad7      	ldr	r2, [pc, #860]	@ (8019ed4 <USB_EPStartXfer+0x3d4>)
 8019b76:	4694      	mov	ip, r2
 8019b78:	4463      	add	r3, ip
 8019b7a:	60fb      	str	r3, [r7, #12]
 8019b7c:	1d7b      	adds	r3, r7, #5
 8019b7e:	33ff      	adds	r3, #255	@ 0xff
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	b29a      	uxth	r2, r3
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	801a      	strh	r2, [r3, #0]
 8019b88:	f000 fccd 	bl	801a526 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	78db      	ldrb	r3, [r3, #3]
 8019b90:	2b02      	cmp	r3, #2
 8019b92:	d000      	beq.n	8019b96 <USB_EPStartXfer+0x96>
 8019b94:	e362      	b.n	801a25c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019b96:	683b      	ldr	r3, [r7, #0]
 8019b98:	6a1a      	ldr	r2, [r3, #32]
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	691b      	ldr	r3, [r3, #16]
 8019b9e:	429a      	cmp	r2, r3
 8019ba0:	d800      	bhi.n	8019ba4 <USB_EPStartXfer+0xa4>
 8019ba2:	e309      	b.n	801a1b8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019ba4:	687a      	ldr	r2, [r7, #4]
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	18d3      	adds	r3, r2, r3
 8019bae:	881b      	ldrh	r3, [r3, #0]
 8019bb0:	b29a      	uxth	r2, r3
 8019bb2:	2056      	movs	r0, #86	@ 0x56
 8019bb4:	183b      	adds	r3, r7, r0
 8019bb6:	49c8      	ldr	r1, [pc, #800]	@ (8019ed8 <USB_EPStartXfer+0x3d8>)
 8019bb8:	400a      	ands	r2, r1
 8019bba:	801a      	strh	r2, [r3, #0]
 8019bbc:	687a      	ldr	r2, [r7, #4]
 8019bbe:	683b      	ldr	r3, [r7, #0]
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	18d3      	adds	r3, r2, r3
 8019bc6:	183a      	adds	r2, r7, r0
 8019bc8:	8812      	ldrh	r2, [r2, #0]
 8019bca:	49c4      	ldr	r1, [pc, #784]	@ (8019edc <USB_EPStartXfer+0x3dc>)
 8019bcc:	430a      	orrs	r2, r1
 8019bce:	b292      	uxth	r2, r2
 8019bd0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019bd2:	683b      	ldr	r3, [r7, #0]
 8019bd4:	6a1a      	ldr	r2, [r3, #32]
 8019bd6:	1d7b      	adds	r3, r7, #5
 8019bd8:	33ff      	adds	r3, #255	@ 0xff
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	1ad2      	subs	r2, r2, r3
 8019bde:	683b      	ldr	r3, [r7, #0]
 8019be0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	18d3      	adds	r3, r2, r3
 8019bec:	881b      	ldrh	r3, [r3, #0]
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	001a      	movs	r2, r3
 8019bf2:	2340      	movs	r3, #64	@ 0x40
 8019bf4:	4013      	ands	r3, r2
 8019bf6:	d100      	bne.n	8019bfa <USB_EPStartXfer+0xfa>
 8019bf8:	e176      	b.n	8019ee8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	785b      	ldrb	r3, [r3, #1]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d000      	beq.n	8019c08 <USB_EPStartXfer+0x108>
 8019c06:	e074      	b.n	8019cf2 <USB_EPStartXfer+0x1f2>
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2250      	movs	r2, #80	@ 0x50
 8019c10:	5a9b      	ldrh	r3, [r3, r2]
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	001a      	movs	r2, r3
 8019c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c18:	189b      	adds	r3, r3, r2
 8019c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	781b      	ldrb	r3, [r3, #0]
 8019c20:	00da      	lsls	r2, r3, #3
 8019c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c24:	18d3      	adds	r3, r2, r3
 8019c26:	4aae      	ldr	r2, [pc, #696]	@ (8019ee0 <USB_EPStartXfer+0x3e0>)
 8019c28:	4694      	mov	ip, r2
 8019c2a:	4463      	add	r3, ip
 8019c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c30:	881b      	ldrh	r3, [r3, #0]
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	059b      	lsls	r3, r3, #22
 8019c36:	0d9b      	lsrs	r3, r3, #22
 8019c38:	b29a      	uxth	r2, r3
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3c:	801a      	strh	r2, [r3, #0]
 8019c3e:	1d7b      	adds	r3, r7, #5
 8019c40:	33ff      	adds	r3, #255	@ 0xff
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c46:	d924      	bls.n	8019c92 <USB_EPStartXfer+0x192>
 8019c48:	1d7b      	adds	r3, r7, #5
 8019c4a:	33ff      	adds	r3, #255	@ 0xff
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	095b      	lsrs	r3, r3, #5
 8019c50:	1c7a      	adds	r2, r7, #1
 8019c52:	32ff      	adds	r2, #255	@ 0xff
 8019c54:	6013      	str	r3, [r2, #0]
 8019c56:	1d7b      	adds	r3, r7, #5
 8019c58:	33ff      	adds	r3, #255	@ 0xff
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	221f      	movs	r2, #31
 8019c5e:	4013      	ands	r3, r2
 8019c60:	d106      	bne.n	8019c70 <USB_EPStartXfer+0x170>
 8019c62:	1c7b      	adds	r3, r7, #1
 8019c64:	33ff      	adds	r3, #255	@ 0xff
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	3b01      	subs	r3, #1
 8019c6a:	1c7a      	adds	r2, r7, #1
 8019c6c:	32ff      	adds	r2, #255	@ 0xff
 8019c6e:	6013      	str	r3, [r2, #0]
 8019c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c72:	881b      	ldrh	r3, [r3, #0]
 8019c74:	b29a      	uxth	r2, r3
 8019c76:	1c7b      	adds	r3, r7, #1
 8019c78:	33ff      	adds	r3, #255	@ 0xff
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	029b      	lsls	r3, r3, #10
 8019c80:	b29b      	uxth	r3, r3
 8019c82:	4313      	orrs	r3, r2
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	4a97      	ldr	r2, [pc, #604]	@ (8019ee4 <USB_EPStartXfer+0x3e4>)
 8019c88:	4313      	orrs	r3, r2
 8019c8a:	b29a      	uxth	r2, r3
 8019c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c8e:	801a      	strh	r2, [r3, #0]
 8019c90:	e04a      	b.n	8019d28 <USB_EPStartXfer+0x228>
 8019c92:	1d7b      	adds	r3, r7, #5
 8019c94:	33ff      	adds	r3, #255	@ 0xff
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d108      	bne.n	8019cae <USB_EPStartXfer+0x1ae>
 8019c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c9e:	881b      	ldrh	r3, [r3, #0]
 8019ca0:	b29b      	uxth	r3, r3
 8019ca2:	4a90      	ldr	r2, [pc, #576]	@ (8019ee4 <USB_EPStartXfer+0x3e4>)
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	b29a      	uxth	r2, r3
 8019ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019caa:	801a      	strh	r2, [r3, #0]
 8019cac:	e03c      	b.n	8019d28 <USB_EPStartXfer+0x228>
 8019cae:	1d7b      	adds	r3, r7, #5
 8019cb0:	33ff      	adds	r3, #255	@ 0xff
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	085b      	lsrs	r3, r3, #1
 8019cb6:	1c7a      	adds	r2, r7, #1
 8019cb8:	32ff      	adds	r2, #255	@ 0xff
 8019cba:	6013      	str	r3, [r2, #0]
 8019cbc:	1d7b      	adds	r3, r7, #5
 8019cbe:	33ff      	adds	r3, #255	@ 0xff
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	2201      	movs	r2, #1
 8019cc4:	4013      	ands	r3, r2
 8019cc6:	d006      	beq.n	8019cd6 <USB_EPStartXfer+0x1d6>
 8019cc8:	1c7b      	adds	r3, r7, #1
 8019cca:	33ff      	adds	r3, #255	@ 0xff
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	3301      	adds	r3, #1
 8019cd0:	1c7a      	adds	r2, r7, #1
 8019cd2:	32ff      	adds	r2, #255	@ 0xff
 8019cd4:	6013      	str	r3, [r2, #0]
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cd8:	881b      	ldrh	r3, [r3, #0]
 8019cda:	b29a      	uxth	r2, r3
 8019cdc:	1c7b      	adds	r3, r7, #1
 8019cde:	33ff      	adds	r3, #255	@ 0xff
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	b29b      	uxth	r3, r3
 8019ce4:	029b      	lsls	r3, r3, #10
 8019ce6:	b29b      	uxth	r3, r3
 8019ce8:	4313      	orrs	r3, r2
 8019cea:	b29a      	uxth	r2, r3
 8019cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cee:	801a      	strh	r2, [r3, #0]
 8019cf0:	e01a      	b.n	8019d28 <USB_EPStartXfer+0x228>
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	785b      	ldrb	r3, [r3, #1]
 8019cf6:	2b01      	cmp	r3, #1
 8019cf8:	d116      	bne.n	8019d28 <USB_EPStartXfer+0x228>
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	2250      	movs	r2, #80	@ 0x50
 8019cfe:	5a9b      	ldrh	r3, [r3, r2]
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	001a      	movs	r2, r3
 8019d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d06:	189b      	adds	r3, r3, r2
 8019d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	00da      	lsls	r2, r3, #3
 8019d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d12:	18d3      	adds	r3, r2, r3
 8019d14:	4a72      	ldr	r2, [pc, #456]	@ (8019ee0 <USB_EPStartXfer+0x3e0>)
 8019d16:	4694      	mov	ip, r2
 8019d18:	4463      	add	r3, ip
 8019d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d1c:	1d7b      	adds	r3, r7, #5
 8019d1e:	33ff      	adds	r3, #255	@ 0xff
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	b29a      	uxth	r2, r3
 8019d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019d28:	2076      	movs	r0, #118	@ 0x76
 8019d2a:	183b      	adds	r3, r7, r0
 8019d2c:	683a      	ldr	r2, [r7, #0]
 8019d2e:	8952      	ldrh	r2, [r2, #10]
 8019d30:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	6959      	ldr	r1, [r3, #20]
 8019d36:	1d7b      	adds	r3, r7, #5
 8019d38:	33ff      	adds	r3, #255	@ 0xff
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	b29c      	uxth	r4, r3
 8019d3e:	183b      	adds	r3, r7, r0
 8019d40:	881a      	ldrh	r2, [r3, #0]
 8019d42:	6878      	ldr	r0, [r7, #4]
 8019d44:	0023      	movs	r3, r4
 8019d46:	f001 f94d 	bl	801afe4 <USB_WritePMA>
            ep->xfer_buff += len;
 8019d4a:	683b      	ldr	r3, [r7, #0]
 8019d4c:	695a      	ldr	r2, [r3, #20]
 8019d4e:	1d7b      	adds	r3, r7, #5
 8019d50:	33ff      	adds	r3, #255	@ 0xff
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	18d2      	adds	r2, r2, r3
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019d5a:	683b      	ldr	r3, [r7, #0]
 8019d5c:	6a1a      	ldr	r2, [r3, #32]
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	691b      	ldr	r3, [r3, #16]
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d908      	bls.n	8019d78 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	6a1a      	ldr	r2, [r3, #32]
 8019d6a:	1d7b      	adds	r3, r7, #5
 8019d6c:	33ff      	adds	r3, #255	@ 0xff
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	1ad2      	subs	r2, r2, r3
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	621a      	str	r2, [r3, #32]
 8019d76:	e007      	b.n	8019d88 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	6a1b      	ldr	r3, [r3, #32]
 8019d7c:	1d7a      	adds	r2, r7, #5
 8019d7e:	32ff      	adds	r2, #255	@ 0xff
 8019d80:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019d82:	683b      	ldr	r3, [r7, #0]
 8019d84:	2200      	movs	r2, #0
 8019d86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	785b      	ldrb	r3, [r3, #1]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d000      	beq.n	8019d92 <USB_EPStartXfer+0x292>
 8019d90:	e070      	b.n	8019e74 <USB_EPStartXfer+0x374>
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	61bb      	str	r3, [r7, #24]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	2250      	movs	r2, #80	@ 0x50
 8019d9a:	5a9b      	ldrh	r3, [r3, r2]
 8019d9c:	b29b      	uxth	r3, r3
 8019d9e:	001a      	movs	r2, r3
 8019da0:	69bb      	ldr	r3, [r7, #24]
 8019da2:	189b      	adds	r3, r3, r2
 8019da4:	61bb      	str	r3, [r7, #24]
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	781b      	ldrb	r3, [r3, #0]
 8019daa:	00da      	lsls	r2, r3, #3
 8019dac:	69bb      	ldr	r3, [r7, #24]
 8019dae:	18d3      	adds	r3, r2, r3
 8019db0:	4a48      	ldr	r2, [pc, #288]	@ (8019ed4 <USB_EPStartXfer+0x3d4>)
 8019db2:	4694      	mov	ip, r2
 8019db4:	4463      	add	r3, ip
 8019db6:	617b      	str	r3, [r7, #20]
 8019db8:	697b      	ldr	r3, [r7, #20]
 8019dba:	881b      	ldrh	r3, [r3, #0]
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	059b      	lsls	r3, r3, #22
 8019dc0:	0d9b      	lsrs	r3, r3, #22
 8019dc2:	b29a      	uxth	r2, r3
 8019dc4:	697b      	ldr	r3, [r7, #20]
 8019dc6:	801a      	strh	r2, [r3, #0]
 8019dc8:	1d7b      	adds	r3, r7, #5
 8019dca:	33ff      	adds	r3, #255	@ 0xff
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8019dd0:	d922      	bls.n	8019e18 <USB_EPStartXfer+0x318>
 8019dd2:	1d7b      	adds	r3, r7, #5
 8019dd4:	33ff      	adds	r3, #255	@ 0xff
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	095b      	lsrs	r3, r3, #5
 8019dda:	21fc      	movs	r1, #252	@ 0xfc
 8019ddc:	187a      	adds	r2, r7, r1
 8019dde:	6013      	str	r3, [r2, #0]
 8019de0:	1d7b      	adds	r3, r7, #5
 8019de2:	33ff      	adds	r3, #255	@ 0xff
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	221f      	movs	r2, #31
 8019de8:	4013      	ands	r3, r2
 8019dea:	d104      	bne.n	8019df6 <USB_EPStartXfer+0x2f6>
 8019dec:	187b      	adds	r3, r7, r1
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	3b01      	subs	r3, #1
 8019df2:	187a      	adds	r2, r7, r1
 8019df4:	6013      	str	r3, [r2, #0]
 8019df6:	697b      	ldr	r3, [r7, #20]
 8019df8:	881b      	ldrh	r3, [r3, #0]
 8019dfa:	b29a      	uxth	r2, r3
 8019dfc:	23fc      	movs	r3, #252	@ 0xfc
 8019dfe:	18fb      	adds	r3, r7, r3
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	029b      	lsls	r3, r3, #10
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	4313      	orrs	r3, r2
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4a35      	ldr	r2, [pc, #212]	@ (8019ee4 <USB_EPStartXfer+0x3e4>)
 8019e0e:	4313      	orrs	r3, r2
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	697b      	ldr	r3, [r7, #20]
 8019e14:	801a      	strh	r2, [r3, #0]
 8019e16:	e04a      	b.n	8019eae <USB_EPStartXfer+0x3ae>
 8019e18:	1d7b      	adds	r3, r7, #5
 8019e1a:	33ff      	adds	r3, #255	@ 0xff
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d108      	bne.n	8019e34 <USB_EPStartXfer+0x334>
 8019e22:	697b      	ldr	r3, [r7, #20]
 8019e24:	881b      	ldrh	r3, [r3, #0]
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	4a2e      	ldr	r2, [pc, #184]	@ (8019ee4 <USB_EPStartXfer+0x3e4>)
 8019e2a:	4313      	orrs	r3, r2
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	697b      	ldr	r3, [r7, #20]
 8019e30:	801a      	strh	r2, [r3, #0]
 8019e32:	e03c      	b.n	8019eae <USB_EPStartXfer+0x3ae>
 8019e34:	1d7b      	adds	r3, r7, #5
 8019e36:	33ff      	adds	r3, #255	@ 0xff
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	085b      	lsrs	r3, r3, #1
 8019e3c:	21fc      	movs	r1, #252	@ 0xfc
 8019e3e:	187a      	adds	r2, r7, r1
 8019e40:	6013      	str	r3, [r2, #0]
 8019e42:	1d7b      	adds	r3, r7, #5
 8019e44:	33ff      	adds	r3, #255	@ 0xff
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2201      	movs	r2, #1
 8019e4a:	4013      	ands	r3, r2
 8019e4c:	d004      	beq.n	8019e58 <USB_EPStartXfer+0x358>
 8019e4e:	187b      	adds	r3, r7, r1
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	3301      	adds	r3, #1
 8019e54:	187a      	adds	r2, r7, r1
 8019e56:	6013      	str	r3, [r2, #0]
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	881b      	ldrh	r3, [r3, #0]
 8019e5c:	b29a      	uxth	r2, r3
 8019e5e:	23fc      	movs	r3, #252	@ 0xfc
 8019e60:	18fb      	adds	r3, r7, r3
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	b29b      	uxth	r3, r3
 8019e66:	029b      	lsls	r3, r3, #10
 8019e68:	b29b      	uxth	r3, r3
 8019e6a:	4313      	orrs	r3, r2
 8019e6c:	b29a      	uxth	r2, r3
 8019e6e:	697b      	ldr	r3, [r7, #20]
 8019e70:	801a      	strh	r2, [r3, #0]
 8019e72:	e01c      	b.n	8019eae <USB_EPStartXfer+0x3ae>
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	785b      	ldrb	r3, [r3, #1]
 8019e78:	2b01      	cmp	r3, #1
 8019e7a:	d118      	bne.n	8019eae <USB_EPStartXfer+0x3ae>
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	623b      	str	r3, [r7, #32]
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	2250      	movs	r2, #80	@ 0x50
 8019e84:	5a9b      	ldrh	r3, [r3, r2]
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	001a      	movs	r2, r3
 8019e8a:	6a3b      	ldr	r3, [r7, #32]
 8019e8c:	189b      	adds	r3, r3, r2
 8019e8e:	623b      	str	r3, [r7, #32]
 8019e90:	683b      	ldr	r3, [r7, #0]
 8019e92:	781b      	ldrb	r3, [r3, #0]
 8019e94:	00da      	lsls	r2, r3, #3
 8019e96:	6a3b      	ldr	r3, [r7, #32]
 8019e98:	18d3      	adds	r3, r2, r3
 8019e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8019ed4 <USB_EPStartXfer+0x3d4>)
 8019e9c:	4694      	mov	ip, r2
 8019e9e:	4463      	add	r3, ip
 8019ea0:	61fb      	str	r3, [r7, #28]
 8019ea2:	1d7b      	adds	r3, r7, #5
 8019ea4:	33ff      	adds	r3, #255	@ 0xff
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	b29a      	uxth	r2, r3
 8019eaa:	69fb      	ldr	r3, [r7, #28]
 8019eac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019eae:	2076      	movs	r0, #118	@ 0x76
 8019eb0:	183b      	adds	r3, r7, r0
 8019eb2:	683a      	ldr	r2, [r7, #0]
 8019eb4:	8912      	ldrh	r2, [r2, #8]
 8019eb6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	6959      	ldr	r1, [r3, #20]
 8019ebc:	1d7b      	adds	r3, r7, #5
 8019ebe:	33ff      	adds	r3, #255	@ 0xff
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	b29c      	uxth	r4, r3
 8019ec4:	183b      	adds	r3, r7, r0
 8019ec6:	881a      	ldrh	r2, [r3, #0]
 8019ec8:	6878      	ldr	r0, [r7, #4]
 8019eca:	0023      	movs	r3, r4
 8019ecc:	f001 f88a 	bl	801afe4 <USB_WritePMA>
 8019ed0:	e329      	b.n	801a526 <USB_EPStartXfer+0xa26>
 8019ed2:	46c0      	nop			@ (mov r8, r8)
 8019ed4:	00000402 	.word	0x00000402
 8019ed8:	ffff8f8f 	.word	0xffff8f8f
 8019edc:	ffff8180 	.word	0xffff8180
 8019ee0:	00000406 	.word	0x00000406
 8019ee4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	785b      	ldrb	r3, [r3, #1]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d000      	beq.n	8019ef2 <USB_EPStartXfer+0x3f2>
 8019ef0:	e070      	b.n	8019fd4 <USB_EPStartXfer+0x4d4>
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	2250      	movs	r2, #80	@ 0x50
 8019efa:	5a9b      	ldrh	r3, [r3, r2]
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	001a      	movs	r2, r3
 8019f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f02:	189b      	adds	r3, r3, r2
 8019f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	00da      	lsls	r2, r3, #3
 8019f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f0e:	18d3      	adds	r3, r2, r3
 8019f10:	4acd      	ldr	r2, [pc, #820]	@ (801a248 <USB_EPStartXfer+0x748>)
 8019f12:	4694      	mov	ip, r2
 8019f14:	4463      	add	r3, ip
 8019f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8019f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f1a:	881b      	ldrh	r3, [r3, #0]
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	059b      	lsls	r3, r3, #22
 8019f20:	0d9b      	lsrs	r3, r3, #22
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f26:	801a      	strh	r2, [r3, #0]
 8019f28:	1d7b      	adds	r3, r7, #5
 8019f2a:	33ff      	adds	r3, #255	@ 0xff
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019f30:	d922      	bls.n	8019f78 <USB_EPStartXfer+0x478>
 8019f32:	1d7b      	adds	r3, r7, #5
 8019f34:	33ff      	adds	r3, #255	@ 0xff
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	095b      	lsrs	r3, r3, #5
 8019f3a:	21f8      	movs	r1, #248	@ 0xf8
 8019f3c:	187a      	adds	r2, r7, r1
 8019f3e:	6013      	str	r3, [r2, #0]
 8019f40:	1d7b      	adds	r3, r7, #5
 8019f42:	33ff      	adds	r3, #255	@ 0xff
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	221f      	movs	r2, #31
 8019f48:	4013      	ands	r3, r2
 8019f4a:	d104      	bne.n	8019f56 <USB_EPStartXfer+0x456>
 8019f4c:	187b      	adds	r3, r7, r1
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	3b01      	subs	r3, #1
 8019f52:	187a      	adds	r2, r7, r1
 8019f54:	6013      	str	r3, [r2, #0]
 8019f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f58:	881b      	ldrh	r3, [r3, #0]
 8019f5a:	b29a      	uxth	r2, r3
 8019f5c:	23f8      	movs	r3, #248	@ 0xf8
 8019f5e:	18fb      	adds	r3, r7, r3
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	b29b      	uxth	r3, r3
 8019f64:	029b      	lsls	r3, r3, #10
 8019f66:	b29b      	uxth	r3, r3
 8019f68:	4313      	orrs	r3, r2
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	4ab7      	ldr	r2, [pc, #732]	@ (801a24c <USB_EPStartXfer+0x74c>)
 8019f6e:	4313      	orrs	r3, r2
 8019f70:	b29a      	uxth	r2, r3
 8019f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f74:	801a      	strh	r2, [r3, #0]
 8019f76:	e04a      	b.n	801a00e <USB_EPStartXfer+0x50e>
 8019f78:	1d7b      	adds	r3, r7, #5
 8019f7a:	33ff      	adds	r3, #255	@ 0xff
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d108      	bne.n	8019f94 <USB_EPStartXfer+0x494>
 8019f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f84:	881b      	ldrh	r3, [r3, #0]
 8019f86:	b29b      	uxth	r3, r3
 8019f88:	4ab0      	ldr	r2, [pc, #704]	@ (801a24c <USB_EPStartXfer+0x74c>)
 8019f8a:	4313      	orrs	r3, r2
 8019f8c:	b29a      	uxth	r2, r3
 8019f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f90:	801a      	strh	r2, [r3, #0]
 8019f92:	e03c      	b.n	801a00e <USB_EPStartXfer+0x50e>
 8019f94:	1d7b      	adds	r3, r7, #5
 8019f96:	33ff      	adds	r3, #255	@ 0xff
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	085b      	lsrs	r3, r3, #1
 8019f9c:	21f8      	movs	r1, #248	@ 0xf8
 8019f9e:	187a      	adds	r2, r7, r1
 8019fa0:	6013      	str	r3, [r2, #0]
 8019fa2:	1d7b      	adds	r3, r7, #5
 8019fa4:	33ff      	adds	r3, #255	@ 0xff
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	2201      	movs	r2, #1
 8019faa:	4013      	ands	r3, r2
 8019fac:	d004      	beq.n	8019fb8 <USB_EPStartXfer+0x4b8>
 8019fae:	187b      	adds	r3, r7, r1
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	3301      	adds	r3, #1
 8019fb4:	187a      	adds	r2, r7, r1
 8019fb6:	6013      	str	r3, [r2, #0]
 8019fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fba:	881b      	ldrh	r3, [r3, #0]
 8019fbc:	b29a      	uxth	r2, r3
 8019fbe:	23f8      	movs	r3, #248	@ 0xf8
 8019fc0:	18fb      	adds	r3, r7, r3
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	029b      	lsls	r3, r3, #10
 8019fc8:	b29b      	uxth	r3, r3
 8019fca:	4313      	orrs	r3, r2
 8019fcc:	b29a      	uxth	r2, r3
 8019fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fd0:	801a      	strh	r2, [r3, #0]
 8019fd2:	e01c      	b.n	801a00e <USB_EPStartXfer+0x50e>
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	785b      	ldrb	r3, [r3, #1]
 8019fd8:	2b01      	cmp	r3, #1
 8019fda:	d118      	bne.n	801a00e <USB_EPStartXfer+0x50e>
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	2250      	movs	r2, #80	@ 0x50
 8019fe4:	5a9b      	ldrh	r3, [r3, r2]
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	001a      	movs	r2, r3
 8019fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fec:	189b      	adds	r3, r3, r2
 8019fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	781b      	ldrb	r3, [r3, #0]
 8019ff4:	00da      	lsls	r2, r3, #3
 8019ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ff8:	18d3      	adds	r3, r2, r3
 8019ffa:	4a93      	ldr	r2, [pc, #588]	@ (801a248 <USB_EPStartXfer+0x748>)
 8019ffc:	4694      	mov	ip, r2
 8019ffe:	4463      	add	r3, ip
 801a000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a002:	1d7b      	adds	r3, r7, #5
 801a004:	33ff      	adds	r3, #255	@ 0xff
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	b29a      	uxth	r2, r3
 801a00a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a00c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a00e:	2076      	movs	r0, #118	@ 0x76
 801a010:	183b      	adds	r3, r7, r0
 801a012:	683a      	ldr	r2, [r7, #0]
 801a014:	8912      	ldrh	r2, [r2, #8]
 801a016:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	6959      	ldr	r1, [r3, #20]
 801a01c:	1d7b      	adds	r3, r7, #5
 801a01e:	33ff      	adds	r3, #255	@ 0xff
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	b29c      	uxth	r4, r3
 801a024:	183b      	adds	r3, r7, r0
 801a026:	881a      	ldrh	r2, [r3, #0]
 801a028:	6878      	ldr	r0, [r7, #4]
 801a02a:	0023      	movs	r3, r4
 801a02c:	f000 ffda 	bl	801afe4 <USB_WritePMA>
            ep->xfer_buff += len;
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	695a      	ldr	r2, [r3, #20]
 801a034:	1d7b      	adds	r3, r7, #5
 801a036:	33ff      	adds	r3, #255	@ 0xff
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	18d2      	adds	r2, r2, r3
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	6a1a      	ldr	r2, [r3, #32]
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	691b      	ldr	r3, [r3, #16]
 801a048:	429a      	cmp	r2, r3
 801a04a:	d908      	bls.n	801a05e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	6a1a      	ldr	r2, [r3, #32]
 801a050:	1d7b      	adds	r3, r7, #5
 801a052:	33ff      	adds	r3, #255	@ 0xff
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	1ad2      	subs	r2, r2, r3
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	621a      	str	r2, [r3, #32]
 801a05c:	e007      	b.n	801a06e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a05e:	683b      	ldr	r3, [r7, #0]
 801a060:	6a1b      	ldr	r3, [r3, #32]
 801a062:	1d7a      	adds	r2, r7, #5
 801a064:	32ff      	adds	r2, #255	@ 0xff
 801a066:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	2200      	movs	r2, #0
 801a06c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	643b      	str	r3, [r7, #64]	@ 0x40
 801a072:	683b      	ldr	r3, [r7, #0]
 801a074:	785b      	ldrb	r3, [r3, #1]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d000      	beq.n	801a07c <USB_EPStartXfer+0x57c>
 801a07a:	e070      	b.n	801a15e <USB_EPStartXfer+0x65e>
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	2250      	movs	r2, #80	@ 0x50
 801a084:	5a9b      	ldrh	r3, [r3, r2]
 801a086:	b29b      	uxth	r3, r3
 801a088:	001a      	movs	r2, r3
 801a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a08c:	189b      	adds	r3, r3, r2
 801a08e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	781b      	ldrb	r3, [r3, #0]
 801a094:	00da      	lsls	r2, r3, #3
 801a096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a098:	18d3      	adds	r3, r2, r3
 801a09a:	4a6d      	ldr	r2, [pc, #436]	@ (801a250 <USB_EPStartXfer+0x750>)
 801a09c:	4694      	mov	ip, r2
 801a09e:	4463      	add	r3, ip
 801a0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 801a0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0a4:	881b      	ldrh	r3, [r3, #0]
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	059b      	lsls	r3, r3, #22
 801a0aa:	0d9b      	lsrs	r3, r3, #22
 801a0ac:	b29a      	uxth	r2, r3
 801a0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0b0:	801a      	strh	r2, [r3, #0]
 801a0b2:	1d7b      	adds	r3, r7, #5
 801a0b4:	33ff      	adds	r3, #255	@ 0xff
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0ba:	d922      	bls.n	801a102 <USB_EPStartXfer+0x602>
 801a0bc:	1d7b      	adds	r3, r7, #5
 801a0be:	33ff      	adds	r3, #255	@ 0xff
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	095b      	lsrs	r3, r3, #5
 801a0c4:	21f4      	movs	r1, #244	@ 0xf4
 801a0c6:	187a      	adds	r2, r7, r1
 801a0c8:	6013      	str	r3, [r2, #0]
 801a0ca:	1d7b      	adds	r3, r7, #5
 801a0cc:	33ff      	adds	r3, #255	@ 0xff
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	221f      	movs	r2, #31
 801a0d2:	4013      	ands	r3, r2
 801a0d4:	d104      	bne.n	801a0e0 <USB_EPStartXfer+0x5e0>
 801a0d6:	187b      	adds	r3, r7, r1
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	3b01      	subs	r3, #1
 801a0dc:	187a      	adds	r2, r7, r1
 801a0de:	6013      	str	r3, [r2, #0]
 801a0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0e2:	881b      	ldrh	r3, [r3, #0]
 801a0e4:	b29a      	uxth	r2, r3
 801a0e6:	23f4      	movs	r3, #244	@ 0xf4
 801a0e8:	18fb      	adds	r3, r7, r3
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	029b      	lsls	r3, r3, #10
 801a0f0:	b29b      	uxth	r3, r3
 801a0f2:	4313      	orrs	r3, r2
 801a0f4:	b29b      	uxth	r3, r3
 801a0f6:	4a55      	ldr	r2, [pc, #340]	@ (801a24c <USB_EPStartXfer+0x74c>)
 801a0f8:	4313      	orrs	r3, r2
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0fe:	801a      	strh	r2, [r3, #0]
 801a100:	e048      	b.n	801a194 <USB_EPStartXfer+0x694>
 801a102:	1d7b      	adds	r3, r7, #5
 801a104:	33ff      	adds	r3, #255	@ 0xff
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d108      	bne.n	801a11e <USB_EPStartXfer+0x61e>
 801a10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a10e:	881b      	ldrh	r3, [r3, #0]
 801a110:	b29b      	uxth	r3, r3
 801a112:	4a4e      	ldr	r2, [pc, #312]	@ (801a24c <USB_EPStartXfer+0x74c>)
 801a114:	4313      	orrs	r3, r2
 801a116:	b29a      	uxth	r2, r3
 801a118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a11a:	801a      	strh	r2, [r3, #0]
 801a11c:	e03a      	b.n	801a194 <USB_EPStartXfer+0x694>
 801a11e:	1d7b      	adds	r3, r7, #5
 801a120:	33ff      	adds	r3, #255	@ 0xff
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	085b      	lsrs	r3, r3, #1
 801a126:	21f4      	movs	r1, #244	@ 0xf4
 801a128:	187a      	adds	r2, r7, r1
 801a12a:	6013      	str	r3, [r2, #0]
 801a12c:	1d7b      	adds	r3, r7, #5
 801a12e:	33ff      	adds	r3, #255	@ 0xff
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2201      	movs	r2, #1
 801a134:	4013      	ands	r3, r2
 801a136:	d004      	beq.n	801a142 <USB_EPStartXfer+0x642>
 801a138:	187b      	adds	r3, r7, r1
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	3301      	adds	r3, #1
 801a13e:	187a      	adds	r2, r7, r1
 801a140:	6013      	str	r3, [r2, #0]
 801a142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a144:	881b      	ldrh	r3, [r3, #0]
 801a146:	b29a      	uxth	r2, r3
 801a148:	23f4      	movs	r3, #244	@ 0xf4
 801a14a:	18fb      	adds	r3, r7, r3
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	b29b      	uxth	r3, r3
 801a150:	029b      	lsls	r3, r3, #10
 801a152:	b29b      	uxth	r3, r3
 801a154:	4313      	orrs	r3, r2
 801a156:	b29a      	uxth	r2, r3
 801a158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a15a:	801a      	strh	r2, [r3, #0]
 801a15c:	e01a      	b.n	801a194 <USB_EPStartXfer+0x694>
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	785b      	ldrb	r3, [r3, #1]
 801a162:	2b01      	cmp	r3, #1
 801a164:	d116      	bne.n	801a194 <USB_EPStartXfer+0x694>
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2250      	movs	r2, #80	@ 0x50
 801a16a:	5a9b      	ldrh	r3, [r3, r2]
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	001a      	movs	r2, r3
 801a170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a172:	189b      	adds	r3, r3, r2
 801a174:	643b      	str	r3, [r7, #64]	@ 0x40
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	781b      	ldrb	r3, [r3, #0]
 801a17a:	00da      	lsls	r2, r3, #3
 801a17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a17e:	18d3      	adds	r3, r2, r3
 801a180:	4a33      	ldr	r2, [pc, #204]	@ (801a250 <USB_EPStartXfer+0x750>)
 801a182:	4694      	mov	ip, r2
 801a184:	4463      	add	r3, ip
 801a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a188:	1d7b      	adds	r3, r7, #5
 801a18a:	33ff      	adds	r3, #255	@ 0xff
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	b29a      	uxth	r2, r3
 801a190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a194:	2076      	movs	r0, #118	@ 0x76
 801a196:	183b      	adds	r3, r7, r0
 801a198:	683a      	ldr	r2, [r7, #0]
 801a19a:	8952      	ldrh	r2, [r2, #10]
 801a19c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	6959      	ldr	r1, [r3, #20]
 801a1a2:	1d7b      	adds	r3, r7, #5
 801a1a4:	33ff      	adds	r3, #255	@ 0xff
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	b29c      	uxth	r4, r3
 801a1aa:	183b      	adds	r3, r7, r0
 801a1ac:	881a      	ldrh	r2, [r3, #0]
 801a1ae:	6878      	ldr	r0, [r7, #4]
 801a1b0:	0023      	movs	r3, r4
 801a1b2:	f000 ff17 	bl	801afe4 <USB_WritePMA>
 801a1b6:	e1b6      	b.n	801a526 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a1b8:	683b      	ldr	r3, [r7, #0]
 801a1ba:	6a1b      	ldr	r3, [r3, #32]
 801a1bc:	1d7a      	adds	r2, r7, #5
 801a1be:	32ff      	adds	r2, #255	@ 0xff
 801a1c0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a1c2:	687a      	ldr	r2, [r7, #4]
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	18d3      	adds	r3, r2, r3
 801a1cc:	881b      	ldrh	r3, [r3, #0]
 801a1ce:	b29a      	uxth	r2, r3
 801a1d0:	2062      	movs	r0, #98	@ 0x62
 801a1d2:	183b      	adds	r3, r7, r0
 801a1d4:	491f      	ldr	r1, [pc, #124]	@ (801a254 <USB_EPStartXfer+0x754>)
 801a1d6:	400a      	ands	r2, r1
 801a1d8:	801a      	strh	r2, [r3, #0]
 801a1da:	687a      	ldr	r2, [r7, #4]
 801a1dc:	683b      	ldr	r3, [r7, #0]
 801a1de:	781b      	ldrb	r3, [r3, #0]
 801a1e0:	009b      	lsls	r3, r3, #2
 801a1e2:	18d3      	adds	r3, r2, r3
 801a1e4:	183a      	adds	r2, r7, r0
 801a1e6:	8812      	ldrh	r2, [r2, #0]
 801a1e8:	491b      	ldr	r1, [pc, #108]	@ (801a258 <USB_EPStartXfer+0x758>)
 801a1ea:	430a      	orrs	r2, r1
 801a1ec:	b292      	uxth	r2, r2
 801a1ee:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	2250      	movs	r2, #80	@ 0x50
 801a1f8:	5a9b      	ldrh	r3, [r3, r2]
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	001a      	movs	r2, r3
 801a1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a200:	189b      	adds	r3, r3, r2
 801a202:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	781b      	ldrb	r3, [r3, #0]
 801a208:	00da      	lsls	r2, r3, #3
 801a20a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a20c:	18d3      	adds	r3, r2, r3
 801a20e:	4a0e      	ldr	r2, [pc, #56]	@ (801a248 <USB_EPStartXfer+0x748>)
 801a210:	4694      	mov	ip, r2
 801a212:	4463      	add	r3, ip
 801a214:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a216:	1d7b      	adds	r3, r7, #5
 801a218:	33ff      	adds	r3, #255	@ 0xff
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	b29a      	uxth	r2, r3
 801a21e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a220:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a222:	2076      	movs	r0, #118	@ 0x76
 801a224:	183b      	adds	r3, r7, r0
 801a226:	683a      	ldr	r2, [r7, #0]
 801a228:	8912      	ldrh	r2, [r2, #8]
 801a22a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	6959      	ldr	r1, [r3, #20]
 801a230:	1d7b      	adds	r3, r7, #5
 801a232:	33ff      	adds	r3, #255	@ 0xff
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	b29c      	uxth	r4, r3
 801a238:	183b      	adds	r3, r7, r0
 801a23a:	881a      	ldrh	r2, [r3, #0]
 801a23c:	6878      	ldr	r0, [r7, #4]
 801a23e:	0023      	movs	r3, r4
 801a240:	f000 fed0 	bl	801afe4 <USB_WritePMA>
 801a244:	e16f      	b.n	801a526 <USB_EPStartXfer+0xa26>
 801a246:	46c0      	nop			@ (mov r8, r8)
 801a248:	00000402 	.word	0x00000402
 801a24c:	ffff8000 	.word	0xffff8000
 801a250:	00000406 	.word	0x00000406
 801a254:	ffff8e8f 	.word	0xffff8e8f
 801a258:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a25c:	683b      	ldr	r3, [r7, #0]
 801a25e:	6a1a      	ldr	r2, [r3, #32]
 801a260:	1d7b      	adds	r3, r7, #5
 801a262:	33ff      	adds	r3, #255	@ 0xff
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	1ad2      	subs	r2, r2, r3
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a26c:	687a      	ldr	r2, [r7, #4]
 801a26e:	683b      	ldr	r3, [r7, #0]
 801a270:	781b      	ldrb	r3, [r3, #0]
 801a272:	009b      	lsls	r3, r3, #2
 801a274:	18d3      	adds	r3, r2, r3
 801a276:	881b      	ldrh	r3, [r3, #0]
 801a278:	b29b      	uxth	r3, r3
 801a27a:	001a      	movs	r2, r3
 801a27c:	2340      	movs	r3, #64	@ 0x40
 801a27e:	4013      	ands	r3, r2
 801a280:	d100      	bne.n	801a284 <USB_EPStartXfer+0x784>
 801a282:	e0a4      	b.n	801a3ce <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	673b      	str	r3, [r7, #112]	@ 0x70
 801a288:	683b      	ldr	r3, [r7, #0]
 801a28a:	785b      	ldrb	r3, [r3, #1]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d000      	beq.n	801a292 <USB_EPStartXfer+0x792>
 801a290:	e070      	b.n	801a374 <USB_EPStartXfer+0x874>
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2250      	movs	r2, #80	@ 0x50
 801a29a:	5a9b      	ldrh	r3, [r3, r2]
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	001a      	movs	r2, r3
 801a2a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a2a2:	189b      	adds	r3, r3, r2
 801a2a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a2a6:	683b      	ldr	r3, [r7, #0]
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	00da      	lsls	r2, r3, #3
 801a2ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a2ae:	18d3      	adds	r3, r2, r3
 801a2b0:	4abc      	ldr	r2, [pc, #752]	@ (801a5a4 <USB_EPStartXfer+0xaa4>)
 801a2b2:	4694      	mov	ip, r2
 801a2b4:	4463      	add	r3, ip
 801a2b6:	667b      	str	r3, [r7, #100]	@ 0x64
 801a2b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2ba:	881b      	ldrh	r3, [r3, #0]
 801a2bc:	b29b      	uxth	r3, r3
 801a2be:	059b      	lsls	r3, r3, #22
 801a2c0:	0d9b      	lsrs	r3, r3, #22
 801a2c2:	b29a      	uxth	r2, r3
 801a2c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2c6:	801a      	strh	r2, [r3, #0]
 801a2c8:	1d7b      	adds	r3, r7, #5
 801a2ca:	33ff      	adds	r3, #255	@ 0xff
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	2b3e      	cmp	r3, #62	@ 0x3e
 801a2d0:	d922      	bls.n	801a318 <USB_EPStartXfer+0x818>
 801a2d2:	1d7b      	adds	r3, r7, #5
 801a2d4:	33ff      	adds	r3, #255	@ 0xff
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	095b      	lsrs	r3, r3, #5
 801a2da:	21f0      	movs	r1, #240	@ 0xf0
 801a2dc:	187a      	adds	r2, r7, r1
 801a2de:	6013      	str	r3, [r2, #0]
 801a2e0:	1d7b      	adds	r3, r7, #5
 801a2e2:	33ff      	adds	r3, #255	@ 0xff
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	221f      	movs	r2, #31
 801a2e8:	4013      	ands	r3, r2
 801a2ea:	d104      	bne.n	801a2f6 <USB_EPStartXfer+0x7f6>
 801a2ec:	187b      	adds	r3, r7, r1
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	3b01      	subs	r3, #1
 801a2f2:	187a      	adds	r2, r7, r1
 801a2f4:	6013      	str	r3, [r2, #0]
 801a2f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2f8:	881b      	ldrh	r3, [r3, #0]
 801a2fa:	b29a      	uxth	r2, r3
 801a2fc:	23f0      	movs	r3, #240	@ 0xf0
 801a2fe:	18fb      	adds	r3, r7, r3
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	b29b      	uxth	r3, r3
 801a304:	029b      	lsls	r3, r3, #10
 801a306:	b29b      	uxth	r3, r3
 801a308:	4313      	orrs	r3, r2
 801a30a:	b29b      	uxth	r3, r3
 801a30c:	4aa6      	ldr	r2, [pc, #664]	@ (801a5a8 <USB_EPStartXfer+0xaa8>)
 801a30e:	4313      	orrs	r3, r2
 801a310:	b29a      	uxth	r2, r3
 801a312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a314:	801a      	strh	r2, [r3, #0]
 801a316:	e048      	b.n	801a3aa <USB_EPStartXfer+0x8aa>
 801a318:	1d7b      	adds	r3, r7, #5
 801a31a:	33ff      	adds	r3, #255	@ 0xff
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d108      	bne.n	801a334 <USB_EPStartXfer+0x834>
 801a322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a324:	881b      	ldrh	r3, [r3, #0]
 801a326:	b29b      	uxth	r3, r3
 801a328:	4a9f      	ldr	r2, [pc, #636]	@ (801a5a8 <USB_EPStartXfer+0xaa8>)
 801a32a:	4313      	orrs	r3, r2
 801a32c:	b29a      	uxth	r2, r3
 801a32e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a330:	801a      	strh	r2, [r3, #0]
 801a332:	e03a      	b.n	801a3aa <USB_EPStartXfer+0x8aa>
 801a334:	1d7b      	adds	r3, r7, #5
 801a336:	33ff      	adds	r3, #255	@ 0xff
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	085b      	lsrs	r3, r3, #1
 801a33c:	21f0      	movs	r1, #240	@ 0xf0
 801a33e:	187a      	adds	r2, r7, r1
 801a340:	6013      	str	r3, [r2, #0]
 801a342:	1d7b      	adds	r3, r7, #5
 801a344:	33ff      	adds	r3, #255	@ 0xff
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	2201      	movs	r2, #1
 801a34a:	4013      	ands	r3, r2
 801a34c:	d004      	beq.n	801a358 <USB_EPStartXfer+0x858>
 801a34e:	187b      	adds	r3, r7, r1
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	3301      	adds	r3, #1
 801a354:	187a      	adds	r2, r7, r1
 801a356:	6013      	str	r3, [r2, #0]
 801a358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a35a:	881b      	ldrh	r3, [r3, #0]
 801a35c:	b29a      	uxth	r2, r3
 801a35e:	23f0      	movs	r3, #240	@ 0xf0
 801a360:	18fb      	adds	r3, r7, r3
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	b29b      	uxth	r3, r3
 801a366:	029b      	lsls	r3, r3, #10
 801a368:	b29b      	uxth	r3, r3
 801a36a:	4313      	orrs	r3, r2
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a370:	801a      	strh	r2, [r3, #0]
 801a372:	e01a      	b.n	801a3aa <USB_EPStartXfer+0x8aa>
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	785b      	ldrb	r3, [r3, #1]
 801a378:	2b01      	cmp	r3, #1
 801a37a:	d116      	bne.n	801a3aa <USB_EPStartXfer+0x8aa>
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	2250      	movs	r2, #80	@ 0x50
 801a380:	5a9b      	ldrh	r3, [r3, r2]
 801a382:	b29b      	uxth	r3, r3
 801a384:	001a      	movs	r2, r3
 801a386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a388:	189b      	adds	r3, r3, r2
 801a38a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a38c:	683b      	ldr	r3, [r7, #0]
 801a38e:	781b      	ldrb	r3, [r3, #0]
 801a390:	00da      	lsls	r2, r3, #3
 801a392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a394:	18d3      	adds	r3, r2, r3
 801a396:	4a83      	ldr	r2, [pc, #524]	@ (801a5a4 <USB_EPStartXfer+0xaa4>)
 801a398:	4694      	mov	ip, r2
 801a39a:	4463      	add	r3, ip
 801a39c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a39e:	1d7b      	adds	r3, r7, #5
 801a3a0:	33ff      	adds	r3, #255	@ 0xff
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	b29a      	uxth	r2, r3
 801a3a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a3a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a3aa:	2076      	movs	r0, #118	@ 0x76
 801a3ac:	183b      	adds	r3, r7, r0
 801a3ae:	683a      	ldr	r2, [r7, #0]
 801a3b0:	8952      	ldrh	r2, [r2, #10]
 801a3b2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a3b4:	683b      	ldr	r3, [r7, #0]
 801a3b6:	6959      	ldr	r1, [r3, #20]
 801a3b8:	1d7b      	adds	r3, r7, #5
 801a3ba:	33ff      	adds	r3, #255	@ 0xff
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	b29c      	uxth	r4, r3
 801a3c0:	183b      	adds	r3, r7, r0
 801a3c2:	881a      	ldrh	r2, [r3, #0]
 801a3c4:	6878      	ldr	r0, [r7, #4]
 801a3c6:	0023      	movs	r3, r4
 801a3c8:	f000 fe0c 	bl	801afe4 <USB_WritePMA>
 801a3cc:	e0ab      	b.n	801a526 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a3ce:	683b      	ldr	r3, [r7, #0]
 801a3d0:	785b      	ldrb	r3, [r3, #1]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d000      	beq.n	801a3d8 <USB_EPStartXfer+0x8d8>
 801a3d6:	e070      	b.n	801a4ba <USB_EPStartXfer+0x9ba>
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	2250      	movs	r2, #80	@ 0x50
 801a3e0:	5a9b      	ldrh	r3, [r3, r2]
 801a3e2:	b29b      	uxth	r3, r3
 801a3e4:	001a      	movs	r2, r3
 801a3e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a3e8:	189b      	adds	r3, r3, r2
 801a3ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	781b      	ldrb	r3, [r3, #0]
 801a3f0:	00da      	lsls	r2, r3, #3
 801a3f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a3f4:	18d3      	adds	r3, r2, r3
 801a3f6:	4a6d      	ldr	r2, [pc, #436]	@ (801a5ac <USB_EPStartXfer+0xaac>)
 801a3f8:	4694      	mov	ip, r2
 801a3fa:	4463      	add	r3, ip
 801a3fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a3fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a400:	881b      	ldrh	r3, [r3, #0]
 801a402:	b29b      	uxth	r3, r3
 801a404:	059b      	lsls	r3, r3, #22
 801a406:	0d9b      	lsrs	r3, r3, #22
 801a408:	b29a      	uxth	r2, r3
 801a40a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a40c:	801a      	strh	r2, [r3, #0]
 801a40e:	1d7b      	adds	r3, r7, #5
 801a410:	33ff      	adds	r3, #255	@ 0xff
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	2b3e      	cmp	r3, #62	@ 0x3e
 801a416:	d922      	bls.n	801a45e <USB_EPStartXfer+0x95e>
 801a418:	1d7b      	adds	r3, r7, #5
 801a41a:	33ff      	adds	r3, #255	@ 0xff
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	095b      	lsrs	r3, r3, #5
 801a420:	21ec      	movs	r1, #236	@ 0xec
 801a422:	187a      	adds	r2, r7, r1
 801a424:	6013      	str	r3, [r2, #0]
 801a426:	1d7b      	adds	r3, r7, #5
 801a428:	33ff      	adds	r3, #255	@ 0xff
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	221f      	movs	r2, #31
 801a42e:	4013      	ands	r3, r2
 801a430:	d104      	bne.n	801a43c <USB_EPStartXfer+0x93c>
 801a432:	187b      	adds	r3, r7, r1
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	3b01      	subs	r3, #1
 801a438:	187a      	adds	r2, r7, r1
 801a43a:	6013      	str	r3, [r2, #0]
 801a43c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a43e:	881b      	ldrh	r3, [r3, #0]
 801a440:	b29a      	uxth	r2, r3
 801a442:	23ec      	movs	r3, #236	@ 0xec
 801a444:	18fb      	adds	r3, r7, r3
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	b29b      	uxth	r3, r3
 801a44a:	029b      	lsls	r3, r3, #10
 801a44c:	b29b      	uxth	r3, r3
 801a44e:	4313      	orrs	r3, r2
 801a450:	b29b      	uxth	r3, r3
 801a452:	4a55      	ldr	r2, [pc, #340]	@ (801a5a8 <USB_EPStartXfer+0xaa8>)
 801a454:	4313      	orrs	r3, r2
 801a456:	b29a      	uxth	r2, r3
 801a458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a45a:	801a      	strh	r2, [r3, #0]
 801a45c:	e052      	b.n	801a504 <USB_EPStartXfer+0xa04>
 801a45e:	1d7b      	adds	r3, r7, #5
 801a460:	33ff      	adds	r3, #255	@ 0xff
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d108      	bne.n	801a47a <USB_EPStartXfer+0x97a>
 801a468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a46a:	881b      	ldrh	r3, [r3, #0]
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	4a4e      	ldr	r2, [pc, #312]	@ (801a5a8 <USB_EPStartXfer+0xaa8>)
 801a470:	4313      	orrs	r3, r2
 801a472:	b29a      	uxth	r2, r3
 801a474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a476:	801a      	strh	r2, [r3, #0]
 801a478:	e044      	b.n	801a504 <USB_EPStartXfer+0xa04>
 801a47a:	1d7b      	adds	r3, r7, #5
 801a47c:	33ff      	adds	r3, #255	@ 0xff
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	085b      	lsrs	r3, r3, #1
 801a482:	21ec      	movs	r1, #236	@ 0xec
 801a484:	187a      	adds	r2, r7, r1
 801a486:	6013      	str	r3, [r2, #0]
 801a488:	1d7b      	adds	r3, r7, #5
 801a48a:	33ff      	adds	r3, #255	@ 0xff
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2201      	movs	r2, #1
 801a490:	4013      	ands	r3, r2
 801a492:	d004      	beq.n	801a49e <USB_EPStartXfer+0x99e>
 801a494:	187b      	adds	r3, r7, r1
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	3301      	adds	r3, #1
 801a49a:	187a      	adds	r2, r7, r1
 801a49c:	6013      	str	r3, [r2, #0]
 801a49e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4a0:	881b      	ldrh	r3, [r3, #0]
 801a4a2:	b29a      	uxth	r2, r3
 801a4a4:	23ec      	movs	r3, #236	@ 0xec
 801a4a6:	18fb      	adds	r3, r7, r3
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	b29b      	uxth	r3, r3
 801a4ac:	029b      	lsls	r3, r3, #10
 801a4ae:	b29b      	uxth	r3, r3
 801a4b0:	4313      	orrs	r3, r2
 801a4b2:	b29a      	uxth	r2, r3
 801a4b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4b6:	801a      	strh	r2, [r3, #0]
 801a4b8:	e024      	b.n	801a504 <USB_EPStartXfer+0xa04>
 801a4ba:	683b      	ldr	r3, [r7, #0]
 801a4bc:	785b      	ldrb	r3, [r3, #1]
 801a4be:	2b01      	cmp	r3, #1
 801a4c0:	d120      	bne.n	801a504 <USB_EPStartXfer+0xa04>
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	2184      	movs	r1, #132	@ 0x84
 801a4c6:	187a      	adds	r2, r7, r1
 801a4c8:	6013      	str	r3, [r2, #0]
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	2250      	movs	r2, #80	@ 0x50
 801a4ce:	5a9b      	ldrh	r3, [r3, r2]
 801a4d0:	b29b      	uxth	r3, r3
 801a4d2:	001a      	movs	r2, r3
 801a4d4:	187b      	adds	r3, r7, r1
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	189b      	adds	r3, r3, r2
 801a4da:	187a      	adds	r2, r7, r1
 801a4dc:	6013      	str	r3, [r2, #0]
 801a4de:	683b      	ldr	r3, [r7, #0]
 801a4e0:	781b      	ldrb	r3, [r3, #0]
 801a4e2:	00da      	lsls	r2, r3, #3
 801a4e4:	187b      	adds	r3, r7, r1
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	18d3      	adds	r3, r2, r3
 801a4ea:	4a30      	ldr	r2, [pc, #192]	@ (801a5ac <USB_EPStartXfer+0xaac>)
 801a4ec:	4694      	mov	ip, r2
 801a4ee:	4463      	add	r3, ip
 801a4f0:	2180      	movs	r1, #128	@ 0x80
 801a4f2:	187a      	adds	r2, r7, r1
 801a4f4:	6013      	str	r3, [r2, #0]
 801a4f6:	1d7b      	adds	r3, r7, #5
 801a4f8:	33ff      	adds	r3, #255	@ 0xff
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	b29a      	uxth	r2, r3
 801a4fe:	187b      	adds	r3, r7, r1
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a504:	2076      	movs	r0, #118	@ 0x76
 801a506:	183b      	adds	r3, r7, r0
 801a508:	683a      	ldr	r2, [r7, #0]
 801a50a:	8912      	ldrh	r2, [r2, #8]
 801a50c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	6959      	ldr	r1, [r3, #20]
 801a512:	1d7b      	adds	r3, r7, #5
 801a514:	33ff      	adds	r3, #255	@ 0xff
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	b29c      	uxth	r4, r3
 801a51a:	183b      	adds	r3, r7, r0
 801a51c:	881a      	ldrh	r2, [r3, #0]
 801a51e:	6878      	ldr	r0, [r7, #4]
 801a520:	0023      	movs	r3, r4
 801a522:	f000 fd5f 	bl	801afe4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a526:	687a      	ldr	r2, [r7, #4]
 801a528:	683b      	ldr	r3, [r7, #0]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	009b      	lsls	r3, r3, #2
 801a52e:	18d3      	adds	r3, r2, r3
 801a530:	881b      	ldrh	r3, [r3, #0]
 801a532:	b29a      	uxth	r2, r3
 801a534:	200a      	movs	r0, #10
 801a536:	183b      	adds	r3, r7, r0
 801a538:	491d      	ldr	r1, [pc, #116]	@ (801a5b0 <USB_EPStartXfer+0xab0>)
 801a53a:	400a      	ands	r2, r1
 801a53c:	801a      	strh	r2, [r3, #0]
 801a53e:	183b      	adds	r3, r7, r0
 801a540:	183a      	adds	r2, r7, r0
 801a542:	8812      	ldrh	r2, [r2, #0]
 801a544:	2110      	movs	r1, #16
 801a546:	404a      	eors	r2, r1
 801a548:	801a      	strh	r2, [r3, #0]
 801a54a:	183b      	adds	r3, r7, r0
 801a54c:	183a      	adds	r2, r7, r0
 801a54e:	8812      	ldrh	r2, [r2, #0]
 801a550:	2120      	movs	r1, #32
 801a552:	404a      	eors	r2, r1
 801a554:	801a      	strh	r2, [r3, #0]
 801a556:	687a      	ldr	r2, [r7, #4]
 801a558:	683b      	ldr	r3, [r7, #0]
 801a55a:	781b      	ldrb	r3, [r3, #0]
 801a55c:	009b      	lsls	r3, r3, #2
 801a55e:	18d3      	adds	r3, r2, r3
 801a560:	183a      	adds	r2, r7, r0
 801a562:	8812      	ldrh	r2, [r2, #0]
 801a564:	4913      	ldr	r1, [pc, #76]	@ (801a5b4 <USB_EPStartXfer+0xab4>)
 801a566:	430a      	orrs	r2, r1
 801a568:	b292      	uxth	r2, r2
 801a56a:	801a      	strh	r2, [r3, #0]
 801a56c:	f000 fbf4 	bl	801ad58 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	7b1b      	ldrb	r3, [r3, #12]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d000      	beq.n	801a57a <USB_EPStartXfer+0xa7a>
 801a578:	e0a9      	b.n	801a6ce <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a57a:	683b      	ldr	r3, [r7, #0]
 801a57c:	699a      	ldr	r2, [r3, #24]
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	691b      	ldr	r3, [r3, #16]
 801a582:	429a      	cmp	r2, r3
 801a584:	d918      	bls.n	801a5b8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a586:	683b      	ldr	r3, [r7, #0]
 801a588:	691b      	ldr	r3, [r3, #16]
 801a58a:	1d7a      	adds	r2, r7, #5
 801a58c:	32ff      	adds	r2, #255	@ 0xff
 801a58e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	699a      	ldr	r2, [r3, #24]
 801a594:	1d7b      	adds	r3, r7, #5
 801a596:	33ff      	adds	r3, #255	@ 0xff
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	1ad2      	subs	r2, r2, r3
 801a59c:	683b      	ldr	r3, [r7, #0]
 801a59e:	619a      	str	r2, [r3, #24]
 801a5a0:	e012      	b.n	801a5c8 <USB_EPStartXfer+0xac8>
 801a5a2:	46c0      	nop			@ (mov r8, r8)
 801a5a4:	00000406 	.word	0x00000406
 801a5a8:	ffff8000 	.word	0xffff8000
 801a5ac:	00000402 	.word	0x00000402
 801a5b0:	ffff8fbf 	.word	0xffff8fbf
 801a5b4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	699b      	ldr	r3, [r3, #24]
 801a5bc:	1d7a      	adds	r2, r7, #5
 801a5be:	32ff      	adds	r2, #255	@ 0xff
 801a5c0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a5c2:	683b      	ldr	r3, [r7, #0]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2190      	movs	r1, #144	@ 0x90
 801a5cc:	187a      	adds	r2, r7, r1
 801a5ce:	6013      	str	r3, [r2, #0]
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2250      	movs	r2, #80	@ 0x50
 801a5d4:	5a9b      	ldrh	r3, [r3, r2]
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	001a      	movs	r2, r3
 801a5da:	187b      	adds	r3, r7, r1
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	189b      	adds	r3, r3, r2
 801a5e0:	187a      	adds	r2, r7, r1
 801a5e2:	6013      	str	r3, [r2, #0]
 801a5e4:	683b      	ldr	r3, [r7, #0]
 801a5e6:	781b      	ldrb	r3, [r3, #0]
 801a5e8:	00da      	lsls	r2, r3, #3
 801a5ea:	187b      	adds	r3, r7, r1
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	18d3      	adds	r3, r2, r3
 801a5f0:	4acf      	ldr	r2, [pc, #828]	@ (801a930 <USB_EPStartXfer+0xe30>)
 801a5f2:	4694      	mov	ip, r2
 801a5f4:	4463      	add	r3, ip
 801a5f6:	218c      	movs	r1, #140	@ 0x8c
 801a5f8:	187a      	adds	r2, r7, r1
 801a5fa:	6013      	str	r3, [r2, #0]
 801a5fc:	187b      	adds	r3, r7, r1
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	881b      	ldrh	r3, [r3, #0]
 801a602:	b29b      	uxth	r3, r3
 801a604:	059b      	lsls	r3, r3, #22
 801a606:	0d9b      	lsrs	r3, r3, #22
 801a608:	b29a      	uxth	r2, r3
 801a60a:	187b      	adds	r3, r7, r1
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	801a      	strh	r2, [r3, #0]
 801a610:	1d7b      	adds	r3, r7, #5
 801a612:	33ff      	adds	r3, #255	@ 0xff
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	2b3e      	cmp	r3, #62	@ 0x3e
 801a618:	d925      	bls.n	801a666 <USB_EPStartXfer+0xb66>
 801a61a:	1d7b      	adds	r3, r7, #5
 801a61c:	33ff      	adds	r3, #255	@ 0xff
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	095b      	lsrs	r3, r3, #5
 801a622:	21e8      	movs	r1, #232	@ 0xe8
 801a624:	187a      	adds	r2, r7, r1
 801a626:	6013      	str	r3, [r2, #0]
 801a628:	1d7b      	adds	r3, r7, #5
 801a62a:	33ff      	adds	r3, #255	@ 0xff
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	221f      	movs	r2, #31
 801a630:	4013      	ands	r3, r2
 801a632:	d104      	bne.n	801a63e <USB_EPStartXfer+0xb3e>
 801a634:	187b      	adds	r3, r7, r1
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	3b01      	subs	r3, #1
 801a63a:	187a      	adds	r2, r7, r1
 801a63c:	6013      	str	r3, [r2, #0]
 801a63e:	218c      	movs	r1, #140	@ 0x8c
 801a640:	187b      	adds	r3, r7, r1
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	881b      	ldrh	r3, [r3, #0]
 801a646:	b29a      	uxth	r2, r3
 801a648:	23e8      	movs	r3, #232	@ 0xe8
 801a64a:	18fb      	adds	r3, r7, r3
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	b29b      	uxth	r3, r3
 801a650:	029b      	lsls	r3, r3, #10
 801a652:	b29b      	uxth	r3, r3
 801a654:	4313      	orrs	r3, r2
 801a656:	b29b      	uxth	r3, r3
 801a658:	4ab6      	ldr	r2, [pc, #728]	@ (801a934 <USB_EPStartXfer+0xe34>)
 801a65a:	4313      	orrs	r3, r2
 801a65c:	b29a      	uxth	r2, r3
 801a65e:	187b      	adds	r3, r7, r1
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	801a      	strh	r2, [r3, #0]
 801a664:	e353      	b.n	801ad0e <USB_EPStartXfer+0x120e>
 801a666:	1d7b      	adds	r3, r7, #5
 801a668:	33ff      	adds	r3, #255	@ 0xff
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d10b      	bne.n	801a688 <USB_EPStartXfer+0xb88>
 801a670:	218c      	movs	r1, #140	@ 0x8c
 801a672:	187b      	adds	r3, r7, r1
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	881b      	ldrh	r3, [r3, #0]
 801a678:	b29b      	uxth	r3, r3
 801a67a:	4aae      	ldr	r2, [pc, #696]	@ (801a934 <USB_EPStartXfer+0xe34>)
 801a67c:	4313      	orrs	r3, r2
 801a67e:	b29a      	uxth	r2, r3
 801a680:	187b      	adds	r3, r7, r1
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	801a      	strh	r2, [r3, #0]
 801a686:	e342      	b.n	801ad0e <USB_EPStartXfer+0x120e>
 801a688:	1d7b      	adds	r3, r7, #5
 801a68a:	33ff      	adds	r3, #255	@ 0xff
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	085b      	lsrs	r3, r3, #1
 801a690:	21e8      	movs	r1, #232	@ 0xe8
 801a692:	187a      	adds	r2, r7, r1
 801a694:	6013      	str	r3, [r2, #0]
 801a696:	1d7b      	adds	r3, r7, #5
 801a698:	33ff      	adds	r3, #255	@ 0xff
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2201      	movs	r2, #1
 801a69e:	4013      	ands	r3, r2
 801a6a0:	d004      	beq.n	801a6ac <USB_EPStartXfer+0xbac>
 801a6a2:	187b      	adds	r3, r7, r1
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	3301      	adds	r3, #1
 801a6a8:	187a      	adds	r2, r7, r1
 801a6aa:	6013      	str	r3, [r2, #0]
 801a6ac:	218c      	movs	r1, #140	@ 0x8c
 801a6ae:	187b      	adds	r3, r7, r1
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	881b      	ldrh	r3, [r3, #0]
 801a6b4:	b29a      	uxth	r2, r3
 801a6b6:	23e8      	movs	r3, #232	@ 0xe8
 801a6b8:	18fb      	adds	r3, r7, r3
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	029b      	lsls	r3, r3, #10
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	4313      	orrs	r3, r2
 801a6c4:	b29a      	uxth	r2, r3
 801a6c6:	187b      	adds	r3, r7, r1
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	801a      	strh	r2, [r3, #0]
 801a6cc:	e31f      	b.n	801ad0e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a6ce:	683b      	ldr	r3, [r7, #0]
 801a6d0:	78db      	ldrb	r3, [r3, #3]
 801a6d2:	2b02      	cmp	r3, #2
 801a6d4:	d000      	beq.n	801a6d8 <USB_EPStartXfer+0xbd8>
 801a6d6:	e191      	b.n	801a9fc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a6d8:	683b      	ldr	r3, [r7, #0]
 801a6da:	785b      	ldrb	r3, [r3, #1]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d000      	beq.n	801a6e2 <USB_EPStartXfer+0xbe2>
 801a6e0:	e07c      	b.n	801a7dc <USB_EPStartXfer+0xcdc>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	21ac      	movs	r1, #172	@ 0xac
 801a6e6:	187a      	adds	r2, r7, r1
 801a6e8:	6013      	str	r3, [r2, #0]
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	2250      	movs	r2, #80	@ 0x50
 801a6ee:	5a9b      	ldrh	r3, [r3, r2]
 801a6f0:	b29b      	uxth	r3, r3
 801a6f2:	001a      	movs	r2, r3
 801a6f4:	187b      	adds	r3, r7, r1
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	189b      	adds	r3, r3, r2
 801a6fa:	187a      	adds	r2, r7, r1
 801a6fc:	6013      	str	r3, [r2, #0]
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	781b      	ldrb	r3, [r3, #0]
 801a702:	00da      	lsls	r2, r3, #3
 801a704:	187b      	adds	r3, r7, r1
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	18d3      	adds	r3, r2, r3
 801a70a:	4a8b      	ldr	r2, [pc, #556]	@ (801a938 <USB_EPStartXfer+0xe38>)
 801a70c:	4694      	mov	ip, r2
 801a70e:	4463      	add	r3, ip
 801a710:	21a8      	movs	r1, #168	@ 0xa8
 801a712:	187a      	adds	r2, r7, r1
 801a714:	6013      	str	r3, [r2, #0]
 801a716:	187b      	adds	r3, r7, r1
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	881b      	ldrh	r3, [r3, #0]
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	059b      	lsls	r3, r3, #22
 801a720:	0d9b      	lsrs	r3, r3, #22
 801a722:	b29a      	uxth	r2, r3
 801a724:	187b      	adds	r3, r7, r1
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	801a      	strh	r2, [r3, #0]
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	691b      	ldr	r3, [r3, #16]
 801a72e:	2b3e      	cmp	r3, #62	@ 0x3e
 801a730:	d923      	bls.n	801a77a <USB_EPStartXfer+0xc7a>
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	691b      	ldr	r3, [r3, #16]
 801a736:	095b      	lsrs	r3, r3, #5
 801a738:	21e4      	movs	r1, #228	@ 0xe4
 801a73a:	187a      	adds	r2, r7, r1
 801a73c:	6013      	str	r3, [r2, #0]
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	691b      	ldr	r3, [r3, #16]
 801a742:	221f      	movs	r2, #31
 801a744:	4013      	ands	r3, r2
 801a746:	d104      	bne.n	801a752 <USB_EPStartXfer+0xc52>
 801a748:	187b      	adds	r3, r7, r1
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	3b01      	subs	r3, #1
 801a74e:	187a      	adds	r2, r7, r1
 801a750:	6013      	str	r3, [r2, #0]
 801a752:	21a8      	movs	r1, #168	@ 0xa8
 801a754:	187b      	adds	r3, r7, r1
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	881b      	ldrh	r3, [r3, #0]
 801a75a:	b29a      	uxth	r2, r3
 801a75c:	23e4      	movs	r3, #228	@ 0xe4
 801a75e:	18fb      	adds	r3, r7, r3
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	b29b      	uxth	r3, r3
 801a764:	029b      	lsls	r3, r3, #10
 801a766:	b29b      	uxth	r3, r3
 801a768:	4313      	orrs	r3, r2
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	4a71      	ldr	r2, [pc, #452]	@ (801a934 <USB_EPStartXfer+0xe34>)
 801a76e:	4313      	orrs	r3, r2
 801a770:	b29a      	uxth	r2, r3
 801a772:	187b      	adds	r3, r7, r1
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	801a      	strh	r2, [r3, #0]
 801a778:	e054      	b.n	801a824 <USB_EPStartXfer+0xd24>
 801a77a:	683b      	ldr	r3, [r7, #0]
 801a77c:	691b      	ldr	r3, [r3, #16]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d10b      	bne.n	801a79a <USB_EPStartXfer+0xc9a>
 801a782:	21a8      	movs	r1, #168	@ 0xa8
 801a784:	187b      	adds	r3, r7, r1
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	881b      	ldrh	r3, [r3, #0]
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	4a69      	ldr	r2, [pc, #420]	@ (801a934 <USB_EPStartXfer+0xe34>)
 801a78e:	4313      	orrs	r3, r2
 801a790:	b29a      	uxth	r2, r3
 801a792:	187b      	adds	r3, r7, r1
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	801a      	strh	r2, [r3, #0]
 801a798:	e044      	b.n	801a824 <USB_EPStartXfer+0xd24>
 801a79a:	683b      	ldr	r3, [r7, #0]
 801a79c:	691b      	ldr	r3, [r3, #16]
 801a79e:	085b      	lsrs	r3, r3, #1
 801a7a0:	21e4      	movs	r1, #228	@ 0xe4
 801a7a2:	187a      	adds	r2, r7, r1
 801a7a4:	6013      	str	r3, [r2, #0]
 801a7a6:	683b      	ldr	r3, [r7, #0]
 801a7a8:	691b      	ldr	r3, [r3, #16]
 801a7aa:	2201      	movs	r2, #1
 801a7ac:	4013      	ands	r3, r2
 801a7ae:	d004      	beq.n	801a7ba <USB_EPStartXfer+0xcba>
 801a7b0:	187b      	adds	r3, r7, r1
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	3301      	adds	r3, #1
 801a7b6:	187a      	adds	r2, r7, r1
 801a7b8:	6013      	str	r3, [r2, #0]
 801a7ba:	21a8      	movs	r1, #168	@ 0xa8
 801a7bc:	187b      	adds	r3, r7, r1
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	881b      	ldrh	r3, [r3, #0]
 801a7c2:	b29a      	uxth	r2, r3
 801a7c4:	23e4      	movs	r3, #228	@ 0xe4
 801a7c6:	18fb      	adds	r3, r7, r3
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	b29b      	uxth	r3, r3
 801a7cc:	029b      	lsls	r3, r3, #10
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	4313      	orrs	r3, r2
 801a7d2:	b29a      	uxth	r2, r3
 801a7d4:	187b      	adds	r3, r7, r1
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	801a      	strh	r2, [r3, #0]
 801a7da:	e023      	b.n	801a824 <USB_EPStartXfer+0xd24>
 801a7dc:	683b      	ldr	r3, [r7, #0]
 801a7de:	785b      	ldrb	r3, [r3, #1]
 801a7e0:	2b01      	cmp	r3, #1
 801a7e2:	d11f      	bne.n	801a824 <USB_EPStartXfer+0xd24>
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	21b4      	movs	r1, #180	@ 0xb4
 801a7e8:	187a      	adds	r2, r7, r1
 801a7ea:	6013      	str	r3, [r2, #0]
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	2250      	movs	r2, #80	@ 0x50
 801a7f0:	5a9b      	ldrh	r3, [r3, r2]
 801a7f2:	b29b      	uxth	r3, r3
 801a7f4:	001a      	movs	r2, r3
 801a7f6:	187b      	adds	r3, r7, r1
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	189b      	adds	r3, r3, r2
 801a7fc:	187a      	adds	r2, r7, r1
 801a7fe:	6013      	str	r3, [r2, #0]
 801a800:	683b      	ldr	r3, [r7, #0]
 801a802:	781b      	ldrb	r3, [r3, #0]
 801a804:	00da      	lsls	r2, r3, #3
 801a806:	187b      	adds	r3, r7, r1
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	18d3      	adds	r3, r2, r3
 801a80c:	4a4a      	ldr	r2, [pc, #296]	@ (801a938 <USB_EPStartXfer+0xe38>)
 801a80e:	4694      	mov	ip, r2
 801a810:	4463      	add	r3, ip
 801a812:	21b0      	movs	r1, #176	@ 0xb0
 801a814:	187a      	adds	r2, r7, r1
 801a816:	6013      	str	r3, [r2, #0]
 801a818:	683b      	ldr	r3, [r7, #0]
 801a81a:	691b      	ldr	r3, [r3, #16]
 801a81c:	b29a      	uxth	r2, r3
 801a81e:	187b      	adds	r3, r7, r1
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	801a      	strh	r2, [r3, #0]
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	22a4      	movs	r2, #164	@ 0xa4
 801a828:	18ba      	adds	r2, r7, r2
 801a82a:	6013      	str	r3, [r2, #0]
 801a82c:	683b      	ldr	r3, [r7, #0]
 801a82e:	785b      	ldrb	r3, [r3, #1]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d000      	beq.n	801a836 <USB_EPStartXfer+0xd36>
 801a834:	e082      	b.n	801a93c <USB_EPStartXfer+0xe3c>
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	219c      	movs	r1, #156	@ 0x9c
 801a83a:	187a      	adds	r2, r7, r1
 801a83c:	6013      	str	r3, [r2, #0]
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	2250      	movs	r2, #80	@ 0x50
 801a842:	5a9b      	ldrh	r3, [r3, r2]
 801a844:	b29b      	uxth	r3, r3
 801a846:	001a      	movs	r2, r3
 801a848:	187b      	adds	r3, r7, r1
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	189b      	adds	r3, r3, r2
 801a84e:	187a      	adds	r2, r7, r1
 801a850:	6013      	str	r3, [r2, #0]
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	781b      	ldrb	r3, [r3, #0]
 801a856:	00da      	lsls	r2, r3, #3
 801a858:	187b      	adds	r3, r7, r1
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	18d3      	adds	r3, r2, r3
 801a85e:	4a34      	ldr	r2, [pc, #208]	@ (801a930 <USB_EPStartXfer+0xe30>)
 801a860:	4694      	mov	ip, r2
 801a862:	4463      	add	r3, ip
 801a864:	2198      	movs	r1, #152	@ 0x98
 801a866:	187a      	adds	r2, r7, r1
 801a868:	6013      	str	r3, [r2, #0]
 801a86a:	187b      	adds	r3, r7, r1
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	881b      	ldrh	r3, [r3, #0]
 801a870:	b29b      	uxth	r3, r3
 801a872:	059b      	lsls	r3, r3, #22
 801a874:	0d9b      	lsrs	r3, r3, #22
 801a876:	b29a      	uxth	r2, r3
 801a878:	187b      	adds	r3, r7, r1
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	801a      	strh	r2, [r3, #0]
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	691b      	ldr	r3, [r3, #16]
 801a882:	2b3e      	cmp	r3, #62	@ 0x3e
 801a884:	d923      	bls.n	801a8ce <USB_EPStartXfer+0xdce>
 801a886:	683b      	ldr	r3, [r7, #0]
 801a888:	691b      	ldr	r3, [r3, #16]
 801a88a:	095b      	lsrs	r3, r3, #5
 801a88c:	21e0      	movs	r1, #224	@ 0xe0
 801a88e:	187a      	adds	r2, r7, r1
 801a890:	6013      	str	r3, [r2, #0]
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	691b      	ldr	r3, [r3, #16]
 801a896:	221f      	movs	r2, #31
 801a898:	4013      	ands	r3, r2
 801a89a:	d104      	bne.n	801a8a6 <USB_EPStartXfer+0xda6>
 801a89c:	187b      	adds	r3, r7, r1
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	3b01      	subs	r3, #1
 801a8a2:	187a      	adds	r2, r7, r1
 801a8a4:	6013      	str	r3, [r2, #0]
 801a8a6:	2198      	movs	r1, #152	@ 0x98
 801a8a8:	187b      	adds	r3, r7, r1
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	881b      	ldrh	r3, [r3, #0]
 801a8ae:	b29a      	uxth	r2, r3
 801a8b0:	23e0      	movs	r3, #224	@ 0xe0
 801a8b2:	18fb      	adds	r3, r7, r3
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	b29b      	uxth	r3, r3
 801a8b8:	029b      	lsls	r3, r3, #10
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	4313      	orrs	r3, r2
 801a8be:	b29b      	uxth	r3, r3
 801a8c0:	4a1c      	ldr	r2, [pc, #112]	@ (801a934 <USB_EPStartXfer+0xe34>)
 801a8c2:	4313      	orrs	r3, r2
 801a8c4:	b29a      	uxth	r2, r3
 801a8c6:	187b      	adds	r3, r7, r1
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	801a      	strh	r2, [r3, #0]
 801a8cc:	e057      	b.n	801a97e <USB_EPStartXfer+0xe7e>
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	691b      	ldr	r3, [r3, #16]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d10b      	bne.n	801a8ee <USB_EPStartXfer+0xdee>
 801a8d6:	2198      	movs	r1, #152	@ 0x98
 801a8d8:	187b      	adds	r3, r7, r1
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	881b      	ldrh	r3, [r3, #0]
 801a8de:	b29b      	uxth	r3, r3
 801a8e0:	4a14      	ldr	r2, [pc, #80]	@ (801a934 <USB_EPStartXfer+0xe34>)
 801a8e2:	4313      	orrs	r3, r2
 801a8e4:	b29a      	uxth	r2, r3
 801a8e6:	187b      	adds	r3, r7, r1
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	801a      	strh	r2, [r3, #0]
 801a8ec:	e047      	b.n	801a97e <USB_EPStartXfer+0xe7e>
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	691b      	ldr	r3, [r3, #16]
 801a8f2:	085b      	lsrs	r3, r3, #1
 801a8f4:	21e0      	movs	r1, #224	@ 0xe0
 801a8f6:	187a      	adds	r2, r7, r1
 801a8f8:	6013      	str	r3, [r2, #0]
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	691b      	ldr	r3, [r3, #16]
 801a8fe:	2201      	movs	r2, #1
 801a900:	4013      	ands	r3, r2
 801a902:	d004      	beq.n	801a90e <USB_EPStartXfer+0xe0e>
 801a904:	187b      	adds	r3, r7, r1
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	3301      	adds	r3, #1
 801a90a:	187a      	adds	r2, r7, r1
 801a90c:	6013      	str	r3, [r2, #0]
 801a90e:	2198      	movs	r1, #152	@ 0x98
 801a910:	187b      	adds	r3, r7, r1
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	881b      	ldrh	r3, [r3, #0]
 801a916:	b29a      	uxth	r2, r3
 801a918:	23e0      	movs	r3, #224	@ 0xe0
 801a91a:	18fb      	adds	r3, r7, r3
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	b29b      	uxth	r3, r3
 801a920:	029b      	lsls	r3, r3, #10
 801a922:	b29b      	uxth	r3, r3
 801a924:	4313      	orrs	r3, r2
 801a926:	b29a      	uxth	r2, r3
 801a928:	187b      	adds	r3, r7, r1
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	801a      	strh	r2, [r3, #0]
 801a92e:	e026      	b.n	801a97e <USB_EPStartXfer+0xe7e>
 801a930:	00000406 	.word	0x00000406
 801a934:	ffff8000 	.word	0xffff8000
 801a938:	00000402 	.word	0x00000402
 801a93c:	683b      	ldr	r3, [r7, #0]
 801a93e:	785b      	ldrb	r3, [r3, #1]
 801a940:	2b01      	cmp	r3, #1
 801a942:	d11c      	bne.n	801a97e <USB_EPStartXfer+0xe7e>
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2250      	movs	r2, #80	@ 0x50
 801a948:	5a9b      	ldrh	r3, [r3, r2]
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	001a      	movs	r2, r3
 801a94e:	21a4      	movs	r1, #164	@ 0xa4
 801a950:	187b      	adds	r3, r7, r1
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	189b      	adds	r3, r3, r2
 801a956:	187a      	adds	r2, r7, r1
 801a958:	6013      	str	r3, [r2, #0]
 801a95a:	683b      	ldr	r3, [r7, #0]
 801a95c:	781b      	ldrb	r3, [r3, #0]
 801a95e:	00da      	lsls	r2, r3, #3
 801a960:	187b      	adds	r3, r7, r1
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	18d3      	adds	r3, r2, r3
 801a966:	4ad2      	ldr	r2, [pc, #840]	@ (801acb0 <USB_EPStartXfer+0x11b0>)
 801a968:	4694      	mov	ip, r2
 801a96a:	4463      	add	r3, ip
 801a96c:	21a0      	movs	r1, #160	@ 0xa0
 801a96e:	187a      	adds	r2, r7, r1
 801a970:	6013      	str	r3, [r2, #0]
 801a972:	683b      	ldr	r3, [r7, #0]
 801a974:	691b      	ldr	r3, [r3, #16]
 801a976:	b29a      	uxth	r2, r3
 801a978:	187b      	adds	r3, r7, r1
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a97e:	683b      	ldr	r3, [r7, #0]
 801a980:	69db      	ldr	r3, [r3, #28]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d100      	bne.n	801a988 <USB_EPStartXfer+0xe88>
 801a986:	e1c2      	b.n	801ad0e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	683b      	ldr	r3, [r7, #0]
 801a98c:	781b      	ldrb	r3, [r3, #0]
 801a98e:	009b      	lsls	r3, r3, #2
 801a990:	18d2      	adds	r2, r2, r3
 801a992:	2196      	movs	r1, #150	@ 0x96
 801a994:	187b      	adds	r3, r7, r1
 801a996:	8812      	ldrh	r2, [r2, #0]
 801a998:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a99a:	187b      	adds	r3, r7, r1
 801a99c:	881a      	ldrh	r2, [r3, #0]
 801a99e:	2380      	movs	r3, #128	@ 0x80
 801a9a0:	01db      	lsls	r3, r3, #7
 801a9a2:	4013      	ands	r3, r2
 801a9a4:	d004      	beq.n	801a9b0 <USB_EPStartXfer+0xeb0>
 801a9a6:	187b      	adds	r3, r7, r1
 801a9a8:	881b      	ldrh	r3, [r3, #0]
 801a9aa:	2240      	movs	r2, #64	@ 0x40
 801a9ac:	4013      	ands	r3, r2
 801a9ae:	d10d      	bne.n	801a9cc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a9b0:	2196      	movs	r1, #150	@ 0x96
 801a9b2:	187b      	adds	r3, r7, r1
 801a9b4:	881a      	ldrh	r2, [r3, #0]
 801a9b6:	2380      	movs	r3, #128	@ 0x80
 801a9b8:	01db      	lsls	r3, r3, #7
 801a9ba:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a9bc:	d000      	beq.n	801a9c0 <USB_EPStartXfer+0xec0>
 801a9be:	e1a6      	b.n	801ad0e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a9c0:	187b      	adds	r3, r7, r1
 801a9c2:	881b      	ldrh	r3, [r3, #0]
 801a9c4:	2240      	movs	r2, #64	@ 0x40
 801a9c6:	4013      	ands	r3, r2
 801a9c8:	d000      	beq.n	801a9cc <USB_EPStartXfer+0xecc>
 801a9ca:	e1a0      	b.n	801ad0e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a9cc:	687a      	ldr	r2, [r7, #4]
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	781b      	ldrb	r3, [r3, #0]
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	18d3      	adds	r3, r2, r3
 801a9d6:	881b      	ldrh	r3, [r3, #0]
 801a9d8:	b29a      	uxth	r2, r3
 801a9da:	2094      	movs	r0, #148	@ 0x94
 801a9dc:	183b      	adds	r3, r7, r0
 801a9de:	49b5      	ldr	r1, [pc, #724]	@ (801acb4 <USB_EPStartXfer+0x11b4>)
 801a9e0:	400a      	ands	r2, r1
 801a9e2:	801a      	strh	r2, [r3, #0]
 801a9e4:	687a      	ldr	r2, [r7, #4]
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	781b      	ldrb	r3, [r3, #0]
 801a9ea:	009b      	lsls	r3, r3, #2
 801a9ec:	18d3      	adds	r3, r2, r3
 801a9ee:	183a      	adds	r2, r7, r0
 801a9f0:	8812      	ldrh	r2, [r2, #0]
 801a9f2:	49b1      	ldr	r1, [pc, #708]	@ (801acb8 <USB_EPStartXfer+0x11b8>)
 801a9f4:	430a      	orrs	r2, r1
 801a9f6:	b292      	uxth	r2, r2
 801a9f8:	801a      	strh	r2, [r3, #0]
 801a9fa:	e188      	b.n	801ad0e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a9fc:	683b      	ldr	r3, [r7, #0]
 801a9fe:	78db      	ldrb	r3, [r3, #3]
 801aa00:	2b01      	cmp	r3, #1
 801aa02:	d000      	beq.n	801aa06 <USB_EPStartXfer+0xf06>
 801aa04:	e181      	b.n	801ad0a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801aa06:	683b      	ldr	r3, [r7, #0]
 801aa08:	699a      	ldr	r2, [r3, #24]
 801aa0a:	683b      	ldr	r3, [r7, #0]
 801aa0c:	691b      	ldr	r3, [r3, #16]
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d90d      	bls.n	801aa2e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	691b      	ldr	r3, [r3, #16]
 801aa16:	1d7a      	adds	r2, r7, #5
 801aa18:	32ff      	adds	r2, #255	@ 0xff
 801aa1a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801aa1c:	683b      	ldr	r3, [r7, #0]
 801aa1e:	699a      	ldr	r2, [r3, #24]
 801aa20:	1d7b      	adds	r3, r7, #5
 801aa22:	33ff      	adds	r3, #255	@ 0xff
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	1ad2      	subs	r2, r2, r3
 801aa28:	683b      	ldr	r3, [r7, #0]
 801aa2a:	619a      	str	r2, [r3, #24]
 801aa2c:	e007      	b.n	801aa3e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	699b      	ldr	r3, [r3, #24]
 801aa32:	1d7a      	adds	r2, r7, #5
 801aa34:	32ff      	adds	r2, #255	@ 0xff
 801aa36:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	785b      	ldrb	r3, [r3, #1]
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d000      	beq.n	801aa48 <USB_EPStartXfer+0xf48>
 801aa46:	e082      	b.n	801ab4e <USB_EPStartXfer+0x104e>
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	21cc      	movs	r1, #204	@ 0xcc
 801aa4c:	187a      	adds	r2, r7, r1
 801aa4e:	6013      	str	r3, [r2, #0]
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	2250      	movs	r2, #80	@ 0x50
 801aa54:	5a9b      	ldrh	r3, [r3, r2]
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	001a      	movs	r2, r3
 801aa5a:	187b      	adds	r3, r7, r1
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	189b      	adds	r3, r3, r2
 801aa60:	187a      	adds	r2, r7, r1
 801aa62:	6013      	str	r3, [r2, #0]
 801aa64:	683b      	ldr	r3, [r7, #0]
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	00da      	lsls	r2, r3, #3
 801aa6a:	187b      	adds	r3, r7, r1
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	18d3      	adds	r3, r2, r3
 801aa70:	4a92      	ldr	r2, [pc, #584]	@ (801acbc <USB_EPStartXfer+0x11bc>)
 801aa72:	4694      	mov	ip, r2
 801aa74:	4463      	add	r3, ip
 801aa76:	21c8      	movs	r1, #200	@ 0xc8
 801aa78:	187a      	adds	r2, r7, r1
 801aa7a:	6013      	str	r3, [r2, #0]
 801aa7c:	187b      	adds	r3, r7, r1
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	881b      	ldrh	r3, [r3, #0]
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	059b      	lsls	r3, r3, #22
 801aa86:	0d9b      	lsrs	r3, r3, #22
 801aa88:	b29a      	uxth	r2, r3
 801aa8a:	187b      	adds	r3, r7, r1
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	801a      	strh	r2, [r3, #0]
 801aa90:	1d7b      	adds	r3, r7, #5
 801aa92:	33ff      	adds	r3, #255	@ 0xff
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa98:	d925      	bls.n	801aae6 <USB_EPStartXfer+0xfe6>
 801aa9a:	1d7b      	adds	r3, r7, #5
 801aa9c:	33ff      	adds	r3, #255	@ 0xff
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	095b      	lsrs	r3, r3, #5
 801aaa2:	21dc      	movs	r1, #220	@ 0xdc
 801aaa4:	187a      	adds	r2, r7, r1
 801aaa6:	6013      	str	r3, [r2, #0]
 801aaa8:	1d7b      	adds	r3, r7, #5
 801aaaa:	33ff      	adds	r3, #255	@ 0xff
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	221f      	movs	r2, #31
 801aab0:	4013      	ands	r3, r2
 801aab2:	d104      	bne.n	801aabe <USB_EPStartXfer+0xfbe>
 801aab4:	187b      	adds	r3, r7, r1
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	3b01      	subs	r3, #1
 801aaba:	187a      	adds	r2, r7, r1
 801aabc:	6013      	str	r3, [r2, #0]
 801aabe:	21c8      	movs	r1, #200	@ 0xc8
 801aac0:	187b      	adds	r3, r7, r1
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	881b      	ldrh	r3, [r3, #0]
 801aac6:	b29a      	uxth	r2, r3
 801aac8:	23dc      	movs	r3, #220	@ 0xdc
 801aaca:	18fb      	adds	r3, r7, r3
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	b29b      	uxth	r3, r3
 801aad0:	029b      	lsls	r3, r3, #10
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	4313      	orrs	r3, r2
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	4a79      	ldr	r2, [pc, #484]	@ (801acc0 <USB_EPStartXfer+0x11c0>)
 801aada:	4313      	orrs	r3, r2
 801aadc:	b29a      	uxth	r2, r3
 801aade:	187b      	adds	r3, r7, r1
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	801a      	strh	r2, [r3, #0]
 801aae4:	e058      	b.n	801ab98 <USB_EPStartXfer+0x1098>
 801aae6:	1d7b      	adds	r3, r7, #5
 801aae8:	33ff      	adds	r3, #255	@ 0xff
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d10b      	bne.n	801ab08 <USB_EPStartXfer+0x1008>
 801aaf0:	21c8      	movs	r1, #200	@ 0xc8
 801aaf2:	187b      	adds	r3, r7, r1
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	881b      	ldrh	r3, [r3, #0]
 801aaf8:	b29b      	uxth	r3, r3
 801aafa:	4a71      	ldr	r2, [pc, #452]	@ (801acc0 <USB_EPStartXfer+0x11c0>)
 801aafc:	4313      	orrs	r3, r2
 801aafe:	b29a      	uxth	r2, r3
 801ab00:	187b      	adds	r3, r7, r1
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	801a      	strh	r2, [r3, #0]
 801ab06:	e047      	b.n	801ab98 <USB_EPStartXfer+0x1098>
 801ab08:	1d7b      	adds	r3, r7, #5
 801ab0a:	33ff      	adds	r3, #255	@ 0xff
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	085b      	lsrs	r3, r3, #1
 801ab10:	21dc      	movs	r1, #220	@ 0xdc
 801ab12:	187a      	adds	r2, r7, r1
 801ab14:	6013      	str	r3, [r2, #0]
 801ab16:	1d7b      	adds	r3, r7, #5
 801ab18:	33ff      	adds	r3, #255	@ 0xff
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	2201      	movs	r2, #1
 801ab1e:	4013      	ands	r3, r2
 801ab20:	d004      	beq.n	801ab2c <USB_EPStartXfer+0x102c>
 801ab22:	187b      	adds	r3, r7, r1
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	3301      	adds	r3, #1
 801ab28:	187a      	adds	r2, r7, r1
 801ab2a:	6013      	str	r3, [r2, #0]
 801ab2c:	21c8      	movs	r1, #200	@ 0xc8
 801ab2e:	187b      	adds	r3, r7, r1
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	881b      	ldrh	r3, [r3, #0]
 801ab34:	b29a      	uxth	r2, r3
 801ab36:	23dc      	movs	r3, #220	@ 0xdc
 801ab38:	18fb      	adds	r3, r7, r3
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	b29b      	uxth	r3, r3
 801ab3e:	029b      	lsls	r3, r3, #10
 801ab40:	b29b      	uxth	r3, r3
 801ab42:	4313      	orrs	r3, r2
 801ab44:	b29a      	uxth	r2, r3
 801ab46:	187b      	adds	r3, r7, r1
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	801a      	strh	r2, [r3, #0]
 801ab4c:	e024      	b.n	801ab98 <USB_EPStartXfer+0x1098>
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	785b      	ldrb	r3, [r3, #1]
 801ab52:	2b01      	cmp	r3, #1
 801ab54:	d120      	bne.n	801ab98 <USB_EPStartXfer+0x1098>
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	21d4      	movs	r1, #212	@ 0xd4
 801ab5a:	187a      	adds	r2, r7, r1
 801ab5c:	6013      	str	r3, [r2, #0]
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	2250      	movs	r2, #80	@ 0x50
 801ab62:	5a9b      	ldrh	r3, [r3, r2]
 801ab64:	b29b      	uxth	r3, r3
 801ab66:	001a      	movs	r2, r3
 801ab68:	187b      	adds	r3, r7, r1
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	189b      	adds	r3, r3, r2
 801ab6e:	187a      	adds	r2, r7, r1
 801ab70:	6013      	str	r3, [r2, #0]
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	781b      	ldrb	r3, [r3, #0]
 801ab76:	00da      	lsls	r2, r3, #3
 801ab78:	187b      	adds	r3, r7, r1
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	18d3      	adds	r3, r2, r3
 801ab7e:	4a4f      	ldr	r2, [pc, #316]	@ (801acbc <USB_EPStartXfer+0x11bc>)
 801ab80:	4694      	mov	ip, r2
 801ab82:	4463      	add	r3, ip
 801ab84:	21d0      	movs	r1, #208	@ 0xd0
 801ab86:	187a      	adds	r2, r7, r1
 801ab88:	6013      	str	r3, [r2, #0]
 801ab8a:	1d7b      	adds	r3, r7, #5
 801ab8c:	33ff      	adds	r3, #255	@ 0xff
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	b29a      	uxth	r2, r3
 801ab92:	187b      	adds	r3, r7, r1
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	801a      	strh	r2, [r3, #0]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	22c4      	movs	r2, #196	@ 0xc4
 801ab9c:	18ba      	adds	r2, r7, r2
 801ab9e:	6013      	str	r3, [r2, #0]
 801aba0:	683b      	ldr	r3, [r7, #0]
 801aba2:	785b      	ldrb	r3, [r3, #1]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d000      	beq.n	801abaa <USB_EPStartXfer+0x10aa>
 801aba8:	e08c      	b.n	801acc4 <USB_EPStartXfer+0x11c4>
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	21bc      	movs	r1, #188	@ 0xbc
 801abae:	187a      	adds	r2, r7, r1
 801abb0:	6013      	str	r3, [r2, #0]
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	2250      	movs	r2, #80	@ 0x50
 801abb6:	5a9b      	ldrh	r3, [r3, r2]
 801abb8:	b29b      	uxth	r3, r3
 801abba:	001a      	movs	r2, r3
 801abbc:	187b      	adds	r3, r7, r1
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	189b      	adds	r3, r3, r2
 801abc2:	187a      	adds	r2, r7, r1
 801abc4:	6013      	str	r3, [r2, #0]
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	781b      	ldrb	r3, [r3, #0]
 801abca:	00da      	lsls	r2, r3, #3
 801abcc:	187b      	adds	r3, r7, r1
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	18d3      	adds	r3, r2, r3
 801abd2:	4a37      	ldr	r2, [pc, #220]	@ (801acb0 <USB_EPStartXfer+0x11b0>)
 801abd4:	4694      	mov	ip, r2
 801abd6:	4463      	add	r3, ip
 801abd8:	21b8      	movs	r1, #184	@ 0xb8
 801abda:	187a      	adds	r2, r7, r1
 801abdc:	6013      	str	r3, [r2, #0]
 801abde:	187b      	adds	r3, r7, r1
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	881b      	ldrh	r3, [r3, #0]
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	059b      	lsls	r3, r3, #22
 801abe8:	0d9b      	lsrs	r3, r3, #22
 801abea:	b29a      	uxth	r2, r3
 801abec:	187b      	adds	r3, r7, r1
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	801a      	strh	r2, [r3, #0]
 801abf2:	1d7b      	adds	r3, r7, #5
 801abf4:	33ff      	adds	r3, #255	@ 0xff
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	2b3e      	cmp	r3, #62	@ 0x3e
 801abfa:	d925      	bls.n	801ac48 <USB_EPStartXfer+0x1148>
 801abfc:	1d7b      	adds	r3, r7, #5
 801abfe:	33ff      	adds	r3, #255	@ 0xff
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	095b      	lsrs	r3, r3, #5
 801ac04:	21d8      	movs	r1, #216	@ 0xd8
 801ac06:	187a      	adds	r2, r7, r1
 801ac08:	6013      	str	r3, [r2, #0]
 801ac0a:	1d7b      	adds	r3, r7, #5
 801ac0c:	33ff      	adds	r3, #255	@ 0xff
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	221f      	movs	r2, #31
 801ac12:	4013      	ands	r3, r2
 801ac14:	d104      	bne.n	801ac20 <USB_EPStartXfer+0x1120>
 801ac16:	187b      	adds	r3, r7, r1
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	3b01      	subs	r3, #1
 801ac1c:	187a      	adds	r2, r7, r1
 801ac1e:	6013      	str	r3, [r2, #0]
 801ac20:	21b8      	movs	r1, #184	@ 0xb8
 801ac22:	187b      	adds	r3, r7, r1
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	881b      	ldrh	r3, [r3, #0]
 801ac28:	b29a      	uxth	r2, r3
 801ac2a:	23d8      	movs	r3, #216	@ 0xd8
 801ac2c:	18fb      	adds	r3, r7, r3
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	b29b      	uxth	r3, r3
 801ac32:	029b      	lsls	r3, r3, #10
 801ac34:	b29b      	uxth	r3, r3
 801ac36:	4313      	orrs	r3, r2
 801ac38:	b29b      	uxth	r3, r3
 801ac3a:	4a21      	ldr	r2, [pc, #132]	@ (801acc0 <USB_EPStartXfer+0x11c0>)
 801ac3c:	4313      	orrs	r3, r2
 801ac3e:	b29a      	uxth	r2, r3
 801ac40:	187b      	adds	r3, r7, r1
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	801a      	strh	r2, [r3, #0]
 801ac46:	e062      	b.n	801ad0e <USB_EPStartXfer+0x120e>
 801ac48:	1d7b      	adds	r3, r7, #5
 801ac4a:	33ff      	adds	r3, #255	@ 0xff
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d10b      	bne.n	801ac6a <USB_EPStartXfer+0x116a>
 801ac52:	21b8      	movs	r1, #184	@ 0xb8
 801ac54:	187b      	adds	r3, r7, r1
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	881b      	ldrh	r3, [r3, #0]
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	4a18      	ldr	r2, [pc, #96]	@ (801acc0 <USB_EPStartXfer+0x11c0>)
 801ac5e:	4313      	orrs	r3, r2
 801ac60:	b29a      	uxth	r2, r3
 801ac62:	187b      	adds	r3, r7, r1
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	801a      	strh	r2, [r3, #0]
 801ac68:	e051      	b.n	801ad0e <USB_EPStartXfer+0x120e>
 801ac6a:	1d7b      	adds	r3, r7, #5
 801ac6c:	33ff      	adds	r3, #255	@ 0xff
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	085b      	lsrs	r3, r3, #1
 801ac72:	21d8      	movs	r1, #216	@ 0xd8
 801ac74:	187a      	adds	r2, r7, r1
 801ac76:	6013      	str	r3, [r2, #0]
 801ac78:	1d7b      	adds	r3, r7, #5
 801ac7a:	33ff      	adds	r3, #255	@ 0xff
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	2201      	movs	r2, #1
 801ac80:	4013      	ands	r3, r2
 801ac82:	d004      	beq.n	801ac8e <USB_EPStartXfer+0x118e>
 801ac84:	187b      	adds	r3, r7, r1
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	3301      	adds	r3, #1
 801ac8a:	187a      	adds	r2, r7, r1
 801ac8c:	6013      	str	r3, [r2, #0]
 801ac8e:	21b8      	movs	r1, #184	@ 0xb8
 801ac90:	187b      	adds	r3, r7, r1
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	881b      	ldrh	r3, [r3, #0]
 801ac96:	b29a      	uxth	r2, r3
 801ac98:	23d8      	movs	r3, #216	@ 0xd8
 801ac9a:	18fb      	adds	r3, r7, r3
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	b29b      	uxth	r3, r3
 801aca0:	029b      	lsls	r3, r3, #10
 801aca2:	b29b      	uxth	r3, r3
 801aca4:	4313      	orrs	r3, r2
 801aca6:	b29a      	uxth	r2, r3
 801aca8:	187b      	adds	r3, r7, r1
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	801a      	strh	r2, [r3, #0]
 801acae:	e02e      	b.n	801ad0e <USB_EPStartXfer+0x120e>
 801acb0:	00000406 	.word	0x00000406
 801acb4:	ffff8f8f 	.word	0xffff8f8f
 801acb8:	ffff80c0 	.word	0xffff80c0
 801acbc:	00000402 	.word	0x00000402
 801acc0:	ffff8000 	.word	0xffff8000
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	785b      	ldrb	r3, [r3, #1]
 801acc8:	2b01      	cmp	r3, #1
 801acca:	d120      	bne.n	801ad0e <USB_EPStartXfer+0x120e>
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	2250      	movs	r2, #80	@ 0x50
 801acd0:	5a9b      	ldrh	r3, [r3, r2]
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	001a      	movs	r2, r3
 801acd6:	21c4      	movs	r1, #196	@ 0xc4
 801acd8:	187b      	adds	r3, r7, r1
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	189b      	adds	r3, r3, r2
 801acde:	187a      	adds	r2, r7, r1
 801ace0:	6013      	str	r3, [r2, #0]
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	781b      	ldrb	r3, [r3, #0]
 801ace6:	00da      	lsls	r2, r3, #3
 801ace8:	187b      	adds	r3, r7, r1
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	18d3      	adds	r3, r2, r3
 801acee:	4a1d      	ldr	r2, [pc, #116]	@ (801ad64 <USB_EPStartXfer+0x1264>)
 801acf0:	4694      	mov	ip, r2
 801acf2:	4463      	add	r3, ip
 801acf4:	21c0      	movs	r1, #192	@ 0xc0
 801acf6:	187a      	adds	r2, r7, r1
 801acf8:	6013      	str	r3, [r2, #0]
 801acfa:	1d7b      	adds	r3, r7, #5
 801acfc:	33ff      	adds	r3, #255	@ 0xff
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	b29a      	uxth	r2, r3
 801ad02:	187b      	adds	r3, r7, r1
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	801a      	strh	r2, [r3, #0]
 801ad08:	e001      	b.n	801ad0e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	e025      	b.n	801ad5a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ad0e:	687a      	ldr	r2, [r7, #4]
 801ad10:	683b      	ldr	r3, [r7, #0]
 801ad12:	781b      	ldrb	r3, [r3, #0]
 801ad14:	009b      	lsls	r3, r3, #2
 801ad16:	18d3      	adds	r3, r2, r3
 801ad18:	881b      	ldrh	r3, [r3, #0]
 801ad1a:	b29a      	uxth	r2, r3
 801ad1c:	208a      	movs	r0, #138	@ 0x8a
 801ad1e:	183b      	adds	r3, r7, r0
 801ad20:	4911      	ldr	r1, [pc, #68]	@ (801ad68 <USB_EPStartXfer+0x1268>)
 801ad22:	400a      	ands	r2, r1
 801ad24:	801a      	strh	r2, [r3, #0]
 801ad26:	183b      	adds	r3, r7, r0
 801ad28:	183a      	adds	r2, r7, r0
 801ad2a:	8812      	ldrh	r2, [r2, #0]
 801ad2c:	2180      	movs	r1, #128	@ 0x80
 801ad2e:	0149      	lsls	r1, r1, #5
 801ad30:	404a      	eors	r2, r1
 801ad32:	801a      	strh	r2, [r3, #0]
 801ad34:	183b      	adds	r3, r7, r0
 801ad36:	183a      	adds	r2, r7, r0
 801ad38:	8812      	ldrh	r2, [r2, #0]
 801ad3a:	2180      	movs	r1, #128	@ 0x80
 801ad3c:	0189      	lsls	r1, r1, #6
 801ad3e:	404a      	eors	r2, r1
 801ad40:	801a      	strh	r2, [r3, #0]
 801ad42:	687a      	ldr	r2, [r7, #4]
 801ad44:	683b      	ldr	r3, [r7, #0]
 801ad46:	781b      	ldrb	r3, [r3, #0]
 801ad48:	009b      	lsls	r3, r3, #2
 801ad4a:	18d3      	adds	r3, r2, r3
 801ad4c:	183a      	adds	r2, r7, r0
 801ad4e:	8812      	ldrh	r2, [r2, #0]
 801ad50:	4906      	ldr	r1, [pc, #24]	@ (801ad6c <USB_EPStartXfer+0x126c>)
 801ad52:	430a      	orrs	r2, r1
 801ad54:	b292      	uxth	r2, r2
 801ad56:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ad58:	2300      	movs	r3, #0
}
 801ad5a:	0018      	movs	r0, r3
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	b043      	add	sp, #268	@ 0x10c
 801ad60:	bd90      	pop	{r4, r7, pc}
 801ad62:	46c0      	nop			@ (mov r8, r8)
 801ad64:	00000406 	.word	0x00000406
 801ad68:	ffffbf8f 	.word	0xffffbf8f
 801ad6c:	ffff8080 	.word	0xffff8080

0801ad70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b084      	sub	sp, #16
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
 801ad78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801ad7a:	683b      	ldr	r3, [r7, #0]
 801ad7c:	785b      	ldrb	r3, [r3, #1]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d01d      	beq.n	801adbe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801ad82:	687a      	ldr	r2, [r7, #4]
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	009b      	lsls	r3, r3, #2
 801ad8a:	18d3      	adds	r3, r2, r3
 801ad8c:	881b      	ldrh	r3, [r3, #0]
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	200c      	movs	r0, #12
 801ad92:	183b      	adds	r3, r7, r0
 801ad94:	491b      	ldr	r1, [pc, #108]	@ (801ae04 <USB_EPSetStall+0x94>)
 801ad96:	400a      	ands	r2, r1
 801ad98:	801a      	strh	r2, [r3, #0]
 801ad9a:	183b      	adds	r3, r7, r0
 801ad9c:	183a      	adds	r2, r7, r0
 801ad9e:	8812      	ldrh	r2, [r2, #0]
 801ada0:	2110      	movs	r1, #16
 801ada2:	404a      	eors	r2, r1
 801ada4:	801a      	strh	r2, [r3, #0]
 801ada6:	687a      	ldr	r2, [r7, #4]
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	781b      	ldrb	r3, [r3, #0]
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	18d3      	adds	r3, r2, r3
 801adb0:	183a      	adds	r2, r7, r0
 801adb2:	8812      	ldrh	r2, [r2, #0]
 801adb4:	4914      	ldr	r1, [pc, #80]	@ (801ae08 <USB_EPSetStall+0x98>)
 801adb6:	430a      	orrs	r2, r1
 801adb8:	b292      	uxth	r2, r2
 801adba:	801a      	strh	r2, [r3, #0]
 801adbc:	e01d      	b.n	801adfa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801adbe:	687a      	ldr	r2, [r7, #4]
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	781b      	ldrb	r3, [r3, #0]
 801adc4:	009b      	lsls	r3, r3, #2
 801adc6:	18d3      	adds	r3, r2, r3
 801adc8:	881b      	ldrh	r3, [r3, #0]
 801adca:	b29a      	uxth	r2, r3
 801adcc:	200e      	movs	r0, #14
 801adce:	183b      	adds	r3, r7, r0
 801add0:	490e      	ldr	r1, [pc, #56]	@ (801ae0c <USB_EPSetStall+0x9c>)
 801add2:	400a      	ands	r2, r1
 801add4:	801a      	strh	r2, [r3, #0]
 801add6:	183b      	adds	r3, r7, r0
 801add8:	183a      	adds	r2, r7, r0
 801adda:	8812      	ldrh	r2, [r2, #0]
 801addc:	2180      	movs	r1, #128	@ 0x80
 801adde:	0149      	lsls	r1, r1, #5
 801ade0:	404a      	eors	r2, r1
 801ade2:	801a      	strh	r2, [r3, #0]
 801ade4:	687a      	ldr	r2, [r7, #4]
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	781b      	ldrb	r3, [r3, #0]
 801adea:	009b      	lsls	r3, r3, #2
 801adec:	18d3      	adds	r3, r2, r3
 801adee:	183a      	adds	r2, r7, r0
 801adf0:	8812      	ldrh	r2, [r2, #0]
 801adf2:	4905      	ldr	r1, [pc, #20]	@ (801ae08 <USB_EPSetStall+0x98>)
 801adf4:	430a      	orrs	r2, r1
 801adf6:	b292      	uxth	r2, r2
 801adf8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801adfa:	2300      	movs	r3, #0
}
 801adfc:	0018      	movs	r0, r3
 801adfe:	46bd      	mov	sp, r7
 801ae00:	b004      	add	sp, #16
 801ae02:	bd80      	pop	{r7, pc}
 801ae04:	ffff8fbf 	.word	0xffff8fbf
 801ae08:	ffff8080 	.word	0xffff8080
 801ae0c:	ffffbf8f 	.word	0xffffbf8f

0801ae10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b086      	sub	sp, #24
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	6078      	str	r0, [r7, #4]
 801ae18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	7b1b      	ldrb	r3, [r3, #12]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d000      	beq.n	801ae24 <USB_EPClearStall+0x14>
 801ae22:	e095      	b.n	801af50 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	785b      	ldrb	r3, [r3, #1]
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d046      	beq.n	801aeba <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	683b      	ldr	r3, [r7, #0]
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	18d2      	adds	r2, r2, r3
 801ae36:	2110      	movs	r1, #16
 801ae38:	187b      	adds	r3, r7, r1
 801ae3a:	8812      	ldrh	r2, [r2, #0]
 801ae3c:	801a      	strh	r2, [r3, #0]
 801ae3e:	187b      	adds	r3, r7, r1
 801ae40:	881b      	ldrh	r3, [r3, #0]
 801ae42:	2240      	movs	r2, #64	@ 0x40
 801ae44:	4013      	ands	r3, r2
 801ae46:	d016      	beq.n	801ae76 <USB_EPClearStall+0x66>
 801ae48:	687a      	ldr	r2, [r7, #4]
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	009b      	lsls	r3, r3, #2
 801ae50:	18d3      	adds	r3, r2, r3
 801ae52:	881b      	ldrh	r3, [r3, #0]
 801ae54:	b29a      	uxth	r2, r3
 801ae56:	200e      	movs	r0, #14
 801ae58:	183b      	adds	r3, r7, r0
 801ae5a:	4940      	ldr	r1, [pc, #256]	@ (801af5c <USB_EPClearStall+0x14c>)
 801ae5c:	400a      	ands	r2, r1
 801ae5e:	801a      	strh	r2, [r3, #0]
 801ae60:	687a      	ldr	r2, [r7, #4]
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	009b      	lsls	r3, r3, #2
 801ae68:	18d3      	adds	r3, r2, r3
 801ae6a:	183a      	adds	r2, r7, r0
 801ae6c:	8812      	ldrh	r2, [r2, #0]
 801ae6e:	493c      	ldr	r1, [pc, #240]	@ (801af60 <USB_EPClearStall+0x150>)
 801ae70:	430a      	orrs	r2, r1
 801ae72:	b292      	uxth	r2, r2
 801ae74:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ae76:	683b      	ldr	r3, [r7, #0]
 801ae78:	78db      	ldrb	r3, [r3, #3]
 801ae7a:	2b01      	cmp	r3, #1
 801ae7c:	d068      	beq.n	801af50 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ae7e:	687a      	ldr	r2, [r7, #4]
 801ae80:	683b      	ldr	r3, [r7, #0]
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	009b      	lsls	r3, r3, #2
 801ae86:	18d3      	adds	r3, r2, r3
 801ae88:	881b      	ldrh	r3, [r3, #0]
 801ae8a:	b29a      	uxth	r2, r3
 801ae8c:	200c      	movs	r0, #12
 801ae8e:	183b      	adds	r3, r7, r0
 801ae90:	4934      	ldr	r1, [pc, #208]	@ (801af64 <USB_EPClearStall+0x154>)
 801ae92:	400a      	ands	r2, r1
 801ae94:	801a      	strh	r2, [r3, #0]
 801ae96:	183b      	adds	r3, r7, r0
 801ae98:	183a      	adds	r2, r7, r0
 801ae9a:	8812      	ldrh	r2, [r2, #0]
 801ae9c:	2120      	movs	r1, #32
 801ae9e:	404a      	eors	r2, r1
 801aea0:	801a      	strh	r2, [r3, #0]
 801aea2:	687a      	ldr	r2, [r7, #4]
 801aea4:	683b      	ldr	r3, [r7, #0]
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	009b      	lsls	r3, r3, #2
 801aeaa:	18d3      	adds	r3, r2, r3
 801aeac:	183a      	adds	r2, r7, r0
 801aeae:	8812      	ldrh	r2, [r2, #0]
 801aeb0:	492d      	ldr	r1, [pc, #180]	@ (801af68 <USB_EPClearStall+0x158>)
 801aeb2:	430a      	orrs	r2, r1
 801aeb4:	b292      	uxth	r2, r2
 801aeb6:	801a      	strh	r2, [r3, #0]
 801aeb8:	e04a      	b.n	801af50 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801aeba:	687a      	ldr	r2, [r7, #4]
 801aebc:	683b      	ldr	r3, [r7, #0]
 801aebe:	781b      	ldrb	r3, [r3, #0]
 801aec0:	009b      	lsls	r3, r3, #2
 801aec2:	18d2      	adds	r2, r2, r3
 801aec4:	2116      	movs	r1, #22
 801aec6:	187b      	adds	r3, r7, r1
 801aec8:	8812      	ldrh	r2, [r2, #0]
 801aeca:	801a      	strh	r2, [r3, #0]
 801aecc:	187b      	adds	r3, r7, r1
 801aece:	881a      	ldrh	r2, [r3, #0]
 801aed0:	2380      	movs	r3, #128	@ 0x80
 801aed2:	01db      	lsls	r3, r3, #7
 801aed4:	4013      	ands	r3, r2
 801aed6:	d016      	beq.n	801af06 <USB_EPClearStall+0xf6>
 801aed8:	687a      	ldr	r2, [r7, #4]
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	781b      	ldrb	r3, [r3, #0]
 801aede:	009b      	lsls	r3, r3, #2
 801aee0:	18d3      	adds	r3, r2, r3
 801aee2:	881b      	ldrh	r3, [r3, #0]
 801aee4:	b29a      	uxth	r2, r3
 801aee6:	2014      	movs	r0, #20
 801aee8:	183b      	adds	r3, r7, r0
 801aeea:	491c      	ldr	r1, [pc, #112]	@ (801af5c <USB_EPClearStall+0x14c>)
 801aeec:	400a      	ands	r2, r1
 801aeee:	801a      	strh	r2, [r3, #0]
 801aef0:	687a      	ldr	r2, [r7, #4]
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	781b      	ldrb	r3, [r3, #0]
 801aef6:	009b      	lsls	r3, r3, #2
 801aef8:	18d3      	adds	r3, r2, r3
 801aefa:	183a      	adds	r2, r7, r0
 801aefc:	8812      	ldrh	r2, [r2, #0]
 801aefe:	491b      	ldr	r1, [pc, #108]	@ (801af6c <USB_EPClearStall+0x15c>)
 801af00:	430a      	orrs	r2, r1
 801af02:	b292      	uxth	r2, r2
 801af04:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801af06:	687a      	ldr	r2, [r7, #4]
 801af08:	683b      	ldr	r3, [r7, #0]
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	009b      	lsls	r3, r3, #2
 801af0e:	18d3      	adds	r3, r2, r3
 801af10:	881b      	ldrh	r3, [r3, #0]
 801af12:	b29a      	uxth	r2, r3
 801af14:	2012      	movs	r0, #18
 801af16:	183b      	adds	r3, r7, r0
 801af18:	4915      	ldr	r1, [pc, #84]	@ (801af70 <USB_EPClearStall+0x160>)
 801af1a:	400a      	ands	r2, r1
 801af1c:	801a      	strh	r2, [r3, #0]
 801af1e:	183b      	adds	r3, r7, r0
 801af20:	183a      	adds	r2, r7, r0
 801af22:	8812      	ldrh	r2, [r2, #0]
 801af24:	2180      	movs	r1, #128	@ 0x80
 801af26:	0149      	lsls	r1, r1, #5
 801af28:	404a      	eors	r2, r1
 801af2a:	801a      	strh	r2, [r3, #0]
 801af2c:	183b      	adds	r3, r7, r0
 801af2e:	183a      	adds	r2, r7, r0
 801af30:	8812      	ldrh	r2, [r2, #0]
 801af32:	2180      	movs	r1, #128	@ 0x80
 801af34:	0189      	lsls	r1, r1, #6
 801af36:	404a      	eors	r2, r1
 801af38:	801a      	strh	r2, [r3, #0]
 801af3a:	687a      	ldr	r2, [r7, #4]
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	781b      	ldrb	r3, [r3, #0]
 801af40:	009b      	lsls	r3, r3, #2
 801af42:	18d3      	adds	r3, r2, r3
 801af44:	183a      	adds	r2, r7, r0
 801af46:	8812      	ldrh	r2, [r2, #0]
 801af48:	4907      	ldr	r1, [pc, #28]	@ (801af68 <USB_EPClearStall+0x158>)
 801af4a:	430a      	orrs	r2, r1
 801af4c:	b292      	uxth	r2, r2
 801af4e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801af50:	2300      	movs	r3, #0
}
 801af52:	0018      	movs	r0, r3
 801af54:	46bd      	mov	sp, r7
 801af56:	b006      	add	sp, #24
 801af58:	bd80      	pop	{r7, pc}
 801af5a:	46c0      	nop			@ (mov r8, r8)
 801af5c:	ffff8f8f 	.word	0xffff8f8f
 801af60:	ffff80c0 	.word	0xffff80c0
 801af64:	ffff8fbf 	.word	0xffff8fbf
 801af68:	ffff8080 	.word	0xffff8080
 801af6c:	ffffc080 	.word	0xffffc080
 801af70:	ffffbf8f 	.word	0xffffbf8f

0801af74 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	000a      	movs	r2, r1
 801af7e:	1cfb      	adds	r3, r7, #3
 801af80:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801af82:	1cfb      	adds	r3, r7, #3
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d103      	bne.n	801af92 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	224c      	movs	r2, #76	@ 0x4c
 801af8e:	2180      	movs	r1, #128	@ 0x80
 801af90:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801af92:	2300      	movs	r3, #0
}
 801af94:	0018      	movs	r0, r3
 801af96:	46bd      	mov	sp, r7
 801af98:	b002      	add	sp, #8
 801af9a:	bd80      	pop	{r7, pc}

0801af9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b082      	sub	sp, #8
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	2258      	movs	r2, #88	@ 0x58
 801afa8:	5a9b      	ldrh	r3, [r3, r2]
 801afaa:	b29b      	uxth	r3, r3
 801afac:	4a05      	ldr	r2, [pc, #20]	@ (801afc4 <USB_DevConnect+0x28>)
 801afae:	4313      	orrs	r3, r2
 801afb0:	b299      	uxth	r1, r3
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	2258      	movs	r2, #88	@ 0x58
 801afb6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801afb8:	2300      	movs	r3, #0
}
 801afba:	0018      	movs	r0, r3
 801afbc:	46bd      	mov	sp, r7
 801afbe:	b002      	add	sp, #8
 801afc0:	bd80      	pop	{r7, pc}
 801afc2:	46c0      	nop			@ (mov r8, r8)
 801afc4:	ffff8000 	.word	0xffff8000

0801afc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b084      	sub	sp, #16
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2244      	movs	r2, #68	@ 0x44
 801afd4:	5a9b      	ldrh	r3, [r3, r2]
 801afd6:	b29b      	uxth	r3, r3
 801afd8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801afda:	68fb      	ldr	r3, [r7, #12]
}
 801afdc:	0018      	movs	r0, r3
 801afde:	46bd      	mov	sp, r7
 801afe0:	b004      	add	sp, #16
 801afe2:	bd80      	pop	{r7, pc}

0801afe4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b08a      	sub	sp, #40	@ 0x28
 801afe8:	af00      	add	r7, sp, #0
 801afea:	60f8      	str	r0, [r7, #12]
 801afec:	60b9      	str	r1, [r7, #8]
 801afee:	0019      	movs	r1, r3
 801aff0:	1dbb      	adds	r3, r7, #6
 801aff2:	801a      	strh	r2, [r3, #0]
 801aff4:	1d3b      	adds	r3, r7, #4
 801aff6:	1c0a      	adds	r2, r1, #0
 801aff8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801affa:	1d3b      	adds	r3, r7, #4
 801affc:	881b      	ldrh	r3, [r3, #0]
 801affe:	3301      	adds	r3, #1
 801b000:	085b      	lsrs	r3, r3, #1
 801b002:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b00c:	1dbb      	adds	r3, r7, #6
 801b00e:	881a      	ldrh	r2, [r3, #0]
 801b010:	697b      	ldr	r3, [r7, #20]
 801b012:	18d3      	adds	r3, r2, r3
 801b014:	2280      	movs	r2, #128	@ 0x80
 801b016:	00d2      	lsls	r2, r2, #3
 801b018:	4694      	mov	ip, r2
 801b01a:	4463      	add	r3, ip
 801b01c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b01e:	69bb      	ldr	r3, [r7, #24]
 801b020:	627b      	str	r3, [r7, #36]	@ 0x24
 801b022:	e020      	b.n	801b066 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b024:	69fb      	ldr	r3, [r7, #28]
 801b026:	781a      	ldrb	r2, [r3, #0]
 801b028:	2112      	movs	r1, #18
 801b02a:	187b      	adds	r3, r7, r1
 801b02c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b02e:	69fb      	ldr	r3, [r7, #28]
 801b030:	3301      	adds	r3, #1
 801b032:	781b      	ldrb	r3, [r3, #0]
 801b034:	021b      	lsls	r3, r3, #8
 801b036:	b21a      	sxth	r2, r3
 801b038:	187b      	adds	r3, r7, r1
 801b03a:	2000      	movs	r0, #0
 801b03c:	5e1b      	ldrsh	r3, [r3, r0]
 801b03e:	4313      	orrs	r3, r2
 801b040:	b21a      	sxth	r2, r3
 801b042:	187b      	adds	r3, r7, r1
 801b044:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b046:	6a3b      	ldr	r3, [r7, #32]
 801b048:	187a      	adds	r2, r7, r1
 801b04a:	8812      	ldrh	r2, [r2, #0]
 801b04c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b04e:	6a3b      	ldr	r3, [r7, #32]
 801b050:	3302      	adds	r3, #2
 801b052:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b054:	69fb      	ldr	r3, [r7, #28]
 801b056:	3301      	adds	r3, #1
 801b058:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b05a:	69fb      	ldr	r3, [r7, #28]
 801b05c:	3301      	adds	r3, #1
 801b05e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b062:	3b01      	subs	r3, #1
 801b064:	627b      	str	r3, [r7, #36]	@ 0x24
 801b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d1db      	bne.n	801b024 <USB_WritePMA+0x40>
  }
}
 801b06c:	46c0      	nop			@ (mov r8, r8)
 801b06e:	46c0      	nop			@ (mov r8, r8)
 801b070:	46bd      	mov	sp, r7
 801b072:	b00a      	add	sp, #40	@ 0x28
 801b074:	bd80      	pop	{r7, pc}

0801b076 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b076:	b580      	push	{r7, lr}
 801b078:	b08a      	sub	sp, #40	@ 0x28
 801b07a:	af00      	add	r7, sp, #0
 801b07c:	60f8      	str	r0, [r7, #12]
 801b07e:	60b9      	str	r1, [r7, #8]
 801b080:	0019      	movs	r1, r3
 801b082:	1dbb      	adds	r3, r7, #6
 801b084:	801a      	strh	r2, [r3, #0]
 801b086:	1d3b      	adds	r3, r7, #4
 801b088:	1c0a      	adds	r2, r1, #0
 801b08a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b08c:	1d3b      	adds	r3, r7, #4
 801b08e:	881b      	ldrh	r3, [r3, #0]
 801b090:	085b      	lsrs	r3, r3, #1
 801b092:	b29b      	uxth	r3, r3
 801b094:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b09a:	68bb      	ldr	r3, [r7, #8]
 801b09c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b09e:	1dbb      	adds	r3, r7, #6
 801b0a0:	881a      	ldrh	r2, [r3, #0]
 801b0a2:	697b      	ldr	r3, [r7, #20]
 801b0a4:	18d3      	adds	r3, r2, r3
 801b0a6:	2280      	movs	r2, #128	@ 0x80
 801b0a8:	00d2      	lsls	r2, r2, #3
 801b0aa:	4694      	mov	ip, r2
 801b0ac:	4463      	add	r3, ip
 801b0ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b0b0:	69bb      	ldr	r3, [r7, #24]
 801b0b2:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0b4:	e018      	b.n	801b0e8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b0b6:	6a3b      	ldr	r3, [r7, #32]
 801b0b8:	881b      	ldrh	r3, [r3, #0]
 801b0ba:	b29b      	uxth	r3, r3
 801b0bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b0be:	6a3b      	ldr	r3, [r7, #32]
 801b0c0:	3302      	adds	r3, #2
 801b0c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	b2da      	uxtb	r2, r3
 801b0c8:	69fb      	ldr	r3, [r7, #28]
 801b0ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b0cc:	69fb      	ldr	r3, [r7, #28]
 801b0ce:	3301      	adds	r3, #1
 801b0d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b0d2:	693b      	ldr	r3, [r7, #16]
 801b0d4:	0a1b      	lsrs	r3, r3, #8
 801b0d6:	b2da      	uxtb	r2, r3
 801b0d8:	69fb      	ldr	r3, [r7, #28]
 801b0da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b0dc:	69fb      	ldr	r3, [r7, #28]
 801b0de:	3301      	adds	r3, #1
 801b0e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e4:	3b01      	subs	r3, #1
 801b0e6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d1e3      	bne.n	801b0b6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b0ee:	1d3b      	adds	r3, r7, #4
 801b0f0:	881b      	ldrh	r3, [r3, #0]
 801b0f2:	2201      	movs	r2, #1
 801b0f4:	4013      	ands	r3, r2
 801b0f6:	b29b      	uxth	r3, r3
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d007      	beq.n	801b10c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b0fc:	6a3b      	ldr	r3, [r7, #32]
 801b0fe:	881b      	ldrh	r3, [r3, #0]
 801b100:	b29b      	uxth	r3, r3
 801b102:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b104:	693b      	ldr	r3, [r7, #16]
 801b106:	b2da      	uxtb	r2, r3
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	701a      	strb	r2, [r3, #0]
  }
}
 801b10c:	46c0      	nop			@ (mov r8, r8)
 801b10e:	46bd      	mov	sp, r7
 801b110:	b00a      	add	sp, #40	@ 0x28
 801b112:	bd80      	pop	{r7, pc}

0801b114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b084      	sub	sp, #16
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
 801b11c:	000a      	movs	r2, r1
 801b11e:	1cfb      	adds	r3, r7, #3
 801b120:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b122:	230f      	movs	r3, #15
 801b124:	18fb      	adds	r3, r7, r3
 801b126:	2200      	movs	r2, #0
 801b128:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	7c1b      	ldrb	r3, [r3, #16]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d116      	bne.n	801b160 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b132:	2380      	movs	r3, #128	@ 0x80
 801b134:	009b      	lsls	r3, r3, #2
 801b136:	6878      	ldr	r0, [r7, #4]
 801b138:	2202      	movs	r2, #2
 801b13a:	2181      	movs	r1, #129	@ 0x81
 801b13c:	f002 f8eb 	bl	801d316 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	2201      	movs	r2, #1
 801b144:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b146:	2380      	movs	r3, #128	@ 0x80
 801b148:	009b      	lsls	r3, r3, #2
 801b14a:	6878      	ldr	r0, [r7, #4]
 801b14c:	2202      	movs	r2, #2
 801b14e:	2101      	movs	r1, #1
 801b150:	f002 f8e1 	bl	801d316 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b154:	687a      	ldr	r2, [r7, #4]
 801b156:	23b6      	movs	r3, #182	@ 0xb6
 801b158:	005b      	lsls	r3, r3, #1
 801b15a:	2101      	movs	r1, #1
 801b15c:	50d1      	str	r1, [r2, r3]
 801b15e:	e013      	b.n	801b188 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b160:	6878      	ldr	r0, [r7, #4]
 801b162:	2340      	movs	r3, #64	@ 0x40
 801b164:	2202      	movs	r2, #2
 801b166:	2181      	movs	r1, #129	@ 0x81
 801b168:	f002 f8d5 	bl	801d316 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	2201      	movs	r2, #1
 801b170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b172:	6878      	ldr	r0, [r7, #4]
 801b174:	2340      	movs	r3, #64	@ 0x40
 801b176:	2202      	movs	r2, #2
 801b178:	2101      	movs	r1, #1
 801b17a:	f002 f8cc 	bl	801d316 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b17e:	687a      	ldr	r2, [r7, #4]
 801b180:	23b6      	movs	r3, #182	@ 0xb6
 801b182:	005b      	lsls	r3, r3, #1
 801b184:	2101      	movs	r1, #1
 801b186:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b188:	6878      	ldr	r0, [r7, #4]
 801b18a:	2308      	movs	r3, #8
 801b18c:	2203      	movs	r2, #3
 801b18e:	2182      	movs	r1, #130	@ 0x82
 801b190:	f002 f8c1 	bl	801d316 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	2201      	movs	r2, #1
 801b198:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b19a:	2387      	movs	r3, #135	@ 0x87
 801b19c:	009b      	lsls	r3, r3, #2
 801b19e:	0018      	movs	r0, r3
 801b1a0:	f002 fa52 	bl	801d648 <USBD_static_malloc>
 801b1a4:	0001      	movs	r1, r0
 801b1a6:	687a      	ldr	r2, [r7, #4]
 801b1a8:	23ae      	movs	r3, #174	@ 0xae
 801b1aa:	009b      	lsls	r3, r3, #2
 801b1ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b1ae:	687a      	ldr	r2, [r7, #4]
 801b1b0:	23ae      	movs	r3, #174	@ 0xae
 801b1b2:	009b      	lsls	r3, r3, #2
 801b1b4:	58d3      	ldr	r3, [r2, r3]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d104      	bne.n	801b1c4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b1ba:	230f      	movs	r3, #15
 801b1bc:	18fb      	adds	r3, r7, r3
 801b1be:	2201      	movs	r2, #1
 801b1c0:	701a      	strb	r2, [r3, #0]
 801b1c2:	e02c      	b.n	801b21e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b1c4:	687a      	ldr	r2, [r7, #4]
 801b1c6:	23ae      	movs	r3, #174	@ 0xae
 801b1c8:	009b      	lsls	r3, r3, #2
 801b1ca:	58d3      	ldr	r3, [r2, r3]
 801b1cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b1ce:	687a      	ldr	r2, [r7, #4]
 801b1d0:	23af      	movs	r3, #175	@ 0xaf
 801b1d2:	009b      	lsls	r3, r3, #2
 801b1d4:	58d3      	ldr	r3, [r2, r3]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b1da:	68ba      	ldr	r2, [r7, #8]
 801b1dc:	2385      	movs	r3, #133	@ 0x85
 801b1de:	009b      	lsls	r3, r3, #2
 801b1e0:	2100      	movs	r1, #0
 801b1e2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b1e4:	68ba      	ldr	r2, [r7, #8]
 801b1e6:	2386      	movs	r3, #134	@ 0x86
 801b1e8:	009b      	lsls	r3, r3, #2
 801b1ea:	2100      	movs	r1, #0
 801b1ec:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	7c1b      	ldrb	r3, [r3, #16]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d10a      	bne.n	801b20c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b1f6:	68ba      	ldr	r2, [r7, #8]
 801b1f8:	2381      	movs	r3, #129	@ 0x81
 801b1fa:	009b      	lsls	r3, r3, #2
 801b1fc:	58d2      	ldr	r2, [r2, r3]
 801b1fe:	2380      	movs	r3, #128	@ 0x80
 801b200:	009b      	lsls	r3, r3, #2
 801b202:	6878      	ldr	r0, [r7, #4]
 801b204:	2101      	movs	r1, #1
 801b206:	f002 f9d1 	bl	801d5ac <USBD_LL_PrepareReceive>
 801b20a:	e008      	b.n	801b21e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b20c:	68ba      	ldr	r2, [r7, #8]
 801b20e:	2381      	movs	r3, #129	@ 0x81
 801b210:	009b      	lsls	r3, r3, #2
 801b212:	58d2      	ldr	r2, [r2, r3]
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	2340      	movs	r3, #64	@ 0x40
 801b218:	2101      	movs	r1, #1
 801b21a:	f002 f9c7 	bl	801d5ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b21e:	230f      	movs	r3, #15
 801b220:	18fb      	adds	r3, r7, r3
 801b222:	781b      	ldrb	r3, [r3, #0]
}
 801b224:	0018      	movs	r0, r3
 801b226:	46bd      	mov	sp, r7
 801b228:	b004      	add	sp, #16
 801b22a:	bd80      	pop	{r7, pc}

0801b22c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b084      	sub	sp, #16
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	000a      	movs	r2, r1
 801b236:	1cfb      	adds	r3, r7, #3
 801b238:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b23a:	230f      	movs	r3, #15
 801b23c:	18fb      	adds	r3, r7, r3
 801b23e:	2200      	movs	r2, #0
 801b240:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	2181      	movs	r1, #129	@ 0x81
 801b246:	0018      	movs	r0, r3
 801b248:	f002 f89c 	bl	801d384 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	2200      	movs	r2, #0
 801b250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	2101      	movs	r1, #1
 801b256:	0018      	movs	r0, r3
 801b258:	f002 f894 	bl	801d384 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b25c:	687a      	ldr	r2, [r7, #4]
 801b25e:	23b6      	movs	r3, #182	@ 0xb6
 801b260:	005b      	lsls	r3, r3, #1
 801b262:	2100      	movs	r1, #0
 801b264:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2182      	movs	r1, #130	@ 0x82
 801b26a:	0018      	movs	r0, r3
 801b26c:	f002 f88a 	bl	801d384 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	2200      	movs	r2, #0
 801b274:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	23ae      	movs	r3, #174	@ 0xae
 801b27a:	009b      	lsls	r3, r3, #2
 801b27c:	58d3      	ldr	r3, [r2, r3]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d011      	beq.n	801b2a6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b282:	687a      	ldr	r2, [r7, #4]
 801b284:	23af      	movs	r3, #175	@ 0xaf
 801b286:	009b      	lsls	r3, r3, #2
 801b288:	58d3      	ldr	r3, [r2, r3]
 801b28a:	685b      	ldr	r3, [r3, #4]
 801b28c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b28e:	687a      	ldr	r2, [r7, #4]
 801b290:	23ae      	movs	r3, #174	@ 0xae
 801b292:	009b      	lsls	r3, r3, #2
 801b294:	58d3      	ldr	r3, [r2, r3]
 801b296:	0018      	movs	r0, r3
 801b298:	f002 f9e2 	bl	801d660 <USBD_static_free>
    pdev->pClassData = NULL;
 801b29c:	687a      	ldr	r2, [r7, #4]
 801b29e:	23ae      	movs	r3, #174	@ 0xae
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	2100      	movs	r1, #0
 801b2a4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b2a6:	230f      	movs	r3, #15
 801b2a8:	18fb      	adds	r3, r7, r3
 801b2aa:	781b      	ldrb	r3, [r3, #0]
}
 801b2ac:	0018      	movs	r0, r3
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	b004      	add	sp, #16
 801b2b2:	bd80      	pop	{r7, pc}

0801b2b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b086      	sub	sp, #24
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
 801b2bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b2be:	687a      	ldr	r2, [r7, #4]
 801b2c0:	23ae      	movs	r3, #174	@ 0xae
 801b2c2:	009b      	lsls	r3, r3, #2
 801b2c4:	58d3      	ldr	r3, [r2, r3]
 801b2c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b2c8:	230f      	movs	r3, #15
 801b2ca:	18fb      	adds	r3, r7, r3
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b2d0:	230c      	movs	r3, #12
 801b2d2:	18fb      	adds	r3, r7, r3
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b2d8:	2317      	movs	r3, #23
 801b2da:	18fb      	adds	r3, r7, r3
 801b2dc:	2200      	movs	r2, #0
 801b2de:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b2e0:	683b      	ldr	r3, [r7, #0]
 801b2e2:	781b      	ldrb	r3, [r3, #0]
 801b2e4:	001a      	movs	r2, r3
 801b2e6:	2360      	movs	r3, #96	@ 0x60
 801b2e8:	4013      	ands	r3, r2
 801b2ea:	d03d      	beq.n	801b368 <USBD_CDC_Setup+0xb4>
 801b2ec:	2b20      	cmp	r3, #32
 801b2ee:	d000      	beq.n	801b2f2 <USBD_CDC_Setup+0x3e>
 801b2f0:	e094      	b.n	801b41c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	88db      	ldrh	r3, [r3, #6]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d02b      	beq.n	801b352 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b2fa:	683b      	ldr	r3, [r7, #0]
 801b2fc:	781b      	ldrb	r3, [r3, #0]
 801b2fe:	b25b      	sxtb	r3, r3
 801b300:	2b00      	cmp	r3, #0
 801b302:	da12      	bge.n	801b32a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b304:	687a      	ldr	r2, [r7, #4]
 801b306:	23af      	movs	r3, #175	@ 0xaf
 801b308:	009b      	lsls	r3, r3, #2
 801b30a:	58d3      	ldr	r3, [r2, r3]
 801b30c:	689b      	ldr	r3, [r3, #8]
 801b30e:	683a      	ldr	r2, [r7, #0]
 801b310:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b312:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b314:	683a      	ldr	r2, [r7, #0]
 801b316:	88d2      	ldrh	r2, [r2, #6]
 801b318:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b31a:	6939      	ldr	r1, [r7, #16]
 801b31c:	683b      	ldr	r3, [r7, #0]
 801b31e:	88da      	ldrh	r2, [r3, #6]
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	0018      	movs	r0, r3
 801b324:	f001 fbaf 	bl	801ca86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b328:	e083      	b.n	801b432 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	7859      	ldrb	r1, [r3, #1]
 801b32e:	693a      	ldr	r2, [r7, #16]
 801b330:	2380      	movs	r3, #128	@ 0x80
 801b332:	009b      	lsls	r3, r3, #2
 801b334:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b336:	683b      	ldr	r3, [r7, #0]
 801b338:	88db      	ldrh	r3, [r3, #6]
 801b33a:	b2d9      	uxtb	r1, r3
 801b33c:	693b      	ldr	r3, [r7, #16]
 801b33e:	4a40      	ldr	r2, [pc, #256]	@ (801b440 <USBD_CDC_Setup+0x18c>)
 801b340:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b342:	6939      	ldr	r1, [r7, #16]
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	88da      	ldrh	r2, [r3, #6]
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	0018      	movs	r0, r3
 801b34c:	f001 fbce 	bl	801caec <USBD_CtlPrepareRx>
      break;
 801b350:	e06f      	b.n	801b432 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b352:	687a      	ldr	r2, [r7, #4]
 801b354:	23af      	movs	r3, #175	@ 0xaf
 801b356:	009b      	lsls	r3, r3, #2
 801b358:	58d3      	ldr	r3, [r2, r3]
 801b35a:	689b      	ldr	r3, [r3, #8]
 801b35c:	683a      	ldr	r2, [r7, #0]
 801b35e:	7850      	ldrb	r0, [r2, #1]
 801b360:	6839      	ldr	r1, [r7, #0]
 801b362:	2200      	movs	r2, #0
 801b364:	4798      	blx	r3
      break;
 801b366:	e064      	b.n	801b432 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b368:	683b      	ldr	r3, [r7, #0]
 801b36a:	785b      	ldrb	r3, [r3, #1]
 801b36c:	2b0b      	cmp	r3, #11
 801b36e:	d037      	beq.n	801b3e0 <USBD_CDC_Setup+0x12c>
 801b370:	dc47      	bgt.n	801b402 <USBD_CDC_Setup+0x14e>
 801b372:	2b00      	cmp	r3, #0
 801b374:	d002      	beq.n	801b37c <USBD_CDC_Setup+0xc8>
 801b376:	2b0a      	cmp	r3, #10
 801b378:	d019      	beq.n	801b3ae <USBD_CDC_Setup+0xfa>
 801b37a:	e042      	b.n	801b402 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b37c:	687a      	ldr	r2, [r7, #4]
 801b37e:	23a7      	movs	r3, #167	@ 0xa7
 801b380:	009b      	lsls	r3, r3, #2
 801b382:	5cd3      	ldrb	r3, [r2, r3]
 801b384:	2b03      	cmp	r3, #3
 801b386:	d107      	bne.n	801b398 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b388:	230c      	movs	r3, #12
 801b38a:	18f9      	adds	r1, r7, r3
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	2202      	movs	r2, #2
 801b390:	0018      	movs	r0, r3
 801b392:	f001 fb78 	bl	801ca86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b396:	e040      	b.n	801b41a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b398:	683a      	ldr	r2, [r7, #0]
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	0011      	movs	r1, r2
 801b39e:	0018      	movs	r0, r3
 801b3a0:	f001 faf3 	bl	801c98a <USBD_CtlError>
            ret = USBD_FAIL;
 801b3a4:	2317      	movs	r3, #23
 801b3a6:	18fb      	adds	r3, r7, r3
 801b3a8:	2202      	movs	r2, #2
 801b3aa:	701a      	strb	r2, [r3, #0]
          break;
 801b3ac:	e035      	b.n	801b41a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	23a7      	movs	r3, #167	@ 0xa7
 801b3b2:	009b      	lsls	r3, r3, #2
 801b3b4:	5cd3      	ldrb	r3, [r2, r3]
 801b3b6:	2b03      	cmp	r3, #3
 801b3b8:	d107      	bne.n	801b3ca <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b3ba:	230f      	movs	r3, #15
 801b3bc:	18f9      	adds	r1, r7, r3
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	2201      	movs	r2, #1
 801b3c2:	0018      	movs	r0, r3
 801b3c4:	f001 fb5f 	bl	801ca86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b3c8:	e027      	b.n	801b41a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b3ca:	683a      	ldr	r2, [r7, #0]
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	0011      	movs	r1, r2
 801b3d0:	0018      	movs	r0, r3
 801b3d2:	f001 fada 	bl	801c98a <USBD_CtlError>
            ret = USBD_FAIL;
 801b3d6:	2317      	movs	r3, #23
 801b3d8:	18fb      	adds	r3, r7, r3
 801b3da:	2202      	movs	r2, #2
 801b3dc:	701a      	strb	r2, [r3, #0]
          break;
 801b3de:	e01c      	b.n	801b41a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b3e0:	687a      	ldr	r2, [r7, #4]
 801b3e2:	23a7      	movs	r3, #167	@ 0xa7
 801b3e4:	009b      	lsls	r3, r3, #2
 801b3e6:	5cd3      	ldrb	r3, [r2, r3]
 801b3e8:	2b03      	cmp	r3, #3
 801b3ea:	d015      	beq.n	801b418 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b3ec:	683a      	ldr	r2, [r7, #0]
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	0011      	movs	r1, r2
 801b3f2:	0018      	movs	r0, r3
 801b3f4:	f001 fac9 	bl	801c98a <USBD_CtlError>
            ret = USBD_FAIL;
 801b3f8:	2317      	movs	r3, #23
 801b3fa:	18fb      	adds	r3, r7, r3
 801b3fc:	2202      	movs	r2, #2
 801b3fe:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b400:	e00a      	b.n	801b418 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b402:	683a      	ldr	r2, [r7, #0]
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	0011      	movs	r1, r2
 801b408:	0018      	movs	r0, r3
 801b40a:	f001 fabe 	bl	801c98a <USBD_CtlError>
          ret = USBD_FAIL;
 801b40e:	2317      	movs	r3, #23
 801b410:	18fb      	adds	r3, r7, r3
 801b412:	2202      	movs	r2, #2
 801b414:	701a      	strb	r2, [r3, #0]
          break;
 801b416:	e000      	b.n	801b41a <USBD_CDC_Setup+0x166>
          break;
 801b418:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b41a:	e00a      	b.n	801b432 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b41c:	683a      	ldr	r2, [r7, #0]
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	0011      	movs	r1, r2
 801b422:	0018      	movs	r0, r3
 801b424:	f001 fab1 	bl	801c98a <USBD_CtlError>
      ret = USBD_FAIL;
 801b428:	2317      	movs	r3, #23
 801b42a:	18fb      	adds	r3, r7, r3
 801b42c:	2202      	movs	r2, #2
 801b42e:	701a      	strb	r2, [r3, #0]
      break;
 801b430:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b432:	2317      	movs	r3, #23
 801b434:	18fb      	adds	r3, r7, r3
 801b436:	781b      	ldrb	r3, [r3, #0]
}
 801b438:	0018      	movs	r0, r3
 801b43a:	46bd      	mov	sp, r7
 801b43c:	b006      	add	sp, #24
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	00000201 	.word	0x00000201

0801b444 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b084      	sub	sp, #16
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	000a      	movs	r2, r1
 801b44e:	1cfb      	adds	r3, r7, #3
 801b450:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b452:	687a      	ldr	r2, [r7, #4]
 801b454:	23ae      	movs	r3, #174	@ 0xae
 801b456:	009b      	lsls	r3, r3, #2
 801b458:	58d3      	ldr	r3, [r2, r3]
 801b45a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b45c:	687a      	ldr	r2, [r7, #4]
 801b45e:	23b0      	movs	r3, #176	@ 0xb0
 801b460:	009b      	lsls	r3, r3, #2
 801b462:	58d3      	ldr	r3, [r2, r3]
 801b464:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b466:	687a      	ldr	r2, [r7, #4]
 801b468:	23ae      	movs	r3, #174	@ 0xae
 801b46a:	009b      	lsls	r3, r3, #2
 801b46c:	58d3      	ldr	r3, [r2, r3]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d03e      	beq.n	801b4f0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b472:	1cfb      	adds	r3, r7, #3
 801b474:	781a      	ldrb	r2, [r3, #0]
 801b476:	6879      	ldr	r1, [r7, #4]
 801b478:	0013      	movs	r3, r2
 801b47a:	009b      	lsls	r3, r3, #2
 801b47c:	189b      	adds	r3, r3, r2
 801b47e:	009b      	lsls	r3, r3, #2
 801b480:	18cb      	adds	r3, r1, r3
 801b482:	331c      	adds	r3, #28
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d02b      	beq.n	801b4e2 <USBD_CDC_DataIn+0x9e>
 801b48a:	1cfb      	adds	r3, r7, #3
 801b48c:	781a      	ldrb	r2, [r3, #0]
 801b48e:	6879      	ldr	r1, [r7, #4]
 801b490:	0013      	movs	r3, r2
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	189b      	adds	r3, r3, r2
 801b496:	009b      	lsls	r3, r3, #2
 801b498:	18cb      	adds	r3, r1, r3
 801b49a:	331c      	adds	r3, #28
 801b49c:	6818      	ldr	r0, [r3, #0]
 801b49e:	1cfb      	adds	r3, r7, #3
 801b4a0:	781a      	ldrb	r2, [r3, #0]
 801b4a2:	68b9      	ldr	r1, [r7, #8]
 801b4a4:	0013      	movs	r3, r2
 801b4a6:	009b      	lsls	r3, r3, #2
 801b4a8:	189b      	adds	r3, r3, r2
 801b4aa:	00db      	lsls	r3, r3, #3
 801b4ac:	18cb      	adds	r3, r1, r3
 801b4ae:	3338      	adds	r3, #56	@ 0x38
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	0019      	movs	r1, r3
 801b4b4:	f7e4 fefc 	bl	80002b0 <__aeabi_uidivmod>
 801b4b8:	1e0b      	subs	r3, r1, #0
 801b4ba:	d112      	bne.n	801b4e2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b4bc:	1cfb      	adds	r3, r7, #3
 801b4be:	781a      	ldrb	r2, [r3, #0]
 801b4c0:	6879      	ldr	r1, [r7, #4]
 801b4c2:	0013      	movs	r3, r2
 801b4c4:	009b      	lsls	r3, r3, #2
 801b4c6:	189b      	adds	r3, r3, r2
 801b4c8:	009b      	lsls	r3, r3, #2
 801b4ca:	18cb      	adds	r3, r1, r3
 801b4cc:	331c      	adds	r3, #28
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b4d2:	1cfb      	adds	r3, r7, #3
 801b4d4:	7819      	ldrb	r1, [r3, #0]
 801b4d6:	6878      	ldr	r0, [r7, #4]
 801b4d8:	2300      	movs	r3, #0
 801b4da:	2200      	movs	r2, #0
 801b4dc:	f002 f82f 	bl	801d53e <USBD_LL_Transmit>
 801b4e0:	e004      	b.n	801b4ec <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b4e2:	68fa      	ldr	r2, [r7, #12]
 801b4e4:	2385      	movs	r3, #133	@ 0x85
 801b4e6:	009b      	lsls	r3, r3, #2
 801b4e8:	2100      	movs	r1, #0
 801b4ea:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	e000      	b.n	801b4f2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b4f0:	2302      	movs	r3, #2
  }
}
 801b4f2:	0018      	movs	r0, r3
 801b4f4:	46bd      	mov	sp, r7
 801b4f6:	b004      	add	sp, #16
 801b4f8:	bd80      	pop	{r7, pc}

0801b4fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b4fa:	b580      	push	{r7, lr}
 801b4fc:	b084      	sub	sp, #16
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	6078      	str	r0, [r7, #4]
 801b502:	000a      	movs	r2, r1
 801b504:	1cfb      	adds	r3, r7, #3
 801b506:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b508:	687a      	ldr	r2, [r7, #4]
 801b50a:	23ae      	movs	r3, #174	@ 0xae
 801b50c:	009b      	lsls	r3, r3, #2
 801b50e:	58d3      	ldr	r3, [r2, r3]
 801b510:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b512:	1cfb      	adds	r3, r7, #3
 801b514:	781a      	ldrb	r2, [r3, #0]
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	0011      	movs	r1, r2
 801b51a:	0018      	movs	r0, r3
 801b51c:	f002 f87d 	bl	801d61a <USBD_LL_GetRxDataSize>
 801b520:	0001      	movs	r1, r0
 801b522:	68fa      	ldr	r2, [r7, #12]
 801b524:	2383      	movs	r3, #131	@ 0x83
 801b526:	009b      	lsls	r3, r3, #2
 801b528:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b52a:	687a      	ldr	r2, [r7, #4]
 801b52c:	23ae      	movs	r3, #174	@ 0xae
 801b52e:	009b      	lsls	r3, r3, #2
 801b530:	58d3      	ldr	r3, [r2, r3]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d011      	beq.n	801b55a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b536:	687a      	ldr	r2, [r7, #4]
 801b538:	23af      	movs	r3, #175	@ 0xaf
 801b53a:	009b      	lsls	r3, r3, #2
 801b53c:	58d3      	ldr	r3, [r2, r3]
 801b53e:	68da      	ldr	r2, [r3, #12]
 801b540:	68f9      	ldr	r1, [r7, #12]
 801b542:	2381      	movs	r3, #129	@ 0x81
 801b544:	009b      	lsls	r3, r3, #2
 801b546:	58c8      	ldr	r0, [r1, r3]
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	2183      	movs	r1, #131	@ 0x83
 801b54c:	0089      	lsls	r1, r1, #2
 801b54e:	468c      	mov	ip, r1
 801b550:	4463      	add	r3, ip
 801b552:	0019      	movs	r1, r3
 801b554:	4790      	blx	r2

    return USBD_OK;
 801b556:	2300      	movs	r3, #0
 801b558:	e000      	b.n	801b55c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b55a:	2302      	movs	r3, #2
  }
}
 801b55c:	0018      	movs	r0, r3
 801b55e:	46bd      	mov	sp, r7
 801b560:	b004      	add	sp, #16
 801b562:	bd80      	pop	{r7, pc}

0801b564 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b564:	b590      	push	{r4, r7, lr}
 801b566:	b085      	sub	sp, #20
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b56c:	687a      	ldr	r2, [r7, #4]
 801b56e:	23ae      	movs	r3, #174	@ 0xae
 801b570:	009b      	lsls	r3, r3, #2
 801b572:	58d3      	ldr	r3, [r2, r3]
 801b574:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b576:	687a      	ldr	r2, [r7, #4]
 801b578:	23af      	movs	r3, #175	@ 0xaf
 801b57a:	009b      	lsls	r3, r3, #2
 801b57c:	58d3      	ldr	r3, [r2, r3]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d018      	beq.n	801b5b4 <USBD_CDC_EP0_RxReady+0x50>
 801b582:	68fa      	ldr	r2, [r7, #12]
 801b584:	2380      	movs	r3, #128	@ 0x80
 801b586:	009b      	lsls	r3, r3, #2
 801b588:	5cd3      	ldrb	r3, [r2, r3]
 801b58a:	2bff      	cmp	r3, #255	@ 0xff
 801b58c:	d012      	beq.n	801b5b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b58e:	687a      	ldr	r2, [r7, #4]
 801b590:	23af      	movs	r3, #175	@ 0xaf
 801b592:	009b      	lsls	r3, r3, #2
 801b594:	58d3      	ldr	r3, [r2, r3]
 801b596:	689b      	ldr	r3, [r3, #8]
 801b598:	68f9      	ldr	r1, [r7, #12]
 801b59a:	2280      	movs	r2, #128	@ 0x80
 801b59c:	0092      	lsls	r2, r2, #2
 801b59e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b5a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b5a2:	68fa      	ldr	r2, [r7, #12]
 801b5a4:	4c06      	ldr	r4, [pc, #24]	@ (801b5c0 <USBD_CDC_EP0_RxReady+0x5c>)
 801b5a6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b5a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b5aa:	68fa      	ldr	r2, [r7, #12]
 801b5ac:	2380      	movs	r3, #128	@ 0x80
 801b5ae:	009b      	lsls	r3, r3, #2
 801b5b0:	21ff      	movs	r1, #255	@ 0xff
 801b5b2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b5b4:	2300      	movs	r3, #0
}
 801b5b6:	0018      	movs	r0, r3
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	b005      	add	sp, #20
 801b5bc:	bd90      	pop	{r4, r7, pc}
 801b5be:	46c0      	nop			@ (mov r8, r8)
 801b5c0:	00000201 	.word	0x00000201

0801b5c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	b082      	sub	sp, #8
 801b5c8:	af00      	add	r7, sp, #0
 801b5ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	2243      	movs	r2, #67	@ 0x43
 801b5d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b5d2:	4b02      	ldr	r3, [pc, #8]	@ (801b5dc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b5d4:	0018      	movs	r0, r3
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	b002      	add	sp, #8
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	2000016c 	.word	0x2000016c

0801b5e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b082      	sub	sp, #8
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2243      	movs	r2, #67	@ 0x43
 801b5ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b5ee:	4b02      	ldr	r3, [pc, #8]	@ (801b5f8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b5f0:	0018      	movs	r0, r3
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	b002      	add	sp, #8
 801b5f6:	bd80      	pop	{r7, pc}
 801b5f8:	20000128 	.word	0x20000128

0801b5fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b082      	sub	sp, #8
 801b600:	af00      	add	r7, sp, #0
 801b602:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	2243      	movs	r2, #67	@ 0x43
 801b608:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b60a:	4b02      	ldr	r3, [pc, #8]	@ (801b614 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b60c:	0018      	movs	r0, r3
 801b60e:	46bd      	mov	sp, r7
 801b610:	b002      	add	sp, #8
 801b612:	bd80      	pop	{r7, pc}
 801b614:	200001b0 	.word	0x200001b0

0801b618 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b082      	sub	sp, #8
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	220a      	movs	r2, #10
 801b624:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b626:	4b02      	ldr	r3, [pc, #8]	@ (801b630 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b628:	0018      	movs	r0, r3
 801b62a:	46bd      	mov	sp, r7
 801b62c:	b002      	add	sp, #8
 801b62e:	bd80      	pop	{r7, pc}
 801b630:	200000e4 	.word	0x200000e4

0801b634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b084      	sub	sp, #16
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
 801b63c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b63e:	200f      	movs	r0, #15
 801b640:	183b      	adds	r3, r7, r0
 801b642:	2202      	movs	r2, #2
 801b644:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d007      	beq.n	801b65c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b64c:	687a      	ldr	r2, [r7, #4]
 801b64e:	23af      	movs	r3, #175	@ 0xaf
 801b650:	009b      	lsls	r3, r3, #2
 801b652:	6839      	ldr	r1, [r7, #0]
 801b654:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b656:	183b      	adds	r3, r7, r0
 801b658:	2200      	movs	r2, #0
 801b65a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b65c:	230f      	movs	r3, #15
 801b65e:	18fb      	adds	r3, r7, r3
 801b660:	781b      	ldrb	r3, [r3, #0]
}
 801b662:	0018      	movs	r0, r3
 801b664:	46bd      	mov	sp, r7
 801b666:	b004      	add	sp, #16
 801b668:	bd80      	pop	{r7, pc}

0801b66a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b66a:	b580      	push	{r7, lr}
 801b66c:	b086      	sub	sp, #24
 801b66e:	af00      	add	r7, sp, #0
 801b670:	60f8      	str	r0, [r7, #12]
 801b672:	60b9      	str	r1, [r7, #8]
 801b674:	1dbb      	adds	r3, r7, #6
 801b676:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b678:	68fa      	ldr	r2, [r7, #12]
 801b67a:	23ae      	movs	r3, #174	@ 0xae
 801b67c:	009b      	lsls	r3, r3, #2
 801b67e:	58d3      	ldr	r3, [r2, r3]
 801b680:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b682:	697a      	ldr	r2, [r7, #20]
 801b684:	2382      	movs	r3, #130	@ 0x82
 801b686:	009b      	lsls	r3, r3, #2
 801b688:	68b9      	ldr	r1, [r7, #8]
 801b68a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b68c:	1dbb      	adds	r3, r7, #6
 801b68e:	8819      	ldrh	r1, [r3, #0]
 801b690:	697a      	ldr	r2, [r7, #20]
 801b692:	2384      	movs	r3, #132	@ 0x84
 801b694:	009b      	lsls	r3, r3, #2
 801b696:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b698:	2300      	movs	r3, #0
}
 801b69a:	0018      	movs	r0, r3
 801b69c:	46bd      	mov	sp, r7
 801b69e:	b006      	add	sp, #24
 801b6a0:	bd80      	pop	{r7, pc}

0801b6a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b6a2:	b580      	push	{r7, lr}
 801b6a4:	b084      	sub	sp, #16
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	6078      	str	r0, [r7, #4]
 801b6aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6ac:	687a      	ldr	r2, [r7, #4]
 801b6ae:	23ae      	movs	r3, #174	@ 0xae
 801b6b0:	009b      	lsls	r3, r3, #2
 801b6b2:	58d3      	ldr	r3, [r2, r3]
 801b6b4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b6b6:	68fa      	ldr	r2, [r7, #12]
 801b6b8:	2381      	movs	r3, #129	@ 0x81
 801b6ba:	009b      	lsls	r3, r3, #2
 801b6bc:	6839      	ldr	r1, [r7, #0]
 801b6be:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b6c0:	2300      	movs	r3, #0
}
 801b6c2:	0018      	movs	r0, r3
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	b004      	add	sp, #16
 801b6c8:	bd80      	pop	{r7, pc}

0801b6ca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b6ca:	b580      	push	{r7, lr}
 801b6cc:	b084      	sub	sp, #16
 801b6ce:	af00      	add	r7, sp, #0
 801b6d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6d2:	687a      	ldr	r2, [r7, #4]
 801b6d4:	23ae      	movs	r3, #174	@ 0xae
 801b6d6:	009b      	lsls	r3, r3, #2
 801b6d8:	58d3      	ldr	r3, [r2, r3]
 801b6da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b6dc:	687a      	ldr	r2, [r7, #4]
 801b6de:	23ae      	movs	r3, #174	@ 0xae
 801b6e0:	009b      	lsls	r3, r3, #2
 801b6e2:	58d3      	ldr	r3, [r2, r3]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d022      	beq.n	801b72e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b6e8:	68fa      	ldr	r2, [r7, #12]
 801b6ea:	2385      	movs	r3, #133	@ 0x85
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	58d3      	ldr	r3, [r2, r3]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d11a      	bne.n	801b72a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b6f4:	68fa      	ldr	r2, [r7, #12]
 801b6f6:	2385      	movs	r3, #133	@ 0x85
 801b6f8:	009b      	lsls	r3, r3, #2
 801b6fa:	2101      	movs	r1, #1
 801b6fc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b6fe:	68fa      	ldr	r2, [r7, #12]
 801b700:	2384      	movs	r3, #132	@ 0x84
 801b702:	009b      	lsls	r3, r3, #2
 801b704:	58d2      	ldr	r2, [r2, r3]
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b70a:	68fa      	ldr	r2, [r7, #12]
 801b70c:	2382      	movs	r3, #130	@ 0x82
 801b70e:	009b      	lsls	r3, r3, #2
 801b710:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b712:	68fa      	ldr	r2, [r7, #12]
 801b714:	2384      	movs	r3, #132	@ 0x84
 801b716:	009b      	lsls	r3, r3, #2
 801b718:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b71a:	b29b      	uxth	r3, r3
 801b71c:	6878      	ldr	r0, [r7, #4]
 801b71e:	000a      	movs	r2, r1
 801b720:	2181      	movs	r1, #129	@ 0x81
 801b722:	f001 ff0c 	bl	801d53e <USBD_LL_Transmit>

      return USBD_OK;
 801b726:	2300      	movs	r3, #0
 801b728:	e002      	b.n	801b730 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b72a:	2301      	movs	r3, #1
 801b72c:	e000      	b.n	801b730 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b72e:	2302      	movs	r3, #2
  }
}
 801b730:	0018      	movs	r0, r3
 801b732:	46bd      	mov	sp, r7
 801b734:	b004      	add	sp, #16
 801b736:	bd80      	pop	{r7, pc}

0801b738 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b084      	sub	sp, #16
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b740:	687a      	ldr	r2, [r7, #4]
 801b742:	23ae      	movs	r3, #174	@ 0xae
 801b744:	009b      	lsls	r3, r3, #2
 801b746:	58d3      	ldr	r3, [r2, r3]
 801b748:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b74a:	687a      	ldr	r2, [r7, #4]
 801b74c:	23ae      	movs	r3, #174	@ 0xae
 801b74e:	009b      	lsls	r3, r3, #2
 801b750:	58d3      	ldr	r3, [r2, r3]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d019      	beq.n	801b78a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	7c1b      	ldrb	r3, [r3, #16]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d10a      	bne.n	801b774 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b75e:	68fa      	ldr	r2, [r7, #12]
 801b760:	2381      	movs	r3, #129	@ 0x81
 801b762:	009b      	lsls	r3, r3, #2
 801b764:	58d2      	ldr	r2, [r2, r3]
 801b766:	2380      	movs	r3, #128	@ 0x80
 801b768:	009b      	lsls	r3, r3, #2
 801b76a:	6878      	ldr	r0, [r7, #4]
 801b76c:	2101      	movs	r1, #1
 801b76e:	f001 ff1d 	bl	801d5ac <USBD_LL_PrepareReceive>
 801b772:	e008      	b.n	801b786 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b774:	68fa      	ldr	r2, [r7, #12]
 801b776:	2381      	movs	r3, #129	@ 0x81
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	58d2      	ldr	r2, [r2, r3]
 801b77c:	6878      	ldr	r0, [r7, #4]
 801b77e:	2340      	movs	r3, #64	@ 0x40
 801b780:	2101      	movs	r1, #1
 801b782:	f001 ff13 	bl	801d5ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b786:	2300      	movs	r3, #0
 801b788:	e000      	b.n	801b78c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b78a:	2302      	movs	r3, #2
  }
}
 801b78c:	0018      	movs	r0, r3
 801b78e:	46bd      	mov	sp, r7
 801b790:	b004      	add	sp, #16
 801b792:	bd80      	pop	{r7, pc}

0801b794 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	60f8      	str	r0, [r7, #12]
 801b79c:	60b9      	str	r1, [r7, #8]
 801b79e:	1dfb      	adds	r3, r7, #7
 801b7a0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d101      	bne.n	801b7ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b7a8:	2302      	movs	r3, #2
 801b7aa:	e020      	b.n	801b7ee <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b7ac:	68fa      	ldr	r2, [r7, #12]
 801b7ae:	23ad      	movs	r3, #173	@ 0xad
 801b7b0:	009b      	lsls	r3, r3, #2
 801b7b2:	58d3      	ldr	r3, [r2, r3]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d004      	beq.n	801b7c2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b7b8:	68fa      	ldr	r2, [r7, #12]
 801b7ba:	23ad      	movs	r3, #173	@ 0xad
 801b7bc:	009b      	lsls	r3, r3, #2
 801b7be:	2100      	movs	r1, #0
 801b7c0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b7c2:	68bb      	ldr	r3, [r7, #8]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d004      	beq.n	801b7d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b7c8:	68fa      	ldr	r2, [r7, #12]
 801b7ca:	23ac      	movs	r3, #172	@ 0xac
 801b7cc:	009b      	lsls	r3, r3, #2
 801b7ce:	68b9      	ldr	r1, [r7, #8]
 801b7d0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b7d2:	68fa      	ldr	r2, [r7, #12]
 801b7d4:	23a7      	movs	r3, #167	@ 0xa7
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	2101      	movs	r1, #1
 801b7da:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	1dfa      	adds	r2, r7, #7
 801b7e0:	7812      	ldrb	r2, [r2, #0]
 801b7e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	0018      	movs	r0, r3
 801b7e8:	f001 fd0c 	bl	801d204 <USBD_LL_Init>

  return USBD_OK;
 801b7ec:	2300      	movs	r3, #0
}
 801b7ee:	0018      	movs	r0, r3
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	b004      	add	sp, #16
 801b7f4:	bd80      	pop	{r7, pc}

0801b7f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b7f6:	b580      	push	{r7, lr}
 801b7f8:	b084      	sub	sp, #16
 801b7fa:	af00      	add	r7, sp, #0
 801b7fc:	6078      	str	r0, [r7, #4]
 801b7fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b800:	200f      	movs	r0, #15
 801b802:	183b      	adds	r3, r7, r0
 801b804:	2200      	movs	r2, #0
 801b806:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b808:	683b      	ldr	r3, [r7, #0]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d008      	beq.n	801b820 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b80e:	687a      	ldr	r2, [r7, #4]
 801b810:	23ad      	movs	r3, #173	@ 0xad
 801b812:	009b      	lsls	r3, r3, #2
 801b814:	6839      	ldr	r1, [r7, #0]
 801b816:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b818:	183b      	adds	r3, r7, r0
 801b81a:	2200      	movs	r2, #0
 801b81c:	701a      	strb	r2, [r3, #0]
 801b81e:	e003      	b.n	801b828 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b820:	230f      	movs	r3, #15
 801b822:	18fb      	adds	r3, r7, r3
 801b824:	2202      	movs	r2, #2
 801b826:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b828:	230f      	movs	r3, #15
 801b82a:	18fb      	adds	r3, r7, r3
 801b82c:	781b      	ldrb	r3, [r3, #0]
}
 801b82e:	0018      	movs	r0, r3
 801b830:	46bd      	mov	sp, r7
 801b832:	b004      	add	sp, #16
 801b834:	bd80      	pop	{r7, pc}

0801b836 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b836:	b580      	push	{r7, lr}
 801b838:	b082      	sub	sp, #8
 801b83a:	af00      	add	r7, sp, #0
 801b83c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	0018      	movs	r0, r3
 801b842:	f001 fd43 	bl	801d2cc <USBD_LL_Start>

  return USBD_OK;
 801b846:	2300      	movs	r3, #0
}
 801b848:	0018      	movs	r0, r3
 801b84a:	46bd      	mov	sp, r7
 801b84c:	b002      	add	sp, #8
 801b84e:	bd80      	pop	{r7, pc}

0801b850 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b850:	b580      	push	{r7, lr}
 801b852:	b082      	sub	sp, #8
 801b854:	af00      	add	r7, sp, #0
 801b856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b858:	2300      	movs	r3, #0
}
 801b85a:	0018      	movs	r0, r3
 801b85c:	46bd      	mov	sp, r7
 801b85e:	b002      	add	sp, #8
 801b860:	bd80      	pop	{r7, pc}

0801b862 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b862:	b590      	push	{r4, r7, lr}
 801b864:	b085      	sub	sp, #20
 801b866:	af00      	add	r7, sp, #0
 801b868:	6078      	str	r0, [r7, #4]
 801b86a:	000a      	movs	r2, r1
 801b86c:	1cfb      	adds	r3, r7, #3
 801b86e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b870:	240f      	movs	r4, #15
 801b872:	193b      	adds	r3, r7, r4
 801b874:	2202      	movs	r2, #2
 801b876:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b878:	687a      	ldr	r2, [r7, #4]
 801b87a:	23ad      	movs	r3, #173	@ 0xad
 801b87c:	009b      	lsls	r3, r3, #2
 801b87e:	58d3      	ldr	r3, [r2, r3]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d00e      	beq.n	801b8a2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b884:	687a      	ldr	r2, [r7, #4]
 801b886:	23ad      	movs	r3, #173	@ 0xad
 801b888:	009b      	lsls	r3, r3, #2
 801b88a:	58d3      	ldr	r3, [r2, r3]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	1cfa      	adds	r2, r7, #3
 801b890:	7811      	ldrb	r1, [r2, #0]
 801b892:	687a      	ldr	r2, [r7, #4]
 801b894:	0010      	movs	r0, r2
 801b896:	4798      	blx	r3
 801b898:	1e03      	subs	r3, r0, #0
 801b89a:	d102      	bne.n	801b8a2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b89c:	193b      	adds	r3, r7, r4
 801b89e:	2200      	movs	r2, #0
 801b8a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b8a2:	230f      	movs	r3, #15
 801b8a4:	18fb      	adds	r3, r7, r3
 801b8a6:	781b      	ldrb	r3, [r3, #0]
}
 801b8a8:	0018      	movs	r0, r3
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	b005      	add	sp, #20
 801b8ae:	bd90      	pop	{r4, r7, pc}

0801b8b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b082      	sub	sp, #8
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	6078      	str	r0, [r7, #4]
 801b8b8:	000a      	movs	r2, r1
 801b8ba:	1cfb      	adds	r3, r7, #3
 801b8bc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b8be:	687a      	ldr	r2, [r7, #4]
 801b8c0:	23ad      	movs	r3, #173	@ 0xad
 801b8c2:	009b      	lsls	r3, r3, #2
 801b8c4:	58d3      	ldr	r3, [r2, r3]
 801b8c6:	685b      	ldr	r3, [r3, #4]
 801b8c8:	1cfa      	adds	r2, r7, #3
 801b8ca:	7811      	ldrb	r1, [r2, #0]
 801b8cc:	687a      	ldr	r2, [r7, #4]
 801b8ce:	0010      	movs	r0, r2
 801b8d0:	4798      	blx	r3

  return USBD_OK;
 801b8d2:	2300      	movs	r3, #0
}
 801b8d4:	0018      	movs	r0, r3
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	b002      	add	sp, #8
 801b8da:	bd80      	pop	{r7, pc}

0801b8dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b082      	sub	sp, #8
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	6078      	str	r0, [r7, #4]
 801b8e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	22aa      	movs	r2, #170	@ 0xaa
 801b8ea:	0092      	lsls	r2, r2, #2
 801b8ec:	4694      	mov	ip, r2
 801b8ee:	4463      	add	r3, ip
 801b8f0:	683a      	ldr	r2, [r7, #0]
 801b8f2:	0011      	movs	r1, r2
 801b8f4:	0018      	movs	r0, r3
 801b8f6:	f001 f810 	bl	801c91a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b8fa:	687a      	ldr	r2, [r7, #4]
 801b8fc:	23a5      	movs	r3, #165	@ 0xa5
 801b8fe:	009b      	lsls	r3, r3, #2
 801b900:	2101      	movs	r1, #1
 801b902:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	4a23      	ldr	r2, [pc, #140]	@ (801b994 <USBD_LL_SetupStage+0xb8>)
 801b908:	5a9b      	ldrh	r3, [r3, r2]
 801b90a:	0019      	movs	r1, r3
 801b90c:	687a      	ldr	r2, [r7, #4]
 801b90e:	23a6      	movs	r3, #166	@ 0xa6
 801b910:	009b      	lsls	r3, r3, #2
 801b912:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b914:	687a      	ldr	r2, [r7, #4]
 801b916:	23aa      	movs	r3, #170	@ 0xaa
 801b918:	009b      	lsls	r3, r3, #2
 801b91a:	5cd3      	ldrb	r3, [r2, r3]
 801b91c:	001a      	movs	r2, r3
 801b91e:	231f      	movs	r3, #31
 801b920:	4013      	ands	r3, r2
 801b922:	2b02      	cmp	r3, #2
 801b924:	d019      	beq.n	801b95a <USBD_LL_SetupStage+0x7e>
 801b926:	d822      	bhi.n	801b96e <USBD_LL_SetupStage+0x92>
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d002      	beq.n	801b932 <USBD_LL_SetupStage+0x56>
 801b92c:	2b01      	cmp	r3, #1
 801b92e:	d00a      	beq.n	801b946 <USBD_LL_SetupStage+0x6a>
 801b930:	e01d      	b.n	801b96e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	22aa      	movs	r2, #170	@ 0xaa
 801b936:	0092      	lsls	r2, r2, #2
 801b938:	189a      	adds	r2, r3, r2
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	0011      	movs	r1, r2
 801b93e:	0018      	movs	r0, r3
 801b940:	f000 fa10 	bl	801bd64 <USBD_StdDevReq>
      break;
 801b944:	e020      	b.n	801b988 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	22aa      	movs	r2, #170	@ 0xaa
 801b94a:	0092      	lsls	r2, r2, #2
 801b94c:	189a      	adds	r2, r3, r2
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	0011      	movs	r1, r2
 801b952:	0018      	movs	r0, r3
 801b954:	f000 fa78 	bl	801be48 <USBD_StdItfReq>
      break;
 801b958:	e016      	b.n	801b988 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	22aa      	movs	r2, #170	@ 0xaa
 801b95e:	0092      	lsls	r2, r2, #2
 801b960:	189a      	adds	r2, r3, r2
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	0011      	movs	r1, r2
 801b966:	0018      	movs	r0, r3
 801b968:	f000 fac5 	bl	801bef6 <USBD_StdEPReq>
      break;
 801b96c:	e00c      	b.n	801b988 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b96e:	687a      	ldr	r2, [r7, #4]
 801b970:	23aa      	movs	r3, #170	@ 0xaa
 801b972:	009b      	lsls	r3, r3, #2
 801b974:	5cd3      	ldrb	r3, [r2, r3]
 801b976:	227f      	movs	r2, #127	@ 0x7f
 801b978:	4393      	bics	r3, r2
 801b97a:	b2da      	uxtb	r2, r3
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	0011      	movs	r1, r2
 801b980:	0018      	movs	r0, r3
 801b982:	f001 fd2a 	bl	801d3da <USBD_LL_StallEP>
      break;
 801b986:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b988:	2300      	movs	r3, #0
}
 801b98a:	0018      	movs	r0, r3
 801b98c:	46bd      	mov	sp, r7
 801b98e:	b002      	add	sp, #8
 801b990:	bd80      	pop	{r7, pc}
 801b992:	46c0      	nop			@ (mov r8, r8)
 801b994:	000002ae 	.word	0x000002ae

0801b998 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b086      	sub	sp, #24
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	60f8      	str	r0, [r7, #12]
 801b9a0:	607a      	str	r2, [r7, #4]
 801b9a2:	200b      	movs	r0, #11
 801b9a4:	183b      	adds	r3, r7, r0
 801b9a6:	1c0a      	adds	r2, r1, #0
 801b9a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b9aa:	183b      	adds	r3, r7, r0
 801b9ac:	781b      	ldrb	r3, [r3, #0]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d154      	bne.n	801ba5c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	3355      	adds	r3, #85	@ 0x55
 801b9b6:	33ff      	adds	r3, #255	@ 0xff
 801b9b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b9ba:	68fa      	ldr	r2, [r7, #12]
 801b9bc:	23a5      	movs	r3, #165	@ 0xa5
 801b9be:	009b      	lsls	r3, r3, #2
 801b9c0:	58d3      	ldr	r3, [r2, r3]
 801b9c2:	2b03      	cmp	r3, #3
 801b9c4:	d139      	bne.n	801ba3a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b9c6:	697b      	ldr	r3, [r7, #20]
 801b9c8:	68da      	ldr	r2, [r3, #12]
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	691b      	ldr	r3, [r3, #16]
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d919      	bls.n	801ba06 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b9d2:	697b      	ldr	r3, [r7, #20]
 801b9d4:	68da      	ldr	r2, [r3, #12]
 801b9d6:	697b      	ldr	r3, [r7, #20]
 801b9d8:	691b      	ldr	r3, [r3, #16]
 801b9da:	1ad2      	subs	r2, r2, r3
 801b9dc:	697b      	ldr	r3, [r7, #20]
 801b9de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b9e0:	697b      	ldr	r3, [r7, #20]
 801b9e2:	68da      	ldr	r2, [r3, #12]
 801b9e4:	697b      	ldr	r3, [r7, #20]
 801b9e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b9e8:	429a      	cmp	r2, r3
 801b9ea:	d203      	bcs.n	801b9f4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b9ec:	697b      	ldr	r3, [r7, #20]
 801b9ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b9f0:	b29b      	uxth	r3, r3
 801b9f2:	e002      	b.n	801b9fa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b9f4:	697b      	ldr	r3, [r7, #20]
 801b9f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b9f8:	b29b      	uxth	r3, r3
 801b9fa:	6879      	ldr	r1, [r7, #4]
 801b9fc:	68f8      	ldr	r0, [r7, #12]
 801b9fe:	001a      	movs	r2, r3
 801ba00:	f001 f898 	bl	801cb34 <USBD_CtlContinueRx>
 801ba04:	e045      	b.n	801ba92 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	23ad      	movs	r3, #173	@ 0xad
 801ba0a:	009b      	lsls	r3, r3, #2
 801ba0c:	58d3      	ldr	r3, [r2, r3]
 801ba0e:	691b      	ldr	r3, [r3, #16]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d00d      	beq.n	801ba30 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ba14:	68fa      	ldr	r2, [r7, #12]
 801ba16:	23a7      	movs	r3, #167	@ 0xa7
 801ba18:	009b      	lsls	r3, r3, #2
 801ba1a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ba1c:	2b03      	cmp	r3, #3
 801ba1e:	d107      	bne.n	801ba30 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801ba20:	68fa      	ldr	r2, [r7, #12]
 801ba22:	23ad      	movs	r3, #173	@ 0xad
 801ba24:	009b      	lsls	r3, r3, #2
 801ba26:	58d3      	ldr	r3, [r2, r3]
 801ba28:	691b      	ldr	r3, [r3, #16]
 801ba2a:	68fa      	ldr	r2, [r7, #12]
 801ba2c:	0010      	movs	r0, r2
 801ba2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	0018      	movs	r0, r3
 801ba34:	f001 f891 	bl	801cb5a <USBD_CtlSendStatus>
 801ba38:	e02b      	b.n	801ba92 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801ba3a:	68fa      	ldr	r2, [r7, #12]
 801ba3c:	23a5      	movs	r3, #165	@ 0xa5
 801ba3e:	009b      	lsls	r3, r3, #2
 801ba40:	58d3      	ldr	r3, [r2, r3]
 801ba42:	2b05      	cmp	r3, #5
 801ba44:	d125      	bne.n	801ba92 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801ba46:	68fa      	ldr	r2, [r7, #12]
 801ba48:	23a5      	movs	r3, #165	@ 0xa5
 801ba4a:	009b      	lsls	r3, r3, #2
 801ba4c:	2100      	movs	r1, #0
 801ba4e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	2100      	movs	r1, #0
 801ba54:	0018      	movs	r0, r3
 801ba56:	f001 fcc0 	bl	801d3da <USBD_LL_StallEP>
 801ba5a:	e01a      	b.n	801ba92 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801ba5c:	68fa      	ldr	r2, [r7, #12]
 801ba5e:	23ad      	movs	r3, #173	@ 0xad
 801ba60:	009b      	lsls	r3, r3, #2
 801ba62:	58d3      	ldr	r3, [r2, r3]
 801ba64:	699b      	ldr	r3, [r3, #24]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d011      	beq.n	801ba8e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ba6a:	68fa      	ldr	r2, [r7, #12]
 801ba6c:	23a7      	movs	r3, #167	@ 0xa7
 801ba6e:	009b      	lsls	r3, r3, #2
 801ba70:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801ba72:	2b03      	cmp	r3, #3
 801ba74:	d10b      	bne.n	801ba8e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801ba76:	68fa      	ldr	r2, [r7, #12]
 801ba78:	23ad      	movs	r3, #173	@ 0xad
 801ba7a:	009b      	lsls	r3, r3, #2
 801ba7c:	58d3      	ldr	r3, [r2, r3]
 801ba7e:	699b      	ldr	r3, [r3, #24]
 801ba80:	220b      	movs	r2, #11
 801ba82:	18ba      	adds	r2, r7, r2
 801ba84:	7811      	ldrb	r1, [r2, #0]
 801ba86:	68fa      	ldr	r2, [r7, #12]
 801ba88:	0010      	movs	r0, r2
 801ba8a:	4798      	blx	r3
 801ba8c:	e001      	b.n	801ba92 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ba8e:	2302      	movs	r3, #2
 801ba90:	e000      	b.n	801ba94 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801ba92:	2300      	movs	r3, #0
}
 801ba94:	0018      	movs	r0, r3
 801ba96:	46bd      	mov	sp, r7
 801ba98:	b006      	add	sp, #24
 801ba9a:	bd80      	pop	{r7, pc}

0801ba9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b086      	sub	sp, #24
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	60f8      	str	r0, [r7, #12]
 801baa4:	607a      	str	r2, [r7, #4]
 801baa6:	200b      	movs	r0, #11
 801baa8:	183b      	adds	r3, r7, r0
 801baaa:	1c0a      	adds	r2, r1, #0
 801baac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801baae:	183b      	adds	r3, r7, r0
 801bab0:	781b      	ldrb	r3, [r3, #0]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d000      	beq.n	801bab8 <USBD_LL_DataInStage+0x1c>
 801bab6:	e08e      	b.n	801bbd6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	3314      	adds	r3, #20
 801babc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801babe:	68fa      	ldr	r2, [r7, #12]
 801bac0:	23a5      	movs	r3, #165	@ 0xa5
 801bac2:	009b      	lsls	r3, r3, #2
 801bac4:	58d3      	ldr	r3, [r2, r3]
 801bac6:	2b02      	cmp	r3, #2
 801bac8:	d164      	bne.n	801bb94 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	68da      	ldr	r2, [r3, #12]
 801bace:	697b      	ldr	r3, [r7, #20]
 801bad0:	691b      	ldr	r3, [r3, #16]
 801bad2:	429a      	cmp	r2, r3
 801bad4:	d915      	bls.n	801bb02 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bad6:	697b      	ldr	r3, [r7, #20]
 801bad8:	68da      	ldr	r2, [r3, #12]
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	691b      	ldr	r3, [r3, #16]
 801bade:	1ad2      	subs	r2, r2, r3
 801bae0:	697b      	ldr	r3, [r7, #20]
 801bae2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	68db      	ldr	r3, [r3, #12]
 801bae8:	b29a      	uxth	r2, r3
 801baea:	6879      	ldr	r1, [r7, #4]
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	0018      	movs	r0, r3
 801baf0:	f000 ffe9 	bl	801cac6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801baf4:	68f8      	ldr	r0, [r7, #12]
 801baf6:	2300      	movs	r3, #0
 801baf8:	2200      	movs	r2, #0
 801bafa:	2100      	movs	r1, #0
 801bafc:	f001 fd56 	bl	801d5ac <USBD_LL_PrepareReceive>
 801bb00:	e059      	b.n	801bbb6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	689a      	ldr	r2, [r3, #8]
 801bb06:	697b      	ldr	r3, [r7, #20]
 801bb08:	691b      	ldr	r3, [r3, #16]
 801bb0a:	0019      	movs	r1, r3
 801bb0c:	0010      	movs	r0, r2
 801bb0e:	f7e4 fbcf 	bl	80002b0 <__aeabi_uidivmod>
 801bb12:	1e0b      	subs	r3, r1, #0
 801bb14:	d11f      	bne.n	801bb56 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	689a      	ldr	r2, [r3, #8]
 801bb1a:	697b      	ldr	r3, [r7, #20]
 801bb1c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	d319      	bcc.n	801bb56 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bb22:	697b      	ldr	r3, [r7, #20]
 801bb24:	689a      	ldr	r2, [r3, #8]
 801bb26:	68f9      	ldr	r1, [r7, #12]
 801bb28:	23a6      	movs	r3, #166	@ 0xa6
 801bb2a:	009b      	lsls	r3, r3, #2
 801bb2c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bb2e:	429a      	cmp	r2, r3
 801bb30:	d211      	bcs.n	801bb56 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	2200      	movs	r2, #0
 801bb36:	2100      	movs	r1, #0
 801bb38:	0018      	movs	r0, r3
 801bb3a:	f000 ffc4 	bl	801cac6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bb3e:	68fa      	ldr	r2, [r7, #12]
 801bb40:	23a6      	movs	r3, #166	@ 0xa6
 801bb42:	009b      	lsls	r3, r3, #2
 801bb44:	2100      	movs	r1, #0
 801bb46:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bb48:	68f8      	ldr	r0, [r7, #12]
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	2100      	movs	r1, #0
 801bb50:	f001 fd2c 	bl	801d5ac <USBD_LL_PrepareReceive>
 801bb54:	e02f      	b.n	801bbb6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bb56:	68fa      	ldr	r2, [r7, #12]
 801bb58:	23ad      	movs	r3, #173	@ 0xad
 801bb5a:	009b      	lsls	r3, r3, #2
 801bb5c:	58d3      	ldr	r3, [r2, r3]
 801bb5e:	68db      	ldr	r3, [r3, #12]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d00d      	beq.n	801bb80 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bb64:	68fa      	ldr	r2, [r7, #12]
 801bb66:	23a7      	movs	r3, #167	@ 0xa7
 801bb68:	009b      	lsls	r3, r3, #2
 801bb6a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bb6c:	2b03      	cmp	r3, #3
 801bb6e:	d107      	bne.n	801bb80 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bb70:	68fa      	ldr	r2, [r7, #12]
 801bb72:	23ad      	movs	r3, #173	@ 0xad
 801bb74:	009b      	lsls	r3, r3, #2
 801bb76:	58d3      	ldr	r3, [r2, r3]
 801bb78:	68db      	ldr	r3, [r3, #12]
 801bb7a:	68fa      	ldr	r2, [r7, #12]
 801bb7c:	0010      	movs	r0, r2
 801bb7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	2180      	movs	r1, #128	@ 0x80
 801bb84:	0018      	movs	r0, r3
 801bb86:	f001 fc28 	bl	801d3da <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	0018      	movs	r0, r3
 801bb8e:	f000 fff8 	bl	801cb82 <USBD_CtlReceiveStatus>
 801bb92:	e010      	b.n	801bbb6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bb94:	68fa      	ldr	r2, [r7, #12]
 801bb96:	23a5      	movs	r3, #165	@ 0xa5
 801bb98:	009b      	lsls	r3, r3, #2
 801bb9a:	58d3      	ldr	r3, [r2, r3]
 801bb9c:	2b04      	cmp	r3, #4
 801bb9e:	d005      	beq.n	801bbac <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bba0:	68fa      	ldr	r2, [r7, #12]
 801bba2:	23a5      	movs	r3, #165	@ 0xa5
 801bba4:	009b      	lsls	r3, r3, #2
 801bba6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d104      	bne.n	801bbb6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	2180      	movs	r1, #128	@ 0x80
 801bbb0:	0018      	movs	r0, r3
 801bbb2:	f001 fc12 	bl	801d3da <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bbb6:	68fa      	ldr	r2, [r7, #12]
 801bbb8:	23a8      	movs	r3, #168	@ 0xa8
 801bbba:	009b      	lsls	r3, r3, #2
 801bbbc:	5cd3      	ldrb	r3, [r2, r3]
 801bbbe:	2b01      	cmp	r3, #1
 801bbc0:	d124      	bne.n	801bc0c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	0018      	movs	r0, r3
 801bbc6:	f7ff fe43 	bl	801b850 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bbca:	68fa      	ldr	r2, [r7, #12]
 801bbcc:	23a8      	movs	r3, #168	@ 0xa8
 801bbce:	009b      	lsls	r3, r3, #2
 801bbd0:	2100      	movs	r1, #0
 801bbd2:	54d1      	strb	r1, [r2, r3]
 801bbd4:	e01a      	b.n	801bc0c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bbd6:	68fa      	ldr	r2, [r7, #12]
 801bbd8:	23ad      	movs	r3, #173	@ 0xad
 801bbda:	009b      	lsls	r3, r3, #2
 801bbdc:	58d3      	ldr	r3, [r2, r3]
 801bbde:	695b      	ldr	r3, [r3, #20]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d011      	beq.n	801bc08 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bbe4:	68fa      	ldr	r2, [r7, #12]
 801bbe6:	23a7      	movs	r3, #167	@ 0xa7
 801bbe8:	009b      	lsls	r3, r3, #2
 801bbea:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bbec:	2b03      	cmp	r3, #3
 801bbee:	d10b      	bne.n	801bc08 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bbf0:	68fa      	ldr	r2, [r7, #12]
 801bbf2:	23ad      	movs	r3, #173	@ 0xad
 801bbf4:	009b      	lsls	r3, r3, #2
 801bbf6:	58d3      	ldr	r3, [r2, r3]
 801bbf8:	695b      	ldr	r3, [r3, #20]
 801bbfa:	220b      	movs	r2, #11
 801bbfc:	18ba      	adds	r2, r7, r2
 801bbfe:	7811      	ldrb	r1, [r2, #0]
 801bc00:	68fa      	ldr	r2, [r7, #12]
 801bc02:	0010      	movs	r0, r2
 801bc04:	4798      	blx	r3
 801bc06:	e001      	b.n	801bc0c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bc08:	2302      	movs	r3, #2
 801bc0a:	e000      	b.n	801bc0e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bc0c:	2300      	movs	r3, #0
}
 801bc0e:	0018      	movs	r0, r3
 801bc10:	46bd      	mov	sp, r7
 801bc12:	b006      	add	sp, #24
 801bc14:	bd80      	pop	{r7, pc}

0801bc16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bc16:	b580      	push	{r7, lr}
 801bc18:	b082      	sub	sp, #8
 801bc1a:	af00      	add	r7, sp, #0
 801bc1c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bc1e:	6878      	ldr	r0, [r7, #4]
 801bc20:	2340      	movs	r3, #64	@ 0x40
 801bc22:	2200      	movs	r2, #0
 801bc24:	2100      	movs	r1, #0
 801bc26:	f001 fb76 	bl	801d316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bc2a:	687a      	ldr	r2, [r7, #4]
 801bc2c:	23ac      	movs	r3, #172	@ 0xac
 801bc2e:	005b      	lsls	r3, r3, #1
 801bc30:	2101      	movs	r1, #1
 801bc32:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bc34:	687a      	ldr	r2, [r7, #4]
 801bc36:	23b2      	movs	r3, #178	@ 0xb2
 801bc38:	005b      	lsls	r3, r3, #1
 801bc3a:	2140      	movs	r1, #64	@ 0x40
 801bc3c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bc3e:	6878      	ldr	r0, [r7, #4]
 801bc40:	2340      	movs	r3, #64	@ 0x40
 801bc42:	2200      	movs	r2, #0
 801bc44:	2180      	movs	r1, #128	@ 0x80
 801bc46:	f001 fb66 	bl	801d316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	2201      	movs	r2, #1
 801bc4e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	2240      	movs	r2, #64	@ 0x40
 801bc54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bc56:	687a      	ldr	r2, [r7, #4]
 801bc58:	23a7      	movs	r3, #167	@ 0xa7
 801bc5a:	009b      	lsls	r3, r3, #2
 801bc5c:	2101      	movs	r1, #1
 801bc5e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801bc60:	687a      	ldr	r2, [r7, #4]
 801bc62:	23a5      	movs	r3, #165	@ 0xa5
 801bc64:	009b      	lsls	r3, r3, #2
 801bc66:	2100      	movs	r1, #0
 801bc68:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801bc70:	687a      	ldr	r2, [r7, #4]
 801bc72:	23a9      	movs	r3, #169	@ 0xa9
 801bc74:	009b      	lsls	r3, r3, #2
 801bc76:	2100      	movs	r1, #0
 801bc78:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801bc7a:	687a      	ldr	r2, [r7, #4]
 801bc7c:	23ae      	movs	r3, #174	@ 0xae
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	58d3      	ldr	r3, [r2, r3]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d00a      	beq.n	801bc9c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801bc86:	687a      	ldr	r2, [r7, #4]
 801bc88:	23ad      	movs	r3, #173	@ 0xad
 801bc8a:	009b      	lsls	r3, r3, #2
 801bc8c:	58d3      	ldr	r3, [r2, r3]
 801bc8e:	685a      	ldr	r2, [r3, #4]
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	685b      	ldr	r3, [r3, #4]
 801bc94:	b2d9      	uxtb	r1, r3
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	0018      	movs	r0, r3
 801bc9a:	4790      	blx	r2
  }

  return USBD_OK;
 801bc9c:	2300      	movs	r3, #0
}
 801bc9e:	0018      	movs	r0, r3
 801bca0:	46bd      	mov	sp, r7
 801bca2:	b002      	add	sp, #8
 801bca4:	bd80      	pop	{r7, pc}

0801bca6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bca6:	b580      	push	{r7, lr}
 801bca8:	b082      	sub	sp, #8
 801bcaa:	af00      	add	r7, sp, #0
 801bcac:	6078      	str	r0, [r7, #4]
 801bcae:	000a      	movs	r2, r1
 801bcb0:	1cfb      	adds	r3, r7, #3
 801bcb2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	1cfa      	adds	r2, r7, #3
 801bcb8:	7812      	ldrb	r2, [r2, #0]
 801bcba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bcbc:	2300      	movs	r3, #0
}
 801bcbe:	0018      	movs	r0, r3
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	b002      	add	sp, #8
 801bcc4:	bd80      	pop	{r7, pc}
	...

0801bcc8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b082      	sub	sp, #8
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bcd0:	687a      	ldr	r2, [r7, #4]
 801bcd2:	23a7      	movs	r3, #167	@ 0xa7
 801bcd4:	009b      	lsls	r3, r3, #2
 801bcd6:	5cd1      	ldrb	r1, [r2, r3]
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	4a06      	ldr	r2, [pc, #24]	@ (801bcf4 <USBD_LL_Suspend+0x2c>)
 801bcdc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bcde:	687a      	ldr	r2, [r7, #4]
 801bce0:	23a7      	movs	r3, #167	@ 0xa7
 801bce2:	009b      	lsls	r3, r3, #2
 801bce4:	2104      	movs	r1, #4
 801bce6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bce8:	2300      	movs	r3, #0
}
 801bcea:	0018      	movs	r0, r3
 801bcec:	46bd      	mov	sp, r7
 801bcee:	b002      	add	sp, #8
 801bcf0:	bd80      	pop	{r7, pc}
 801bcf2:	46c0      	nop			@ (mov r8, r8)
 801bcf4:	0000029d 	.word	0x0000029d

0801bcf8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bcf8:	b580      	push	{r7, lr}
 801bcfa:	b082      	sub	sp, #8
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bd00:	687a      	ldr	r2, [r7, #4]
 801bd02:	23a7      	movs	r3, #167	@ 0xa7
 801bd04:	009b      	lsls	r3, r3, #2
 801bd06:	5cd3      	ldrb	r3, [r2, r3]
 801bd08:	2b04      	cmp	r3, #4
 801bd0a:	d106      	bne.n	801bd1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	4a05      	ldr	r2, [pc, #20]	@ (801bd24 <USBD_LL_Resume+0x2c>)
 801bd10:	5c99      	ldrb	r1, [r3, r2]
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	23a7      	movs	r3, #167	@ 0xa7
 801bd16:	009b      	lsls	r3, r3, #2
 801bd18:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bd1a:	2300      	movs	r3, #0
}
 801bd1c:	0018      	movs	r0, r3
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	b002      	add	sp, #8
 801bd22:	bd80      	pop	{r7, pc}
 801bd24:	0000029d 	.word	0x0000029d

0801bd28 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b082      	sub	sp, #8
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd30:	687a      	ldr	r2, [r7, #4]
 801bd32:	23a7      	movs	r3, #167	@ 0xa7
 801bd34:	009b      	lsls	r3, r3, #2
 801bd36:	5cd3      	ldrb	r3, [r2, r3]
 801bd38:	2b03      	cmp	r3, #3
 801bd3a:	d10e      	bne.n	801bd5a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bd3c:	687a      	ldr	r2, [r7, #4]
 801bd3e:	23ad      	movs	r3, #173	@ 0xad
 801bd40:	009b      	lsls	r3, r3, #2
 801bd42:	58d3      	ldr	r3, [r2, r3]
 801bd44:	69db      	ldr	r3, [r3, #28]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d007      	beq.n	801bd5a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bd4a:	687a      	ldr	r2, [r7, #4]
 801bd4c:	23ad      	movs	r3, #173	@ 0xad
 801bd4e:	009b      	lsls	r3, r3, #2
 801bd50:	58d3      	ldr	r3, [r2, r3]
 801bd52:	69db      	ldr	r3, [r3, #28]
 801bd54:	687a      	ldr	r2, [r7, #4]
 801bd56:	0010      	movs	r0, r2
 801bd58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bd5a:	2300      	movs	r3, #0
}
 801bd5c:	0018      	movs	r0, r3
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	b002      	add	sp, #8
 801bd62:	bd80      	pop	{r7, pc}

0801bd64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b084      	sub	sp, #16
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
 801bd6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bd6e:	230f      	movs	r3, #15
 801bd70:	18fb      	adds	r3, r7, r3
 801bd72:	2200      	movs	r2, #0
 801bd74:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bd76:	683b      	ldr	r3, [r7, #0]
 801bd78:	781b      	ldrb	r3, [r3, #0]
 801bd7a:	001a      	movs	r2, r3
 801bd7c:	2360      	movs	r3, #96	@ 0x60
 801bd7e:	4013      	ands	r3, r2
 801bd80:	2b40      	cmp	r3, #64	@ 0x40
 801bd82:	d004      	beq.n	801bd8e <USBD_StdDevReq+0x2a>
 801bd84:	d84f      	bhi.n	801be26 <USBD_StdDevReq+0xc2>
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d00b      	beq.n	801bda2 <USBD_StdDevReq+0x3e>
 801bd8a:	2b20      	cmp	r3, #32
 801bd8c:	d14b      	bne.n	801be26 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bd8e:	687a      	ldr	r2, [r7, #4]
 801bd90:	23ad      	movs	r3, #173	@ 0xad
 801bd92:	009b      	lsls	r3, r3, #2
 801bd94:	58d3      	ldr	r3, [r2, r3]
 801bd96:	689b      	ldr	r3, [r3, #8]
 801bd98:	6839      	ldr	r1, [r7, #0]
 801bd9a:	687a      	ldr	r2, [r7, #4]
 801bd9c:	0010      	movs	r0, r2
 801bd9e:	4798      	blx	r3
      break;
 801bda0:	e048      	b.n	801be34 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bda2:	683b      	ldr	r3, [r7, #0]
 801bda4:	785b      	ldrb	r3, [r3, #1]
 801bda6:	2b09      	cmp	r3, #9
 801bda8:	d835      	bhi.n	801be16 <USBD_StdDevReq+0xb2>
 801bdaa:	009a      	lsls	r2, r3, #2
 801bdac:	4b25      	ldr	r3, [pc, #148]	@ (801be44 <USBD_StdDevReq+0xe0>)
 801bdae:	18d3      	adds	r3, r2, r3
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bdb4:	683a      	ldr	r2, [r7, #0]
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	0011      	movs	r1, r2
 801bdba:	0018      	movs	r0, r3
 801bdbc:	f000 fa52 	bl	801c264 <USBD_GetDescriptor>
          break;
 801bdc0:	e030      	b.n	801be24 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bdc2:	683a      	ldr	r2, [r7, #0]
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	0011      	movs	r1, r2
 801bdc8:	0018      	movs	r0, r3
 801bdca:	f000 fbfd 	bl	801c5c8 <USBD_SetAddress>
          break;
 801bdce:	e029      	b.n	801be24 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bdd0:	683a      	ldr	r2, [r7, #0]
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	0011      	movs	r1, r2
 801bdd6:	0018      	movs	r0, r3
 801bdd8:	f000 fc4a 	bl	801c670 <USBD_SetConfig>
          break;
 801bddc:	e022      	b.n	801be24 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bdde:	683a      	ldr	r2, [r7, #0]
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	0011      	movs	r1, r2
 801bde4:	0018      	movs	r0, r3
 801bde6:	f000 fce7 	bl	801c7b8 <USBD_GetConfig>
          break;
 801bdea:	e01b      	b.n	801be24 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bdec:	683a      	ldr	r2, [r7, #0]
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	0011      	movs	r1, r2
 801bdf2:	0018      	movs	r0, r3
 801bdf4:	f000 fd1b 	bl	801c82e <USBD_GetStatus>
          break;
 801bdf8:	e014      	b.n	801be24 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bdfa:	683a      	ldr	r2, [r7, #0]
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	0011      	movs	r1, r2
 801be00:	0018      	movs	r0, r3
 801be02:	f000 fd4e 	bl	801c8a2 <USBD_SetFeature>
          break;
 801be06:	e00d      	b.n	801be24 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801be08:	683a      	ldr	r2, [r7, #0]
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	0011      	movs	r1, r2
 801be0e:	0018      	movs	r0, r3
 801be10:	f000 fd5d 	bl	801c8ce <USBD_ClrFeature>
          break;
 801be14:	e006      	b.n	801be24 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801be16:	683a      	ldr	r2, [r7, #0]
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	0011      	movs	r1, r2
 801be1c:	0018      	movs	r0, r3
 801be1e:	f000 fdb4 	bl	801c98a <USBD_CtlError>
          break;
 801be22:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801be24:	e006      	b.n	801be34 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801be26:	683a      	ldr	r2, [r7, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	0011      	movs	r1, r2
 801be2c:	0018      	movs	r0, r3
 801be2e:	f000 fdac 	bl	801c98a <USBD_CtlError>
      break;
 801be32:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801be34:	230f      	movs	r3, #15
 801be36:	18fb      	adds	r3, r7, r3
 801be38:	781b      	ldrb	r3, [r3, #0]
}
 801be3a:	0018      	movs	r0, r3
 801be3c:	46bd      	mov	sp, r7
 801be3e:	b004      	add	sp, #16
 801be40:	bd80      	pop	{r7, pc}
 801be42:	46c0      	nop			@ (mov r8, r8)
 801be44:	08025698 	.word	0x08025698

0801be48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801be48:	b5b0      	push	{r4, r5, r7, lr}
 801be4a:	b084      	sub	sp, #16
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	6078      	str	r0, [r7, #4]
 801be50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801be52:	230f      	movs	r3, #15
 801be54:	18fb      	adds	r3, r7, r3
 801be56:	2200      	movs	r2, #0
 801be58:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801be5a:	683b      	ldr	r3, [r7, #0]
 801be5c:	781b      	ldrb	r3, [r3, #0]
 801be5e:	001a      	movs	r2, r3
 801be60:	2360      	movs	r3, #96	@ 0x60
 801be62:	4013      	ands	r3, r2
 801be64:	2b40      	cmp	r3, #64	@ 0x40
 801be66:	d004      	beq.n	801be72 <USBD_StdItfReq+0x2a>
 801be68:	d839      	bhi.n	801bede <USBD_StdItfReq+0x96>
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d001      	beq.n	801be72 <USBD_StdItfReq+0x2a>
 801be6e:	2b20      	cmp	r3, #32
 801be70:	d135      	bne.n	801bede <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801be72:	687a      	ldr	r2, [r7, #4]
 801be74:	23a7      	movs	r3, #167	@ 0xa7
 801be76:	009b      	lsls	r3, r3, #2
 801be78:	5cd3      	ldrb	r3, [r2, r3]
 801be7a:	3b01      	subs	r3, #1
 801be7c:	2b02      	cmp	r3, #2
 801be7e:	d825      	bhi.n	801becc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	889b      	ldrh	r3, [r3, #4]
 801be84:	b2db      	uxtb	r3, r3
 801be86:	2b01      	cmp	r3, #1
 801be88:	d819      	bhi.n	801bebe <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801be8a:	687a      	ldr	r2, [r7, #4]
 801be8c:	23ad      	movs	r3, #173	@ 0xad
 801be8e:	009b      	lsls	r3, r3, #2
 801be90:	58d3      	ldr	r3, [r2, r3]
 801be92:	689b      	ldr	r3, [r3, #8]
 801be94:	250f      	movs	r5, #15
 801be96:	197c      	adds	r4, r7, r5
 801be98:	6839      	ldr	r1, [r7, #0]
 801be9a:	687a      	ldr	r2, [r7, #4]
 801be9c:	0010      	movs	r0, r2
 801be9e:	4798      	blx	r3
 801bea0:	0003      	movs	r3, r0
 801bea2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801bea4:	683b      	ldr	r3, [r7, #0]
 801bea6:	88db      	ldrh	r3, [r3, #6]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d116      	bne.n	801beda <USBD_StdItfReq+0x92>
 801beac:	197b      	adds	r3, r7, r5
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d112      	bne.n	801beda <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	0018      	movs	r0, r3
 801beb8:	f000 fe4f 	bl	801cb5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801bebc:	e00d      	b.n	801beda <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801bebe:	683a      	ldr	r2, [r7, #0]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	0011      	movs	r1, r2
 801bec4:	0018      	movs	r0, r3
 801bec6:	f000 fd60 	bl	801c98a <USBD_CtlError>
          break;
 801beca:	e006      	b.n	801beda <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801becc:	683a      	ldr	r2, [r7, #0]
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	0011      	movs	r1, r2
 801bed2:	0018      	movs	r0, r3
 801bed4:	f000 fd59 	bl	801c98a <USBD_CtlError>
          break;
 801bed8:	e000      	b.n	801bedc <USBD_StdItfReq+0x94>
          break;
 801beda:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bedc:	e006      	b.n	801beec <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801bede:	683a      	ldr	r2, [r7, #0]
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	0011      	movs	r1, r2
 801bee4:	0018      	movs	r0, r3
 801bee6:	f000 fd50 	bl	801c98a <USBD_CtlError>
      break;
 801beea:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801beec:	2300      	movs	r3, #0
}
 801beee:	0018      	movs	r0, r3
 801bef0:	46bd      	mov	sp, r7
 801bef2:	b004      	add	sp, #16
 801bef4:	bdb0      	pop	{r4, r5, r7, pc}

0801bef6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801bef6:	b5b0      	push	{r4, r5, r7, lr}
 801bef8:	b084      	sub	sp, #16
 801befa:	af00      	add	r7, sp, #0
 801befc:	6078      	str	r0, [r7, #4]
 801befe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801bf00:	230f      	movs	r3, #15
 801bf02:	18fb      	adds	r3, r7, r3
 801bf04:	2200      	movs	r2, #0
 801bf06:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801bf08:	683b      	ldr	r3, [r7, #0]
 801bf0a:	889a      	ldrh	r2, [r3, #4]
 801bf0c:	230e      	movs	r3, #14
 801bf0e:	18fb      	adds	r3, r7, r3
 801bf10:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	781b      	ldrb	r3, [r3, #0]
 801bf16:	001a      	movs	r2, r3
 801bf18:	2360      	movs	r3, #96	@ 0x60
 801bf1a:	4013      	ands	r3, r2
 801bf1c:	2b40      	cmp	r3, #64	@ 0x40
 801bf1e:	d006      	beq.n	801bf2e <USBD_StdEPReq+0x38>
 801bf20:	d900      	bls.n	801bf24 <USBD_StdEPReq+0x2e>
 801bf22:	e190      	b.n	801c246 <USBD_StdEPReq+0x350>
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d00c      	beq.n	801bf42 <USBD_StdEPReq+0x4c>
 801bf28:	2b20      	cmp	r3, #32
 801bf2a:	d000      	beq.n	801bf2e <USBD_StdEPReq+0x38>
 801bf2c:	e18b      	b.n	801c246 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bf2e:	687a      	ldr	r2, [r7, #4]
 801bf30:	23ad      	movs	r3, #173	@ 0xad
 801bf32:	009b      	lsls	r3, r3, #2
 801bf34:	58d3      	ldr	r3, [r2, r3]
 801bf36:	689b      	ldr	r3, [r3, #8]
 801bf38:	6839      	ldr	r1, [r7, #0]
 801bf3a:	687a      	ldr	r2, [r7, #4]
 801bf3c:	0010      	movs	r0, r2
 801bf3e:	4798      	blx	r3
      break;
 801bf40:	e188      	b.n	801c254 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801bf42:	683b      	ldr	r3, [r7, #0]
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	001a      	movs	r2, r3
 801bf48:	2360      	movs	r3, #96	@ 0x60
 801bf4a:	4013      	ands	r3, r2
 801bf4c:	2b20      	cmp	r3, #32
 801bf4e:	d10f      	bne.n	801bf70 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801bf50:	687a      	ldr	r2, [r7, #4]
 801bf52:	23ad      	movs	r3, #173	@ 0xad
 801bf54:	009b      	lsls	r3, r3, #2
 801bf56:	58d3      	ldr	r3, [r2, r3]
 801bf58:	689b      	ldr	r3, [r3, #8]
 801bf5a:	250f      	movs	r5, #15
 801bf5c:	197c      	adds	r4, r7, r5
 801bf5e:	6839      	ldr	r1, [r7, #0]
 801bf60:	687a      	ldr	r2, [r7, #4]
 801bf62:	0010      	movs	r0, r2
 801bf64:	4798      	blx	r3
 801bf66:	0003      	movs	r3, r0
 801bf68:	7023      	strb	r3, [r4, #0]

        return ret;
 801bf6a:	197b      	adds	r3, r7, r5
 801bf6c:	781b      	ldrb	r3, [r3, #0]
 801bf6e:	e174      	b.n	801c25a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801bf70:	683b      	ldr	r3, [r7, #0]
 801bf72:	785b      	ldrb	r3, [r3, #1]
 801bf74:	2b03      	cmp	r3, #3
 801bf76:	d007      	beq.n	801bf88 <USBD_StdEPReq+0x92>
 801bf78:	dd00      	ble.n	801bf7c <USBD_StdEPReq+0x86>
 801bf7a:	e15c      	b.n	801c236 <USBD_StdEPReq+0x340>
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d100      	bne.n	801bf82 <USBD_StdEPReq+0x8c>
 801bf80:	e092      	b.n	801c0a8 <USBD_StdEPReq+0x1b2>
 801bf82:	2b01      	cmp	r3, #1
 801bf84:	d04b      	beq.n	801c01e <USBD_StdEPReq+0x128>
 801bf86:	e156      	b.n	801c236 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801bf88:	687a      	ldr	r2, [r7, #4]
 801bf8a:	23a7      	movs	r3, #167	@ 0xa7
 801bf8c:	009b      	lsls	r3, r3, #2
 801bf8e:	5cd3      	ldrb	r3, [r2, r3]
 801bf90:	2b02      	cmp	r3, #2
 801bf92:	d002      	beq.n	801bf9a <USBD_StdEPReq+0xa4>
 801bf94:	2b03      	cmp	r3, #3
 801bf96:	d01d      	beq.n	801bfd4 <USBD_StdEPReq+0xde>
 801bf98:	e039      	b.n	801c00e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bf9a:	220e      	movs	r2, #14
 801bf9c:	18bb      	adds	r3, r7, r2
 801bf9e:	781b      	ldrb	r3, [r3, #0]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d010      	beq.n	801bfc6 <USBD_StdEPReq+0xd0>
 801bfa4:	18bb      	adds	r3, r7, r2
 801bfa6:	781b      	ldrb	r3, [r3, #0]
 801bfa8:	2b80      	cmp	r3, #128	@ 0x80
 801bfaa:	d00c      	beq.n	801bfc6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801bfac:	18bb      	adds	r3, r7, r2
 801bfae:	781a      	ldrb	r2, [r3, #0]
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	0011      	movs	r1, r2
 801bfb4:	0018      	movs	r0, r3
 801bfb6:	f001 fa10 	bl	801d3da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	2180      	movs	r1, #128	@ 0x80
 801bfbe:	0018      	movs	r0, r3
 801bfc0:	f001 fa0b 	bl	801d3da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bfc4:	e02a      	b.n	801c01c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801bfc6:	683a      	ldr	r2, [r7, #0]
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	0011      	movs	r1, r2
 801bfcc:	0018      	movs	r0, r3
 801bfce:	f000 fcdc 	bl	801c98a <USBD_CtlError>
              break;
 801bfd2:	e023      	b.n	801c01c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bfd4:	683b      	ldr	r3, [r7, #0]
 801bfd6:	885b      	ldrh	r3, [r3, #2]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d113      	bne.n	801c004 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801bfdc:	220e      	movs	r2, #14
 801bfde:	18bb      	adds	r3, r7, r2
 801bfe0:	781b      	ldrb	r3, [r3, #0]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d00e      	beq.n	801c004 <USBD_StdEPReq+0x10e>
 801bfe6:	18bb      	adds	r3, r7, r2
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	2b80      	cmp	r3, #128	@ 0x80
 801bfec:	d00a      	beq.n	801c004 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	88db      	ldrh	r3, [r3, #6]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d106      	bne.n	801c004 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801bff6:	18bb      	adds	r3, r7, r2
 801bff8:	781a      	ldrb	r2, [r3, #0]
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	0011      	movs	r1, r2
 801bffe:	0018      	movs	r0, r3
 801c000:	f001 f9eb 	bl	801d3da <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	0018      	movs	r0, r3
 801c008:	f000 fda7 	bl	801cb5a <USBD_CtlSendStatus>

              break;
 801c00c:	e006      	b.n	801c01c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c00e:	683a      	ldr	r2, [r7, #0]
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	0011      	movs	r1, r2
 801c014:	0018      	movs	r0, r3
 801c016:	f000 fcb8 	bl	801c98a <USBD_CtlError>
              break;
 801c01a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c01c:	e112      	b.n	801c244 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c01e:	687a      	ldr	r2, [r7, #4]
 801c020:	23a7      	movs	r3, #167	@ 0xa7
 801c022:	009b      	lsls	r3, r3, #2
 801c024:	5cd3      	ldrb	r3, [r2, r3]
 801c026:	2b02      	cmp	r3, #2
 801c028:	d002      	beq.n	801c030 <USBD_StdEPReq+0x13a>
 801c02a:	2b03      	cmp	r3, #3
 801c02c:	d01d      	beq.n	801c06a <USBD_StdEPReq+0x174>
 801c02e:	e032      	b.n	801c096 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c030:	220e      	movs	r2, #14
 801c032:	18bb      	adds	r3, r7, r2
 801c034:	781b      	ldrb	r3, [r3, #0]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d010      	beq.n	801c05c <USBD_StdEPReq+0x166>
 801c03a:	18bb      	adds	r3, r7, r2
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	2b80      	cmp	r3, #128	@ 0x80
 801c040:	d00c      	beq.n	801c05c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c042:	18bb      	adds	r3, r7, r2
 801c044:	781a      	ldrb	r2, [r3, #0]
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	0011      	movs	r1, r2
 801c04a:	0018      	movs	r0, r3
 801c04c:	f001 f9c5 	bl	801d3da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	2180      	movs	r1, #128	@ 0x80
 801c054:	0018      	movs	r0, r3
 801c056:	f001 f9c0 	bl	801d3da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c05a:	e024      	b.n	801c0a6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c05c:	683a      	ldr	r2, [r7, #0]
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	0011      	movs	r1, r2
 801c062:	0018      	movs	r0, r3
 801c064:	f000 fc91 	bl	801c98a <USBD_CtlError>
              break;
 801c068:	e01d      	b.n	801c0a6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c06a:	683b      	ldr	r3, [r7, #0]
 801c06c:	885b      	ldrh	r3, [r3, #2]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d118      	bne.n	801c0a4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c072:	210e      	movs	r1, #14
 801c074:	187b      	adds	r3, r7, r1
 801c076:	781b      	ldrb	r3, [r3, #0]
 801c078:	227f      	movs	r2, #127	@ 0x7f
 801c07a:	4013      	ands	r3, r2
 801c07c:	d006      	beq.n	801c08c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c07e:	187b      	adds	r3, r7, r1
 801c080:	781a      	ldrb	r2, [r3, #0]
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	0011      	movs	r1, r2
 801c086:	0018      	movs	r0, r3
 801c088:	f001 f9d2 	bl	801d430 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	0018      	movs	r0, r3
 801c090:	f000 fd63 	bl	801cb5a <USBD_CtlSendStatus>
              }
              break;
 801c094:	e006      	b.n	801c0a4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c096:	683a      	ldr	r2, [r7, #0]
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	0011      	movs	r1, r2
 801c09c:	0018      	movs	r0, r3
 801c09e:	f000 fc74 	bl	801c98a <USBD_CtlError>
              break;
 801c0a2:	e000      	b.n	801c0a6 <USBD_StdEPReq+0x1b0>
              break;
 801c0a4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c0a6:	e0cd      	b.n	801c244 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c0a8:	687a      	ldr	r2, [r7, #4]
 801c0aa:	23a7      	movs	r3, #167	@ 0xa7
 801c0ac:	009b      	lsls	r3, r3, #2
 801c0ae:	5cd3      	ldrb	r3, [r2, r3]
 801c0b0:	2b02      	cmp	r3, #2
 801c0b2:	d002      	beq.n	801c0ba <USBD_StdEPReq+0x1c4>
 801c0b4:	2b03      	cmp	r3, #3
 801c0b6:	d03c      	beq.n	801c132 <USBD_StdEPReq+0x23c>
 801c0b8:	e0b5      	b.n	801c226 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c0ba:	220e      	movs	r2, #14
 801c0bc:	18bb      	adds	r3, r7, r2
 801c0be:	781b      	ldrb	r3, [r3, #0]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d00a      	beq.n	801c0da <USBD_StdEPReq+0x1e4>
 801c0c4:	18bb      	adds	r3, r7, r2
 801c0c6:	781b      	ldrb	r3, [r3, #0]
 801c0c8:	2b80      	cmp	r3, #128	@ 0x80
 801c0ca:	d006      	beq.n	801c0da <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c0cc:	683a      	ldr	r2, [r7, #0]
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	0011      	movs	r1, r2
 801c0d2:	0018      	movs	r0, r3
 801c0d4:	f000 fc59 	bl	801c98a <USBD_CtlError>
                break;
 801c0d8:	e0ac      	b.n	801c234 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c0da:	220e      	movs	r2, #14
 801c0dc:	18bb      	adds	r3, r7, r2
 801c0de:	781b      	ldrb	r3, [r3, #0]
 801c0e0:	b25b      	sxtb	r3, r3
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	da0c      	bge.n	801c100 <USBD_StdEPReq+0x20a>
 801c0e6:	18bb      	adds	r3, r7, r2
 801c0e8:	781b      	ldrb	r3, [r3, #0]
 801c0ea:	227f      	movs	r2, #127	@ 0x7f
 801c0ec:	401a      	ands	r2, r3
 801c0ee:	0013      	movs	r3, r2
 801c0f0:	009b      	lsls	r3, r3, #2
 801c0f2:	189b      	adds	r3, r3, r2
 801c0f4:	009b      	lsls	r3, r3, #2
 801c0f6:	3310      	adds	r3, #16
 801c0f8:	687a      	ldr	r2, [r7, #4]
 801c0fa:	18d3      	adds	r3, r2, r3
 801c0fc:	3304      	adds	r3, #4
 801c0fe:	e00d      	b.n	801c11c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c100:	230e      	movs	r3, #14
 801c102:	18fb      	adds	r3, r7, r3
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	227f      	movs	r2, #127	@ 0x7f
 801c108:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c10a:	0013      	movs	r3, r2
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	189b      	adds	r3, r3, r2
 801c110:	009b      	lsls	r3, r3, #2
 801c112:	3351      	adds	r3, #81	@ 0x51
 801c114:	33ff      	adds	r3, #255	@ 0xff
 801c116:	687a      	ldr	r2, [r7, #4]
 801c118:	18d3      	adds	r3, r2, r3
 801c11a:	3304      	adds	r3, #4
 801c11c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c11e:	68bb      	ldr	r3, [r7, #8]
 801c120:	2200      	movs	r2, #0
 801c122:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c124:	68b9      	ldr	r1, [r7, #8]
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	2202      	movs	r2, #2
 801c12a:	0018      	movs	r0, r3
 801c12c:	f000 fcab 	bl	801ca86 <USBD_CtlSendData>
              break;
 801c130:	e080      	b.n	801c234 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c132:	220e      	movs	r2, #14
 801c134:	18bb      	adds	r3, r7, r2
 801c136:	781b      	ldrb	r3, [r3, #0]
 801c138:	b25b      	sxtb	r3, r3
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	da14      	bge.n	801c168 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c13e:	18bb      	adds	r3, r7, r2
 801c140:	781b      	ldrb	r3, [r3, #0]
 801c142:	220f      	movs	r2, #15
 801c144:	401a      	ands	r2, r3
 801c146:	6879      	ldr	r1, [r7, #4]
 801c148:	0013      	movs	r3, r2
 801c14a:	009b      	lsls	r3, r3, #2
 801c14c:	189b      	adds	r3, r3, r2
 801c14e:	009b      	lsls	r3, r3, #2
 801c150:	18cb      	adds	r3, r1, r3
 801c152:	3318      	adds	r3, #24
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d11e      	bne.n	801c198 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c15a:	683a      	ldr	r2, [r7, #0]
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	0011      	movs	r1, r2
 801c160:	0018      	movs	r0, r3
 801c162:	f000 fc12 	bl	801c98a <USBD_CtlError>
                  break;
 801c166:	e065      	b.n	801c234 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c168:	230e      	movs	r3, #14
 801c16a:	18fb      	adds	r3, r7, r3
 801c16c:	781b      	ldrb	r3, [r3, #0]
 801c16e:	220f      	movs	r2, #15
 801c170:	401a      	ands	r2, r3
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	23ac      	movs	r3, #172	@ 0xac
 801c176:	0059      	lsls	r1, r3, #1
 801c178:	0013      	movs	r3, r2
 801c17a:	009b      	lsls	r3, r3, #2
 801c17c:	189b      	adds	r3, r3, r2
 801c17e:	009b      	lsls	r3, r3, #2
 801c180:	18c3      	adds	r3, r0, r3
 801c182:	185b      	adds	r3, r3, r1
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d106      	bne.n	801c198 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c18a:	683a      	ldr	r2, [r7, #0]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	0011      	movs	r1, r2
 801c190:	0018      	movs	r0, r3
 801c192:	f000 fbfa 	bl	801c98a <USBD_CtlError>
                  break;
 801c196:	e04d      	b.n	801c234 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c198:	220e      	movs	r2, #14
 801c19a:	18bb      	adds	r3, r7, r2
 801c19c:	781b      	ldrb	r3, [r3, #0]
 801c19e:	b25b      	sxtb	r3, r3
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	da0c      	bge.n	801c1be <USBD_StdEPReq+0x2c8>
 801c1a4:	18bb      	adds	r3, r7, r2
 801c1a6:	781b      	ldrb	r3, [r3, #0]
 801c1a8:	227f      	movs	r2, #127	@ 0x7f
 801c1aa:	401a      	ands	r2, r3
 801c1ac:	0013      	movs	r3, r2
 801c1ae:	009b      	lsls	r3, r3, #2
 801c1b0:	189b      	adds	r3, r3, r2
 801c1b2:	009b      	lsls	r3, r3, #2
 801c1b4:	3310      	adds	r3, #16
 801c1b6:	687a      	ldr	r2, [r7, #4]
 801c1b8:	18d3      	adds	r3, r2, r3
 801c1ba:	3304      	adds	r3, #4
 801c1bc:	e00d      	b.n	801c1da <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c1be:	230e      	movs	r3, #14
 801c1c0:	18fb      	adds	r3, r7, r3
 801c1c2:	781b      	ldrb	r3, [r3, #0]
 801c1c4:	227f      	movs	r2, #127	@ 0x7f
 801c1c6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c1c8:	0013      	movs	r3, r2
 801c1ca:	009b      	lsls	r3, r3, #2
 801c1cc:	189b      	adds	r3, r3, r2
 801c1ce:	009b      	lsls	r3, r3, #2
 801c1d0:	3351      	adds	r3, #81	@ 0x51
 801c1d2:	33ff      	adds	r3, #255	@ 0xff
 801c1d4:	687a      	ldr	r2, [r7, #4]
 801c1d6:	18d3      	adds	r3, r2, r3
 801c1d8:	3304      	adds	r3, #4
 801c1da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c1dc:	220e      	movs	r2, #14
 801c1de:	18bb      	adds	r3, r7, r2
 801c1e0:	781b      	ldrb	r3, [r3, #0]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d003      	beq.n	801c1ee <USBD_StdEPReq+0x2f8>
 801c1e6:	18bb      	adds	r3, r7, r2
 801c1e8:	781b      	ldrb	r3, [r3, #0]
 801c1ea:	2b80      	cmp	r3, #128	@ 0x80
 801c1ec:	d103      	bne.n	801c1f6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c1ee:	68bb      	ldr	r3, [r7, #8]
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	601a      	str	r2, [r3, #0]
 801c1f4:	e010      	b.n	801c218 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c1f6:	230e      	movs	r3, #14
 801c1f8:	18fb      	adds	r3, r7, r3
 801c1fa:	781a      	ldrb	r2, [r3, #0]
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	0011      	movs	r1, r2
 801c200:	0018      	movs	r0, r3
 801c202:	f001 f940 	bl	801d486 <USBD_LL_IsStallEP>
 801c206:	1e03      	subs	r3, r0, #0
 801c208:	d003      	beq.n	801c212 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c20a:	68bb      	ldr	r3, [r7, #8]
 801c20c:	2201      	movs	r2, #1
 801c20e:	601a      	str	r2, [r3, #0]
 801c210:	e002      	b.n	801c218 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c212:	68bb      	ldr	r3, [r7, #8]
 801c214:	2200      	movs	r2, #0
 801c216:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c218:	68b9      	ldr	r1, [r7, #8]
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	2202      	movs	r2, #2
 801c21e:	0018      	movs	r0, r3
 801c220:	f000 fc31 	bl	801ca86 <USBD_CtlSendData>
              break;
 801c224:	e006      	b.n	801c234 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c226:	683a      	ldr	r2, [r7, #0]
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	0011      	movs	r1, r2
 801c22c:	0018      	movs	r0, r3
 801c22e:	f000 fbac 	bl	801c98a <USBD_CtlError>
              break;
 801c232:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c234:	e006      	b.n	801c244 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c236:	683a      	ldr	r2, [r7, #0]
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	0011      	movs	r1, r2
 801c23c:	0018      	movs	r0, r3
 801c23e:	f000 fba4 	bl	801c98a <USBD_CtlError>
          break;
 801c242:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c244:	e006      	b.n	801c254 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c246:	683a      	ldr	r2, [r7, #0]
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	0011      	movs	r1, r2
 801c24c:	0018      	movs	r0, r3
 801c24e:	f000 fb9c 	bl	801c98a <USBD_CtlError>
      break;
 801c252:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c254:	230f      	movs	r3, #15
 801c256:	18fb      	adds	r3, r7, r3
 801c258:	781b      	ldrb	r3, [r3, #0]
}
 801c25a:	0018      	movs	r0, r3
 801c25c:	46bd      	mov	sp, r7
 801c25e:	b004      	add	sp, #16
 801c260:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c264 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b084      	sub	sp, #16
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
 801c26c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c26e:	2308      	movs	r3, #8
 801c270:	18fb      	adds	r3, r7, r3
 801c272:	2200      	movs	r2, #0
 801c274:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c276:	2300      	movs	r3, #0
 801c278:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c27a:	230b      	movs	r3, #11
 801c27c:	18fb      	adds	r3, r7, r3
 801c27e:	2200      	movs	r2, #0
 801c280:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c282:	683b      	ldr	r3, [r7, #0]
 801c284:	885b      	ldrh	r3, [r3, #2]
 801c286:	0a1b      	lsrs	r3, r3, #8
 801c288:	b29b      	uxth	r3, r3
 801c28a:	2b07      	cmp	r3, #7
 801c28c:	d900      	bls.n	801c290 <USBD_GetDescriptor+0x2c>
 801c28e:	e159      	b.n	801c544 <USBD_GetDescriptor+0x2e0>
 801c290:	009a      	lsls	r2, r3, #2
 801c292:	4bcb      	ldr	r3, [pc, #812]	@ (801c5c0 <USBD_GetDescriptor+0x35c>)
 801c294:	18d3      	adds	r3, r2, r3
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c29a:	687a      	ldr	r2, [r7, #4]
 801c29c:	23ac      	movs	r3, #172	@ 0xac
 801c29e:	009b      	lsls	r3, r3, #2
 801c2a0:	58d3      	ldr	r3, [r2, r3]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	687a      	ldr	r2, [r7, #4]
 801c2a6:	7c12      	ldrb	r2, [r2, #16]
 801c2a8:	2108      	movs	r1, #8
 801c2aa:	1879      	adds	r1, r7, r1
 801c2ac:	0010      	movs	r0, r2
 801c2ae:	4798      	blx	r3
 801c2b0:	0003      	movs	r3, r0
 801c2b2:	60fb      	str	r3, [r7, #12]
      break;
 801c2b4:	e153      	b.n	801c55e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	7c1b      	ldrb	r3, [r3, #16]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d10f      	bne.n	801c2de <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	23ad      	movs	r3, #173	@ 0xad
 801c2c2:	009b      	lsls	r3, r3, #2
 801c2c4:	58d3      	ldr	r3, [r2, r3]
 801c2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2c8:	2208      	movs	r2, #8
 801c2ca:	18ba      	adds	r2, r7, r2
 801c2cc:	0010      	movs	r0, r2
 801c2ce:	4798      	blx	r3
 801c2d0:	0003      	movs	r3, r0
 801c2d2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	3301      	adds	r3, #1
 801c2d8:	2202      	movs	r2, #2
 801c2da:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c2dc:	e13f      	b.n	801c55e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c2de:	687a      	ldr	r2, [r7, #4]
 801c2e0:	23ad      	movs	r3, #173	@ 0xad
 801c2e2:	009b      	lsls	r3, r3, #2
 801c2e4:	58d3      	ldr	r3, [r2, r3]
 801c2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2e8:	2208      	movs	r2, #8
 801c2ea:	18ba      	adds	r2, r7, r2
 801c2ec:	0010      	movs	r0, r2
 801c2ee:	4798      	blx	r3
 801c2f0:	0003      	movs	r3, r0
 801c2f2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	3301      	adds	r3, #1
 801c2f8:	2202      	movs	r2, #2
 801c2fa:	701a      	strb	r2, [r3, #0]
      break;
 801c2fc:	e12f      	b.n	801c55e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	885b      	ldrh	r3, [r3, #2]
 801c302:	b2db      	uxtb	r3, r3
 801c304:	2b05      	cmp	r3, #5
 801c306:	d900      	bls.n	801c30a <USBD_GetDescriptor+0xa6>
 801c308:	e0d0      	b.n	801c4ac <USBD_GetDescriptor+0x248>
 801c30a:	009a      	lsls	r2, r3, #2
 801c30c:	4bad      	ldr	r3, [pc, #692]	@ (801c5c4 <USBD_GetDescriptor+0x360>)
 801c30e:	18d3      	adds	r3, r2, r3
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c314:	687a      	ldr	r2, [r7, #4]
 801c316:	23ac      	movs	r3, #172	@ 0xac
 801c318:	009b      	lsls	r3, r3, #2
 801c31a:	58d3      	ldr	r3, [r2, r3]
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d00d      	beq.n	801c33e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c322:	687a      	ldr	r2, [r7, #4]
 801c324:	23ac      	movs	r3, #172	@ 0xac
 801c326:	009b      	lsls	r3, r3, #2
 801c328:	58d3      	ldr	r3, [r2, r3]
 801c32a:	685b      	ldr	r3, [r3, #4]
 801c32c:	687a      	ldr	r2, [r7, #4]
 801c32e:	7c12      	ldrb	r2, [r2, #16]
 801c330:	2108      	movs	r1, #8
 801c332:	1879      	adds	r1, r7, r1
 801c334:	0010      	movs	r0, r2
 801c336:	4798      	blx	r3
 801c338:	0003      	movs	r3, r0
 801c33a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c33c:	e0c3      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c33e:	683a      	ldr	r2, [r7, #0]
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	0011      	movs	r1, r2
 801c344:	0018      	movs	r0, r3
 801c346:	f000 fb20 	bl	801c98a <USBD_CtlError>
            err++;
 801c34a:	210b      	movs	r1, #11
 801c34c:	187b      	adds	r3, r7, r1
 801c34e:	781a      	ldrb	r2, [r3, #0]
 801c350:	187b      	adds	r3, r7, r1
 801c352:	3201      	adds	r2, #1
 801c354:	701a      	strb	r2, [r3, #0]
          break;
 801c356:	e0b6      	b.n	801c4c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c358:	687a      	ldr	r2, [r7, #4]
 801c35a:	23ac      	movs	r3, #172	@ 0xac
 801c35c:	009b      	lsls	r3, r3, #2
 801c35e:	58d3      	ldr	r3, [r2, r3]
 801c360:	689b      	ldr	r3, [r3, #8]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d00d      	beq.n	801c382 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c366:	687a      	ldr	r2, [r7, #4]
 801c368:	23ac      	movs	r3, #172	@ 0xac
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	58d3      	ldr	r3, [r2, r3]
 801c36e:	689b      	ldr	r3, [r3, #8]
 801c370:	687a      	ldr	r2, [r7, #4]
 801c372:	7c12      	ldrb	r2, [r2, #16]
 801c374:	2108      	movs	r1, #8
 801c376:	1879      	adds	r1, r7, r1
 801c378:	0010      	movs	r0, r2
 801c37a:	4798      	blx	r3
 801c37c:	0003      	movs	r3, r0
 801c37e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c380:	e0a1      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c382:	683a      	ldr	r2, [r7, #0]
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	0011      	movs	r1, r2
 801c388:	0018      	movs	r0, r3
 801c38a:	f000 fafe 	bl	801c98a <USBD_CtlError>
            err++;
 801c38e:	210b      	movs	r1, #11
 801c390:	187b      	adds	r3, r7, r1
 801c392:	781a      	ldrb	r2, [r3, #0]
 801c394:	187b      	adds	r3, r7, r1
 801c396:	3201      	adds	r2, #1
 801c398:	701a      	strb	r2, [r3, #0]
          break;
 801c39a:	e094      	b.n	801c4c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c39c:	687a      	ldr	r2, [r7, #4]
 801c39e:	23ac      	movs	r3, #172	@ 0xac
 801c3a0:	009b      	lsls	r3, r3, #2
 801c3a2:	58d3      	ldr	r3, [r2, r3]
 801c3a4:	68db      	ldr	r3, [r3, #12]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d00d      	beq.n	801c3c6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c3aa:	687a      	ldr	r2, [r7, #4]
 801c3ac:	23ac      	movs	r3, #172	@ 0xac
 801c3ae:	009b      	lsls	r3, r3, #2
 801c3b0:	58d3      	ldr	r3, [r2, r3]
 801c3b2:	68db      	ldr	r3, [r3, #12]
 801c3b4:	687a      	ldr	r2, [r7, #4]
 801c3b6:	7c12      	ldrb	r2, [r2, #16]
 801c3b8:	2108      	movs	r1, #8
 801c3ba:	1879      	adds	r1, r7, r1
 801c3bc:	0010      	movs	r0, r2
 801c3be:	4798      	blx	r3
 801c3c0:	0003      	movs	r3, r0
 801c3c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3c4:	e07f      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3c6:	683a      	ldr	r2, [r7, #0]
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	0011      	movs	r1, r2
 801c3cc:	0018      	movs	r0, r3
 801c3ce:	f000 fadc 	bl	801c98a <USBD_CtlError>
            err++;
 801c3d2:	210b      	movs	r1, #11
 801c3d4:	187b      	adds	r3, r7, r1
 801c3d6:	781a      	ldrb	r2, [r3, #0]
 801c3d8:	187b      	adds	r3, r7, r1
 801c3da:	3201      	adds	r2, #1
 801c3dc:	701a      	strb	r2, [r3, #0]
          break;
 801c3de:	e072      	b.n	801c4c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c3e0:	687a      	ldr	r2, [r7, #4]
 801c3e2:	23ac      	movs	r3, #172	@ 0xac
 801c3e4:	009b      	lsls	r3, r3, #2
 801c3e6:	58d3      	ldr	r3, [r2, r3]
 801c3e8:	691b      	ldr	r3, [r3, #16]
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d00d      	beq.n	801c40a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c3ee:	687a      	ldr	r2, [r7, #4]
 801c3f0:	23ac      	movs	r3, #172	@ 0xac
 801c3f2:	009b      	lsls	r3, r3, #2
 801c3f4:	58d3      	ldr	r3, [r2, r3]
 801c3f6:	691b      	ldr	r3, [r3, #16]
 801c3f8:	687a      	ldr	r2, [r7, #4]
 801c3fa:	7c12      	ldrb	r2, [r2, #16]
 801c3fc:	2108      	movs	r1, #8
 801c3fe:	1879      	adds	r1, r7, r1
 801c400:	0010      	movs	r0, r2
 801c402:	4798      	blx	r3
 801c404:	0003      	movs	r3, r0
 801c406:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c408:	e05d      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c40a:	683a      	ldr	r2, [r7, #0]
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	0011      	movs	r1, r2
 801c410:	0018      	movs	r0, r3
 801c412:	f000 faba 	bl	801c98a <USBD_CtlError>
            err++;
 801c416:	210b      	movs	r1, #11
 801c418:	187b      	adds	r3, r7, r1
 801c41a:	781a      	ldrb	r2, [r3, #0]
 801c41c:	187b      	adds	r3, r7, r1
 801c41e:	3201      	adds	r2, #1
 801c420:	701a      	strb	r2, [r3, #0]
          break;
 801c422:	e050      	b.n	801c4c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c424:	687a      	ldr	r2, [r7, #4]
 801c426:	23ac      	movs	r3, #172	@ 0xac
 801c428:	009b      	lsls	r3, r3, #2
 801c42a:	58d3      	ldr	r3, [r2, r3]
 801c42c:	695b      	ldr	r3, [r3, #20]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d00d      	beq.n	801c44e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c432:	687a      	ldr	r2, [r7, #4]
 801c434:	23ac      	movs	r3, #172	@ 0xac
 801c436:	009b      	lsls	r3, r3, #2
 801c438:	58d3      	ldr	r3, [r2, r3]
 801c43a:	695b      	ldr	r3, [r3, #20]
 801c43c:	687a      	ldr	r2, [r7, #4]
 801c43e:	7c12      	ldrb	r2, [r2, #16]
 801c440:	2108      	movs	r1, #8
 801c442:	1879      	adds	r1, r7, r1
 801c444:	0010      	movs	r0, r2
 801c446:	4798      	blx	r3
 801c448:	0003      	movs	r3, r0
 801c44a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c44c:	e03b      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c44e:	683a      	ldr	r2, [r7, #0]
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	0011      	movs	r1, r2
 801c454:	0018      	movs	r0, r3
 801c456:	f000 fa98 	bl	801c98a <USBD_CtlError>
            err++;
 801c45a:	210b      	movs	r1, #11
 801c45c:	187b      	adds	r3, r7, r1
 801c45e:	781a      	ldrb	r2, [r3, #0]
 801c460:	187b      	adds	r3, r7, r1
 801c462:	3201      	adds	r2, #1
 801c464:	701a      	strb	r2, [r3, #0]
          break;
 801c466:	e02e      	b.n	801c4c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c468:	687a      	ldr	r2, [r7, #4]
 801c46a:	23ac      	movs	r3, #172	@ 0xac
 801c46c:	009b      	lsls	r3, r3, #2
 801c46e:	58d3      	ldr	r3, [r2, r3]
 801c470:	699b      	ldr	r3, [r3, #24]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d00d      	beq.n	801c492 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c476:	687a      	ldr	r2, [r7, #4]
 801c478:	23ac      	movs	r3, #172	@ 0xac
 801c47a:	009b      	lsls	r3, r3, #2
 801c47c:	58d3      	ldr	r3, [r2, r3]
 801c47e:	699b      	ldr	r3, [r3, #24]
 801c480:	687a      	ldr	r2, [r7, #4]
 801c482:	7c12      	ldrb	r2, [r2, #16]
 801c484:	2108      	movs	r1, #8
 801c486:	1879      	adds	r1, r7, r1
 801c488:	0010      	movs	r0, r2
 801c48a:	4798      	blx	r3
 801c48c:	0003      	movs	r3, r0
 801c48e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c490:	e019      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c492:	683a      	ldr	r2, [r7, #0]
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	0011      	movs	r1, r2
 801c498:	0018      	movs	r0, r3
 801c49a:	f000 fa76 	bl	801c98a <USBD_CtlError>
            err++;
 801c49e:	210b      	movs	r1, #11
 801c4a0:	187b      	adds	r3, r7, r1
 801c4a2:	781a      	ldrb	r2, [r3, #0]
 801c4a4:	187b      	adds	r3, r7, r1
 801c4a6:	3201      	adds	r2, #1
 801c4a8:	701a      	strb	r2, [r3, #0]
          break;
 801c4aa:	e00c      	b.n	801c4c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c4ac:	683a      	ldr	r2, [r7, #0]
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	0011      	movs	r1, r2
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	f000 fa69 	bl	801c98a <USBD_CtlError>
          err++;
 801c4b8:	210b      	movs	r1, #11
 801c4ba:	187b      	adds	r3, r7, r1
 801c4bc:	781a      	ldrb	r2, [r3, #0]
 801c4be:	187b      	adds	r3, r7, r1
 801c4c0:	3201      	adds	r2, #1
 801c4c2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c4c4:	e04b      	b.n	801c55e <USBD_GetDescriptor+0x2fa>
 801c4c6:	e04a      	b.n	801c55e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	7c1b      	ldrb	r3, [r3, #16]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d10b      	bne.n	801c4e8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c4d0:	687a      	ldr	r2, [r7, #4]
 801c4d2:	23ad      	movs	r3, #173	@ 0xad
 801c4d4:	009b      	lsls	r3, r3, #2
 801c4d6:	58d3      	ldr	r3, [r2, r3]
 801c4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c4da:	2208      	movs	r2, #8
 801c4dc:	18ba      	adds	r2, r7, r2
 801c4de:	0010      	movs	r0, r2
 801c4e0:	4798      	blx	r3
 801c4e2:	0003      	movs	r3, r0
 801c4e4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c4e6:	e03a      	b.n	801c55e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c4e8:	683a      	ldr	r2, [r7, #0]
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	0011      	movs	r1, r2
 801c4ee:	0018      	movs	r0, r3
 801c4f0:	f000 fa4b 	bl	801c98a <USBD_CtlError>
        err++;
 801c4f4:	210b      	movs	r1, #11
 801c4f6:	187b      	adds	r3, r7, r1
 801c4f8:	781a      	ldrb	r2, [r3, #0]
 801c4fa:	187b      	adds	r3, r7, r1
 801c4fc:	3201      	adds	r2, #1
 801c4fe:	701a      	strb	r2, [r3, #0]
      break;
 801c500:	e02d      	b.n	801c55e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	7c1b      	ldrb	r3, [r3, #16]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d10f      	bne.n	801c52a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c50a:	687a      	ldr	r2, [r7, #4]
 801c50c:	23ad      	movs	r3, #173	@ 0xad
 801c50e:	009b      	lsls	r3, r3, #2
 801c510:	58d3      	ldr	r3, [r2, r3]
 801c512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c514:	2208      	movs	r2, #8
 801c516:	18ba      	adds	r2, r7, r2
 801c518:	0010      	movs	r0, r2
 801c51a:	4798      	blx	r3
 801c51c:	0003      	movs	r3, r0
 801c51e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	3301      	adds	r3, #1
 801c524:	2207      	movs	r2, #7
 801c526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c528:	e019      	b.n	801c55e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c52a:	683a      	ldr	r2, [r7, #0]
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	0011      	movs	r1, r2
 801c530:	0018      	movs	r0, r3
 801c532:	f000 fa2a 	bl	801c98a <USBD_CtlError>
        err++;
 801c536:	210b      	movs	r1, #11
 801c538:	187b      	adds	r3, r7, r1
 801c53a:	781a      	ldrb	r2, [r3, #0]
 801c53c:	187b      	adds	r3, r7, r1
 801c53e:	3201      	adds	r2, #1
 801c540:	701a      	strb	r2, [r3, #0]
      break;
 801c542:	e00c      	b.n	801c55e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c544:	683a      	ldr	r2, [r7, #0]
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	0011      	movs	r1, r2
 801c54a:	0018      	movs	r0, r3
 801c54c:	f000 fa1d 	bl	801c98a <USBD_CtlError>
      err++;
 801c550:	210b      	movs	r1, #11
 801c552:	187b      	adds	r3, r7, r1
 801c554:	781a      	ldrb	r2, [r3, #0]
 801c556:	187b      	adds	r3, r7, r1
 801c558:	3201      	adds	r2, #1
 801c55a:	701a      	strb	r2, [r3, #0]
      break;
 801c55c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c55e:	230b      	movs	r3, #11
 801c560:	18fb      	adds	r3, r7, r3
 801c562:	781b      	ldrb	r3, [r3, #0]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d127      	bne.n	801c5b8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c568:	2108      	movs	r1, #8
 801c56a:	187b      	adds	r3, r7, r1
 801c56c:	881b      	ldrh	r3, [r3, #0]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d019      	beq.n	801c5a6 <USBD_GetDescriptor+0x342>
 801c572:	683b      	ldr	r3, [r7, #0]
 801c574:	88db      	ldrh	r3, [r3, #6]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d015      	beq.n	801c5a6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c57a:	683b      	ldr	r3, [r7, #0]
 801c57c:	88da      	ldrh	r2, [r3, #6]
 801c57e:	187b      	adds	r3, r7, r1
 801c580:	881b      	ldrh	r3, [r3, #0]
 801c582:	1c18      	adds	r0, r3, #0
 801c584:	1c11      	adds	r1, r2, #0
 801c586:	b28a      	uxth	r2, r1
 801c588:	b283      	uxth	r3, r0
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d900      	bls.n	801c590 <USBD_GetDescriptor+0x32c>
 801c58e:	1c01      	adds	r1, r0, #0
 801c590:	b28a      	uxth	r2, r1
 801c592:	2108      	movs	r1, #8
 801c594:	187b      	adds	r3, r7, r1
 801c596:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c598:	187b      	adds	r3, r7, r1
 801c59a:	881a      	ldrh	r2, [r3, #0]
 801c59c:	68f9      	ldr	r1, [r7, #12]
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	0018      	movs	r0, r3
 801c5a2:	f000 fa70 	bl	801ca86 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	88db      	ldrh	r3, [r3, #6]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d105      	bne.n	801c5ba <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	0018      	movs	r0, r3
 801c5b2:	f000 fad2 	bl	801cb5a <USBD_CtlSendStatus>
 801c5b6:	e000      	b.n	801c5ba <USBD_GetDescriptor+0x356>
    return;
 801c5b8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c5ba:	46bd      	mov	sp, r7
 801c5bc:	b004      	add	sp, #16
 801c5be:	bd80      	pop	{r7, pc}
 801c5c0:	080256c0 	.word	0x080256c0
 801c5c4:	080256e0 	.word	0x080256e0

0801c5c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c5c8:	b590      	push	{r4, r7, lr}
 801c5ca:	b085      	sub	sp, #20
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
 801c5d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c5d2:	683b      	ldr	r3, [r7, #0]
 801c5d4:	889b      	ldrh	r3, [r3, #4]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d13d      	bne.n	801c656 <USBD_SetAddress+0x8e>
 801c5da:	683b      	ldr	r3, [r7, #0]
 801c5dc:	88db      	ldrh	r3, [r3, #6]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d139      	bne.n	801c656 <USBD_SetAddress+0x8e>
 801c5e2:	683b      	ldr	r3, [r7, #0]
 801c5e4:	885b      	ldrh	r3, [r3, #2]
 801c5e6:	2b7f      	cmp	r3, #127	@ 0x7f
 801c5e8:	d835      	bhi.n	801c656 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	885b      	ldrh	r3, [r3, #2]
 801c5ee:	b2da      	uxtb	r2, r3
 801c5f0:	230f      	movs	r3, #15
 801c5f2:	18fb      	adds	r3, r7, r3
 801c5f4:	217f      	movs	r1, #127	@ 0x7f
 801c5f6:	400a      	ands	r2, r1
 801c5f8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c5fa:	687a      	ldr	r2, [r7, #4]
 801c5fc:	23a7      	movs	r3, #167	@ 0xa7
 801c5fe:	009b      	lsls	r3, r3, #2
 801c600:	5cd3      	ldrb	r3, [r2, r3]
 801c602:	2b03      	cmp	r3, #3
 801c604:	d106      	bne.n	801c614 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c606:	683a      	ldr	r2, [r7, #0]
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	0011      	movs	r1, r2
 801c60c:	0018      	movs	r0, r3
 801c60e:	f000 f9bc 	bl	801c98a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c612:	e027      	b.n	801c664 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	240f      	movs	r4, #15
 801c618:	193a      	adds	r2, r7, r4
 801c61a:	4914      	ldr	r1, [pc, #80]	@ (801c66c <USBD_SetAddress+0xa4>)
 801c61c:	7812      	ldrb	r2, [r2, #0]
 801c61e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c620:	193b      	adds	r3, r7, r4
 801c622:	781a      	ldrb	r2, [r3, #0]
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	0011      	movs	r1, r2
 801c628:	0018      	movs	r0, r3
 801c62a:	f000 ff5d 	bl	801d4e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	0018      	movs	r0, r3
 801c632:	f000 fa92 	bl	801cb5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c636:	193b      	adds	r3, r7, r4
 801c638:	781b      	ldrb	r3, [r3, #0]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d005      	beq.n	801c64a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c63e:	687a      	ldr	r2, [r7, #4]
 801c640:	23a7      	movs	r3, #167	@ 0xa7
 801c642:	009b      	lsls	r3, r3, #2
 801c644:	2102      	movs	r1, #2
 801c646:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c648:	e00c      	b.n	801c664 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c64a:	687a      	ldr	r2, [r7, #4]
 801c64c:	23a7      	movs	r3, #167	@ 0xa7
 801c64e:	009b      	lsls	r3, r3, #2
 801c650:	2101      	movs	r1, #1
 801c652:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c654:	e006      	b.n	801c664 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c656:	683a      	ldr	r2, [r7, #0]
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	0011      	movs	r1, r2
 801c65c:	0018      	movs	r0, r3
 801c65e:	f000 f994 	bl	801c98a <USBD_CtlError>
  }
}
 801c662:	46c0      	nop			@ (mov r8, r8)
 801c664:	46c0      	nop			@ (mov r8, r8)
 801c666:	46bd      	mov	sp, r7
 801c668:	b005      	add	sp, #20
 801c66a:	bd90      	pop	{r4, r7, pc}
 801c66c:	0000029e 	.word	0x0000029e

0801c670 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b082      	sub	sp, #8
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	885b      	ldrh	r3, [r3, #2]
 801c67e:	b2da      	uxtb	r2, r3
 801c680:	4b4c      	ldr	r3, [pc, #304]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c682:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c684:	4b4b      	ldr	r3, [pc, #300]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c686:	781b      	ldrb	r3, [r3, #0]
 801c688:	2b01      	cmp	r3, #1
 801c68a:	d906      	bls.n	801c69a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c68c:	683a      	ldr	r2, [r7, #0]
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	0011      	movs	r1, r2
 801c692:	0018      	movs	r0, r3
 801c694:	f000 f979 	bl	801c98a <USBD_CtlError>
 801c698:	e088      	b.n	801c7ac <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c69a:	687a      	ldr	r2, [r7, #4]
 801c69c:	23a7      	movs	r3, #167	@ 0xa7
 801c69e:	009b      	lsls	r3, r3, #2
 801c6a0:	5cd3      	ldrb	r3, [r2, r3]
 801c6a2:	2b02      	cmp	r3, #2
 801c6a4:	d002      	beq.n	801c6ac <USBD_SetConfig+0x3c>
 801c6a6:	2b03      	cmp	r3, #3
 801c6a8:	d029      	beq.n	801c6fe <USBD_SetConfig+0x8e>
 801c6aa:	e071      	b.n	801c790 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c6ac:	4b41      	ldr	r3, [pc, #260]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c6ae:	781b      	ldrb	r3, [r3, #0]
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d01f      	beq.n	801c6f4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c6b4:	4b3f      	ldr	r3, [pc, #252]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	001a      	movs	r2, r3
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c6be:	687a      	ldr	r2, [r7, #4]
 801c6c0:	23a7      	movs	r3, #167	@ 0xa7
 801c6c2:	009b      	lsls	r3, r3, #2
 801c6c4:	2103      	movs	r1, #3
 801c6c6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c6c8:	4b3a      	ldr	r3, [pc, #232]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c6ca:	781a      	ldrb	r2, [r3, #0]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	0011      	movs	r1, r2
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f7ff f8c6 	bl	801b862 <USBD_SetClassConfig>
 801c6d6:	0003      	movs	r3, r0
 801c6d8:	2b02      	cmp	r3, #2
 801c6da:	d106      	bne.n	801c6ea <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c6dc:	683a      	ldr	r2, [r7, #0]
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	0011      	movs	r1, r2
 801c6e2:	0018      	movs	r0, r3
 801c6e4:	f000 f951 	bl	801c98a <USBD_CtlError>
            return;
 801c6e8:	e060      	b.n	801c7ac <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	0018      	movs	r0, r3
 801c6ee:	f000 fa34 	bl	801cb5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c6f2:	e05b      	b.n	801c7ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	0018      	movs	r0, r3
 801c6f8:	f000 fa2f 	bl	801cb5a <USBD_CtlSendStatus>
        break;
 801c6fc:	e056      	b.n	801c7ac <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c6fe:	4b2d      	ldr	r3, [pc, #180]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c700:	781b      	ldrb	r3, [r3, #0]
 801c702:	2b00      	cmp	r3, #0
 801c704:	d115      	bne.n	801c732 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c706:	687a      	ldr	r2, [r7, #4]
 801c708:	23a7      	movs	r3, #167	@ 0xa7
 801c70a:	009b      	lsls	r3, r3, #2
 801c70c:	2102      	movs	r1, #2
 801c70e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c710:	4b28      	ldr	r3, [pc, #160]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c712:	781b      	ldrb	r3, [r3, #0]
 801c714:	001a      	movs	r2, r3
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c71a:	4b26      	ldr	r3, [pc, #152]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c71c:	781a      	ldrb	r2, [r3, #0]
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	0011      	movs	r1, r2
 801c722:	0018      	movs	r0, r3
 801c724:	f7ff f8c4 	bl	801b8b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	0018      	movs	r0, r3
 801c72c:	f000 fa15 	bl	801cb5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c730:	e03c      	b.n	801c7ac <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c732:	4b20      	ldr	r3, [pc, #128]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c734:	781b      	ldrb	r3, [r3, #0]
 801c736:	001a      	movs	r2, r3
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	685b      	ldr	r3, [r3, #4]
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d022      	beq.n	801c786 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	685b      	ldr	r3, [r3, #4]
 801c744:	b2da      	uxtb	r2, r3
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	0011      	movs	r1, r2
 801c74a:	0018      	movs	r0, r3
 801c74c:	f7ff f8b0 	bl	801b8b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c750:	4b18      	ldr	r3, [pc, #96]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c752:	781b      	ldrb	r3, [r3, #0]
 801c754:	001a      	movs	r2, r3
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c75a:	4b16      	ldr	r3, [pc, #88]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c75c:	781a      	ldrb	r2, [r3, #0]
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	0011      	movs	r1, r2
 801c762:	0018      	movs	r0, r3
 801c764:	f7ff f87d 	bl	801b862 <USBD_SetClassConfig>
 801c768:	0003      	movs	r3, r0
 801c76a:	2b02      	cmp	r3, #2
 801c76c:	d106      	bne.n	801c77c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c76e:	683a      	ldr	r2, [r7, #0]
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	0011      	movs	r1, r2
 801c774:	0018      	movs	r0, r3
 801c776:	f000 f908 	bl	801c98a <USBD_CtlError>
            return;
 801c77a:	e017      	b.n	801c7ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	0018      	movs	r0, r3
 801c780:	f000 f9eb 	bl	801cb5a <USBD_CtlSendStatus>
        break;
 801c784:	e012      	b.n	801c7ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	0018      	movs	r0, r3
 801c78a:	f000 f9e6 	bl	801cb5a <USBD_CtlSendStatus>
        break;
 801c78e:	e00d      	b.n	801c7ac <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c790:	683a      	ldr	r2, [r7, #0]
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	0011      	movs	r1, r2
 801c796:	0018      	movs	r0, r3
 801c798:	f000 f8f7 	bl	801c98a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c79c:	4b05      	ldr	r3, [pc, #20]	@ (801c7b4 <USBD_SetConfig+0x144>)
 801c79e:	781a      	ldrb	r2, [r3, #0]
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	0011      	movs	r1, r2
 801c7a4:	0018      	movs	r0, r3
 801c7a6:	f7ff f883 	bl	801b8b0 <USBD_ClrClassConfig>
        break;
 801c7aa:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	b002      	add	sp, #8
 801c7b0:	bd80      	pop	{r7, pc}
 801c7b2:	46c0      	nop			@ (mov r8, r8)
 801c7b4:	200023c8 	.word	0x200023c8

0801c7b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b082      	sub	sp, #8
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	6078      	str	r0, [r7, #4]
 801c7c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	88db      	ldrh	r3, [r3, #6]
 801c7c6:	2b01      	cmp	r3, #1
 801c7c8:	d006      	beq.n	801c7d8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c7ca:	683a      	ldr	r2, [r7, #0]
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	0011      	movs	r1, r2
 801c7d0:	0018      	movs	r0, r3
 801c7d2:	f000 f8da 	bl	801c98a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c7d6:	e026      	b.n	801c826 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c7d8:	687a      	ldr	r2, [r7, #4]
 801c7da:	23a7      	movs	r3, #167	@ 0xa7
 801c7dc:	009b      	lsls	r3, r3, #2
 801c7de:	5cd3      	ldrb	r3, [r2, r3]
 801c7e0:	2b02      	cmp	r3, #2
 801c7e2:	dc02      	bgt.n	801c7ea <USBD_GetConfig+0x32>
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	dc03      	bgt.n	801c7f0 <USBD_GetConfig+0x38>
 801c7e8:	e016      	b.n	801c818 <USBD_GetConfig+0x60>
 801c7ea:	2b03      	cmp	r3, #3
 801c7ec:	d00c      	beq.n	801c808 <USBD_GetConfig+0x50>
 801c7ee:	e013      	b.n	801c818 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	3308      	adds	r3, #8
 801c7fa:	0019      	movs	r1, r3
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	2201      	movs	r2, #1
 801c800:	0018      	movs	r0, r3
 801c802:	f000 f940 	bl	801ca86 <USBD_CtlSendData>
        break;
 801c806:	e00e      	b.n	801c826 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	1d19      	adds	r1, r3, #4
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	2201      	movs	r2, #1
 801c810:	0018      	movs	r0, r3
 801c812:	f000 f938 	bl	801ca86 <USBD_CtlSendData>
        break;
 801c816:	e006      	b.n	801c826 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c818:	683a      	ldr	r2, [r7, #0]
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	0011      	movs	r1, r2
 801c81e:	0018      	movs	r0, r3
 801c820:	f000 f8b3 	bl	801c98a <USBD_CtlError>
        break;
 801c824:	46c0      	nop			@ (mov r8, r8)
}
 801c826:	46c0      	nop			@ (mov r8, r8)
 801c828:	46bd      	mov	sp, r7
 801c82a:	b002      	add	sp, #8
 801c82c:	bd80      	pop	{r7, pc}

0801c82e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c82e:	b580      	push	{r7, lr}
 801c830:	b082      	sub	sp, #8
 801c832:	af00      	add	r7, sp, #0
 801c834:	6078      	str	r0, [r7, #4]
 801c836:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c838:	687a      	ldr	r2, [r7, #4]
 801c83a:	23a7      	movs	r3, #167	@ 0xa7
 801c83c:	009b      	lsls	r3, r3, #2
 801c83e:	5cd3      	ldrb	r3, [r2, r3]
 801c840:	3b01      	subs	r3, #1
 801c842:	2b02      	cmp	r3, #2
 801c844:	d822      	bhi.n	801c88c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c846:	683b      	ldr	r3, [r7, #0]
 801c848:	88db      	ldrh	r3, [r3, #6]
 801c84a:	2b02      	cmp	r3, #2
 801c84c:	d006      	beq.n	801c85c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c84e:	683a      	ldr	r2, [r7, #0]
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	0011      	movs	r1, r2
 801c854:	0018      	movs	r0, r3
 801c856:	f000 f898 	bl	801c98a <USBD_CtlError>
        break;
 801c85a:	e01e      	b.n	801c89a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	2201      	movs	r2, #1
 801c860:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c862:	687a      	ldr	r2, [r7, #4]
 801c864:	23a9      	movs	r3, #169	@ 0xa9
 801c866:	009b      	lsls	r3, r3, #2
 801c868:	58d3      	ldr	r3, [r2, r3]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d005      	beq.n	801c87a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	68db      	ldr	r3, [r3, #12]
 801c872:	2202      	movs	r2, #2
 801c874:	431a      	orrs	r2, r3
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	330c      	adds	r3, #12
 801c87e:	0019      	movs	r1, r3
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	2202      	movs	r2, #2
 801c884:	0018      	movs	r0, r3
 801c886:	f000 f8fe 	bl	801ca86 <USBD_CtlSendData>
      break;
 801c88a:	e006      	b.n	801c89a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c88c:	683a      	ldr	r2, [r7, #0]
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	0011      	movs	r1, r2
 801c892:	0018      	movs	r0, r3
 801c894:	f000 f879 	bl	801c98a <USBD_CtlError>
      break;
 801c898:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c89a:	46c0      	nop			@ (mov r8, r8)
 801c89c:	46bd      	mov	sp, r7
 801c89e:	b002      	add	sp, #8
 801c8a0:	bd80      	pop	{r7, pc}

0801c8a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c8a2:	b580      	push	{r7, lr}
 801c8a4:	b082      	sub	sp, #8
 801c8a6:	af00      	add	r7, sp, #0
 801c8a8:	6078      	str	r0, [r7, #4]
 801c8aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c8ac:	683b      	ldr	r3, [r7, #0]
 801c8ae:	885b      	ldrh	r3, [r3, #2]
 801c8b0:	2b01      	cmp	r3, #1
 801c8b2:	d108      	bne.n	801c8c6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c8b4:	687a      	ldr	r2, [r7, #4]
 801c8b6:	23a9      	movs	r3, #169	@ 0xa9
 801c8b8:	009b      	lsls	r3, r3, #2
 801c8ba:	2101      	movs	r1, #1
 801c8bc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	0018      	movs	r0, r3
 801c8c2:	f000 f94a 	bl	801cb5a <USBD_CtlSendStatus>
  }
}
 801c8c6:	46c0      	nop			@ (mov r8, r8)
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	b002      	add	sp, #8
 801c8cc:	bd80      	pop	{r7, pc}

0801c8ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c8ce:	b580      	push	{r7, lr}
 801c8d0:	b082      	sub	sp, #8
 801c8d2:	af00      	add	r7, sp, #0
 801c8d4:	6078      	str	r0, [r7, #4]
 801c8d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c8d8:	687a      	ldr	r2, [r7, #4]
 801c8da:	23a7      	movs	r3, #167	@ 0xa7
 801c8dc:	009b      	lsls	r3, r3, #2
 801c8de:	5cd3      	ldrb	r3, [r2, r3]
 801c8e0:	3b01      	subs	r3, #1
 801c8e2:	2b02      	cmp	r3, #2
 801c8e4:	d80d      	bhi.n	801c902 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	885b      	ldrh	r3, [r3, #2]
 801c8ea:	2b01      	cmp	r3, #1
 801c8ec:	d110      	bne.n	801c910 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c8ee:	687a      	ldr	r2, [r7, #4]
 801c8f0:	23a9      	movs	r3, #169	@ 0xa9
 801c8f2:	009b      	lsls	r3, r3, #2
 801c8f4:	2100      	movs	r1, #0
 801c8f6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	0018      	movs	r0, r3
 801c8fc:	f000 f92d 	bl	801cb5a <USBD_CtlSendStatus>
      }
      break;
 801c900:	e006      	b.n	801c910 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c902:	683a      	ldr	r2, [r7, #0]
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	0011      	movs	r1, r2
 801c908:	0018      	movs	r0, r3
 801c90a:	f000 f83e 	bl	801c98a <USBD_CtlError>
      break;
 801c90e:	e000      	b.n	801c912 <USBD_ClrFeature+0x44>
      break;
 801c910:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c912:	46c0      	nop			@ (mov r8, r8)
 801c914:	46bd      	mov	sp, r7
 801c916:	b002      	add	sp, #8
 801c918:	bd80      	pop	{r7, pc}

0801c91a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c91a:	b580      	push	{r7, lr}
 801c91c:	b082      	sub	sp, #8
 801c91e:	af00      	add	r7, sp, #0
 801c920:	6078      	str	r0, [r7, #4]
 801c922:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c924:	683b      	ldr	r3, [r7, #0]
 801c926:	781a      	ldrb	r2, [r3, #0]
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c92c:	683b      	ldr	r3, [r7, #0]
 801c92e:	785a      	ldrb	r2, [r3, #1]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c934:	683b      	ldr	r3, [r7, #0]
 801c936:	3302      	adds	r3, #2
 801c938:	781b      	ldrb	r3, [r3, #0]
 801c93a:	001a      	movs	r2, r3
 801c93c:	683b      	ldr	r3, [r7, #0]
 801c93e:	3303      	adds	r3, #3
 801c940:	781b      	ldrb	r3, [r3, #0]
 801c942:	021b      	lsls	r3, r3, #8
 801c944:	b29b      	uxth	r3, r3
 801c946:	18d3      	adds	r3, r2, r3
 801c948:	b29a      	uxth	r2, r3
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c94e:	683b      	ldr	r3, [r7, #0]
 801c950:	3304      	adds	r3, #4
 801c952:	781b      	ldrb	r3, [r3, #0]
 801c954:	001a      	movs	r2, r3
 801c956:	683b      	ldr	r3, [r7, #0]
 801c958:	3305      	adds	r3, #5
 801c95a:	781b      	ldrb	r3, [r3, #0]
 801c95c:	021b      	lsls	r3, r3, #8
 801c95e:	b29b      	uxth	r3, r3
 801c960:	18d3      	adds	r3, r2, r3
 801c962:	b29a      	uxth	r2, r3
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c968:	683b      	ldr	r3, [r7, #0]
 801c96a:	3306      	adds	r3, #6
 801c96c:	781b      	ldrb	r3, [r3, #0]
 801c96e:	001a      	movs	r2, r3
 801c970:	683b      	ldr	r3, [r7, #0]
 801c972:	3307      	adds	r3, #7
 801c974:	781b      	ldrb	r3, [r3, #0]
 801c976:	021b      	lsls	r3, r3, #8
 801c978:	b29b      	uxth	r3, r3
 801c97a:	18d3      	adds	r3, r2, r3
 801c97c:	b29a      	uxth	r2, r3
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	80da      	strh	r2, [r3, #6]

}
 801c982:	46c0      	nop			@ (mov r8, r8)
 801c984:	46bd      	mov	sp, r7
 801c986:	b002      	add	sp, #8
 801c988:	bd80      	pop	{r7, pc}

0801c98a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c98a:	b580      	push	{r7, lr}
 801c98c:	b082      	sub	sp, #8
 801c98e:	af00      	add	r7, sp, #0
 801c990:	6078      	str	r0, [r7, #4]
 801c992:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	2180      	movs	r1, #128	@ 0x80
 801c998:	0018      	movs	r0, r3
 801c99a:	f000 fd1e 	bl	801d3da <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	2100      	movs	r1, #0
 801c9a2:	0018      	movs	r0, r3
 801c9a4:	f000 fd19 	bl	801d3da <USBD_LL_StallEP>
}
 801c9a8:	46c0      	nop			@ (mov r8, r8)
 801c9aa:	46bd      	mov	sp, r7
 801c9ac:	b002      	add	sp, #8
 801c9ae:	bd80      	pop	{r7, pc}

0801c9b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c9b0:	b590      	push	{r4, r7, lr}
 801c9b2:	b087      	sub	sp, #28
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	60f8      	str	r0, [r7, #12]
 801c9b8:	60b9      	str	r1, [r7, #8]
 801c9ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c9bc:	2417      	movs	r4, #23
 801c9be:	193b      	adds	r3, r7, r4
 801c9c0:	2200      	movs	r2, #0
 801c9c2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d03c      	beq.n	801ca44 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	0018      	movs	r0, r3
 801c9ce:	f000 f83d 	bl	801ca4c <USBD_GetLen>
 801c9d2:	0003      	movs	r3, r0
 801c9d4:	3301      	adds	r3, #1
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	18db      	adds	r3, r3, r3
 801c9da:	b29a      	uxth	r2, r3
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c9e0:	193b      	adds	r3, r7, r4
 801c9e2:	781b      	ldrb	r3, [r3, #0]
 801c9e4:	193a      	adds	r2, r7, r4
 801c9e6:	1c59      	adds	r1, r3, #1
 801c9e8:	7011      	strb	r1, [r2, #0]
 801c9ea:	001a      	movs	r2, r3
 801c9ec:	68bb      	ldr	r3, [r7, #8]
 801c9ee:	189b      	adds	r3, r3, r2
 801c9f0:	687a      	ldr	r2, [r7, #4]
 801c9f2:	7812      	ldrb	r2, [r2, #0]
 801c9f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c9f6:	193b      	adds	r3, r7, r4
 801c9f8:	781b      	ldrb	r3, [r3, #0]
 801c9fa:	193a      	adds	r2, r7, r4
 801c9fc:	1c59      	adds	r1, r3, #1
 801c9fe:	7011      	strb	r1, [r2, #0]
 801ca00:	001a      	movs	r2, r3
 801ca02:	68bb      	ldr	r3, [r7, #8]
 801ca04:	189b      	adds	r3, r3, r2
 801ca06:	2203      	movs	r2, #3
 801ca08:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801ca0a:	e017      	b.n	801ca3c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	1c5a      	adds	r2, r3, #1
 801ca10:	60fa      	str	r2, [r7, #12]
 801ca12:	2417      	movs	r4, #23
 801ca14:	193a      	adds	r2, r7, r4
 801ca16:	7812      	ldrb	r2, [r2, #0]
 801ca18:	1939      	adds	r1, r7, r4
 801ca1a:	1c50      	adds	r0, r2, #1
 801ca1c:	7008      	strb	r0, [r1, #0]
 801ca1e:	0011      	movs	r1, r2
 801ca20:	68ba      	ldr	r2, [r7, #8]
 801ca22:	1852      	adds	r2, r2, r1
 801ca24:	781b      	ldrb	r3, [r3, #0]
 801ca26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801ca28:	193b      	adds	r3, r7, r4
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	193a      	adds	r2, r7, r4
 801ca2e:	1c59      	adds	r1, r3, #1
 801ca30:	7011      	strb	r1, [r2, #0]
 801ca32:	001a      	movs	r2, r3
 801ca34:	68bb      	ldr	r3, [r7, #8]
 801ca36:	189b      	adds	r3, r3, r2
 801ca38:	2200      	movs	r2, #0
 801ca3a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	781b      	ldrb	r3, [r3, #0]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d1e3      	bne.n	801ca0c <USBD_GetString+0x5c>
    }
  }
}
 801ca44:	46c0      	nop			@ (mov r8, r8)
 801ca46:	46bd      	mov	sp, r7
 801ca48:	b007      	add	sp, #28
 801ca4a:	bd90      	pop	{r4, r7, pc}

0801ca4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b084      	sub	sp, #16
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801ca54:	230f      	movs	r3, #15
 801ca56:	18fb      	adds	r3, r7, r3
 801ca58:	2200      	movs	r2, #0
 801ca5a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801ca5c:	e008      	b.n	801ca70 <USBD_GetLen+0x24>
  {
    len++;
 801ca5e:	210f      	movs	r1, #15
 801ca60:	187b      	adds	r3, r7, r1
 801ca62:	781a      	ldrb	r2, [r3, #0]
 801ca64:	187b      	adds	r3, r7, r1
 801ca66:	3201      	adds	r2, #1
 801ca68:	701a      	strb	r2, [r3, #0]
    buf++;
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	3301      	adds	r3, #1
 801ca6e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	781b      	ldrb	r3, [r3, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d1f2      	bne.n	801ca5e <USBD_GetLen+0x12>
  }

  return len;
 801ca78:	230f      	movs	r3, #15
 801ca7a:	18fb      	adds	r3, r7, r3
 801ca7c:	781b      	ldrb	r3, [r3, #0]
}
 801ca7e:	0018      	movs	r0, r3
 801ca80:	46bd      	mov	sp, r7
 801ca82:	b004      	add	sp, #16
 801ca84:	bd80      	pop	{r7, pc}

0801ca86 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801ca86:	b580      	push	{r7, lr}
 801ca88:	b084      	sub	sp, #16
 801ca8a:	af00      	add	r7, sp, #0
 801ca8c:	60f8      	str	r0, [r7, #12]
 801ca8e:	60b9      	str	r1, [r7, #8]
 801ca90:	1dbb      	adds	r3, r7, #6
 801ca92:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ca94:	68fa      	ldr	r2, [r7, #12]
 801ca96:	23a5      	movs	r3, #165	@ 0xa5
 801ca98:	009b      	lsls	r3, r3, #2
 801ca9a:	2102      	movs	r1, #2
 801ca9c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801ca9e:	1dbb      	adds	r3, r7, #6
 801caa0:	881a      	ldrh	r2, [r3, #0]
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801caa6:	1dbb      	adds	r3, r7, #6
 801caa8:	881a      	ldrh	r2, [r3, #0]
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801caae:	1dbb      	adds	r3, r7, #6
 801cab0:	881b      	ldrh	r3, [r3, #0]
 801cab2:	68ba      	ldr	r2, [r7, #8]
 801cab4:	68f8      	ldr	r0, [r7, #12]
 801cab6:	2100      	movs	r1, #0
 801cab8:	f000 fd41 	bl	801d53e <USBD_LL_Transmit>

  return USBD_OK;
 801cabc:	2300      	movs	r3, #0
}
 801cabe:	0018      	movs	r0, r3
 801cac0:	46bd      	mov	sp, r7
 801cac2:	b004      	add	sp, #16
 801cac4:	bd80      	pop	{r7, pc}

0801cac6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cac6:	b580      	push	{r7, lr}
 801cac8:	b084      	sub	sp, #16
 801caca:	af00      	add	r7, sp, #0
 801cacc:	60f8      	str	r0, [r7, #12]
 801cace:	60b9      	str	r1, [r7, #8]
 801cad0:	1dbb      	adds	r3, r7, #6
 801cad2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cad4:	1dbb      	adds	r3, r7, #6
 801cad6:	881b      	ldrh	r3, [r3, #0]
 801cad8:	68ba      	ldr	r2, [r7, #8]
 801cada:	68f8      	ldr	r0, [r7, #12]
 801cadc:	2100      	movs	r1, #0
 801cade:	f000 fd2e 	bl	801d53e <USBD_LL_Transmit>

  return USBD_OK;
 801cae2:	2300      	movs	r3, #0
}
 801cae4:	0018      	movs	r0, r3
 801cae6:	46bd      	mov	sp, r7
 801cae8:	b004      	add	sp, #16
 801caea:	bd80      	pop	{r7, pc}

0801caec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b084      	sub	sp, #16
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	60f8      	str	r0, [r7, #12]
 801caf4:	60b9      	str	r1, [r7, #8]
 801caf6:	1dbb      	adds	r3, r7, #6
 801caf8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801cafa:	68fa      	ldr	r2, [r7, #12]
 801cafc:	23a5      	movs	r3, #165	@ 0xa5
 801cafe:	009b      	lsls	r3, r3, #2
 801cb00:	2103      	movs	r1, #3
 801cb02:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cb04:	1dbb      	adds	r3, r7, #6
 801cb06:	8819      	ldrh	r1, [r3, #0]
 801cb08:	68fa      	ldr	r2, [r7, #12]
 801cb0a:	23ae      	movs	r3, #174	@ 0xae
 801cb0c:	005b      	lsls	r3, r3, #1
 801cb0e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cb10:	1dbb      	adds	r3, r7, #6
 801cb12:	8819      	ldrh	r1, [r3, #0]
 801cb14:	68fa      	ldr	r2, [r7, #12]
 801cb16:	23b0      	movs	r3, #176	@ 0xb0
 801cb18:	005b      	lsls	r3, r3, #1
 801cb1a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cb1c:	1dbb      	adds	r3, r7, #6
 801cb1e:	881b      	ldrh	r3, [r3, #0]
 801cb20:	68ba      	ldr	r2, [r7, #8]
 801cb22:	68f8      	ldr	r0, [r7, #12]
 801cb24:	2100      	movs	r1, #0
 801cb26:	f000 fd41 	bl	801d5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb2a:	2300      	movs	r3, #0
}
 801cb2c:	0018      	movs	r0, r3
 801cb2e:	46bd      	mov	sp, r7
 801cb30:	b004      	add	sp, #16
 801cb32:	bd80      	pop	{r7, pc}

0801cb34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b084      	sub	sp, #16
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	60f8      	str	r0, [r7, #12]
 801cb3c:	60b9      	str	r1, [r7, #8]
 801cb3e:	1dbb      	adds	r3, r7, #6
 801cb40:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cb42:	1dbb      	adds	r3, r7, #6
 801cb44:	881b      	ldrh	r3, [r3, #0]
 801cb46:	68ba      	ldr	r2, [r7, #8]
 801cb48:	68f8      	ldr	r0, [r7, #12]
 801cb4a:	2100      	movs	r1, #0
 801cb4c:	f000 fd2e 	bl	801d5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb50:	2300      	movs	r3, #0
}
 801cb52:	0018      	movs	r0, r3
 801cb54:	46bd      	mov	sp, r7
 801cb56:	b004      	add	sp, #16
 801cb58:	bd80      	pop	{r7, pc}

0801cb5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cb5a:	b580      	push	{r7, lr}
 801cb5c:	b082      	sub	sp, #8
 801cb5e:	af00      	add	r7, sp, #0
 801cb60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cb62:	687a      	ldr	r2, [r7, #4]
 801cb64:	23a5      	movs	r3, #165	@ 0xa5
 801cb66:	009b      	lsls	r3, r3, #2
 801cb68:	2104      	movs	r1, #4
 801cb6a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cb6c:	6878      	ldr	r0, [r7, #4]
 801cb6e:	2300      	movs	r3, #0
 801cb70:	2200      	movs	r2, #0
 801cb72:	2100      	movs	r1, #0
 801cb74:	f000 fce3 	bl	801d53e <USBD_LL_Transmit>

  return USBD_OK;
 801cb78:	2300      	movs	r3, #0
}
 801cb7a:	0018      	movs	r0, r3
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	b002      	add	sp, #8
 801cb80:	bd80      	pop	{r7, pc}

0801cb82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cb82:	b580      	push	{r7, lr}
 801cb84:	b082      	sub	sp, #8
 801cb86:	af00      	add	r7, sp, #0
 801cb88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cb8a:	687a      	ldr	r2, [r7, #4]
 801cb8c:	23a5      	movs	r3, #165	@ 0xa5
 801cb8e:	009b      	lsls	r3, r3, #2
 801cb90:	2105      	movs	r1, #5
 801cb92:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cb94:	6878      	ldr	r0, [r7, #4]
 801cb96:	2300      	movs	r3, #0
 801cb98:	2200      	movs	r2, #0
 801cb9a:	2100      	movs	r1, #0
 801cb9c:	f000 fd06 	bl	801d5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cba0:	2300      	movs	r3, #0
}
 801cba2:	0018      	movs	r0, r3
 801cba4:	46bd      	mov	sp, r7
 801cba6:	b002      	add	sp, #8
 801cba8:	bd80      	pop	{r7, pc}
	...

0801cbac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cbac:	b580      	push	{r7, lr}
 801cbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cbb0:	4914      	ldr	r1, [pc, #80]	@ (801cc04 <MX_USB_DEVICE_Init+0x58>)
 801cbb2:	4b15      	ldr	r3, [pc, #84]	@ (801cc08 <MX_USB_DEVICE_Init+0x5c>)
 801cbb4:	2200      	movs	r2, #0
 801cbb6:	0018      	movs	r0, r3
 801cbb8:	f7fe fdec 	bl	801b794 <USBD_Init>
 801cbbc:	1e03      	subs	r3, r0, #0
 801cbbe:	d001      	beq.n	801cbc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cbc0:	f7eb fb9e 	bl	8008300 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cbc4:	4a11      	ldr	r2, [pc, #68]	@ (801cc0c <MX_USB_DEVICE_Init+0x60>)
 801cbc6:	4b10      	ldr	r3, [pc, #64]	@ (801cc08 <MX_USB_DEVICE_Init+0x5c>)
 801cbc8:	0011      	movs	r1, r2
 801cbca:	0018      	movs	r0, r3
 801cbcc:	f7fe fe13 	bl	801b7f6 <USBD_RegisterClass>
 801cbd0:	1e03      	subs	r3, r0, #0
 801cbd2:	d001      	beq.n	801cbd8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cbd4:	f7eb fb94 	bl	8008300 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cbd8:	4a0d      	ldr	r2, [pc, #52]	@ (801cc10 <MX_USB_DEVICE_Init+0x64>)
 801cbda:	4b0b      	ldr	r3, [pc, #44]	@ (801cc08 <MX_USB_DEVICE_Init+0x5c>)
 801cbdc:	0011      	movs	r1, r2
 801cbde:	0018      	movs	r0, r3
 801cbe0:	f7fe fd28 	bl	801b634 <USBD_CDC_RegisterInterface>
 801cbe4:	1e03      	subs	r3, r0, #0
 801cbe6:	d001      	beq.n	801cbec <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cbe8:	f7eb fb8a 	bl	8008300 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cbec:	4b06      	ldr	r3, [pc, #24]	@ (801cc08 <MX_USB_DEVICE_Init+0x5c>)
 801cbee:	0018      	movs	r0, r3
 801cbf0:	f7fe fe21 	bl	801b836 <USBD_Start>
 801cbf4:	1e03      	subs	r3, r0, #0
 801cbf6:	d001      	beq.n	801cbfc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cbf8:	f7eb fb82 	bl	8008300 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cbfc:	46c0      	nop			@ (mov r8, r8)
 801cbfe:	46bd      	mov	sp, r7
 801cc00:	bd80      	pop	{r7, pc}
 801cc02:	46c0      	nop			@ (mov r8, r8)
 801cc04:	20000204 	.word	0x20000204
 801cc08:	200023cc 	.word	0x200023cc
 801cc0c:	200000f0 	.word	0x200000f0
 801cc10:	200001f4 	.word	0x200001f4

0801cc14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cc18:	4907      	ldr	r1, [pc, #28]	@ (801cc38 <CDC_Init_FS+0x24>)
 801cc1a:	4b08      	ldr	r3, [pc, #32]	@ (801cc3c <CDC_Init_FS+0x28>)
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	0018      	movs	r0, r3
 801cc20:	f7fe fd23 	bl	801b66a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cc24:	4a06      	ldr	r2, [pc, #24]	@ (801cc40 <CDC_Init_FS+0x2c>)
 801cc26:	4b05      	ldr	r3, [pc, #20]	@ (801cc3c <CDC_Init_FS+0x28>)
 801cc28:	0011      	movs	r1, r2
 801cc2a:	0018      	movs	r0, r3
 801cc2c:	f7fe fd39 	bl	801b6a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cc30:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cc32:	0018      	movs	r0, r3
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	20002b50 	.word	0x20002b50
 801cc3c:	200023cc 	.word	0x200023cc
 801cc40:	20002750 	.word	0x20002750

0801cc44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cc48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cc4a:	0018      	movs	r0, r3
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}

0801cc50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	b082      	sub	sp, #8
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6039      	str	r1, [r7, #0]
 801cc58:	0011      	movs	r1, r2
 801cc5a:	1dfb      	adds	r3, r7, #7
 801cc5c:	1c02      	adds	r2, r0, #0
 801cc5e:	701a      	strb	r2, [r3, #0]
 801cc60:	1d3b      	adds	r3, r7, #4
 801cc62:	1c0a      	adds	r2, r1, #0
 801cc64:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801cc66:	1dfb      	adds	r3, r7, #7
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	2b23      	cmp	r3, #35	@ 0x23
 801cc6c:	d804      	bhi.n	801cc78 <CDC_Control_FS+0x28>
 801cc6e:	009a      	lsls	r2, r3, #2
 801cc70:	4b04      	ldr	r3, [pc, #16]	@ (801cc84 <CDC_Control_FS+0x34>)
 801cc72:	18d3      	adds	r3, r2, r3
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801cc78:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801cc7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cc7c:	0018      	movs	r0, r3
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	b002      	add	sp, #8
 801cc82:	bd80      	pop	{r7, pc}
 801cc84:	080256f8 	.word	0x080256f8

0801cc88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b082      	sub	sp, #8
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	6078      	str	r0, [r7, #4]
 801cc90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801cc92:	4b12      	ldr	r3, [pc, #72]	@ (801ccdc <CDC_Receive_FS+0x54>)
 801cc94:	781b      	ldrb	r3, [r3, #0]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d013      	beq.n	801ccc2 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	b29a      	uxth	r2, r3
 801cca0:	2301      	movs	r3, #1
 801cca2:	425b      	negs	r3, r3
 801cca4:	6879      	ldr	r1, [r7, #4]
 801cca6:	480e      	ldr	r0, [pc, #56]	@ (801cce0 <CDC_Receive_FS+0x58>)
 801cca8:	f7fa fa46 	bl	8017138 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ccac:	687a      	ldr	r2, [r7, #4]
 801ccae:	4b0d      	ldr	r3, [pc, #52]	@ (801cce4 <CDC_Receive_FS+0x5c>)
 801ccb0:	0011      	movs	r1, r2
 801ccb2:	0018      	movs	r0, r3
 801ccb4:	f7fe fcf5 	bl	801b6a2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ccb8:	4b0a      	ldr	r3, [pc, #40]	@ (801cce4 <CDC_Receive_FS+0x5c>)
 801ccba:	0018      	movs	r0, r3
 801ccbc:	f7fe fd3c 	bl	801b738 <USBD_CDC_ReceivePacket>
 801ccc0:	e006      	b.n	801ccd0 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	681a      	ldr	r2, [r3, #0]
 801ccc6:	4b08      	ldr	r3, [pc, #32]	@ (801cce8 <CDC_Receive_FS+0x60>)
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	18d2      	adds	r2, r2, r3
 801cccc:	4b06      	ldr	r3, [pc, #24]	@ (801cce8 <CDC_Receive_FS+0x60>)
 801ccce:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801ccd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ccd2:	0018      	movs	r0, r3
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	b002      	add	sp, #8
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	46c0      	nop			@ (mov r8, r8)
 801ccdc:	20002690 	.word	0x20002690
 801cce0:	20002694 	.word	0x20002694
 801cce4:	200023cc 	.word	0x200023cc
 801cce8:	2000274c 	.word	0x2000274c

0801ccec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801ccec:	b5b0      	push	{r4, r5, r7, lr}
 801ccee:	b084      	sub	sp, #16
 801ccf0:	af00      	add	r7, sp, #0
 801ccf2:	6078      	str	r0, [r7, #4]
 801ccf4:	000a      	movs	r2, r1
 801ccf6:	1cbb      	adds	r3, r7, #2
 801ccf8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801ccfa:	230f      	movs	r3, #15
 801ccfc:	18fb      	adds	r3, r7, r3
 801ccfe:	2200      	movs	r2, #0
 801cd00:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cd02:	4a11      	ldr	r2, [pc, #68]	@ (801cd48 <CDC_Transmit_FS+0x5c>)
 801cd04:	23ae      	movs	r3, #174	@ 0xae
 801cd06:	009b      	lsls	r3, r3, #2
 801cd08:	58d3      	ldr	r3, [r2, r3]
 801cd0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cd0c:	68ba      	ldr	r2, [r7, #8]
 801cd0e:	2385      	movs	r3, #133	@ 0x85
 801cd10:	009b      	lsls	r3, r3, #2
 801cd12:	58d3      	ldr	r3, [r2, r3]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d001      	beq.n	801cd1c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801cd18:	2301      	movs	r3, #1
 801cd1a:	e010      	b.n	801cd3e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cd1c:	1cbb      	adds	r3, r7, #2
 801cd1e:	881a      	ldrh	r2, [r3, #0]
 801cd20:	6879      	ldr	r1, [r7, #4]
 801cd22:	4b09      	ldr	r3, [pc, #36]	@ (801cd48 <CDC_Transmit_FS+0x5c>)
 801cd24:	0018      	movs	r0, r3
 801cd26:	f7fe fca0 	bl	801b66a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cd2a:	250f      	movs	r5, #15
 801cd2c:	197c      	adds	r4, r7, r5
 801cd2e:	4b06      	ldr	r3, [pc, #24]	@ (801cd48 <CDC_Transmit_FS+0x5c>)
 801cd30:	0018      	movs	r0, r3
 801cd32:	f7fe fcca 	bl	801b6ca <USBD_CDC_TransmitPacket>
 801cd36:	0003      	movs	r3, r0
 801cd38:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cd3a:	197b      	adds	r3, r7, r5
 801cd3c:	781b      	ldrb	r3, [r3, #0]
}
 801cd3e:	0018      	movs	r0, r3
 801cd40:	46bd      	mov	sp, r7
 801cd42:	b004      	add	sp, #16
 801cd44:	bdb0      	pop	{r4, r5, r7, pc}
 801cd46:	46c0      	nop			@ (mov r8, r8)
 801cd48:	200023cc 	.word	0x200023cc

0801cd4c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cd50:	4b02      	ldr	r3, [pc, #8]	@ (801cd5c <EnableESPProg+0x10>)
 801cd52:	2201      	movs	r2, #1
 801cd54:	701a      	strb	r2, [r3, #0]
}
 801cd56:	46c0      	nop			@ (mov r8, r8)
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	bd80      	pop	{r7, pc}
 801cd5c:	20002690 	.word	0x20002690

0801cd60 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cd64:	4b01      	ldr	r3, [pc, #4]	@ (801cd6c <GetUsbRxPointer+0xc>)
}
 801cd66:	0018      	movs	r0, r3
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	bd80      	pop	{r7, pc}
 801cd6c:	20002750 	.word	0x20002750

0801cd70 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cd74:	4b07      	ldr	r3, [pc, #28]	@ (801cd94 <ResetUsbRxDataSize+0x24>)
 801cd76:	2200      	movs	r2, #0
 801cd78:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cd7a:	4a07      	ldr	r2, [pc, #28]	@ (801cd98 <ResetUsbRxDataSize+0x28>)
 801cd7c:	4b07      	ldr	r3, [pc, #28]	@ (801cd9c <ResetUsbRxDataSize+0x2c>)
 801cd7e:	0011      	movs	r1, r2
 801cd80:	0018      	movs	r0, r3
 801cd82:	f7fe fc8e 	bl	801b6a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd86:	4b05      	ldr	r3, [pc, #20]	@ (801cd9c <ResetUsbRxDataSize+0x2c>)
 801cd88:	0018      	movs	r0, r3
 801cd8a:	f7fe fcd5 	bl	801b738 <USBD_CDC_ReceivePacket>
}
 801cd8e:	46c0      	nop			@ (mov r8, r8)
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}
 801cd94:	2000274c 	.word	0x2000274c
 801cd98:	20002750 	.word	0x20002750
 801cd9c:	200023cc 	.word	0x200023cc

0801cda0 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cda4:	4b02      	ldr	r3, [pc, #8]	@ (801cdb0 <GetUsbRxDataSize+0x10>)
 801cda6:	681b      	ldr	r3, [r3, #0]
}
 801cda8:	0018      	movs	r0, r3
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	bd80      	pop	{r7, pc}
 801cdae:	46c0      	nop			@ (mov r8, r8)
 801cdb0:	2000274c 	.word	0x2000274c

0801cdb4 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b082      	sub	sp, #8
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801cdbc:	687a      	ldr	r2, [r7, #4]
 801cdbe:	4b07      	ldr	r3, [pc, #28]	@ (801cddc <GetUsbRxNextChunk+0x28>)
 801cdc0:	18d2      	adds	r2, r2, r3
 801cdc2:	4b07      	ldr	r3, [pc, #28]	@ (801cde0 <GetUsbRxNextChunk+0x2c>)
 801cdc4:	0011      	movs	r1, r2
 801cdc6:	0018      	movs	r0, r3
 801cdc8:	f7fe fc6b 	bl	801b6a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cdcc:	4b04      	ldr	r3, [pc, #16]	@ (801cde0 <GetUsbRxNextChunk+0x2c>)
 801cdce:	0018      	movs	r0, r3
 801cdd0:	f7fe fcb2 	bl	801b738 <USBD_CDC_ReceivePacket>
}
 801cdd4:	46c0      	nop			@ (mov r8, r8)
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	b002      	add	sp, #8
 801cdda:	bd80      	pop	{r7, pc}
 801cddc:	20002750 	.word	0x20002750
 801cde0:	200023cc 	.word	0x200023cc

0801cde4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b082      	sub	sp, #8
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	0002      	movs	r2, r0
 801cdec:	6039      	str	r1, [r7, #0]
 801cdee:	1dfb      	adds	r3, r7, #7
 801cdf0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cdf2:	683b      	ldr	r3, [r7, #0]
 801cdf4:	2212      	movs	r2, #18
 801cdf6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cdf8:	4b02      	ldr	r3, [pc, #8]	@ (801ce04 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cdfa:	0018      	movs	r0, r3
 801cdfc:	46bd      	mov	sp, r7
 801cdfe:	b002      	add	sp, #8
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	46c0      	nop			@ (mov r8, r8)
 801ce04:	20000220 	.word	0x20000220

0801ce08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b082      	sub	sp, #8
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	0002      	movs	r2, r0
 801ce10:	6039      	str	r1, [r7, #0]
 801ce12:	1dfb      	adds	r3, r7, #7
 801ce14:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ce16:	683b      	ldr	r3, [r7, #0]
 801ce18:	2204      	movs	r2, #4
 801ce1a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ce1c:	4b02      	ldr	r3, [pc, #8]	@ (801ce28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ce1e:	0018      	movs	r0, r3
 801ce20:	46bd      	mov	sp, r7
 801ce22:	b002      	add	sp, #8
 801ce24:	bd80      	pop	{r7, pc}
 801ce26:	46c0      	nop			@ (mov r8, r8)
 801ce28:	20000234 	.word	0x20000234

0801ce2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce2c:	b580      	push	{r7, lr}
 801ce2e:	b082      	sub	sp, #8
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	0002      	movs	r2, r0
 801ce34:	6039      	str	r1, [r7, #0]
 801ce36:	1dfb      	adds	r3, r7, #7
 801ce38:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ce3a:	1dfb      	adds	r3, r7, #7
 801ce3c:	781b      	ldrb	r3, [r3, #0]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d106      	bne.n	801ce50 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ce42:	683a      	ldr	r2, [r7, #0]
 801ce44:	4908      	ldr	r1, [pc, #32]	@ (801ce68 <USBD_FS_ProductStrDescriptor+0x3c>)
 801ce46:	4b09      	ldr	r3, [pc, #36]	@ (801ce6c <USBD_FS_ProductStrDescriptor+0x40>)
 801ce48:	0018      	movs	r0, r3
 801ce4a:	f7ff fdb1 	bl	801c9b0 <USBD_GetString>
 801ce4e:	e005      	b.n	801ce5c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ce50:	683a      	ldr	r2, [r7, #0]
 801ce52:	4905      	ldr	r1, [pc, #20]	@ (801ce68 <USBD_FS_ProductStrDescriptor+0x3c>)
 801ce54:	4b05      	ldr	r3, [pc, #20]	@ (801ce6c <USBD_FS_ProductStrDescriptor+0x40>)
 801ce56:	0018      	movs	r0, r3
 801ce58:	f7ff fdaa 	bl	801c9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce5c:	4b02      	ldr	r3, [pc, #8]	@ (801ce68 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801ce5e:	0018      	movs	r0, r3
 801ce60:	46bd      	mov	sp, r7
 801ce62:	b002      	add	sp, #8
 801ce64:	bd80      	pop	{r7, pc}
 801ce66:	46c0      	nop			@ (mov r8, r8)
 801ce68:	20002f50 	.word	0x20002f50
 801ce6c:	08025184 	.word	0x08025184

0801ce70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b082      	sub	sp, #8
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	0002      	movs	r2, r0
 801ce78:	6039      	str	r1, [r7, #0]
 801ce7a:	1dfb      	adds	r3, r7, #7
 801ce7c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ce7e:	683a      	ldr	r2, [r7, #0]
 801ce80:	4904      	ldr	r1, [pc, #16]	@ (801ce94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ce82:	4b05      	ldr	r3, [pc, #20]	@ (801ce98 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801ce84:	0018      	movs	r0, r3
 801ce86:	f7ff fd93 	bl	801c9b0 <USBD_GetString>
  return USBD_StrDesc;
 801ce8a:	4b02      	ldr	r3, [pc, #8]	@ (801ce94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801ce8c:	0018      	movs	r0, r3
 801ce8e:	46bd      	mov	sp, r7
 801ce90:	b002      	add	sp, #8
 801ce92:	bd80      	pop	{r7, pc}
 801ce94:	20002f50 	.word	0x20002f50
 801ce98:	0802519c 	.word	0x0802519c

0801ce9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b082      	sub	sp, #8
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	0002      	movs	r2, r0
 801cea4:	6039      	str	r1, [r7, #0]
 801cea6:	1dfb      	adds	r3, r7, #7
 801cea8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	221a      	movs	r2, #26
 801ceae:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ceb0:	f000 f84c 	bl	801cf4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ceb4:	4b02      	ldr	r3, [pc, #8]	@ (801cec0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801ceb6:	0018      	movs	r0, r3
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	b002      	add	sp, #8
 801cebc:	bd80      	pop	{r7, pc}
 801cebe:	46c0      	nop			@ (mov r8, r8)
 801cec0:	20000238 	.word	0x20000238

0801cec4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b082      	sub	sp, #8
 801cec8:	af00      	add	r7, sp, #0
 801ceca:	0002      	movs	r2, r0
 801cecc:	6039      	str	r1, [r7, #0]
 801cece:	1dfb      	adds	r3, r7, #7
 801ced0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801ced2:	1dfb      	adds	r3, r7, #7
 801ced4:	781b      	ldrb	r3, [r3, #0]
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d106      	bne.n	801cee8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ceda:	683a      	ldr	r2, [r7, #0]
 801cedc:	4908      	ldr	r1, [pc, #32]	@ (801cf00 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cede:	4b09      	ldr	r3, [pc, #36]	@ (801cf04 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cee0:	0018      	movs	r0, r3
 801cee2:	f7ff fd65 	bl	801c9b0 <USBD_GetString>
 801cee6:	e005      	b.n	801cef4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cee8:	683a      	ldr	r2, [r7, #0]
 801ceea:	4905      	ldr	r1, [pc, #20]	@ (801cf00 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801ceec:	4b05      	ldr	r3, [pc, #20]	@ (801cf04 <USBD_FS_ConfigStrDescriptor+0x40>)
 801ceee:	0018      	movs	r0, r3
 801cef0:	f7ff fd5e 	bl	801c9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cef4:	4b02      	ldr	r3, [pc, #8]	@ (801cf00 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801cef6:	0018      	movs	r0, r3
 801cef8:	46bd      	mov	sp, r7
 801cefa:	b002      	add	sp, #8
 801cefc:	bd80      	pop	{r7, pc}
 801cefe:	46c0      	nop			@ (mov r8, r8)
 801cf00:	20002f50 	.word	0x20002f50
 801cf04:	080251b0 	.word	0x080251b0

0801cf08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b082      	sub	sp, #8
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	0002      	movs	r2, r0
 801cf10:	6039      	str	r1, [r7, #0]
 801cf12:	1dfb      	adds	r3, r7, #7
 801cf14:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cf16:	1dfb      	adds	r3, r7, #7
 801cf18:	781b      	ldrb	r3, [r3, #0]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d106      	bne.n	801cf2c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf1e:	683a      	ldr	r2, [r7, #0]
 801cf20:	4908      	ldr	r1, [pc, #32]	@ (801cf44 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cf22:	4b09      	ldr	r3, [pc, #36]	@ (801cf48 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cf24:	0018      	movs	r0, r3
 801cf26:	f7ff fd43 	bl	801c9b0 <USBD_GetString>
 801cf2a:	e005      	b.n	801cf38 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf2c:	683a      	ldr	r2, [r7, #0]
 801cf2e:	4905      	ldr	r1, [pc, #20]	@ (801cf44 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cf30:	4b05      	ldr	r3, [pc, #20]	@ (801cf48 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cf32:	0018      	movs	r0, r3
 801cf34:	f7ff fd3c 	bl	801c9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf38:	4b02      	ldr	r3, [pc, #8]	@ (801cf44 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801cf3a:	0018      	movs	r0, r3
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	b002      	add	sp, #8
 801cf40:	bd80      	pop	{r7, pc}
 801cf42:	46c0      	nop			@ (mov r8, r8)
 801cf44:	20002f50 	.word	0x20002f50
 801cf48:	080251bc 	.word	0x080251bc

0801cf4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b084      	sub	sp, #16
 801cf50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cf52:	4b10      	ldr	r3, [pc, #64]	@ (801cf94 <Get_SerialNum+0x48>)
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cf58:	4b0f      	ldr	r3, [pc, #60]	@ (801cf98 <Get_SerialNum+0x4c>)
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cf5e:	4b0f      	ldr	r3, [pc, #60]	@ (801cf9c <Get_SerialNum+0x50>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cf64:	68fa      	ldr	r2, [r7, #12]
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	18d3      	adds	r3, r2, r3
 801cf6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d00b      	beq.n	801cf8a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cf72:	490b      	ldr	r1, [pc, #44]	@ (801cfa0 <Get_SerialNum+0x54>)
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	2208      	movs	r2, #8
 801cf78:	0018      	movs	r0, r3
 801cf7a:	f000 f815 	bl	801cfa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cf7e:	4909      	ldr	r1, [pc, #36]	@ (801cfa4 <Get_SerialNum+0x58>)
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	2204      	movs	r2, #4
 801cf84:	0018      	movs	r0, r3
 801cf86:	f000 f80f 	bl	801cfa8 <IntToUnicode>
  }
}
 801cf8a:	46c0      	nop			@ (mov r8, r8)
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	b004      	add	sp, #16
 801cf90:	bd80      	pop	{r7, pc}
 801cf92:	46c0      	nop			@ (mov r8, r8)
 801cf94:	1ff80050 	.word	0x1ff80050
 801cf98:	1ff80054 	.word	0x1ff80054
 801cf9c:	1ff80058 	.word	0x1ff80058
 801cfa0:	2000023a 	.word	0x2000023a
 801cfa4:	2000024a 	.word	0x2000024a

0801cfa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b086      	sub	sp, #24
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	60f8      	str	r0, [r7, #12]
 801cfb0:	60b9      	str	r1, [r7, #8]
 801cfb2:	1dfb      	adds	r3, r7, #7
 801cfb4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801cfb6:	2117      	movs	r1, #23
 801cfb8:	187b      	adds	r3, r7, r1
 801cfba:	2200      	movs	r2, #0
 801cfbc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801cfbe:	187b      	adds	r3, r7, r1
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	701a      	strb	r2, [r3, #0]
 801cfc4:	e02f      	b.n	801d026 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	0f1b      	lsrs	r3, r3, #28
 801cfca:	2b09      	cmp	r3, #9
 801cfcc:	d80d      	bhi.n	801cfea <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cfce:	68fb      	ldr	r3, [r7, #12]
 801cfd0:	0f1b      	lsrs	r3, r3, #28
 801cfd2:	b2da      	uxtb	r2, r3
 801cfd4:	2317      	movs	r3, #23
 801cfd6:	18fb      	adds	r3, r7, r3
 801cfd8:	781b      	ldrb	r3, [r3, #0]
 801cfda:	005b      	lsls	r3, r3, #1
 801cfdc:	0019      	movs	r1, r3
 801cfde:	68bb      	ldr	r3, [r7, #8]
 801cfe0:	185b      	adds	r3, r3, r1
 801cfe2:	3230      	adds	r2, #48	@ 0x30
 801cfe4:	b2d2      	uxtb	r2, r2
 801cfe6:	701a      	strb	r2, [r3, #0]
 801cfe8:	e00c      	b.n	801d004 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	0f1b      	lsrs	r3, r3, #28
 801cfee:	b2da      	uxtb	r2, r3
 801cff0:	2317      	movs	r3, #23
 801cff2:	18fb      	adds	r3, r7, r3
 801cff4:	781b      	ldrb	r3, [r3, #0]
 801cff6:	005b      	lsls	r3, r3, #1
 801cff8:	0019      	movs	r1, r3
 801cffa:	68bb      	ldr	r3, [r7, #8]
 801cffc:	185b      	adds	r3, r3, r1
 801cffe:	3237      	adds	r2, #55	@ 0x37
 801d000:	b2d2      	uxtb	r2, r2
 801d002:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	011b      	lsls	r3, r3, #4
 801d008:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d00a:	2117      	movs	r1, #23
 801d00c:	187b      	adds	r3, r7, r1
 801d00e:	781b      	ldrb	r3, [r3, #0]
 801d010:	005b      	lsls	r3, r3, #1
 801d012:	3301      	adds	r3, #1
 801d014:	68ba      	ldr	r2, [r7, #8]
 801d016:	18d3      	adds	r3, r2, r3
 801d018:	2200      	movs	r2, #0
 801d01a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d01c:	187b      	adds	r3, r7, r1
 801d01e:	781a      	ldrb	r2, [r3, #0]
 801d020:	187b      	adds	r3, r7, r1
 801d022:	3201      	adds	r2, #1
 801d024:	701a      	strb	r2, [r3, #0]
 801d026:	2317      	movs	r3, #23
 801d028:	18fa      	adds	r2, r7, r3
 801d02a:	1dfb      	adds	r3, r7, #7
 801d02c:	7812      	ldrb	r2, [r2, #0]
 801d02e:	781b      	ldrb	r3, [r3, #0]
 801d030:	429a      	cmp	r2, r3
 801d032:	d3c8      	bcc.n	801cfc6 <IntToUnicode+0x1e>
  }
}
 801d034:	46c0      	nop			@ (mov r8, r8)
 801d036:	46c0      	nop			@ (mov r8, r8)
 801d038:	46bd      	mov	sp, r7
 801d03a:	b006      	add	sp, #24
 801d03c:	bd80      	pop	{r7, pc}
	...

0801d040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	4a0a      	ldr	r2, [pc, #40]	@ (801d078 <HAL_PCD_MspInit+0x38>)
 801d04e:	4293      	cmp	r3, r2
 801d050:	d10e      	bne.n	801d070 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d052:	4b0a      	ldr	r3, [pc, #40]	@ (801d07c <HAL_PCD_MspInit+0x3c>)
 801d054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d056:	4b09      	ldr	r3, [pc, #36]	@ (801d07c <HAL_PCD_MspInit+0x3c>)
 801d058:	2180      	movs	r1, #128	@ 0x80
 801d05a:	0409      	lsls	r1, r1, #16
 801d05c:	430a      	orrs	r2, r1
 801d05e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d060:	2200      	movs	r2, #0
 801d062:	2100      	movs	r1, #0
 801d064:	201f      	movs	r0, #31
 801d066:	f7f2 fadf 	bl	800f628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d06a:	201f      	movs	r0, #31
 801d06c:	f7f2 faf1 	bl	800f652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d070:	46c0      	nop			@ (mov r8, r8)
 801d072:	46bd      	mov	sp, r7
 801d074:	b002      	add	sp, #8
 801d076:	bd80      	pop	{r7, pc}
 801d078:	40005c00 	.word	0x40005c00
 801d07c:	40021000 	.word	0x40021000

0801d080 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b082      	sub	sp, #8
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	23bc      	movs	r3, #188	@ 0xbc
 801d08c:	009b      	lsls	r3, r3, #2
 801d08e:	58d2      	ldr	r2, [r2, r3]
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	21ac      	movs	r1, #172	@ 0xac
 801d094:	0089      	lsls	r1, r1, #2
 801d096:	468c      	mov	ip, r1
 801d098:	4463      	add	r3, ip
 801d09a:	0019      	movs	r1, r3
 801d09c:	0010      	movs	r0, r2
 801d09e:	f7fe fc1d 	bl	801b8dc <USBD_LL_SetupStage>
}
 801d0a2:	46c0      	nop			@ (mov r8, r8)
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	b002      	add	sp, #8
 801d0a8:	bd80      	pop	{r7, pc}

0801d0aa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0aa:	b590      	push	{r4, r7, lr}
 801d0ac:	b083      	sub	sp, #12
 801d0ae:	af00      	add	r7, sp, #0
 801d0b0:	6078      	str	r0, [r7, #4]
 801d0b2:	000a      	movs	r2, r1
 801d0b4:	1cfb      	adds	r3, r7, #3
 801d0b6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d0b8:	687a      	ldr	r2, [r7, #4]
 801d0ba:	23bc      	movs	r3, #188	@ 0xbc
 801d0bc:	009b      	lsls	r3, r3, #2
 801d0be:	58d4      	ldr	r4, [r2, r3]
 801d0c0:	1cfb      	adds	r3, r7, #3
 801d0c2:	781a      	ldrb	r2, [r3, #0]
 801d0c4:	6878      	ldr	r0, [r7, #4]
 801d0c6:	23be      	movs	r3, #190	@ 0xbe
 801d0c8:	0059      	lsls	r1, r3, #1
 801d0ca:	0013      	movs	r3, r2
 801d0cc:	009b      	lsls	r3, r3, #2
 801d0ce:	189b      	adds	r3, r3, r2
 801d0d0:	00db      	lsls	r3, r3, #3
 801d0d2:	18c3      	adds	r3, r0, r3
 801d0d4:	185b      	adds	r3, r3, r1
 801d0d6:	681a      	ldr	r2, [r3, #0]
 801d0d8:	1cfb      	adds	r3, r7, #3
 801d0da:	781b      	ldrb	r3, [r3, #0]
 801d0dc:	0019      	movs	r1, r3
 801d0de:	0020      	movs	r0, r4
 801d0e0:	f7fe fc5a 	bl	801b998 <USBD_LL_DataOutStage>
}
 801d0e4:	46c0      	nop			@ (mov r8, r8)
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	b003      	add	sp, #12
 801d0ea:	bd90      	pop	{r4, r7, pc}

0801d0ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b082      	sub	sp, #8
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	6078      	str	r0, [r7, #4]
 801d0f4:	000a      	movs	r2, r1
 801d0f6:	1cfb      	adds	r3, r7, #3
 801d0f8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d0fa:	687a      	ldr	r2, [r7, #4]
 801d0fc:	23bc      	movs	r3, #188	@ 0xbc
 801d0fe:	009b      	lsls	r3, r3, #2
 801d100:	58d0      	ldr	r0, [r2, r3]
 801d102:	1cfb      	adds	r3, r7, #3
 801d104:	781a      	ldrb	r2, [r3, #0]
 801d106:	6879      	ldr	r1, [r7, #4]
 801d108:	0013      	movs	r3, r2
 801d10a:	009b      	lsls	r3, r3, #2
 801d10c:	189b      	adds	r3, r3, r2
 801d10e:	00db      	lsls	r3, r3, #3
 801d110:	18cb      	adds	r3, r1, r3
 801d112:	333c      	adds	r3, #60	@ 0x3c
 801d114:	681a      	ldr	r2, [r3, #0]
 801d116:	1cfb      	adds	r3, r7, #3
 801d118:	781b      	ldrb	r3, [r3, #0]
 801d11a:	0019      	movs	r1, r3
 801d11c:	f7fe fcbe 	bl	801ba9c <USBD_LL_DataInStage>
}
 801d120:	46c0      	nop			@ (mov r8, r8)
 801d122:	46bd      	mov	sp, r7
 801d124:	b002      	add	sp, #8
 801d126:	bd80      	pop	{r7, pc}

0801d128 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d128:	b580      	push	{r7, lr}
 801d12a:	b082      	sub	sp, #8
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d130:	687a      	ldr	r2, [r7, #4]
 801d132:	23bc      	movs	r3, #188	@ 0xbc
 801d134:	009b      	lsls	r3, r3, #2
 801d136:	58d3      	ldr	r3, [r2, r3]
 801d138:	0018      	movs	r0, r3
 801d13a:	f7fe fdf5 	bl	801bd28 <USBD_LL_SOF>
}
 801d13e:	46c0      	nop			@ (mov r8, r8)
 801d140:	46bd      	mov	sp, r7
 801d142:	b002      	add	sp, #8
 801d144:	bd80      	pop	{r7, pc}

0801d146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d146:	b580      	push	{r7, lr}
 801d148:	b084      	sub	sp, #16
 801d14a:	af00      	add	r7, sp, #0
 801d14c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d14e:	230f      	movs	r3, #15
 801d150:	18fb      	adds	r3, r7, r3
 801d152:	2201      	movs	r2, #1
 801d154:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	689b      	ldr	r3, [r3, #8]
 801d15a:	2b02      	cmp	r3, #2
 801d15c:	d001      	beq.n	801d162 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d15e:	f7eb f8cf 	bl	8008300 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d162:	687a      	ldr	r2, [r7, #4]
 801d164:	23bc      	movs	r3, #188	@ 0xbc
 801d166:	009b      	lsls	r3, r3, #2
 801d168:	58d2      	ldr	r2, [r2, r3]
 801d16a:	230f      	movs	r3, #15
 801d16c:	18fb      	adds	r3, r7, r3
 801d16e:	781b      	ldrb	r3, [r3, #0]
 801d170:	0019      	movs	r1, r3
 801d172:	0010      	movs	r0, r2
 801d174:	f7fe fd97 	bl	801bca6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d178:	687a      	ldr	r2, [r7, #4]
 801d17a:	23bc      	movs	r3, #188	@ 0xbc
 801d17c:	009b      	lsls	r3, r3, #2
 801d17e:	58d3      	ldr	r3, [r2, r3]
 801d180:	0018      	movs	r0, r3
 801d182:	f7fe fd48 	bl	801bc16 <USBD_LL_Reset>
}
 801d186:	46c0      	nop			@ (mov r8, r8)
 801d188:	46bd      	mov	sp, r7
 801d18a:	b004      	add	sp, #16
 801d18c:	bd80      	pop	{r7, pc}
	...

0801d190 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b082      	sub	sp, #8
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d198:	687a      	ldr	r2, [r7, #4]
 801d19a:	23bc      	movs	r3, #188	@ 0xbc
 801d19c:	009b      	lsls	r3, r3, #2
 801d19e:	58d3      	ldr	r3, [r2, r3]
 801d1a0:	0018      	movs	r0, r3
 801d1a2:	f7fe fd91 	bl	801bcc8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	699b      	ldr	r3, [r3, #24]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d005      	beq.n	801d1ba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d1ae:	4b05      	ldr	r3, [pc, #20]	@ (801d1c4 <HAL_PCD_SuspendCallback+0x34>)
 801d1b0:	691a      	ldr	r2, [r3, #16]
 801d1b2:	4b04      	ldr	r3, [pc, #16]	@ (801d1c4 <HAL_PCD_SuspendCallback+0x34>)
 801d1b4:	2106      	movs	r1, #6
 801d1b6:	430a      	orrs	r2, r1
 801d1b8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d1ba:	46c0      	nop			@ (mov r8, r8)
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	b002      	add	sp, #8
 801d1c0:	bd80      	pop	{r7, pc}
 801d1c2:	46c0      	nop			@ (mov r8, r8)
 801d1c4:	e000ed00 	.word	0xe000ed00

0801d1c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b082      	sub	sp, #8
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	699b      	ldr	r3, [r3, #24]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d007      	beq.n	801d1e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d1d8:	4b09      	ldr	r3, [pc, #36]	@ (801d200 <HAL_PCD_ResumeCallback+0x38>)
 801d1da:	691a      	ldr	r2, [r3, #16]
 801d1dc:	4b08      	ldr	r3, [pc, #32]	@ (801d200 <HAL_PCD_ResumeCallback+0x38>)
 801d1de:	2106      	movs	r1, #6
 801d1e0:	438a      	bics	r2, r1
 801d1e2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d1e4:	f000 fa44 	bl	801d670 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d1e8:	687a      	ldr	r2, [r7, #4]
 801d1ea:	23bc      	movs	r3, #188	@ 0xbc
 801d1ec:	009b      	lsls	r3, r3, #2
 801d1ee:	58d3      	ldr	r3, [r2, r3]
 801d1f0:	0018      	movs	r0, r3
 801d1f2:	f7fe fd81 	bl	801bcf8 <USBD_LL_Resume>
}
 801d1f6:	46c0      	nop			@ (mov r8, r8)
 801d1f8:	46bd      	mov	sp, r7
 801d1fa:	b002      	add	sp, #8
 801d1fc:	bd80      	pop	{r7, pc}
 801d1fe:	46c0      	nop			@ (mov r8, r8)
 801d200:	e000ed00 	.word	0xe000ed00

0801d204 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b082      	sub	sp, #8
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d20c:	4a2d      	ldr	r2, [pc, #180]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d20e:	23bc      	movs	r3, #188	@ 0xbc
 801d210:	009b      	lsls	r3, r3, #2
 801d212:	6879      	ldr	r1, [r7, #4]
 801d214:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d216:	687a      	ldr	r2, [r7, #4]
 801d218:	23b0      	movs	r3, #176	@ 0xb0
 801d21a:	009b      	lsls	r3, r3, #2
 801d21c:	4929      	ldr	r1, [pc, #164]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d21e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d220:	4b28      	ldr	r3, [pc, #160]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d222:	4a29      	ldr	r2, [pc, #164]	@ (801d2c8 <USBD_LL_Init+0xc4>)
 801d224:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d226:	4b27      	ldr	r3, [pc, #156]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d228:	2208      	movs	r2, #8
 801d22a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d22c:	4b25      	ldr	r3, [pc, #148]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d22e:	2202      	movs	r2, #2
 801d230:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d232:	4b24      	ldr	r3, [pc, #144]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d234:	2202      	movs	r2, #2
 801d236:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d238:	4b22      	ldr	r3, [pc, #136]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d23a:	2200      	movs	r2, #0
 801d23c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d23e:	4b21      	ldr	r3, [pc, #132]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d240:	2200      	movs	r2, #0
 801d242:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d244:	4b1f      	ldr	r3, [pc, #124]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d246:	2200      	movs	r2, #0
 801d248:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d24a:	4b1e      	ldr	r3, [pc, #120]	@ (801d2c4 <USBD_LL_Init+0xc0>)
 801d24c:	0018      	movs	r0, r3
 801d24e:	f7f5 ff95 	bl	801317c <HAL_PCD_Init>
 801d252:	1e03      	subs	r3, r0, #0
 801d254:	d001      	beq.n	801d25a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d256:	f7eb f853 	bl	8008300 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d25a:	687a      	ldr	r2, [r7, #4]
 801d25c:	23b0      	movs	r3, #176	@ 0xb0
 801d25e:	009b      	lsls	r3, r3, #2
 801d260:	58d0      	ldr	r0, [r2, r3]
 801d262:	2318      	movs	r3, #24
 801d264:	2200      	movs	r2, #0
 801d266:	2100      	movs	r1, #0
 801d268:	f7f7 fd56 	bl	8014d18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d26c:	687a      	ldr	r2, [r7, #4]
 801d26e:	23b0      	movs	r3, #176	@ 0xb0
 801d270:	009b      	lsls	r3, r3, #2
 801d272:	58d0      	ldr	r0, [r2, r3]
 801d274:	2358      	movs	r3, #88	@ 0x58
 801d276:	2200      	movs	r2, #0
 801d278:	2180      	movs	r1, #128	@ 0x80
 801d27a:	f7f7 fd4d 	bl	8014d18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d27e:	687a      	ldr	r2, [r7, #4]
 801d280:	23b0      	movs	r3, #176	@ 0xb0
 801d282:	009b      	lsls	r3, r3, #2
 801d284:	58d0      	ldr	r0, [r2, r3]
 801d286:	23c0      	movs	r3, #192	@ 0xc0
 801d288:	2200      	movs	r2, #0
 801d28a:	2181      	movs	r1, #129	@ 0x81
 801d28c:	f7f7 fd44 	bl	8014d18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d290:	687a      	ldr	r2, [r7, #4]
 801d292:	23b0      	movs	r3, #176	@ 0xb0
 801d294:	009b      	lsls	r3, r3, #2
 801d296:	58d0      	ldr	r0, [r2, r3]
 801d298:	2388      	movs	r3, #136	@ 0x88
 801d29a:	005b      	lsls	r3, r3, #1
 801d29c:	2200      	movs	r2, #0
 801d29e:	2101      	movs	r1, #1
 801d2a0:	f7f7 fd3a 	bl	8014d18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d2a4:	687a      	ldr	r2, [r7, #4]
 801d2a6:	23b0      	movs	r3, #176	@ 0xb0
 801d2a8:	009b      	lsls	r3, r3, #2
 801d2aa:	58d0      	ldr	r0, [r2, r3]
 801d2ac:	2380      	movs	r3, #128	@ 0x80
 801d2ae:	005b      	lsls	r3, r3, #1
 801d2b0:	2200      	movs	r2, #0
 801d2b2:	2182      	movs	r1, #130	@ 0x82
 801d2b4:	f7f7 fd30 	bl	8014d18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d2b8:	2300      	movs	r3, #0
}
 801d2ba:	0018      	movs	r0, r3
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	b002      	add	sp, #8
 801d2c0:	bd80      	pop	{r7, pc}
 801d2c2:	46c0      	nop			@ (mov r8, r8)
 801d2c4:	20003150 	.word	0x20003150
 801d2c8:	40005c00 	.word	0x40005c00

0801d2cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2ce:	b085      	sub	sp, #20
 801d2d0:	af00      	add	r7, sp, #0
 801d2d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2d4:	210f      	movs	r1, #15
 801d2d6:	187b      	adds	r3, r7, r1
 801d2d8:	2200      	movs	r2, #0
 801d2da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2dc:	260e      	movs	r6, #14
 801d2de:	19bb      	adds	r3, r7, r6
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d2e4:	687a      	ldr	r2, [r7, #4]
 801d2e6:	23b0      	movs	r3, #176	@ 0xb0
 801d2e8:	009b      	lsls	r3, r3, #2
 801d2ea:	58d3      	ldr	r3, [r2, r3]
 801d2ec:	000d      	movs	r5, r1
 801d2ee:	187c      	adds	r4, r7, r1
 801d2f0:	0018      	movs	r0, r3
 801d2f2:	f7f6 f843 	bl	801337c <HAL_PCD_Start>
 801d2f6:	0003      	movs	r3, r0
 801d2f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d2fa:	19bc      	adds	r4, r7, r6
 801d2fc:	197b      	adds	r3, r7, r5
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	0018      	movs	r0, r3
 801d302:	f000 f9bc 	bl	801d67e <USBD_Get_USB_Status>
 801d306:	0003      	movs	r3, r0
 801d308:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d30a:	19bb      	adds	r3, r7, r6
 801d30c:	781b      	ldrb	r3, [r3, #0]
}
 801d30e:	0018      	movs	r0, r3
 801d310:	46bd      	mov	sp, r7
 801d312:	b005      	add	sp, #20
 801d314:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d316:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d318:	b085      	sub	sp, #20
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	6078      	str	r0, [r7, #4]
 801d31e:	000c      	movs	r4, r1
 801d320:	0010      	movs	r0, r2
 801d322:	0019      	movs	r1, r3
 801d324:	1cfb      	adds	r3, r7, #3
 801d326:	1c22      	adds	r2, r4, #0
 801d328:	701a      	strb	r2, [r3, #0]
 801d32a:	1cbb      	adds	r3, r7, #2
 801d32c:	1c02      	adds	r2, r0, #0
 801d32e:	701a      	strb	r2, [r3, #0]
 801d330:	003b      	movs	r3, r7
 801d332:	1c0a      	adds	r2, r1, #0
 801d334:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d336:	260f      	movs	r6, #15
 801d338:	19bb      	adds	r3, r7, r6
 801d33a:	2200      	movs	r2, #0
 801d33c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d33e:	250e      	movs	r5, #14
 801d340:	197b      	adds	r3, r7, r5
 801d342:	2200      	movs	r2, #0
 801d344:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	23b0      	movs	r3, #176	@ 0xb0
 801d34a:	009b      	lsls	r3, r3, #2
 801d34c:	58d0      	ldr	r0, [r2, r3]
 801d34e:	19bc      	adds	r4, r7, r6
 801d350:	1cbb      	adds	r3, r7, #2
 801d352:	781d      	ldrb	r5, [r3, #0]
 801d354:	003b      	movs	r3, r7
 801d356:	881a      	ldrh	r2, [r3, #0]
 801d358:	1cfb      	adds	r3, r7, #3
 801d35a:	7819      	ldrb	r1, [r3, #0]
 801d35c:	002b      	movs	r3, r5
 801d35e:	f7f6 f9a2 	bl	80136a6 <HAL_PCD_EP_Open>
 801d362:	0003      	movs	r3, r0
 801d364:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d366:	250e      	movs	r5, #14
 801d368:	197c      	adds	r4, r7, r5
 801d36a:	19bb      	adds	r3, r7, r6
 801d36c:	781b      	ldrb	r3, [r3, #0]
 801d36e:	0018      	movs	r0, r3
 801d370:	f000 f985 	bl	801d67e <USBD_Get_USB_Status>
 801d374:	0003      	movs	r3, r0
 801d376:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d378:	197b      	adds	r3, r7, r5
 801d37a:	781b      	ldrb	r3, [r3, #0]
}
 801d37c:	0018      	movs	r0, r3
 801d37e:	46bd      	mov	sp, r7
 801d380:	b005      	add	sp, #20
 801d382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d384 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d386:	b085      	sub	sp, #20
 801d388:	af00      	add	r7, sp, #0
 801d38a:	6078      	str	r0, [r7, #4]
 801d38c:	000a      	movs	r2, r1
 801d38e:	1cfb      	adds	r3, r7, #3
 801d390:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d392:	210f      	movs	r1, #15
 801d394:	187b      	adds	r3, r7, r1
 801d396:	2200      	movs	r2, #0
 801d398:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d39a:	260e      	movs	r6, #14
 801d39c:	19bb      	adds	r3, r7, r6
 801d39e:	2200      	movs	r2, #0
 801d3a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d3a2:	687a      	ldr	r2, [r7, #4]
 801d3a4:	23b0      	movs	r3, #176	@ 0xb0
 801d3a6:	009b      	lsls	r3, r3, #2
 801d3a8:	58d2      	ldr	r2, [r2, r3]
 801d3aa:	000d      	movs	r5, r1
 801d3ac:	187c      	adds	r4, r7, r1
 801d3ae:	1cfb      	adds	r3, r7, #3
 801d3b0:	781b      	ldrb	r3, [r3, #0]
 801d3b2:	0019      	movs	r1, r3
 801d3b4:	0010      	movs	r0, r2
 801d3b6:	f7f6 f9e5 	bl	8013784 <HAL_PCD_EP_Close>
 801d3ba:	0003      	movs	r3, r0
 801d3bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3be:	19bc      	adds	r4, r7, r6
 801d3c0:	197b      	adds	r3, r7, r5
 801d3c2:	781b      	ldrb	r3, [r3, #0]
 801d3c4:	0018      	movs	r0, r3
 801d3c6:	f000 f95a 	bl	801d67e <USBD_Get_USB_Status>
 801d3ca:	0003      	movs	r3, r0
 801d3cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d3ce:	19bb      	adds	r3, r7, r6
 801d3d0:	781b      	ldrb	r3, [r3, #0]
}
 801d3d2:	0018      	movs	r0, r3
 801d3d4:	46bd      	mov	sp, r7
 801d3d6:	b005      	add	sp, #20
 801d3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d3da <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3dc:	b085      	sub	sp, #20
 801d3de:	af00      	add	r7, sp, #0
 801d3e0:	6078      	str	r0, [r7, #4]
 801d3e2:	000a      	movs	r2, r1
 801d3e4:	1cfb      	adds	r3, r7, #3
 801d3e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3e8:	210f      	movs	r1, #15
 801d3ea:	187b      	adds	r3, r7, r1
 801d3ec:	2200      	movs	r2, #0
 801d3ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3f0:	260e      	movs	r6, #14
 801d3f2:	19bb      	adds	r3, r7, r6
 801d3f4:	2200      	movs	r2, #0
 801d3f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d3f8:	687a      	ldr	r2, [r7, #4]
 801d3fa:	23b0      	movs	r3, #176	@ 0xb0
 801d3fc:	009b      	lsls	r3, r3, #2
 801d3fe:	58d2      	ldr	r2, [r2, r3]
 801d400:	000d      	movs	r5, r1
 801d402:	187c      	adds	r4, r7, r1
 801d404:	1cfb      	adds	r3, r7, #3
 801d406:	781b      	ldrb	r3, [r3, #0]
 801d408:	0019      	movs	r1, r3
 801d40a:	0010      	movs	r0, r2
 801d40c:	f7f6 fa97 	bl	801393e <HAL_PCD_EP_SetStall>
 801d410:	0003      	movs	r3, r0
 801d412:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d414:	19bc      	adds	r4, r7, r6
 801d416:	197b      	adds	r3, r7, r5
 801d418:	781b      	ldrb	r3, [r3, #0]
 801d41a:	0018      	movs	r0, r3
 801d41c:	f000 f92f 	bl	801d67e <USBD_Get_USB_Status>
 801d420:	0003      	movs	r3, r0
 801d422:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d424:	19bb      	adds	r3, r7, r6
 801d426:	781b      	ldrb	r3, [r3, #0]
}
 801d428:	0018      	movs	r0, r3
 801d42a:	46bd      	mov	sp, r7
 801d42c:	b005      	add	sp, #20
 801d42e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d430 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d430:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d432:	b085      	sub	sp, #20
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	000a      	movs	r2, r1
 801d43a:	1cfb      	adds	r3, r7, #3
 801d43c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d43e:	210f      	movs	r1, #15
 801d440:	187b      	adds	r3, r7, r1
 801d442:	2200      	movs	r2, #0
 801d444:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d446:	260e      	movs	r6, #14
 801d448:	19bb      	adds	r3, r7, r6
 801d44a:	2200      	movs	r2, #0
 801d44c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d44e:	687a      	ldr	r2, [r7, #4]
 801d450:	23b0      	movs	r3, #176	@ 0xb0
 801d452:	009b      	lsls	r3, r3, #2
 801d454:	58d2      	ldr	r2, [r2, r3]
 801d456:	000d      	movs	r5, r1
 801d458:	187c      	adds	r4, r7, r1
 801d45a:	1cfb      	adds	r3, r7, #3
 801d45c:	781b      	ldrb	r3, [r3, #0]
 801d45e:	0019      	movs	r1, r3
 801d460:	0010      	movs	r0, r2
 801d462:	f7f6 fac8 	bl	80139f6 <HAL_PCD_EP_ClrStall>
 801d466:	0003      	movs	r3, r0
 801d468:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d46a:	19bc      	adds	r4, r7, r6
 801d46c:	197b      	adds	r3, r7, r5
 801d46e:	781b      	ldrb	r3, [r3, #0]
 801d470:	0018      	movs	r0, r3
 801d472:	f000 f904 	bl	801d67e <USBD_Get_USB_Status>
 801d476:	0003      	movs	r3, r0
 801d478:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d47a:	19bb      	adds	r3, r7, r6
 801d47c:	781b      	ldrb	r3, [r3, #0]
}
 801d47e:	0018      	movs	r0, r3
 801d480:	46bd      	mov	sp, r7
 801d482:	b005      	add	sp, #20
 801d484:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d486 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d486:	b580      	push	{r7, lr}
 801d488:	b084      	sub	sp, #16
 801d48a:	af00      	add	r7, sp, #0
 801d48c:	6078      	str	r0, [r7, #4]
 801d48e:	000a      	movs	r2, r1
 801d490:	1cfb      	adds	r3, r7, #3
 801d492:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d494:	687a      	ldr	r2, [r7, #4]
 801d496:	23b0      	movs	r3, #176	@ 0xb0
 801d498:	009b      	lsls	r3, r3, #2
 801d49a:	58d3      	ldr	r3, [r2, r3]
 801d49c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d49e:	1cfb      	adds	r3, r7, #3
 801d4a0:	781b      	ldrb	r3, [r3, #0]
 801d4a2:	b25b      	sxtb	r3, r3
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	da0d      	bge.n	801d4c4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d4a8:	1cfb      	adds	r3, r7, #3
 801d4aa:	781b      	ldrb	r3, [r3, #0]
 801d4ac:	227f      	movs	r2, #127	@ 0x7f
 801d4ae:	4013      	ands	r3, r2
 801d4b0:	68f9      	ldr	r1, [r7, #12]
 801d4b2:	1c5a      	adds	r2, r3, #1
 801d4b4:	0013      	movs	r3, r2
 801d4b6:	009b      	lsls	r3, r3, #2
 801d4b8:	189b      	adds	r3, r3, r2
 801d4ba:	00db      	lsls	r3, r3, #3
 801d4bc:	18cb      	adds	r3, r1, r3
 801d4be:	3302      	adds	r3, #2
 801d4c0:	781b      	ldrb	r3, [r3, #0]
 801d4c2:	e00d      	b.n	801d4e0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d4c4:	1cfb      	adds	r3, r7, #3
 801d4c6:	781b      	ldrb	r3, [r3, #0]
 801d4c8:	227f      	movs	r2, #127	@ 0x7f
 801d4ca:	401a      	ands	r2, r3
 801d4cc:	68f8      	ldr	r0, [r7, #12]
 801d4ce:	23b5      	movs	r3, #181	@ 0xb5
 801d4d0:	0059      	lsls	r1, r3, #1
 801d4d2:	0013      	movs	r3, r2
 801d4d4:	009b      	lsls	r3, r3, #2
 801d4d6:	189b      	adds	r3, r3, r2
 801d4d8:	00db      	lsls	r3, r3, #3
 801d4da:	18c3      	adds	r3, r0, r3
 801d4dc:	185b      	adds	r3, r3, r1
 801d4de:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d4e0:	0018      	movs	r0, r3
 801d4e2:	46bd      	mov	sp, r7
 801d4e4:	b004      	add	sp, #16
 801d4e6:	bd80      	pop	{r7, pc}

0801d4e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4ea:	b085      	sub	sp, #20
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	000a      	movs	r2, r1
 801d4f2:	1cfb      	adds	r3, r7, #3
 801d4f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4f6:	210f      	movs	r1, #15
 801d4f8:	187b      	adds	r3, r7, r1
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4fe:	260e      	movs	r6, #14
 801d500:	19bb      	adds	r3, r7, r6
 801d502:	2200      	movs	r2, #0
 801d504:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d506:	687a      	ldr	r2, [r7, #4]
 801d508:	23b0      	movs	r3, #176	@ 0xb0
 801d50a:	009b      	lsls	r3, r3, #2
 801d50c:	58d2      	ldr	r2, [r2, r3]
 801d50e:	000d      	movs	r5, r1
 801d510:	187c      	adds	r4, r7, r1
 801d512:	1cfb      	adds	r3, r7, #3
 801d514:	781b      	ldrb	r3, [r3, #0]
 801d516:	0019      	movs	r1, r3
 801d518:	0010      	movs	r0, r2
 801d51a:	f7f6 f899 	bl	8013650 <HAL_PCD_SetAddress>
 801d51e:	0003      	movs	r3, r0
 801d520:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d522:	19bc      	adds	r4, r7, r6
 801d524:	197b      	adds	r3, r7, r5
 801d526:	781b      	ldrb	r3, [r3, #0]
 801d528:	0018      	movs	r0, r3
 801d52a:	f000 f8a8 	bl	801d67e <USBD_Get_USB_Status>
 801d52e:	0003      	movs	r3, r0
 801d530:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d532:	19bb      	adds	r3, r7, r6
 801d534:	781b      	ldrb	r3, [r3, #0]
}
 801d536:	0018      	movs	r0, r3
 801d538:	46bd      	mov	sp, r7
 801d53a:	b005      	add	sp, #20
 801d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d53e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d53e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d540:	b087      	sub	sp, #28
 801d542:	af00      	add	r7, sp, #0
 801d544:	60f8      	str	r0, [r7, #12]
 801d546:	0008      	movs	r0, r1
 801d548:	607a      	str	r2, [r7, #4]
 801d54a:	0019      	movs	r1, r3
 801d54c:	230b      	movs	r3, #11
 801d54e:	18fb      	adds	r3, r7, r3
 801d550:	1c02      	adds	r2, r0, #0
 801d552:	701a      	strb	r2, [r3, #0]
 801d554:	2408      	movs	r4, #8
 801d556:	193b      	adds	r3, r7, r4
 801d558:	1c0a      	adds	r2, r1, #0
 801d55a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d55c:	2117      	movs	r1, #23
 801d55e:	187b      	adds	r3, r7, r1
 801d560:	2200      	movs	r2, #0
 801d562:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d564:	2516      	movs	r5, #22
 801d566:	197b      	adds	r3, r7, r5
 801d568:	2200      	movs	r2, #0
 801d56a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d56c:	68fa      	ldr	r2, [r7, #12]
 801d56e:	23b0      	movs	r3, #176	@ 0xb0
 801d570:	009b      	lsls	r3, r3, #2
 801d572:	58d0      	ldr	r0, [r2, r3]
 801d574:	193b      	adds	r3, r7, r4
 801d576:	881d      	ldrh	r5, [r3, #0]
 801d578:	000e      	movs	r6, r1
 801d57a:	187c      	adds	r4, r7, r1
 801d57c:	687a      	ldr	r2, [r7, #4]
 801d57e:	230b      	movs	r3, #11
 801d580:	18fb      	adds	r3, r7, r3
 801d582:	7819      	ldrb	r1, [r3, #0]
 801d584:	002b      	movs	r3, r5
 801d586:	f7f6 f99e 	bl	80138c6 <HAL_PCD_EP_Transmit>
 801d58a:	0003      	movs	r3, r0
 801d58c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d58e:	2516      	movs	r5, #22
 801d590:	197c      	adds	r4, r7, r5
 801d592:	19bb      	adds	r3, r7, r6
 801d594:	781b      	ldrb	r3, [r3, #0]
 801d596:	0018      	movs	r0, r3
 801d598:	f000 f871 	bl	801d67e <USBD_Get_USB_Status>
 801d59c:	0003      	movs	r3, r0
 801d59e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d5a0:	197b      	adds	r3, r7, r5
 801d5a2:	781b      	ldrb	r3, [r3, #0]
}
 801d5a4:	0018      	movs	r0, r3
 801d5a6:	46bd      	mov	sp, r7
 801d5a8:	b007      	add	sp, #28
 801d5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5ae:	b087      	sub	sp, #28
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	60f8      	str	r0, [r7, #12]
 801d5b4:	0008      	movs	r0, r1
 801d5b6:	607a      	str	r2, [r7, #4]
 801d5b8:	0019      	movs	r1, r3
 801d5ba:	230b      	movs	r3, #11
 801d5bc:	18fb      	adds	r3, r7, r3
 801d5be:	1c02      	adds	r2, r0, #0
 801d5c0:	701a      	strb	r2, [r3, #0]
 801d5c2:	2408      	movs	r4, #8
 801d5c4:	193b      	adds	r3, r7, r4
 801d5c6:	1c0a      	adds	r2, r1, #0
 801d5c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5ca:	2117      	movs	r1, #23
 801d5cc:	187b      	adds	r3, r7, r1
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5d2:	2516      	movs	r5, #22
 801d5d4:	197b      	adds	r3, r7, r5
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d5da:	68fa      	ldr	r2, [r7, #12]
 801d5dc:	23b0      	movs	r3, #176	@ 0xb0
 801d5de:	009b      	lsls	r3, r3, #2
 801d5e0:	58d0      	ldr	r0, [r2, r3]
 801d5e2:	193b      	adds	r3, r7, r4
 801d5e4:	881d      	ldrh	r5, [r3, #0]
 801d5e6:	000e      	movs	r6, r1
 801d5e8:	187c      	adds	r4, r7, r1
 801d5ea:	687a      	ldr	r2, [r7, #4]
 801d5ec:	230b      	movs	r3, #11
 801d5ee:	18fb      	adds	r3, r7, r3
 801d5f0:	7819      	ldrb	r1, [r3, #0]
 801d5f2:	002b      	movs	r3, r5
 801d5f4:	f7f6 f917 	bl	8013826 <HAL_PCD_EP_Receive>
 801d5f8:	0003      	movs	r3, r0
 801d5fa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5fc:	2516      	movs	r5, #22
 801d5fe:	197c      	adds	r4, r7, r5
 801d600:	19bb      	adds	r3, r7, r6
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	0018      	movs	r0, r3
 801d606:	f000 f83a 	bl	801d67e <USBD_Get_USB_Status>
 801d60a:	0003      	movs	r3, r0
 801d60c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d60e:	197b      	adds	r3, r7, r5
 801d610:	781b      	ldrb	r3, [r3, #0]
}
 801d612:	0018      	movs	r0, r3
 801d614:	46bd      	mov	sp, r7
 801d616:	b007      	add	sp, #28
 801d618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d61a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d61a:	b580      	push	{r7, lr}
 801d61c:	b082      	sub	sp, #8
 801d61e:	af00      	add	r7, sp, #0
 801d620:	6078      	str	r0, [r7, #4]
 801d622:	000a      	movs	r2, r1
 801d624:	1cfb      	adds	r3, r7, #3
 801d626:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d628:	687a      	ldr	r2, [r7, #4]
 801d62a:	23b0      	movs	r3, #176	@ 0xb0
 801d62c:	009b      	lsls	r3, r3, #2
 801d62e:	58d2      	ldr	r2, [r2, r3]
 801d630:	1cfb      	adds	r3, r7, #3
 801d632:	781b      	ldrb	r3, [r3, #0]
 801d634:	0019      	movs	r1, r3
 801d636:	0010      	movs	r0, r2
 801d638:	f7f6 f92c 	bl	8013894 <HAL_PCD_EP_GetRxCount>
 801d63c:	0003      	movs	r3, r0
}
 801d63e:	0018      	movs	r0, r3
 801d640:	46bd      	mov	sp, r7
 801d642:	b002      	add	sp, #8
 801d644:	bd80      	pop	{r7, pc}
	...

0801d648 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d648:	b580      	push	{r7, lr}
 801d64a:	b082      	sub	sp, #8
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d650:	4b02      	ldr	r3, [pc, #8]	@ (801d65c <USBD_static_malloc+0x14>)
}
 801d652:	0018      	movs	r0, r3
 801d654:	46bd      	mov	sp, r7
 801d656:	b002      	add	sp, #8
 801d658:	bd80      	pop	{r7, pc}
 801d65a:	46c0      	nop			@ (mov r8, r8)
 801d65c:	20003444 	.word	0x20003444

0801d660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d660:	b580      	push	{r7, lr}
 801d662:	b082      	sub	sp, #8
 801d664:	af00      	add	r7, sp, #0
 801d666:	6078      	str	r0, [r7, #4]

}
 801d668:	46c0      	nop			@ (mov r8, r8)
 801d66a:	46bd      	mov	sp, r7
 801d66c:	b002      	add	sp, #8
 801d66e:	bd80      	pop	{r7, pc}

0801d670 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d670:	b580      	push	{r7, lr}
 801d672:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d674:	f7ea fcfe 	bl	8008074 <SystemClock_Config>
}
 801d678:	46c0      	nop			@ (mov r8, r8)
 801d67a:	46bd      	mov	sp, r7
 801d67c:	bd80      	pop	{r7, pc}

0801d67e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d67e:	b580      	push	{r7, lr}
 801d680:	b084      	sub	sp, #16
 801d682:	af00      	add	r7, sp, #0
 801d684:	0002      	movs	r2, r0
 801d686:	1dfb      	adds	r3, r7, #7
 801d688:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d68a:	230f      	movs	r3, #15
 801d68c:	18fb      	adds	r3, r7, r3
 801d68e:	2200      	movs	r2, #0
 801d690:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d692:	1dfb      	adds	r3, r7, #7
 801d694:	781b      	ldrb	r3, [r3, #0]
 801d696:	2b03      	cmp	r3, #3
 801d698:	d017      	beq.n	801d6ca <USBD_Get_USB_Status+0x4c>
 801d69a:	dc1b      	bgt.n	801d6d4 <USBD_Get_USB_Status+0x56>
 801d69c:	2b02      	cmp	r3, #2
 801d69e:	d00f      	beq.n	801d6c0 <USBD_Get_USB_Status+0x42>
 801d6a0:	dc18      	bgt.n	801d6d4 <USBD_Get_USB_Status+0x56>
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d002      	beq.n	801d6ac <USBD_Get_USB_Status+0x2e>
 801d6a6:	2b01      	cmp	r3, #1
 801d6a8:	d005      	beq.n	801d6b6 <USBD_Get_USB_Status+0x38>
 801d6aa:	e013      	b.n	801d6d4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d6ac:	230f      	movs	r3, #15
 801d6ae:	18fb      	adds	r3, r7, r3
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	701a      	strb	r2, [r3, #0]
    break;
 801d6b4:	e013      	b.n	801d6de <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d6b6:	230f      	movs	r3, #15
 801d6b8:	18fb      	adds	r3, r7, r3
 801d6ba:	2202      	movs	r2, #2
 801d6bc:	701a      	strb	r2, [r3, #0]
    break;
 801d6be:	e00e      	b.n	801d6de <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d6c0:	230f      	movs	r3, #15
 801d6c2:	18fb      	adds	r3, r7, r3
 801d6c4:	2201      	movs	r2, #1
 801d6c6:	701a      	strb	r2, [r3, #0]
    break;
 801d6c8:	e009      	b.n	801d6de <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d6ca:	230f      	movs	r3, #15
 801d6cc:	18fb      	adds	r3, r7, r3
 801d6ce:	2202      	movs	r2, #2
 801d6d0:	701a      	strb	r2, [r3, #0]
    break;
 801d6d2:	e004      	b.n	801d6de <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d6d4:	230f      	movs	r3, #15
 801d6d6:	18fb      	adds	r3, r7, r3
 801d6d8:	2202      	movs	r2, #2
 801d6da:	701a      	strb	r2, [r3, #0]
    break;
 801d6dc:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d6de:	230f      	movs	r3, #15
 801d6e0:	18fb      	adds	r3, r7, r3
 801d6e2:	781b      	ldrb	r3, [r3, #0]
}
 801d6e4:	0018      	movs	r0, r3
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	b004      	add	sp, #16
 801d6ea:	bd80      	pop	{r7, pc}

0801d6ec <arm_cfft_radix4by2_q31>:
 801d6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6ee:	465f      	mov	r7, fp
 801d6f0:	4656      	mov	r6, sl
 801d6f2:	464d      	mov	r5, r9
 801d6f4:	4644      	mov	r4, r8
 801d6f6:	000b      	movs	r3, r1
 801d6f8:	b4f0      	push	{r4, r5, r6, r7}
 801d6fa:	085b      	lsrs	r3, r3, #1
 801d6fc:	b08f      	sub	sp, #60	@ 0x3c
 801d6fe:	910a      	str	r1, [sp, #40]	@ 0x28
 801d700:	0007      	movs	r7, r0
 801d702:	9009      	str	r0, [sp, #36]	@ 0x24
 801d704:	0011      	movs	r1, r2
 801d706:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d708:	930c      	str	r3, [sp, #48]	@ 0x30
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d100      	bne.n	801d710 <arm_cfft_radix4by2_q31+0x24>
 801d70e:	e0a0      	b.n	801d852 <arm_cfft_radix4by2_q31+0x166>
 801d710:	0002      	movs	r2, r0
 801d712:	00db      	lsls	r3, r3, #3
 801d714:	3204      	adds	r2, #4
 801d716:	4691      	mov	r9, r2
 801d718:	4698      	mov	r8, r3
 801d71a:	000a      	movs	r2, r1
 801d71c:	464e      	mov	r6, r9
 801d71e:	4442      	add	r2, r8
 801d720:	4699      	mov	r9, r3
 801d722:	4688      	mov	r8, r1
 801d724:	9208      	str	r2, [sp, #32]
 801d726:	900d      	str	r0, [sp, #52]	@ 0x34
 801d728:	4643      	mov	r3, r8
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	469b      	mov	fp, r3
 801d72e:	4643      	mov	r3, r8
 801d730:	685b      	ldr	r3, [r3, #4]
 801d732:	469a      	mov	sl, r3
 801d734:	683b      	ldr	r3, [r7, #0]
 801d736:	109c      	asrs	r4, r3, #2
 801d738:	464b      	mov	r3, r9
 801d73a:	58fb      	ldr	r3, [r7, r3]
 801d73c:	109a      	asrs	r2, r3, #2
 801d73e:	18a3      	adds	r3, r4, r2
 801d740:	603b      	str	r3, [r7, #0]
 801d742:	6833      	ldr	r3, [r6, #0]
 801d744:	1aa4      	subs	r4, r4, r2
 801d746:	109d      	asrs	r5, r3, #2
 801d748:	464b      	mov	r3, r9
 801d74a:	58f3      	ldr	r3, [r6, r3]
 801d74c:	17e2      	asrs	r2, r4, #31
 801d74e:	109b      	asrs	r3, r3, #2
 801d750:	18e9      	adds	r1, r5, r3
 801d752:	6031      	str	r1, [r6, #0]
 801d754:	0011      	movs	r1, r2
 801d756:	465a      	mov	r2, fp
 801d758:	17d2      	asrs	r2, r2, #31
 801d75a:	0010      	movs	r0, r2
 801d75c:	4652      	mov	r2, sl
 801d75e:	1aed      	subs	r5, r5, r3
 801d760:	17eb      	asrs	r3, r5, #31
 801d762:	17d2      	asrs	r2, r2, #31
 801d764:	9307      	str	r3, [sp, #28]
 801d766:	9204      	str	r2, [sp, #16]
 801d768:	0003      	movs	r3, r0
 801d76a:	465a      	mov	r2, fp
 801d76c:	9006      	str	r0, [sp, #24]
 801d76e:	0020      	movs	r0, r4
 801d770:	9105      	str	r1, [sp, #20]
 801d772:	f7e2 ff25 	bl	80005c0 <__aeabi_lmul>
 801d776:	2280      	movs	r2, #128	@ 0x80
 801d778:	2300      	movs	r3, #0
 801d77a:	0612      	lsls	r2, r2, #24
 801d77c:	1880      	adds	r0, r0, r2
 801d77e:	4159      	adcs	r1, r3
 801d780:	2300      	movs	r3, #0
 801d782:	9101      	str	r1, [sp, #4]
 801d784:	9300      	str	r3, [sp, #0]
 801d786:	4652      	mov	r2, sl
 801d788:	9b04      	ldr	r3, [sp, #16]
 801d78a:	0028      	movs	r0, r5
 801d78c:	17e9      	asrs	r1, r5, #31
 801d78e:	f7e2 ff17 	bl	80005c0 <__aeabi_lmul>
 801d792:	9a00      	ldr	r2, [sp, #0]
 801d794:	9b01      	ldr	r3, [sp, #4]
 801d796:	1880      	adds	r0, r0, r2
 801d798:	4159      	adcs	r1, r3
 801d79a:	2280      	movs	r2, #128	@ 0x80
 801d79c:	2300      	movs	r3, #0
 801d79e:	0612      	lsls	r2, r2, #24
 801d7a0:	1880      	adds	r0, r0, r2
 801d7a2:	4159      	adcs	r1, r3
 801d7a4:	464a      	mov	r2, r9
 801d7a6:	004b      	lsls	r3, r1, #1
 801d7a8:	50bb      	str	r3, [r7, r2]
 801d7aa:	4658      	mov	r0, fp
 801d7ac:	002a      	movs	r2, r5
 801d7ae:	9b07      	ldr	r3, [sp, #28]
 801d7b0:	9906      	ldr	r1, [sp, #24]
 801d7b2:	f7e2 ff05 	bl	80005c0 <__aeabi_lmul>
 801d7b6:	2280      	movs	r2, #128	@ 0x80
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	0612      	lsls	r2, r2, #24
 801d7bc:	1880      	adds	r0, r0, r2
 801d7be:	4159      	adcs	r1, r3
 801d7c0:	2000      	movs	r0, #0
 801d7c2:	9103      	str	r1, [sp, #12]
 801d7c4:	9002      	str	r0, [sp, #8]
 801d7c6:	4652      	mov	r2, sl
 801d7c8:	9b04      	ldr	r3, [sp, #16]
 801d7ca:	0020      	movs	r0, r4
 801d7cc:	9905      	ldr	r1, [sp, #20]
 801d7ce:	f7e2 fef7 	bl	80005c0 <__aeabi_lmul>
 801d7d2:	9a02      	ldr	r2, [sp, #8]
 801d7d4:	9b03      	ldr	r3, [sp, #12]
 801d7d6:	1a12      	subs	r2, r2, r0
 801d7d8:	418b      	sbcs	r3, r1
 801d7da:	2080      	movs	r0, #128	@ 0x80
 801d7dc:	2100      	movs	r1, #0
 801d7de:	0600      	lsls	r0, r0, #24
 801d7e0:	1812      	adds	r2, r2, r0
 801d7e2:	414b      	adcs	r3, r1
 801d7e4:	464a      	mov	r2, r9
 801d7e6:	005b      	lsls	r3, r3, #1
 801d7e8:	50b3      	str	r3, [r6, r2]
 801d7ea:	2308      	movs	r3, #8
 801d7ec:	469c      	mov	ip, r3
 801d7ee:	9b08      	ldr	r3, [sp, #32]
 801d7f0:	44e0      	add	r8, ip
 801d7f2:	3708      	adds	r7, #8
 801d7f4:	3608      	adds	r6, #8
 801d7f6:	4598      	cmp	r8, r3
 801d7f8:	d196      	bne.n	801d728 <arm_cfft_radix4by2_q31+0x3c>
 801d7fa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d7fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d7fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d800:	2302      	movs	r3, #2
 801d802:	003a      	movs	r2, r7
 801d804:	0029      	movs	r1, r5
 801d806:	0020      	movs	r0, r4
 801d808:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d80a:	f000 f957 	bl	801dabc <arm_radix4_butterfly_q31>
 801d80e:	46a4      	mov	ip, r4
 801d810:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d812:	2302      	movs	r3, #2
 801d814:	0088      	lsls	r0, r1, #2
 801d816:	4460      	add	r0, ip
 801d818:	003a      	movs	r2, r7
 801d81a:	0029      	movs	r1, r5
 801d81c:	f000 f94e 	bl	801dabc <arm_radix4_butterfly_q31>
 801d820:	46a4      	mov	ip, r4
 801d822:	0128      	lsls	r0, r5, #4
 801d824:	4460      	add	r0, ip
 801d826:	6833      	ldr	r3, [r6, #0]
 801d828:	005b      	lsls	r3, r3, #1
 801d82a:	6033      	str	r3, [r6, #0]
 801d82c:	6873      	ldr	r3, [r6, #4]
 801d82e:	005b      	lsls	r3, r3, #1
 801d830:	6073      	str	r3, [r6, #4]
 801d832:	68b3      	ldr	r3, [r6, #8]
 801d834:	005b      	lsls	r3, r3, #1
 801d836:	60b3      	str	r3, [r6, #8]
 801d838:	68f3      	ldr	r3, [r6, #12]
 801d83a:	005b      	lsls	r3, r3, #1
 801d83c:	60f3      	str	r3, [r6, #12]
 801d83e:	3610      	adds	r6, #16
 801d840:	42b0      	cmp	r0, r6
 801d842:	d1f0      	bne.n	801d826 <arm_cfft_radix4by2_q31+0x13a>
 801d844:	b00f      	add	sp, #60	@ 0x3c
 801d846:	bc3c      	pop	{r2, r3, r4, r5}
 801d848:	4690      	mov	r8, r2
 801d84a:	4699      	mov	r9, r3
 801d84c:	46a2      	mov	sl, r4
 801d84e:	46ab      	mov	fp, r5
 801d850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d852:	2302      	movs	r3, #2
 801d854:	2100      	movs	r1, #0
 801d856:	0015      	movs	r5, r2
 801d858:	f000 f930 	bl	801dabc <arm_radix4_butterfly_q31>
 801d85c:	46bc      	mov	ip, r7
 801d85e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d860:	002a      	movs	r2, r5
 801d862:	0098      	lsls	r0, r3, #2
 801d864:	4460      	add	r0, ip
 801d866:	2302      	movs	r3, #2
 801d868:	2100      	movs	r1, #0
 801d86a:	f000 f927 	bl	801dabc <arm_radix4_butterfly_q31>
 801d86e:	e7e9      	b.n	801d844 <arm_cfft_radix4by2_q31+0x158>

0801d870 <arm_cfft_radix4by2_inverse_q31>:
 801d870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d872:	465f      	mov	r7, fp
 801d874:	4656      	mov	r6, sl
 801d876:	464d      	mov	r5, r9
 801d878:	4644      	mov	r4, r8
 801d87a:	000b      	movs	r3, r1
 801d87c:	b4f0      	push	{r4, r5, r6, r7}
 801d87e:	085b      	lsrs	r3, r3, #1
 801d880:	b08f      	sub	sp, #60	@ 0x3c
 801d882:	910a      	str	r1, [sp, #40]	@ 0x28
 801d884:	0007      	movs	r7, r0
 801d886:	9009      	str	r0, [sp, #36]	@ 0x24
 801d888:	0011      	movs	r1, r2
 801d88a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d88c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d100      	bne.n	801d894 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d892:	e0a0      	b.n	801d9d6 <arm_cfft_radix4by2_inverse_q31+0x166>
 801d894:	0002      	movs	r2, r0
 801d896:	00db      	lsls	r3, r3, #3
 801d898:	3204      	adds	r2, #4
 801d89a:	4691      	mov	r9, r2
 801d89c:	4698      	mov	r8, r3
 801d89e:	000a      	movs	r2, r1
 801d8a0:	464e      	mov	r6, r9
 801d8a2:	4442      	add	r2, r8
 801d8a4:	4699      	mov	r9, r3
 801d8a6:	4688      	mov	r8, r1
 801d8a8:	9208      	str	r2, [sp, #32]
 801d8aa:	900d      	str	r0, [sp, #52]	@ 0x34
 801d8ac:	4643      	mov	r3, r8
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	469b      	mov	fp, r3
 801d8b2:	4643      	mov	r3, r8
 801d8b4:	685b      	ldr	r3, [r3, #4]
 801d8b6:	469a      	mov	sl, r3
 801d8b8:	683b      	ldr	r3, [r7, #0]
 801d8ba:	109c      	asrs	r4, r3, #2
 801d8bc:	464b      	mov	r3, r9
 801d8be:	58fb      	ldr	r3, [r7, r3]
 801d8c0:	109a      	asrs	r2, r3, #2
 801d8c2:	18a3      	adds	r3, r4, r2
 801d8c4:	603b      	str	r3, [r7, #0]
 801d8c6:	6833      	ldr	r3, [r6, #0]
 801d8c8:	1aa4      	subs	r4, r4, r2
 801d8ca:	109d      	asrs	r5, r3, #2
 801d8cc:	464b      	mov	r3, r9
 801d8ce:	58f3      	ldr	r3, [r6, r3]
 801d8d0:	17e2      	asrs	r2, r4, #31
 801d8d2:	109b      	asrs	r3, r3, #2
 801d8d4:	18e9      	adds	r1, r5, r3
 801d8d6:	6031      	str	r1, [r6, #0]
 801d8d8:	0011      	movs	r1, r2
 801d8da:	465a      	mov	r2, fp
 801d8dc:	17d2      	asrs	r2, r2, #31
 801d8de:	0010      	movs	r0, r2
 801d8e0:	4652      	mov	r2, sl
 801d8e2:	1aed      	subs	r5, r5, r3
 801d8e4:	17eb      	asrs	r3, r5, #31
 801d8e6:	17d2      	asrs	r2, r2, #31
 801d8e8:	9307      	str	r3, [sp, #28]
 801d8ea:	9204      	str	r2, [sp, #16]
 801d8ec:	0003      	movs	r3, r0
 801d8ee:	465a      	mov	r2, fp
 801d8f0:	9006      	str	r0, [sp, #24]
 801d8f2:	0020      	movs	r0, r4
 801d8f4:	9105      	str	r1, [sp, #20]
 801d8f6:	f7e2 fe63 	bl	80005c0 <__aeabi_lmul>
 801d8fa:	2280      	movs	r2, #128	@ 0x80
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	0612      	lsls	r2, r2, #24
 801d900:	1880      	adds	r0, r0, r2
 801d902:	4159      	adcs	r1, r3
 801d904:	2300      	movs	r3, #0
 801d906:	9101      	str	r1, [sp, #4]
 801d908:	9300      	str	r3, [sp, #0]
 801d90a:	4652      	mov	r2, sl
 801d90c:	9b04      	ldr	r3, [sp, #16]
 801d90e:	0028      	movs	r0, r5
 801d910:	17e9      	asrs	r1, r5, #31
 801d912:	f7e2 fe55 	bl	80005c0 <__aeabi_lmul>
 801d916:	9a00      	ldr	r2, [sp, #0]
 801d918:	9b01      	ldr	r3, [sp, #4]
 801d91a:	1a12      	subs	r2, r2, r0
 801d91c:	418b      	sbcs	r3, r1
 801d91e:	2080      	movs	r0, #128	@ 0x80
 801d920:	2100      	movs	r1, #0
 801d922:	0600      	lsls	r0, r0, #24
 801d924:	1812      	adds	r2, r2, r0
 801d926:	414b      	adcs	r3, r1
 801d928:	464a      	mov	r2, r9
 801d92a:	005b      	lsls	r3, r3, #1
 801d92c:	50bb      	str	r3, [r7, r2]
 801d92e:	4658      	mov	r0, fp
 801d930:	002a      	movs	r2, r5
 801d932:	9b07      	ldr	r3, [sp, #28]
 801d934:	9906      	ldr	r1, [sp, #24]
 801d936:	f7e2 fe43 	bl	80005c0 <__aeabi_lmul>
 801d93a:	2280      	movs	r2, #128	@ 0x80
 801d93c:	2300      	movs	r3, #0
 801d93e:	0612      	lsls	r2, r2, #24
 801d940:	1880      	adds	r0, r0, r2
 801d942:	4159      	adcs	r1, r3
 801d944:	2000      	movs	r0, #0
 801d946:	9103      	str	r1, [sp, #12]
 801d948:	9002      	str	r0, [sp, #8]
 801d94a:	4652      	mov	r2, sl
 801d94c:	9b04      	ldr	r3, [sp, #16]
 801d94e:	0020      	movs	r0, r4
 801d950:	9905      	ldr	r1, [sp, #20]
 801d952:	f7e2 fe35 	bl	80005c0 <__aeabi_lmul>
 801d956:	9b02      	ldr	r3, [sp, #8]
 801d958:	9c03      	ldr	r4, [sp, #12]
 801d95a:	18c0      	adds	r0, r0, r3
 801d95c:	4161      	adcs	r1, r4
 801d95e:	2380      	movs	r3, #128	@ 0x80
 801d960:	2400      	movs	r4, #0
 801d962:	061b      	lsls	r3, r3, #24
 801d964:	18c0      	adds	r0, r0, r3
 801d966:	4161      	adcs	r1, r4
 801d968:	464a      	mov	r2, r9
 801d96a:	004b      	lsls	r3, r1, #1
 801d96c:	50b3      	str	r3, [r6, r2]
 801d96e:	2308      	movs	r3, #8
 801d970:	469c      	mov	ip, r3
 801d972:	9b08      	ldr	r3, [sp, #32]
 801d974:	44e0      	add	r8, ip
 801d976:	3708      	adds	r7, #8
 801d978:	3608      	adds	r6, #8
 801d97a:	4598      	cmp	r8, r3
 801d97c:	d196      	bne.n	801d8ac <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d97e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d980:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d982:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d984:	2302      	movs	r3, #2
 801d986:	003a      	movs	r2, r7
 801d988:	0029      	movs	r1, r5
 801d98a:	0020      	movs	r0, r4
 801d98c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d98e:	f000 fb3b 	bl	801e008 <arm_radix4_butterfly_inverse_q31>
 801d992:	46a4      	mov	ip, r4
 801d994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d996:	2302      	movs	r3, #2
 801d998:	0088      	lsls	r0, r1, #2
 801d99a:	4460      	add	r0, ip
 801d99c:	003a      	movs	r2, r7
 801d99e:	0029      	movs	r1, r5
 801d9a0:	f000 fb32 	bl	801e008 <arm_radix4_butterfly_inverse_q31>
 801d9a4:	46a4      	mov	ip, r4
 801d9a6:	0128      	lsls	r0, r5, #4
 801d9a8:	4460      	add	r0, ip
 801d9aa:	6833      	ldr	r3, [r6, #0]
 801d9ac:	005b      	lsls	r3, r3, #1
 801d9ae:	6033      	str	r3, [r6, #0]
 801d9b0:	6873      	ldr	r3, [r6, #4]
 801d9b2:	005b      	lsls	r3, r3, #1
 801d9b4:	6073      	str	r3, [r6, #4]
 801d9b6:	68b3      	ldr	r3, [r6, #8]
 801d9b8:	005b      	lsls	r3, r3, #1
 801d9ba:	60b3      	str	r3, [r6, #8]
 801d9bc:	68f3      	ldr	r3, [r6, #12]
 801d9be:	005b      	lsls	r3, r3, #1
 801d9c0:	60f3      	str	r3, [r6, #12]
 801d9c2:	3610      	adds	r6, #16
 801d9c4:	42b0      	cmp	r0, r6
 801d9c6:	d1f0      	bne.n	801d9aa <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d9c8:	b00f      	add	sp, #60	@ 0x3c
 801d9ca:	bc3c      	pop	{r2, r3, r4, r5}
 801d9cc:	4690      	mov	r8, r2
 801d9ce:	4699      	mov	r9, r3
 801d9d0:	46a2      	mov	sl, r4
 801d9d2:	46ab      	mov	fp, r5
 801d9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9d6:	2302      	movs	r3, #2
 801d9d8:	2100      	movs	r1, #0
 801d9da:	0015      	movs	r5, r2
 801d9dc:	f000 fb14 	bl	801e008 <arm_radix4_butterfly_inverse_q31>
 801d9e0:	46bc      	mov	ip, r7
 801d9e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d9e4:	002a      	movs	r2, r5
 801d9e6:	0098      	lsls	r0, r3, #2
 801d9e8:	4460      	add	r0, ip
 801d9ea:	2302      	movs	r3, #2
 801d9ec:	2100      	movs	r1, #0
 801d9ee:	f000 fb0b 	bl	801e008 <arm_radix4_butterfly_inverse_q31>
 801d9f2:	e7e9      	b.n	801d9c8 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d9f4 <arm_cfft_q31>:
 801d9f4:	b570      	push	{r4, r5, r6, lr}
 801d9f6:	001e      	movs	r6, r3
 801d9f8:	2380      	movs	r3, #128	@ 0x80
 801d9fa:	000d      	movs	r5, r1
 801d9fc:	0004      	movs	r4, r0
 801d9fe:	8801      	ldrh	r1, [r0, #0]
 801da00:	005b      	lsls	r3, r3, #1
 801da02:	2a01      	cmp	r2, #1
 801da04:	d028      	beq.n	801da58 <arm_cfft_q31+0x64>
 801da06:	4299      	cmp	r1, r3
 801da08:	d020      	beq.n	801da4c <arm_cfft_q31+0x58>
 801da0a:	d812      	bhi.n	801da32 <arm_cfft_q31+0x3e>
 801da0c:	2920      	cmp	r1, #32
 801da0e:	d004      	beq.n	801da1a <arm_cfft_q31+0x26>
 801da10:	d949      	bls.n	801daa6 <arm_cfft_q31+0xb2>
 801da12:	2940      	cmp	r1, #64	@ 0x40
 801da14:	d01a      	beq.n	801da4c <arm_cfft_q31+0x58>
 801da16:	2980      	cmp	r1, #128	@ 0x80
 801da18:	d103      	bne.n	801da22 <arm_cfft_q31+0x2e>
 801da1a:	6862      	ldr	r2, [r4, #4]
 801da1c:	0028      	movs	r0, r5
 801da1e:	f7ff fe65 	bl	801d6ec <arm_cfft_radix4by2_q31>
 801da22:	2e00      	cmp	r6, #0
 801da24:	d004      	beq.n	801da30 <arm_cfft_q31+0x3c>
 801da26:	68a2      	ldr	r2, [r4, #8]
 801da28:	89a1      	ldrh	r1, [r4, #12]
 801da2a:	0028      	movs	r0, r5
 801da2c:	f7e2 fb6c 	bl	8000108 <arm_bitreversal_32>
 801da30:	bd70      	pop	{r4, r5, r6, pc}
 801da32:	2380      	movs	r3, #128	@ 0x80
 801da34:	00db      	lsls	r3, r3, #3
 801da36:	4299      	cmp	r1, r3
 801da38:	d008      	beq.n	801da4c <arm_cfft_q31+0x58>
 801da3a:	d92f      	bls.n	801da9c <arm_cfft_q31+0xa8>
 801da3c:	2380      	movs	r3, #128	@ 0x80
 801da3e:	011b      	lsls	r3, r3, #4
 801da40:	4299      	cmp	r1, r3
 801da42:	d0ea      	beq.n	801da1a <arm_cfft_q31+0x26>
 801da44:	2380      	movs	r3, #128	@ 0x80
 801da46:	015b      	lsls	r3, r3, #5
 801da48:	4299      	cmp	r1, r3
 801da4a:	d1ea      	bne.n	801da22 <arm_cfft_q31+0x2e>
 801da4c:	2301      	movs	r3, #1
 801da4e:	6862      	ldr	r2, [r4, #4]
 801da50:	0028      	movs	r0, r5
 801da52:	f000 f833 	bl	801dabc <arm_radix4_butterfly_q31>
 801da56:	e7e4      	b.n	801da22 <arm_cfft_q31+0x2e>
 801da58:	4299      	cmp	r1, r3
 801da5a:	d019      	beq.n	801da90 <arm_cfft_q31+0x9c>
 801da5c:	d80b      	bhi.n	801da76 <arm_cfft_q31+0x82>
 801da5e:	2920      	cmp	r1, #32
 801da60:	d004      	beq.n	801da6c <arm_cfft_q31+0x78>
 801da62:	d928      	bls.n	801dab6 <arm_cfft_q31+0xc2>
 801da64:	2940      	cmp	r1, #64	@ 0x40
 801da66:	d013      	beq.n	801da90 <arm_cfft_q31+0x9c>
 801da68:	2980      	cmp	r1, #128	@ 0x80
 801da6a:	d1da      	bne.n	801da22 <arm_cfft_q31+0x2e>
 801da6c:	6862      	ldr	r2, [r4, #4]
 801da6e:	0028      	movs	r0, r5
 801da70:	f7ff fefe 	bl	801d870 <arm_cfft_radix4by2_inverse_q31>
 801da74:	e7d5      	b.n	801da22 <arm_cfft_q31+0x2e>
 801da76:	2380      	movs	r3, #128	@ 0x80
 801da78:	00db      	lsls	r3, r3, #3
 801da7a:	4299      	cmp	r1, r3
 801da7c:	d008      	beq.n	801da90 <arm_cfft_q31+0x9c>
 801da7e:	d915      	bls.n	801daac <arm_cfft_q31+0xb8>
 801da80:	2380      	movs	r3, #128	@ 0x80
 801da82:	011b      	lsls	r3, r3, #4
 801da84:	4299      	cmp	r1, r3
 801da86:	d0f1      	beq.n	801da6c <arm_cfft_q31+0x78>
 801da88:	2380      	movs	r3, #128	@ 0x80
 801da8a:	015b      	lsls	r3, r3, #5
 801da8c:	4299      	cmp	r1, r3
 801da8e:	d1c8      	bne.n	801da22 <arm_cfft_q31+0x2e>
 801da90:	2301      	movs	r3, #1
 801da92:	6862      	ldr	r2, [r4, #4]
 801da94:	0028      	movs	r0, r5
 801da96:	f000 fab7 	bl	801e008 <arm_radix4_butterfly_inverse_q31>
 801da9a:	e7c2      	b.n	801da22 <arm_cfft_q31+0x2e>
 801da9c:	2380      	movs	r3, #128	@ 0x80
 801da9e:	009b      	lsls	r3, r3, #2
 801daa0:	4299      	cmp	r1, r3
 801daa2:	d0ba      	beq.n	801da1a <arm_cfft_q31+0x26>
 801daa4:	e7bd      	b.n	801da22 <arm_cfft_q31+0x2e>
 801daa6:	2910      	cmp	r1, #16
 801daa8:	d1bb      	bne.n	801da22 <arm_cfft_q31+0x2e>
 801daaa:	e7cf      	b.n	801da4c <arm_cfft_q31+0x58>
 801daac:	2380      	movs	r3, #128	@ 0x80
 801daae:	009b      	lsls	r3, r3, #2
 801dab0:	4299      	cmp	r1, r3
 801dab2:	d0db      	beq.n	801da6c <arm_cfft_q31+0x78>
 801dab4:	e7b5      	b.n	801da22 <arm_cfft_q31+0x2e>
 801dab6:	2910      	cmp	r1, #16
 801dab8:	d1b3      	bne.n	801da22 <arm_cfft_q31+0x2e>
 801daba:	e7e9      	b.n	801da90 <arm_cfft_q31+0x9c>

0801dabc <arm_radix4_butterfly_q31>:
 801dabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dabe:	464d      	mov	r5, r9
 801dac0:	4644      	mov	r4, r8
 801dac2:	465f      	mov	r7, fp
 801dac4:	4656      	mov	r6, sl
 801dac6:	469c      	mov	ip, r3
 801dac8:	b4f0      	push	{r4, r5, r6, r7}
 801daca:	b0a7      	sub	sp, #156	@ 0x9c
 801dacc:	9114      	str	r1, [sp, #80]	@ 0x50
 801dace:	0889      	lsrs	r1, r1, #2
 801dad0:	9310      	str	r3, [sp, #64]	@ 0x40
 801dad2:	00cb      	lsls	r3, r1, #3
 801dad4:	0015      	movs	r5, r2
 801dad6:	9223      	str	r2, [sp, #140]	@ 0x8c
 801dad8:	18c2      	adds	r2, r0, r3
 801dada:	000c      	movs	r4, r1
 801dadc:	469a      	mov	sl, r3
 801dade:	9124      	str	r1, [sp, #144]	@ 0x90
 801dae0:	18d1      	adds	r1, r2, r3
 801dae2:	4663      	mov	r3, ip
 801dae4:	468b      	mov	fp, r1
 801dae6:	0119      	lsls	r1, r3, #4
 801dae8:	910d      	str	r1, [sp, #52]	@ 0x34
 801daea:	00d9      	lsls	r1, r3, #3
 801daec:	005b      	lsls	r3, r3, #1
 801daee:	4463      	add	r3, ip
 801daf0:	910e      	str	r1, [sp, #56]	@ 0x38
 801daf2:	00d9      	lsls	r1, r3, #3
 801daf4:	465b      	mov	r3, fp
 801daf6:	44da      	add	sl, fp
 801daf8:	4690      	mov	r8, r2
 801dafa:	4683      	mov	fp, r0
 801dafc:	4699      	mov	r9, r3
 801dafe:	9022      	str	r0, [sp, #136]	@ 0x88
 801db00:	9025      	str	r0, [sp, #148]	@ 0x94
 801db02:	910f      	str	r1, [sp, #60]	@ 0x3c
 801db04:	9502      	str	r5, [sp, #8]
 801db06:	9500      	str	r5, [sp, #0]
 801db08:	9501      	str	r5, [sp, #4]
 801db0a:	9407      	str	r4, [sp, #28]
 801db0c:	465b      	mov	r3, fp
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	4642      	mov	r2, r8
 801db12:	111c      	asrs	r4, r3, #4
 801db14:	464b      	mov	r3, r9
 801db16:	4658      	mov	r0, fp
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	6812      	ldr	r2, [r2, #0]
 801db1c:	111b      	asrs	r3, r3, #4
 801db1e:	18e7      	adds	r7, r4, r3
 801db20:	1ae3      	subs	r3, r4, r3
 801db22:	1114      	asrs	r4, r2, #4
 801db24:	4652      	mov	r2, sl
 801db26:	6840      	ldr	r0, [r0, #4]
 801db28:	6812      	ldr	r2, [r2, #0]
 801db2a:	1105      	asrs	r5, r0, #4
 801db2c:	4648      	mov	r0, r9
 801db2e:	9303      	str	r3, [sp, #12]
 801db30:	1113      	asrs	r3, r2, #4
 801db32:	18e2      	adds	r2, r4, r3
 801db34:	465c      	mov	r4, fp
 801db36:	6840      	ldr	r0, [r0, #4]
 801db38:	1103      	asrs	r3, r0, #4
 801db3a:	18ee      	adds	r6, r5, r3
 801db3c:	1ae8      	subs	r0, r5, r3
 801db3e:	18bb      	adds	r3, r7, r2
 801db40:	6023      	str	r3, [r4, #0]
 801db42:	4644      	mov	r4, r8
 801db44:	6864      	ldr	r4, [r4, #4]
 801db46:	9004      	str	r0, [sp, #16]
 801db48:	1125      	asrs	r5, r4, #4
 801db4a:	4654      	mov	r4, sl
 801db4c:	6864      	ldr	r4, [r4, #4]
 801db4e:	1123      	asrs	r3, r4, #4
 801db50:	465c      	mov	r4, fp
 801db52:	18eb      	adds	r3, r5, r3
 801db54:	18f1      	adds	r1, r6, r3
 801db56:	6061      	str	r1, [r4, #4]
 801db58:	4655      	mov	r5, sl
 801db5a:	4644      	mov	r4, r8
 801db5c:	686d      	ldr	r5, [r5, #4]
 801db5e:	6864      	ldr	r4, [r4, #4]
 801db60:	1129      	asrs	r1, r5, #4
 801db62:	1124      	asrs	r4, r4, #4
 801db64:	1a64      	subs	r4, r4, r1
 801db66:	4641      	mov	r1, r8
 801db68:	6809      	ldr	r1, [r1, #0]
 801db6a:	9405      	str	r4, [sp, #20]
 801db6c:	1108      	asrs	r0, r1, #4
 801db6e:	4651      	mov	r1, sl
 801db70:	6809      	ldr	r1, [r1, #0]
 801db72:	1abc      	subs	r4, r7, r2
 801db74:	1109      	asrs	r1, r1, #4
 801db76:	1a41      	subs	r1, r0, r1
 801db78:	17e2      	asrs	r2, r4, #31
 801db7a:	9106      	str	r1, [sp, #24]
 801db7c:	0011      	movs	r1, r2
 801db7e:	9a01      	ldr	r2, [sp, #4]
 801db80:	9108      	str	r1, [sp, #32]
 801db82:	6817      	ldr	r7, [r2, #0]
 801db84:	17fd      	asrs	r5, r7, #31
 801db86:	0028      	movs	r0, r5
 801db88:	1af5      	subs	r5, r6, r3
 801db8a:	17ee      	asrs	r6, r5, #31
 801db8c:	960a      	str	r6, [sp, #40]	@ 0x28
 801db8e:	6856      	ldr	r6, [r2, #4]
 801db90:	9009      	str	r0, [sp, #36]	@ 0x24
 801db92:	17f3      	asrs	r3, r6, #31
 801db94:	003a      	movs	r2, r7
 801db96:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db98:	0003      	movs	r3, r0
 801db9a:	0020      	movs	r0, r4
 801db9c:	f7e2 fd10 	bl	80005c0 <__aeabi_lmul>
 801dba0:	0032      	movs	r2, r6
 801dba2:	17f3      	asrs	r3, r6, #31
 801dba4:	910c      	str	r1, [sp, #48]	@ 0x30
 801dba6:	0028      	movs	r0, r5
 801dba8:	17e9      	asrs	r1, r5, #31
 801dbaa:	f7e2 fd09 	bl	80005c0 <__aeabi_lmul>
 801dbae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dbb0:	002a      	movs	r2, r5
 801dbb2:	4684      	mov	ip, r0
 801dbb4:	4640      	mov	r0, r8
 801dbb6:	4461      	add	r1, ip
 801dbb8:	0049      	lsls	r1, r1, #1
 801dbba:	6001      	str	r1, [r0, #0]
 801dbbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dbc0:	0038      	movs	r0, r7
 801dbc2:	f7e2 fcfd 	bl	80005c0 <__aeabi_lmul>
 801dbc6:	0032      	movs	r2, r6
 801dbc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dbca:	000d      	movs	r5, r1
 801dbcc:	0020      	movs	r0, r4
 801dbce:	9908      	ldr	r1, [sp, #32]
 801dbd0:	f7e2 fcf6 	bl	80005c0 <__aeabi_lmul>
 801dbd4:	4646      	mov	r6, r8
 801dbd6:	1a6d      	subs	r5, r5, r1
 801dbd8:	006d      	lsls	r5, r5, #1
 801dbda:	6075      	str	r5, [r6, #4]
 801dbdc:	9903      	ldr	r1, [sp, #12]
 801dbde:	9d05      	ldr	r5, [sp, #20]
 801dbe0:	000c      	movs	r4, r1
 801dbe2:	46ac      	mov	ip, r5
 801dbe4:	4464      	add	r4, ip
 801dbe6:	17e6      	asrs	r6, r4, #31
 801dbe8:	0031      	movs	r1, r6
 801dbea:	9b00      	ldr	r3, [sp, #0]
 801dbec:	9804      	ldr	r0, [sp, #16]
 801dbee:	681e      	ldr	r6, [r3, #0]
 801dbf0:	17f7      	asrs	r7, r6, #31
 801dbf2:	9709      	str	r7, [sp, #36]	@ 0x24
 801dbf4:	9f06      	ldr	r7, [sp, #24]
 801dbf6:	0032      	movs	r2, r6
 801dbf8:	1bc7      	subs	r7, r0, r7
 801dbfa:	17fd      	asrs	r5, r7, #31
 801dbfc:	950a      	str	r5, [sp, #40]	@ 0x28
 801dbfe:	685d      	ldr	r5, [r3, #4]
 801dc00:	17f3      	asrs	r3, r6, #31
 801dc02:	17e8      	asrs	r0, r5, #31
 801dc04:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dc06:	0020      	movs	r0, r4
 801dc08:	9108      	str	r1, [sp, #32]
 801dc0a:	f7e2 fcd9 	bl	80005c0 <__aeabi_lmul>
 801dc0e:	002a      	movs	r2, r5
 801dc10:	17eb      	asrs	r3, r5, #31
 801dc12:	910c      	str	r1, [sp, #48]	@ 0x30
 801dc14:	0038      	movs	r0, r7
 801dc16:	17f9      	asrs	r1, r7, #31
 801dc18:	f7e2 fcd2 	bl	80005c0 <__aeabi_lmul>
 801dc1c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dc1e:	003a      	movs	r2, r7
 801dc20:	4684      	mov	ip, r0
 801dc22:	4648      	mov	r0, r9
 801dc24:	4461      	add	r1, ip
 801dc26:	0049      	lsls	r1, r1, #1
 801dc28:	6001      	str	r1, [r0, #0]
 801dc2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc2c:	0030      	movs	r0, r6
 801dc2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc30:	f7e2 fcc6 	bl	80005c0 <__aeabi_lmul>
 801dc34:	002a      	movs	r2, r5
 801dc36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc38:	000e      	movs	r6, r1
 801dc3a:	0020      	movs	r0, r4
 801dc3c:	9908      	ldr	r1, [sp, #32]
 801dc3e:	f7e2 fcbf 	bl	80005c0 <__aeabi_lmul>
 801dc42:	464c      	mov	r4, r9
 801dc44:	9d05      	ldr	r5, [sp, #20]
 801dc46:	1a76      	subs	r6, r6, r1
 801dc48:	9903      	ldr	r1, [sp, #12]
 801dc4a:	0076      	lsls	r6, r6, #1
 801dc4c:	6066      	str	r6, [r4, #4]
 801dc4e:	1b4c      	subs	r4, r1, r5
 801dc50:	9e06      	ldr	r6, [sp, #24]
 801dc52:	17e1      	asrs	r1, r4, #31
 801dc54:	9103      	str	r1, [sp, #12]
 801dc56:	9902      	ldr	r1, [sp, #8]
 801dc58:	46b4      	mov	ip, r6
 801dc5a:	680f      	ldr	r7, [r1, #0]
 801dc5c:	9804      	ldr	r0, [sp, #16]
 801dc5e:	17fd      	asrs	r5, r7, #31
 801dc60:	002b      	movs	r3, r5
 801dc62:	684e      	ldr	r6, [r1, #4]
 801dc64:	4460      	add	r0, ip
 801dc66:	0005      	movs	r5, r0
 801dc68:	17c0      	asrs	r0, r0, #31
 801dc6a:	9005      	str	r0, [sp, #20]
 801dc6c:	17f0      	asrs	r0, r6, #31
 801dc6e:	9006      	str	r0, [sp, #24]
 801dc70:	003a      	movs	r2, r7
 801dc72:	0020      	movs	r0, r4
 801dc74:	17e1      	asrs	r1, r4, #31
 801dc76:	9304      	str	r3, [sp, #16]
 801dc78:	f7e2 fca2 	bl	80005c0 <__aeabi_lmul>
 801dc7c:	0032      	movs	r2, r6
 801dc7e:	9108      	str	r1, [sp, #32]
 801dc80:	17f3      	asrs	r3, r6, #31
 801dc82:	0028      	movs	r0, r5
 801dc84:	17e9      	asrs	r1, r5, #31
 801dc86:	f7e2 fc9b 	bl	80005c0 <__aeabi_lmul>
 801dc8a:	9808      	ldr	r0, [sp, #32]
 801dc8c:	002a      	movs	r2, r5
 801dc8e:	4684      	mov	ip, r0
 801dc90:	4650      	mov	r0, sl
 801dc92:	4461      	add	r1, ip
 801dc94:	0049      	lsls	r1, r1, #1
 801dc96:	6001      	str	r1, [r0, #0]
 801dc98:	9b05      	ldr	r3, [sp, #20]
 801dc9a:	9904      	ldr	r1, [sp, #16]
 801dc9c:	0038      	movs	r0, r7
 801dc9e:	f7e2 fc8f 	bl	80005c0 <__aeabi_lmul>
 801dca2:	0020      	movs	r0, r4
 801dca4:	2408      	movs	r4, #8
 801dca6:	000d      	movs	r5, r1
 801dca8:	0032      	movs	r2, r6
 801dcaa:	9b06      	ldr	r3, [sp, #24]
 801dcac:	9903      	ldr	r1, [sp, #12]
 801dcae:	f7e2 fc87 	bl	80005c0 <__aeabi_lmul>
 801dcb2:	46a4      	mov	ip, r4
 801dcb4:	4650      	mov	r0, sl
 801dcb6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dcb8:	44e3      	add	fp, ip
 801dcba:	44e0      	add	r8, ip
 801dcbc:	44e1      	add	r9, ip
 801dcbe:	44e2      	add	sl, ip
 801dcc0:	46a4      	mov	ip, r4
 801dcc2:	1a6d      	subs	r5, r5, r1
 801dcc4:	006d      	lsls	r5, r5, #1
 801dcc6:	9a01      	ldr	r2, [sp, #4]
 801dcc8:	6045      	str	r5, [r0, #4]
 801dcca:	9807      	ldr	r0, [sp, #28]
 801dccc:	4462      	add	r2, ip
 801dcce:	3801      	subs	r0, #1
 801dcd0:	9201      	str	r2, [sp, #4]
 801dcd2:	9007      	str	r0, [sp, #28]
 801dcd4:	9b00      	ldr	r3, [sp, #0]
 801dcd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dcd8:	9902      	ldr	r1, [sp, #8]
 801dcda:	4694      	mov	ip, r2
 801dcdc:	4463      	add	r3, ip
 801dcde:	9300      	str	r3, [sp, #0]
 801dce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dce2:	469c      	mov	ip, r3
 801dce4:	4461      	add	r1, ip
 801dce6:	9102      	str	r1, [sp, #8]
 801dce8:	2800      	cmp	r0, #0
 801dcea:	d000      	beq.n	801dcee <arm_radix4_butterfly_q31+0x232>
 801dcec:	e70e      	b.n	801db0c <arm_radix4_butterfly_q31+0x50>
 801dcee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dcf0:	009b      	lsls	r3, r3, #2
 801dcf2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dcf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dcf6:	9320      	str	r3, [sp, #128]	@ 0x80
 801dcf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dcfa:	2b04      	cmp	r3, #4
 801dcfc:	d800      	bhi.n	801dd00 <arm_radix4_butterfly_q31+0x244>
 801dcfe:	e180      	b.n	801e002 <arm_radix4_butterfly_q31+0x546>
 801dd00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dd02:	0893      	lsrs	r3, r2, #2
 801dd04:	1e59      	subs	r1, r3, #1
 801dd06:	9321      	str	r3, [sp, #132]	@ 0x84
 801dd08:	00db      	lsls	r3, r3, #3
 801dd0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dd0c:	00d3      	lsls	r3, r2, #3
 801dd0e:	9300      	str	r3, [sp, #0]
 801dd10:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dd12:	911a      	str	r1, [sp, #104]	@ 0x68
 801dd14:	00da      	lsls	r2, r3, #3
 801dd16:	921e      	str	r2, [sp, #120]	@ 0x78
 801dd18:	011a      	lsls	r2, r3, #4
 801dd1a:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd1c:	001a      	movs	r2, r3
 801dd1e:	4694      	mov	ip, r2
 801dd20:	005b      	lsls	r3, r3, #1
 801dd22:	4463      	add	r3, ip
 801dd24:	00db      	lsls	r3, r3, #3
 801dd26:	931c      	str	r3, [sp, #112]	@ 0x70
 801dd28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dd2a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dd2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dd2e:	9318      	str	r3, [sp, #96]	@ 0x60
 801dd30:	9319      	str	r3, [sp, #100]	@ 0x64
 801dd32:	9316      	str	r3, [sp, #88]	@ 0x58
 801dd34:	2300      	movs	r3, #0
 801dd36:	9315      	str	r3, [sp, #84]	@ 0x54
 801dd38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dd3a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dd3c:	681a      	ldr	r2, [r3, #0]
 801dd3e:	685b      	ldr	r3, [r3, #4]
 801dd40:	9205      	str	r2, [sp, #20]
 801dd42:	9306      	str	r3, [sp, #24]
 801dd44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dd46:	468c      	mov	ip, r1
 801dd48:	681a      	ldr	r2, [r3, #0]
 801dd4a:	685b      	ldr	r3, [r3, #4]
 801dd4c:	9207      	str	r2, [sp, #28]
 801dd4e:	9308      	str	r3, [sp, #32]
 801dd50:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dd52:	681a      	ldr	r2, [r3, #0]
 801dd54:	685b      	ldr	r3, [r3, #4]
 801dd56:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd58:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dd5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd5c:	0013      	movs	r3, r2
 801dd5e:	4463      	add	r3, ip
 801dd60:	4698      	mov	r8, r3
 801dd62:	0013      	movs	r3, r2
 801dd64:	4442      	add	r2, r8
 801dd66:	4691      	mov	r9, r2
 801dd68:	001a      	movs	r2, r3
 801dd6a:	444a      	add	r2, r9
 801dd6c:	4692      	mov	sl, r2
 801dd6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dd72:	4293      	cmp	r3, r2
 801dd74:	d800      	bhi.n	801dd78 <arm_radix4_butterfly_q31+0x2bc>
 801dd76:	e0dd      	b.n	801df34 <arm_radix4_butterfly_q31+0x478>
 801dd78:	4694      	mov	ip, r2
 801dd7a:	468b      	mov	fp, r1
 801dd7c:	4644      	mov	r4, r8
 801dd7e:	4655      	mov	r5, sl
 801dd80:	9b07      	ldr	r3, [sp, #28]
 801dd82:	17db      	asrs	r3, r3, #31
 801dd84:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd86:	9b08      	ldr	r3, [sp, #32]
 801dd88:	17db      	asrs	r3, r3, #31
 801dd8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801dd8c:	9b05      	ldr	r3, [sp, #20]
 801dd8e:	17db      	asrs	r3, r3, #31
 801dd90:	930e      	str	r3, [sp, #56]	@ 0x38
 801dd92:	9b06      	ldr	r3, [sp, #24]
 801dd94:	17db      	asrs	r3, r3, #31
 801dd96:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd9a:	17db      	asrs	r3, r3, #31
 801dd9c:	9310      	str	r3, [sp, #64]	@ 0x40
 801dd9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dda0:	17db      	asrs	r3, r3, #31
 801dda2:	9311      	str	r3, [sp, #68]	@ 0x44
 801dda4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dda6:	4463      	add	r3, ip
 801dda8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ddaa:	465b      	mov	r3, fp
 801ddac:	4659      	mov	r1, fp
 801ddae:	681a      	ldr	r2, [r3, #0]
 801ddb0:	464b      	mov	r3, r9
 801ddb2:	684f      	ldr	r7, [r1, #4]
 801ddb4:	4649      	mov	r1, r9
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	18d6      	adds	r6, r2, r3
 801ddba:	1ad3      	subs	r3, r2, r3
 801ddbc:	9301      	str	r3, [sp, #4]
 801ddbe:	684b      	ldr	r3, [r1, #4]
 801ddc0:	18f8      	adds	r0, r7, r3
 801ddc2:	1af9      	subs	r1, r7, r3
 801ddc4:	6827      	ldr	r7, [r4, #0]
 801ddc6:	9102      	str	r1, [sp, #8]
 801ddc8:	003a      	movs	r2, r7
 801ddca:	682f      	ldr	r7, [r5, #0]
 801ddcc:	46bc      	mov	ip, r7
 801ddce:	465f      	mov	r7, fp
 801ddd0:	4462      	add	r2, ip
 801ddd2:	18b3      	adds	r3, r6, r2
 801ddd4:	109b      	asrs	r3, r3, #2
 801ddd6:	603b      	str	r3, [r7, #0]
 801ddd8:	6867      	ldr	r7, [r4, #4]
 801ddda:	1ab6      	subs	r6, r6, r2
 801dddc:	46b8      	mov	r8, r7
 801ddde:	686f      	ldr	r7, [r5, #4]
 801dde0:	17f2      	asrs	r2, r6, #31
 801dde2:	46bc      	mov	ip, r7
 801dde4:	44e0      	add	r8, ip
 801dde6:	4643      	mov	r3, r8
 801dde8:	465f      	mov	r7, fp
 801ddea:	18c1      	adds	r1, r0, r3
 801ddec:	1089      	asrs	r1, r1, #2
 801ddee:	6079      	str	r1, [r7, #4]
 801ddf0:	9900      	ldr	r1, [sp, #0]
 801ddf2:	4690      	mov	r8, r2
 801ddf4:	468c      	mov	ip, r1
 801ddf6:	6867      	ldr	r7, [r4, #4]
 801ddf8:	6869      	ldr	r1, [r5, #4]
 801ddfa:	44e3      	add	fp, ip
 801ddfc:	1a7f      	subs	r7, r7, r1
 801ddfe:	9703      	str	r7, [sp, #12]
 801de00:	6829      	ldr	r1, [r5, #0]
 801de02:	6827      	ldr	r7, [r4, #0]
 801de04:	1a7f      	subs	r7, r7, r1
 801de06:	9704      	str	r7, [sp, #16]
 801de08:	1ac7      	subs	r7, r0, r3
 801de0a:	17fa      	asrs	r2, r7, #31
 801de0c:	4692      	mov	sl, r2
 801de0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de10:	9a07      	ldr	r2, [sp, #28]
 801de12:	0030      	movs	r0, r6
 801de14:	4641      	mov	r1, r8
 801de16:	f7e2 fbd3 	bl	80005c0 <__aeabi_lmul>
 801de1a:	9a08      	ldr	r2, [sp, #32]
 801de1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de1e:	9112      	str	r1, [sp, #72]	@ 0x48
 801de20:	0038      	movs	r0, r7
 801de22:	4651      	mov	r1, sl
 801de24:	f7e2 fbcc 	bl	80005c0 <__aeabi_lmul>
 801de28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801de2a:	9a07      	ldr	r2, [sp, #28]
 801de2c:	4684      	mov	ip, r0
 801de2e:	4461      	add	r1, ip
 801de30:	1049      	asrs	r1, r1, #1
 801de32:	6021      	str	r1, [r4, #0]
 801de34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de36:	0038      	movs	r0, r7
 801de38:	4651      	mov	r1, sl
 801de3a:	f7e2 fbc1 	bl	80005c0 <__aeabi_lmul>
 801de3e:	9a08      	ldr	r2, [sp, #32]
 801de40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de42:	000f      	movs	r7, r1
 801de44:	0030      	movs	r0, r6
 801de46:	4641      	mov	r1, r8
 801de48:	f7e2 fbba 	bl	80005c0 <__aeabi_lmul>
 801de4c:	9b00      	ldr	r3, [sp, #0]
 801de4e:	9a01      	ldr	r2, [sp, #4]
 801de50:	469c      	mov	ip, r3
 801de52:	9803      	ldr	r0, [sp, #12]
 801de54:	1a7f      	subs	r7, r7, r1
 801de56:	107f      	asrs	r7, r7, #1
 801de58:	6067      	str	r7, [r4, #4]
 801de5a:	0016      	movs	r6, r2
 801de5c:	4464      	add	r4, ip
 801de5e:	4684      	mov	ip, r0
 801de60:	4466      	add	r6, ip
 801de62:	17f2      	asrs	r2, r6, #31
 801de64:	4690      	mov	r8, r2
 801de66:	9902      	ldr	r1, [sp, #8]
 801de68:	9f04      	ldr	r7, [sp, #16]
 801de6a:	0030      	movs	r0, r6
 801de6c:	1bcf      	subs	r7, r1, r7
 801de6e:	17fa      	asrs	r2, r7, #31
 801de70:	4692      	mov	sl, r2
 801de72:	4641      	mov	r1, r8
 801de74:	9a05      	ldr	r2, [sp, #20]
 801de76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de78:	f7e2 fba2 	bl	80005c0 <__aeabi_lmul>
 801de7c:	9a06      	ldr	r2, [sp, #24]
 801de7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de80:	9112      	str	r1, [sp, #72]	@ 0x48
 801de82:	0038      	movs	r0, r7
 801de84:	4651      	mov	r1, sl
 801de86:	f7e2 fb9b 	bl	80005c0 <__aeabi_lmul>
 801de8a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801de8c:	9a05      	ldr	r2, [sp, #20]
 801de8e:	4684      	mov	ip, r0
 801de90:	4648      	mov	r0, r9
 801de92:	4461      	add	r1, ip
 801de94:	1049      	asrs	r1, r1, #1
 801de96:	6001      	str	r1, [r0, #0]
 801de98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de9a:	0038      	movs	r0, r7
 801de9c:	4651      	mov	r1, sl
 801de9e:	f7e2 fb8f 	bl	80005c0 <__aeabi_lmul>
 801dea2:	9a06      	ldr	r2, [sp, #24]
 801dea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dea6:	000f      	movs	r7, r1
 801dea8:	0030      	movs	r0, r6
 801deaa:	4641      	mov	r1, r8
 801deac:	f7e2 fb88 	bl	80005c0 <__aeabi_lmul>
 801deb0:	464e      	mov	r6, r9
 801deb2:	9a00      	ldr	r2, [sp, #0]
 801deb4:	9b01      	ldr	r3, [sp, #4]
 801deb6:	4694      	mov	ip, r2
 801deb8:	9803      	ldr	r0, [sp, #12]
 801deba:	1a7f      	subs	r7, r7, r1
 801debc:	107f      	asrs	r7, r7, #1
 801debe:	6077      	str	r7, [r6, #4]
 801dec0:	1a1e      	subs	r6, r3, r0
 801dec2:	9b04      	ldr	r3, [sp, #16]
 801dec4:	44e1      	add	r9, ip
 801dec6:	469c      	mov	ip, r3
 801dec8:	17f0      	asrs	r0, r6, #31
 801deca:	4680      	mov	r8, r0
 801decc:	9902      	ldr	r1, [sp, #8]
 801dece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ded0:	4461      	add	r1, ip
 801ded2:	17cb      	asrs	r3, r1, #31
 801ded4:	000f      	movs	r7, r1
 801ded6:	469a      	mov	sl, r3
 801ded8:	0030      	movs	r0, r6
 801deda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dedc:	4641      	mov	r1, r8
 801dede:	f7e2 fb6f 	bl	80005c0 <__aeabi_lmul>
 801dee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dee4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dee6:	9101      	str	r1, [sp, #4]
 801dee8:	0038      	movs	r0, r7
 801deea:	4651      	mov	r1, sl
 801deec:	f7e2 fb68 	bl	80005c0 <__aeabi_lmul>
 801def0:	9801      	ldr	r0, [sp, #4]
 801def2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801def4:	4684      	mov	ip, r0
 801def6:	4461      	add	r1, ip
 801def8:	1049      	asrs	r1, r1, #1
 801defa:	6029      	str	r1, [r5, #0]
 801defc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801defe:	0038      	movs	r0, r7
 801df00:	4651      	mov	r1, sl
 801df02:	f7e2 fb5d 	bl	80005c0 <__aeabi_lmul>
 801df06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df08:	000f      	movs	r7, r1
 801df0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801df0c:	0030      	movs	r0, r6
 801df0e:	4641      	mov	r1, r8
 801df10:	f7e2 fb56 	bl	80005c0 <__aeabi_lmul>
 801df14:	1a7f      	subs	r7, r7, r1
 801df16:	107f      	asrs	r7, r7, #1
 801df18:	606f      	str	r7, [r5, #4]
 801df1a:	9a00      	ldr	r2, [sp, #0]
 801df1c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801df1e:	4694      	mov	ip, r2
 801df20:	4465      	add	r5, ip
 801df22:	468c      	mov	ip, r1
 801df24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801df26:	0013      	movs	r3, r2
 801df28:	4462      	add	r2, ip
 801df2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801df2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801df2e:	429a      	cmp	r2, r3
 801df30:	d900      	bls.n	801df34 <arm_radix4_butterfly_q31+0x478>
 801df32:	e73a      	b.n	801ddaa <arm_radix4_butterfly_q31+0x2ee>
 801df34:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801df36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801df38:	468c      	mov	ip, r1
 801df3a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801df3c:	4462      	add	r2, ip
 801df3e:	468c      	mov	ip, r1
 801df40:	9216      	str	r2, [sp, #88]	@ 0x58
 801df42:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801df44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801df46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801df48:	4462      	add	r2, ip
 801df4a:	468c      	mov	ip, r1
 801df4c:	9219      	str	r2, [sp, #100]	@ 0x64
 801df4e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801df50:	3301      	adds	r3, #1
 801df52:	4462      	add	r2, ip
 801df54:	9218      	str	r2, [sp, #96]	@ 0x60
 801df56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801df58:	9315      	str	r3, [sp, #84]	@ 0x54
 801df5a:	3208      	adds	r2, #8
 801df5c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801df5e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801df60:	4293      	cmp	r3, r2
 801df62:	d800      	bhi.n	801df66 <arm_radix4_butterfly_q31+0x4aa>
 801df64:	e6e8      	b.n	801dd38 <arm_radix4_butterfly_q31+0x27c>
 801df66:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801df68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801df6a:	009b      	lsls	r3, r3, #2
 801df6c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801df6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801df70:	9213      	str	r2, [sp, #76]	@ 0x4c
 801df72:	089b      	lsrs	r3, r3, #2
 801df74:	9320      	str	r3, [sp, #128]	@ 0x80
 801df76:	2b04      	cmp	r3, #4
 801df78:	d900      	bls.n	801df7c <arm_radix4_butterfly_q31+0x4c0>
 801df7a:	e6c1      	b.n	801dd00 <arm_radix4_butterfly_q31+0x244>
 801df7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801df7e:	469a      	mov	sl, r3
 801df80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df82:	691c      	ldr	r4, [r3, #16]
 801df84:	685a      	ldr	r2, [r3, #4]
 801df86:	46a1      	mov	r9, r4
 801df88:	4690      	mov	r8, r2
 801df8a:	6819      	ldr	r1, [r3, #0]
 801df8c:	689a      	ldr	r2, [r3, #8]
 801df8e:	699f      	ldr	r7, [r3, #24]
 801df90:	188d      	adds	r5, r1, r2
 801df92:	444d      	add	r5, r9
 801df94:	19ed      	adds	r5, r5, r7
 801df96:	69de      	ldr	r6, [r3, #28]
 801df98:	601d      	str	r5, [r3, #0]
 801df9a:	4645      	mov	r5, r8
 801df9c:	46b4      	mov	ip, r6
 801df9e:	68d8      	ldr	r0, [r3, #12]
 801dfa0:	695c      	ldr	r4, [r3, #20]
 801dfa2:	182d      	adds	r5, r5, r0
 801dfa4:	192d      	adds	r5, r5, r4
 801dfa6:	4465      	add	r5, ip
 801dfa8:	605d      	str	r5, [r3, #4]
 801dfaa:	1a8d      	subs	r5, r1, r2
 801dfac:	444d      	add	r5, r9
 801dfae:	1bed      	subs	r5, r5, r7
 801dfb0:	609d      	str	r5, [r3, #8]
 801dfb2:	4645      	mov	r5, r8
 801dfb4:	1a2d      	subs	r5, r5, r0
 801dfb6:	192d      	adds	r5, r5, r4
 801dfb8:	1bad      	subs	r5, r5, r6
 801dfba:	464e      	mov	r6, r9
 801dfbc:	60dd      	str	r5, [r3, #12]
 801dfbe:	180d      	adds	r5, r1, r0
 801dfc0:	1bad      	subs	r5, r5, r6
 801dfc2:	4666      	mov	r6, ip
 801dfc4:	1bad      	subs	r5, r5, r6
 801dfc6:	611d      	str	r5, [r3, #16]
 801dfc8:	4645      	mov	r5, r8
 801dfca:	1aad      	subs	r5, r5, r2
 801dfcc:	4442      	add	r2, r8
 801dfce:	1b12      	subs	r2, r2, r4
 801dfd0:	1bd2      	subs	r2, r2, r7
 801dfd2:	1a08      	subs	r0, r1, r0
 801dfd4:	61da      	str	r2, [r3, #28]
 801dfd6:	4649      	mov	r1, r9
 801dfd8:	2201      	movs	r2, #1
 801dfda:	1a41      	subs	r1, r0, r1
 801dfdc:	4252      	negs	r2, r2
 801dfde:	4461      	add	r1, ip
 801dfe0:	4694      	mov	ip, r2
 801dfe2:	44e2      	add	sl, ip
 801dfe4:	4652      	mov	r2, sl
 801dfe6:	1b2d      	subs	r5, r5, r4
 801dfe8:	19ed      	adds	r5, r5, r7
 801dfea:	615d      	str	r5, [r3, #20]
 801dfec:	6199      	str	r1, [r3, #24]
 801dfee:	3320      	adds	r3, #32
 801dff0:	2a00      	cmp	r2, #0
 801dff2:	d1c6      	bne.n	801df82 <arm_radix4_butterfly_q31+0x4c6>
 801dff4:	b027      	add	sp, #156	@ 0x9c
 801dff6:	bc3c      	pop	{r2, r3, r4, r5}
 801dff8:	4690      	mov	r8, r2
 801dffa:	4699      	mov	r9, r3
 801dffc:	46a2      	mov	sl, r4
 801dffe:	46ab      	mov	fp, r5
 801e000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e002:	469a      	mov	sl, r3
 801e004:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e006:	e7bc      	b.n	801df82 <arm_radix4_butterfly_q31+0x4c6>

0801e008 <arm_radix4_butterfly_inverse_q31>:
 801e008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e00a:	464d      	mov	r5, r9
 801e00c:	4644      	mov	r4, r8
 801e00e:	465f      	mov	r7, fp
 801e010:	4656      	mov	r6, sl
 801e012:	b4f0      	push	{r4, r5, r6, r7}
 801e014:	b0a7      	sub	sp, #156	@ 0x9c
 801e016:	469c      	mov	ip, r3
 801e018:	9114      	str	r1, [sp, #80]	@ 0x50
 801e01a:	0889      	lsrs	r1, r1, #2
 801e01c:	9310      	str	r3, [sp, #64]	@ 0x40
 801e01e:	00cb      	lsls	r3, r1, #3
 801e020:	0015      	movs	r5, r2
 801e022:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e024:	18c2      	adds	r2, r0, r3
 801e026:	000c      	movs	r4, r1
 801e028:	9124      	str	r1, [sp, #144]	@ 0x90
 801e02a:	18d1      	adds	r1, r2, r3
 801e02c:	468b      	mov	fp, r1
 801e02e:	469a      	mov	sl, r3
 801e030:	4663      	mov	r3, ip
 801e032:	44da      	add	sl, fp
 801e034:	46d0      	mov	r8, sl
 801e036:	4681      	mov	r9, r0
 801e038:	4692      	mov	sl, r2
 801e03a:	0119      	lsls	r1, r3, #4
 801e03c:	910d      	str	r1, [sp, #52]	@ 0x34
 801e03e:	00d9      	lsls	r1, r3, #3
 801e040:	005b      	lsls	r3, r3, #1
 801e042:	4463      	add	r3, ip
 801e044:	910e      	str	r1, [sp, #56]	@ 0x38
 801e046:	00d9      	lsls	r1, r3, #3
 801e048:	9022      	str	r0, [sp, #136]	@ 0x88
 801e04a:	9025      	str	r0, [sp, #148]	@ 0x94
 801e04c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e04e:	9502      	str	r5, [sp, #8]
 801e050:	9500      	str	r5, [sp, #0]
 801e052:	9501      	str	r5, [sp, #4]
 801e054:	9409      	str	r4, [sp, #36]	@ 0x24
 801e056:	464b      	mov	r3, r9
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	4652      	mov	r2, sl
 801e05c:	111c      	asrs	r4, r3, #4
 801e05e:	465b      	mov	r3, fp
 801e060:	4648      	mov	r0, r9
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	6812      	ldr	r2, [r2, #0]
 801e066:	6840      	ldr	r0, [r0, #4]
 801e068:	111b      	asrs	r3, r3, #4
 801e06a:	18e7      	adds	r7, r4, r3
 801e06c:	1ae3      	subs	r3, r4, r3
 801e06e:	1114      	asrs	r4, r2, #4
 801e070:	4642      	mov	r2, r8
 801e072:	1105      	asrs	r5, r0, #4
 801e074:	4658      	mov	r0, fp
 801e076:	6812      	ldr	r2, [r2, #0]
 801e078:	6840      	ldr	r0, [r0, #4]
 801e07a:	9303      	str	r3, [sp, #12]
 801e07c:	1113      	asrs	r3, r2, #4
 801e07e:	18e2      	adds	r2, r4, r3
 801e080:	1103      	asrs	r3, r0, #4
 801e082:	18ee      	adds	r6, r5, r3
 801e084:	1ae8      	subs	r0, r5, r3
 801e086:	464d      	mov	r5, r9
 801e088:	18bb      	adds	r3, r7, r2
 801e08a:	602b      	str	r3, [r5, #0]
 801e08c:	4641      	mov	r1, r8
 801e08e:	4655      	mov	r5, sl
 801e090:	6849      	ldr	r1, [r1, #4]
 801e092:	686d      	ldr	r5, [r5, #4]
 801e094:	110b      	asrs	r3, r1, #4
 801e096:	112d      	asrs	r5, r5, #4
 801e098:	18eb      	adds	r3, r5, r3
 801e09a:	464d      	mov	r5, r9
 801e09c:	18f1      	adds	r1, r6, r3
 801e09e:	6069      	str	r1, [r5, #4]
 801e0a0:	4655      	mov	r5, sl
 801e0a2:	686d      	ldr	r5, [r5, #4]
 801e0a4:	9004      	str	r0, [sp, #16]
 801e0a6:	112c      	asrs	r4, r5, #4
 801e0a8:	4645      	mov	r5, r8
 801e0aa:	686d      	ldr	r5, [r5, #4]
 801e0ac:	1129      	asrs	r1, r5, #4
 801e0ae:	1a65      	subs	r5, r4, r1
 801e0b0:	4651      	mov	r1, sl
 801e0b2:	6809      	ldr	r1, [r1, #0]
 801e0b4:	1abc      	subs	r4, r7, r2
 801e0b6:	1108      	asrs	r0, r1, #4
 801e0b8:	4641      	mov	r1, r8
 801e0ba:	17e2      	asrs	r2, r4, #31
 801e0bc:	6809      	ldr	r1, [r1, #0]
 801e0be:	9207      	str	r2, [sp, #28]
 801e0c0:	9a01      	ldr	r2, [sp, #4]
 801e0c2:	1109      	asrs	r1, r1, #4
 801e0c4:	6817      	ldr	r7, [r2, #0]
 801e0c6:	1a41      	subs	r1, r0, r1
 801e0c8:	9106      	str	r1, [sp, #24]
 801e0ca:	0039      	movs	r1, r7
 801e0cc:	17ff      	asrs	r7, r7, #31
 801e0ce:	0038      	movs	r0, r7
 801e0d0:	9505      	str	r5, [sp, #20]
 801e0d2:	1af5      	subs	r5, r6, r3
 801e0d4:	17ef      	asrs	r7, r5, #31
 801e0d6:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e0d8:	6857      	ldr	r7, [r2, #4]
 801e0da:	0003      	movs	r3, r0
 801e0dc:	17fe      	asrs	r6, r7, #31
 801e0de:	000a      	movs	r2, r1
 801e0e0:	9108      	str	r1, [sp, #32]
 801e0e2:	900a      	str	r0, [sp, #40]	@ 0x28
 801e0e4:	17e1      	asrs	r1, r4, #31
 801e0e6:	0020      	movs	r0, r4
 801e0e8:	960c      	str	r6, [sp, #48]	@ 0x30
 801e0ea:	f7e2 fa69 	bl	80005c0 <__aeabi_lmul>
 801e0ee:	003a      	movs	r2, r7
 801e0f0:	17fb      	asrs	r3, r7, #31
 801e0f2:	000e      	movs	r6, r1
 801e0f4:	0028      	movs	r0, r5
 801e0f6:	17e9      	asrs	r1, r5, #31
 801e0f8:	f7e2 fa62 	bl	80005c0 <__aeabi_lmul>
 801e0fc:	4653      	mov	r3, sl
 801e0fe:	1a76      	subs	r6, r6, r1
 801e100:	0076      	lsls	r6, r6, #1
 801e102:	601e      	str	r6, [r3, #0]
 801e104:	002a      	movs	r2, r5
 801e106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e108:	9808      	ldr	r0, [sp, #32]
 801e10a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e10c:	f7e2 fa58 	bl	80005c0 <__aeabi_lmul>
 801e110:	003a      	movs	r2, r7
 801e112:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e114:	000d      	movs	r5, r1
 801e116:	0020      	movs	r0, r4
 801e118:	9907      	ldr	r1, [sp, #28]
 801e11a:	f7e2 fa51 	bl	80005c0 <__aeabi_lmul>
 801e11e:	4657      	mov	r7, sl
 801e120:	186d      	adds	r5, r5, r1
 801e122:	006d      	lsls	r5, r5, #1
 801e124:	607d      	str	r5, [r7, #4]
 801e126:	9b03      	ldr	r3, [sp, #12]
 801e128:	9e06      	ldr	r6, [sp, #24]
 801e12a:	9d05      	ldr	r5, [sp, #20]
 801e12c:	46b4      	mov	ip, r6
 801e12e:	1b5d      	subs	r5, r3, r5
 801e130:	9b00      	ldr	r3, [sp, #0]
 801e132:	17ef      	asrs	r7, r5, #31
 801e134:	0039      	movs	r1, r7
 801e136:	681f      	ldr	r7, [r3, #0]
 801e138:	17fc      	asrs	r4, r7, #31
 801e13a:	0020      	movs	r0, r4
 801e13c:	9c04      	ldr	r4, [sp, #16]
 801e13e:	4464      	add	r4, ip
 801e140:	17e6      	asrs	r6, r4, #31
 801e142:	9407      	str	r4, [sp, #28]
 801e144:	9608      	str	r6, [sp, #32]
 801e146:	685e      	ldr	r6, [r3, #4]
 801e148:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e14a:	17f2      	asrs	r2, r6, #31
 801e14c:	0003      	movs	r3, r0
 801e14e:	920c      	str	r2, [sp, #48]	@ 0x30
 801e150:	0028      	movs	r0, r5
 801e152:	003a      	movs	r2, r7
 801e154:	910a      	str	r1, [sp, #40]	@ 0x28
 801e156:	f7e2 fa33 	bl	80005c0 <__aeabi_lmul>
 801e15a:	0032      	movs	r2, r6
 801e15c:	17f3      	asrs	r3, r6, #31
 801e15e:	9807      	ldr	r0, [sp, #28]
 801e160:	000c      	movs	r4, r1
 801e162:	9908      	ldr	r1, [sp, #32]
 801e164:	f7e2 fa2c 	bl	80005c0 <__aeabi_lmul>
 801e168:	4658      	mov	r0, fp
 801e16a:	1a64      	subs	r4, r4, r1
 801e16c:	0064      	lsls	r4, r4, #1
 801e16e:	9a07      	ldr	r2, [sp, #28]
 801e170:	6004      	str	r4, [r0, #0]
 801e172:	9b08      	ldr	r3, [sp, #32]
 801e174:	0038      	movs	r0, r7
 801e176:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e178:	f7e2 fa22 	bl	80005c0 <__aeabi_lmul>
 801e17c:	0032      	movs	r2, r6
 801e17e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e180:	000c      	movs	r4, r1
 801e182:	0028      	movs	r0, r5
 801e184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e186:	f7e2 fa1b 	bl	80005c0 <__aeabi_lmul>
 801e18a:	9d05      	ldr	r5, [sp, #20]
 801e18c:	465f      	mov	r7, fp
 801e18e:	46ac      	mov	ip, r5
 801e190:	1864      	adds	r4, r4, r1
 801e192:	9903      	ldr	r1, [sp, #12]
 801e194:	0064      	lsls	r4, r4, #1
 801e196:	4461      	add	r1, ip
 801e198:	607c      	str	r4, [r7, #4]
 801e19a:	000c      	movs	r4, r1
 801e19c:	17c9      	asrs	r1, r1, #31
 801e19e:	9105      	str	r1, [sp, #20]
 801e1a0:	9902      	ldr	r1, [sp, #8]
 801e1a2:	9804      	ldr	r0, [sp, #16]
 801e1a4:	680d      	ldr	r5, [r1, #0]
 801e1a6:	9e06      	ldr	r6, [sp, #24]
 801e1a8:	002b      	movs	r3, r5
 801e1aa:	17ed      	asrs	r5, r5, #31
 801e1ac:	684f      	ldr	r7, [r1, #4]
 801e1ae:	9503      	str	r5, [sp, #12]
 801e1b0:	1b85      	subs	r5, r0, r6
 801e1b2:	17e8      	asrs	r0, r5, #31
 801e1b4:	001a      	movs	r2, r3
 801e1b6:	9006      	str	r0, [sp, #24]
 801e1b8:	17fe      	asrs	r6, r7, #31
 801e1ba:	9304      	str	r3, [sp, #16]
 801e1bc:	0020      	movs	r0, r4
 801e1be:	9b03      	ldr	r3, [sp, #12]
 801e1c0:	17e1      	asrs	r1, r4, #31
 801e1c2:	9607      	str	r6, [sp, #28]
 801e1c4:	f7e2 f9fc 	bl	80005c0 <__aeabi_lmul>
 801e1c8:	003a      	movs	r2, r7
 801e1ca:	000e      	movs	r6, r1
 801e1cc:	17fb      	asrs	r3, r7, #31
 801e1ce:	0028      	movs	r0, r5
 801e1d0:	17e9      	asrs	r1, r5, #31
 801e1d2:	f7e2 f9f5 	bl	80005c0 <__aeabi_lmul>
 801e1d6:	4640      	mov	r0, r8
 801e1d8:	1a76      	subs	r6, r6, r1
 801e1da:	0076      	lsls	r6, r6, #1
 801e1dc:	002a      	movs	r2, r5
 801e1de:	9b06      	ldr	r3, [sp, #24]
 801e1e0:	6006      	str	r6, [r0, #0]
 801e1e2:	9903      	ldr	r1, [sp, #12]
 801e1e4:	9804      	ldr	r0, [sp, #16]
 801e1e6:	f7e2 f9eb 	bl	80005c0 <__aeabi_lmul>
 801e1ea:	0020      	movs	r0, r4
 801e1ec:	2408      	movs	r4, #8
 801e1ee:	9b07      	ldr	r3, [sp, #28]
 801e1f0:	000d      	movs	r5, r1
 801e1f2:	003a      	movs	r2, r7
 801e1f4:	9905      	ldr	r1, [sp, #20]
 801e1f6:	f7e2 f9e3 	bl	80005c0 <__aeabi_lmul>
 801e1fa:	4640      	mov	r0, r8
 801e1fc:	46a4      	mov	ip, r4
 801e1fe:	186d      	adds	r5, r5, r1
 801e200:	006d      	lsls	r5, r5, #1
 801e202:	6045      	str	r5, [r0, #4]
 801e204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e206:	44e1      	add	r9, ip
 801e208:	3801      	subs	r0, #1
 801e20a:	9009      	str	r0, [sp, #36]	@ 0x24
 801e20c:	9a01      	ldr	r2, [sp, #4]
 801e20e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e210:	44e2      	add	sl, ip
 801e212:	44e3      	add	fp, ip
 801e214:	44e0      	add	r8, ip
 801e216:	46a4      	mov	ip, r4
 801e218:	4462      	add	r2, ip
 801e21a:	9201      	str	r2, [sp, #4]
 801e21c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e21e:	9b00      	ldr	r3, [sp, #0]
 801e220:	4694      	mov	ip, r2
 801e222:	4463      	add	r3, ip
 801e224:	9300      	str	r3, [sp, #0]
 801e226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e228:	9902      	ldr	r1, [sp, #8]
 801e22a:	469c      	mov	ip, r3
 801e22c:	4461      	add	r1, ip
 801e22e:	9102      	str	r1, [sp, #8]
 801e230:	2800      	cmp	r0, #0
 801e232:	d000      	beq.n	801e236 <arm_radix4_butterfly_inverse_q31+0x22e>
 801e234:	e70f      	b.n	801e056 <arm_radix4_butterfly_inverse_q31+0x4e>
 801e236:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e238:	009b      	lsls	r3, r3, #2
 801e23a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e23c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e23e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e240:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e242:	2b04      	cmp	r3, #4
 801e244:	d800      	bhi.n	801e248 <arm_radix4_butterfly_inverse_q31+0x240>
 801e246:	e17c      	b.n	801e542 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e24a:	0893      	lsrs	r3, r2, #2
 801e24c:	1e59      	subs	r1, r3, #1
 801e24e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e250:	00db      	lsls	r3, r3, #3
 801e252:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e254:	00d3      	lsls	r3, r2, #3
 801e256:	9300      	str	r3, [sp, #0]
 801e258:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e25a:	911a      	str	r1, [sp, #104]	@ 0x68
 801e25c:	00da      	lsls	r2, r3, #3
 801e25e:	921e      	str	r2, [sp, #120]	@ 0x78
 801e260:	011a      	lsls	r2, r3, #4
 801e262:	921d      	str	r2, [sp, #116]	@ 0x74
 801e264:	001a      	movs	r2, r3
 801e266:	4694      	mov	ip, r2
 801e268:	005b      	lsls	r3, r3, #1
 801e26a:	4463      	add	r3, ip
 801e26c:	00db      	lsls	r3, r3, #3
 801e26e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e270:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e272:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e276:	9318      	str	r3, [sp, #96]	@ 0x60
 801e278:	9319      	str	r3, [sp, #100]	@ 0x64
 801e27a:	9316      	str	r3, [sp, #88]	@ 0x58
 801e27c:	2300      	movs	r3, #0
 801e27e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e280:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e282:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e284:	681a      	ldr	r2, [r3, #0]
 801e286:	685b      	ldr	r3, [r3, #4]
 801e288:	9205      	str	r2, [sp, #20]
 801e28a:	9306      	str	r3, [sp, #24]
 801e28c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e28e:	468c      	mov	ip, r1
 801e290:	681a      	ldr	r2, [r3, #0]
 801e292:	685b      	ldr	r3, [r3, #4]
 801e294:	9207      	str	r2, [sp, #28]
 801e296:	9308      	str	r3, [sp, #32]
 801e298:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e29a:	681a      	ldr	r2, [r3, #0]
 801e29c:	685b      	ldr	r3, [r3, #4]
 801e29e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2a0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e2a2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2a4:	0013      	movs	r3, r2
 801e2a6:	4463      	add	r3, ip
 801e2a8:	4698      	mov	r8, r3
 801e2aa:	0013      	movs	r3, r2
 801e2ac:	4442      	add	r2, r8
 801e2ae:	4691      	mov	r9, r2
 801e2b0:	001a      	movs	r2, r3
 801e2b2:	444a      	add	r2, r9
 801e2b4:	4692      	mov	sl, r2
 801e2b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e2b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e2ba:	4293      	cmp	r3, r2
 801e2bc:	d800      	bhi.n	801e2c0 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e2be:	e0d9      	b.n	801e474 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e2c0:	4694      	mov	ip, r2
 801e2c2:	4644      	mov	r4, r8
 801e2c4:	4655      	mov	r5, sl
 801e2c6:	4688      	mov	r8, r1
 801e2c8:	9b07      	ldr	r3, [sp, #28]
 801e2ca:	17db      	asrs	r3, r3, #31
 801e2cc:	930c      	str	r3, [sp, #48]	@ 0x30
 801e2ce:	9b08      	ldr	r3, [sp, #32]
 801e2d0:	17db      	asrs	r3, r3, #31
 801e2d2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2d4:	9b05      	ldr	r3, [sp, #20]
 801e2d6:	17db      	asrs	r3, r3, #31
 801e2d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801e2da:	9b06      	ldr	r3, [sp, #24]
 801e2dc:	17db      	asrs	r3, r3, #31
 801e2de:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e2:	17db      	asrs	r3, r3, #31
 801e2e4:	9310      	str	r3, [sp, #64]	@ 0x40
 801e2e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e2e8:	17db      	asrs	r3, r3, #31
 801e2ea:	9311      	str	r3, [sp, #68]	@ 0x44
 801e2ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2ee:	4463      	add	r3, ip
 801e2f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e2f2:	4643      	mov	r3, r8
 801e2f4:	4641      	mov	r1, r8
 801e2f6:	681a      	ldr	r2, [r3, #0]
 801e2f8:	464b      	mov	r3, r9
 801e2fa:	684f      	ldr	r7, [r1, #4]
 801e2fc:	4649      	mov	r1, r9
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	18d6      	adds	r6, r2, r3
 801e302:	1ad3      	subs	r3, r2, r3
 801e304:	9301      	str	r3, [sp, #4]
 801e306:	684b      	ldr	r3, [r1, #4]
 801e308:	1af9      	subs	r1, r7, r3
 801e30a:	9102      	str	r1, [sp, #8]
 801e30c:	6829      	ldr	r1, [r5, #0]
 801e30e:	18f8      	adds	r0, r7, r3
 801e310:	468c      	mov	ip, r1
 801e312:	6827      	ldr	r7, [r4, #0]
 801e314:	4467      	add	r7, ip
 801e316:	003a      	movs	r2, r7
 801e318:	19f3      	adds	r3, r6, r7
 801e31a:	4647      	mov	r7, r8
 801e31c:	109b      	asrs	r3, r3, #2
 801e31e:	603b      	str	r3, [r7, #0]
 801e320:	6869      	ldr	r1, [r5, #4]
 801e322:	6867      	ldr	r7, [r4, #4]
 801e324:	468c      	mov	ip, r1
 801e326:	4467      	add	r7, ip
 801e328:	003b      	movs	r3, r7
 801e32a:	19c1      	adds	r1, r0, r7
 801e32c:	4647      	mov	r7, r8
 801e32e:	1ab6      	subs	r6, r6, r2
 801e330:	1089      	asrs	r1, r1, #2
 801e332:	6079      	str	r1, [r7, #4]
 801e334:	17f2      	asrs	r2, r6, #31
 801e336:	9900      	ldr	r1, [sp, #0]
 801e338:	4692      	mov	sl, r2
 801e33a:	468c      	mov	ip, r1
 801e33c:	6867      	ldr	r7, [r4, #4]
 801e33e:	6869      	ldr	r1, [r5, #4]
 801e340:	44e0      	add	r8, ip
 801e342:	1a7f      	subs	r7, r7, r1
 801e344:	9703      	str	r7, [sp, #12]
 801e346:	6821      	ldr	r1, [r4, #0]
 801e348:	682f      	ldr	r7, [r5, #0]
 801e34a:	1bc9      	subs	r1, r1, r7
 801e34c:	1ac7      	subs	r7, r0, r3
 801e34e:	17fa      	asrs	r2, r7, #31
 801e350:	4693      	mov	fp, r2
 801e352:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e354:	9a07      	ldr	r2, [sp, #28]
 801e356:	9104      	str	r1, [sp, #16]
 801e358:	0030      	movs	r0, r6
 801e35a:	4651      	mov	r1, sl
 801e35c:	f7e2 f930 	bl	80005c0 <__aeabi_lmul>
 801e360:	9a08      	ldr	r2, [sp, #32]
 801e362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e364:	9112      	str	r1, [sp, #72]	@ 0x48
 801e366:	0038      	movs	r0, r7
 801e368:	4659      	mov	r1, fp
 801e36a:	f7e2 f929 	bl	80005c0 <__aeabi_lmul>
 801e36e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e370:	9a07      	ldr	r2, [sp, #28]
 801e372:	1a41      	subs	r1, r0, r1
 801e374:	1049      	asrs	r1, r1, #1
 801e376:	6021      	str	r1, [r4, #0]
 801e378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e37a:	0038      	movs	r0, r7
 801e37c:	4659      	mov	r1, fp
 801e37e:	f7e2 f91f 	bl	80005c0 <__aeabi_lmul>
 801e382:	9a08      	ldr	r2, [sp, #32]
 801e384:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e386:	000f      	movs	r7, r1
 801e388:	0030      	movs	r0, r6
 801e38a:	4651      	mov	r1, sl
 801e38c:	f7e2 f918 	bl	80005c0 <__aeabi_lmul>
 801e390:	9b00      	ldr	r3, [sp, #0]
 801e392:	187f      	adds	r7, r7, r1
 801e394:	469c      	mov	ip, r3
 801e396:	107f      	asrs	r7, r7, #1
 801e398:	6067      	str	r7, [r4, #4]
 801e39a:	9a01      	ldr	r2, [sp, #4]
 801e39c:	9f03      	ldr	r7, [sp, #12]
 801e39e:	9802      	ldr	r0, [sp, #8]
 801e3a0:	1bd7      	subs	r7, r2, r7
 801e3a2:	17fe      	asrs	r6, r7, #31
 801e3a4:	0031      	movs	r1, r6
 801e3a6:	9e04      	ldr	r6, [sp, #16]
 801e3a8:	4682      	mov	sl, r0
 801e3aa:	4464      	add	r4, ip
 801e3ac:	46b4      	mov	ip, r6
 801e3ae:	44e2      	add	sl, ip
 801e3b0:	4652      	mov	r2, sl
 801e3b2:	17d2      	asrs	r2, r2, #31
 801e3b4:	4693      	mov	fp, r2
 801e3b6:	0038      	movs	r0, r7
 801e3b8:	9a05      	ldr	r2, [sp, #20]
 801e3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3bc:	9112      	str	r1, [sp, #72]	@ 0x48
 801e3be:	f7e2 f8ff 	bl	80005c0 <__aeabi_lmul>
 801e3c2:	9a06      	ldr	r2, [sp, #24]
 801e3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3c6:	000e      	movs	r6, r1
 801e3c8:	4650      	mov	r0, sl
 801e3ca:	4659      	mov	r1, fp
 801e3cc:	f7e2 f8f8 	bl	80005c0 <__aeabi_lmul>
 801e3d0:	4648      	mov	r0, r9
 801e3d2:	1a76      	subs	r6, r6, r1
 801e3d4:	1076      	asrs	r6, r6, #1
 801e3d6:	6006      	str	r6, [r0, #0]
 801e3d8:	9a05      	ldr	r2, [sp, #20]
 801e3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3dc:	4650      	mov	r0, sl
 801e3de:	4659      	mov	r1, fp
 801e3e0:	f7e2 f8ee 	bl	80005c0 <__aeabi_lmul>
 801e3e4:	9a06      	ldr	r2, [sp, #24]
 801e3e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3e8:	000e      	movs	r6, r1
 801e3ea:	0038      	movs	r0, r7
 801e3ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e3ee:	f7e2 f8e7 	bl	80005c0 <__aeabi_lmul>
 801e3f2:	9a00      	ldr	r2, [sp, #0]
 801e3f4:	9f03      	ldr	r7, [sp, #12]
 801e3f6:	4694      	mov	ip, r2
 801e3f8:	1876      	adds	r6, r6, r1
 801e3fa:	4649      	mov	r1, r9
 801e3fc:	44e1      	add	r9, ip
 801e3fe:	46bc      	mov	ip, r7
 801e400:	9b01      	ldr	r3, [sp, #4]
 801e402:	1076      	asrs	r6, r6, #1
 801e404:	4463      	add	r3, ip
 801e406:	17df      	asrs	r7, r3, #31
 801e408:	604e      	str	r6, [r1, #4]
 801e40a:	46ba      	mov	sl, r7
 801e40c:	001e      	movs	r6, r3
 801e40e:	9802      	ldr	r0, [sp, #8]
 801e410:	9b04      	ldr	r3, [sp, #16]
 801e412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e414:	1ac7      	subs	r7, r0, r3
 801e416:	17fb      	asrs	r3, r7, #31
 801e418:	469b      	mov	fp, r3
 801e41a:	0030      	movs	r0, r6
 801e41c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e41e:	4651      	mov	r1, sl
 801e420:	f7e2 f8ce 	bl	80005c0 <__aeabi_lmul>
 801e424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e426:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e428:	9101      	str	r1, [sp, #4]
 801e42a:	0038      	movs	r0, r7
 801e42c:	4659      	mov	r1, fp
 801e42e:	f7e2 f8c7 	bl	80005c0 <__aeabi_lmul>
 801e432:	9801      	ldr	r0, [sp, #4]
 801e434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e436:	1a41      	subs	r1, r0, r1
 801e438:	1049      	asrs	r1, r1, #1
 801e43a:	6029      	str	r1, [r5, #0]
 801e43c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e43e:	0038      	movs	r0, r7
 801e440:	4659      	mov	r1, fp
 801e442:	f7e2 f8bd 	bl	80005c0 <__aeabi_lmul>
 801e446:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e448:	000f      	movs	r7, r1
 801e44a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e44c:	0030      	movs	r0, r6
 801e44e:	4651      	mov	r1, sl
 801e450:	f7e2 f8b6 	bl	80005c0 <__aeabi_lmul>
 801e454:	187f      	adds	r7, r7, r1
 801e456:	107f      	asrs	r7, r7, #1
 801e458:	606f      	str	r7, [r5, #4]
 801e45a:	9a00      	ldr	r2, [sp, #0]
 801e45c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e45e:	4694      	mov	ip, r2
 801e460:	4465      	add	r5, ip
 801e462:	468c      	mov	ip, r1
 801e464:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e466:	0013      	movs	r3, r2
 801e468:	4462      	add	r2, ip
 801e46a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e46c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e46e:	429a      	cmp	r2, r3
 801e470:	d900      	bls.n	801e474 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e472:	e73e      	b.n	801e2f2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e474:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e476:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e478:	468c      	mov	ip, r1
 801e47a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e47c:	4462      	add	r2, ip
 801e47e:	468c      	mov	ip, r1
 801e480:	9216      	str	r2, [sp, #88]	@ 0x58
 801e482:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e484:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e486:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e488:	4462      	add	r2, ip
 801e48a:	468c      	mov	ip, r1
 801e48c:	9219      	str	r2, [sp, #100]	@ 0x64
 801e48e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e490:	3301      	adds	r3, #1
 801e492:	4462      	add	r2, ip
 801e494:	9218      	str	r2, [sp, #96]	@ 0x60
 801e496:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e498:	9315      	str	r3, [sp, #84]	@ 0x54
 801e49a:	3208      	adds	r2, #8
 801e49c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e49e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e4a0:	4293      	cmp	r3, r2
 801e4a2:	d800      	bhi.n	801e4a6 <arm_radix4_butterfly_inverse_q31+0x49e>
 801e4a4:	e6ec      	b.n	801e280 <arm_radix4_butterfly_inverse_q31+0x278>
 801e4a6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e4a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e4aa:	009b      	lsls	r3, r3, #2
 801e4ac:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e4ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e4b0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e4b2:	089b      	lsrs	r3, r3, #2
 801e4b4:	9320      	str	r3, [sp, #128]	@ 0x80
 801e4b6:	2b04      	cmp	r3, #4
 801e4b8:	d900      	bls.n	801e4bc <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e4ba:	e6c5      	b.n	801e248 <arm_radix4_butterfly_inverse_q31+0x240>
 801e4bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e4be:	469a      	mov	sl, r3
 801e4c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e4c2:	681a      	ldr	r2, [r3, #0]
 801e4c4:	6918      	ldr	r0, [r3, #16]
 801e4c6:	4691      	mov	r9, r2
 801e4c8:	464c      	mov	r4, r9
 801e4ca:	4680      	mov	r8, r0
 801e4cc:	69de      	ldr	r6, [r3, #28]
 801e4ce:	689d      	ldr	r5, [r3, #8]
 801e4d0:	46b4      	mov	ip, r6
 801e4d2:	6998      	ldr	r0, [r3, #24]
 801e4d4:	1964      	adds	r4, r4, r5
 801e4d6:	6859      	ldr	r1, [r3, #4]
 801e4d8:	68da      	ldr	r2, [r3, #12]
 801e4da:	4444      	add	r4, r8
 801e4dc:	695f      	ldr	r7, [r3, #20]
 801e4de:	1824      	adds	r4, r4, r0
 801e4e0:	601c      	str	r4, [r3, #0]
 801e4e2:	188c      	adds	r4, r1, r2
 801e4e4:	19e4      	adds	r4, r4, r7
 801e4e6:	4464      	add	r4, ip
 801e4e8:	605c      	str	r4, [r3, #4]
 801e4ea:	464c      	mov	r4, r9
 801e4ec:	1b64      	subs	r4, r4, r5
 801e4ee:	4444      	add	r4, r8
 801e4f0:	1a24      	subs	r4, r4, r0
 801e4f2:	609c      	str	r4, [r3, #8]
 801e4f4:	1a8c      	subs	r4, r1, r2
 801e4f6:	19e4      	adds	r4, r4, r7
 801e4f8:	1ba4      	subs	r4, r4, r6
 801e4fa:	60dc      	str	r4, [r3, #12]
 801e4fc:	464c      	mov	r4, r9
 801e4fe:	4646      	mov	r6, r8
 801e500:	1aa4      	subs	r4, r4, r2
 801e502:	1ba4      	subs	r4, r4, r6
 801e504:	4464      	add	r4, ip
 801e506:	611c      	str	r4, [r3, #16]
 801e508:	194c      	adds	r4, r1, r5
 801e50a:	1be4      	subs	r4, r4, r7
 801e50c:	1a24      	subs	r4, r4, r0
 801e50e:	615c      	str	r4, [r3, #20]
 801e510:	4644      	mov	r4, r8
 801e512:	4666      	mov	r6, ip
 801e514:	444a      	add	r2, r9
 801e516:	1b12      	subs	r2, r2, r4
 801e518:	1b92      	subs	r2, r2, r6
 801e51a:	619a      	str	r2, [r3, #24]
 801e51c:	1b4a      	subs	r2, r1, r5
 801e51e:	1bd1      	subs	r1, r2, r7
 801e520:	2201      	movs	r2, #1
 801e522:	4252      	negs	r2, r2
 801e524:	4694      	mov	ip, r2
 801e526:	44e2      	add	sl, ip
 801e528:	4652      	mov	r2, sl
 801e52a:	1809      	adds	r1, r1, r0
 801e52c:	61d9      	str	r1, [r3, #28]
 801e52e:	3320      	adds	r3, #32
 801e530:	2a00      	cmp	r2, #0
 801e532:	d1c6      	bne.n	801e4c2 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e534:	b027      	add	sp, #156	@ 0x9c
 801e536:	bc3c      	pop	{r2, r3, r4, r5}
 801e538:	4690      	mov	r8, r2
 801e53a:	4699      	mov	r9, r3
 801e53c:	46a2      	mov	sl, r4
 801e53e:	46ab      	mov	fp, r5
 801e540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e542:	469a      	mov	sl, r3
 801e544:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e546:	e7bc      	b.n	801e4c2 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e548 <arm_cmplx_mag_squared_q31>:
 801e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e54a:	464f      	mov	r7, r9
 801e54c:	4646      	mov	r6, r8
 801e54e:	0004      	movs	r4, r0
 801e550:	b4c0      	push	{r6, r7}
 801e552:	0016      	movs	r6, r2
 801e554:	000f      	movs	r7, r1
 801e556:	2a00      	cmp	r2, #0
 801e558:	d018      	beq.n	801e58c <arm_cmplx_mag_squared_q31+0x44>
 801e55a:	6823      	ldr	r3, [r4, #0]
 801e55c:	6822      	ldr	r2, [r4, #0]
 801e55e:	17d9      	asrs	r1, r3, #31
 801e560:	6863      	ldr	r3, [r4, #4]
 801e562:	0010      	movs	r0, r2
 801e564:	4698      	mov	r8, r3
 801e566:	17db      	asrs	r3, r3, #31
 801e568:	4699      	mov	r9, r3
 801e56a:	000b      	movs	r3, r1
 801e56c:	f7e2 f828 	bl	80005c0 <__aeabi_lmul>
 801e570:	4642      	mov	r2, r8
 801e572:	104d      	asrs	r5, r1, #1
 801e574:	464b      	mov	r3, r9
 801e576:	4640      	mov	r0, r8
 801e578:	4649      	mov	r1, r9
 801e57a:	f7e2 f821 	bl	80005c0 <__aeabi_lmul>
 801e57e:	1049      	asrs	r1, r1, #1
 801e580:	1869      	adds	r1, r5, r1
 801e582:	3e01      	subs	r6, #1
 801e584:	c702      	stmia	r7!, {r1}
 801e586:	3408      	adds	r4, #8
 801e588:	2e00      	cmp	r6, #0
 801e58a:	d1e6      	bne.n	801e55a <arm_cmplx_mag_squared_q31+0x12>
 801e58c:	bc0c      	pop	{r2, r3}
 801e58e:	4690      	mov	r8, r2
 801e590:	4699      	mov	r9, r3
 801e592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e594 <arm_mult_q31>:
 801e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e596:	4646      	mov	r6, r8
 801e598:	464f      	mov	r7, r9
 801e59a:	4690      	mov	r8, r2
 801e59c:	b4c0      	push	{r6, r7}
 801e59e:	001d      	movs	r5, r3
 801e5a0:	0006      	movs	r6, r0
 801e5a2:	000f      	movs	r7, r1
 801e5a4:	2400      	movs	r4, #0
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d020      	beq.n	801e5ec <arm_mult_q31+0x58>
 801e5aa:	4b12      	ldr	r3, [pc, #72]	@ (801e5f4 <arm_mult_q31+0x60>)
 801e5ac:	4699      	mov	r9, r3
 801e5ae:	e007      	b.n	801e5c0 <arm_mult_q31+0x2c>
 801e5b0:	464b      	mov	r3, r9
 801e5b2:	4059      	eors	r1, r3
 801e5b4:	4643      	mov	r3, r8
 801e5b6:	3d01      	subs	r5, #1
 801e5b8:	5119      	str	r1, [r3, r4]
 801e5ba:	3404      	adds	r4, #4
 801e5bc:	2d00      	cmp	r5, #0
 801e5be:	d015      	beq.n	801e5ec <arm_mult_q31+0x58>
 801e5c0:	5933      	ldr	r3, [r6, r4]
 801e5c2:	593a      	ldr	r2, [r7, r4]
 801e5c4:	17d9      	asrs	r1, r3, #31
 801e5c6:	593b      	ldr	r3, [r7, r4]
 801e5c8:	5930      	ldr	r0, [r6, r4]
 801e5ca:	17db      	asrs	r3, r3, #31
 801e5cc:	f7e1 fff8 	bl	80005c0 <__aeabi_lmul>
 801e5d0:	004b      	lsls	r3, r1, #1
 801e5d2:	0fc0      	lsrs	r0, r0, #31
 801e5d4:	4318      	orrs	r0, r3
 801e5d6:	17c9      	asrs	r1, r1, #31
 801e5d8:	17c3      	asrs	r3, r0, #31
 801e5da:	428b      	cmp	r3, r1
 801e5dc:	d1e8      	bne.n	801e5b0 <arm_mult_q31+0x1c>
 801e5de:	0001      	movs	r1, r0
 801e5e0:	4643      	mov	r3, r8
 801e5e2:	3d01      	subs	r5, #1
 801e5e4:	5119      	str	r1, [r3, r4]
 801e5e6:	3404      	adds	r4, #4
 801e5e8:	2d00      	cmp	r5, #0
 801e5ea:	d1e9      	bne.n	801e5c0 <arm_mult_q31+0x2c>
 801e5ec:	bc0c      	pop	{r2, r3}
 801e5ee:	4690      	mov	r8, r2
 801e5f0:	4699      	mov	r9, r3
 801e5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5f4:	7fffffff 	.word	0x7fffffff

0801e5f8 <arm_add_q31>:
 801e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5fa:	465f      	mov	r7, fp
 801e5fc:	4656      	mov	r6, sl
 801e5fe:	464d      	mov	r5, r9
 801e600:	4644      	mov	r4, r8
 801e602:	b4f0      	push	{r4, r5, r6, r7}
 801e604:	4693      	mov	fp, r2
 801e606:	b083      	sub	sp, #12
 801e608:	4681      	mov	r9, r0
 801e60a:	468a      	mov	sl, r1
 801e60c:	4698      	mov	r8, r3
 801e60e:	2200      	movs	r2, #0
 801e610:	2b00      	cmp	r3, #0
 801e612:	d020      	beq.n	801e656 <arm_add_q31+0x5e>
 801e614:	4649      	mov	r1, r9
 801e616:	4653      	mov	r3, sl
 801e618:	588e      	ldr	r6, [r1, r2]
 801e61a:	589b      	ldr	r3, [r3, r2]
 801e61c:	17f7      	asrs	r7, r6, #31
 801e61e:	001c      	movs	r4, r3
 801e620:	0030      	movs	r0, r6
 801e622:	0039      	movs	r1, r7
 801e624:	17dd      	asrs	r5, r3, #31
 801e626:	46b4      	mov	ip, r6
 801e628:	1900      	adds	r0, r0, r4
 801e62a:	4169      	adcs	r1, r5
 801e62c:	4463      	add	r3, ip
 801e62e:	9000      	str	r0, [sp, #0]
 801e630:	9101      	str	r1, [sp, #4]
 801e632:	17d9      	asrs	r1, r3, #31
 801e634:	468c      	mov	ip, r1
 801e636:	9901      	ldr	r1, [sp, #4]
 801e638:	458c      	cmp	ip, r1
 801e63a:	d002      	beq.n	801e642 <arm_add_q31+0x4a>
 801e63c:	17cb      	asrs	r3, r1, #31
 801e63e:	4909      	ldr	r1, [pc, #36]	@ (801e664 <arm_add_q31+0x6c>)
 801e640:	404b      	eors	r3, r1
 801e642:	4659      	mov	r1, fp
 801e644:	508b      	str	r3, [r1, r2]
 801e646:	2301      	movs	r3, #1
 801e648:	425b      	negs	r3, r3
 801e64a:	469c      	mov	ip, r3
 801e64c:	44e0      	add	r8, ip
 801e64e:	4643      	mov	r3, r8
 801e650:	3204      	adds	r2, #4
 801e652:	2b00      	cmp	r3, #0
 801e654:	d1de      	bne.n	801e614 <arm_add_q31+0x1c>
 801e656:	b003      	add	sp, #12
 801e658:	bc3c      	pop	{r2, r3, r4, r5}
 801e65a:	4690      	mov	r8, r2
 801e65c:	4699      	mov	r9, r3
 801e65e:	46a2      	mov	sl, r4
 801e660:	46ab      	mov	fp, r5
 801e662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e664:	7fffffff 	.word	0x7fffffff

0801e668 <atof>:
 801e668:	b510      	push	{r4, lr}
 801e66a:	2100      	movs	r1, #0
 801e66c:	f000 fe12 	bl	801f294 <strtod>
 801e670:	bd10      	pop	{r4, pc}

0801e672 <atoi>:
 801e672:	b510      	push	{r4, lr}
 801e674:	220a      	movs	r2, #10
 801e676:	2100      	movs	r1, #0
 801e678:	f000 fea4 	bl	801f3c4 <strtol>
 801e67c:	bd10      	pop	{r4, pc}
	...

0801e680 <sulp>:
 801e680:	b570      	push	{r4, r5, r6, lr}
 801e682:	0016      	movs	r6, r2
 801e684:	000d      	movs	r5, r1
 801e686:	f003 fcf3 	bl	8022070 <__ulp>
 801e68a:	2e00      	cmp	r6, #0
 801e68c:	d00d      	beq.n	801e6aa <sulp+0x2a>
 801e68e:	236b      	movs	r3, #107	@ 0x6b
 801e690:	006a      	lsls	r2, r5, #1
 801e692:	0d52      	lsrs	r2, r2, #21
 801e694:	1a9b      	subs	r3, r3, r2
 801e696:	2b00      	cmp	r3, #0
 801e698:	dd07      	ble.n	801e6aa <sulp+0x2a>
 801e69a:	2400      	movs	r4, #0
 801e69c:	4a03      	ldr	r2, [pc, #12]	@ (801e6ac <sulp+0x2c>)
 801e69e:	051b      	lsls	r3, r3, #20
 801e6a0:	189d      	adds	r5, r3, r2
 801e6a2:	002b      	movs	r3, r5
 801e6a4:	0022      	movs	r2, r4
 801e6a6:	f7e3 ffc9 	bl	800263c <__aeabi_dmul>
 801e6aa:	bd70      	pop	{r4, r5, r6, pc}
 801e6ac:	3ff00000 	.word	0x3ff00000

0801e6b0 <_strtod_l>:
 801e6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6b2:	b0a3      	sub	sp, #140	@ 0x8c
 801e6b4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	2600      	movs	r6, #0
 801e6ba:	2700      	movs	r7, #0
 801e6bc:	9005      	str	r0, [sp, #20]
 801e6be:	9109      	str	r1, [sp, #36]	@ 0x24
 801e6c0:	921e      	str	r2, [sp, #120]	@ 0x78
 801e6c2:	911d      	str	r1, [sp, #116]	@ 0x74
 801e6c4:	780a      	ldrb	r2, [r1, #0]
 801e6c6:	2a2b      	cmp	r2, #43	@ 0x2b
 801e6c8:	d053      	beq.n	801e772 <_strtod_l+0xc2>
 801e6ca:	d83f      	bhi.n	801e74c <_strtod_l+0x9c>
 801e6cc:	2a0d      	cmp	r2, #13
 801e6ce:	d839      	bhi.n	801e744 <_strtod_l+0x94>
 801e6d0:	2a08      	cmp	r2, #8
 801e6d2:	d839      	bhi.n	801e748 <_strtod_l+0x98>
 801e6d4:	2a00      	cmp	r2, #0
 801e6d6:	d042      	beq.n	801e75e <_strtod_l+0xae>
 801e6d8:	2200      	movs	r2, #0
 801e6da:	9212      	str	r2, [sp, #72]	@ 0x48
 801e6dc:	2100      	movs	r1, #0
 801e6de:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e6e0:	910c      	str	r1, [sp, #48]	@ 0x30
 801e6e2:	782a      	ldrb	r2, [r5, #0]
 801e6e4:	2a30      	cmp	r2, #48	@ 0x30
 801e6e6:	d000      	beq.n	801e6ea <_strtod_l+0x3a>
 801e6e8:	e083      	b.n	801e7f2 <_strtod_l+0x142>
 801e6ea:	786a      	ldrb	r2, [r5, #1]
 801e6ec:	3120      	adds	r1, #32
 801e6ee:	438a      	bics	r2, r1
 801e6f0:	2a58      	cmp	r2, #88	@ 0x58
 801e6f2:	d000      	beq.n	801e6f6 <_strtod_l+0x46>
 801e6f4:	e073      	b.n	801e7de <_strtod_l+0x12e>
 801e6f6:	9302      	str	r3, [sp, #8]
 801e6f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e6fa:	4a95      	ldr	r2, [pc, #596]	@ (801e950 <_strtod_l+0x2a0>)
 801e6fc:	9301      	str	r3, [sp, #4]
 801e6fe:	ab1e      	add	r3, sp, #120	@ 0x78
 801e700:	9300      	str	r3, [sp, #0]
 801e702:	9805      	ldr	r0, [sp, #20]
 801e704:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e706:	a91d      	add	r1, sp, #116	@ 0x74
 801e708:	f002 fd62 	bl	80211d0 <__gethex>
 801e70c:	230f      	movs	r3, #15
 801e70e:	0002      	movs	r2, r0
 801e710:	401a      	ands	r2, r3
 801e712:	0004      	movs	r4, r0
 801e714:	9206      	str	r2, [sp, #24]
 801e716:	4218      	tst	r0, r3
 801e718:	d005      	beq.n	801e726 <_strtod_l+0x76>
 801e71a:	2a06      	cmp	r2, #6
 801e71c:	d12b      	bne.n	801e776 <_strtod_l+0xc6>
 801e71e:	2300      	movs	r3, #0
 801e720:	3501      	adds	r5, #1
 801e722:	951d      	str	r5, [sp, #116]	@ 0x74
 801e724:	9312      	str	r3, [sp, #72]	@ 0x48
 801e726:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d002      	beq.n	801e732 <_strtod_l+0x82>
 801e72c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e72e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e730:	6013      	str	r3, [r2, #0]
 801e732:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e734:	2b00      	cmp	r3, #0
 801e736:	d019      	beq.n	801e76c <_strtod_l+0xbc>
 801e738:	2380      	movs	r3, #128	@ 0x80
 801e73a:	0030      	movs	r0, r6
 801e73c:	061b      	lsls	r3, r3, #24
 801e73e:	18f9      	adds	r1, r7, r3
 801e740:	b023      	add	sp, #140	@ 0x8c
 801e742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e744:	2a20      	cmp	r2, #32
 801e746:	d1c7      	bne.n	801e6d8 <_strtod_l+0x28>
 801e748:	3101      	adds	r1, #1
 801e74a:	e7ba      	b.n	801e6c2 <_strtod_l+0x12>
 801e74c:	2a2d      	cmp	r2, #45	@ 0x2d
 801e74e:	d1c3      	bne.n	801e6d8 <_strtod_l+0x28>
 801e750:	3a2c      	subs	r2, #44	@ 0x2c
 801e752:	9212      	str	r2, [sp, #72]	@ 0x48
 801e754:	1c4a      	adds	r2, r1, #1
 801e756:	921d      	str	r2, [sp, #116]	@ 0x74
 801e758:	784a      	ldrb	r2, [r1, #1]
 801e75a:	2a00      	cmp	r2, #0
 801e75c:	d1be      	bne.n	801e6dc <_strtod_l+0x2c>
 801e75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e760:	931d      	str	r3, [sp, #116]	@ 0x74
 801e762:	2300      	movs	r3, #0
 801e764:	9312      	str	r3, [sp, #72]	@ 0x48
 801e766:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d1df      	bne.n	801e72c <_strtod_l+0x7c>
 801e76c:	0030      	movs	r0, r6
 801e76e:	0039      	movs	r1, r7
 801e770:	e7e6      	b.n	801e740 <_strtod_l+0x90>
 801e772:	2200      	movs	r2, #0
 801e774:	e7ed      	b.n	801e752 <_strtod_l+0xa2>
 801e776:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e778:	2a00      	cmp	r2, #0
 801e77a:	d007      	beq.n	801e78c <_strtod_l+0xdc>
 801e77c:	2135      	movs	r1, #53	@ 0x35
 801e77e:	a820      	add	r0, sp, #128	@ 0x80
 801e780:	f003 fd6c 	bl	802225c <__copybits>
 801e784:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e786:	9805      	ldr	r0, [sp, #20]
 801e788:	f003 f926 	bl	80219d8 <_Bfree>
 801e78c:	9806      	ldr	r0, [sp, #24]
 801e78e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e790:	3801      	subs	r0, #1
 801e792:	2804      	cmp	r0, #4
 801e794:	d806      	bhi.n	801e7a4 <_strtod_l+0xf4>
 801e796:	f7e1 fcf1 	bl	800017c <__gnu_thumb1_case_uqi>
 801e79a:	0312      	.short	0x0312
 801e79c:	1e1c      	.short	0x1e1c
 801e79e:	12          	.byte	0x12
 801e79f:	00          	.byte	0x00
 801e7a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e7a2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e7a4:	05e4      	lsls	r4, r4, #23
 801e7a6:	d502      	bpl.n	801e7ae <_strtod_l+0xfe>
 801e7a8:	2380      	movs	r3, #128	@ 0x80
 801e7aa:	061b      	lsls	r3, r3, #24
 801e7ac:	431f      	orrs	r7, r3
 801e7ae:	4b69      	ldr	r3, [pc, #420]	@ (801e954 <_strtod_l+0x2a4>)
 801e7b0:	423b      	tst	r3, r7
 801e7b2:	d1b8      	bne.n	801e726 <_strtod_l+0x76>
 801e7b4:	f001 fd90 	bl	80202d8 <__errno>
 801e7b8:	2322      	movs	r3, #34	@ 0x22
 801e7ba:	6003      	str	r3, [r0, #0]
 801e7bc:	e7b3      	b.n	801e726 <_strtod_l+0x76>
 801e7be:	4966      	ldr	r1, [pc, #408]	@ (801e958 <_strtod_l+0x2a8>)
 801e7c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e7c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e7c4:	400a      	ands	r2, r1
 801e7c6:	4965      	ldr	r1, [pc, #404]	@ (801e95c <_strtod_l+0x2ac>)
 801e7c8:	185b      	adds	r3, r3, r1
 801e7ca:	051b      	lsls	r3, r3, #20
 801e7cc:	431a      	orrs	r2, r3
 801e7ce:	0017      	movs	r7, r2
 801e7d0:	e7e8      	b.n	801e7a4 <_strtod_l+0xf4>
 801e7d2:	4f60      	ldr	r7, [pc, #384]	@ (801e954 <_strtod_l+0x2a4>)
 801e7d4:	e7e6      	b.n	801e7a4 <_strtod_l+0xf4>
 801e7d6:	2601      	movs	r6, #1
 801e7d8:	4f61      	ldr	r7, [pc, #388]	@ (801e960 <_strtod_l+0x2b0>)
 801e7da:	4276      	negs	r6, r6
 801e7dc:	e7e2      	b.n	801e7a4 <_strtod_l+0xf4>
 801e7de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7e0:	1c5a      	adds	r2, r3, #1
 801e7e2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7e4:	785b      	ldrb	r3, [r3, #1]
 801e7e6:	2b30      	cmp	r3, #48	@ 0x30
 801e7e8:	d0f9      	beq.n	801e7de <_strtod_l+0x12e>
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d09b      	beq.n	801e726 <_strtod_l+0x76>
 801e7ee:	2301      	movs	r3, #1
 801e7f0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e7f2:	2500      	movs	r5, #0
 801e7f4:	220a      	movs	r2, #10
 801e7f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7f8:	950d      	str	r5, [sp, #52]	@ 0x34
 801e7fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e7fc:	9508      	str	r5, [sp, #32]
 801e7fe:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e800:	7804      	ldrb	r4, [r0, #0]
 801e802:	0023      	movs	r3, r4
 801e804:	3b30      	subs	r3, #48	@ 0x30
 801e806:	b2d9      	uxtb	r1, r3
 801e808:	2909      	cmp	r1, #9
 801e80a:	d927      	bls.n	801e85c <_strtod_l+0x1ac>
 801e80c:	2201      	movs	r2, #1
 801e80e:	4955      	ldr	r1, [pc, #340]	@ (801e964 <_strtod_l+0x2b4>)
 801e810:	f001 fcd4 	bl	80201bc <strncmp>
 801e814:	2800      	cmp	r0, #0
 801e816:	d031      	beq.n	801e87c <_strtod_l+0x1cc>
 801e818:	2000      	movs	r0, #0
 801e81a:	0023      	movs	r3, r4
 801e81c:	4684      	mov	ip, r0
 801e81e:	9a08      	ldr	r2, [sp, #32]
 801e820:	900e      	str	r0, [sp, #56]	@ 0x38
 801e822:	9206      	str	r2, [sp, #24]
 801e824:	2220      	movs	r2, #32
 801e826:	0019      	movs	r1, r3
 801e828:	4391      	bics	r1, r2
 801e82a:	000a      	movs	r2, r1
 801e82c:	2100      	movs	r1, #0
 801e82e:	9107      	str	r1, [sp, #28]
 801e830:	2a45      	cmp	r2, #69	@ 0x45
 801e832:	d000      	beq.n	801e836 <_strtod_l+0x186>
 801e834:	e0c0      	b.n	801e9b8 <_strtod_l+0x308>
 801e836:	9b06      	ldr	r3, [sp, #24]
 801e838:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e83a:	4303      	orrs	r3, r0
 801e83c:	4313      	orrs	r3, r2
 801e83e:	428b      	cmp	r3, r1
 801e840:	d08d      	beq.n	801e75e <_strtod_l+0xae>
 801e842:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e844:	9309      	str	r3, [sp, #36]	@ 0x24
 801e846:	3301      	adds	r3, #1
 801e848:	931d      	str	r3, [sp, #116]	@ 0x74
 801e84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e84c:	785b      	ldrb	r3, [r3, #1]
 801e84e:	2b2b      	cmp	r3, #43	@ 0x2b
 801e850:	d070      	beq.n	801e934 <_strtod_l+0x284>
 801e852:	000c      	movs	r4, r1
 801e854:	2b2d      	cmp	r3, #45	@ 0x2d
 801e856:	d173      	bne.n	801e940 <_strtod_l+0x290>
 801e858:	2401      	movs	r4, #1
 801e85a:	e06c      	b.n	801e936 <_strtod_l+0x286>
 801e85c:	9908      	ldr	r1, [sp, #32]
 801e85e:	2908      	cmp	r1, #8
 801e860:	dc09      	bgt.n	801e876 <_strtod_l+0x1c6>
 801e862:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e864:	4351      	muls	r1, r2
 801e866:	185b      	adds	r3, r3, r1
 801e868:	930d      	str	r3, [sp, #52]	@ 0x34
 801e86a:	9b08      	ldr	r3, [sp, #32]
 801e86c:	3001      	adds	r0, #1
 801e86e:	3301      	adds	r3, #1
 801e870:	9308      	str	r3, [sp, #32]
 801e872:	901d      	str	r0, [sp, #116]	@ 0x74
 801e874:	e7c3      	b.n	801e7fe <_strtod_l+0x14e>
 801e876:	4355      	muls	r5, r2
 801e878:	195d      	adds	r5, r3, r5
 801e87a:	e7f6      	b.n	801e86a <_strtod_l+0x1ba>
 801e87c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e87e:	1c5a      	adds	r2, r3, #1
 801e880:	921d      	str	r2, [sp, #116]	@ 0x74
 801e882:	9a08      	ldr	r2, [sp, #32]
 801e884:	785b      	ldrb	r3, [r3, #1]
 801e886:	2a00      	cmp	r2, #0
 801e888:	d03a      	beq.n	801e900 <_strtod_l+0x250>
 801e88a:	900e      	str	r0, [sp, #56]	@ 0x38
 801e88c:	9206      	str	r2, [sp, #24]
 801e88e:	001a      	movs	r2, r3
 801e890:	3a30      	subs	r2, #48	@ 0x30
 801e892:	2a09      	cmp	r2, #9
 801e894:	d912      	bls.n	801e8bc <_strtod_l+0x20c>
 801e896:	2201      	movs	r2, #1
 801e898:	4694      	mov	ip, r2
 801e89a:	e7c3      	b.n	801e824 <_strtod_l+0x174>
 801e89c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e89e:	3001      	adds	r0, #1
 801e8a0:	1c5a      	adds	r2, r3, #1
 801e8a2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8a4:	785b      	ldrb	r3, [r3, #1]
 801e8a6:	2b30      	cmp	r3, #48	@ 0x30
 801e8a8:	d0f8      	beq.n	801e89c <_strtod_l+0x1ec>
 801e8aa:	001a      	movs	r2, r3
 801e8ac:	3a31      	subs	r2, #49	@ 0x31
 801e8ae:	2a08      	cmp	r2, #8
 801e8b0:	d83b      	bhi.n	801e92a <_strtod_l+0x27a>
 801e8b2:	900e      	str	r0, [sp, #56]	@ 0x38
 801e8b4:	2000      	movs	r0, #0
 801e8b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e8b8:	9006      	str	r0, [sp, #24]
 801e8ba:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e8bc:	001a      	movs	r2, r3
 801e8be:	1c41      	adds	r1, r0, #1
 801e8c0:	3a30      	subs	r2, #48	@ 0x30
 801e8c2:	2b30      	cmp	r3, #48	@ 0x30
 801e8c4:	d016      	beq.n	801e8f4 <_strtod_l+0x244>
 801e8c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e8c8:	185b      	adds	r3, r3, r1
 801e8ca:	930e      	str	r3, [sp, #56]	@ 0x38
 801e8cc:	9b06      	ldr	r3, [sp, #24]
 801e8ce:	210a      	movs	r1, #10
 801e8d0:	469c      	mov	ip, r3
 801e8d2:	4484      	add	ip, r0
 801e8d4:	459c      	cmp	ip, r3
 801e8d6:	d115      	bne.n	801e904 <_strtod_l+0x254>
 801e8d8:	9906      	ldr	r1, [sp, #24]
 801e8da:	9b06      	ldr	r3, [sp, #24]
 801e8dc:	3101      	adds	r1, #1
 801e8de:	1809      	adds	r1, r1, r0
 801e8e0:	181b      	adds	r3, r3, r0
 801e8e2:	9106      	str	r1, [sp, #24]
 801e8e4:	2b08      	cmp	r3, #8
 801e8e6:	dc19      	bgt.n	801e91c <_strtod_l+0x26c>
 801e8e8:	230a      	movs	r3, #10
 801e8ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e8ec:	434b      	muls	r3, r1
 801e8ee:	2100      	movs	r1, #0
 801e8f0:	18d3      	adds	r3, r2, r3
 801e8f2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8f6:	0008      	movs	r0, r1
 801e8f8:	1c5a      	adds	r2, r3, #1
 801e8fa:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8fc:	785b      	ldrb	r3, [r3, #1]
 801e8fe:	e7c6      	b.n	801e88e <_strtod_l+0x1de>
 801e900:	9808      	ldr	r0, [sp, #32]
 801e902:	e7d0      	b.n	801e8a6 <_strtod_l+0x1f6>
 801e904:	1c5c      	adds	r4, r3, #1
 801e906:	2b08      	cmp	r3, #8
 801e908:	dc04      	bgt.n	801e914 <_strtod_l+0x264>
 801e90a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e90c:	434b      	muls	r3, r1
 801e90e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e910:	0023      	movs	r3, r4
 801e912:	e7df      	b.n	801e8d4 <_strtod_l+0x224>
 801e914:	2c10      	cmp	r4, #16
 801e916:	dcfb      	bgt.n	801e910 <_strtod_l+0x260>
 801e918:	434d      	muls	r5, r1
 801e91a:	e7f9      	b.n	801e910 <_strtod_l+0x260>
 801e91c:	2100      	movs	r1, #0
 801e91e:	2b0f      	cmp	r3, #15
 801e920:	dce8      	bgt.n	801e8f4 <_strtod_l+0x244>
 801e922:	230a      	movs	r3, #10
 801e924:	435d      	muls	r5, r3
 801e926:	1955      	adds	r5, r2, r5
 801e928:	e7e4      	b.n	801e8f4 <_strtod_l+0x244>
 801e92a:	2200      	movs	r2, #0
 801e92c:	920e      	str	r2, [sp, #56]	@ 0x38
 801e92e:	9206      	str	r2, [sp, #24]
 801e930:	3201      	adds	r2, #1
 801e932:	e7b1      	b.n	801e898 <_strtod_l+0x1e8>
 801e934:	2400      	movs	r4, #0
 801e936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e938:	3302      	adds	r3, #2
 801e93a:	931d      	str	r3, [sp, #116]	@ 0x74
 801e93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e93e:	789b      	ldrb	r3, [r3, #2]
 801e940:	001a      	movs	r2, r3
 801e942:	3a30      	subs	r2, #48	@ 0x30
 801e944:	2a09      	cmp	r2, #9
 801e946:	d913      	bls.n	801e970 <_strtod_l+0x2c0>
 801e948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e94a:	921d      	str	r2, [sp, #116]	@ 0x74
 801e94c:	2200      	movs	r2, #0
 801e94e:	e032      	b.n	801e9b6 <_strtod_l+0x306>
 801e950:	08025b90 	.word	0x08025b90
 801e954:	7ff00000 	.word	0x7ff00000
 801e958:	ffefffff 	.word	0xffefffff
 801e95c:	00000433 	.word	0x00000433
 801e960:	7fffffff 	.word	0x7fffffff
 801e964:	08025b78 	.word	0x08025b78
 801e968:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e96a:	1c5a      	adds	r2, r3, #1
 801e96c:	921d      	str	r2, [sp, #116]	@ 0x74
 801e96e:	785b      	ldrb	r3, [r3, #1]
 801e970:	2b30      	cmp	r3, #48	@ 0x30
 801e972:	d0f9      	beq.n	801e968 <_strtod_l+0x2b8>
 801e974:	2200      	movs	r2, #0
 801e976:	9207      	str	r2, [sp, #28]
 801e978:	001a      	movs	r2, r3
 801e97a:	3a31      	subs	r2, #49	@ 0x31
 801e97c:	2a08      	cmp	r2, #8
 801e97e:	d81b      	bhi.n	801e9b8 <_strtod_l+0x308>
 801e980:	3b30      	subs	r3, #48	@ 0x30
 801e982:	9310      	str	r3, [sp, #64]	@ 0x40
 801e984:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e986:	9307      	str	r3, [sp, #28]
 801e988:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e98a:	1c59      	adds	r1, r3, #1
 801e98c:	911d      	str	r1, [sp, #116]	@ 0x74
 801e98e:	785b      	ldrb	r3, [r3, #1]
 801e990:	001a      	movs	r2, r3
 801e992:	3a30      	subs	r2, #48	@ 0x30
 801e994:	2a09      	cmp	r2, #9
 801e996:	d93a      	bls.n	801ea0e <_strtod_l+0x35e>
 801e998:	9a07      	ldr	r2, [sp, #28]
 801e99a:	1a8a      	subs	r2, r1, r2
 801e99c:	49b4      	ldr	r1, [pc, #720]	@ (801ec70 <_strtod_l+0x5c0>)
 801e99e:	9107      	str	r1, [sp, #28]
 801e9a0:	2a08      	cmp	r2, #8
 801e9a2:	dc04      	bgt.n	801e9ae <_strtod_l+0x2fe>
 801e9a4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e9a6:	9207      	str	r2, [sp, #28]
 801e9a8:	428a      	cmp	r2, r1
 801e9aa:	dd00      	ble.n	801e9ae <_strtod_l+0x2fe>
 801e9ac:	9107      	str	r1, [sp, #28]
 801e9ae:	2c00      	cmp	r4, #0
 801e9b0:	d002      	beq.n	801e9b8 <_strtod_l+0x308>
 801e9b2:	9a07      	ldr	r2, [sp, #28]
 801e9b4:	4252      	negs	r2, r2
 801e9b6:	9207      	str	r2, [sp, #28]
 801e9b8:	9a06      	ldr	r2, [sp, #24]
 801e9ba:	2a00      	cmp	r2, #0
 801e9bc:	d14d      	bne.n	801ea5a <_strtod_l+0x3aa>
 801e9be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e9c0:	4310      	orrs	r0, r2
 801e9c2:	d000      	beq.n	801e9c6 <_strtod_l+0x316>
 801e9c4:	e6af      	b.n	801e726 <_strtod_l+0x76>
 801e9c6:	4662      	mov	r2, ip
 801e9c8:	2a00      	cmp	r2, #0
 801e9ca:	d000      	beq.n	801e9ce <_strtod_l+0x31e>
 801e9cc:	e6c7      	b.n	801e75e <_strtod_l+0xae>
 801e9ce:	2b69      	cmp	r3, #105	@ 0x69
 801e9d0:	d027      	beq.n	801ea22 <_strtod_l+0x372>
 801e9d2:	dc23      	bgt.n	801ea1c <_strtod_l+0x36c>
 801e9d4:	2b49      	cmp	r3, #73	@ 0x49
 801e9d6:	d024      	beq.n	801ea22 <_strtod_l+0x372>
 801e9d8:	2b4e      	cmp	r3, #78	@ 0x4e
 801e9da:	d000      	beq.n	801e9de <_strtod_l+0x32e>
 801e9dc:	e6bf      	b.n	801e75e <_strtod_l+0xae>
 801e9de:	49a5      	ldr	r1, [pc, #660]	@ (801ec74 <_strtod_l+0x5c4>)
 801e9e0:	a81d      	add	r0, sp, #116	@ 0x74
 801e9e2:	f002 fe2b 	bl	802163c <__match>
 801e9e6:	2800      	cmp	r0, #0
 801e9e8:	d100      	bne.n	801e9ec <_strtod_l+0x33c>
 801e9ea:	e6b8      	b.n	801e75e <_strtod_l+0xae>
 801e9ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9ee:	781b      	ldrb	r3, [r3, #0]
 801e9f0:	2b28      	cmp	r3, #40	@ 0x28
 801e9f2:	d12c      	bne.n	801ea4e <_strtod_l+0x39e>
 801e9f4:	49a0      	ldr	r1, [pc, #640]	@ (801ec78 <_strtod_l+0x5c8>)
 801e9f6:	aa20      	add	r2, sp, #128	@ 0x80
 801e9f8:	a81d      	add	r0, sp, #116	@ 0x74
 801e9fa:	f002 fe33 	bl	8021664 <__hexnan>
 801e9fe:	2805      	cmp	r0, #5
 801ea00:	d125      	bne.n	801ea4e <_strtod_l+0x39e>
 801ea02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ea04:	4a9d      	ldr	r2, [pc, #628]	@ (801ec7c <_strtod_l+0x5cc>)
 801ea06:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ea08:	431a      	orrs	r2, r3
 801ea0a:	0017      	movs	r7, r2
 801ea0c:	e68b      	b.n	801e726 <_strtod_l+0x76>
 801ea0e:	220a      	movs	r2, #10
 801ea10:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ea12:	434a      	muls	r2, r1
 801ea14:	18d2      	adds	r2, r2, r3
 801ea16:	3a30      	subs	r2, #48	@ 0x30
 801ea18:	9210      	str	r2, [sp, #64]	@ 0x40
 801ea1a:	e7b5      	b.n	801e988 <_strtod_l+0x2d8>
 801ea1c:	2b6e      	cmp	r3, #110	@ 0x6e
 801ea1e:	d0de      	beq.n	801e9de <_strtod_l+0x32e>
 801ea20:	e69d      	b.n	801e75e <_strtod_l+0xae>
 801ea22:	4997      	ldr	r1, [pc, #604]	@ (801ec80 <_strtod_l+0x5d0>)
 801ea24:	a81d      	add	r0, sp, #116	@ 0x74
 801ea26:	f002 fe09 	bl	802163c <__match>
 801ea2a:	2800      	cmp	r0, #0
 801ea2c:	d100      	bne.n	801ea30 <_strtod_l+0x380>
 801ea2e:	e696      	b.n	801e75e <_strtod_l+0xae>
 801ea30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea32:	4994      	ldr	r1, [pc, #592]	@ (801ec84 <_strtod_l+0x5d4>)
 801ea34:	3b01      	subs	r3, #1
 801ea36:	a81d      	add	r0, sp, #116	@ 0x74
 801ea38:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea3a:	f002 fdff 	bl	802163c <__match>
 801ea3e:	2800      	cmp	r0, #0
 801ea40:	d102      	bne.n	801ea48 <_strtod_l+0x398>
 801ea42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea44:	3301      	adds	r3, #1
 801ea46:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea48:	2600      	movs	r6, #0
 801ea4a:	4f8c      	ldr	r7, [pc, #560]	@ (801ec7c <_strtod_l+0x5cc>)
 801ea4c:	e66b      	b.n	801e726 <_strtod_l+0x76>
 801ea4e:	488e      	ldr	r0, [pc, #568]	@ (801ec88 <_strtod_l+0x5d8>)
 801ea50:	f001 fc84 	bl	802035c <nan>
 801ea54:	0006      	movs	r6, r0
 801ea56:	000f      	movs	r7, r1
 801ea58:	e665      	b.n	801e726 <_strtod_l+0x76>
 801ea5a:	9b07      	ldr	r3, [sp, #28]
 801ea5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea5e:	1a9b      	subs	r3, r3, r2
 801ea60:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea62:	9b08      	ldr	r3, [sp, #32]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d101      	bne.n	801ea6c <_strtod_l+0x3bc>
 801ea68:	9b06      	ldr	r3, [sp, #24]
 801ea6a:	9308      	str	r3, [sp, #32]
 801ea6c:	9c06      	ldr	r4, [sp, #24]
 801ea6e:	2c10      	cmp	r4, #16
 801ea70:	dd00      	ble.n	801ea74 <_strtod_l+0x3c4>
 801ea72:	2410      	movs	r4, #16
 801ea74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ea76:	f7e4 fcd1 	bl	800341c <__aeabi_ui2d>
 801ea7a:	9b06      	ldr	r3, [sp, #24]
 801ea7c:	0006      	movs	r6, r0
 801ea7e:	000f      	movs	r7, r1
 801ea80:	2b09      	cmp	r3, #9
 801ea82:	dc13      	bgt.n	801eaac <_strtod_l+0x3fc>
 801ea84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	d100      	bne.n	801ea8c <_strtod_l+0x3dc>
 801ea8a:	e64c      	b.n	801e726 <_strtod_l+0x76>
 801ea8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	dc00      	bgt.n	801ea94 <_strtod_l+0x3e4>
 801ea92:	e07e      	b.n	801eb92 <_strtod_l+0x4e2>
 801ea94:	2b16      	cmp	r3, #22
 801ea96:	dc63      	bgt.n	801eb60 <_strtod_l+0x4b0>
 801ea98:	497c      	ldr	r1, [pc, #496]	@ (801ec8c <_strtod_l+0x5dc>)
 801ea9a:	00db      	lsls	r3, r3, #3
 801ea9c:	18c9      	adds	r1, r1, r3
 801ea9e:	0032      	movs	r2, r6
 801eaa0:	6808      	ldr	r0, [r1, #0]
 801eaa2:	6849      	ldr	r1, [r1, #4]
 801eaa4:	003b      	movs	r3, r7
 801eaa6:	f7e3 fdc9 	bl	800263c <__aeabi_dmul>
 801eaaa:	e7d3      	b.n	801ea54 <_strtod_l+0x3a4>
 801eaac:	0022      	movs	r2, r4
 801eaae:	4b77      	ldr	r3, [pc, #476]	@ (801ec8c <_strtod_l+0x5dc>)
 801eab0:	3a09      	subs	r2, #9
 801eab2:	00d2      	lsls	r2, r2, #3
 801eab4:	189b      	adds	r3, r3, r2
 801eab6:	681a      	ldr	r2, [r3, #0]
 801eab8:	685b      	ldr	r3, [r3, #4]
 801eaba:	f7e3 fdbf 	bl	800263c <__aeabi_dmul>
 801eabe:	0006      	movs	r6, r0
 801eac0:	0028      	movs	r0, r5
 801eac2:	000f      	movs	r7, r1
 801eac4:	f7e4 fcaa 	bl	800341c <__aeabi_ui2d>
 801eac8:	000b      	movs	r3, r1
 801eaca:	0002      	movs	r2, r0
 801eacc:	0039      	movs	r1, r7
 801eace:	0030      	movs	r0, r6
 801ead0:	f7e2 fe0c 	bl	80016ec <__aeabi_dadd>
 801ead4:	9b06      	ldr	r3, [sp, #24]
 801ead6:	0006      	movs	r6, r0
 801ead8:	000f      	movs	r7, r1
 801eada:	2b0f      	cmp	r3, #15
 801eadc:	ddd2      	ble.n	801ea84 <_strtod_l+0x3d4>
 801eade:	9b06      	ldr	r3, [sp, #24]
 801eae0:	1b1c      	subs	r4, r3, r4
 801eae2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eae4:	18e4      	adds	r4, r4, r3
 801eae6:	2c00      	cmp	r4, #0
 801eae8:	dc00      	bgt.n	801eaec <_strtod_l+0x43c>
 801eaea:	e09b      	b.n	801ec24 <_strtod_l+0x574>
 801eaec:	220f      	movs	r2, #15
 801eaee:	0023      	movs	r3, r4
 801eaf0:	4013      	ands	r3, r2
 801eaf2:	4214      	tst	r4, r2
 801eaf4:	d00a      	beq.n	801eb0c <_strtod_l+0x45c>
 801eaf6:	4965      	ldr	r1, [pc, #404]	@ (801ec8c <_strtod_l+0x5dc>)
 801eaf8:	00db      	lsls	r3, r3, #3
 801eafa:	18c9      	adds	r1, r1, r3
 801eafc:	0032      	movs	r2, r6
 801eafe:	6808      	ldr	r0, [r1, #0]
 801eb00:	6849      	ldr	r1, [r1, #4]
 801eb02:	003b      	movs	r3, r7
 801eb04:	f7e3 fd9a 	bl	800263c <__aeabi_dmul>
 801eb08:	0006      	movs	r6, r0
 801eb0a:	000f      	movs	r7, r1
 801eb0c:	230f      	movs	r3, #15
 801eb0e:	439c      	bics	r4, r3
 801eb10:	d073      	beq.n	801ebfa <_strtod_l+0x54a>
 801eb12:	3326      	adds	r3, #38	@ 0x26
 801eb14:	33ff      	adds	r3, #255	@ 0xff
 801eb16:	429c      	cmp	r4, r3
 801eb18:	dd4b      	ble.n	801ebb2 <_strtod_l+0x502>
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	9306      	str	r3, [sp, #24]
 801eb1e:	9307      	str	r3, [sp, #28]
 801eb20:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb22:	9308      	str	r3, [sp, #32]
 801eb24:	2322      	movs	r3, #34	@ 0x22
 801eb26:	2600      	movs	r6, #0
 801eb28:	9a05      	ldr	r2, [sp, #20]
 801eb2a:	4f54      	ldr	r7, [pc, #336]	@ (801ec7c <_strtod_l+0x5cc>)
 801eb2c:	6013      	str	r3, [r2, #0]
 801eb2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb30:	42b3      	cmp	r3, r6
 801eb32:	d100      	bne.n	801eb36 <_strtod_l+0x486>
 801eb34:	e5f7      	b.n	801e726 <_strtod_l+0x76>
 801eb36:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eb38:	9805      	ldr	r0, [sp, #20]
 801eb3a:	f002 ff4d 	bl	80219d8 <_Bfree>
 801eb3e:	9908      	ldr	r1, [sp, #32]
 801eb40:	9805      	ldr	r0, [sp, #20]
 801eb42:	f002 ff49 	bl	80219d8 <_Bfree>
 801eb46:	9907      	ldr	r1, [sp, #28]
 801eb48:	9805      	ldr	r0, [sp, #20]
 801eb4a:	f002 ff45 	bl	80219d8 <_Bfree>
 801eb4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801eb50:	9805      	ldr	r0, [sp, #20]
 801eb52:	f002 ff41 	bl	80219d8 <_Bfree>
 801eb56:	9906      	ldr	r1, [sp, #24]
 801eb58:	9805      	ldr	r0, [sp, #20]
 801eb5a:	f002 ff3d 	bl	80219d8 <_Bfree>
 801eb5e:	e5e2      	b.n	801e726 <_strtod_l+0x76>
 801eb60:	2325      	movs	r3, #37	@ 0x25
 801eb62:	9a06      	ldr	r2, [sp, #24]
 801eb64:	1a9b      	subs	r3, r3, r2
 801eb66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb68:	4293      	cmp	r3, r2
 801eb6a:	dbb8      	blt.n	801eade <_strtod_l+0x42e>
 801eb6c:	240f      	movs	r4, #15
 801eb6e:	9b06      	ldr	r3, [sp, #24]
 801eb70:	4d46      	ldr	r5, [pc, #280]	@ (801ec8c <_strtod_l+0x5dc>)
 801eb72:	1ae4      	subs	r4, r4, r3
 801eb74:	00e1      	lsls	r1, r4, #3
 801eb76:	1869      	adds	r1, r5, r1
 801eb78:	0032      	movs	r2, r6
 801eb7a:	6808      	ldr	r0, [r1, #0]
 801eb7c:	6849      	ldr	r1, [r1, #4]
 801eb7e:	003b      	movs	r3, r7
 801eb80:	f7e3 fd5c 	bl	800263c <__aeabi_dmul>
 801eb84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb86:	1b1c      	subs	r4, r3, r4
 801eb88:	00e4      	lsls	r4, r4, #3
 801eb8a:	192d      	adds	r5, r5, r4
 801eb8c:	682a      	ldr	r2, [r5, #0]
 801eb8e:	686b      	ldr	r3, [r5, #4]
 801eb90:	e789      	b.n	801eaa6 <_strtod_l+0x3f6>
 801eb92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb94:	3316      	adds	r3, #22
 801eb96:	dba2      	blt.n	801eade <_strtod_l+0x42e>
 801eb98:	9907      	ldr	r1, [sp, #28]
 801eb9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb9c:	4b3b      	ldr	r3, [pc, #236]	@ (801ec8c <_strtod_l+0x5dc>)
 801eb9e:	1a52      	subs	r2, r2, r1
 801eba0:	00d2      	lsls	r2, r2, #3
 801eba2:	189b      	adds	r3, r3, r2
 801eba4:	0030      	movs	r0, r6
 801eba6:	681a      	ldr	r2, [r3, #0]
 801eba8:	685b      	ldr	r3, [r3, #4]
 801ebaa:	0039      	movs	r1, r7
 801ebac:	f7e3 f902 	bl	8001db4 <__aeabi_ddiv>
 801ebb0:	e750      	b.n	801ea54 <_strtod_l+0x3a4>
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	0030      	movs	r0, r6
 801ebb6:	0039      	movs	r1, r7
 801ebb8:	4d35      	ldr	r5, [pc, #212]	@ (801ec90 <_strtod_l+0x5e0>)
 801ebba:	1124      	asrs	r4, r4, #4
 801ebbc:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebbe:	2c01      	cmp	r4, #1
 801ebc0:	dc1e      	bgt.n	801ec00 <_strtod_l+0x550>
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d001      	beq.n	801ebca <_strtod_l+0x51a>
 801ebc6:	0006      	movs	r6, r0
 801ebc8:	000f      	movs	r7, r1
 801ebca:	4b32      	ldr	r3, [pc, #200]	@ (801ec94 <_strtod_l+0x5e4>)
 801ebcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ebce:	18ff      	adds	r7, r7, r3
 801ebd0:	4b2f      	ldr	r3, [pc, #188]	@ (801ec90 <_strtod_l+0x5e0>)
 801ebd2:	00d5      	lsls	r5, r2, #3
 801ebd4:	195d      	adds	r5, r3, r5
 801ebd6:	0032      	movs	r2, r6
 801ebd8:	6828      	ldr	r0, [r5, #0]
 801ebda:	6869      	ldr	r1, [r5, #4]
 801ebdc:	003b      	movs	r3, r7
 801ebde:	f7e3 fd2d 	bl	800263c <__aeabi_dmul>
 801ebe2:	4b26      	ldr	r3, [pc, #152]	@ (801ec7c <_strtod_l+0x5cc>)
 801ebe4:	4a2c      	ldr	r2, [pc, #176]	@ (801ec98 <_strtod_l+0x5e8>)
 801ebe6:	0006      	movs	r6, r0
 801ebe8:	400b      	ands	r3, r1
 801ebea:	4293      	cmp	r3, r2
 801ebec:	d895      	bhi.n	801eb1a <_strtod_l+0x46a>
 801ebee:	4a2b      	ldr	r2, [pc, #172]	@ (801ec9c <_strtod_l+0x5ec>)
 801ebf0:	4293      	cmp	r3, r2
 801ebf2:	d913      	bls.n	801ec1c <_strtod_l+0x56c>
 801ebf4:	2601      	movs	r6, #1
 801ebf6:	4f2a      	ldr	r7, [pc, #168]	@ (801eca0 <_strtod_l+0x5f0>)
 801ebf8:	4276      	negs	r6, r6
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebfe:	e086      	b.n	801ed0e <_strtod_l+0x65e>
 801ec00:	2201      	movs	r2, #1
 801ec02:	4214      	tst	r4, r2
 801ec04:	d004      	beq.n	801ec10 <_strtod_l+0x560>
 801ec06:	682a      	ldr	r2, [r5, #0]
 801ec08:	686b      	ldr	r3, [r5, #4]
 801ec0a:	f7e3 fd17 	bl	800263c <__aeabi_dmul>
 801ec0e:	2301      	movs	r3, #1
 801ec10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec12:	1064      	asrs	r4, r4, #1
 801ec14:	3201      	adds	r2, #1
 801ec16:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec18:	3508      	adds	r5, #8
 801ec1a:	e7d0      	b.n	801ebbe <_strtod_l+0x50e>
 801ec1c:	23d4      	movs	r3, #212	@ 0xd4
 801ec1e:	049b      	lsls	r3, r3, #18
 801ec20:	18cf      	adds	r7, r1, r3
 801ec22:	e7ea      	b.n	801ebfa <_strtod_l+0x54a>
 801ec24:	2c00      	cmp	r4, #0
 801ec26:	d0e8      	beq.n	801ebfa <_strtod_l+0x54a>
 801ec28:	4264      	negs	r4, r4
 801ec2a:	230f      	movs	r3, #15
 801ec2c:	0022      	movs	r2, r4
 801ec2e:	401a      	ands	r2, r3
 801ec30:	421c      	tst	r4, r3
 801ec32:	d00a      	beq.n	801ec4a <_strtod_l+0x59a>
 801ec34:	4b15      	ldr	r3, [pc, #84]	@ (801ec8c <_strtod_l+0x5dc>)
 801ec36:	00d2      	lsls	r2, r2, #3
 801ec38:	189b      	adds	r3, r3, r2
 801ec3a:	0030      	movs	r0, r6
 801ec3c:	681a      	ldr	r2, [r3, #0]
 801ec3e:	685b      	ldr	r3, [r3, #4]
 801ec40:	0039      	movs	r1, r7
 801ec42:	f7e3 f8b7 	bl	8001db4 <__aeabi_ddiv>
 801ec46:	0006      	movs	r6, r0
 801ec48:	000f      	movs	r7, r1
 801ec4a:	1124      	asrs	r4, r4, #4
 801ec4c:	d0d5      	beq.n	801ebfa <_strtod_l+0x54a>
 801ec4e:	2c1f      	cmp	r4, #31
 801ec50:	dd28      	ble.n	801eca4 <_strtod_l+0x5f4>
 801ec52:	2300      	movs	r3, #0
 801ec54:	9306      	str	r3, [sp, #24]
 801ec56:	9307      	str	r3, [sp, #28]
 801ec58:	930d      	str	r3, [sp, #52]	@ 0x34
 801ec5a:	9308      	str	r3, [sp, #32]
 801ec5c:	2322      	movs	r3, #34	@ 0x22
 801ec5e:	9a05      	ldr	r2, [sp, #20]
 801ec60:	2600      	movs	r6, #0
 801ec62:	6013      	str	r3, [r2, #0]
 801ec64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec66:	2700      	movs	r7, #0
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d000      	beq.n	801ec6e <_strtod_l+0x5be>
 801ec6c:	e763      	b.n	801eb36 <_strtod_l+0x486>
 801ec6e:	e55a      	b.n	801e726 <_strtod_l+0x76>
 801ec70:	00004e1f 	.word	0x00004e1f
 801ec74:	08025cde 	.word	0x08025cde
 801ec78:	08025b7c 	.word	0x08025b7c
 801ec7c:	7ff00000 	.word	0x7ff00000
 801ec80:	08025cd6 	.word	0x08025cd6
 801ec84:	08025d10 	.word	0x08025d10
 801ec88:	08025f9c 	.word	0x08025f9c
 801ec8c:	08025e88 	.word	0x08025e88
 801ec90:	08025e60 	.word	0x08025e60
 801ec94:	fcb00000 	.word	0xfcb00000
 801ec98:	7ca00000 	.word	0x7ca00000
 801ec9c:	7c900000 	.word	0x7c900000
 801eca0:	7fefffff 	.word	0x7fefffff
 801eca4:	2310      	movs	r3, #16
 801eca6:	0022      	movs	r2, r4
 801eca8:	401a      	ands	r2, r3
 801ecaa:	9209      	str	r2, [sp, #36]	@ 0x24
 801ecac:	421c      	tst	r4, r3
 801ecae:	d001      	beq.n	801ecb4 <_strtod_l+0x604>
 801ecb0:	335a      	adds	r3, #90	@ 0x5a
 801ecb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecb4:	0030      	movs	r0, r6
 801ecb6:	0039      	movs	r1, r7
 801ecb8:	2300      	movs	r3, #0
 801ecba:	4dbf      	ldr	r5, [pc, #764]	@ (801efb8 <_strtod_l+0x908>)
 801ecbc:	2201      	movs	r2, #1
 801ecbe:	4214      	tst	r4, r2
 801ecc0:	d004      	beq.n	801eccc <_strtod_l+0x61c>
 801ecc2:	682a      	ldr	r2, [r5, #0]
 801ecc4:	686b      	ldr	r3, [r5, #4]
 801ecc6:	f7e3 fcb9 	bl	800263c <__aeabi_dmul>
 801ecca:	2301      	movs	r3, #1
 801eccc:	1064      	asrs	r4, r4, #1
 801ecce:	3508      	adds	r5, #8
 801ecd0:	2c00      	cmp	r4, #0
 801ecd2:	d1f3      	bne.n	801ecbc <_strtod_l+0x60c>
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d001      	beq.n	801ecdc <_strtod_l+0x62c>
 801ecd8:	0006      	movs	r6, r0
 801ecda:	000f      	movs	r7, r1
 801ecdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d00d      	beq.n	801ecfe <_strtod_l+0x64e>
 801ece2:	236b      	movs	r3, #107	@ 0x6b
 801ece4:	007a      	lsls	r2, r7, #1
 801ece6:	0d52      	lsrs	r2, r2, #21
 801ece8:	0039      	movs	r1, r7
 801ecea:	1a9b      	subs	r3, r3, r2
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	dd06      	ble.n	801ecfe <_strtod_l+0x64e>
 801ecf0:	2b1f      	cmp	r3, #31
 801ecf2:	dd5a      	ble.n	801edaa <_strtod_l+0x6fa>
 801ecf4:	2600      	movs	r6, #0
 801ecf6:	2b34      	cmp	r3, #52	@ 0x34
 801ecf8:	dd50      	ble.n	801ed9c <_strtod_l+0x6ec>
 801ecfa:	27dc      	movs	r7, #220	@ 0xdc
 801ecfc:	04bf      	lsls	r7, r7, #18
 801ecfe:	2200      	movs	r2, #0
 801ed00:	2300      	movs	r3, #0
 801ed02:	0030      	movs	r0, r6
 801ed04:	0039      	movs	r1, r7
 801ed06:	f7e1 fbd3 	bl	80004b0 <__aeabi_dcmpeq>
 801ed0a:	2800      	cmp	r0, #0
 801ed0c:	d1a1      	bne.n	801ec52 <_strtod_l+0x5a2>
 801ed0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed10:	9a08      	ldr	r2, [sp, #32]
 801ed12:	9300      	str	r3, [sp, #0]
 801ed14:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed16:	9b06      	ldr	r3, [sp, #24]
 801ed18:	9805      	ldr	r0, [sp, #20]
 801ed1a:	f002 fec5 	bl	8021aa8 <__s2b>
 801ed1e:	900d      	str	r0, [sp, #52]	@ 0x34
 801ed20:	2800      	cmp	r0, #0
 801ed22:	d100      	bne.n	801ed26 <_strtod_l+0x676>
 801ed24:	e6f9      	b.n	801eb1a <_strtod_l+0x46a>
 801ed26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed28:	9907      	ldr	r1, [sp, #28]
 801ed2a:	17da      	asrs	r2, r3, #31
 801ed2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed2e:	1a5b      	subs	r3, r3, r1
 801ed30:	401a      	ands	r2, r3
 801ed32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed34:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ed36:	43db      	mvns	r3, r3
 801ed38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed3a:	17db      	asrs	r3, r3, #31
 801ed3c:	401a      	ands	r2, r3
 801ed3e:	2300      	movs	r3, #0
 801ed40:	921a      	str	r2, [sp, #104]	@ 0x68
 801ed42:	9306      	str	r3, [sp, #24]
 801ed44:	9307      	str	r3, [sp, #28]
 801ed46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed48:	9805      	ldr	r0, [sp, #20]
 801ed4a:	6859      	ldr	r1, [r3, #4]
 801ed4c:	f002 fe00 	bl	8021950 <_Balloc>
 801ed50:	9008      	str	r0, [sp, #32]
 801ed52:	2800      	cmp	r0, #0
 801ed54:	d100      	bne.n	801ed58 <_strtod_l+0x6a8>
 801ed56:	e6e5      	b.n	801eb24 <_strtod_l+0x474>
 801ed58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed5a:	300c      	adds	r0, #12
 801ed5c:	0019      	movs	r1, r3
 801ed5e:	691a      	ldr	r2, [r3, #16]
 801ed60:	310c      	adds	r1, #12
 801ed62:	3202      	adds	r2, #2
 801ed64:	0092      	lsls	r2, r2, #2
 801ed66:	f001 faef 	bl	8020348 <memcpy>
 801ed6a:	ab20      	add	r3, sp, #128	@ 0x80
 801ed6c:	9301      	str	r3, [sp, #4]
 801ed6e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ed70:	9300      	str	r3, [sp, #0]
 801ed72:	0032      	movs	r2, r6
 801ed74:	003b      	movs	r3, r7
 801ed76:	9805      	ldr	r0, [sp, #20]
 801ed78:	9610      	str	r6, [sp, #64]	@ 0x40
 801ed7a:	9711      	str	r7, [sp, #68]	@ 0x44
 801ed7c:	f003 f9e4 	bl	8022148 <__d2b>
 801ed80:	901e      	str	r0, [sp, #120]	@ 0x78
 801ed82:	2800      	cmp	r0, #0
 801ed84:	d100      	bne.n	801ed88 <_strtod_l+0x6d8>
 801ed86:	e6cd      	b.n	801eb24 <_strtod_l+0x474>
 801ed88:	2101      	movs	r1, #1
 801ed8a:	9805      	ldr	r0, [sp, #20]
 801ed8c:	f002 ff28 	bl	8021be0 <__i2b>
 801ed90:	9007      	str	r0, [sp, #28]
 801ed92:	2800      	cmp	r0, #0
 801ed94:	d10e      	bne.n	801edb4 <_strtod_l+0x704>
 801ed96:	2300      	movs	r3, #0
 801ed98:	9307      	str	r3, [sp, #28]
 801ed9a:	e6c3      	b.n	801eb24 <_strtod_l+0x474>
 801ed9c:	234b      	movs	r3, #75	@ 0x4b
 801ed9e:	1a9a      	subs	r2, r3, r2
 801eda0:	3b4c      	subs	r3, #76	@ 0x4c
 801eda2:	4093      	lsls	r3, r2
 801eda4:	4019      	ands	r1, r3
 801eda6:	000f      	movs	r7, r1
 801eda8:	e7a9      	b.n	801ecfe <_strtod_l+0x64e>
 801edaa:	2201      	movs	r2, #1
 801edac:	4252      	negs	r2, r2
 801edae:	409a      	lsls	r2, r3
 801edb0:	4016      	ands	r6, r2
 801edb2:	e7a4      	b.n	801ecfe <_strtod_l+0x64e>
 801edb4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801edb6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801edb8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801edba:	1ad4      	subs	r4, r2, r3
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	db01      	blt.n	801edc4 <_strtod_l+0x714>
 801edc0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801edc2:	195d      	adds	r5, r3, r5
 801edc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801edc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801edc8:	1a5b      	subs	r3, r3, r1
 801edca:	2136      	movs	r1, #54	@ 0x36
 801edcc:	189b      	adds	r3, r3, r2
 801edce:	1a8a      	subs	r2, r1, r2
 801edd0:	497a      	ldr	r1, [pc, #488]	@ (801efbc <_strtod_l+0x90c>)
 801edd2:	2001      	movs	r0, #1
 801edd4:	468c      	mov	ip, r1
 801edd6:	2100      	movs	r1, #0
 801edd8:	3b01      	subs	r3, #1
 801edda:	9116      	str	r1, [sp, #88]	@ 0x58
 801eddc:	9014      	str	r0, [sp, #80]	@ 0x50
 801edde:	4563      	cmp	r3, ip
 801ede0:	da06      	bge.n	801edf0 <_strtod_l+0x740>
 801ede2:	4661      	mov	r1, ip
 801ede4:	1ac9      	subs	r1, r1, r3
 801ede6:	1a52      	subs	r2, r2, r1
 801ede8:	291f      	cmp	r1, #31
 801edea:	dc3f      	bgt.n	801ee6c <_strtod_l+0x7bc>
 801edec:	4088      	lsls	r0, r1
 801edee:	9014      	str	r0, [sp, #80]	@ 0x50
 801edf0:	18ab      	adds	r3, r5, r2
 801edf2:	930e      	str	r3, [sp, #56]	@ 0x38
 801edf4:	18a4      	adds	r4, r4, r2
 801edf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801edfa:	191c      	adds	r4, r3, r4
 801edfc:	002b      	movs	r3, r5
 801edfe:	4295      	cmp	r5, r2
 801ee00:	dd00      	ble.n	801ee04 <_strtod_l+0x754>
 801ee02:	0013      	movs	r3, r2
 801ee04:	42a3      	cmp	r3, r4
 801ee06:	dd00      	ble.n	801ee0a <_strtod_l+0x75a>
 801ee08:	0023      	movs	r3, r4
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	dd04      	ble.n	801ee18 <_strtod_l+0x768>
 801ee0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee10:	1ae4      	subs	r4, r4, r3
 801ee12:	1ad2      	subs	r2, r2, r3
 801ee14:	920e      	str	r2, [sp, #56]	@ 0x38
 801ee16:	1aed      	subs	r5, r5, r3
 801ee18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	dd16      	ble.n	801ee4c <_strtod_l+0x79c>
 801ee1e:	001a      	movs	r2, r3
 801ee20:	9907      	ldr	r1, [sp, #28]
 801ee22:	9805      	ldr	r0, [sp, #20]
 801ee24:	f002 ffa6 	bl	8021d74 <__pow5mult>
 801ee28:	9007      	str	r0, [sp, #28]
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	d0b3      	beq.n	801ed96 <_strtod_l+0x6e6>
 801ee2e:	0001      	movs	r1, r0
 801ee30:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ee32:	9805      	ldr	r0, [sp, #20]
 801ee34:	f002 feec 	bl	8021c10 <__multiply>
 801ee38:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ee3a:	2800      	cmp	r0, #0
 801ee3c:	d100      	bne.n	801ee40 <_strtod_l+0x790>
 801ee3e:	e671      	b.n	801eb24 <_strtod_l+0x474>
 801ee40:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee42:	9805      	ldr	r0, [sp, #20]
 801ee44:	f002 fdc8 	bl	80219d8 <_Bfree>
 801ee48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee4a:	931e      	str	r3, [sp, #120]	@ 0x78
 801ee4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	dc12      	bgt.n	801ee78 <_strtod_l+0x7c8>
 801ee52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	dd18      	ble.n	801ee8a <_strtod_l+0x7da>
 801ee58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ee5a:	9908      	ldr	r1, [sp, #32]
 801ee5c:	9805      	ldr	r0, [sp, #20]
 801ee5e:	f002 ff89 	bl	8021d74 <__pow5mult>
 801ee62:	9008      	str	r0, [sp, #32]
 801ee64:	2800      	cmp	r0, #0
 801ee66:	d110      	bne.n	801ee8a <_strtod_l+0x7da>
 801ee68:	2300      	movs	r3, #0
 801ee6a:	e65a      	b.n	801eb22 <_strtod_l+0x472>
 801ee6c:	4954      	ldr	r1, [pc, #336]	@ (801efc0 <_strtod_l+0x910>)
 801ee6e:	1acb      	subs	r3, r1, r3
 801ee70:	0001      	movs	r1, r0
 801ee72:	4099      	lsls	r1, r3
 801ee74:	9116      	str	r1, [sp, #88]	@ 0x58
 801ee76:	e7ba      	b.n	801edee <_strtod_l+0x73e>
 801ee78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee7a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee7c:	9805      	ldr	r0, [sp, #20]
 801ee7e:	f002 ffd5 	bl	8021e2c <__lshift>
 801ee82:	901e      	str	r0, [sp, #120]	@ 0x78
 801ee84:	2800      	cmp	r0, #0
 801ee86:	d1e4      	bne.n	801ee52 <_strtod_l+0x7a2>
 801ee88:	e64c      	b.n	801eb24 <_strtod_l+0x474>
 801ee8a:	2c00      	cmp	r4, #0
 801ee8c:	dd07      	ble.n	801ee9e <_strtod_l+0x7ee>
 801ee8e:	0022      	movs	r2, r4
 801ee90:	9908      	ldr	r1, [sp, #32]
 801ee92:	9805      	ldr	r0, [sp, #20]
 801ee94:	f002 ffca 	bl	8021e2c <__lshift>
 801ee98:	9008      	str	r0, [sp, #32]
 801ee9a:	2800      	cmp	r0, #0
 801ee9c:	d0e4      	beq.n	801ee68 <_strtod_l+0x7b8>
 801ee9e:	2d00      	cmp	r5, #0
 801eea0:	dd08      	ble.n	801eeb4 <_strtod_l+0x804>
 801eea2:	002a      	movs	r2, r5
 801eea4:	9907      	ldr	r1, [sp, #28]
 801eea6:	9805      	ldr	r0, [sp, #20]
 801eea8:	f002 ffc0 	bl	8021e2c <__lshift>
 801eeac:	9007      	str	r0, [sp, #28]
 801eeae:	2800      	cmp	r0, #0
 801eeb0:	d100      	bne.n	801eeb4 <_strtod_l+0x804>
 801eeb2:	e637      	b.n	801eb24 <_strtod_l+0x474>
 801eeb4:	9a08      	ldr	r2, [sp, #32]
 801eeb6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eeb8:	9805      	ldr	r0, [sp, #20]
 801eeba:	f003 f83f 	bl	8021f3c <__mdiff>
 801eebe:	9006      	str	r0, [sp, #24]
 801eec0:	2800      	cmp	r0, #0
 801eec2:	d100      	bne.n	801eec6 <_strtod_l+0x816>
 801eec4:	e62e      	b.n	801eb24 <_strtod_l+0x474>
 801eec6:	68c3      	ldr	r3, [r0, #12]
 801eec8:	9907      	ldr	r1, [sp, #28]
 801eeca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eecc:	2300      	movs	r3, #0
 801eece:	60c3      	str	r3, [r0, #12]
 801eed0:	f003 f818 	bl	8021f04 <__mcmp>
 801eed4:	2800      	cmp	r0, #0
 801eed6:	da3b      	bge.n	801ef50 <_strtod_l+0x8a0>
 801eed8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eeda:	4333      	orrs	r3, r6
 801eedc:	d167      	bne.n	801efae <_strtod_l+0x8fe>
 801eede:	033b      	lsls	r3, r7, #12
 801eee0:	d165      	bne.n	801efae <_strtod_l+0x8fe>
 801eee2:	22d6      	movs	r2, #214	@ 0xd6
 801eee4:	4b37      	ldr	r3, [pc, #220]	@ (801efc4 <_strtod_l+0x914>)
 801eee6:	04d2      	lsls	r2, r2, #19
 801eee8:	403b      	ands	r3, r7
 801eeea:	4293      	cmp	r3, r2
 801eeec:	d95f      	bls.n	801efae <_strtod_l+0x8fe>
 801eeee:	9b06      	ldr	r3, [sp, #24]
 801eef0:	695b      	ldr	r3, [r3, #20]
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d103      	bne.n	801eefe <_strtod_l+0x84e>
 801eef6:	9b06      	ldr	r3, [sp, #24]
 801eef8:	691b      	ldr	r3, [r3, #16]
 801eefa:	2b01      	cmp	r3, #1
 801eefc:	dd57      	ble.n	801efae <_strtod_l+0x8fe>
 801eefe:	9906      	ldr	r1, [sp, #24]
 801ef00:	2201      	movs	r2, #1
 801ef02:	9805      	ldr	r0, [sp, #20]
 801ef04:	f002 ff92 	bl	8021e2c <__lshift>
 801ef08:	9907      	ldr	r1, [sp, #28]
 801ef0a:	9006      	str	r0, [sp, #24]
 801ef0c:	f002 fffa 	bl	8021f04 <__mcmp>
 801ef10:	2800      	cmp	r0, #0
 801ef12:	dd4c      	ble.n	801efae <_strtod_l+0x8fe>
 801ef14:	4b2b      	ldr	r3, [pc, #172]	@ (801efc4 <_strtod_l+0x914>)
 801ef16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef18:	403b      	ands	r3, r7
 801ef1a:	2a00      	cmp	r2, #0
 801ef1c:	d074      	beq.n	801f008 <_strtod_l+0x958>
 801ef1e:	22d6      	movs	r2, #214	@ 0xd6
 801ef20:	04d2      	lsls	r2, r2, #19
 801ef22:	4293      	cmp	r3, r2
 801ef24:	d870      	bhi.n	801f008 <_strtod_l+0x958>
 801ef26:	22dc      	movs	r2, #220	@ 0xdc
 801ef28:	0492      	lsls	r2, r2, #18
 801ef2a:	4293      	cmp	r3, r2
 801ef2c:	d800      	bhi.n	801ef30 <_strtod_l+0x880>
 801ef2e:	e695      	b.n	801ec5c <_strtod_l+0x5ac>
 801ef30:	0030      	movs	r0, r6
 801ef32:	0039      	movs	r1, r7
 801ef34:	4b24      	ldr	r3, [pc, #144]	@ (801efc8 <_strtod_l+0x918>)
 801ef36:	2200      	movs	r2, #0
 801ef38:	f7e3 fb80 	bl	800263c <__aeabi_dmul>
 801ef3c:	4b21      	ldr	r3, [pc, #132]	@ (801efc4 <_strtod_l+0x914>)
 801ef3e:	0006      	movs	r6, r0
 801ef40:	000f      	movs	r7, r1
 801ef42:	420b      	tst	r3, r1
 801ef44:	d000      	beq.n	801ef48 <_strtod_l+0x898>
 801ef46:	e5f6      	b.n	801eb36 <_strtod_l+0x486>
 801ef48:	2322      	movs	r3, #34	@ 0x22
 801ef4a:	9a05      	ldr	r2, [sp, #20]
 801ef4c:	6013      	str	r3, [r2, #0]
 801ef4e:	e5f2      	b.n	801eb36 <_strtod_l+0x486>
 801ef50:	970e      	str	r7, [sp, #56]	@ 0x38
 801ef52:	2800      	cmp	r0, #0
 801ef54:	d175      	bne.n	801f042 <_strtod_l+0x992>
 801ef56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ef58:	033b      	lsls	r3, r7, #12
 801ef5a:	0b1b      	lsrs	r3, r3, #12
 801ef5c:	2a00      	cmp	r2, #0
 801ef5e:	d039      	beq.n	801efd4 <_strtod_l+0x924>
 801ef60:	4a1a      	ldr	r2, [pc, #104]	@ (801efcc <_strtod_l+0x91c>)
 801ef62:	4293      	cmp	r3, r2
 801ef64:	d138      	bne.n	801efd8 <_strtod_l+0x928>
 801ef66:	2101      	movs	r1, #1
 801ef68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef6a:	4249      	negs	r1, r1
 801ef6c:	0032      	movs	r2, r6
 801ef6e:	0008      	movs	r0, r1
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	d00b      	beq.n	801ef8c <_strtod_l+0x8dc>
 801ef74:	24d4      	movs	r4, #212	@ 0xd4
 801ef76:	4b13      	ldr	r3, [pc, #76]	@ (801efc4 <_strtod_l+0x914>)
 801ef78:	0008      	movs	r0, r1
 801ef7a:	403b      	ands	r3, r7
 801ef7c:	04e4      	lsls	r4, r4, #19
 801ef7e:	42a3      	cmp	r3, r4
 801ef80:	d804      	bhi.n	801ef8c <_strtod_l+0x8dc>
 801ef82:	306c      	adds	r0, #108	@ 0x6c
 801ef84:	0d1b      	lsrs	r3, r3, #20
 801ef86:	1ac3      	subs	r3, r0, r3
 801ef88:	4099      	lsls	r1, r3
 801ef8a:	0008      	movs	r0, r1
 801ef8c:	4282      	cmp	r2, r0
 801ef8e:	d123      	bne.n	801efd8 <_strtod_l+0x928>
 801ef90:	4b0f      	ldr	r3, [pc, #60]	@ (801efd0 <_strtod_l+0x920>)
 801ef92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ef94:	4299      	cmp	r1, r3
 801ef96:	d102      	bne.n	801ef9e <_strtod_l+0x8ee>
 801ef98:	3201      	adds	r2, #1
 801ef9a:	d100      	bne.n	801ef9e <_strtod_l+0x8ee>
 801ef9c:	e5c2      	b.n	801eb24 <_strtod_l+0x474>
 801ef9e:	4b09      	ldr	r3, [pc, #36]	@ (801efc4 <_strtod_l+0x914>)
 801efa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801efa2:	2600      	movs	r6, #0
 801efa4:	401a      	ands	r2, r3
 801efa6:	0013      	movs	r3, r2
 801efa8:	2280      	movs	r2, #128	@ 0x80
 801efaa:	0352      	lsls	r2, r2, #13
 801efac:	189f      	adds	r7, r3, r2
 801efae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	d1bd      	bne.n	801ef30 <_strtod_l+0x880>
 801efb4:	e5bf      	b.n	801eb36 <_strtod_l+0x486>
 801efb6:	46c0      	nop			@ (mov r8, r8)
 801efb8:	08025ba8 	.word	0x08025ba8
 801efbc:	fffffc02 	.word	0xfffffc02
 801efc0:	fffffbe2 	.word	0xfffffbe2
 801efc4:	7ff00000 	.word	0x7ff00000
 801efc8:	39500000 	.word	0x39500000
 801efcc:	000fffff 	.word	0x000fffff
 801efd0:	7fefffff 	.word	0x7fefffff
 801efd4:	4333      	orrs	r3, r6
 801efd6:	d09d      	beq.n	801ef14 <_strtod_l+0x864>
 801efd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d01c      	beq.n	801f018 <_strtod_l+0x968>
 801efde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efe0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801efe2:	4213      	tst	r3, r2
 801efe4:	d0e3      	beq.n	801efae <_strtod_l+0x8fe>
 801efe6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801efe8:	0030      	movs	r0, r6
 801efea:	0039      	movs	r1, r7
 801efec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d016      	beq.n	801f020 <_strtod_l+0x970>
 801eff2:	f7ff fb45 	bl	801e680 <sulp>
 801eff6:	0002      	movs	r2, r0
 801eff8:	000b      	movs	r3, r1
 801effa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801effc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801effe:	f7e2 fb75 	bl	80016ec <__aeabi_dadd>
 801f002:	0006      	movs	r6, r0
 801f004:	000f      	movs	r7, r1
 801f006:	e7d2      	b.n	801efae <_strtod_l+0x8fe>
 801f008:	2601      	movs	r6, #1
 801f00a:	4a92      	ldr	r2, [pc, #584]	@ (801f254 <_strtod_l+0xba4>)
 801f00c:	4276      	negs	r6, r6
 801f00e:	189b      	adds	r3, r3, r2
 801f010:	4a91      	ldr	r2, [pc, #580]	@ (801f258 <_strtod_l+0xba8>)
 801f012:	431a      	orrs	r2, r3
 801f014:	0017      	movs	r7, r2
 801f016:	e7ca      	b.n	801efae <_strtod_l+0x8fe>
 801f018:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f01a:	4233      	tst	r3, r6
 801f01c:	d0c7      	beq.n	801efae <_strtod_l+0x8fe>
 801f01e:	e7e2      	b.n	801efe6 <_strtod_l+0x936>
 801f020:	f7ff fb2e 	bl	801e680 <sulp>
 801f024:	0002      	movs	r2, r0
 801f026:	000b      	movs	r3, r1
 801f028:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f02a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f02c:	f7e3 fdce 	bl	8002bcc <__aeabi_dsub>
 801f030:	2200      	movs	r2, #0
 801f032:	2300      	movs	r3, #0
 801f034:	0006      	movs	r6, r0
 801f036:	000f      	movs	r7, r1
 801f038:	f7e1 fa3a 	bl	80004b0 <__aeabi_dcmpeq>
 801f03c:	2800      	cmp	r0, #0
 801f03e:	d0b6      	beq.n	801efae <_strtod_l+0x8fe>
 801f040:	e60c      	b.n	801ec5c <_strtod_l+0x5ac>
 801f042:	9907      	ldr	r1, [sp, #28]
 801f044:	9806      	ldr	r0, [sp, #24]
 801f046:	f003 f8df 	bl	8022208 <__ratio>
 801f04a:	2380      	movs	r3, #128	@ 0x80
 801f04c:	2200      	movs	r2, #0
 801f04e:	05db      	lsls	r3, r3, #23
 801f050:	0004      	movs	r4, r0
 801f052:	000d      	movs	r5, r1
 801f054:	f7e1 fa3c 	bl	80004d0 <__aeabi_dcmple>
 801f058:	2800      	cmp	r0, #0
 801f05a:	d06c      	beq.n	801f136 <_strtod_l+0xa86>
 801f05c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d177      	bne.n	801f152 <_strtod_l+0xaa2>
 801f062:	2e00      	cmp	r6, #0
 801f064:	d157      	bne.n	801f116 <_strtod_l+0xa66>
 801f066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f068:	031b      	lsls	r3, r3, #12
 801f06a:	d15a      	bne.n	801f122 <_strtod_l+0xa72>
 801f06c:	2200      	movs	r2, #0
 801f06e:	0020      	movs	r0, r4
 801f070:	0029      	movs	r1, r5
 801f072:	4b7a      	ldr	r3, [pc, #488]	@ (801f25c <_strtod_l+0xbac>)
 801f074:	f7e1 fa22 	bl	80004bc <__aeabi_dcmplt>
 801f078:	2800      	cmp	r0, #0
 801f07a:	d159      	bne.n	801f130 <_strtod_l+0xa80>
 801f07c:	0020      	movs	r0, r4
 801f07e:	0029      	movs	r1, r5
 801f080:	2200      	movs	r2, #0
 801f082:	4b77      	ldr	r3, [pc, #476]	@ (801f260 <_strtod_l+0xbb0>)
 801f084:	f7e3 fada 	bl	800263c <__aeabi_dmul>
 801f088:	0004      	movs	r4, r0
 801f08a:	000d      	movs	r5, r1
 801f08c:	2380      	movs	r3, #128	@ 0x80
 801f08e:	061b      	lsls	r3, r3, #24
 801f090:	18eb      	adds	r3, r5, r3
 801f092:	940a      	str	r4, [sp, #40]	@ 0x28
 801f094:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f09a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f09c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f09e:	4a71      	ldr	r2, [pc, #452]	@ (801f264 <_strtod_l+0xbb4>)
 801f0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0a2:	4013      	ands	r3, r2
 801f0a4:	9316      	str	r3, [sp, #88]	@ 0x58
 801f0a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f0a8:	4b6f      	ldr	r3, [pc, #444]	@ (801f268 <_strtod_l+0xbb8>)
 801f0aa:	429a      	cmp	r2, r3
 801f0ac:	d000      	beq.n	801f0b0 <_strtod_l+0xa00>
 801f0ae:	e087      	b.n	801f1c0 <_strtod_l+0xb10>
 801f0b0:	4a6e      	ldr	r2, [pc, #440]	@ (801f26c <_strtod_l+0xbbc>)
 801f0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0b4:	4694      	mov	ip, r2
 801f0b6:	4463      	add	r3, ip
 801f0b8:	001f      	movs	r7, r3
 801f0ba:	0030      	movs	r0, r6
 801f0bc:	0019      	movs	r1, r3
 801f0be:	f002 ffd7 	bl	8022070 <__ulp>
 801f0c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0c6:	f7e3 fab9 	bl	800263c <__aeabi_dmul>
 801f0ca:	0032      	movs	r2, r6
 801f0cc:	003b      	movs	r3, r7
 801f0ce:	f7e2 fb0d 	bl	80016ec <__aeabi_dadd>
 801f0d2:	4a64      	ldr	r2, [pc, #400]	@ (801f264 <_strtod_l+0xbb4>)
 801f0d4:	4b66      	ldr	r3, [pc, #408]	@ (801f270 <_strtod_l+0xbc0>)
 801f0d6:	0006      	movs	r6, r0
 801f0d8:	400a      	ands	r2, r1
 801f0da:	429a      	cmp	r2, r3
 801f0dc:	d940      	bls.n	801f160 <_strtod_l+0xab0>
 801f0de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f0e0:	4a64      	ldr	r2, [pc, #400]	@ (801f274 <_strtod_l+0xbc4>)
 801f0e2:	4293      	cmp	r3, r2
 801f0e4:	d103      	bne.n	801f0ee <_strtod_l+0xa3e>
 801f0e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f0e8:	3301      	adds	r3, #1
 801f0ea:	d100      	bne.n	801f0ee <_strtod_l+0xa3e>
 801f0ec:	e51a      	b.n	801eb24 <_strtod_l+0x474>
 801f0ee:	2601      	movs	r6, #1
 801f0f0:	4f60      	ldr	r7, [pc, #384]	@ (801f274 <_strtod_l+0xbc4>)
 801f0f2:	4276      	negs	r6, r6
 801f0f4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f0f6:	9805      	ldr	r0, [sp, #20]
 801f0f8:	f002 fc6e 	bl	80219d8 <_Bfree>
 801f0fc:	9908      	ldr	r1, [sp, #32]
 801f0fe:	9805      	ldr	r0, [sp, #20]
 801f100:	f002 fc6a 	bl	80219d8 <_Bfree>
 801f104:	9907      	ldr	r1, [sp, #28]
 801f106:	9805      	ldr	r0, [sp, #20]
 801f108:	f002 fc66 	bl	80219d8 <_Bfree>
 801f10c:	9906      	ldr	r1, [sp, #24]
 801f10e:	9805      	ldr	r0, [sp, #20]
 801f110:	f002 fc62 	bl	80219d8 <_Bfree>
 801f114:	e617      	b.n	801ed46 <_strtod_l+0x696>
 801f116:	2e01      	cmp	r6, #1
 801f118:	d103      	bne.n	801f122 <_strtod_l+0xa72>
 801f11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d100      	bne.n	801f122 <_strtod_l+0xa72>
 801f120:	e59c      	b.n	801ec5c <_strtod_l+0x5ac>
 801f122:	2300      	movs	r3, #0
 801f124:	4c54      	ldr	r4, [pc, #336]	@ (801f278 <_strtod_l+0xbc8>)
 801f126:	4d4d      	ldr	r5, [pc, #308]	@ (801f25c <_strtod_l+0xbac>)
 801f128:	930a      	str	r3, [sp, #40]	@ 0x28
 801f12a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f12c:	2400      	movs	r4, #0
 801f12e:	e7b2      	b.n	801f096 <_strtod_l+0x9e6>
 801f130:	2400      	movs	r4, #0
 801f132:	4d4b      	ldr	r5, [pc, #300]	@ (801f260 <_strtod_l+0xbb0>)
 801f134:	e7aa      	b.n	801f08c <_strtod_l+0x9dc>
 801f136:	0020      	movs	r0, r4
 801f138:	0029      	movs	r1, r5
 801f13a:	4b49      	ldr	r3, [pc, #292]	@ (801f260 <_strtod_l+0xbb0>)
 801f13c:	2200      	movs	r2, #0
 801f13e:	f7e3 fa7d 	bl	800263c <__aeabi_dmul>
 801f142:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f144:	0004      	movs	r4, r0
 801f146:	000d      	movs	r5, r1
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d09f      	beq.n	801f08c <_strtod_l+0x9dc>
 801f14c:	940a      	str	r4, [sp, #40]	@ 0x28
 801f14e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f150:	e7a1      	b.n	801f096 <_strtod_l+0x9e6>
 801f152:	2300      	movs	r3, #0
 801f154:	4c41      	ldr	r4, [pc, #260]	@ (801f25c <_strtod_l+0xbac>)
 801f156:	0025      	movs	r5, r4
 801f158:	930a      	str	r3, [sp, #40]	@ 0x28
 801f15a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f15c:	001c      	movs	r4, r3
 801f15e:	e79a      	b.n	801f096 <_strtod_l+0x9e6>
 801f160:	23d4      	movs	r3, #212	@ 0xd4
 801f162:	049b      	lsls	r3, r3, #18
 801f164:	18cf      	adds	r7, r1, r3
 801f166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f168:	9710      	str	r7, [sp, #64]	@ 0x40
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d1c2      	bne.n	801f0f4 <_strtod_l+0xa44>
 801f16e:	4b3d      	ldr	r3, [pc, #244]	@ (801f264 <_strtod_l+0xbb4>)
 801f170:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f172:	403b      	ands	r3, r7
 801f174:	429a      	cmp	r2, r3
 801f176:	d1bd      	bne.n	801f0f4 <_strtod_l+0xa44>
 801f178:	0020      	movs	r0, r4
 801f17a:	0029      	movs	r1, r5
 801f17c:	f7e1 fa84 	bl	8000688 <__aeabi_d2lz>
 801f180:	f7e1 fabc 	bl	80006fc <__aeabi_l2d>
 801f184:	0002      	movs	r2, r0
 801f186:	000b      	movs	r3, r1
 801f188:	0020      	movs	r0, r4
 801f18a:	0029      	movs	r1, r5
 801f18c:	f7e3 fd1e 	bl	8002bcc <__aeabi_dsub>
 801f190:	033c      	lsls	r4, r7, #12
 801f192:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f194:	0b24      	lsrs	r4, r4, #12
 801f196:	4334      	orrs	r4, r6
 801f198:	900e      	str	r0, [sp, #56]	@ 0x38
 801f19a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f19c:	4a37      	ldr	r2, [pc, #220]	@ (801f27c <_strtod_l+0xbcc>)
 801f19e:	431c      	orrs	r4, r3
 801f1a0:	d052      	beq.n	801f248 <_strtod_l+0xb98>
 801f1a2:	4b37      	ldr	r3, [pc, #220]	@ (801f280 <_strtod_l+0xbd0>)
 801f1a4:	f7e1 f98a 	bl	80004bc <__aeabi_dcmplt>
 801f1a8:	2800      	cmp	r0, #0
 801f1aa:	d000      	beq.n	801f1ae <_strtod_l+0xafe>
 801f1ac:	e4c3      	b.n	801eb36 <_strtod_l+0x486>
 801f1ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f1b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f1b2:	4a34      	ldr	r2, [pc, #208]	@ (801f284 <_strtod_l+0xbd4>)
 801f1b4:	4b2a      	ldr	r3, [pc, #168]	@ (801f260 <_strtod_l+0xbb0>)
 801f1b6:	f7e1 f995 	bl	80004e4 <__aeabi_dcmpgt>
 801f1ba:	2800      	cmp	r0, #0
 801f1bc:	d09a      	beq.n	801f0f4 <_strtod_l+0xa44>
 801f1be:	e4ba      	b.n	801eb36 <_strtod_l+0x486>
 801f1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d02a      	beq.n	801f21c <_strtod_l+0xb6c>
 801f1c6:	23d4      	movs	r3, #212	@ 0xd4
 801f1c8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1ca:	04db      	lsls	r3, r3, #19
 801f1cc:	429a      	cmp	r2, r3
 801f1ce:	d825      	bhi.n	801f21c <_strtod_l+0xb6c>
 801f1d0:	0020      	movs	r0, r4
 801f1d2:	0029      	movs	r1, r5
 801f1d4:	4a2c      	ldr	r2, [pc, #176]	@ (801f288 <_strtod_l+0xbd8>)
 801f1d6:	4b2d      	ldr	r3, [pc, #180]	@ (801f28c <_strtod_l+0xbdc>)
 801f1d8:	f7e1 f97a 	bl	80004d0 <__aeabi_dcmple>
 801f1dc:	2800      	cmp	r0, #0
 801f1de:	d016      	beq.n	801f20e <_strtod_l+0xb5e>
 801f1e0:	0020      	movs	r0, r4
 801f1e2:	0029      	movs	r1, r5
 801f1e4:	f7e1 fa32 	bl	800064c <__aeabi_d2uiz>
 801f1e8:	2800      	cmp	r0, #0
 801f1ea:	d100      	bne.n	801f1ee <_strtod_l+0xb3e>
 801f1ec:	3001      	adds	r0, #1
 801f1ee:	f7e4 f915 	bl	800341c <__aeabi_ui2d>
 801f1f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1f4:	0004      	movs	r4, r0
 801f1f6:	000d      	movs	r5, r1
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	d122      	bne.n	801f242 <_strtod_l+0xb92>
 801f1fc:	2380      	movs	r3, #128	@ 0x80
 801f1fe:	061b      	lsls	r3, r3, #24
 801f200:	18cb      	adds	r3, r1, r3
 801f202:	9018      	str	r0, [sp, #96]	@ 0x60
 801f204:	9319      	str	r3, [sp, #100]	@ 0x64
 801f206:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f20a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f20c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f20e:	22d6      	movs	r2, #214	@ 0xd6
 801f210:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f212:	04d2      	lsls	r2, r2, #19
 801f214:	189b      	adds	r3, r3, r2
 801f216:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f218:	1a9b      	subs	r3, r3, r2
 801f21a:	9315      	str	r3, [sp, #84]	@ 0x54
 801f21c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f21e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f220:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f222:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f224:	f002 ff24 	bl	8022070 <__ulp>
 801f228:	0002      	movs	r2, r0
 801f22a:	000b      	movs	r3, r1
 801f22c:	0030      	movs	r0, r6
 801f22e:	0039      	movs	r1, r7
 801f230:	f7e3 fa04 	bl	800263c <__aeabi_dmul>
 801f234:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f236:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f238:	f7e2 fa58 	bl	80016ec <__aeabi_dadd>
 801f23c:	0006      	movs	r6, r0
 801f23e:	000f      	movs	r7, r1
 801f240:	e791      	b.n	801f166 <_strtod_l+0xab6>
 801f242:	9418      	str	r4, [sp, #96]	@ 0x60
 801f244:	9519      	str	r5, [sp, #100]	@ 0x64
 801f246:	e7de      	b.n	801f206 <_strtod_l+0xb56>
 801f248:	4b11      	ldr	r3, [pc, #68]	@ (801f290 <_strtod_l+0xbe0>)
 801f24a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f24c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f24e:	f7e1 f935 	bl	80004bc <__aeabi_dcmplt>
 801f252:	e7b2      	b.n	801f1ba <_strtod_l+0xb0a>
 801f254:	fff00000 	.word	0xfff00000
 801f258:	000fffff 	.word	0x000fffff
 801f25c:	3ff00000 	.word	0x3ff00000
 801f260:	3fe00000 	.word	0x3fe00000
 801f264:	7ff00000 	.word	0x7ff00000
 801f268:	7fe00000 	.word	0x7fe00000
 801f26c:	fcb00000 	.word	0xfcb00000
 801f270:	7c9fffff 	.word	0x7c9fffff
 801f274:	7fefffff 	.word	0x7fefffff
 801f278:	bff00000 	.word	0xbff00000
 801f27c:	94a03595 	.word	0x94a03595
 801f280:	3fdfffff 	.word	0x3fdfffff
 801f284:	35afe535 	.word	0x35afe535
 801f288:	ffc00000 	.word	0xffc00000
 801f28c:	41dfffff 	.word	0x41dfffff
 801f290:	3fcfffff 	.word	0x3fcfffff

0801f294 <strtod>:
 801f294:	b510      	push	{r4, lr}
 801f296:	4c04      	ldr	r4, [pc, #16]	@ (801f2a8 <strtod+0x14>)
 801f298:	000a      	movs	r2, r1
 801f29a:	0001      	movs	r1, r0
 801f29c:	4b03      	ldr	r3, [pc, #12]	@ (801f2ac <strtod+0x18>)
 801f29e:	6820      	ldr	r0, [r4, #0]
 801f2a0:	f7ff fa06 	bl	801e6b0 <_strtod_l>
 801f2a4:	bd10      	pop	{r4, pc}
 801f2a6:	46c0      	nop			@ (mov r8, r8)
 801f2a8:	200003cc 	.word	0x200003cc
 801f2ac:	20000260 	.word	0x20000260

0801f2b0 <_strtol_l.constprop.0>:
 801f2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2b2:	b085      	sub	sp, #20
 801f2b4:	0017      	movs	r7, r2
 801f2b6:	001e      	movs	r6, r3
 801f2b8:	9003      	str	r0, [sp, #12]
 801f2ba:	9101      	str	r1, [sp, #4]
 801f2bc:	2b24      	cmp	r3, #36	@ 0x24
 801f2be:	d844      	bhi.n	801f34a <_strtol_l.constprop.0+0x9a>
 801f2c0:	000c      	movs	r4, r1
 801f2c2:	2b01      	cmp	r3, #1
 801f2c4:	d041      	beq.n	801f34a <_strtol_l.constprop.0+0x9a>
 801f2c6:	4b3d      	ldr	r3, [pc, #244]	@ (801f3bc <_strtol_l.constprop.0+0x10c>)
 801f2c8:	2208      	movs	r2, #8
 801f2ca:	469c      	mov	ip, r3
 801f2cc:	0023      	movs	r3, r4
 801f2ce:	4661      	mov	r1, ip
 801f2d0:	781d      	ldrb	r5, [r3, #0]
 801f2d2:	3401      	adds	r4, #1
 801f2d4:	5d48      	ldrb	r0, [r1, r5]
 801f2d6:	0001      	movs	r1, r0
 801f2d8:	4011      	ands	r1, r2
 801f2da:	4210      	tst	r0, r2
 801f2dc:	d1f6      	bne.n	801f2cc <_strtol_l.constprop.0+0x1c>
 801f2de:	2d2d      	cmp	r5, #45	@ 0x2d
 801f2e0:	d13a      	bne.n	801f358 <_strtol_l.constprop.0+0xa8>
 801f2e2:	7825      	ldrb	r5, [r4, #0]
 801f2e4:	1c9c      	adds	r4, r3, #2
 801f2e6:	2301      	movs	r3, #1
 801f2e8:	9300      	str	r3, [sp, #0]
 801f2ea:	2210      	movs	r2, #16
 801f2ec:	0033      	movs	r3, r6
 801f2ee:	4393      	bics	r3, r2
 801f2f0:	d109      	bne.n	801f306 <_strtol_l.constprop.0+0x56>
 801f2f2:	2d30      	cmp	r5, #48	@ 0x30
 801f2f4:	d136      	bne.n	801f364 <_strtol_l.constprop.0+0xb4>
 801f2f6:	2120      	movs	r1, #32
 801f2f8:	7823      	ldrb	r3, [r4, #0]
 801f2fa:	438b      	bics	r3, r1
 801f2fc:	2b58      	cmp	r3, #88	@ 0x58
 801f2fe:	d131      	bne.n	801f364 <_strtol_l.constprop.0+0xb4>
 801f300:	0016      	movs	r6, r2
 801f302:	7865      	ldrb	r5, [r4, #1]
 801f304:	3402      	adds	r4, #2
 801f306:	4a2e      	ldr	r2, [pc, #184]	@ (801f3c0 <_strtol_l.constprop.0+0x110>)
 801f308:	9b00      	ldr	r3, [sp, #0]
 801f30a:	4694      	mov	ip, r2
 801f30c:	4463      	add	r3, ip
 801f30e:	0031      	movs	r1, r6
 801f310:	0018      	movs	r0, r3
 801f312:	9302      	str	r3, [sp, #8]
 801f314:	f7e0 ffcc 	bl	80002b0 <__aeabi_uidivmod>
 801f318:	2200      	movs	r2, #0
 801f31a:	4684      	mov	ip, r0
 801f31c:	0010      	movs	r0, r2
 801f31e:	002b      	movs	r3, r5
 801f320:	3b30      	subs	r3, #48	@ 0x30
 801f322:	2b09      	cmp	r3, #9
 801f324:	d825      	bhi.n	801f372 <_strtol_l.constprop.0+0xc2>
 801f326:	001d      	movs	r5, r3
 801f328:	42ae      	cmp	r6, r5
 801f32a:	dd31      	ble.n	801f390 <_strtol_l.constprop.0+0xe0>
 801f32c:	1c53      	adds	r3, r2, #1
 801f32e:	d009      	beq.n	801f344 <_strtol_l.constprop.0+0x94>
 801f330:	2201      	movs	r2, #1
 801f332:	4252      	negs	r2, r2
 801f334:	4584      	cmp	ip, r0
 801f336:	d305      	bcc.n	801f344 <_strtol_l.constprop.0+0x94>
 801f338:	d101      	bne.n	801f33e <_strtol_l.constprop.0+0x8e>
 801f33a:	42a9      	cmp	r1, r5
 801f33c:	db25      	blt.n	801f38a <_strtol_l.constprop.0+0xda>
 801f33e:	2201      	movs	r2, #1
 801f340:	4370      	muls	r0, r6
 801f342:	1828      	adds	r0, r5, r0
 801f344:	7825      	ldrb	r5, [r4, #0]
 801f346:	3401      	adds	r4, #1
 801f348:	e7e9      	b.n	801f31e <_strtol_l.constprop.0+0x6e>
 801f34a:	f000 ffc5 	bl	80202d8 <__errno>
 801f34e:	2316      	movs	r3, #22
 801f350:	6003      	str	r3, [r0, #0]
 801f352:	2000      	movs	r0, #0
 801f354:	b005      	add	sp, #20
 801f356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f358:	9100      	str	r1, [sp, #0]
 801f35a:	2d2b      	cmp	r5, #43	@ 0x2b
 801f35c:	d1c5      	bne.n	801f2ea <_strtol_l.constprop.0+0x3a>
 801f35e:	7825      	ldrb	r5, [r4, #0]
 801f360:	1c9c      	adds	r4, r3, #2
 801f362:	e7c2      	b.n	801f2ea <_strtol_l.constprop.0+0x3a>
 801f364:	2e00      	cmp	r6, #0
 801f366:	d1ce      	bne.n	801f306 <_strtol_l.constprop.0+0x56>
 801f368:	3608      	adds	r6, #8
 801f36a:	2d30      	cmp	r5, #48	@ 0x30
 801f36c:	d0cb      	beq.n	801f306 <_strtol_l.constprop.0+0x56>
 801f36e:	3602      	adds	r6, #2
 801f370:	e7c9      	b.n	801f306 <_strtol_l.constprop.0+0x56>
 801f372:	002b      	movs	r3, r5
 801f374:	3b41      	subs	r3, #65	@ 0x41
 801f376:	2b19      	cmp	r3, #25
 801f378:	d801      	bhi.n	801f37e <_strtol_l.constprop.0+0xce>
 801f37a:	3d37      	subs	r5, #55	@ 0x37
 801f37c:	e7d4      	b.n	801f328 <_strtol_l.constprop.0+0x78>
 801f37e:	002b      	movs	r3, r5
 801f380:	3b61      	subs	r3, #97	@ 0x61
 801f382:	2b19      	cmp	r3, #25
 801f384:	d804      	bhi.n	801f390 <_strtol_l.constprop.0+0xe0>
 801f386:	3d57      	subs	r5, #87	@ 0x57
 801f388:	e7ce      	b.n	801f328 <_strtol_l.constprop.0+0x78>
 801f38a:	2201      	movs	r2, #1
 801f38c:	4252      	negs	r2, r2
 801f38e:	e7d9      	b.n	801f344 <_strtol_l.constprop.0+0x94>
 801f390:	1c53      	adds	r3, r2, #1
 801f392:	d108      	bne.n	801f3a6 <_strtol_l.constprop.0+0xf6>
 801f394:	2322      	movs	r3, #34	@ 0x22
 801f396:	9a03      	ldr	r2, [sp, #12]
 801f398:	9802      	ldr	r0, [sp, #8]
 801f39a:	6013      	str	r3, [r2, #0]
 801f39c:	2f00      	cmp	r7, #0
 801f39e:	d0d9      	beq.n	801f354 <_strtol_l.constprop.0+0xa4>
 801f3a0:	1e63      	subs	r3, r4, #1
 801f3a2:	9301      	str	r3, [sp, #4]
 801f3a4:	e007      	b.n	801f3b6 <_strtol_l.constprop.0+0x106>
 801f3a6:	9b00      	ldr	r3, [sp, #0]
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d000      	beq.n	801f3ae <_strtol_l.constprop.0+0xfe>
 801f3ac:	4240      	negs	r0, r0
 801f3ae:	2f00      	cmp	r7, #0
 801f3b0:	d0d0      	beq.n	801f354 <_strtol_l.constprop.0+0xa4>
 801f3b2:	2a00      	cmp	r2, #0
 801f3b4:	d1f4      	bne.n	801f3a0 <_strtol_l.constprop.0+0xf0>
 801f3b6:	9b01      	ldr	r3, [sp, #4]
 801f3b8:	603b      	str	r3, [r7, #0]
 801f3ba:	e7cb      	b.n	801f354 <_strtol_l.constprop.0+0xa4>
 801f3bc:	08025bd1 	.word	0x08025bd1
 801f3c0:	7fffffff 	.word	0x7fffffff

0801f3c4 <strtol>:
 801f3c4:	b510      	push	{r4, lr}
 801f3c6:	4c04      	ldr	r4, [pc, #16]	@ (801f3d8 <strtol+0x14>)
 801f3c8:	0013      	movs	r3, r2
 801f3ca:	000a      	movs	r2, r1
 801f3cc:	0001      	movs	r1, r0
 801f3ce:	6820      	ldr	r0, [r4, #0]
 801f3d0:	f7ff ff6e 	bl	801f2b0 <_strtol_l.constprop.0>
 801f3d4:	bd10      	pop	{r4, pc}
 801f3d6:	46c0      	nop			@ (mov r8, r8)
 801f3d8:	200003cc 	.word	0x200003cc

0801f3dc <__cvt>:
 801f3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3de:	001f      	movs	r7, r3
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	0016      	movs	r6, r2
 801f3e4:	b08b      	sub	sp, #44	@ 0x2c
 801f3e6:	429f      	cmp	r7, r3
 801f3e8:	da04      	bge.n	801f3f4 <__cvt+0x18>
 801f3ea:	2180      	movs	r1, #128	@ 0x80
 801f3ec:	0609      	lsls	r1, r1, #24
 801f3ee:	187b      	adds	r3, r7, r1
 801f3f0:	001f      	movs	r7, r3
 801f3f2:	232d      	movs	r3, #45	@ 0x2d
 801f3f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f3f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f3f8:	7013      	strb	r3, [r2, #0]
 801f3fa:	2320      	movs	r3, #32
 801f3fc:	2203      	movs	r2, #3
 801f3fe:	439d      	bics	r5, r3
 801f400:	2d46      	cmp	r5, #70	@ 0x46
 801f402:	d007      	beq.n	801f414 <__cvt+0x38>
 801f404:	002b      	movs	r3, r5
 801f406:	3b45      	subs	r3, #69	@ 0x45
 801f408:	4259      	negs	r1, r3
 801f40a:	414b      	adcs	r3, r1
 801f40c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f40e:	3a01      	subs	r2, #1
 801f410:	18cb      	adds	r3, r1, r3
 801f412:	9310      	str	r3, [sp, #64]	@ 0x40
 801f414:	ab09      	add	r3, sp, #36	@ 0x24
 801f416:	9304      	str	r3, [sp, #16]
 801f418:	ab08      	add	r3, sp, #32
 801f41a:	9303      	str	r3, [sp, #12]
 801f41c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f41e:	9200      	str	r2, [sp, #0]
 801f420:	9302      	str	r3, [sp, #8]
 801f422:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f424:	0032      	movs	r2, r6
 801f426:	9301      	str	r3, [sp, #4]
 801f428:	003b      	movs	r3, r7
 801f42a:	f001 f82b 	bl	8020484 <_dtoa_r>
 801f42e:	0004      	movs	r4, r0
 801f430:	2d47      	cmp	r5, #71	@ 0x47
 801f432:	d11b      	bne.n	801f46c <__cvt+0x90>
 801f434:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f436:	07db      	lsls	r3, r3, #31
 801f438:	d511      	bpl.n	801f45e <__cvt+0x82>
 801f43a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f43c:	18c3      	adds	r3, r0, r3
 801f43e:	9307      	str	r3, [sp, #28]
 801f440:	2200      	movs	r2, #0
 801f442:	2300      	movs	r3, #0
 801f444:	0030      	movs	r0, r6
 801f446:	0039      	movs	r1, r7
 801f448:	f7e1 f832 	bl	80004b0 <__aeabi_dcmpeq>
 801f44c:	2800      	cmp	r0, #0
 801f44e:	d001      	beq.n	801f454 <__cvt+0x78>
 801f450:	9b07      	ldr	r3, [sp, #28]
 801f452:	9309      	str	r3, [sp, #36]	@ 0x24
 801f454:	2230      	movs	r2, #48	@ 0x30
 801f456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f458:	9907      	ldr	r1, [sp, #28]
 801f45a:	428b      	cmp	r3, r1
 801f45c:	d320      	bcc.n	801f4a0 <__cvt+0xc4>
 801f45e:	0020      	movs	r0, r4
 801f460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f462:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f464:	1b1b      	subs	r3, r3, r4
 801f466:	6013      	str	r3, [r2, #0]
 801f468:	b00b      	add	sp, #44	@ 0x2c
 801f46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f46c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f46e:	18c3      	adds	r3, r0, r3
 801f470:	9307      	str	r3, [sp, #28]
 801f472:	2d46      	cmp	r5, #70	@ 0x46
 801f474:	d1e4      	bne.n	801f440 <__cvt+0x64>
 801f476:	7803      	ldrb	r3, [r0, #0]
 801f478:	2b30      	cmp	r3, #48	@ 0x30
 801f47a:	d10c      	bne.n	801f496 <__cvt+0xba>
 801f47c:	2200      	movs	r2, #0
 801f47e:	2300      	movs	r3, #0
 801f480:	0030      	movs	r0, r6
 801f482:	0039      	movs	r1, r7
 801f484:	f7e1 f814 	bl	80004b0 <__aeabi_dcmpeq>
 801f488:	2800      	cmp	r0, #0
 801f48a:	d104      	bne.n	801f496 <__cvt+0xba>
 801f48c:	2301      	movs	r3, #1
 801f48e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f490:	1a9b      	subs	r3, r3, r2
 801f492:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f494:	6013      	str	r3, [r2, #0]
 801f496:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f498:	9a07      	ldr	r2, [sp, #28]
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	18d3      	adds	r3, r2, r3
 801f49e:	e7ce      	b.n	801f43e <__cvt+0x62>
 801f4a0:	1c59      	adds	r1, r3, #1
 801f4a2:	9109      	str	r1, [sp, #36]	@ 0x24
 801f4a4:	701a      	strb	r2, [r3, #0]
 801f4a6:	e7d6      	b.n	801f456 <__cvt+0x7a>

0801f4a8 <__exponent>:
 801f4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4aa:	232b      	movs	r3, #43	@ 0x2b
 801f4ac:	0005      	movs	r5, r0
 801f4ae:	000c      	movs	r4, r1
 801f4b0:	b085      	sub	sp, #20
 801f4b2:	7002      	strb	r2, [r0, #0]
 801f4b4:	2900      	cmp	r1, #0
 801f4b6:	da01      	bge.n	801f4bc <__exponent+0x14>
 801f4b8:	424c      	negs	r4, r1
 801f4ba:	3302      	adds	r3, #2
 801f4bc:	706b      	strb	r3, [r5, #1]
 801f4be:	2c09      	cmp	r4, #9
 801f4c0:	dd2c      	ble.n	801f51c <__exponent+0x74>
 801f4c2:	ab02      	add	r3, sp, #8
 801f4c4:	1dde      	adds	r6, r3, #7
 801f4c6:	0020      	movs	r0, r4
 801f4c8:	210a      	movs	r1, #10
 801f4ca:	f7e0 ffdb 	bl	8000484 <__aeabi_idivmod>
 801f4ce:	0037      	movs	r7, r6
 801f4d0:	3130      	adds	r1, #48	@ 0x30
 801f4d2:	3e01      	subs	r6, #1
 801f4d4:	0020      	movs	r0, r4
 801f4d6:	7031      	strb	r1, [r6, #0]
 801f4d8:	210a      	movs	r1, #10
 801f4da:	9401      	str	r4, [sp, #4]
 801f4dc:	f7e0 feec 	bl	80002b8 <__divsi3>
 801f4e0:	9b01      	ldr	r3, [sp, #4]
 801f4e2:	0004      	movs	r4, r0
 801f4e4:	2b63      	cmp	r3, #99	@ 0x63
 801f4e6:	dcee      	bgt.n	801f4c6 <__exponent+0x1e>
 801f4e8:	1eba      	subs	r2, r7, #2
 801f4ea:	1ca8      	adds	r0, r5, #2
 801f4ec:	0001      	movs	r1, r0
 801f4ee:	0013      	movs	r3, r2
 801f4f0:	3430      	adds	r4, #48	@ 0x30
 801f4f2:	7014      	strb	r4, [r2, #0]
 801f4f4:	ac02      	add	r4, sp, #8
 801f4f6:	3407      	adds	r4, #7
 801f4f8:	429c      	cmp	r4, r3
 801f4fa:	d80a      	bhi.n	801f512 <__exponent+0x6a>
 801f4fc:	2300      	movs	r3, #0
 801f4fe:	42a2      	cmp	r2, r4
 801f500:	d803      	bhi.n	801f50a <__exponent+0x62>
 801f502:	3309      	adds	r3, #9
 801f504:	aa02      	add	r2, sp, #8
 801f506:	189b      	adds	r3, r3, r2
 801f508:	1bdb      	subs	r3, r3, r7
 801f50a:	18c0      	adds	r0, r0, r3
 801f50c:	1b40      	subs	r0, r0, r5
 801f50e:	b005      	add	sp, #20
 801f510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f512:	781c      	ldrb	r4, [r3, #0]
 801f514:	3301      	adds	r3, #1
 801f516:	700c      	strb	r4, [r1, #0]
 801f518:	3101      	adds	r1, #1
 801f51a:	e7eb      	b.n	801f4f4 <__exponent+0x4c>
 801f51c:	2330      	movs	r3, #48	@ 0x30
 801f51e:	18e4      	adds	r4, r4, r3
 801f520:	70ab      	strb	r3, [r5, #2]
 801f522:	1d28      	adds	r0, r5, #4
 801f524:	70ec      	strb	r4, [r5, #3]
 801f526:	e7f1      	b.n	801f50c <__exponent+0x64>

0801f528 <_printf_float>:
 801f528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f52a:	b097      	sub	sp, #92	@ 0x5c
 801f52c:	000d      	movs	r5, r1
 801f52e:	920a      	str	r2, [sp, #40]	@ 0x28
 801f530:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f532:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f534:	9009      	str	r0, [sp, #36]	@ 0x24
 801f536:	f000 fe7d 	bl	8020234 <_localeconv_r>
 801f53a:	6803      	ldr	r3, [r0, #0]
 801f53c:	0018      	movs	r0, r3
 801f53e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f540:	f7e0 fe14 	bl	800016c <strlen>
 801f544:	2300      	movs	r3, #0
 801f546:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f548:	9314      	str	r3, [sp, #80]	@ 0x50
 801f54a:	7e2b      	ldrb	r3, [r5, #24]
 801f54c:	2207      	movs	r2, #7
 801f54e:	930c      	str	r3, [sp, #48]	@ 0x30
 801f550:	682b      	ldr	r3, [r5, #0]
 801f552:	930e      	str	r3, [sp, #56]	@ 0x38
 801f554:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f556:	6823      	ldr	r3, [r4, #0]
 801f558:	05c9      	lsls	r1, r1, #23
 801f55a:	d545      	bpl.n	801f5e8 <_printf_float+0xc0>
 801f55c:	189b      	adds	r3, r3, r2
 801f55e:	4393      	bics	r3, r2
 801f560:	001a      	movs	r2, r3
 801f562:	3208      	adds	r2, #8
 801f564:	6022      	str	r2, [r4, #0]
 801f566:	2201      	movs	r2, #1
 801f568:	681e      	ldr	r6, [r3, #0]
 801f56a:	685f      	ldr	r7, [r3, #4]
 801f56c:	007b      	lsls	r3, r7, #1
 801f56e:	085b      	lsrs	r3, r3, #1
 801f570:	9311      	str	r3, [sp, #68]	@ 0x44
 801f572:	9610      	str	r6, [sp, #64]	@ 0x40
 801f574:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f576:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f578:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f57a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f57c:	4ba7      	ldr	r3, [pc, #668]	@ (801f81c <_printf_float+0x2f4>)
 801f57e:	4252      	negs	r2, r2
 801f580:	f7e3 fec0 	bl	8003304 <__aeabi_dcmpun>
 801f584:	2800      	cmp	r0, #0
 801f586:	d131      	bne.n	801f5ec <_printf_float+0xc4>
 801f588:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f58a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f58c:	2201      	movs	r2, #1
 801f58e:	4ba3      	ldr	r3, [pc, #652]	@ (801f81c <_printf_float+0x2f4>)
 801f590:	4252      	negs	r2, r2
 801f592:	f7e0 ff9d 	bl	80004d0 <__aeabi_dcmple>
 801f596:	2800      	cmp	r0, #0
 801f598:	d128      	bne.n	801f5ec <_printf_float+0xc4>
 801f59a:	2200      	movs	r2, #0
 801f59c:	2300      	movs	r3, #0
 801f59e:	0030      	movs	r0, r6
 801f5a0:	0039      	movs	r1, r7
 801f5a2:	f7e0 ff8b 	bl	80004bc <__aeabi_dcmplt>
 801f5a6:	2800      	cmp	r0, #0
 801f5a8:	d003      	beq.n	801f5b2 <_printf_float+0x8a>
 801f5aa:	002b      	movs	r3, r5
 801f5ac:	222d      	movs	r2, #45	@ 0x2d
 801f5ae:	3343      	adds	r3, #67	@ 0x43
 801f5b0:	701a      	strb	r2, [r3, #0]
 801f5b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5b4:	4f9a      	ldr	r7, [pc, #616]	@ (801f820 <_printf_float+0x2f8>)
 801f5b6:	2b47      	cmp	r3, #71	@ 0x47
 801f5b8:	d900      	bls.n	801f5bc <_printf_float+0x94>
 801f5ba:	4f9a      	ldr	r7, [pc, #616]	@ (801f824 <_printf_float+0x2fc>)
 801f5bc:	2303      	movs	r3, #3
 801f5be:	2400      	movs	r4, #0
 801f5c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f5c2:	612b      	str	r3, [r5, #16]
 801f5c4:	3301      	adds	r3, #1
 801f5c6:	439a      	bics	r2, r3
 801f5c8:	602a      	str	r2, [r5, #0]
 801f5ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5cc:	0029      	movs	r1, r5
 801f5ce:	9300      	str	r3, [sp, #0]
 801f5d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f5d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f5d4:	aa15      	add	r2, sp, #84	@ 0x54
 801f5d6:	f000 f9e5 	bl	801f9a4 <_printf_common>
 801f5da:	3001      	adds	r0, #1
 801f5dc:	d000      	beq.n	801f5e0 <_printf_float+0xb8>
 801f5de:	e09f      	b.n	801f720 <_printf_float+0x1f8>
 801f5e0:	2001      	movs	r0, #1
 801f5e2:	4240      	negs	r0, r0
 801f5e4:	b017      	add	sp, #92	@ 0x5c
 801f5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5e8:	3307      	adds	r3, #7
 801f5ea:	e7b8      	b.n	801f55e <_printf_float+0x36>
 801f5ec:	0032      	movs	r2, r6
 801f5ee:	003b      	movs	r3, r7
 801f5f0:	0030      	movs	r0, r6
 801f5f2:	0039      	movs	r1, r7
 801f5f4:	f7e3 fe86 	bl	8003304 <__aeabi_dcmpun>
 801f5f8:	2800      	cmp	r0, #0
 801f5fa:	d00b      	beq.n	801f614 <_printf_float+0xec>
 801f5fc:	2f00      	cmp	r7, #0
 801f5fe:	da03      	bge.n	801f608 <_printf_float+0xe0>
 801f600:	002b      	movs	r3, r5
 801f602:	222d      	movs	r2, #45	@ 0x2d
 801f604:	3343      	adds	r3, #67	@ 0x43
 801f606:	701a      	strb	r2, [r3, #0]
 801f608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f60a:	4f87      	ldr	r7, [pc, #540]	@ (801f828 <_printf_float+0x300>)
 801f60c:	2b47      	cmp	r3, #71	@ 0x47
 801f60e:	d9d5      	bls.n	801f5bc <_printf_float+0x94>
 801f610:	4f86      	ldr	r7, [pc, #536]	@ (801f82c <_printf_float+0x304>)
 801f612:	e7d3      	b.n	801f5bc <_printf_float+0x94>
 801f614:	2220      	movs	r2, #32
 801f616:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f618:	686b      	ldr	r3, [r5, #4]
 801f61a:	4394      	bics	r4, r2
 801f61c:	1c5a      	adds	r2, r3, #1
 801f61e:	d146      	bne.n	801f6ae <_printf_float+0x186>
 801f620:	3307      	adds	r3, #7
 801f622:	606b      	str	r3, [r5, #4]
 801f624:	2380      	movs	r3, #128	@ 0x80
 801f626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f628:	00db      	lsls	r3, r3, #3
 801f62a:	4313      	orrs	r3, r2
 801f62c:	2200      	movs	r2, #0
 801f62e:	602b      	str	r3, [r5, #0]
 801f630:	9206      	str	r2, [sp, #24]
 801f632:	aa14      	add	r2, sp, #80	@ 0x50
 801f634:	9205      	str	r2, [sp, #20]
 801f636:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f638:	a90a      	add	r1, sp, #40	@ 0x28
 801f63a:	9204      	str	r2, [sp, #16]
 801f63c:	aa13      	add	r2, sp, #76	@ 0x4c
 801f63e:	9203      	str	r2, [sp, #12]
 801f640:	2223      	movs	r2, #35	@ 0x23
 801f642:	1852      	adds	r2, r2, r1
 801f644:	9202      	str	r2, [sp, #8]
 801f646:	9301      	str	r3, [sp, #4]
 801f648:	686b      	ldr	r3, [r5, #4]
 801f64a:	0032      	movs	r2, r6
 801f64c:	9300      	str	r3, [sp, #0]
 801f64e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f650:	003b      	movs	r3, r7
 801f652:	f7ff fec3 	bl	801f3dc <__cvt>
 801f656:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f658:	0007      	movs	r7, r0
 801f65a:	2c47      	cmp	r4, #71	@ 0x47
 801f65c:	d12d      	bne.n	801f6ba <_printf_float+0x192>
 801f65e:	1cd3      	adds	r3, r2, #3
 801f660:	db02      	blt.n	801f668 <_printf_float+0x140>
 801f662:	686b      	ldr	r3, [r5, #4]
 801f664:	429a      	cmp	r2, r3
 801f666:	dd48      	ble.n	801f6fa <_printf_float+0x1d2>
 801f668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f66a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f66c:	3b02      	subs	r3, #2
 801f66e:	b2db      	uxtb	r3, r3
 801f670:	930c      	str	r3, [sp, #48]	@ 0x30
 801f672:	0028      	movs	r0, r5
 801f674:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f676:	3901      	subs	r1, #1
 801f678:	3050      	adds	r0, #80	@ 0x50
 801f67a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f67c:	f7ff ff14 	bl	801f4a8 <__exponent>
 801f680:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f682:	0004      	movs	r4, r0
 801f684:	1813      	adds	r3, r2, r0
 801f686:	612b      	str	r3, [r5, #16]
 801f688:	2a01      	cmp	r2, #1
 801f68a:	dc02      	bgt.n	801f692 <_printf_float+0x16a>
 801f68c:	682a      	ldr	r2, [r5, #0]
 801f68e:	07d2      	lsls	r2, r2, #31
 801f690:	d501      	bpl.n	801f696 <_printf_float+0x16e>
 801f692:	3301      	adds	r3, #1
 801f694:	612b      	str	r3, [r5, #16]
 801f696:	2323      	movs	r3, #35	@ 0x23
 801f698:	aa0a      	add	r2, sp, #40	@ 0x28
 801f69a:	189b      	adds	r3, r3, r2
 801f69c:	781b      	ldrb	r3, [r3, #0]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d100      	bne.n	801f6a4 <_printf_float+0x17c>
 801f6a2:	e792      	b.n	801f5ca <_printf_float+0xa2>
 801f6a4:	002b      	movs	r3, r5
 801f6a6:	222d      	movs	r2, #45	@ 0x2d
 801f6a8:	3343      	adds	r3, #67	@ 0x43
 801f6aa:	701a      	strb	r2, [r3, #0]
 801f6ac:	e78d      	b.n	801f5ca <_printf_float+0xa2>
 801f6ae:	2c47      	cmp	r4, #71	@ 0x47
 801f6b0:	d1b8      	bne.n	801f624 <_printf_float+0xfc>
 801f6b2:	2b00      	cmp	r3, #0
 801f6b4:	d1b6      	bne.n	801f624 <_printf_float+0xfc>
 801f6b6:	3301      	adds	r3, #1
 801f6b8:	e7b3      	b.n	801f622 <_printf_float+0xfa>
 801f6ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6bc:	0011      	movs	r1, r2
 801f6be:	2b65      	cmp	r3, #101	@ 0x65
 801f6c0:	d9d7      	bls.n	801f672 <_printf_float+0x14a>
 801f6c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6c4:	2b66      	cmp	r3, #102	@ 0x66
 801f6c6:	d11a      	bne.n	801f6fe <_printf_float+0x1d6>
 801f6c8:	686b      	ldr	r3, [r5, #4]
 801f6ca:	2a00      	cmp	r2, #0
 801f6cc:	dd09      	ble.n	801f6e2 <_printf_float+0x1ba>
 801f6ce:	612a      	str	r2, [r5, #16]
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	d102      	bne.n	801f6da <_printf_float+0x1b2>
 801f6d4:	6829      	ldr	r1, [r5, #0]
 801f6d6:	07c9      	lsls	r1, r1, #31
 801f6d8:	d50b      	bpl.n	801f6f2 <_printf_float+0x1ca>
 801f6da:	3301      	adds	r3, #1
 801f6dc:	189b      	adds	r3, r3, r2
 801f6de:	612b      	str	r3, [r5, #16]
 801f6e0:	e007      	b.n	801f6f2 <_printf_float+0x1ca>
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d103      	bne.n	801f6ee <_printf_float+0x1c6>
 801f6e6:	2201      	movs	r2, #1
 801f6e8:	6829      	ldr	r1, [r5, #0]
 801f6ea:	4211      	tst	r1, r2
 801f6ec:	d000      	beq.n	801f6f0 <_printf_float+0x1c8>
 801f6ee:	1c9a      	adds	r2, r3, #2
 801f6f0:	612a      	str	r2, [r5, #16]
 801f6f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6f4:	2400      	movs	r4, #0
 801f6f6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f6f8:	e7cd      	b.n	801f696 <_printf_float+0x16e>
 801f6fa:	2367      	movs	r3, #103	@ 0x67
 801f6fc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f6fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f702:	4299      	cmp	r1, r3
 801f704:	db06      	blt.n	801f714 <_printf_float+0x1ec>
 801f706:	682b      	ldr	r3, [r5, #0]
 801f708:	6129      	str	r1, [r5, #16]
 801f70a:	07db      	lsls	r3, r3, #31
 801f70c:	d5f1      	bpl.n	801f6f2 <_printf_float+0x1ca>
 801f70e:	3101      	adds	r1, #1
 801f710:	6129      	str	r1, [r5, #16]
 801f712:	e7ee      	b.n	801f6f2 <_printf_float+0x1ca>
 801f714:	2201      	movs	r2, #1
 801f716:	2900      	cmp	r1, #0
 801f718:	dce0      	bgt.n	801f6dc <_printf_float+0x1b4>
 801f71a:	1892      	adds	r2, r2, r2
 801f71c:	1a52      	subs	r2, r2, r1
 801f71e:	e7dd      	b.n	801f6dc <_printf_float+0x1b4>
 801f720:	682a      	ldr	r2, [r5, #0]
 801f722:	0553      	lsls	r3, r2, #21
 801f724:	d408      	bmi.n	801f738 <_printf_float+0x210>
 801f726:	692b      	ldr	r3, [r5, #16]
 801f728:	003a      	movs	r2, r7
 801f72a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f72c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f72e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f730:	47a0      	blx	r4
 801f732:	3001      	adds	r0, #1
 801f734:	d129      	bne.n	801f78a <_printf_float+0x262>
 801f736:	e753      	b.n	801f5e0 <_printf_float+0xb8>
 801f738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f73a:	2b65      	cmp	r3, #101	@ 0x65
 801f73c:	d800      	bhi.n	801f740 <_printf_float+0x218>
 801f73e:	e0da      	b.n	801f8f6 <_printf_float+0x3ce>
 801f740:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f742:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f744:	2200      	movs	r2, #0
 801f746:	2300      	movs	r3, #0
 801f748:	f7e0 feb2 	bl	80004b0 <__aeabi_dcmpeq>
 801f74c:	2800      	cmp	r0, #0
 801f74e:	d033      	beq.n	801f7b8 <_printf_float+0x290>
 801f750:	2301      	movs	r3, #1
 801f752:	4a37      	ldr	r2, [pc, #220]	@ (801f830 <_printf_float+0x308>)
 801f754:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f758:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f75a:	47a0      	blx	r4
 801f75c:	3001      	adds	r0, #1
 801f75e:	d100      	bne.n	801f762 <_printf_float+0x23a>
 801f760:	e73e      	b.n	801f5e0 <_printf_float+0xb8>
 801f762:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f766:	42b3      	cmp	r3, r6
 801f768:	db02      	blt.n	801f770 <_printf_float+0x248>
 801f76a:	682b      	ldr	r3, [r5, #0]
 801f76c:	07db      	lsls	r3, r3, #31
 801f76e:	d50c      	bpl.n	801f78a <_printf_float+0x262>
 801f770:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f776:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f778:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f77a:	47a0      	blx	r4
 801f77c:	2400      	movs	r4, #0
 801f77e:	3001      	adds	r0, #1
 801f780:	d100      	bne.n	801f784 <_printf_float+0x25c>
 801f782:	e72d      	b.n	801f5e0 <_printf_float+0xb8>
 801f784:	1e73      	subs	r3, r6, #1
 801f786:	42a3      	cmp	r3, r4
 801f788:	dc0a      	bgt.n	801f7a0 <_printf_float+0x278>
 801f78a:	682b      	ldr	r3, [r5, #0]
 801f78c:	079b      	lsls	r3, r3, #30
 801f78e:	d500      	bpl.n	801f792 <_printf_float+0x26a>
 801f790:	e105      	b.n	801f99e <_printf_float+0x476>
 801f792:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f794:	68e8      	ldr	r0, [r5, #12]
 801f796:	4298      	cmp	r0, r3
 801f798:	db00      	blt.n	801f79c <_printf_float+0x274>
 801f79a:	e723      	b.n	801f5e4 <_printf_float+0xbc>
 801f79c:	0018      	movs	r0, r3
 801f79e:	e721      	b.n	801f5e4 <_printf_float+0xbc>
 801f7a0:	002a      	movs	r2, r5
 801f7a2:	2301      	movs	r3, #1
 801f7a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f7aa:	321a      	adds	r2, #26
 801f7ac:	47b8      	blx	r7
 801f7ae:	3001      	adds	r0, #1
 801f7b0:	d100      	bne.n	801f7b4 <_printf_float+0x28c>
 801f7b2:	e715      	b.n	801f5e0 <_printf_float+0xb8>
 801f7b4:	3401      	adds	r4, #1
 801f7b6:	e7e5      	b.n	801f784 <_printf_float+0x25c>
 801f7b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	dc3a      	bgt.n	801f834 <_printf_float+0x30c>
 801f7be:	2301      	movs	r3, #1
 801f7c0:	4a1b      	ldr	r2, [pc, #108]	@ (801f830 <_printf_float+0x308>)
 801f7c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7c8:	47a0      	blx	r4
 801f7ca:	3001      	adds	r0, #1
 801f7cc:	d100      	bne.n	801f7d0 <_printf_float+0x2a8>
 801f7ce:	e707      	b.n	801f5e0 <_printf_float+0xb8>
 801f7d0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f7d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7d4:	4333      	orrs	r3, r6
 801f7d6:	d102      	bne.n	801f7de <_printf_float+0x2b6>
 801f7d8:	682b      	ldr	r3, [r5, #0]
 801f7da:	07db      	lsls	r3, r3, #31
 801f7dc:	d5d5      	bpl.n	801f78a <_printf_float+0x262>
 801f7de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f7e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7e8:	47a0      	blx	r4
 801f7ea:	2300      	movs	r3, #0
 801f7ec:	3001      	adds	r0, #1
 801f7ee:	d100      	bne.n	801f7f2 <_printf_float+0x2ca>
 801f7f0:	e6f6      	b.n	801f5e0 <_printf_float+0xb8>
 801f7f2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7f8:	425b      	negs	r3, r3
 801f7fa:	4293      	cmp	r3, r2
 801f7fc:	dc01      	bgt.n	801f802 <_printf_float+0x2da>
 801f7fe:	0033      	movs	r3, r6
 801f800:	e792      	b.n	801f728 <_printf_float+0x200>
 801f802:	002a      	movs	r2, r5
 801f804:	2301      	movs	r3, #1
 801f806:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f808:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f80a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f80c:	321a      	adds	r2, #26
 801f80e:	47a0      	blx	r4
 801f810:	3001      	adds	r0, #1
 801f812:	d100      	bne.n	801f816 <_printf_float+0x2ee>
 801f814:	e6e4      	b.n	801f5e0 <_printf_float+0xb8>
 801f816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f818:	3301      	adds	r3, #1
 801f81a:	e7ea      	b.n	801f7f2 <_printf_float+0x2ca>
 801f81c:	7fefffff 	.word	0x7fefffff
 801f820:	08025cd1 	.word	0x08025cd1
 801f824:	08025cd5 	.word	0x08025cd5
 801f828:	08025cd9 	.word	0x08025cd9
 801f82c:	08025cdd 	.word	0x08025cdd
 801f830:	08025ce1 	.word	0x08025ce1
 801f834:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f836:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f838:	930c      	str	r3, [sp, #48]	@ 0x30
 801f83a:	429e      	cmp	r6, r3
 801f83c:	dd00      	ble.n	801f840 <_printf_float+0x318>
 801f83e:	001e      	movs	r6, r3
 801f840:	2e00      	cmp	r6, #0
 801f842:	dc31      	bgt.n	801f8a8 <_printf_float+0x380>
 801f844:	43f3      	mvns	r3, r6
 801f846:	2400      	movs	r4, #0
 801f848:	17db      	asrs	r3, r3, #31
 801f84a:	4033      	ands	r3, r6
 801f84c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f84e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f852:	1af3      	subs	r3, r6, r3
 801f854:	42a3      	cmp	r3, r4
 801f856:	dc30      	bgt.n	801f8ba <_printf_float+0x392>
 801f858:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f85a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f85c:	429a      	cmp	r2, r3
 801f85e:	dc38      	bgt.n	801f8d2 <_printf_float+0x3aa>
 801f860:	682b      	ldr	r3, [r5, #0]
 801f862:	07db      	lsls	r3, r3, #31
 801f864:	d435      	bmi.n	801f8d2 <_printf_float+0x3aa>
 801f866:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f86a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f86c:	1b9b      	subs	r3, r3, r6
 801f86e:	1b14      	subs	r4, r2, r4
 801f870:	429c      	cmp	r4, r3
 801f872:	dd00      	ble.n	801f876 <_printf_float+0x34e>
 801f874:	001c      	movs	r4, r3
 801f876:	2c00      	cmp	r4, #0
 801f878:	dc34      	bgt.n	801f8e4 <_printf_float+0x3bc>
 801f87a:	43e3      	mvns	r3, r4
 801f87c:	2600      	movs	r6, #0
 801f87e:	17db      	asrs	r3, r3, #31
 801f880:	401c      	ands	r4, r3
 801f882:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f884:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f886:	1ad3      	subs	r3, r2, r3
 801f888:	1b1b      	subs	r3, r3, r4
 801f88a:	42b3      	cmp	r3, r6
 801f88c:	dc00      	bgt.n	801f890 <_printf_float+0x368>
 801f88e:	e77c      	b.n	801f78a <_printf_float+0x262>
 801f890:	002a      	movs	r2, r5
 801f892:	2301      	movs	r3, #1
 801f894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f898:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f89a:	321a      	adds	r2, #26
 801f89c:	47b8      	blx	r7
 801f89e:	3001      	adds	r0, #1
 801f8a0:	d100      	bne.n	801f8a4 <_printf_float+0x37c>
 801f8a2:	e69d      	b.n	801f5e0 <_printf_float+0xb8>
 801f8a4:	3601      	adds	r6, #1
 801f8a6:	e7ec      	b.n	801f882 <_printf_float+0x35a>
 801f8a8:	0033      	movs	r3, r6
 801f8aa:	003a      	movs	r2, r7
 801f8ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8b2:	47a0      	blx	r4
 801f8b4:	3001      	adds	r0, #1
 801f8b6:	d1c5      	bne.n	801f844 <_printf_float+0x31c>
 801f8b8:	e692      	b.n	801f5e0 <_printf_float+0xb8>
 801f8ba:	002a      	movs	r2, r5
 801f8bc:	2301      	movs	r3, #1
 801f8be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8c4:	321a      	adds	r2, #26
 801f8c6:	47b0      	blx	r6
 801f8c8:	3001      	adds	r0, #1
 801f8ca:	d100      	bne.n	801f8ce <_printf_float+0x3a6>
 801f8cc:	e688      	b.n	801f5e0 <_printf_float+0xb8>
 801f8ce:	3401      	adds	r4, #1
 801f8d0:	e7bd      	b.n	801f84e <_printf_float+0x326>
 801f8d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f8d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8dc:	47a0      	blx	r4
 801f8de:	3001      	adds	r0, #1
 801f8e0:	d1c1      	bne.n	801f866 <_printf_float+0x33e>
 801f8e2:	e67d      	b.n	801f5e0 <_printf_float+0xb8>
 801f8e4:	19ba      	adds	r2, r7, r6
 801f8e6:	0023      	movs	r3, r4
 801f8e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8ee:	47b0      	blx	r6
 801f8f0:	3001      	adds	r0, #1
 801f8f2:	d1c2      	bne.n	801f87a <_printf_float+0x352>
 801f8f4:	e674      	b.n	801f5e0 <_printf_float+0xb8>
 801f8f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f8f8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8fa:	2b01      	cmp	r3, #1
 801f8fc:	dc02      	bgt.n	801f904 <_printf_float+0x3dc>
 801f8fe:	2301      	movs	r3, #1
 801f900:	421a      	tst	r2, r3
 801f902:	d039      	beq.n	801f978 <_printf_float+0x450>
 801f904:	2301      	movs	r3, #1
 801f906:	003a      	movs	r2, r7
 801f908:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f90a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f90c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f90e:	47b0      	blx	r6
 801f910:	3001      	adds	r0, #1
 801f912:	d100      	bne.n	801f916 <_printf_float+0x3ee>
 801f914:	e664      	b.n	801f5e0 <_printf_float+0xb8>
 801f916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f918:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f91a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f91c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f91e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f920:	47b0      	blx	r6
 801f922:	3001      	adds	r0, #1
 801f924:	d100      	bne.n	801f928 <_printf_float+0x400>
 801f926:	e65b      	b.n	801f5e0 <_printf_float+0xb8>
 801f928:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f92a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f92c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f92e:	2200      	movs	r2, #0
 801f930:	3b01      	subs	r3, #1
 801f932:	930c      	str	r3, [sp, #48]	@ 0x30
 801f934:	2300      	movs	r3, #0
 801f936:	f7e0 fdbb 	bl	80004b0 <__aeabi_dcmpeq>
 801f93a:	2800      	cmp	r0, #0
 801f93c:	d11a      	bne.n	801f974 <_printf_float+0x44c>
 801f93e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f940:	1c7a      	adds	r2, r7, #1
 801f942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f944:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f946:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f948:	47b0      	blx	r6
 801f94a:	3001      	adds	r0, #1
 801f94c:	d10e      	bne.n	801f96c <_printf_float+0x444>
 801f94e:	e647      	b.n	801f5e0 <_printf_float+0xb8>
 801f950:	002a      	movs	r2, r5
 801f952:	2301      	movs	r3, #1
 801f954:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f958:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f95a:	321a      	adds	r2, #26
 801f95c:	47b8      	blx	r7
 801f95e:	3001      	adds	r0, #1
 801f960:	d100      	bne.n	801f964 <_printf_float+0x43c>
 801f962:	e63d      	b.n	801f5e0 <_printf_float+0xb8>
 801f964:	3601      	adds	r6, #1
 801f966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f968:	429e      	cmp	r6, r3
 801f96a:	dbf1      	blt.n	801f950 <_printf_float+0x428>
 801f96c:	002a      	movs	r2, r5
 801f96e:	0023      	movs	r3, r4
 801f970:	3250      	adds	r2, #80	@ 0x50
 801f972:	e6da      	b.n	801f72a <_printf_float+0x202>
 801f974:	2600      	movs	r6, #0
 801f976:	e7f6      	b.n	801f966 <_printf_float+0x43e>
 801f978:	003a      	movs	r2, r7
 801f97a:	e7e2      	b.n	801f942 <_printf_float+0x41a>
 801f97c:	002a      	movs	r2, r5
 801f97e:	2301      	movs	r3, #1
 801f980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f984:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f986:	3219      	adds	r2, #25
 801f988:	47b0      	blx	r6
 801f98a:	3001      	adds	r0, #1
 801f98c:	d100      	bne.n	801f990 <_printf_float+0x468>
 801f98e:	e627      	b.n	801f5e0 <_printf_float+0xb8>
 801f990:	3401      	adds	r4, #1
 801f992:	68eb      	ldr	r3, [r5, #12]
 801f994:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f996:	1a9b      	subs	r3, r3, r2
 801f998:	42a3      	cmp	r3, r4
 801f99a:	dcef      	bgt.n	801f97c <_printf_float+0x454>
 801f99c:	e6f9      	b.n	801f792 <_printf_float+0x26a>
 801f99e:	2400      	movs	r4, #0
 801f9a0:	e7f7      	b.n	801f992 <_printf_float+0x46a>
 801f9a2:	46c0      	nop			@ (mov r8, r8)

0801f9a4 <_printf_common>:
 801f9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f9a6:	0016      	movs	r6, r2
 801f9a8:	9301      	str	r3, [sp, #4]
 801f9aa:	688a      	ldr	r2, [r1, #8]
 801f9ac:	690b      	ldr	r3, [r1, #16]
 801f9ae:	000c      	movs	r4, r1
 801f9b0:	9000      	str	r0, [sp, #0]
 801f9b2:	4293      	cmp	r3, r2
 801f9b4:	da00      	bge.n	801f9b8 <_printf_common+0x14>
 801f9b6:	0013      	movs	r3, r2
 801f9b8:	0022      	movs	r2, r4
 801f9ba:	6033      	str	r3, [r6, #0]
 801f9bc:	3243      	adds	r2, #67	@ 0x43
 801f9be:	7812      	ldrb	r2, [r2, #0]
 801f9c0:	2a00      	cmp	r2, #0
 801f9c2:	d001      	beq.n	801f9c8 <_printf_common+0x24>
 801f9c4:	3301      	adds	r3, #1
 801f9c6:	6033      	str	r3, [r6, #0]
 801f9c8:	6823      	ldr	r3, [r4, #0]
 801f9ca:	069b      	lsls	r3, r3, #26
 801f9cc:	d502      	bpl.n	801f9d4 <_printf_common+0x30>
 801f9ce:	6833      	ldr	r3, [r6, #0]
 801f9d0:	3302      	adds	r3, #2
 801f9d2:	6033      	str	r3, [r6, #0]
 801f9d4:	6822      	ldr	r2, [r4, #0]
 801f9d6:	2306      	movs	r3, #6
 801f9d8:	0015      	movs	r5, r2
 801f9da:	401d      	ands	r5, r3
 801f9dc:	421a      	tst	r2, r3
 801f9de:	d027      	beq.n	801fa30 <_printf_common+0x8c>
 801f9e0:	0023      	movs	r3, r4
 801f9e2:	3343      	adds	r3, #67	@ 0x43
 801f9e4:	781b      	ldrb	r3, [r3, #0]
 801f9e6:	1e5a      	subs	r2, r3, #1
 801f9e8:	4193      	sbcs	r3, r2
 801f9ea:	6822      	ldr	r2, [r4, #0]
 801f9ec:	0692      	lsls	r2, r2, #26
 801f9ee:	d430      	bmi.n	801fa52 <_printf_common+0xae>
 801f9f0:	0022      	movs	r2, r4
 801f9f2:	9901      	ldr	r1, [sp, #4]
 801f9f4:	9800      	ldr	r0, [sp, #0]
 801f9f6:	9d08      	ldr	r5, [sp, #32]
 801f9f8:	3243      	adds	r2, #67	@ 0x43
 801f9fa:	47a8      	blx	r5
 801f9fc:	3001      	adds	r0, #1
 801f9fe:	d025      	beq.n	801fa4c <_printf_common+0xa8>
 801fa00:	2206      	movs	r2, #6
 801fa02:	6823      	ldr	r3, [r4, #0]
 801fa04:	2500      	movs	r5, #0
 801fa06:	4013      	ands	r3, r2
 801fa08:	2b04      	cmp	r3, #4
 801fa0a:	d105      	bne.n	801fa18 <_printf_common+0x74>
 801fa0c:	6833      	ldr	r3, [r6, #0]
 801fa0e:	68e5      	ldr	r5, [r4, #12]
 801fa10:	1aed      	subs	r5, r5, r3
 801fa12:	43eb      	mvns	r3, r5
 801fa14:	17db      	asrs	r3, r3, #31
 801fa16:	401d      	ands	r5, r3
 801fa18:	68a3      	ldr	r3, [r4, #8]
 801fa1a:	6922      	ldr	r2, [r4, #16]
 801fa1c:	4293      	cmp	r3, r2
 801fa1e:	dd01      	ble.n	801fa24 <_printf_common+0x80>
 801fa20:	1a9b      	subs	r3, r3, r2
 801fa22:	18ed      	adds	r5, r5, r3
 801fa24:	2600      	movs	r6, #0
 801fa26:	42b5      	cmp	r5, r6
 801fa28:	d120      	bne.n	801fa6c <_printf_common+0xc8>
 801fa2a:	2000      	movs	r0, #0
 801fa2c:	e010      	b.n	801fa50 <_printf_common+0xac>
 801fa2e:	3501      	adds	r5, #1
 801fa30:	68e3      	ldr	r3, [r4, #12]
 801fa32:	6832      	ldr	r2, [r6, #0]
 801fa34:	1a9b      	subs	r3, r3, r2
 801fa36:	42ab      	cmp	r3, r5
 801fa38:	ddd2      	ble.n	801f9e0 <_printf_common+0x3c>
 801fa3a:	0022      	movs	r2, r4
 801fa3c:	2301      	movs	r3, #1
 801fa3e:	9901      	ldr	r1, [sp, #4]
 801fa40:	9800      	ldr	r0, [sp, #0]
 801fa42:	9f08      	ldr	r7, [sp, #32]
 801fa44:	3219      	adds	r2, #25
 801fa46:	47b8      	blx	r7
 801fa48:	3001      	adds	r0, #1
 801fa4a:	d1f0      	bne.n	801fa2e <_printf_common+0x8a>
 801fa4c:	2001      	movs	r0, #1
 801fa4e:	4240      	negs	r0, r0
 801fa50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fa52:	2030      	movs	r0, #48	@ 0x30
 801fa54:	18e1      	adds	r1, r4, r3
 801fa56:	3143      	adds	r1, #67	@ 0x43
 801fa58:	7008      	strb	r0, [r1, #0]
 801fa5a:	0021      	movs	r1, r4
 801fa5c:	1c5a      	adds	r2, r3, #1
 801fa5e:	3145      	adds	r1, #69	@ 0x45
 801fa60:	7809      	ldrb	r1, [r1, #0]
 801fa62:	18a2      	adds	r2, r4, r2
 801fa64:	3243      	adds	r2, #67	@ 0x43
 801fa66:	3302      	adds	r3, #2
 801fa68:	7011      	strb	r1, [r2, #0]
 801fa6a:	e7c1      	b.n	801f9f0 <_printf_common+0x4c>
 801fa6c:	0022      	movs	r2, r4
 801fa6e:	2301      	movs	r3, #1
 801fa70:	9901      	ldr	r1, [sp, #4]
 801fa72:	9800      	ldr	r0, [sp, #0]
 801fa74:	9f08      	ldr	r7, [sp, #32]
 801fa76:	321a      	adds	r2, #26
 801fa78:	47b8      	blx	r7
 801fa7a:	3001      	adds	r0, #1
 801fa7c:	d0e6      	beq.n	801fa4c <_printf_common+0xa8>
 801fa7e:	3601      	adds	r6, #1
 801fa80:	e7d1      	b.n	801fa26 <_printf_common+0x82>
	...

0801fa84 <_printf_i>:
 801fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa86:	b08b      	sub	sp, #44	@ 0x2c
 801fa88:	9206      	str	r2, [sp, #24]
 801fa8a:	000a      	movs	r2, r1
 801fa8c:	3243      	adds	r2, #67	@ 0x43
 801fa8e:	9307      	str	r3, [sp, #28]
 801fa90:	9005      	str	r0, [sp, #20]
 801fa92:	9203      	str	r2, [sp, #12]
 801fa94:	7e0a      	ldrb	r2, [r1, #24]
 801fa96:	000c      	movs	r4, r1
 801fa98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa9a:	2a78      	cmp	r2, #120	@ 0x78
 801fa9c:	d809      	bhi.n	801fab2 <_printf_i+0x2e>
 801fa9e:	2a62      	cmp	r2, #98	@ 0x62
 801faa0:	d80b      	bhi.n	801faba <_printf_i+0x36>
 801faa2:	2a00      	cmp	r2, #0
 801faa4:	d100      	bne.n	801faa8 <_printf_i+0x24>
 801faa6:	e0bc      	b.n	801fc22 <_printf_i+0x19e>
 801faa8:	497b      	ldr	r1, [pc, #492]	@ (801fc98 <_printf_i+0x214>)
 801faaa:	9104      	str	r1, [sp, #16]
 801faac:	2a58      	cmp	r2, #88	@ 0x58
 801faae:	d100      	bne.n	801fab2 <_printf_i+0x2e>
 801fab0:	e090      	b.n	801fbd4 <_printf_i+0x150>
 801fab2:	0025      	movs	r5, r4
 801fab4:	3542      	adds	r5, #66	@ 0x42
 801fab6:	702a      	strb	r2, [r5, #0]
 801fab8:	e022      	b.n	801fb00 <_printf_i+0x7c>
 801faba:	0010      	movs	r0, r2
 801fabc:	3863      	subs	r0, #99	@ 0x63
 801fabe:	2815      	cmp	r0, #21
 801fac0:	d8f7      	bhi.n	801fab2 <_printf_i+0x2e>
 801fac2:	f7e0 fb65 	bl	8000190 <__gnu_thumb1_case_shi>
 801fac6:	0016      	.short	0x0016
 801fac8:	fff6001f 	.word	0xfff6001f
 801facc:	fff6fff6 	.word	0xfff6fff6
 801fad0:	001ffff6 	.word	0x001ffff6
 801fad4:	fff6fff6 	.word	0xfff6fff6
 801fad8:	fff6fff6 	.word	0xfff6fff6
 801fadc:	003600a1 	.word	0x003600a1
 801fae0:	fff60080 	.word	0xfff60080
 801fae4:	00b2fff6 	.word	0x00b2fff6
 801fae8:	0036fff6 	.word	0x0036fff6
 801faec:	fff6fff6 	.word	0xfff6fff6
 801faf0:	0084      	.short	0x0084
 801faf2:	0025      	movs	r5, r4
 801faf4:	681a      	ldr	r2, [r3, #0]
 801faf6:	3542      	adds	r5, #66	@ 0x42
 801faf8:	1d11      	adds	r1, r2, #4
 801fafa:	6019      	str	r1, [r3, #0]
 801fafc:	6813      	ldr	r3, [r2, #0]
 801fafe:	702b      	strb	r3, [r5, #0]
 801fb00:	2301      	movs	r3, #1
 801fb02:	e0a0      	b.n	801fc46 <_printf_i+0x1c2>
 801fb04:	6818      	ldr	r0, [r3, #0]
 801fb06:	6809      	ldr	r1, [r1, #0]
 801fb08:	1d02      	adds	r2, r0, #4
 801fb0a:	060d      	lsls	r5, r1, #24
 801fb0c:	d50b      	bpl.n	801fb26 <_printf_i+0xa2>
 801fb0e:	6806      	ldr	r6, [r0, #0]
 801fb10:	601a      	str	r2, [r3, #0]
 801fb12:	2e00      	cmp	r6, #0
 801fb14:	da03      	bge.n	801fb1e <_printf_i+0x9a>
 801fb16:	232d      	movs	r3, #45	@ 0x2d
 801fb18:	9a03      	ldr	r2, [sp, #12]
 801fb1a:	4276      	negs	r6, r6
 801fb1c:	7013      	strb	r3, [r2, #0]
 801fb1e:	4b5e      	ldr	r3, [pc, #376]	@ (801fc98 <_printf_i+0x214>)
 801fb20:	270a      	movs	r7, #10
 801fb22:	9304      	str	r3, [sp, #16]
 801fb24:	e018      	b.n	801fb58 <_printf_i+0xd4>
 801fb26:	6806      	ldr	r6, [r0, #0]
 801fb28:	601a      	str	r2, [r3, #0]
 801fb2a:	0649      	lsls	r1, r1, #25
 801fb2c:	d5f1      	bpl.n	801fb12 <_printf_i+0x8e>
 801fb2e:	b236      	sxth	r6, r6
 801fb30:	e7ef      	b.n	801fb12 <_printf_i+0x8e>
 801fb32:	6808      	ldr	r0, [r1, #0]
 801fb34:	6819      	ldr	r1, [r3, #0]
 801fb36:	c940      	ldmia	r1!, {r6}
 801fb38:	0605      	lsls	r5, r0, #24
 801fb3a:	d402      	bmi.n	801fb42 <_printf_i+0xbe>
 801fb3c:	0640      	lsls	r0, r0, #25
 801fb3e:	d500      	bpl.n	801fb42 <_printf_i+0xbe>
 801fb40:	b2b6      	uxth	r6, r6
 801fb42:	6019      	str	r1, [r3, #0]
 801fb44:	4b54      	ldr	r3, [pc, #336]	@ (801fc98 <_printf_i+0x214>)
 801fb46:	270a      	movs	r7, #10
 801fb48:	9304      	str	r3, [sp, #16]
 801fb4a:	2a6f      	cmp	r2, #111	@ 0x6f
 801fb4c:	d100      	bne.n	801fb50 <_printf_i+0xcc>
 801fb4e:	3f02      	subs	r7, #2
 801fb50:	0023      	movs	r3, r4
 801fb52:	2200      	movs	r2, #0
 801fb54:	3343      	adds	r3, #67	@ 0x43
 801fb56:	701a      	strb	r2, [r3, #0]
 801fb58:	6863      	ldr	r3, [r4, #4]
 801fb5a:	60a3      	str	r3, [r4, #8]
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	db03      	blt.n	801fb68 <_printf_i+0xe4>
 801fb60:	2104      	movs	r1, #4
 801fb62:	6822      	ldr	r2, [r4, #0]
 801fb64:	438a      	bics	r2, r1
 801fb66:	6022      	str	r2, [r4, #0]
 801fb68:	2e00      	cmp	r6, #0
 801fb6a:	d102      	bne.n	801fb72 <_printf_i+0xee>
 801fb6c:	9d03      	ldr	r5, [sp, #12]
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d00c      	beq.n	801fb8c <_printf_i+0x108>
 801fb72:	9d03      	ldr	r5, [sp, #12]
 801fb74:	0030      	movs	r0, r6
 801fb76:	0039      	movs	r1, r7
 801fb78:	f7e0 fb9a 	bl	80002b0 <__aeabi_uidivmod>
 801fb7c:	9b04      	ldr	r3, [sp, #16]
 801fb7e:	3d01      	subs	r5, #1
 801fb80:	5c5b      	ldrb	r3, [r3, r1]
 801fb82:	702b      	strb	r3, [r5, #0]
 801fb84:	0033      	movs	r3, r6
 801fb86:	0006      	movs	r6, r0
 801fb88:	429f      	cmp	r7, r3
 801fb8a:	d9f3      	bls.n	801fb74 <_printf_i+0xf0>
 801fb8c:	2f08      	cmp	r7, #8
 801fb8e:	d109      	bne.n	801fba4 <_printf_i+0x120>
 801fb90:	6823      	ldr	r3, [r4, #0]
 801fb92:	07db      	lsls	r3, r3, #31
 801fb94:	d506      	bpl.n	801fba4 <_printf_i+0x120>
 801fb96:	6862      	ldr	r2, [r4, #4]
 801fb98:	6923      	ldr	r3, [r4, #16]
 801fb9a:	429a      	cmp	r2, r3
 801fb9c:	dc02      	bgt.n	801fba4 <_printf_i+0x120>
 801fb9e:	2330      	movs	r3, #48	@ 0x30
 801fba0:	3d01      	subs	r5, #1
 801fba2:	702b      	strb	r3, [r5, #0]
 801fba4:	9b03      	ldr	r3, [sp, #12]
 801fba6:	1b5b      	subs	r3, r3, r5
 801fba8:	6123      	str	r3, [r4, #16]
 801fbaa:	9b07      	ldr	r3, [sp, #28]
 801fbac:	0021      	movs	r1, r4
 801fbae:	9300      	str	r3, [sp, #0]
 801fbb0:	9805      	ldr	r0, [sp, #20]
 801fbb2:	9b06      	ldr	r3, [sp, #24]
 801fbb4:	aa09      	add	r2, sp, #36	@ 0x24
 801fbb6:	f7ff fef5 	bl	801f9a4 <_printf_common>
 801fbba:	3001      	adds	r0, #1
 801fbbc:	d148      	bne.n	801fc50 <_printf_i+0x1cc>
 801fbbe:	2001      	movs	r0, #1
 801fbc0:	4240      	negs	r0, r0
 801fbc2:	b00b      	add	sp, #44	@ 0x2c
 801fbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbc6:	2220      	movs	r2, #32
 801fbc8:	6809      	ldr	r1, [r1, #0]
 801fbca:	430a      	orrs	r2, r1
 801fbcc:	6022      	str	r2, [r4, #0]
 801fbce:	2278      	movs	r2, #120	@ 0x78
 801fbd0:	4932      	ldr	r1, [pc, #200]	@ (801fc9c <_printf_i+0x218>)
 801fbd2:	9104      	str	r1, [sp, #16]
 801fbd4:	0021      	movs	r1, r4
 801fbd6:	3145      	adds	r1, #69	@ 0x45
 801fbd8:	700a      	strb	r2, [r1, #0]
 801fbda:	6819      	ldr	r1, [r3, #0]
 801fbdc:	6822      	ldr	r2, [r4, #0]
 801fbde:	c940      	ldmia	r1!, {r6}
 801fbe0:	0610      	lsls	r0, r2, #24
 801fbe2:	d402      	bmi.n	801fbea <_printf_i+0x166>
 801fbe4:	0650      	lsls	r0, r2, #25
 801fbe6:	d500      	bpl.n	801fbea <_printf_i+0x166>
 801fbe8:	b2b6      	uxth	r6, r6
 801fbea:	6019      	str	r1, [r3, #0]
 801fbec:	07d3      	lsls	r3, r2, #31
 801fbee:	d502      	bpl.n	801fbf6 <_printf_i+0x172>
 801fbf0:	2320      	movs	r3, #32
 801fbf2:	4313      	orrs	r3, r2
 801fbf4:	6023      	str	r3, [r4, #0]
 801fbf6:	2e00      	cmp	r6, #0
 801fbf8:	d001      	beq.n	801fbfe <_printf_i+0x17a>
 801fbfa:	2710      	movs	r7, #16
 801fbfc:	e7a8      	b.n	801fb50 <_printf_i+0xcc>
 801fbfe:	2220      	movs	r2, #32
 801fc00:	6823      	ldr	r3, [r4, #0]
 801fc02:	4393      	bics	r3, r2
 801fc04:	6023      	str	r3, [r4, #0]
 801fc06:	e7f8      	b.n	801fbfa <_printf_i+0x176>
 801fc08:	681a      	ldr	r2, [r3, #0]
 801fc0a:	680d      	ldr	r5, [r1, #0]
 801fc0c:	1d10      	adds	r0, r2, #4
 801fc0e:	6949      	ldr	r1, [r1, #20]
 801fc10:	6018      	str	r0, [r3, #0]
 801fc12:	6813      	ldr	r3, [r2, #0]
 801fc14:	062e      	lsls	r6, r5, #24
 801fc16:	d501      	bpl.n	801fc1c <_printf_i+0x198>
 801fc18:	6019      	str	r1, [r3, #0]
 801fc1a:	e002      	b.n	801fc22 <_printf_i+0x19e>
 801fc1c:	066d      	lsls	r5, r5, #25
 801fc1e:	d5fb      	bpl.n	801fc18 <_printf_i+0x194>
 801fc20:	8019      	strh	r1, [r3, #0]
 801fc22:	2300      	movs	r3, #0
 801fc24:	9d03      	ldr	r5, [sp, #12]
 801fc26:	6123      	str	r3, [r4, #16]
 801fc28:	e7bf      	b.n	801fbaa <_printf_i+0x126>
 801fc2a:	681a      	ldr	r2, [r3, #0]
 801fc2c:	1d11      	adds	r1, r2, #4
 801fc2e:	6019      	str	r1, [r3, #0]
 801fc30:	6815      	ldr	r5, [r2, #0]
 801fc32:	2100      	movs	r1, #0
 801fc34:	0028      	movs	r0, r5
 801fc36:	6862      	ldr	r2, [r4, #4]
 801fc38:	f000 fb7b 	bl	8020332 <memchr>
 801fc3c:	2800      	cmp	r0, #0
 801fc3e:	d001      	beq.n	801fc44 <_printf_i+0x1c0>
 801fc40:	1b40      	subs	r0, r0, r5
 801fc42:	6060      	str	r0, [r4, #4]
 801fc44:	6863      	ldr	r3, [r4, #4]
 801fc46:	6123      	str	r3, [r4, #16]
 801fc48:	2300      	movs	r3, #0
 801fc4a:	9a03      	ldr	r2, [sp, #12]
 801fc4c:	7013      	strb	r3, [r2, #0]
 801fc4e:	e7ac      	b.n	801fbaa <_printf_i+0x126>
 801fc50:	002a      	movs	r2, r5
 801fc52:	6923      	ldr	r3, [r4, #16]
 801fc54:	9906      	ldr	r1, [sp, #24]
 801fc56:	9805      	ldr	r0, [sp, #20]
 801fc58:	9d07      	ldr	r5, [sp, #28]
 801fc5a:	47a8      	blx	r5
 801fc5c:	3001      	adds	r0, #1
 801fc5e:	d0ae      	beq.n	801fbbe <_printf_i+0x13a>
 801fc60:	6823      	ldr	r3, [r4, #0]
 801fc62:	079b      	lsls	r3, r3, #30
 801fc64:	d415      	bmi.n	801fc92 <_printf_i+0x20e>
 801fc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc68:	68e0      	ldr	r0, [r4, #12]
 801fc6a:	4298      	cmp	r0, r3
 801fc6c:	daa9      	bge.n	801fbc2 <_printf_i+0x13e>
 801fc6e:	0018      	movs	r0, r3
 801fc70:	e7a7      	b.n	801fbc2 <_printf_i+0x13e>
 801fc72:	0022      	movs	r2, r4
 801fc74:	2301      	movs	r3, #1
 801fc76:	9906      	ldr	r1, [sp, #24]
 801fc78:	9805      	ldr	r0, [sp, #20]
 801fc7a:	9e07      	ldr	r6, [sp, #28]
 801fc7c:	3219      	adds	r2, #25
 801fc7e:	47b0      	blx	r6
 801fc80:	3001      	adds	r0, #1
 801fc82:	d09c      	beq.n	801fbbe <_printf_i+0x13a>
 801fc84:	3501      	adds	r5, #1
 801fc86:	68e3      	ldr	r3, [r4, #12]
 801fc88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc8a:	1a9b      	subs	r3, r3, r2
 801fc8c:	42ab      	cmp	r3, r5
 801fc8e:	dcf0      	bgt.n	801fc72 <_printf_i+0x1ee>
 801fc90:	e7e9      	b.n	801fc66 <_printf_i+0x1e2>
 801fc92:	2500      	movs	r5, #0
 801fc94:	e7f7      	b.n	801fc86 <_printf_i+0x202>
 801fc96:	46c0      	nop			@ (mov r8, r8)
 801fc98:	08025ce3 	.word	0x08025ce3
 801fc9c:	08025cf4 	.word	0x08025cf4

0801fca0 <std>:
 801fca0:	2300      	movs	r3, #0
 801fca2:	b510      	push	{r4, lr}
 801fca4:	0004      	movs	r4, r0
 801fca6:	6003      	str	r3, [r0, #0]
 801fca8:	6043      	str	r3, [r0, #4]
 801fcaa:	6083      	str	r3, [r0, #8]
 801fcac:	8181      	strh	r1, [r0, #12]
 801fcae:	6643      	str	r3, [r0, #100]	@ 0x64
 801fcb0:	81c2      	strh	r2, [r0, #14]
 801fcb2:	6103      	str	r3, [r0, #16]
 801fcb4:	6143      	str	r3, [r0, #20]
 801fcb6:	6183      	str	r3, [r0, #24]
 801fcb8:	0019      	movs	r1, r3
 801fcba:	2208      	movs	r2, #8
 801fcbc:	305c      	adds	r0, #92	@ 0x5c
 801fcbe:	f000 fa67 	bl	8020190 <memset>
 801fcc2:	4b0b      	ldr	r3, [pc, #44]	@ (801fcf0 <std+0x50>)
 801fcc4:	6224      	str	r4, [r4, #32]
 801fcc6:	6263      	str	r3, [r4, #36]	@ 0x24
 801fcc8:	4b0a      	ldr	r3, [pc, #40]	@ (801fcf4 <std+0x54>)
 801fcca:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fccc:	4b0a      	ldr	r3, [pc, #40]	@ (801fcf8 <std+0x58>)
 801fcce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fcd0:	4b0a      	ldr	r3, [pc, #40]	@ (801fcfc <std+0x5c>)
 801fcd2:	6323      	str	r3, [r4, #48]	@ 0x30
 801fcd4:	4b0a      	ldr	r3, [pc, #40]	@ (801fd00 <std+0x60>)
 801fcd6:	429c      	cmp	r4, r3
 801fcd8:	d005      	beq.n	801fce6 <std+0x46>
 801fcda:	4b0a      	ldr	r3, [pc, #40]	@ (801fd04 <std+0x64>)
 801fcdc:	429c      	cmp	r4, r3
 801fcde:	d002      	beq.n	801fce6 <std+0x46>
 801fce0:	4b09      	ldr	r3, [pc, #36]	@ (801fd08 <std+0x68>)
 801fce2:	429c      	cmp	r4, r3
 801fce4:	d103      	bne.n	801fcee <std+0x4e>
 801fce6:	0020      	movs	r0, r4
 801fce8:	3058      	adds	r0, #88	@ 0x58
 801fcea:	f000 fb1f 	bl	802032c <__retarget_lock_init_recursive>
 801fcee:	bd10      	pop	{r4, pc}
 801fcf0:	0801ff49 	.word	0x0801ff49
 801fcf4:	0801ff71 	.word	0x0801ff71
 801fcf8:	0801ffa9 	.word	0x0801ffa9
 801fcfc:	0801ffd5 	.word	0x0801ffd5
 801fd00:	20003664 	.word	0x20003664
 801fd04:	200036cc 	.word	0x200036cc
 801fd08:	20003734 	.word	0x20003734

0801fd0c <stdio_exit_handler>:
 801fd0c:	b510      	push	{r4, lr}
 801fd0e:	4a03      	ldr	r2, [pc, #12]	@ (801fd1c <stdio_exit_handler+0x10>)
 801fd10:	4903      	ldr	r1, [pc, #12]	@ (801fd20 <stdio_exit_handler+0x14>)
 801fd12:	4804      	ldr	r0, [pc, #16]	@ (801fd24 <stdio_exit_handler+0x18>)
 801fd14:	f000 f86c 	bl	801fdf0 <_fwalk_sglue>
 801fd18:	bd10      	pop	{r4, pc}
 801fd1a:	46c0      	nop			@ (mov r8, r8)
 801fd1c:	20000254 	.word	0x20000254
 801fd20:	08022951 	.word	0x08022951
 801fd24:	200003d0 	.word	0x200003d0

0801fd28 <cleanup_stdio>:
 801fd28:	6841      	ldr	r1, [r0, #4]
 801fd2a:	4b0b      	ldr	r3, [pc, #44]	@ (801fd58 <cleanup_stdio+0x30>)
 801fd2c:	b510      	push	{r4, lr}
 801fd2e:	0004      	movs	r4, r0
 801fd30:	4299      	cmp	r1, r3
 801fd32:	d001      	beq.n	801fd38 <cleanup_stdio+0x10>
 801fd34:	f002 fe0c 	bl	8022950 <_fflush_r>
 801fd38:	68a1      	ldr	r1, [r4, #8]
 801fd3a:	4b08      	ldr	r3, [pc, #32]	@ (801fd5c <cleanup_stdio+0x34>)
 801fd3c:	4299      	cmp	r1, r3
 801fd3e:	d002      	beq.n	801fd46 <cleanup_stdio+0x1e>
 801fd40:	0020      	movs	r0, r4
 801fd42:	f002 fe05 	bl	8022950 <_fflush_r>
 801fd46:	68e1      	ldr	r1, [r4, #12]
 801fd48:	4b05      	ldr	r3, [pc, #20]	@ (801fd60 <cleanup_stdio+0x38>)
 801fd4a:	4299      	cmp	r1, r3
 801fd4c:	d002      	beq.n	801fd54 <cleanup_stdio+0x2c>
 801fd4e:	0020      	movs	r0, r4
 801fd50:	f002 fdfe 	bl	8022950 <_fflush_r>
 801fd54:	bd10      	pop	{r4, pc}
 801fd56:	46c0      	nop			@ (mov r8, r8)
 801fd58:	20003664 	.word	0x20003664
 801fd5c:	200036cc 	.word	0x200036cc
 801fd60:	20003734 	.word	0x20003734

0801fd64 <global_stdio_init.part.0>:
 801fd64:	b510      	push	{r4, lr}
 801fd66:	4b09      	ldr	r3, [pc, #36]	@ (801fd8c <global_stdio_init.part.0+0x28>)
 801fd68:	4a09      	ldr	r2, [pc, #36]	@ (801fd90 <global_stdio_init.part.0+0x2c>)
 801fd6a:	2104      	movs	r1, #4
 801fd6c:	601a      	str	r2, [r3, #0]
 801fd6e:	4809      	ldr	r0, [pc, #36]	@ (801fd94 <global_stdio_init.part.0+0x30>)
 801fd70:	2200      	movs	r2, #0
 801fd72:	f7ff ff95 	bl	801fca0 <std>
 801fd76:	2201      	movs	r2, #1
 801fd78:	2109      	movs	r1, #9
 801fd7a:	4807      	ldr	r0, [pc, #28]	@ (801fd98 <global_stdio_init.part.0+0x34>)
 801fd7c:	f7ff ff90 	bl	801fca0 <std>
 801fd80:	2202      	movs	r2, #2
 801fd82:	2112      	movs	r1, #18
 801fd84:	4805      	ldr	r0, [pc, #20]	@ (801fd9c <global_stdio_init.part.0+0x38>)
 801fd86:	f7ff ff8b 	bl	801fca0 <std>
 801fd8a:	bd10      	pop	{r4, pc}
 801fd8c:	2000379c 	.word	0x2000379c
 801fd90:	0801fd0d 	.word	0x0801fd0d
 801fd94:	20003664 	.word	0x20003664
 801fd98:	200036cc 	.word	0x200036cc
 801fd9c:	20003734 	.word	0x20003734

0801fda0 <__sfp_lock_acquire>:
 801fda0:	b510      	push	{r4, lr}
 801fda2:	4802      	ldr	r0, [pc, #8]	@ (801fdac <__sfp_lock_acquire+0xc>)
 801fda4:	f000 fac3 	bl	802032e <__retarget_lock_acquire_recursive>
 801fda8:	bd10      	pop	{r4, pc}
 801fdaa:	46c0      	nop			@ (mov r8, r8)
 801fdac:	200037a5 	.word	0x200037a5

0801fdb0 <__sfp_lock_release>:
 801fdb0:	b510      	push	{r4, lr}
 801fdb2:	4802      	ldr	r0, [pc, #8]	@ (801fdbc <__sfp_lock_release+0xc>)
 801fdb4:	f000 fabc 	bl	8020330 <__retarget_lock_release_recursive>
 801fdb8:	bd10      	pop	{r4, pc}
 801fdba:	46c0      	nop			@ (mov r8, r8)
 801fdbc:	200037a5 	.word	0x200037a5

0801fdc0 <__sinit>:
 801fdc0:	b510      	push	{r4, lr}
 801fdc2:	0004      	movs	r4, r0
 801fdc4:	f7ff ffec 	bl	801fda0 <__sfp_lock_acquire>
 801fdc8:	6a23      	ldr	r3, [r4, #32]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d002      	beq.n	801fdd4 <__sinit+0x14>
 801fdce:	f7ff ffef 	bl	801fdb0 <__sfp_lock_release>
 801fdd2:	bd10      	pop	{r4, pc}
 801fdd4:	4b04      	ldr	r3, [pc, #16]	@ (801fde8 <__sinit+0x28>)
 801fdd6:	6223      	str	r3, [r4, #32]
 801fdd8:	4b04      	ldr	r3, [pc, #16]	@ (801fdec <__sinit+0x2c>)
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d1f6      	bne.n	801fdce <__sinit+0xe>
 801fde0:	f7ff ffc0 	bl	801fd64 <global_stdio_init.part.0>
 801fde4:	e7f3      	b.n	801fdce <__sinit+0xe>
 801fde6:	46c0      	nop			@ (mov r8, r8)
 801fde8:	0801fd29 	.word	0x0801fd29
 801fdec:	2000379c 	.word	0x2000379c

0801fdf0 <_fwalk_sglue>:
 801fdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fdf2:	0014      	movs	r4, r2
 801fdf4:	2600      	movs	r6, #0
 801fdf6:	9000      	str	r0, [sp, #0]
 801fdf8:	9101      	str	r1, [sp, #4]
 801fdfa:	68a5      	ldr	r5, [r4, #8]
 801fdfc:	6867      	ldr	r7, [r4, #4]
 801fdfe:	3f01      	subs	r7, #1
 801fe00:	d504      	bpl.n	801fe0c <_fwalk_sglue+0x1c>
 801fe02:	6824      	ldr	r4, [r4, #0]
 801fe04:	2c00      	cmp	r4, #0
 801fe06:	d1f8      	bne.n	801fdfa <_fwalk_sglue+0xa>
 801fe08:	0030      	movs	r0, r6
 801fe0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fe0c:	89ab      	ldrh	r3, [r5, #12]
 801fe0e:	2b01      	cmp	r3, #1
 801fe10:	d908      	bls.n	801fe24 <_fwalk_sglue+0x34>
 801fe12:	220e      	movs	r2, #14
 801fe14:	5eab      	ldrsh	r3, [r5, r2]
 801fe16:	3301      	adds	r3, #1
 801fe18:	d004      	beq.n	801fe24 <_fwalk_sglue+0x34>
 801fe1a:	0029      	movs	r1, r5
 801fe1c:	9800      	ldr	r0, [sp, #0]
 801fe1e:	9b01      	ldr	r3, [sp, #4]
 801fe20:	4798      	blx	r3
 801fe22:	4306      	orrs	r6, r0
 801fe24:	3568      	adds	r5, #104	@ 0x68
 801fe26:	e7ea      	b.n	801fdfe <_fwalk_sglue+0xe>

0801fe28 <iprintf>:
 801fe28:	b40f      	push	{r0, r1, r2, r3}
 801fe2a:	b507      	push	{r0, r1, r2, lr}
 801fe2c:	4905      	ldr	r1, [pc, #20]	@ (801fe44 <iprintf+0x1c>)
 801fe2e:	ab04      	add	r3, sp, #16
 801fe30:	6808      	ldr	r0, [r1, #0]
 801fe32:	cb04      	ldmia	r3!, {r2}
 801fe34:	6881      	ldr	r1, [r0, #8]
 801fe36:	9301      	str	r3, [sp, #4]
 801fe38:	f002 fbe8 	bl	802260c <_vfiprintf_r>
 801fe3c:	b003      	add	sp, #12
 801fe3e:	bc08      	pop	{r3}
 801fe40:	b004      	add	sp, #16
 801fe42:	4718      	bx	r3
 801fe44:	200003cc 	.word	0x200003cc

0801fe48 <_puts_r>:
 801fe48:	6a03      	ldr	r3, [r0, #32]
 801fe4a:	b570      	push	{r4, r5, r6, lr}
 801fe4c:	0005      	movs	r5, r0
 801fe4e:	000e      	movs	r6, r1
 801fe50:	6884      	ldr	r4, [r0, #8]
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d101      	bne.n	801fe5a <_puts_r+0x12>
 801fe56:	f7ff ffb3 	bl	801fdc0 <__sinit>
 801fe5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fe5c:	07db      	lsls	r3, r3, #31
 801fe5e:	d405      	bmi.n	801fe6c <_puts_r+0x24>
 801fe60:	89a3      	ldrh	r3, [r4, #12]
 801fe62:	059b      	lsls	r3, r3, #22
 801fe64:	d402      	bmi.n	801fe6c <_puts_r+0x24>
 801fe66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fe68:	f000 fa61 	bl	802032e <__retarget_lock_acquire_recursive>
 801fe6c:	89a3      	ldrh	r3, [r4, #12]
 801fe6e:	071b      	lsls	r3, r3, #28
 801fe70:	d502      	bpl.n	801fe78 <_puts_r+0x30>
 801fe72:	6923      	ldr	r3, [r4, #16]
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d11f      	bne.n	801feb8 <_puts_r+0x70>
 801fe78:	0021      	movs	r1, r4
 801fe7a:	0028      	movs	r0, r5
 801fe7c:	f000 f92a 	bl	80200d4 <__swsetup_r>
 801fe80:	2800      	cmp	r0, #0
 801fe82:	d019      	beq.n	801feb8 <_puts_r+0x70>
 801fe84:	2501      	movs	r5, #1
 801fe86:	426d      	negs	r5, r5
 801fe88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fe8a:	07db      	lsls	r3, r3, #31
 801fe8c:	d405      	bmi.n	801fe9a <_puts_r+0x52>
 801fe8e:	89a3      	ldrh	r3, [r4, #12]
 801fe90:	059b      	lsls	r3, r3, #22
 801fe92:	d402      	bmi.n	801fe9a <_puts_r+0x52>
 801fe94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fe96:	f000 fa4b 	bl	8020330 <__retarget_lock_release_recursive>
 801fe9a:	0028      	movs	r0, r5
 801fe9c:	bd70      	pop	{r4, r5, r6, pc}
 801fe9e:	3601      	adds	r6, #1
 801fea0:	60a3      	str	r3, [r4, #8]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	da04      	bge.n	801feb0 <_puts_r+0x68>
 801fea6:	69a2      	ldr	r2, [r4, #24]
 801fea8:	429a      	cmp	r2, r3
 801feaa:	dc16      	bgt.n	801feda <_puts_r+0x92>
 801feac:	290a      	cmp	r1, #10
 801feae:	d014      	beq.n	801feda <_puts_r+0x92>
 801feb0:	6823      	ldr	r3, [r4, #0]
 801feb2:	1c5a      	adds	r2, r3, #1
 801feb4:	6022      	str	r2, [r4, #0]
 801feb6:	7019      	strb	r1, [r3, #0]
 801feb8:	68a3      	ldr	r3, [r4, #8]
 801feba:	7831      	ldrb	r1, [r6, #0]
 801febc:	3b01      	subs	r3, #1
 801febe:	2900      	cmp	r1, #0
 801fec0:	d1ed      	bne.n	801fe9e <_puts_r+0x56>
 801fec2:	60a3      	str	r3, [r4, #8]
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	da0f      	bge.n	801fee8 <_puts_r+0xa0>
 801fec8:	0022      	movs	r2, r4
 801feca:	0028      	movs	r0, r5
 801fecc:	310a      	adds	r1, #10
 801fece:	f000 f8bf 	bl	8020050 <__swbuf_r>
 801fed2:	3001      	adds	r0, #1
 801fed4:	d0d6      	beq.n	801fe84 <_puts_r+0x3c>
 801fed6:	250a      	movs	r5, #10
 801fed8:	e7d6      	b.n	801fe88 <_puts_r+0x40>
 801feda:	0022      	movs	r2, r4
 801fedc:	0028      	movs	r0, r5
 801fede:	f000 f8b7 	bl	8020050 <__swbuf_r>
 801fee2:	3001      	adds	r0, #1
 801fee4:	d1e8      	bne.n	801feb8 <_puts_r+0x70>
 801fee6:	e7cd      	b.n	801fe84 <_puts_r+0x3c>
 801fee8:	6823      	ldr	r3, [r4, #0]
 801feea:	1c5a      	adds	r2, r3, #1
 801feec:	6022      	str	r2, [r4, #0]
 801feee:	220a      	movs	r2, #10
 801fef0:	701a      	strb	r2, [r3, #0]
 801fef2:	e7f0      	b.n	801fed6 <_puts_r+0x8e>

0801fef4 <puts>:
 801fef4:	b510      	push	{r4, lr}
 801fef6:	4b03      	ldr	r3, [pc, #12]	@ (801ff04 <puts+0x10>)
 801fef8:	0001      	movs	r1, r0
 801fefa:	6818      	ldr	r0, [r3, #0]
 801fefc:	f7ff ffa4 	bl	801fe48 <_puts_r>
 801ff00:	bd10      	pop	{r4, pc}
 801ff02:	46c0      	nop			@ (mov r8, r8)
 801ff04:	200003cc 	.word	0x200003cc

0801ff08 <siprintf>:
 801ff08:	b40e      	push	{r1, r2, r3}
 801ff0a:	b500      	push	{lr}
 801ff0c:	490b      	ldr	r1, [pc, #44]	@ (801ff3c <siprintf+0x34>)
 801ff0e:	b09c      	sub	sp, #112	@ 0x70
 801ff10:	ab1d      	add	r3, sp, #116	@ 0x74
 801ff12:	9002      	str	r0, [sp, #8]
 801ff14:	9006      	str	r0, [sp, #24]
 801ff16:	9107      	str	r1, [sp, #28]
 801ff18:	9104      	str	r1, [sp, #16]
 801ff1a:	4809      	ldr	r0, [pc, #36]	@ (801ff40 <siprintf+0x38>)
 801ff1c:	4909      	ldr	r1, [pc, #36]	@ (801ff44 <siprintf+0x3c>)
 801ff1e:	cb04      	ldmia	r3!, {r2}
 801ff20:	9105      	str	r1, [sp, #20]
 801ff22:	6800      	ldr	r0, [r0, #0]
 801ff24:	a902      	add	r1, sp, #8
 801ff26:	9301      	str	r3, [sp, #4]
 801ff28:	f002 fa4a 	bl	80223c0 <_svfiprintf_r>
 801ff2c:	2200      	movs	r2, #0
 801ff2e:	9b02      	ldr	r3, [sp, #8]
 801ff30:	701a      	strb	r2, [r3, #0]
 801ff32:	b01c      	add	sp, #112	@ 0x70
 801ff34:	bc08      	pop	{r3}
 801ff36:	b003      	add	sp, #12
 801ff38:	4718      	bx	r3
 801ff3a:	46c0      	nop			@ (mov r8, r8)
 801ff3c:	7fffffff 	.word	0x7fffffff
 801ff40:	200003cc 	.word	0x200003cc
 801ff44:	ffff0208 	.word	0xffff0208

0801ff48 <__sread>:
 801ff48:	b570      	push	{r4, r5, r6, lr}
 801ff4a:	000c      	movs	r4, r1
 801ff4c:	250e      	movs	r5, #14
 801ff4e:	5f49      	ldrsh	r1, [r1, r5]
 801ff50:	f000 f99a 	bl	8020288 <_read_r>
 801ff54:	2800      	cmp	r0, #0
 801ff56:	db03      	blt.n	801ff60 <__sread+0x18>
 801ff58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ff5a:	181b      	adds	r3, r3, r0
 801ff5c:	6563      	str	r3, [r4, #84]	@ 0x54
 801ff5e:	bd70      	pop	{r4, r5, r6, pc}
 801ff60:	89a3      	ldrh	r3, [r4, #12]
 801ff62:	4a02      	ldr	r2, [pc, #8]	@ (801ff6c <__sread+0x24>)
 801ff64:	4013      	ands	r3, r2
 801ff66:	81a3      	strh	r3, [r4, #12]
 801ff68:	e7f9      	b.n	801ff5e <__sread+0x16>
 801ff6a:	46c0      	nop			@ (mov r8, r8)
 801ff6c:	ffffefff 	.word	0xffffefff

0801ff70 <__swrite>:
 801ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff72:	001f      	movs	r7, r3
 801ff74:	898b      	ldrh	r3, [r1, #12]
 801ff76:	0005      	movs	r5, r0
 801ff78:	000c      	movs	r4, r1
 801ff7a:	0016      	movs	r6, r2
 801ff7c:	05db      	lsls	r3, r3, #23
 801ff7e:	d505      	bpl.n	801ff8c <__swrite+0x1c>
 801ff80:	230e      	movs	r3, #14
 801ff82:	5ec9      	ldrsh	r1, [r1, r3]
 801ff84:	2200      	movs	r2, #0
 801ff86:	2302      	movs	r3, #2
 801ff88:	f000 f96a 	bl	8020260 <_lseek_r>
 801ff8c:	89a3      	ldrh	r3, [r4, #12]
 801ff8e:	4a05      	ldr	r2, [pc, #20]	@ (801ffa4 <__swrite+0x34>)
 801ff90:	0028      	movs	r0, r5
 801ff92:	4013      	ands	r3, r2
 801ff94:	81a3      	strh	r3, [r4, #12]
 801ff96:	0032      	movs	r2, r6
 801ff98:	230e      	movs	r3, #14
 801ff9a:	5ee1      	ldrsh	r1, [r4, r3]
 801ff9c:	003b      	movs	r3, r7
 801ff9e:	f000 f987 	bl	80202b0 <_write_r>
 801ffa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffa4:	ffffefff 	.word	0xffffefff

0801ffa8 <__sseek>:
 801ffa8:	b570      	push	{r4, r5, r6, lr}
 801ffaa:	000c      	movs	r4, r1
 801ffac:	250e      	movs	r5, #14
 801ffae:	5f49      	ldrsh	r1, [r1, r5]
 801ffb0:	f000 f956 	bl	8020260 <_lseek_r>
 801ffb4:	89a3      	ldrh	r3, [r4, #12]
 801ffb6:	1c42      	adds	r2, r0, #1
 801ffb8:	d103      	bne.n	801ffc2 <__sseek+0x1a>
 801ffba:	4a05      	ldr	r2, [pc, #20]	@ (801ffd0 <__sseek+0x28>)
 801ffbc:	4013      	ands	r3, r2
 801ffbe:	81a3      	strh	r3, [r4, #12]
 801ffc0:	bd70      	pop	{r4, r5, r6, pc}
 801ffc2:	2280      	movs	r2, #128	@ 0x80
 801ffc4:	0152      	lsls	r2, r2, #5
 801ffc6:	4313      	orrs	r3, r2
 801ffc8:	81a3      	strh	r3, [r4, #12]
 801ffca:	6560      	str	r0, [r4, #84]	@ 0x54
 801ffcc:	e7f8      	b.n	801ffc0 <__sseek+0x18>
 801ffce:	46c0      	nop			@ (mov r8, r8)
 801ffd0:	ffffefff 	.word	0xffffefff

0801ffd4 <__sclose>:
 801ffd4:	b510      	push	{r4, lr}
 801ffd6:	230e      	movs	r3, #14
 801ffd8:	5ec9      	ldrsh	r1, [r1, r3]
 801ffda:	f000 f92f 	bl	802023c <_close_r>
 801ffde:	bd10      	pop	{r4, pc}

0801ffe0 <_vsniprintf_r>:
 801ffe0:	b530      	push	{r4, r5, lr}
 801ffe2:	0014      	movs	r4, r2
 801ffe4:	0005      	movs	r5, r0
 801ffe6:	001a      	movs	r2, r3
 801ffe8:	b09b      	sub	sp, #108	@ 0x6c
 801ffea:	2c00      	cmp	r4, #0
 801ffec:	da05      	bge.n	801fffa <_vsniprintf_r+0x1a>
 801ffee:	238b      	movs	r3, #139	@ 0x8b
 801fff0:	6003      	str	r3, [r0, #0]
 801fff2:	2001      	movs	r0, #1
 801fff4:	4240      	negs	r0, r0
 801fff6:	b01b      	add	sp, #108	@ 0x6c
 801fff8:	bd30      	pop	{r4, r5, pc}
 801fffa:	2382      	movs	r3, #130	@ 0x82
 801fffc:	4668      	mov	r0, sp
 801fffe:	009b      	lsls	r3, r3, #2
 8020000:	8183      	strh	r3, [r0, #12]
 8020002:	2300      	movs	r3, #0
 8020004:	9100      	str	r1, [sp, #0]
 8020006:	9104      	str	r1, [sp, #16]
 8020008:	429c      	cmp	r4, r3
 802000a:	d000      	beq.n	802000e <_vsniprintf_r+0x2e>
 802000c:	1e63      	subs	r3, r4, #1
 802000e:	9302      	str	r3, [sp, #8]
 8020010:	9305      	str	r3, [sp, #20]
 8020012:	2301      	movs	r3, #1
 8020014:	4669      	mov	r1, sp
 8020016:	425b      	negs	r3, r3
 8020018:	81cb      	strh	r3, [r1, #14]
 802001a:	0028      	movs	r0, r5
 802001c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802001e:	f002 f9cf 	bl	80223c0 <_svfiprintf_r>
 8020022:	1c43      	adds	r3, r0, #1
 8020024:	da01      	bge.n	802002a <_vsniprintf_r+0x4a>
 8020026:	238b      	movs	r3, #139	@ 0x8b
 8020028:	602b      	str	r3, [r5, #0]
 802002a:	2c00      	cmp	r4, #0
 802002c:	d0e3      	beq.n	801fff6 <_vsniprintf_r+0x16>
 802002e:	2200      	movs	r2, #0
 8020030:	9b00      	ldr	r3, [sp, #0]
 8020032:	701a      	strb	r2, [r3, #0]
 8020034:	e7df      	b.n	801fff6 <_vsniprintf_r+0x16>
	...

08020038 <vsniprintf>:
 8020038:	b513      	push	{r0, r1, r4, lr}
 802003a:	4c04      	ldr	r4, [pc, #16]	@ (802004c <vsniprintf+0x14>)
 802003c:	9300      	str	r3, [sp, #0]
 802003e:	0013      	movs	r3, r2
 8020040:	000a      	movs	r2, r1
 8020042:	0001      	movs	r1, r0
 8020044:	6820      	ldr	r0, [r4, #0]
 8020046:	f7ff ffcb 	bl	801ffe0 <_vsniprintf_r>
 802004a:	bd16      	pop	{r1, r2, r4, pc}
 802004c:	200003cc 	.word	0x200003cc

08020050 <__swbuf_r>:
 8020050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020052:	0006      	movs	r6, r0
 8020054:	000d      	movs	r5, r1
 8020056:	0014      	movs	r4, r2
 8020058:	2800      	cmp	r0, #0
 802005a:	d004      	beq.n	8020066 <__swbuf_r+0x16>
 802005c:	6a03      	ldr	r3, [r0, #32]
 802005e:	2b00      	cmp	r3, #0
 8020060:	d101      	bne.n	8020066 <__swbuf_r+0x16>
 8020062:	f7ff fead 	bl	801fdc0 <__sinit>
 8020066:	69a3      	ldr	r3, [r4, #24]
 8020068:	60a3      	str	r3, [r4, #8]
 802006a:	89a3      	ldrh	r3, [r4, #12]
 802006c:	071b      	lsls	r3, r3, #28
 802006e:	d502      	bpl.n	8020076 <__swbuf_r+0x26>
 8020070:	6923      	ldr	r3, [r4, #16]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d109      	bne.n	802008a <__swbuf_r+0x3a>
 8020076:	0021      	movs	r1, r4
 8020078:	0030      	movs	r0, r6
 802007a:	f000 f82b 	bl	80200d4 <__swsetup_r>
 802007e:	2800      	cmp	r0, #0
 8020080:	d003      	beq.n	802008a <__swbuf_r+0x3a>
 8020082:	2501      	movs	r5, #1
 8020084:	426d      	negs	r5, r5
 8020086:	0028      	movs	r0, r5
 8020088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802008a:	6923      	ldr	r3, [r4, #16]
 802008c:	6820      	ldr	r0, [r4, #0]
 802008e:	b2ef      	uxtb	r7, r5
 8020090:	1ac0      	subs	r0, r0, r3
 8020092:	6963      	ldr	r3, [r4, #20]
 8020094:	b2ed      	uxtb	r5, r5
 8020096:	4283      	cmp	r3, r0
 8020098:	dc05      	bgt.n	80200a6 <__swbuf_r+0x56>
 802009a:	0021      	movs	r1, r4
 802009c:	0030      	movs	r0, r6
 802009e:	f002 fc57 	bl	8022950 <_fflush_r>
 80200a2:	2800      	cmp	r0, #0
 80200a4:	d1ed      	bne.n	8020082 <__swbuf_r+0x32>
 80200a6:	68a3      	ldr	r3, [r4, #8]
 80200a8:	3001      	adds	r0, #1
 80200aa:	3b01      	subs	r3, #1
 80200ac:	60a3      	str	r3, [r4, #8]
 80200ae:	6823      	ldr	r3, [r4, #0]
 80200b0:	1c5a      	adds	r2, r3, #1
 80200b2:	6022      	str	r2, [r4, #0]
 80200b4:	701f      	strb	r7, [r3, #0]
 80200b6:	6963      	ldr	r3, [r4, #20]
 80200b8:	4283      	cmp	r3, r0
 80200ba:	d004      	beq.n	80200c6 <__swbuf_r+0x76>
 80200bc:	89a3      	ldrh	r3, [r4, #12]
 80200be:	07db      	lsls	r3, r3, #31
 80200c0:	d5e1      	bpl.n	8020086 <__swbuf_r+0x36>
 80200c2:	2d0a      	cmp	r5, #10
 80200c4:	d1df      	bne.n	8020086 <__swbuf_r+0x36>
 80200c6:	0021      	movs	r1, r4
 80200c8:	0030      	movs	r0, r6
 80200ca:	f002 fc41 	bl	8022950 <_fflush_r>
 80200ce:	2800      	cmp	r0, #0
 80200d0:	d0d9      	beq.n	8020086 <__swbuf_r+0x36>
 80200d2:	e7d6      	b.n	8020082 <__swbuf_r+0x32>

080200d4 <__swsetup_r>:
 80200d4:	4b2d      	ldr	r3, [pc, #180]	@ (802018c <__swsetup_r+0xb8>)
 80200d6:	b570      	push	{r4, r5, r6, lr}
 80200d8:	0005      	movs	r5, r0
 80200da:	6818      	ldr	r0, [r3, #0]
 80200dc:	000c      	movs	r4, r1
 80200de:	2800      	cmp	r0, #0
 80200e0:	d004      	beq.n	80200ec <__swsetup_r+0x18>
 80200e2:	6a03      	ldr	r3, [r0, #32]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d101      	bne.n	80200ec <__swsetup_r+0x18>
 80200e8:	f7ff fe6a 	bl	801fdc0 <__sinit>
 80200ec:	230c      	movs	r3, #12
 80200ee:	5ee2      	ldrsh	r2, [r4, r3]
 80200f0:	0713      	lsls	r3, r2, #28
 80200f2:	d423      	bmi.n	802013c <__swsetup_r+0x68>
 80200f4:	06d3      	lsls	r3, r2, #27
 80200f6:	d407      	bmi.n	8020108 <__swsetup_r+0x34>
 80200f8:	2309      	movs	r3, #9
 80200fa:	602b      	str	r3, [r5, #0]
 80200fc:	2340      	movs	r3, #64	@ 0x40
 80200fe:	2001      	movs	r0, #1
 8020100:	4313      	orrs	r3, r2
 8020102:	81a3      	strh	r3, [r4, #12]
 8020104:	4240      	negs	r0, r0
 8020106:	e03a      	b.n	802017e <__swsetup_r+0xaa>
 8020108:	0752      	lsls	r2, r2, #29
 802010a:	d513      	bpl.n	8020134 <__swsetup_r+0x60>
 802010c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802010e:	2900      	cmp	r1, #0
 8020110:	d008      	beq.n	8020124 <__swsetup_r+0x50>
 8020112:	0023      	movs	r3, r4
 8020114:	3344      	adds	r3, #68	@ 0x44
 8020116:	4299      	cmp	r1, r3
 8020118:	d002      	beq.n	8020120 <__swsetup_r+0x4c>
 802011a:	0028      	movs	r0, r5
 802011c:	f000 ffa6 	bl	802106c <_free_r>
 8020120:	2300      	movs	r3, #0
 8020122:	6363      	str	r3, [r4, #52]	@ 0x34
 8020124:	2224      	movs	r2, #36	@ 0x24
 8020126:	89a3      	ldrh	r3, [r4, #12]
 8020128:	4393      	bics	r3, r2
 802012a:	81a3      	strh	r3, [r4, #12]
 802012c:	2300      	movs	r3, #0
 802012e:	6063      	str	r3, [r4, #4]
 8020130:	6923      	ldr	r3, [r4, #16]
 8020132:	6023      	str	r3, [r4, #0]
 8020134:	2308      	movs	r3, #8
 8020136:	89a2      	ldrh	r2, [r4, #12]
 8020138:	4313      	orrs	r3, r2
 802013a:	81a3      	strh	r3, [r4, #12]
 802013c:	6923      	ldr	r3, [r4, #16]
 802013e:	2b00      	cmp	r3, #0
 8020140:	d10b      	bne.n	802015a <__swsetup_r+0x86>
 8020142:	21a0      	movs	r1, #160	@ 0xa0
 8020144:	2280      	movs	r2, #128	@ 0x80
 8020146:	89a3      	ldrh	r3, [r4, #12]
 8020148:	0089      	lsls	r1, r1, #2
 802014a:	0092      	lsls	r2, r2, #2
 802014c:	400b      	ands	r3, r1
 802014e:	4293      	cmp	r3, r2
 8020150:	d003      	beq.n	802015a <__swsetup_r+0x86>
 8020152:	0021      	movs	r1, r4
 8020154:	0028      	movs	r0, r5
 8020156:	f002 fc51 	bl	80229fc <__smakebuf_r>
 802015a:	230c      	movs	r3, #12
 802015c:	5ee2      	ldrsh	r2, [r4, r3]
 802015e:	2101      	movs	r1, #1
 8020160:	0013      	movs	r3, r2
 8020162:	400b      	ands	r3, r1
 8020164:	420a      	tst	r2, r1
 8020166:	d00b      	beq.n	8020180 <__swsetup_r+0xac>
 8020168:	2300      	movs	r3, #0
 802016a:	60a3      	str	r3, [r4, #8]
 802016c:	6963      	ldr	r3, [r4, #20]
 802016e:	425b      	negs	r3, r3
 8020170:	61a3      	str	r3, [r4, #24]
 8020172:	2000      	movs	r0, #0
 8020174:	6923      	ldr	r3, [r4, #16]
 8020176:	4283      	cmp	r3, r0
 8020178:	d101      	bne.n	802017e <__swsetup_r+0xaa>
 802017a:	0613      	lsls	r3, r2, #24
 802017c:	d4be      	bmi.n	80200fc <__swsetup_r+0x28>
 802017e:	bd70      	pop	{r4, r5, r6, pc}
 8020180:	0791      	lsls	r1, r2, #30
 8020182:	d400      	bmi.n	8020186 <__swsetup_r+0xb2>
 8020184:	6963      	ldr	r3, [r4, #20]
 8020186:	60a3      	str	r3, [r4, #8]
 8020188:	e7f3      	b.n	8020172 <__swsetup_r+0x9e>
 802018a:	46c0      	nop			@ (mov r8, r8)
 802018c:	200003cc 	.word	0x200003cc

08020190 <memset>:
 8020190:	0003      	movs	r3, r0
 8020192:	1882      	adds	r2, r0, r2
 8020194:	4293      	cmp	r3, r2
 8020196:	d100      	bne.n	802019a <memset+0xa>
 8020198:	4770      	bx	lr
 802019a:	7019      	strb	r1, [r3, #0]
 802019c:	3301      	adds	r3, #1
 802019e:	e7f9      	b.n	8020194 <memset+0x4>

080201a0 <strchr>:
 80201a0:	b2c9      	uxtb	r1, r1
 80201a2:	7803      	ldrb	r3, [r0, #0]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d004      	beq.n	80201b2 <strchr+0x12>
 80201a8:	428b      	cmp	r3, r1
 80201aa:	d100      	bne.n	80201ae <strchr+0xe>
 80201ac:	4770      	bx	lr
 80201ae:	3001      	adds	r0, #1
 80201b0:	e7f7      	b.n	80201a2 <strchr+0x2>
 80201b2:	424b      	negs	r3, r1
 80201b4:	4159      	adcs	r1, r3
 80201b6:	4249      	negs	r1, r1
 80201b8:	4008      	ands	r0, r1
 80201ba:	e7f7      	b.n	80201ac <strchr+0xc>

080201bc <strncmp>:
 80201bc:	b530      	push	{r4, r5, lr}
 80201be:	0005      	movs	r5, r0
 80201c0:	1e10      	subs	r0, r2, #0
 80201c2:	d00b      	beq.n	80201dc <strncmp+0x20>
 80201c4:	2400      	movs	r4, #0
 80201c6:	3a01      	subs	r2, #1
 80201c8:	5d2b      	ldrb	r3, [r5, r4]
 80201ca:	5d08      	ldrb	r0, [r1, r4]
 80201cc:	4283      	cmp	r3, r0
 80201ce:	d104      	bne.n	80201da <strncmp+0x1e>
 80201d0:	42a2      	cmp	r2, r4
 80201d2:	d002      	beq.n	80201da <strncmp+0x1e>
 80201d4:	3401      	adds	r4, #1
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	d1f6      	bne.n	80201c8 <strncmp+0xc>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	bd30      	pop	{r4, r5, pc}

080201de <strncpy>:
 80201de:	0003      	movs	r3, r0
 80201e0:	b530      	push	{r4, r5, lr}
 80201e2:	001d      	movs	r5, r3
 80201e4:	2a00      	cmp	r2, #0
 80201e6:	d006      	beq.n	80201f6 <strncpy+0x18>
 80201e8:	780c      	ldrb	r4, [r1, #0]
 80201ea:	3a01      	subs	r2, #1
 80201ec:	3301      	adds	r3, #1
 80201ee:	702c      	strb	r4, [r5, #0]
 80201f0:	3101      	adds	r1, #1
 80201f2:	2c00      	cmp	r4, #0
 80201f4:	d1f5      	bne.n	80201e2 <strncpy+0x4>
 80201f6:	2100      	movs	r1, #0
 80201f8:	189a      	adds	r2, r3, r2
 80201fa:	4293      	cmp	r3, r2
 80201fc:	d100      	bne.n	8020200 <strncpy+0x22>
 80201fe:	bd30      	pop	{r4, r5, pc}
 8020200:	7019      	strb	r1, [r3, #0]
 8020202:	3301      	adds	r3, #1
 8020204:	e7f9      	b.n	80201fa <strncpy+0x1c>

08020206 <strstr>:
 8020206:	780a      	ldrb	r2, [r1, #0]
 8020208:	b530      	push	{r4, r5, lr}
 802020a:	2a00      	cmp	r2, #0
 802020c:	d10c      	bne.n	8020228 <strstr+0x22>
 802020e:	bd30      	pop	{r4, r5, pc}
 8020210:	429a      	cmp	r2, r3
 8020212:	d108      	bne.n	8020226 <strstr+0x20>
 8020214:	2301      	movs	r3, #1
 8020216:	5ccc      	ldrb	r4, [r1, r3]
 8020218:	2c00      	cmp	r4, #0
 802021a:	d0f8      	beq.n	802020e <strstr+0x8>
 802021c:	5cc5      	ldrb	r5, [r0, r3]
 802021e:	42a5      	cmp	r5, r4
 8020220:	d101      	bne.n	8020226 <strstr+0x20>
 8020222:	3301      	adds	r3, #1
 8020224:	e7f7      	b.n	8020216 <strstr+0x10>
 8020226:	3001      	adds	r0, #1
 8020228:	7803      	ldrb	r3, [r0, #0]
 802022a:	2b00      	cmp	r3, #0
 802022c:	d1f0      	bne.n	8020210 <strstr+0xa>
 802022e:	0018      	movs	r0, r3
 8020230:	e7ed      	b.n	802020e <strstr+0x8>
	...

08020234 <_localeconv_r>:
 8020234:	4800      	ldr	r0, [pc, #0]	@ (8020238 <_localeconv_r+0x4>)
 8020236:	4770      	bx	lr
 8020238:	20000350 	.word	0x20000350

0802023c <_close_r>:
 802023c:	2300      	movs	r3, #0
 802023e:	b570      	push	{r4, r5, r6, lr}
 8020240:	4d06      	ldr	r5, [pc, #24]	@ (802025c <_close_r+0x20>)
 8020242:	0004      	movs	r4, r0
 8020244:	0008      	movs	r0, r1
 8020246:	602b      	str	r3, [r5, #0]
 8020248:	f7ed fca2 	bl	800db90 <_close>
 802024c:	1c43      	adds	r3, r0, #1
 802024e:	d103      	bne.n	8020258 <_close_r+0x1c>
 8020250:	682b      	ldr	r3, [r5, #0]
 8020252:	2b00      	cmp	r3, #0
 8020254:	d000      	beq.n	8020258 <_close_r+0x1c>
 8020256:	6023      	str	r3, [r4, #0]
 8020258:	bd70      	pop	{r4, r5, r6, pc}
 802025a:	46c0      	nop			@ (mov r8, r8)
 802025c:	200037a0 	.word	0x200037a0

08020260 <_lseek_r>:
 8020260:	b570      	push	{r4, r5, r6, lr}
 8020262:	0004      	movs	r4, r0
 8020264:	0008      	movs	r0, r1
 8020266:	0011      	movs	r1, r2
 8020268:	001a      	movs	r2, r3
 802026a:	2300      	movs	r3, #0
 802026c:	4d05      	ldr	r5, [pc, #20]	@ (8020284 <_lseek_r+0x24>)
 802026e:	602b      	str	r3, [r5, #0]
 8020270:	f7ed fcaf 	bl	800dbd2 <_lseek>
 8020274:	1c43      	adds	r3, r0, #1
 8020276:	d103      	bne.n	8020280 <_lseek_r+0x20>
 8020278:	682b      	ldr	r3, [r5, #0]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d000      	beq.n	8020280 <_lseek_r+0x20>
 802027e:	6023      	str	r3, [r4, #0]
 8020280:	bd70      	pop	{r4, r5, r6, pc}
 8020282:	46c0      	nop			@ (mov r8, r8)
 8020284:	200037a0 	.word	0x200037a0

08020288 <_read_r>:
 8020288:	b570      	push	{r4, r5, r6, lr}
 802028a:	0004      	movs	r4, r0
 802028c:	0008      	movs	r0, r1
 802028e:	0011      	movs	r1, r2
 8020290:	001a      	movs	r2, r3
 8020292:	2300      	movs	r3, #0
 8020294:	4d05      	ldr	r5, [pc, #20]	@ (80202ac <_read_r+0x24>)
 8020296:	602b      	str	r3, [r5, #0]
 8020298:	f7ed fc5d 	bl	800db56 <_read>
 802029c:	1c43      	adds	r3, r0, #1
 802029e:	d103      	bne.n	80202a8 <_read_r+0x20>
 80202a0:	682b      	ldr	r3, [r5, #0]
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d000      	beq.n	80202a8 <_read_r+0x20>
 80202a6:	6023      	str	r3, [r4, #0]
 80202a8:	bd70      	pop	{r4, r5, r6, pc}
 80202aa:	46c0      	nop			@ (mov r8, r8)
 80202ac:	200037a0 	.word	0x200037a0

080202b0 <_write_r>:
 80202b0:	b570      	push	{r4, r5, r6, lr}
 80202b2:	0004      	movs	r4, r0
 80202b4:	0008      	movs	r0, r1
 80202b6:	0011      	movs	r1, r2
 80202b8:	001a      	movs	r2, r3
 80202ba:	2300      	movs	r3, #0
 80202bc:	4d05      	ldr	r5, [pc, #20]	@ (80202d4 <_write_r+0x24>)
 80202be:	602b      	str	r3, [r5, #0]
 80202c0:	f7ee f91e 	bl	800e500 <_write>
 80202c4:	1c43      	adds	r3, r0, #1
 80202c6:	d103      	bne.n	80202d0 <_write_r+0x20>
 80202c8:	682b      	ldr	r3, [r5, #0]
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d000      	beq.n	80202d0 <_write_r+0x20>
 80202ce:	6023      	str	r3, [r4, #0]
 80202d0:	bd70      	pop	{r4, r5, r6, pc}
 80202d2:	46c0      	nop			@ (mov r8, r8)
 80202d4:	200037a0 	.word	0x200037a0

080202d8 <__errno>:
 80202d8:	4b01      	ldr	r3, [pc, #4]	@ (80202e0 <__errno+0x8>)
 80202da:	6818      	ldr	r0, [r3, #0]
 80202dc:	4770      	bx	lr
 80202de:	46c0      	nop			@ (mov r8, r8)
 80202e0:	200003cc 	.word	0x200003cc

080202e4 <__libc_init_array>:
 80202e4:	b570      	push	{r4, r5, r6, lr}
 80202e6:	2600      	movs	r6, #0
 80202e8:	4c0c      	ldr	r4, [pc, #48]	@ (802031c <__libc_init_array+0x38>)
 80202ea:	4d0d      	ldr	r5, [pc, #52]	@ (8020320 <__libc_init_array+0x3c>)
 80202ec:	1b64      	subs	r4, r4, r5
 80202ee:	10a4      	asrs	r4, r4, #2
 80202f0:	42a6      	cmp	r6, r4
 80202f2:	d109      	bne.n	8020308 <__libc_init_array+0x24>
 80202f4:	2600      	movs	r6, #0
 80202f6:	f002 fee9 	bl	80230cc <_init>
 80202fa:	4c0a      	ldr	r4, [pc, #40]	@ (8020324 <__libc_init_array+0x40>)
 80202fc:	4d0a      	ldr	r5, [pc, #40]	@ (8020328 <__libc_init_array+0x44>)
 80202fe:	1b64      	subs	r4, r4, r5
 8020300:	10a4      	asrs	r4, r4, #2
 8020302:	42a6      	cmp	r6, r4
 8020304:	d105      	bne.n	8020312 <__libc_init_array+0x2e>
 8020306:	bd70      	pop	{r4, r5, r6, pc}
 8020308:	00b3      	lsls	r3, r6, #2
 802030a:	58eb      	ldr	r3, [r5, r3]
 802030c:	4798      	blx	r3
 802030e:	3601      	adds	r6, #1
 8020310:	e7ee      	b.n	80202f0 <__libc_init_array+0xc>
 8020312:	00b3      	lsls	r3, r6, #2
 8020314:	58eb      	ldr	r3, [r5, r3]
 8020316:	4798      	blx	r3
 8020318:	3601      	adds	r6, #1
 802031a:	e7f2      	b.n	8020302 <__libc_init_array+0x1e>
 802031c:	08025fc0 	.word	0x08025fc0
 8020320:	08025fc0 	.word	0x08025fc0
 8020324:	08025fc4 	.word	0x08025fc4
 8020328:	08025fc0 	.word	0x08025fc0

0802032c <__retarget_lock_init_recursive>:
 802032c:	4770      	bx	lr

0802032e <__retarget_lock_acquire_recursive>:
 802032e:	4770      	bx	lr

08020330 <__retarget_lock_release_recursive>:
 8020330:	4770      	bx	lr

08020332 <memchr>:
 8020332:	b2c9      	uxtb	r1, r1
 8020334:	1882      	adds	r2, r0, r2
 8020336:	4290      	cmp	r0, r2
 8020338:	d101      	bne.n	802033e <memchr+0xc>
 802033a:	2000      	movs	r0, #0
 802033c:	4770      	bx	lr
 802033e:	7803      	ldrb	r3, [r0, #0]
 8020340:	428b      	cmp	r3, r1
 8020342:	d0fb      	beq.n	802033c <memchr+0xa>
 8020344:	3001      	adds	r0, #1
 8020346:	e7f6      	b.n	8020336 <memchr+0x4>

08020348 <memcpy>:
 8020348:	2300      	movs	r3, #0
 802034a:	b510      	push	{r4, lr}
 802034c:	429a      	cmp	r2, r3
 802034e:	d100      	bne.n	8020352 <memcpy+0xa>
 8020350:	bd10      	pop	{r4, pc}
 8020352:	5ccc      	ldrb	r4, [r1, r3]
 8020354:	54c4      	strb	r4, [r0, r3]
 8020356:	3301      	adds	r3, #1
 8020358:	e7f8      	b.n	802034c <memcpy+0x4>
	...

0802035c <nan>:
 802035c:	2000      	movs	r0, #0
 802035e:	4901      	ldr	r1, [pc, #4]	@ (8020364 <nan+0x8>)
 8020360:	4770      	bx	lr
 8020362:	46c0      	nop			@ (mov r8, r8)
 8020364:	7ff80000 	.word	0x7ff80000

08020368 <quorem>:
 8020368:	b5f0      	push	{r4, r5, r6, r7, lr}
 802036a:	6902      	ldr	r2, [r0, #16]
 802036c:	690f      	ldr	r7, [r1, #16]
 802036e:	b087      	sub	sp, #28
 8020370:	0006      	movs	r6, r0
 8020372:	000b      	movs	r3, r1
 8020374:	2000      	movs	r0, #0
 8020376:	9102      	str	r1, [sp, #8]
 8020378:	42ba      	cmp	r2, r7
 802037a:	db6d      	blt.n	8020458 <quorem+0xf0>
 802037c:	3f01      	subs	r7, #1
 802037e:	00bc      	lsls	r4, r7, #2
 8020380:	3314      	adds	r3, #20
 8020382:	9305      	str	r3, [sp, #20]
 8020384:	191b      	adds	r3, r3, r4
 8020386:	9303      	str	r3, [sp, #12]
 8020388:	0033      	movs	r3, r6
 802038a:	3314      	adds	r3, #20
 802038c:	191c      	adds	r4, r3, r4
 802038e:	9301      	str	r3, [sp, #4]
 8020390:	6823      	ldr	r3, [r4, #0]
 8020392:	9304      	str	r3, [sp, #16]
 8020394:	9b03      	ldr	r3, [sp, #12]
 8020396:	9804      	ldr	r0, [sp, #16]
 8020398:	681d      	ldr	r5, [r3, #0]
 802039a:	3501      	adds	r5, #1
 802039c:	0029      	movs	r1, r5
 802039e:	f7df ff01 	bl	80001a4 <__udivsi3>
 80203a2:	9b04      	ldr	r3, [sp, #16]
 80203a4:	9000      	str	r0, [sp, #0]
 80203a6:	42ab      	cmp	r3, r5
 80203a8:	d32b      	bcc.n	8020402 <quorem+0x9a>
 80203aa:	9b05      	ldr	r3, [sp, #20]
 80203ac:	9d01      	ldr	r5, [sp, #4]
 80203ae:	469c      	mov	ip, r3
 80203b0:	2300      	movs	r3, #0
 80203b2:	9305      	str	r3, [sp, #20]
 80203b4:	9304      	str	r3, [sp, #16]
 80203b6:	4662      	mov	r2, ip
 80203b8:	ca08      	ldmia	r2!, {r3}
 80203ba:	6828      	ldr	r0, [r5, #0]
 80203bc:	4694      	mov	ip, r2
 80203be:	9a00      	ldr	r2, [sp, #0]
 80203c0:	b299      	uxth	r1, r3
 80203c2:	4351      	muls	r1, r2
 80203c4:	9a05      	ldr	r2, [sp, #20]
 80203c6:	0c1b      	lsrs	r3, r3, #16
 80203c8:	1889      	adds	r1, r1, r2
 80203ca:	9a00      	ldr	r2, [sp, #0]
 80203cc:	4353      	muls	r3, r2
 80203ce:	0c0a      	lsrs	r2, r1, #16
 80203d0:	189b      	adds	r3, r3, r2
 80203d2:	0c1a      	lsrs	r2, r3, #16
 80203d4:	b289      	uxth	r1, r1
 80203d6:	9205      	str	r2, [sp, #20]
 80203d8:	b282      	uxth	r2, r0
 80203da:	1a52      	subs	r2, r2, r1
 80203dc:	9904      	ldr	r1, [sp, #16]
 80203de:	0c00      	lsrs	r0, r0, #16
 80203e0:	1852      	adds	r2, r2, r1
 80203e2:	b29b      	uxth	r3, r3
 80203e4:	1411      	asrs	r1, r2, #16
 80203e6:	1ac3      	subs	r3, r0, r3
 80203e8:	185b      	adds	r3, r3, r1
 80203ea:	1419      	asrs	r1, r3, #16
 80203ec:	b292      	uxth	r2, r2
 80203ee:	041b      	lsls	r3, r3, #16
 80203f0:	431a      	orrs	r2, r3
 80203f2:	9b03      	ldr	r3, [sp, #12]
 80203f4:	9104      	str	r1, [sp, #16]
 80203f6:	c504      	stmia	r5!, {r2}
 80203f8:	4563      	cmp	r3, ip
 80203fa:	d2dc      	bcs.n	80203b6 <quorem+0x4e>
 80203fc:	6823      	ldr	r3, [r4, #0]
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d030      	beq.n	8020464 <quorem+0xfc>
 8020402:	0030      	movs	r0, r6
 8020404:	9902      	ldr	r1, [sp, #8]
 8020406:	f001 fd7d 	bl	8021f04 <__mcmp>
 802040a:	2800      	cmp	r0, #0
 802040c:	db23      	blt.n	8020456 <quorem+0xee>
 802040e:	0034      	movs	r4, r6
 8020410:	2500      	movs	r5, #0
 8020412:	9902      	ldr	r1, [sp, #8]
 8020414:	3414      	adds	r4, #20
 8020416:	3114      	adds	r1, #20
 8020418:	6823      	ldr	r3, [r4, #0]
 802041a:	c901      	ldmia	r1!, {r0}
 802041c:	9302      	str	r3, [sp, #8]
 802041e:	466b      	mov	r3, sp
 8020420:	891b      	ldrh	r3, [r3, #8]
 8020422:	b282      	uxth	r2, r0
 8020424:	1a9a      	subs	r2, r3, r2
 8020426:	9b02      	ldr	r3, [sp, #8]
 8020428:	1952      	adds	r2, r2, r5
 802042a:	0c00      	lsrs	r0, r0, #16
 802042c:	0c1b      	lsrs	r3, r3, #16
 802042e:	1a1b      	subs	r3, r3, r0
 8020430:	1410      	asrs	r0, r2, #16
 8020432:	181b      	adds	r3, r3, r0
 8020434:	141d      	asrs	r5, r3, #16
 8020436:	b292      	uxth	r2, r2
 8020438:	041b      	lsls	r3, r3, #16
 802043a:	431a      	orrs	r2, r3
 802043c:	9b03      	ldr	r3, [sp, #12]
 802043e:	c404      	stmia	r4!, {r2}
 8020440:	428b      	cmp	r3, r1
 8020442:	d2e9      	bcs.n	8020418 <quorem+0xb0>
 8020444:	9a01      	ldr	r2, [sp, #4]
 8020446:	00bb      	lsls	r3, r7, #2
 8020448:	18d3      	adds	r3, r2, r3
 802044a:	681a      	ldr	r2, [r3, #0]
 802044c:	2a00      	cmp	r2, #0
 802044e:	d013      	beq.n	8020478 <quorem+0x110>
 8020450:	9b00      	ldr	r3, [sp, #0]
 8020452:	3301      	adds	r3, #1
 8020454:	9300      	str	r3, [sp, #0]
 8020456:	9800      	ldr	r0, [sp, #0]
 8020458:	b007      	add	sp, #28
 802045a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802045c:	6823      	ldr	r3, [r4, #0]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d104      	bne.n	802046c <quorem+0x104>
 8020462:	3f01      	subs	r7, #1
 8020464:	9b01      	ldr	r3, [sp, #4]
 8020466:	3c04      	subs	r4, #4
 8020468:	42a3      	cmp	r3, r4
 802046a:	d3f7      	bcc.n	802045c <quorem+0xf4>
 802046c:	6137      	str	r7, [r6, #16]
 802046e:	e7c8      	b.n	8020402 <quorem+0x9a>
 8020470:	681a      	ldr	r2, [r3, #0]
 8020472:	2a00      	cmp	r2, #0
 8020474:	d104      	bne.n	8020480 <quorem+0x118>
 8020476:	3f01      	subs	r7, #1
 8020478:	9a01      	ldr	r2, [sp, #4]
 802047a:	3b04      	subs	r3, #4
 802047c:	429a      	cmp	r2, r3
 802047e:	d3f7      	bcc.n	8020470 <quorem+0x108>
 8020480:	6137      	str	r7, [r6, #16]
 8020482:	e7e5      	b.n	8020450 <quorem+0xe8>

08020484 <_dtoa_r>:
 8020484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020486:	0014      	movs	r4, r2
 8020488:	001d      	movs	r5, r3
 802048a:	69c6      	ldr	r6, [r0, #28]
 802048c:	b09d      	sub	sp, #116	@ 0x74
 802048e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020490:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020492:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020494:	9003      	str	r0, [sp, #12]
 8020496:	2e00      	cmp	r6, #0
 8020498:	d10f      	bne.n	80204ba <_dtoa_r+0x36>
 802049a:	2010      	movs	r0, #16
 802049c:	f001 f98a 	bl	80217b4 <malloc>
 80204a0:	9b03      	ldr	r3, [sp, #12]
 80204a2:	1e02      	subs	r2, r0, #0
 80204a4:	61d8      	str	r0, [r3, #28]
 80204a6:	d104      	bne.n	80204b2 <_dtoa_r+0x2e>
 80204a8:	21ef      	movs	r1, #239	@ 0xef
 80204aa:	4bc7      	ldr	r3, [pc, #796]	@ (80207c8 <_dtoa_r+0x344>)
 80204ac:	48c7      	ldr	r0, [pc, #796]	@ (80207cc <_dtoa_r+0x348>)
 80204ae:	f002 fb2f 	bl	8022b10 <__assert_func>
 80204b2:	6046      	str	r6, [r0, #4]
 80204b4:	6086      	str	r6, [r0, #8]
 80204b6:	6006      	str	r6, [r0, #0]
 80204b8:	60c6      	str	r6, [r0, #12]
 80204ba:	9b03      	ldr	r3, [sp, #12]
 80204bc:	69db      	ldr	r3, [r3, #28]
 80204be:	6819      	ldr	r1, [r3, #0]
 80204c0:	2900      	cmp	r1, #0
 80204c2:	d00b      	beq.n	80204dc <_dtoa_r+0x58>
 80204c4:	685a      	ldr	r2, [r3, #4]
 80204c6:	2301      	movs	r3, #1
 80204c8:	4093      	lsls	r3, r2
 80204ca:	604a      	str	r2, [r1, #4]
 80204cc:	608b      	str	r3, [r1, #8]
 80204ce:	9803      	ldr	r0, [sp, #12]
 80204d0:	f001 fa82 	bl	80219d8 <_Bfree>
 80204d4:	2200      	movs	r2, #0
 80204d6:	9b03      	ldr	r3, [sp, #12]
 80204d8:	69db      	ldr	r3, [r3, #28]
 80204da:	601a      	str	r2, [r3, #0]
 80204dc:	2d00      	cmp	r5, #0
 80204de:	da1e      	bge.n	802051e <_dtoa_r+0x9a>
 80204e0:	2301      	movs	r3, #1
 80204e2:	603b      	str	r3, [r7, #0]
 80204e4:	006b      	lsls	r3, r5, #1
 80204e6:	085b      	lsrs	r3, r3, #1
 80204e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80204ea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80204ec:	4bb8      	ldr	r3, [pc, #736]	@ (80207d0 <_dtoa_r+0x34c>)
 80204ee:	4ab8      	ldr	r2, [pc, #736]	@ (80207d0 <_dtoa_r+0x34c>)
 80204f0:	403b      	ands	r3, r7
 80204f2:	4293      	cmp	r3, r2
 80204f4:	d116      	bne.n	8020524 <_dtoa_r+0xa0>
 80204f6:	4bb7      	ldr	r3, [pc, #732]	@ (80207d4 <_dtoa_r+0x350>)
 80204f8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80204fa:	6013      	str	r3, [r2, #0]
 80204fc:	033b      	lsls	r3, r7, #12
 80204fe:	0b1b      	lsrs	r3, r3, #12
 8020500:	4323      	orrs	r3, r4
 8020502:	d101      	bne.n	8020508 <_dtoa_r+0x84>
 8020504:	f000 fd83 	bl	802100e <_dtoa_r+0xb8a>
 8020508:	4bb3      	ldr	r3, [pc, #716]	@ (80207d8 <_dtoa_r+0x354>)
 802050a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802050c:	9308      	str	r3, [sp, #32]
 802050e:	2a00      	cmp	r2, #0
 8020510:	d002      	beq.n	8020518 <_dtoa_r+0x94>
 8020512:	4bb2      	ldr	r3, [pc, #712]	@ (80207dc <_dtoa_r+0x358>)
 8020514:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020516:	6013      	str	r3, [r2, #0]
 8020518:	9808      	ldr	r0, [sp, #32]
 802051a:	b01d      	add	sp, #116	@ 0x74
 802051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802051e:	2300      	movs	r3, #0
 8020520:	603b      	str	r3, [r7, #0]
 8020522:	e7e2      	b.n	80204ea <_dtoa_r+0x66>
 8020524:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020528:	9212      	str	r2, [sp, #72]	@ 0x48
 802052a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802052c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802052e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020530:	2200      	movs	r2, #0
 8020532:	2300      	movs	r3, #0
 8020534:	f7df ffbc 	bl	80004b0 <__aeabi_dcmpeq>
 8020538:	1e06      	subs	r6, r0, #0
 802053a:	d00b      	beq.n	8020554 <_dtoa_r+0xd0>
 802053c:	2301      	movs	r3, #1
 802053e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020540:	6013      	str	r3, [r2, #0]
 8020542:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020544:	2b00      	cmp	r3, #0
 8020546:	d002      	beq.n	802054e <_dtoa_r+0xca>
 8020548:	4ba5      	ldr	r3, [pc, #660]	@ (80207e0 <_dtoa_r+0x35c>)
 802054a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802054c:	6013      	str	r3, [r2, #0]
 802054e:	4ba5      	ldr	r3, [pc, #660]	@ (80207e4 <_dtoa_r+0x360>)
 8020550:	9308      	str	r3, [sp, #32]
 8020552:	e7e1      	b.n	8020518 <_dtoa_r+0x94>
 8020554:	ab1a      	add	r3, sp, #104	@ 0x68
 8020556:	9301      	str	r3, [sp, #4]
 8020558:	ab1b      	add	r3, sp, #108	@ 0x6c
 802055a:	9300      	str	r3, [sp, #0]
 802055c:	9803      	ldr	r0, [sp, #12]
 802055e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020560:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020562:	f001 fdf1 	bl	8022148 <__d2b>
 8020566:	007a      	lsls	r2, r7, #1
 8020568:	9005      	str	r0, [sp, #20]
 802056a:	0d52      	lsrs	r2, r2, #21
 802056c:	d100      	bne.n	8020570 <_dtoa_r+0xec>
 802056e:	e07b      	b.n	8020668 <_dtoa_r+0x1e4>
 8020570:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020572:	9618      	str	r6, [sp, #96]	@ 0x60
 8020574:	0319      	lsls	r1, r3, #12
 8020576:	4b9c      	ldr	r3, [pc, #624]	@ (80207e8 <_dtoa_r+0x364>)
 8020578:	0b09      	lsrs	r1, r1, #12
 802057a:	430b      	orrs	r3, r1
 802057c:	499b      	ldr	r1, [pc, #620]	@ (80207ec <_dtoa_r+0x368>)
 802057e:	1857      	adds	r7, r2, r1
 8020580:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020582:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020584:	0019      	movs	r1, r3
 8020586:	2200      	movs	r2, #0
 8020588:	4b99      	ldr	r3, [pc, #612]	@ (80207f0 <_dtoa_r+0x36c>)
 802058a:	f7e2 fb1f 	bl	8002bcc <__aeabi_dsub>
 802058e:	4a99      	ldr	r2, [pc, #612]	@ (80207f4 <_dtoa_r+0x370>)
 8020590:	4b99      	ldr	r3, [pc, #612]	@ (80207f8 <_dtoa_r+0x374>)
 8020592:	f7e2 f853 	bl	800263c <__aeabi_dmul>
 8020596:	4a99      	ldr	r2, [pc, #612]	@ (80207fc <_dtoa_r+0x378>)
 8020598:	4b99      	ldr	r3, [pc, #612]	@ (8020800 <_dtoa_r+0x37c>)
 802059a:	f7e1 f8a7 	bl	80016ec <__aeabi_dadd>
 802059e:	0004      	movs	r4, r0
 80205a0:	0038      	movs	r0, r7
 80205a2:	000d      	movs	r5, r1
 80205a4:	f7e2 ff0c 	bl	80033c0 <__aeabi_i2d>
 80205a8:	4a96      	ldr	r2, [pc, #600]	@ (8020804 <_dtoa_r+0x380>)
 80205aa:	4b97      	ldr	r3, [pc, #604]	@ (8020808 <_dtoa_r+0x384>)
 80205ac:	f7e2 f846 	bl	800263c <__aeabi_dmul>
 80205b0:	0002      	movs	r2, r0
 80205b2:	000b      	movs	r3, r1
 80205b4:	0020      	movs	r0, r4
 80205b6:	0029      	movs	r1, r5
 80205b8:	f7e1 f898 	bl	80016ec <__aeabi_dadd>
 80205bc:	0004      	movs	r4, r0
 80205be:	000d      	movs	r5, r1
 80205c0:	f7e2 fec2 	bl	8003348 <__aeabi_d2iz>
 80205c4:	2200      	movs	r2, #0
 80205c6:	9004      	str	r0, [sp, #16]
 80205c8:	2300      	movs	r3, #0
 80205ca:	0020      	movs	r0, r4
 80205cc:	0029      	movs	r1, r5
 80205ce:	f7df ff75 	bl	80004bc <__aeabi_dcmplt>
 80205d2:	2800      	cmp	r0, #0
 80205d4:	d00b      	beq.n	80205ee <_dtoa_r+0x16a>
 80205d6:	9804      	ldr	r0, [sp, #16]
 80205d8:	f7e2 fef2 	bl	80033c0 <__aeabi_i2d>
 80205dc:	002b      	movs	r3, r5
 80205de:	0022      	movs	r2, r4
 80205e0:	f7df ff66 	bl	80004b0 <__aeabi_dcmpeq>
 80205e4:	4243      	negs	r3, r0
 80205e6:	4158      	adcs	r0, r3
 80205e8:	9b04      	ldr	r3, [sp, #16]
 80205ea:	1a1b      	subs	r3, r3, r0
 80205ec:	9304      	str	r3, [sp, #16]
 80205ee:	2301      	movs	r3, #1
 80205f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80205f2:	9b04      	ldr	r3, [sp, #16]
 80205f4:	2b16      	cmp	r3, #22
 80205f6:	d810      	bhi.n	802061a <_dtoa_r+0x196>
 80205f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80205fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80205fc:	9a04      	ldr	r2, [sp, #16]
 80205fe:	4b83      	ldr	r3, [pc, #524]	@ (802080c <_dtoa_r+0x388>)
 8020600:	00d2      	lsls	r2, r2, #3
 8020602:	189b      	adds	r3, r3, r2
 8020604:	681a      	ldr	r2, [r3, #0]
 8020606:	685b      	ldr	r3, [r3, #4]
 8020608:	f7df ff58 	bl	80004bc <__aeabi_dcmplt>
 802060c:	2800      	cmp	r0, #0
 802060e:	d047      	beq.n	80206a0 <_dtoa_r+0x21c>
 8020610:	9b04      	ldr	r3, [sp, #16]
 8020612:	3b01      	subs	r3, #1
 8020614:	9304      	str	r3, [sp, #16]
 8020616:	2300      	movs	r3, #0
 8020618:	9315      	str	r3, [sp, #84]	@ 0x54
 802061a:	2200      	movs	r2, #0
 802061c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802061e:	9206      	str	r2, [sp, #24]
 8020620:	1bdb      	subs	r3, r3, r7
 8020622:	1e5a      	subs	r2, r3, #1
 8020624:	d53e      	bpl.n	80206a4 <_dtoa_r+0x220>
 8020626:	2201      	movs	r2, #1
 8020628:	1ad3      	subs	r3, r2, r3
 802062a:	9306      	str	r3, [sp, #24]
 802062c:	2300      	movs	r3, #0
 802062e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020630:	9b04      	ldr	r3, [sp, #16]
 8020632:	2b00      	cmp	r3, #0
 8020634:	db38      	blt.n	80206a8 <_dtoa_r+0x224>
 8020636:	9a04      	ldr	r2, [sp, #16]
 8020638:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802063a:	4694      	mov	ip, r2
 802063c:	4463      	add	r3, ip
 802063e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020640:	2300      	movs	r3, #0
 8020642:	9214      	str	r2, [sp, #80]	@ 0x50
 8020644:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020646:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020648:	2401      	movs	r4, #1
 802064a:	2b09      	cmp	r3, #9
 802064c:	d867      	bhi.n	802071e <_dtoa_r+0x29a>
 802064e:	2b05      	cmp	r3, #5
 8020650:	dd02      	ble.n	8020658 <_dtoa_r+0x1d4>
 8020652:	2400      	movs	r4, #0
 8020654:	3b04      	subs	r3, #4
 8020656:	9322      	str	r3, [sp, #136]	@ 0x88
 8020658:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802065a:	1e98      	subs	r0, r3, #2
 802065c:	2803      	cmp	r0, #3
 802065e:	d867      	bhi.n	8020730 <_dtoa_r+0x2ac>
 8020660:	f7df fd8c 	bl	800017c <__gnu_thumb1_case_uqi>
 8020664:	5b383a2b 	.word	0x5b383a2b
 8020668:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802066a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802066c:	18f6      	adds	r6, r6, r3
 802066e:	4b68      	ldr	r3, [pc, #416]	@ (8020810 <_dtoa_r+0x38c>)
 8020670:	18f2      	adds	r2, r6, r3
 8020672:	2a20      	cmp	r2, #32
 8020674:	dd0f      	ble.n	8020696 <_dtoa_r+0x212>
 8020676:	2340      	movs	r3, #64	@ 0x40
 8020678:	1a9b      	subs	r3, r3, r2
 802067a:	409f      	lsls	r7, r3
 802067c:	4b65      	ldr	r3, [pc, #404]	@ (8020814 <_dtoa_r+0x390>)
 802067e:	0038      	movs	r0, r7
 8020680:	18f3      	adds	r3, r6, r3
 8020682:	40dc      	lsrs	r4, r3
 8020684:	4320      	orrs	r0, r4
 8020686:	f7e2 fec9 	bl	800341c <__aeabi_ui2d>
 802068a:	2201      	movs	r2, #1
 802068c:	4b62      	ldr	r3, [pc, #392]	@ (8020818 <_dtoa_r+0x394>)
 802068e:	1e77      	subs	r7, r6, #1
 8020690:	18cb      	adds	r3, r1, r3
 8020692:	9218      	str	r2, [sp, #96]	@ 0x60
 8020694:	e776      	b.n	8020584 <_dtoa_r+0x100>
 8020696:	2320      	movs	r3, #32
 8020698:	0020      	movs	r0, r4
 802069a:	1a9b      	subs	r3, r3, r2
 802069c:	4098      	lsls	r0, r3
 802069e:	e7f2      	b.n	8020686 <_dtoa_r+0x202>
 80206a0:	9015      	str	r0, [sp, #84]	@ 0x54
 80206a2:	e7ba      	b.n	802061a <_dtoa_r+0x196>
 80206a4:	920d      	str	r2, [sp, #52]	@ 0x34
 80206a6:	e7c3      	b.n	8020630 <_dtoa_r+0x1ac>
 80206a8:	9b06      	ldr	r3, [sp, #24]
 80206aa:	9a04      	ldr	r2, [sp, #16]
 80206ac:	1a9b      	subs	r3, r3, r2
 80206ae:	9306      	str	r3, [sp, #24]
 80206b0:	4253      	negs	r3, r2
 80206b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206b4:	2300      	movs	r3, #0
 80206b6:	9314      	str	r3, [sp, #80]	@ 0x50
 80206b8:	e7c5      	b.n	8020646 <_dtoa_r+0x1c2>
 80206ba:	2300      	movs	r3, #0
 80206bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80206be:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80206c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80206c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	dc13      	bgt.n	80206f0 <_dtoa_r+0x26c>
 80206c8:	2301      	movs	r3, #1
 80206ca:	001a      	movs	r2, r3
 80206cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80206ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80206d0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80206d2:	e00d      	b.n	80206f0 <_dtoa_r+0x26c>
 80206d4:	2301      	movs	r3, #1
 80206d6:	e7f1      	b.n	80206bc <_dtoa_r+0x238>
 80206d8:	2300      	movs	r3, #0
 80206da:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80206dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80206de:	4694      	mov	ip, r2
 80206e0:	9b04      	ldr	r3, [sp, #16]
 80206e2:	4463      	add	r3, ip
 80206e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80206e6:	3301      	adds	r3, #1
 80206e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	dc00      	bgt.n	80206f0 <_dtoa_r+0x26c>
 80206ee:	2301      	movs	r3, #1
 80206f0:	9a03      	ldr	r2, [sp, #12]
 80206f2:	2100      	movs	r1, #0
 80206f4:	69d0      	ldr	r0, [r2, #28]
 80206f6:	2204      	movs	r2, #4
 80206f8:	0015      	movs	r5, r2
 80206fa:	3514      	adds	r5, #20
 80206fc:	429d      	cmp	r5, r3
 80206fe:	d91b      	bls.n	8020738 <_dtoa_r+0x2b4>
 8020700:	6041      	str	r1, [r0, #4]
 8020702:	9803      	ldr	r0, [sp, #12]
 8020704:	f001 f924 	bl	8021950 <_Balloc>
 8020708:	9008      	str	r0, [sp, #32]
 802070a:	2800      	cmp	r0, #0
 802070c:	d117      	bne.n	802073e <_dtoa_r+0x2ba>
 802070e:	21b0      	movs	r1, #176	@ 0xb0
 8020710:	4b42      	ldr	r3, [pc, #264]	@ (802081c <_dtoa_r+0x398>)
 8020712:	482e      	ldr	r0, [pc, #184]	@ (80207cc <_dtoa_r+0x348>)
 8020714:	9a08      	ldr	r2, [sp, #32]
 8020716:	31ff      	adds	r1, #255	@ 0xff
 8020718:	e6c9      	b.n	80204ae <_dtoa_r+0x2a>
 802071a:	2301      	movs	r3, #1
 802071c:	e7dd      	b.n	80206da <_dtoa_r+0x256>
 802071e:	2300      	movs	r3, #0
 8020720:	9410      	str	r4, [sp, #64]	@ 0x40
 8020722:	9322      	str	r3, [sp, #136]	@ 0x88
 8020724:	3b01      	subs	r3, #1
 8020726:	930e      	str	r3, [sp, #56]	@ 0x38
 8020728:	9309      	str	r3, [sp, #36]	@ 0x24
 802072a:	2200      	movs	r2, #0
 802072c:	3313      	adds	r3, #19
 802072e:	e7cf      	b.n	80206d0 <_dtoa_r+0x24c>
 8020730:	2301      	movs	r3, #1
 8020732:	9310      	str	r3, [sp, #64]	@ 0x40
 8020734:	3b02      	subs	r3, #2
 8020736:	e7f6      	b.n	8020726 <_dtoa_r+0x2a2>
 8020738:	3101      	adds	r1, #1
 802073a:	0052      	lsls	r2, r2, #1
 802073c:	e7dc      	b.n	80206f8 <_dtoa_r+0x274>
 802073e:	9b03      	ldr	r3, [sp, #12]
 8020740:	9a08      	ldr	r2, [sp, #32]
 8020742:	69db      	ldr	r3, [r3, #28]
 8020744:	601a      	str	r2, [r3, #0]
 8020746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020748:	2b0e      	cmp	r3, #14
 802074a:	d900      	bls.n	802074e <_dtoa_r+0x2ca>
 802074c:	e0d9      	b.n	8020902 <_dtoa_r+0x47e>
 802074e:	2c00      	cmp	r4, #0
 8020750:	d100      	bne.n	8020754 <_dtoa_r+0x2d0>
 8020752:	e0d6      	b.n	8020902 <_dtoa_r+0x47e>
 8020754:	9b04      	ldr	r3, [sp, #16]
 8020756:	2b00      	cmp	r3, #0
 8020758:	dd64      	ble.n	8020824 <_dtoa_r+0x3a0>
 802075a:	210f      	movs	r1, #15
 802075c:	9a04      	ldr	r2, [sp, #16]
 802075e:	4b2b      	ldr	r3, [pc, #172]	@ (802080c <_dtoa_r+0x388>)
 8020760:	400a      	ands	r2, r1
 8020762:	00d2      	lsls	r2, r2, #3
 8020764:	189b      	adds	r3, r3, r2
 8020766:	681e      	ldr	r6, [r3, #0]
 8020768:	685f      	ldr	r7, [r3, #4]
 802076a:	9b04      	ldr	r3, [sp, #16]
 802076c:	2402      	movs	r4, #2
 802076e:	111d      	asrs	r5, r3, #4
 8020770:	05db      	lsls	r3, r3, #23
 8020772:	d50a      	bpl.n	802078a <_dtoa_r+0x306>
 8020774:	4b2a      	ldr	r3, [pc, #168]	@ (8020820 <_dtoa_r+0x39c>)
 8020776:	400d      	ands	r5, r1
 8020778:	6a1a      	ldr	r2, [r3, #32]
 802077a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802077c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802077e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020780:	f7e1 fb18 	bl	8001db4 <__aeabi_ddiv>
 8020784:	900a      	str	r0, [sp, #40]	@ 0x28
 8020786:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020788:	3401      	adds	r4, #1
 802078a:	4b25      	ldr	r3, [pc, #148]	@ (8020820 <_dtoa_r+0x39c>)
 802078c:	930c      	str	r3, [sp, #48]	@ 0x30
 802078e:	2d00      	cmp	r5, #0
 8020790:	d108      	bne.n	80207a4 <_dtoa_r+0x320>
 8020792:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020794:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020796:	0032      	movs	r2, r6
 8020798:	003b      	movs	r3, r7
 802079a:	f7e1 fb0b 	bl	8001db4 <__aeabi_ddiv>
 802079e:	900a      	str	r0, [sp, #40]	@ 0x28
 80207a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207a2:	e05a      	b.n	802085a <_dtoa_r+0x3d6>
 80207a4:	2301      	movs	r3, #1
 80207a6:	421d      	tst	r5, r3
 80207a8:	d009      	beq.n	80207be <_dtoa_r+0x33a>
 80207aa:	18e4      	adds	r4, r4, r3
 80207ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207ae:	0030      	movs	r0, r6
 80207b0:	681a      	ldr	r2, [r3, #0]
 80207b2:	685b      	ldr	r3, [r3, #4]
 80207b4:	0039      	movs	r1, r7
 80207b6:	f7e1 ff41 	bl	800263c <__aeabi_dmul>
 80207ba:	0006      	movs	r6, r0
 80207bc:	000f      	movs	r7, r1
 80207be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207c0:	106d      	asrs	r5, r5, #1
 80207c2:	3308      	adds	r3, #8
 80207c4:	e7e2      	b.n	802078c <_dtoa_r+0x308>
 80207c6:	46c0      	nop			@ (mov r8, r8)
 80207c8:	08025d1a 	.word	0x08025d1a
 80207cc:	08025d31 	.word	0x08025d31
 80207d0:	7ff00000 	.word	0x7ff00000
 80207d4:	0000270f 	.word	0x0000270f
 80207d8:	08025d16 	.word	0x08025d16
 80207dc:	08025d19 	.word	0x08025d19
 80207e0:	08025ce2 	.word	0x08025ce2
 80207e4:	08025ce1 	.word	0x08025ce1
 80207e8:	3ff00000 	.word	0x3ff00000
 80207ec:	fffffc01 	.word	0xfffffc01
 80207f0:	3ff80000 	.word	0x3ff80000
 80207f4:	636f4361 	.word	0x636f4361
 80207f8:	3fd287a7 	.word	0x3fd287a7
 80207fc:	8b60c8b3 	.word	0x8b60c8b3
 8020800:	3fc68a28 	.word	0x3fc68a28
 8020804:	509f79fb 	.word	0x509f79fb
 8020808:	3fd34413 	.word	0x3fd34413
 802080c:	08025e88 	.word	0x08025e88
 8020810:	00000432 	.word	0x00000432
 8020814:	00000412 	.word	0x00000412
 8020818:	fe100000 	.word	0xfe100000
 802081c:	08025d89 	.word	0x08025d89
 8020820:	08025e60 	.word	0x08025e60
 8020824:	9b04      	ldr	r3, [sp, #16]
 8020826:	2402      	movs	r4, #2
 8020828:	2b00      	cmp	r3, #0
 802082a:	d016      	beq.n	802085a <_dtoa_r+0x3d6>
 802082c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802082e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020830:	220f      	movs	r2, #15
 8020832:	425d      	negs	r5, r3
 8020834:	402a      	ands	r2, r5
 8020836:	4bd7      	ldr	r3, [pc, #860]	@ (8020b94 <_dtoa_r+0x710>)
 8020838:	00d2      	lsls	r2, r2, #3
 802083a:	189b      	adds	r3, r3, r2
 802083c:	681a      	ldr	r2, [r3, #0]
 802083e:	685b      	ldr	r3, [r3, #4]
 8020840:	f7e1 fefc 	bl	800263c <__aeabi_dmul>
 8020844:	2701      	movs	r7, #1
 8020846:	2300      	movs	r3, #0
 8020848:	900a      	str	r0, [sp, #40]	@ 0x28
 802084a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802084c:	4ed2      	ldr	r6, [pc, #840]	@ (8020b98 <_dtoa_r+0x714>)
 802084e:	112d      	asrs	r5, r5, #4
 8020850:	2d00      	cmp	r5, #0
 8020852:	d000      	beq.n	8020856 <_dtoa_r+0x3d2>
 8020854:	e0ba      	b.n	80209cc <_dtoa_r+0x548>
 8020856:	2b00      	cmp	r3, #0
 8020858:	d1a1      	bne.n	802079e <_dtoa_r+0x31a>
 802085a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802085c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802085e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020860:	2b00      	cmp	r3, #0
 8020862:	d100      	bne.n	8020866 <_dtoa_r+0x3e2>
 8020864:	e0bd      	b.n	80209e2 <_dtoa_r+0x55e>
 8020866:	2200      	movs	r2, #0
 8020868:	0030      	movs	r0, r6
 802086a:	0039      	movs	r1, r7
 802086c:	4bcb      	ldr	r3, [pc, #812]	@ (8020b9c <_dtoa_r+0x718>)
 802086e:	f7df fe25 	bl	80004bc <__aeabi_dcmplt>
 8020872:	2800      	cmp	r0, #0
 8020874:	d100      	bne.n	8020878 <_dtoa_r+0x3f4>
 8020876:	e0b4      	b.n	80209e2 <_dtoa_r+0x55e>
 8020878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802087a:	2b00      	cmp	r3, #0
 802087c:	d100      	bne.n	8020880 <_dtoa_r+0x3fc>
 802087e:	e0b0      	b.n	80209e2 <_dtoa_r+0x55e>
 8020880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020882:	2b00      	cmp	r3, #0
 8020884:	dd39      	ble.n	80208fa <_dtoa_r+0x476>
 8020886:	9b04      	ldr	r3, [sp, #16]
 8020888:	2200      	movs	r2, #0
 802088a:	3b01      	subs	r3, #1
 802088c:	930c      	str	r3, [sp, #48]	@ 0x30
 802088e:	0030      	movs	r0, r6
 8020890:	4bc3      	ldr	r3, [pc, #780]	@ (8020ba0 <_dtoa_r+0x71c>)
 8020892:	0039      	movs	r1, r7
 8020894:	f7e1 fed2 	bl	800263c <__aeabi_dmul>
 8020898:	900a      	str	r0, [sp, #40]	@ 0x28
 802089a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802089c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802089e:	3401      	adds	r4, #1
 80208a0:	0020      	movs	r0, r4
 80208a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80208a4:	f7e2 fd8c 	bl	80033c0 <__aeabi_i2d>
 80208a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80208aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80208ac:	f7e1 fec6 	bl	800263c <__aeabi_dmul>
 80208b0:	4bbc      	ldr	r3, [pc, #752]	@ (8020ba4 <_dtoa_r+0x720>)
 80208b2:	2200      	movs	r2, #0
 80208b4:	f7e0 ff1a 	bl	80016ec <__aeabi_dadd>
 80208b8:	4bbb      	ldr	r3, [pc, #748]	@ (8020ba8 <_dtoa_r+0x724>)
 80208ba:	0006      	movs	r6, r0
 80208bc:	18cf      	adds	r7, r1, r3
 80208be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	d000      	beq.n	80208c6 <_dtoa_r+0x442>
 80208c4:	e091      	b.n	80209ea <_dtoa_r+0x566>
 80208c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80208c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80208ca:	2200      	movs	r2, #0
 80208cc:	4bb7      	ldr	r3, [pc, #732]	@ (8020bac <_dtoa_r+0x728>)
 80208ce:	f7e2 f97d 	bl	8002bcc <__aeabi_dsub>
 80208d2:	0032      	movs	r2, r6
 80208d4:	003b      	movs	r3, r7
 80208d6:	0004      	movs	r4, r0
 80208d8:	000d      	movs	r5, r1
 80208da:	f7df fe03 	bl	80004e4 <__aeabi_dcmpgt>
 80208de:	2800      	cmp	r0, #0
 80208e0:	d000      	beq.n	80208e4 <_dtoa_r+0x460>
 80208e2:	e29d      	b.n	8020e20 <_dtoa_r+0x99c>
 80208e4:	2180      	movs	r1, #128	@ 0x80
 80208e6:	0609      	lsls	r1, r1, #24
 80208e8:	187b      	adds	r3, r7, r1
 80208ea:	0032      	movs	r2, r6
 80208ec:	0020      	movs	r0, r4
 80208ee:	0029      	movs	r1, r5
 80208f0:	f7df fde4 	bl	80004bc <__aeabi_dcmplt>
 80208f4:	2800      	cmp	r0, #0
 80208f6:	d000      	beq.n	80208fa <_dtoa_r+0x476>
 80208f8:	e130      	b.n	8020b5c <_dtoa_r+0x6d8>
 80208fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80208fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80208fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8020900:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020902:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020904:	2b00      	cmp	r3, #0
 8020906:	da00      	bge.n	802090a <_dtoa_r+0x486>
 8020908:	e177      	b.n	8020bfa <_dtoa_r+0x776>
 802090a:	9a04      	ldr	r2, [sp, #16]
 802090c:	2a0e      	cmp	r2, #14
 802090e:	dd00      	ble.n	8020912 <_dtoa_r+0x48e>
 8020910:	e173      	b.n	8020bfa <_dtoa_r+0x776>
 8020912:	4ba0      	ldr	r3, [pc, #640]	@ (8020b94 <_dtoa_r+0x710>)
 8020914:	00d2      	lsls	r2, r2, #3
 8020916:	189b      	adds	r3, r3, r2
 8020918:	685c      	ldr	r4, [r3, #4]
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	9306      	str	r3, [sp, #24]
 802091e:	9407      	str	r4, [sp, #28]
 8020920:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020922:	2b00      	cmp	r3, #0
 8020924:	da03      	bge.n	802092e <_dtoa_r+0x4aa>
 8020926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020928:	2b00      	cmp	r3, #0
 802092a:	dc00      	bgt.n	802092e <_dtoa_r+0x4aa>
 802092c:	e106      	b.n	8020b3c <_dtoa_r+0x6b8>
 802092e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020930:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020934:	9d08      	ldr	r5, [sp, #32]
 8020936:	3b01      	subs	r3, #1
 8020938:	195b      	adds	r3, r3, r5
 802093a:	930a      	str	r3, [sp, #40]	@ 0x28
 802093c:	9a06      	ldr	r2, [sp, #24]
 802093e:	9b07      	ldr	r3, [sp, #28]
 8020940:	0030      	movs	r0, r6
 8020942:	0039      	movs	r1, r7
 8020944:	f7e1 fa36 	bl	8001db4 <__aeabi_ddiv>
 8020948:	f7e2 fcfe 	bl	8003348 <__aeabi_d2iz>
 802094c:	9009      	str	r0, [sp, #36]	@ 0x24
 802094e:	f7e2 fd37 	bl	80033c0 <__aeabi_i2d>
 8020952:	9a06      	ldr	r2, [sp, #24]
 8020954:	9b07      	ldr	r3, [sp, #28]
 8020956:	f7e1 fe71 	bl	800263c <__aeabi_dmul>
 802095a:	0002      	movs	r2, r0
 802095c:	000b      	movs	r3, r1
 802095e:	0030      	movs	r0, r6
 8020960:	0039      	movs	r1, r7
 8020962:	f7e2 f933 	bl	8002bcc <__aeabi_dsub>
 8020966:	002b      	movs	r3, r5
 8020968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802096a:	3501      	adds	r5, #1
 802096c:	3230      	adds	r2, #48	@ 0x30
 802096e:	701a      	strb	r2, [r3, #0]
 8020970:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020972:	002c      	movs	r4, r5
 8020974:	429a      	cmp	r2, r3
 8020976:	d000      	beq.n	802097a <_dtoa_r+0x4f6>
 8020978:	e131      	b.n	8020bde <_dtoa_r+0x75a>
 802097a:	0002      	movs	r2, r0
 802097c:	000b      	movs	r3, r1
 802097e:	f7e0 feb5 	bl	80016ec <__aeabi_dadd>
 8020982:	9a06      	ldr	r2, [sp, #24]
 8020984:	9b07      	ldr	r3, [sp, #28]
 8020986:	0006      	movs	r6, r0
 8020988:	000f      	movs	r7, r1
 802098a:	f7df fdab 	bl	80004e4 <__aeabi_dcmpgt>
 802098e:	2800      	cmp	r0, #0
 8020990:	d000      	beq.n	8020994 <_dtoa_r+0x510>
 8020992:	e10f      	b.n	8020bb4 <_dtoa_r+0x730>
 8020994:	9a06      	ldr	r2, [sp, #24]
 8020996:	9b07      	ldr	r3, [sp, #28]
 8020998:	0030      	movs	r0, r6
 802099a:	0039      	movs	r1, r7
 802099c:	f7df fd88 	bl	80004b0 <__aeabi_dcmpeq>
 80209a0:	2800      	cmp	r0, #0
 80209a2:	d003      	beq.n	80209ac <_dtoa_r+0x528>
 80209a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209a6:	07dd      	lsls	r5, r3, #31
 80209a8:	d500      	bpl.n	80209ac <_dtoa_r+0x528>
 80209aa:	e103      	b.n	8020bb4 <_dtoa_r+0x730>
 80209ac:	9905      	ldr	r1, [sp, #20]
 80209ae:	9803      	ldr	r0, [sp, #12]
 80209b0:	f001 f812 	bl	80219d8 <_Bfree>
 80209b4:	2300      	movs	r3, #0
 80209b6:	7023      	strb	r3, [r4, #0]
 80209b8:	9b04      	ldr	r3, [sp, #16]
 80209ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80209bc:	3301      	adds	r3, #1
 80209be:	6013      	str	r3, [r2, #0]
 80209c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d100      	bne.n	80209c8 <_dtoa_r+0x544>
 80209c6:	e5a7      	b.n	8020518 <_dtoa_r+0x94>
 80209c8:	601c      	str	r4, [r3, #0]
 80209ca:	e5a5      	b.n	8020518 <_dtoa_r+0x94>
 80209cc:	423d      	tst	r5, r7
 80209ce:	d005      	beq.n	80209dc <_dtoa_r+0x558>
 80209d0:	6832      	ldr	r2, [r6, #0]
 80209d2:	6873      	ldr	r3, [r6, #4]
 80209d4:	f7e1 fe32 	bl	800263c <__aeabi_dmul>
 80209d8:	003b      	movs	r3, r7
 80209da:	3401      	adds	r4, #1
 80209dc:	106d      	asrs	r5, r5, #1
 80209de:	3608      	adds	r6, #8
 80209e0:	e736      	b.n	8020850 <_dtoa_r+0x3cc>
 80209e2:	9b04      	ldr	r3, [sp, #16]
 80209e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80209e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209e8:	e75a      	b.n	80208a0 <_dtoa_r+0x41c>
 80209ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80209ec:	4b69      	ldr	r3, [pc, #420]	@ (8020b94 <_dtoa_r+0x710>)
 80209ee:	3a01      	subs	r2, #1
 80209f0:	00d2      	lsls	r2, r2, #3
 80209f2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80209f4:	189b      	adds	r3, r3, r2
 80209f6:	681a      	ldr	r2, [r3, #0]
 80209f8:	685b      	ldr	r3, [r3, #4]
 80209fa:	2900      	cmp	r1, #0
 80209fc:	d04c      	beq.n	8020a98 <_dtoa_r+0x614>
 80209fe:	2000      	movs	r0, #0
 8020a00:	496b      	ldr	r1, [pc, #428]	@ (8020bb0 <_dtoa_r+0x72c>)
 8020a02:	f7e1 f9d7 	bl	8001db4 <__aeabi_ddiv>
 8020a06:	0032      	movs	r2, r6
 8020a08:	003b      	movs	r3, r7
 8020a0a:	f7e2 f8df 	bl	8002bcc <__aeabi_dsub>
 8020a0e:	9a08      	ldr	r2, [sp, #32]
 8020a10:	0006      	movs	r6, r0
 8020a12:	4694      	mov	ip, r2
 8020a14:	000f      	movs	r7, r1
 8020a16:	9b08      	ldr	r3, [sp, #32]
 8020a18:	9316      	str	r3, [sp, #88]	@ 0x58
 8020a1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a1c:	4463      	add	r3, ip
 8020a1e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a24:	f7e2 fc90 	bl	8003348 <__aeabi_d2iz>
 8020a28:	0005      	movs	r5, r0
 8020a2a:	f7e2 fcc9 	bl	80033c0 <__aeabi_i2d>
 8020a2e:	0002      	movs	r2, r0
 8020a30:	000b      	movs	r3, r1
 8020a32:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a36:	f7e2 f8c9 	bl	8002bcc <__aeabi_dsub>
 8020a3a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020a3c:	3530      	adds	r5, #48	@ 0x30
 8020a3e:	1c5c      	adds	r4, r3, #1
 8020a40:	701d      	strb	r5, [r3, #0]
 8020a42:	0032      	movs	r2, r6
 8020a44:	003b      	movs	r3, r7
 8020a46:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a48:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a4a:	f7df fd37 	bl	80004bc <__aeabi_dcmplt>
 8020a4e:	2800      	cmp	r0, #0
 8020a50:	d16a      	bne.n	8020b28 <_dtoa_r+0x6a4>
 8020a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a56:	2000      	movs	r0, #0
 8020a58:	4950      	ldr	r1, [pc, #320]	@ (8020b9c <_dtoa_r+0x718>)
 8020a5a:	f7e2 f8b7 	bl	8002bcc <__aeabi_dsub>
 8020a5e:	0032      	movs	r2, r6
 8020a60:	003b      	movs	r3, r7
 8020a62:	f7df fd2b 	bl	80004bc <__aeabi_dcmplt>
 8020a66:	2800      	cmp	r0, #0
 8020a68:	d000      	beq.n	8020a6c <_dtoa_r+0x5e8>
 8020a6a:	e0a5      	b.n	8020bb8 <_dtoa_r+0x734>
 8020a6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a6e:	42a3      	cmp	r3, r4
 8020a70:	d100      	bne.n	8020a74 <_dtoa_r+0x5f0>
 8020a72:	e742      	b.n	80208fa <_dtoa_r+0x476>
 8020a74:	2200      	movs	r2, #0
 8020a76:	0030      	movs	r0, r6
 8020a78:	0039      	movs	r1, r7
 8020a7a:	4b49      	ldr	r3, [pc, #292]	@ (8020ba0 <_dtoa_r+0x71c>)
 8020a7c:	f7e1 fdde 	bl	800263c <__aeabi_dmul>
 8020a80:	2200      	movs	r2, #0
 8020a82:	0006      	movs	r6, r0
 8020a84:	000f      	movs	r7, r1
 8020a86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a8a:	4b45      	ldr	r3, [pc, #276]	@ (8020ba0 <_dtoa_r+0x71c>)
 8020a8c:	f7e1 fdd6 	bl	800263c <__aeabi_dmul>
 8020a90:	9416      	str	r4, [sp, #88]	@ 0x58
 8020a92:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a96:	e7c3      	b.n	8020a20 <_dtoa_r+0x59c>
 8020a98:	0030      	movs	r0, r6
 8020a9a:	0039      	movs	r1, r7
 8020a9c:	f7e1 fdce 	bl	800263c <__aeabi_dmul>
 8020aa0:	9d08      	ldr	r5, [sp, #32]
 8020aa2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020aa4:	002b      	movs	r3, r5
 8020aa6:	4694      	mov	ip, r2
 8020aa8:	9016      	str	r0, [sp, #88]	@ 0x58
 8020aaa:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020aac:	4463      	add	r3, ip
 8020aae:	9319      	str	r3, [sp, #100]	@ 0x64
 8020ab0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ab2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ab4:	f7e2 fc48 	bl	8003348 <__aeabi_d2iz>
 8020ab8:	0004      	movs	r4, r0
 8020aba:	f7e2 fc81 	bl	80033c0 <__aeabi_i2d>
 8020abe:	000b      	movs	r3, r1
 8020ac0:	0002      	movs	r2, r0
 8020ac2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ac4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ac6:	f7e2 f881 	bl	8002bcc <__aeabi_dsub>
 8020aca:	3430      	adds	r4, #48	@ 0x30
 8020acc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020ace:	702c      	strb	r4, [r5, #0]
 8020ad0:	3501      	adds	r5, #1
 8020ad2:	0006      	movs	r6, r0
 8020ad4:	000f      	movs	r7, r1
 8020ad6:	42ab      	cmp	r3, r5
 8020ad8:	d129      	bne.n	8020b2e <_dtoa_r+0x6aa>
 8020ada:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020adc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020ade:	9b08      	ldr	r3, [sp, #32]
 8020ae0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020ae2:	469c      	mov	ip, r3
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	4b32      	ldr	r3, [pc, #200]	@ (8020bb0 <_dtoa_r+0x72c>)
 8020ae8:	4464      	add	r4, ip
 8020aea:	f7e0 fdff 	bl	80016ec <__aeabi_dadd>
 8020aee:	0002      	movs	r2, r0
 8020af0:	000b      	movs	r3, r1
 8020af2:	0030      	movs	r0, r6
 8020af4:	0039      	movs	r1, r7
 8020af6:	f7df fcf5 	bl	80004e4 <__aeabi_dcmpgt>
 8020afa:	2800      	cmp	r0, #0
 8020afc:	d15c      	bne.n	8020bb8 <_dtoa_r+0x734>
 8020afe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020b00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020b02:	2000      	movs	r0, #0
 8020b04:	492a      	ldr	r1, [pc, #168]	@ (8020bb0 <_dtoa_r+0x72c>)
 8020b06:	f7e2 f861 	bl	8002bcc <__aeabi_dsub>
 8020b0a:	0002      	movs	r2, r0
 8020b0c:	000b      	movs	r3, r1
 8020b0e:	0030      	movs	r0, r6
 8020b10:	0039      	movs	r1, r7
 8020b12:	f7df fcd3 	bl	80004bc <__aeabi_dcmplt>
 8020b16:	2800      	cmp	r0, #0
 8020b18:	d100      	bne.n	8020b1c <_dtoa_r+0x698>
 8020b1a:	e6ee      	b.n	80208fa <_dtoa_r+0x476>
 8020b1c:	0023      	movs	r3, r4
 8020b1e:	3c01      	subs	r4, #1
 8020b20:	7822      	ldrb	r2, [r4, #0]
 8020b22:	2a30      	cmp	r2, #48	@ 0x30
 8020b24:	d0fa      	beq.n	8020b1c <_dtoa_r+0x698>
 8020b26:	001c      	movs	r4, r3
 8020b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b2a:	9304      	str	r3, [sp, #16]
 8020b2c:	e73e      	b.n	80209ac <_dtoa_r+0x528>
 8020b2e:	2200      	movs	r2, #0
 8020b30:	4b1b      	ldr	r3, [pc, #108]	@ (8020ba0 <_dtoa_r+0x71c>)
 8020b32:	f7e1 fd83 	bl	800263c <__aeabi_dmul>
 8020b36:	900a      	str	r0, [sp, #40]	@ 0x28
 8020b38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b3a:	e7b9      	b.n	8020ab0 <_dtoa_r+0x62c>
 8020b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d10c      	bne.n	8020b5c <_dtoa_r+0x6d8>
 8020b42:	9806      	ldr	r0, [sp, #24]
 8020b44:	9907      	ldr	r1, [sp, #28]
 8020b46:	2200      	movs	r2, #0
 8020b48:	4b18      	ldr	r3, [pc, #96]	@ (8020bac <_dtoa_r+0x728>)
 8020b4a:	f7e1 fd77 	bl	800263c <__aeabi_dmul>
 8020b4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020b52:	f7df fcd1 	bl	80004f8 <__aeabi_dcmpge>
 8020b56:	2800      	cmp	r0, #0
 8020b58:	d100      	bne.n	8020b5c <_dtoa_r+0x6d8>
 8020b5a:	e164      	b.n	8020e26 <_dtoa_r+0x9a2>
 8020b5c:	2600      	movs	r6, #0
 8020b5e:	0037      	movs	r7, r6
 8020b60:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020b62:	9c08      	ldr	r4, [sp, #32]
 8020b64:	43db      	mvns	r3, r3
 8020b66:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b68:	2300      	movs	r3, #0
 8020b6a:	9304      	str	r3, [sp, #16]
 8020b6c:	0031      	movs	r1, r6
 8020b6e:	9803      	ldr	r0, [sp, #12]
 8020b70:	f000 ff32 	bl	80219d8 <_Bfree>
 8020b74:	2f00      	cmp	r7, #0
 8020b76:	d0d7      	beq.n	8020b28 <_dtoa_r+0x6a4>
 8020b78:	9b04      	ldr	r3, [sp, #16]
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d005      	beq.n	8020b8a <_dtoa_r+0x706>
 8020b7e:	42bb      	cmp	r3, r7
 8020b80:	d003      	beq.n	8020b8a <_dtoa_r+0x706>
 8020b82:	0019      	movs	r1, r3
 8020b84:	9803      	ldr	r0, [sp, #12]
 8020b86:	f000 ff27 	bl	80219d8 <_Bfree>
 8020b8a:	0039      	movs	r1, r7
 8020b8c:	9803      	ldr	r0, [sp, #12]
 8020b8e:	f000 ff23 	bl	80219d8 <_Bfree>
 8020b92:	e7c9      	b.n	8020b28 <_dtoa_r+0x6a4>
 8020b94:	08025e88 	.word	0x08025e88
 8020b98:	08025e60 	.word	0x08025e60
 8020b9c:	3ff00000 	.word	0x3ff00000
 8020ba0:	40240000 	.word	0x40240000
 8020ba4:	401c0000 	.word	0x401c0000
 8020ba8:	fcc00000 	.word	0xfcc00000
 8020bac:	40140000 	.word	0x40140000
 8020bb0:	3fe00000 	.word	0x3fe00000
 8020bb4:	9b04      	ldr	r3, [sp, #16]
 8020bb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8020bb8:	0023      	movs	r3, r4
 8020bba:	001c      	movs	r4, r3
 8020bbc:	3b01      	subs	r3, #1
 8020bbe:	781a      	ldrb	r2, [r3, #0]
 8020bc0:	2a39      	cmp	r2, #57	@ 0x39
 8020bc2:	d108      	bne.n	8020bd6 <_dtoa_r+0x752>
 8020bc4:	9a08      	ldr	r2, [sp, #32]
 8020bc6:	429a      	cmp	r2, r3
 8020bc8:	d1f7      	bne.n	8020bba <_dtoa_r+0x736>
 8020bca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020bcc:	9908      	ldr	r1, [sp, #32]
 8020bce:	3201      	adds	r2, #1
 8020bd0:	920c      	str	r2, [sp, #48]	@ 0x30
 8020bd2:	2230      	movs	r2, #48	@ 0x30
 8020bd4:	700a      	strb	r2, [r1, #0]
 8020bd6:	781a      	ldrb	r2, [r3, #0]
 8020bd8:	3201      	adds	r2, #1
 8020bda:	701a      	strb	r2, [r3, #0]
 8020bdc:	e7a4      	b.n	8020b28 <_dtoa_r+0x6a4>
 8020bde:	2200      	movs	r2, #0
 8020be0:	4bc6      	ldr	r3, [pc, #792]	@ (8020efc <_dtoa_r+0xa78>)
 8020be2:	f7e1 fd2b 	bl	800263c <__aeabi_dmul>
 8020be6:	2200      	movs	r2, #0
 8020be8:	2300      	movs	r3, #0
 8020bea:	0006      	movs	r6, r0
 8020bec:	000f      	movs	r7, r1
 8020bee:	f7df fc5f 	bl	80004b0 <__aeabi_dcmpeq>
 8020bf2:	2800      	cmp	r0, #0
 8020bf4:	d100      	bne.n	8020bf8 <_dtoa_r+0x774>
 8020bf6:	e6a1      	b.n	802093c <_dtoa_r+0x4b8>
 8020bf8:	e6d8      	b.n	80209ac <_dtoa_r+0x528>
 8020bfa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020bfc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020bfe:	9c06      	ldr	r4, [sp, #24]
 8020c00:	2f00      	cmp	r7, #0
 8020c02:	d014      	beq.n	8020c2e <_dtoa_r+0x7aa>
 8020c04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020c06:	2a01      	cmp	r2, #1
 8020c08:	dd00      	ble.n	8020c0c <_dtoa_r+0x788>
 8020c0a:	e0c8      	b.n	8020d9e <_dtoa_r+0x91a>
 8020c0c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020c0e:	2a00      	cmp	r2, #0
 8020c10:	d100      	bne.n	8020c14 <_dtoa_r+0x790>
 8020c12:	e0be      	b.n	8020d92 <_dtoa_r+0x90e>
 8020c14:	4aba      	ldr	r2, [pc, #744]	@ (8020f00 <_dtoa_r+0xa7c>)
 8020c16:	189b      	adds	r3, r3, r2
 8020c18:	9a06      	ldr	r2, [sp, #24]
 8020c1a:	2101      	movs	r1, #1
 8020c1c:	18d2      	adds	r2, r2, r3
 8020c1e:	9206      	str	r2, [sp, #24]
 8020c20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c22:	9803      	ldr	r0, [sp, #12]
 8020c24:	18d3      	adds	r3, r2, r3
 8020c26:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c28:	f000 ffda 	bl	8021be0 <__i2b>
 8020c2c:	0007      	movs	r7, r0
 8020c2e:	2c00      	cmp	r4, #0
 8020c30:	d00e      	beq.n	8020c50 <_dtoa_r+0x7cc>
 8020c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	dd0b      	ble.n	8020c50 <_dtoa_r+0x7cc>
 8020c38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c3a:	0023      	movs	r3, r4
 8020c3c:	4294      	cmp	r4, r2
 8020c3e:	dd00      	ble.n	8020c42 <_dtoa_r+0x7be>
 8020c40:	0013      	movs	r3, r2
 8020c42:	9a06      	ldr	r2, [sp, #24]
 8020c44:	1ae4      	subs	r4, r4, r3
 8020c46:	1ad2      	subs	r2, r2, r3
 8020c48:	9206      	str	r2, [sp, #24]
 8020c4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c4c:	1ad3      	subs	r3, r2, r3
 8020c4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c52:	2b00      	cmp	r3, #0
 8020c54:	d01f      	beq.n	8020c96 <_dtoa_r+0x812>
 8020c56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d100      	bne.n	8020c5e <_dtoa_r+0x7da>
 8020c5c:	e0b5      	b.n	8020dca <_dtoa_r+0x946>
 8020c5e:	2d00      	cmp	r5, #0
 8020c60:	d010      	beq.n	8020c84 <_dtoa_r+0x800>
 8020c62:	0039      	movs	r1, r7
 8020c64:	002a      	movs	r2, r5
 8020c66:	9803      	ldr	r0, [sp, #12]
 8020c68:	f001 f884 	bl	8021d74 <__pow5mult>
 8020c6c:	9a05      	ldr	r2, [sp, #20]
 8020c6e:	0001      	movs	r1, r0
 8020c70:	0007      	movs	r7, r0
 8020c72:	9803      	ldr	r0, [sp, #12]
 8020c74:	f000 ffcc 	bl	8021c10 <__multiply>
 8020c78:	0006      	movs	r6, r0
 8020c7a:	9905      	ldr	r1, [sp, #20]
 8020c7c:	9803      	ldr	r0, [sp, #12]
 8020c7e:	f000 feab 	bl	80219d8 <_Bfree>
 8020c82:	9605      	str	r6, [sp, #20]
 8020c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c86:	1b5a      	subs	r2, r3, r5
 8020c88:	42ab      	cmp	r3, r5
 8020c8a:	d004      	beq.n	8020c96 <_dtoa_r+0x812>
 8020c8c:	9905      	ldr	r1, [sp, #20]
 8020c8e:	9803      	ldr	r0, [sp, #12]
 8020c90:	f001 f870 	bl	8021d74 <__pow5mult>
 8020c94:	9005      	str	r0, [sp, #20]
 8020c96:	2101      	movs	r1, #1
 8020c98:	9803      	ldr	r0, [sp, #12]
 8020c9a:	f000 ffa1 	bl	8021be0 <__i2b>
 8020c9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ca0:	0006      	movs	r6, r0
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d100      	bne.n	8020ca8 <_dtoa_r+0x824>
 8020ca6:	e1bc      	b.n	8021022 <_dtoa_r+0xb9e>
 8020ca8:	001a      	movs	r2, r3
 8020caa:	0001      	movs	r1, r0
 8020cac:	9803      	ldr	r0, [sp, #12]
 8020cae:	f001 f861 	bl	8021d74 <__pow5mult>
 8020cb2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020cb4:	0006      	movs	r6, r0
 8020cb6:	2500      	movs	r5, #0
 8020cb8:	2b01      	cmp	r3, #1
 8020cba:	dc16      	bgt.n	8020cea <_dtoa_r+0x866>
 8020cbc:	2500      	movs	r5, #0
 8020cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020cc0:	42ab      	cmp	r3, r5
 8020cc2:	d10e      	bne.n	8020ce2 <_dtoa_r+0x85e>
 8020cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020cc6:	031b      	lsls	r3, r3, #12
 8020cc8:	42ab      	cmp	r3, r5
 8020cca:	d10a      	bne.n	8020ce2 <_dtoa_r+0x85e>
 8020ccc:	4b8d      	ldr	r3, [pc, #564]	@ (8020f04 <_dtoa_r+0xa80>)
 8020cce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020cd0:	4213      	tst	r3, r2
 8020cd2:	d006      	beq.n	8020ce2 <_dtoa_r+0x85e>
 8020cd4:	9b06      	ldr	r3, [sp, #24]
 8020cd6:	3501      	adds	r5, #1
 8020cd8:	3301      	adds	r3, #1
 8020cda:	9306      	str	r3, [sp, #24]
 8020cdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020cde:	3301      	adds	r3, #1
 8020ce0:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ce2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ce4:	2001      	movs	r0, #1
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d008      	beq.n	8020cfc <_dtoa_r+0x878>
 8020cea:	6933      	ldr	r3, [r6, #16]
 8020cec:	3303      	adds	r3, #3
 8020cee:	009b      	lsls	r3, r3, #2
 8020cf0:	18f3      	adds	r3, r6, r3
 8020cf2:	6858      	ldr	r0, [r3, #4]
 8020cf4:	f000 ff24 	bl	8021b40 <__hi0bits>
 8020cf8:	2320      	movs	r3, #32
 8020cfa:	1a18      	subs	r0, r3, r0
 8020cfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020cfe:	1818      	adds	r0, r3, r0
 8020d00:	0002      	movs	r2, r0
 8020d02:	231f      	movs	r3, #31
 8020d04:	401a      	ands	r2, r3
 8020d06:	4218      	tst	r0, r3
 8020d08:	d065      	beq.n	8020dd6 <_dtoa_r+0x952>
 8020d0a:	3301      	adds	r3, #1
 8020d0c:	1a9b      	subs	r3, r3, r2
 8020d0e:	2b04      	cmp	r3, #4
 8020d10:	dd5d      	ble.n	8020dce <_dtoa_r+0x94a>
 8020d12:	231c      	movs	r3, #28
 8020d14:	1a9b      	subs	r3, r3, r2
 8020d16:	9a06      	ldr	r2, [sp, #24]
 8020d18:	18e4      	adds	r4, r4, r3
 8020d1a:	18d2      	adds	r2, r2, r3
 8020d1c:	9206      	str	r2, [sp, #24]
 8020d1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020d20:	18d3      	adds	r3, r2, r3
 8020d22:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d24:	9b06      	ldr	r3, [sp, #24]
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	dd05      	ble.n	8020d36 <_dtoa_r+0x8b2>
 8020d2a:	001a      	movs	r2, r3
 8020d2c:	9905      	ldr	r1, [sp, #20]
 8020d2e:	9803      	ldr	r0, [sp, #12]
 8020d30:	f001 f87c 	bl	8021e2c <__lshift>
 8020d34:	9005      	str	r0, [sp, #20]
 8020d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	dd05      	ble.n	8020d48 <_dtoa_r+0x8c4>
 8020d3c:	0031      	movs	r1, r6
 8020d3e:	001a      	movs	r2, r3
 8020d40:	9803      	ldr	r0, [sp, #12]
 8020d42:	f001 f873 	bl	8021e2c <__lshift>
 8020d46:	0006      	movs	r6, r0
 8020d48:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	d045      	beq.n	8020dda <_dtoa_r+0x956>
 8020d4e:	0031      	movs	r1, r6
 8020d50:	9805      	ldr	r0, [sp, #20]
 8020d52:	f001 f8d7 	bl	8021f04 <__mcmp>
 8020d56:	2800      	cmp	r0, #0
 8020d58:	da3f      	bge.n	8020dda <_dtoa_r+0x956>
 8020d5a:	9b04      	ldr	r3, [sp, #16]
 8020d5c:	220a      	movs	r2, #10
 8020d5e:	3b01      	subs	r3, #1
 8020d60:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d62:	9905      	ldr	r1, [sp, #20]
 8020d64:	2300      	movs	r3, #0
 8020d66:	9803      	ldr	r0, [sp, #12]
 8020d68:	f000 fe5a 	bl	8021a20 <__multadd>
 8020d6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d6e:	9005      	str	r0, [sp, #20]
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	d100      	bne.n	8020d76 <_dtoa_r+0x8f2>
 8020d74:	e15c      	b.n	8021030 <_dtoa_r+0xbac>
 8020d76:	2300      	movs	r3, #0
 8020d78:	0039      	movs	r1, r7
 8020d7a:	220a      	movs	r2, #10
 8020d7c:	9803      	ldr	r0, [sp, #12]
 8020d7e:	f000 fe4f 	bl	8021a20 <__multadd>
 8020d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d84:	0007      	movs	r7, r0
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	dc55      	bgt.n	8020e36 <_dtoa_r+0x9b2>
 8020d8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020d8c:	2b02      	cmp	r3, #2
 8020d8e:	dc2d      	bgt.n	8020dec <_dtoa_r+0x968>
 8020d90:	e051      	b.n	8020e36 <_dtoa_r+0x9b2>
 8020d92:	2336      	movs	r3, #54	@ 0x36
 8020d94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020d96:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020d98:	9c06      	ldr	r4, [sp, #24]
 8020d9a:	1a9b      	subs	r3, r3, r2
 8020d9c:	e73c      	b.n	8020c18 <_dtoa_r+0x794>
 8020d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020da0:	1e5d      	subs	r5, r3, #1
 8020da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020da4:	42ab      	cmp	r3, r5
 8020da6:	db08      	blt.n	8020dba <_dtoa_r+0x936>
 8020da8:	1b5d      	subs	r5, r3, r5
 8020daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dac:	9c06      	ldr	r4, [sp, #24]
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	db00      	blt.n	8020db4 <_dtoa_r+0x930>
 8020db2:	e731      	b.n	8020c18 <_dtoa_r+0x794>
 8020db4:	1ae4      	subs	r4, r4, r3
 8020db6:	2300      	movs	r3, #0
 8020db8:	e72e      	b.n	8020c18 <_dtoa_r+0x794>
 8020dba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020dbc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020dbe:	1aeb      	subs	r3, r5, r3
 8020dc0:	18d3      	adds	r3, r2, r3
 8020dc2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020dc4:	9314      	str	r3, [sp, #80]	@ 0x50
 8020dc6:	2500      	movs	r5, #0
 8020dc8:	e7ef      	b.n	8020daa <_dtoa_r+0x926>
 8020dca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020dcc:	e75e      	b.n	8020c8c <_dtoa_r+0x808>
 8020dce:	2b04      	cmp	r3, #4
 8020dd0:	d0a8      	beq.n	8020d24 <_dtoa_r+0x8a0>
 8020dd2:	331c      	adds	r3, #28
 8020dd4:	e79f      	b.n	8020d16 <_dtoa_r+0x892>
 8020dd6:	0013      	movs	r3, r2
 8020dd8:	e7fb      	b.n	8020dd2 <_dtoa_r+0x94e>
 8020dda:	9b04      	ldr	r3, [sp, #16]
 8020ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8020dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020de0:	930e      	str	r3, [sp, #56]	@ 0x38
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	dc23      	bgt.n	8020e2e <_dtoa_r+0x9aa>
 8020de6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020de8:	2b02      	cmp	r3, #2
 8020dea:	dd20      	ble.n	8020e2e <_dtoa_r+0x9aa>
 8020dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d000      	beq.n	8020df4 <_dtoa_r+0x970>
 8020df2:	e6b5      	b.n	8020b60 <_dtoa_r+0x6dc>
 8020df4:	0031      	movs	r1, r6
 8020df6:	2205      	movs	r2, #5
 8020df8:	9803      	ldr	r0, [sp, #12]
 8020dfa:	f000 fe11 	bl	8021a20 <__multadd>
 8020dfe:	0006      	movs	r6, r0
 8020e00:	0001      	movs	r1, r0
 8020e02:	9805      	ldr	r0, [sp, #20]
 8020e04:	f001 f87e 	bl	8021f04 <__mcmp>
 8020e08:	2800      	cmp	r0, #0
 8020e0a:	dc00      	bgt.n	8020e0e <_dtoa_r+0x98a>
 8020e0c:	e6a8      	b.n	8020b60 <_dtoa_r+0x6dc>
 8020e0e:	9b08      	ldr	r3, [sp, #32]
 8020e10:	9a08      	ldr	r2, [sp, #32]
 8020e12:	1c5c      	adds	r4, r3, #1
 8020e14:	2331      	movs	r3, #49	@ 0x31
 8020e16:	7013      	strb	r3, [r2, #0]
 8020e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e1a:	3301      	adds	r3, #1
 8020e1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e1e:	e6a3      	b.n	8020b68 <_dtoa_r+0x6e4>
 8020e20:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020e22:	0037      	movs	r7, r6
 8020e24:	e7f3      	b.n	8020e0e <_dtoa_r+0x98a>
 8020e26:	9b04      	ldr	r3, [sp, #16]
 8020e28:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020e2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e2c:	e7f9      	b.n	8020e22 <_dtoa_r+0x99e>
 8020e2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d100      	bne.n	8020e36 <_dtoa_r+0x9b2>
 8020e34:	e100      	b.n	8021038 <_dtoa_r+0xbb4>
 8020e36:	2c00      	cmp	r4, #0
 8020e38:	dd05      	ble.n	8020e46 <_dtoa_r+0x9c2>
 8020e3a:	0039      	movs	r1, r7
 8020e3c:	0022      	movs	r2, r4
 8020e3e:	9803      	ldr	r0, [sp, #12]
 8020e40:	f000 fff4 	bl	8021e2c <__lshift>
 8020e44:	0007      	movs	r7, r0
 8020e46:	0038      	movs	r0, r7
 8020e48:	2d00      	cmp	r5, #0
 8020e4a:	d018      	beq.n	8020e7e <_dtoa_r+0x9fa>
 8020e4c:	6879      	ldr	r1, [r7, #4]
 8020e4e:	9803      	ldr	r0, [sp, #12]
 8020e50:	f000 fd7e 	bl	8021950 <_Balloc>
 8020e54:	1e04      	subs	r4, r0, #0
 8020e56:	d105      	bne.n	8020e64 <_dtoa_r+0x9e0>
 8020e58:	0022      	movs	r2, r4
 8020e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8020f08 <_dtoa_r+0xa84>)
 8020e5c:	482b      	ldr	r0, [pc, #172]	@ (8020f0c <_dtoa_r+0xa88>)
 8020e5e:	492c      	ldr	r1, [pc, #176]	@ (8020f10 <_dtoa_r+0xa8c>)
 8020e60:	f7ff fb25 	bl	80204ae <_dtoa_r+0x2a>
 8020e64:	0039      	movs	r1, r7
 8020e66:	693a      	ldr	r2, [r7, #16]
 8020e68:	310c      	adds	r1, #12
 8020e6a:	3202      	adds	r2, #2
 8020e6c:	0092      	lsls	r2, r2, #2
 8020e6e:	300c      	adds	r0, #12
 8020e70:	f7ff fa6a 	bl	8020348 <memcpy>
 8020e74:	2201      	movs	r2, #1
 8020e76:	0021      	movs	r1, r4
 8020e78:	9803      	ldr	r0, [sp, #12]
 8020e7a:	f000 ffd7 	bl	8021e2c <__lshift>
 8020e7e:	9b08      	ldr	r3, [sp, #32]
 8020e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e82:	9306      	str	r3, [sp, #24]
 8020e84:	3b01      	subs	r3, #1
 8020e86:	189b      	adds	r3, r3, r2
 8020e88:	2201      	movs	r2, #1
 8020e8a:	9704      	str	r7, [sp, #16]
 8020e8c:	0007      	movs	r7, r0
 8020e8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020e92:	4013      	ands	r3, r2
 8020e94:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e96:	0031      	movs	r1, r6
 8020e98:	9805      	ldr	r0, [sp, #20]
 8020e9a:	f7ff fa65 	bl	8020368 <quorem>
 8020e9e:	9904      	ldr	r1, [sp, #16]
 8020ea0:	0005      	movs	r5, r0
 8020ea2:	900a      	str	r0, [sp, #40]	@ 0x28
 8020ea4:	9805      	ldr	r0, [sp, #20]
 8020ea6:	f001 f82d 	bl	8021f04 <__mcmp>
 8020eaa:	003a      	movs	r2, r7
 8020eac:	900d      	str	r0, [sp, #52]	@ 0x34
 8020eae:	0031      	movs	r1, r6
 8020eb0:	9803      	ldr	r0, [sp, #12]
 8020eb2:	f001 f843 	bl	8021f3c <__mdiff>
 8020eb6:	2201      	movs	r2, #1
 8020eb8:	68c3      	ldr	r3, [r0, #12]
 8020eba:	0004      	movs	r4, r0
 8020ebc:	3530      	adds	r5, #48	@ 0x30
 8020ebe:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d104      	bne.n	8020ece <_dtoa_r+0xa4a>
 8020ec4:	0001      	movs	r1, r0
 8020ec6:	9805      	ldr	r0, [sp, #20]
 8020ec8:	f001 f81c 	bl	8021f04 <__mcmp>
 8020ecc:	9009      	str	r0, [sp, #36]	@ 0x24
 8020ece:	0021      	movs	r1, r4
 8020ed0:	9803      	ldr	r0, [sp, #12]
 8020ed2:	f000 fd81 	bl	80219d8 <_Bfree>
 8020ed6:	9b06      	ldr	r3, [sp, #24]
 8020ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020eda:	1c5c      	adds	r4, r3, #1
 8020edc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020ede:	4313      	orrs	r3, r2
 8020ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ee2:	4313      	orrs	r3, r2
 8020ee4:	d116      	bne.n	8020f14 <_dtoa_r+0xa90>
 8020ee6:	2d39      	cmp	r5, #57	@ 0x39
 8020ee8:	d02f      	beq.n	8020f4a <_dtoa_r+0xac6>
 8020eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	dd01      	ble.n	8020ef4 <_dtoa_r+0xa70>
 8020ef0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020ef2:	3531      	adds	r5, #49	@ 0x31
 8020ef4:	9b06      	ldr	r3, [sp, #24]
 8020ef6:	701d      	strb	r5, [r3, #0]
 8020ef8:	e638      	b.n	8020b6c <_dtoa_r+0x6e8>
 8020efa:	46c0      	nop			@ (mov r8, r8)
 8020efc:	40240000 	.word	0x40240000
 8020f00:	00000433 	.word	0x00000433
 8020f04:	7ff00000 	.word	0x7ff00000
 8020f08:	08025d89 	.word	0x08025d89
 8020f0c:	08025d31 	.word	0x08025d31
 8020f10:	000002ef 	.word	0x000002ef
 8020f14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	db04      	blt.n	8020f24 <_dtoa_r+0xaa0>
 8020f1a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020f1c:	4313      	orrs	r3, r2
 8020f1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f20:	4313      	orrs	r3, r2
 8020f22:	d11e      	bne.n	8020f62 <_dtoa_r+0xade>
 8020f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	dde4      	ble.n	8020ef4 <_dtoa_r+0xa70>
 8020f2a:	9905      	ldr	r1, [sp, #20]
 8020f2c:	2201      	movs	r2, #1
 8020f2e:	9803      	ldr	r0, [sp, #12]
 8020f30:	f000 ff7c 	bl	8021e2c <__lshift>
 8020f34:	0031      	movs	r1, r6
 8020f36:	9005      	str	r0, [sp, #20]
 8020f38:	f000 ffe4 	bl	8021f04 <__mcmp>
 8020f3c:	2800      	cmp	r0, #0
 8020f3e:	dc02      	bgt.n	8020f46 <_dtoa_r+0xac2>
 8020f40:	d1d8      	bne.n	8020ef4 <_dtoa_r+0xa70>
 8020f42:	07eb      	lsls	r3, r5, #31
 8020f44:	d5d6      	bpl.n	8020ef4 <_dtoa_r+0xa70>
 8020f46:	2d39      	cmp	r5, #57	@ 0x39
 8020f48:	d1d2      	bne.n	8020ef0 <_dtoa_r+0xa6c>
 8020f4a:	2339      	movs	r3, #57	@ 0x39
 8020f4c:	9a06      	ldr	r2, [sp, #24]
 8020f4e:	7013      	strb	r3, [r2, #0]
 8020f50:	0023      	movs	r3, r4
 8020f52:	001c      	movs	r4, r3
 8020f54:	3b01      	subs	r3, #1
 8020f56:	781a      	ldrb	r2, [r3, #0]
 8020f58:	2a39      	cmp	r2, #57	@ 0x39
 8020f5a:	d04f      	beq.n	8020ffc <_dtoa_r+0xb78>
 8020f5c:	3201      	adds	r2, #1
 8020f5e:	701a      	strb	r2, [r3, #0]
 8020f60:	e604      	b.n	8020b6c <_dtoa_r+0x6e8>
 8020f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	dd03      	ble.n	8020f70 <_dtoa_r+0xaec>
 8020f68:	2d39      	cmp	r5, #57	@ 0x39
 8020f6a:	d0ee      	beq.n	8020f4a <_dtoa_r+0xac6>
 8020f6c:	3501      	adds	r5, #1
 8020f6e:	e7c1      	b.n	8020ef4 <_dtoa_r+0xa70>
 8020f70:	9b06      	ldr	r3, [sp, #24]
 8020f72:	9a06      	ldr	r2, [sp, #24]
 8020f74:	701d      	strb	r5, [r3, #0]
 8020f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f78:	4293      	cmp	r3, r2
 8020f7a:	d02a      	beq.n	8020fd2 <_dtoa_r+0xb4e>
 8020f7c:	2300      	movs	r3, #0
 8020f7e:	220a      	movs	r2, #10
 8020f80:	9905      	ldr	r1, [sp, #20]
 8020f82:	9803      	ldr	r0, [sp, #12]
 8020f84:	f000 fd4c 	bl	8021a20 <__multadd>
 8020f88:	9b04      	ldr	r3, [sp, #16]
 8020f8a:	9005      	str	r0, [sp, #20]
 8020f8c:	42bb      	cmp	r3, r7
 8020f8e:	d109      	bne.n	8020fa4 <_dtoa_r+0xb20>
 8020f90:	2300      	movs	r3, #0
 8020f92:	220a      	movs	r2, #10
 8020f94:	9904      	ldr	r1, [sp, #16]
 8020f96:	9803      	ldr	r0, [sp, #12]
 8020f98:	f000 fd42 	bl	8021a20 <__multadd>
 8020f9c:	9004      	str	r0, [sp, #16]
 8020f9e:	0007      	movs	r7, r0
 8020fa0:	9406      	str	r4, [sp, #24]
 8020fa2:	e778      	b.n	8020e96 <_dtoa_r+0xa12>
 8020fa4:	9904      	ldr	r1, [sp, #16]
 8020fa6:	2300      	movs	r3, #0
 8020fa8:	220a      	movs	r2, #10
 8020faa:	9803      	ldr	r0, [sp, #12]
 8020fac:	f000 fd38 	bl	8021a20 <__multadd>
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	9004      	str	r0, [sp, #16]
 8020fb4:	220a      	movs	r2, #10
 8020fb6:	0039      	movs	r1, r7
 8020fb8:	9803      	ldr	r0, [sp, #12]
 8020fba:	f000 fd31 	bl	8021a20 <__multadd>
 8020fbe:	e7ee      	b.n	8020f9e <_dtoa_r+0xb1a>
 8020fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fc2:	2401      	movs	r4, #1
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	dd00      	ble.n	8020fca <_dtoa_r+0xb46>
 8020fc8:	001c      	movs	r4, r3
 8020fca:	9b08      	ldr	r3, [sp, #32]
 8020fcc:	191c      	adds	r4, r3, r4
 8020fce:	2300      	movs	r3, #0
 8020fd0:	9304      	str	r3, [sp, #16]
 8020fd2:	9905      	ldr	r1, [sp, #20]
 8020fd4:	2201      	movs	r2, #1
 8020fd6:	9803      	ldr	r0, [sp, #12]
 8020fd8:	f000 ff28 	bl	8021e2c <__lshift>
 8020fdc:	0031      	movs	r1, r6
 8020fde:	9005      	str	r0, [sp, #20]
 8020fe0:	f000 ff90 	bl	8021f04 <__mcmp>
 8020fe4:	2800      	cmp	r0, #0
 8020fe6:	dcb3      	bgt.n	8020f50 <_dtoa_r+0xacc>
 8020fe8:	d101      	bne.n	8020fee <_dtoa_r+0xb6a>
 8020fea:	07ed      	lsls	r5, r5, #31
 8020fec:	d4b0      	bmi.n	8020f50 <_dtoa_r+0xacc>
 8020fee:	0023      	movs	r3, r4
 8020ff0:	001c      	movs	r4, r3
 8020ff2:	3b01      	subs	r3, #1
 8020ff4:	781a      	ldrb	r2, [r3, #0]
 8020ff6:	2a30      	cmp	r2, #48	@ 0x30
 8020ff8:	d0fa      	beq.n	8020ff0 <_dtoa_r+0xb6c>
 8020ffa:	e5b7      	b.n	8020b6c <_dtoa_r+0x6e8>
 8020ffc:	9a08      	ldr	r2, [sp, #32]
 8020ffe:	429a      	cmp	r2, r3
 8021000:	d1a7      	bne.n	8020f52 <_dtoa_r+0xace>
 8021002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021004:	3301      	adds	r3, #1
 8021006:	930c      	str	r3, [sp, #48]	@ 0x30
 8021008:	2331      	movs	r3, #49	@ 0x31
 802100a:	7013      	strb	r3, [r2, #0]
 802100c:	e5ae      	b.n	8020b6c <_dtoa_r+0x6e8>
 802100e:	4b15      	ldr	r3, [pc, #84]	@ (8021064 <_dtoa_r+0xbe0>)
 8021010:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021012:	9308      	str	r3, [sp, #32]
 8021014:	4b14      	ldr	r3, [pc, #80]	@ (8021068 <_dtoa_r+0xbe4>)
 8021016:	2a00      	cmp	r2, #0
 8021018:	d001      	beq.n	802101e <_dtoa_r+0xb9a>
 802101a:	f7ff fa7b 	bl	8020514 <_dtoa_r+0x90>
 802101e:	f7ff fa7b 	bl	8020518 <_dtoa_r+0x94>
 8021022:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021024:	2b01      	cmp	r3, #1
 8021026:	dc00      	bgt.n	802102a <_dtoa_r+0xba6>
 8021028:	e648      	b.n	8020cbc <_dtoa_r+0x838>
 802102a:	2001      	movs	r0, #1
 802102c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802102e:	e665      	b.n	8020cfc <_dtoa_r+0x878>
 8021030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021032:	2b00      	cmp	r3, #0
 8021034:	dc00      	bgt.n	8021038 <_dtoa_r+0xbb4>
 8021036:	e6d6      	b.n	8020de6 <_dtoa_r+0x962>
 8021038:	2400      	movs	r4, #0
 802103a:	0031      	movs	r1, r6
 802103c:	9805      	ldr	r0, [sp, #20]
 802103e:	f7ff f993 	bl	8020368 <quorem>
 8021042:	9b08      	ldr	r3, [sp, #32]
 8021044:	3030      	adds	r0, #48	@ 0x30
 8021046:	5518      	strb	r0, [r3, r4]
 8021048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802104a:	3401      	adds	r4, #1
 802104c:	0005      	movs	r5, r0
 802104e:	429c      	cmp	r4, r3
 8021050:	dab6      	bge.n	8020fc0 <_dtoa_r+0xb3c>
 8021052:	2300      	movs	r3, #0
 8021054:	220a      	movs	r2, #10
 8021056:	9905      	ldr	r1, [sp, #20]
 8021058:	9803      	ldr	r0, [sp, #12]
 802105a:	f000 fce1 	bl	8021a20 <__multadd>
 802105e:	9005      	str	r0, [sp, #20]
 8021060:	e7eb      	b.n	802103a <_dtoa_r+0xbb6>
 8021062:	46c0      	nop			@ (mov r8, r8)
 8021064:	08025d0d 	.word	0x08025d0d
 8021068:	08025d15 	.word	0x08025d15

0802106c <_free_r>:
 802106c:	b570      	push	{r4, r5, r6, lr}
 802106e:	0005      	movs	r5, r0
 8021070:	1e0c      	subs	r4, r1, #0
 8021072:	d010      	beq.n	8021096 <_free_r+0x2a>
 8021074:	3c04      	subs	r4, #4
 8021076:	6823      	ldr	r3, [r4, #0]
 8021078:	2b00      	cmp	r3, #0
 802107a:	da00      	bge.n	802107e <_free_r+0x12>
 802107c:	18e4      	adds	r4, r4, r3
 802107e:	0028      	movs	r0, r5
 8021080:	f000 fc56 	bl	8021930 <__malloc_lock>
 8021084:	4a1d      	ldr	r2, [pc, #116]	@ (80210fc <_free_r+0x90>)
 8021086:	6813      	ldr	r3, [r2, #0]
 8021088:	2b00      	cmp	r3, #0
 802108a:	d105      	bne.n	8021098 <_free_r+0x2c>
 802108c:	6063      	str	r3, [r4, #4]
 802108e:	6014      	str	r4, [r2, #0]
 8021090:	0028      	movs	r0, r5
 8021092:	f000 fc55 	bl	8021940 <__malloc_unlock>
 8021096:	bd70      	pop	{r4, r5, r6, pc}
 8021098:	42a3      	cmp	r3, r4
 802109a:	d908      	bls.n	80210ae <_free_r+0x42>
 802109c:	6820      	ldr	r0, [r4, #0]
 802109e:	1821      	adds	r1, r4, r0
 80210a0:	428b      	cmp	r3, r1
 80210a2:	d1f3      	bne.n	802108c <_free_r+0x20>
 80210a4:	6819      	ldr	r1, [r3, #0]
 80210a6:	685b      	ldr	r3, [r3, #4]
 80210a8:	1809      	adds	r1, r1, r0
 80210aa:	6021      	str	r1, [r4, #0]
 80210ac:	e7ee      	b.n	802108c <_free_r+0x20>
 80210ae:	001a      	movs	r2, r3
 80210b0:	685b      	ldr	r3, [r3, #4]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d001      	beq.n	80210ba <_free_r+0x4e>
 80210b6:	42a3      	cmp	r3, r4
 80210b8:	d9f9      	bls.n	80210ae <_free_r+0x42>
 80210ba:	6811      	ldr	r1, [r2, #0]
 80210bc:	1850      	adds	r0, r2, r1
 80210be:	42a0      	cmp	r0, r4
 80210c0:	d10b      	bne.n	80210da <_free_r+0x6e>
 80210c2:	6820      	ldr	r0, [r4, #0]
 80210c4:	1809      	adds	r1, r1, r0
 80210c6:	1850      	adds	r0, r2, r1
 80210c8:	6011      	str	r1, [r2, #0]
 80210ca:	4283      	cmp	r3, r0
 80210cc:	d1e0      	bne.n	8021090 <_free_r+0x24>
 80210ce:	6818      	ldr	r0, [r3, #0]
 80210d0:	685b      	ldr	r3, [r3, #4]
 80210d2:	1841      	adds	r1, r0, r1
 80210d4:	6011      	str	r1, [r2, #0]
 80210d6:	6053      	str	r3, [r2, #4]
 80210d8:	e7da      	b.n	8021090 <_free_r+0x24>
 80210da:	42a0      	cmp	r0, r4
 80210dc:	d902      	bls.n	80210e4 <_free_r+0x78>
 80210de:	230c      	movs	r3, #12
 80210e0:	602b      	str	r3, [r5, #0]
 80210e2:	e7d5      	b.n	8021090 <_free_r+0x24>
 80210e4:	6820      	ldr	r0, [r4, #0]
 80210e6:	1821      	adds	r1, r4, r0
 80210e8:	428b      	cmp	r3, r1
 80210ea:	d103      	bne.n	80210f4 <_free_r+0x88>
 80210ec:	6819      	ldr	r1, [r3, #0]
 80210ee:	685b      	ldr	r3, [r3, #4]
 80210f0:	1809      	adds	r1, r1, r0
 80210f2:	6021      	str	r1, [r4, #0]
 80210f4:	6063      	str	r3, [r4, #4]
 80210f6:	6054      	str	r4, [r2, #4]
 80210f8:	e7ca      	b.n	8021090 <_free_r+0x24>
 80210fa:	46c0      	nop			@ (mov r8, r8)
 80210fc:	200037ac 	.word	0x200037ac

08021100 <rshift>:
 8021100:	0002      	movs	r2, r0
 8021102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021104:	6904      	ldr	r4, [r0, #16]
 8021106:	b085      	sub	sp, #20
 8021108:	3214      	adds	r2, #20
 802110a:	114b      	asrs	r3, r1, #5
 802110c:	0016      	movs	r6, r2
 802110e:	9302      	str	r3, [sp, #8]
 8021110:	429c      	cmp	r4, r3
 8021112:	dd31      	ble.n	8021178 <rshift+0x78>
 8021114:	261f      	movs	r6, #31
 8021116:	000f      	movs	r7, r1
 8021118:	009b      	lsls	r3, r3, #2
 802111a:	00a5      	lsls	r5, r4, #2
 802111c:	18d3      	adds	r3, r2, r3
 802111e:	4037      	ands	r7, r6
 8021120:	1955      	adds	r5, r2, r5
 8021122:	9300      	str	r3, [sp, #0]
 8021124:	9701      	str	r7, [sp, #4]
 8021126:	4231      	tst	r1, r6
 8021128:	d10d      	bne.n	8021146 <rshift+0x46>
 802112a:	0016      	movs	r6, r2
 802112c:	0019      	movs	r1, r3
 802112e:	428d      	cmp	r5, r1
 8021130:	d836      	bhi.n	80211a0 <rshift+0xa0>
 8021132:	9b00      	ldr	r3, [sp, #0]
 8021134:	2600      	movs	r6, #0
 8021136:	3b03      	subs	r3, #3
 8021138:	429d      	cmp	r5, r3
 802113a:	d302      	bcc.n	8021142 <rshift+0x42>
 802113c:	9b02      	ldr	r3, [sp, #8]
 802113e:	1ae4      	subs	r4, r4, r3
 8021140:	00a6      	lsls	r6, r4, #2
 8021142:	1996      	adds	r6, r2, r6
 8021144:	e018      	b.n	8021178 <rshift+0x78>
 8021146:	2120      	movs	r1, #32
 8021148:	9e01      	ldr	r6, [sp, #4]
 802114a:	9f01      	ldr	r7, [sp, #4]
 802114c:	1b89      	subs	r1, r1, r6
 802114e:	9e00      	ldr	r6, [sp, #0]
 8021150:	9103      	str	r1, [sp, #12]
 8021152:	ce02      	ldmia	r6!, {r1}
 8021154:	4694      	mov	ip, r2
 8021156:	40f9      	lsrs	r1, r7
 8021158:	42b5      	cmp	r5, r6
 802115a:	d816      	bhi.n	802118a <rshift+0x8a>
 802115c:	9b00      	ldr	r3, [sp, #0]
 802115e:	2600      	movs	r6, #0
 8021160:	3301      	adds	r3, #1
 8021162:	429d      	cmp	r5, r3
 8021164:	d303      	bcc.n	802116e <rshift+0x6e>
 8021166:	9b02      	ldr	r3, [sp, #8]
 8021168:	1ae4      	subs	r4, r4, r3
 802116a:	00a6      	lsls	r6, r4, #2
 802116c:	3e04      	subs	r6, #4
 802116e:	1996      	adds	r6, r2, r6
 8021170:	6031      	str	r1, [r6, #0]
 8021172:	2900      	cmp	r1, #0
 8021174:	d000      	beq.n	8021178 <rshift+0x78>
 8021176:	3604      	adds	r6, #4
 8021178:	1ab1      	subs	r1, r6, r2
 802117a:	1089      	asrs	r1, r1, #2
 802117c:	6101      	str	r1, [r0, #16]
 802117e:	4296      	cmp	r6, r2
 8021180:	d101      	bne.n	8021186 <rshift+0x86>
 8021182:	2300      	movs	r3, #0
 8021184:	6143      	str	r3, [r0, #20]
 8021186:	b005      	add	sp, #20
 8021188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802118a:	6837      	ldr	r7, [r6, #0]
 802118c:	9b03      	ldr	r3, [sp, #12]
 802118e:	409f      	lsls	r7, r3
 8021190:	430f      	orrs	r7, r1
 8021192:	4661      	mov	r1, ip
 8021194:	c180      	stmia	r1!, {r7}
 8021196:	468c      	mov	ip, r1
 8021198:	9b01      	ldr	r3, [sp, #4]
 802119a:	ce02      	ldmia	r6!, {r1}
 802119c:	40d9      	lsrs	r1, r3
 802119e:	e7db      	b.n	8021158 <rshift+0x58>
 80211a0:	c980      	ldmia	r1!, {r7}
 80211a2:	c680      	stmia	r6!, {r7}
 80211a4:	e7c3      	b.n	802112e <rshift+0x2e>

080211a6 <__hexdig_fun>:
 80211a6:	0002      	movs	r2, r0
 80211a8:	3a30      	subs	r2, #48	@ 0x30
 80211aa:	0003      	movs	r3, r0
 80211ac:	2a09      	cmp	r2, #9
 80211ae:	d802      	bhi.n	80211b6 <__hexdig_fun+0x10>
 80211b0:	3b20      	subs	r3, #32
 80211b2:	b2d8      	uxtb	r0, r3
 80211b4:	4770      	bx	lr
 80211b6:	0002      	movs	r2, r0
 80211b8:	3a61      	subs	r2, #97	@ 0x61
 80211ba:	2a05      	cmp	r2, #5
 80211bc:	d801      	bhi.n	80211c2 <__hexdig_fun+0x1c>
 80211be:	3b47      	subs	r3, #71	@ 0x47
 80211c0:	e7f7      	b.n	80211b2 <__hexdig_fun+0xc>
 80211c2:	001a      	movs	r2, r3
 80211c4:	3a41      	subs	r2, #65	@ 0x41
 80211c6:	2000      	movs	r0, #0
 80211c8:	2a05      	cmp	r2, #5
 80211ca:	d8f3      	bhi.n	80211b4 <__hexdig_fun+0xe>
 80211cc:	3b27      	subs	r3, #39	@ 0x27
 80211ce:	e7f0      	b.n	80211b2 <__hexdig_fun+0xc>

080211d0 <__gethex>:
 80211d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211d2:	b089      	sub	sp, #36	@ 0x24
 80211d4:	9307      	str	r3, [sp, #28]
 80211d6:	680b      	ldr	r3, [r1, #0]
 80211d8:	9201      	str	r2, [sp, #4]
 80211da:	9003      	str	r0, [sp, #12]
 80211dc:	9106      	str	r1, [sp, #24]
 80211de:	1c9a      	adds	r2, r3, #2
 80211e0:	0011      	movs	r1, r2
 80211e2:	3201      	adds	r2, #1
 80211e4:	1e50      	subs	r0, r2, #1
 80211e6:	7800      	ldrb	r0, [r0, #0]
 80211e8:	2830      	cmp	r0, #48	@ 0x30
 80211ea:	d0f9      	beq.n	80211e0 <__gethex+0x10>
 80211ec:	1acb      	subs	r3, r1, r3
 80211ee:	3b02      	subs	r3, #2
 80211f0:	9305      	str	r3, [sp, #20]
 80211f2:	9100      	str	r1, [sp, #0]
 80211f4:	f7ff ffd7 	bl	80211a6 <__hexdig_fun>
 80211f8:	2300      	movs	r3, #0
 80211fa:	001d      	movs	r5, r3
 80211fc:	9302      	str	r3, [sp, #8]
 80211fe:	4298      	cmp	r0, r3
 8021200:	d11e      	bne.n	8021240 <__gethex+0x70>
 8021202:	2201      	movs	r2, #1
 8021204:	49a6      	ldr	r1, [pc, #664]	@ (80214a0 <__gethex+0x2d0>)
 8021206:	9800      	ldr	r0, [sp, #0]
 8021208:	f7fe ffd8 	bl	80201bc <strncmp>
 802120c:	0007      	movs	r7, r0
 802120e:	42a8      	cmp	r0, r5
 8021210:	d000      	beq.n	8021214 <__gethex+0x44>
 8021212:	e06a      	b.n	80212ea <__gethex+0x11a>
 8021214:	9b00      	ldr	r3, [sp, #0]
 8021216:	7858      	ldrb	r0, [r3, #1]
 8021218:	1c5c      	adds	r4, r3, #1
 802121a:	f7ff ffc4 	bl	80211a6 <__hexdig_fun>
 802121e:	2301      	movs	r3, #1
 8021220:	9302      	str	r3, [sp, #8]
 8021222:	42a8      	cmp	r0, r5
 8021224:	d02f      	beq.n	8021286 <__gethex+0xb6>
 8021226:	9400      	str	r4, [sp, #0]
 8021228:	9b00      	ldr	r3, [sp, #0]
 802122a:	7818      	ldrb	r0, [r3, #0]
 802122c:	2830      	cmp	r0, #48	@ 0x30
 802122e:	d009      	beq.n	8021244 <__gethex+0x74>
 8021230:	f7ff ffb9 	bl	80211a6 <__hexdig_fun>
 8021234:	4242      	negs	r2, r0
 8021236:	4142      	adcs	r2, r0
 8021238:	2301      	movs	r3, #1
 802123a:	0025      	movs	r5, r4
 802123c:	9202      	str	r2, [sp, #8]
 802123e:	9305      	str	r3, [sp, #20]
 8021240:	9c00      	ldr	r4, [sp, #0]
 8021242:	e004      	b.n	802124e <__gethex+0x7e>
 8021244:	9b00      	ldr	r3, [sp, #0]
 8021246:	3301      	adds	r3, #1
 8021248:	9300      	str	r3, [sp, #0]
 802124a:	e7ed      	b.n	8021228 <__gethex+0x58>
 802124c:	3401      	adds	r4, #1
 802124e:	7820      	ldrb	r0, [r4, #0]
 8021250:	f7ff ffa9 	bl	80211a6 <__hexdig_fun>
 8021254:	1e07      	subs	r7, r0, #0
 8021256:	d1f9      	bne.n	802124c <__gethex+0x7c>
 8021258:	2201      	movs	r2, #1
 802125a:	0020      	movs	r0, r4
 802125c:	4990      	ldr	r1, [pc, #576]	@ (80214a0 <__gethex+0x2d0>)
 802125e:	f7fe ffad 	bl	80201bc <strncmp>
 8021262:	2800      	cmp	r0, #0
 8021264:	d10d      	bne.n	8021282 <__gethex+0xb2>
 8021266:	2d00      	cmp	r5, #0
 8021268:	d106      	bne.n	8021278 <__gethex+0xa8>
 802126a:	3401      	adds	r4, #1
 802126c:	0025      	movs	r5, r4
 802126e:	7820      	ldrb	r0, [r4, #0]
 8021270:	f7ff ff99 	bl	80211a6 <__hexdig_fun>
 8021274:	2800      	cmp	r0, #0
 8021276:	d102      	bne.n	802127e <__gethex+0xae>
 8021278:	1b2d      	subs	r5, r5, r4
 802127a:	00af      	lsls	r7, r5, #2
 802127c:	e003      	b.n	8021286 <__gethex+0xb6>
 802127e:	3401      	adds	r4, #1
 8021280:	e7f5      	b.n	802126e <__gethex+0x9e>
 8021282:	2d00      	cmp	r5, #0
 8021284:	d1f8      	bne.n	8021278 <__gethex+0xa8>
 8021286:	2220      	movs	r2, #32
 8021288:	7823      	ldrb	r3, [r4, #0]
 802128a:	0026      	movs	r6, r4
 802128c:	4393      	bics	r3, r2
 802128e:	2b50      	cmp	r3, #80	@ 0x50
 8021290:	d11d      	bne.n	80212ce <__gethex+0xfe>
 8021292:	7863      	ldrb	r3, [r4, #1]
 8021294:	2b2b      	cmp	r3, #43	@ 0x2b
 8021296:	d02d      	beq.n	80212f4 <__gethex+0x124>
 8021298:	2b2d      	cmp	r3, #45	@ 0x2d
 802129a:	d02f      	beq.n	80212fc <__gethex+0x12c>
 802129c:	2300      	movs	r3, #0
 802129e:	1c66      	adds	r6, r4, #1
 80212a0:	9304      	str	r3, [sp, #16]
 80212a2:	7830      	ldrb	r0, [r6, #0]
 80212a4:	f7ff ff7f 	bl	80211a6 <__hexdig_fun>
 80212a8:	1e43      	subs	r3, r0, #1
 80212aa:	b2db      	uxtb	r3, r3
 80212ac:	0005      	movs	r5, r0
 80212ae:	2b18      	cmp	r3, #24
 80212b0:	d82a      	bhi.n	8021308 <__gethex+0x138>
 80212b2:	7870      	ldrb	r0, [r6, #1]
 80212b4:	f7ff ff77 	bl	80211a6 <__hexdig_fun>
 80212b8:	1e43      	subs	r3, r0, #1
 80212ba:	b2db      	uxtb	r3, r3
 80212bc:	3601      	adds	r6, #1
 80212be:	3d10      	subs	r5, #16
 80212c0:	2b18      	cmp	r3, #24
 80212c2:	d91d      	bls.n	8021300 <__gethex+0x130>
 80212c4:	9b04      	ldr	r3, [sp, #16]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d000      	beq.n	80212cc <__gethex+0xfc>
 80212ca:	426d      	negs	r5, r5
 80212cc:	197f      	adds	r7, r7, r5
 80212ce:	9b06      	ldr	r3, [sp, #24]
 80212d0:	601e      	str	r6, [r3, #0]
 80212d2:	9b02      	ldr	r3, [sp, #8]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d019      	beq.n	802130c <__gethex+0x13c>
 80212d8:	9b05      	ldr	r3, [sp, #20]
 80212da:	2606      	movs	r6, #6
 80212dc:	425a      	negs	r2, r3
 80212de:	4153      	adcs	r3, r2
 80212e0:	425b      	negs	r3, r3
 80212e2:	401e      	ands	r6, r3
 80212e4:	0030      	movs	r0, r6
 80212e6:	b009      	add	sp, #36	@ 0x24
 80212e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212ea:	2301      	movs	r3, #1
 80212ec:	2700      	movs	r7, #0
 80212ee:	9c00      	ldr	r4, [sp, #0]
 80212f0:	9302      	str	r3, [sp, #8]
 80212f2:	e7c8      	b.n	8021286 <__gethex+0xb6>
 80212f4:	2300      	movs	r3, #0
 80212f6:	9304      	str	r3, [sp, #16]
 80212f8:	1ca6      	adds	r6, r4, #2
 80212fa:	e7d2      	b.n	80212a2 <__gethex+0xd2>
 80212fc:	2301      	movs	r3, #1
 80212fe:	e7fa      	b.n	80212f6 <__gethex+0x126>
 8021300:	230a      	movs	r3, #10
 8021302:	435d      	muls	r5, r3
 8021304:	182d      	adds	r5, r5, r0
 8021306:	e7d4      	b.n	80212b2 <__gethex+0xe2>
 8021308:	0026      	movs	r6, r4
 802130a:	e7e0      	b.n	80212ce <__gethex+0xfe>
 802130c:	9b00      	ldr	r3, [sp, #0]
 802130e:	9902      	ldr	r1, [sp, #8]
 8021310:	1ae3      	subs	r3, r4, r3
 8021312:	3b01      	subs	r3, #1
 8021314:	2b07      	cmp	r3, #7
 8021316:	dc0a      	bgt.n	802132e <__gethex+0x15e>
 8021318:	9803      	ldr	r0, [sp, #12]
 802131a:	f000 fb19 	bl	8021950 <_Balloc>
 802131e:	1e05      	subs	r5, r0, #0
 8021320:	d108      	bne.n	8021334 <__gethex+0x164>
 8021322:	002a      	movs	r2, r5
 8021324:	21e4      	movs	r1, #228	@ 0xe4
 8021326:	4b5f      	ldr	r3, [pc, #380]	@ (80214a4 <__gethex+0x2d4>)
 8021328:	485f      	ldr	r0, [pc, #380]	@ (80214a8 <__gethex+0x2d8>)
 802132a:	f001 fbf1 	bl	8022b10 <__assert_func>
 802132e:	3101      	adds	r1, #1
 8021330:	105b      	asrs	r3, r3, #1
 8021332:	e7ef      	b.n	8021314 <__gethex+0x144>
 8021334:	0003      	movs	r3, r0
 8021336:	3314      	adds	r3, #20
 8021338:	9302      	str	r3, [sp, #8]
 802133a:	9305      	str	r3, [sp, #20]
 802133c:	2300      	movs	r3, #0
 802133e:	001e      	movs	r6, r3
 8021340:	9304      	str	r3, [sp, #16]
 8021342:	9b00      	ldr	r3, [sp, #0]
 8021344:	42a3      	cmp	r3, r4
 8021346:	d338      	bcc.n	80213ba <__gethex+0x1ea>
 8021348:	9c05      	ldr	r4, [sp, #20]
 802134a:	9b02      	ldr	r3, [sp, #8]
 802134c:	c440      	stmia	r4!, {r6}
 802134e:	1ae4      	subs	r4, r4, r3
 8021350:	10a4      	asrs	r4, r4, #2
 8021352:	0030      	movs	r0, r6
 8021354:	612c      	str	r4, [r5, #16]
 8021356:	f000 fbf3 	bl	8021b40 <__hi0bits>
 802135a:	9b01      	ldr	r3, [sp, #4]
 802135c:	0164      	lsls	r4, r4, #5
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	1a26      	subs	r6, r4, r0
 8021362:	9300      	str	r3, [sp, #0]
 8021364:	429e      	cmp	r6, r3
 8021366:	dd52      	ble.n	802140e <__gethex+0x23e>
 8021368:	1af6      	subs	r6, r6, r3
 802136a:	0031      	movs	r1, r6
 802136c:	0028      	movs	r0, r5
 802136e:	f000 ff96 	bl	802229e <__any_on>
 8021372:	1e04      	subs	r4, r0, #0
 8021374:	d00f      	beq.n	8021396 <__gethex+0x1c6>
 8021376:	2401      	movs	r4, #1
 8021378:	231f      	movs	r3, #31
 802137a:	0020      	movs	r0, r4
 802137c:	1e72      	subs	r2, r6, #1
 802137e:	4013      	ands	r3, r2
 8021380:	4098      	lsls	r0, r3
 8021382:	0003      	movs	r3, r0
 8021384:	1151      	asrs	r1, r2, #5
 8021386:	9802      	ldr	r0, [sp, #8]
 8021388:	0089      	lsls	r1, r1, #2
 802138a:	5809      	ldr	r1, [r1, r0]
 802138c:	4219      	tst	r1, r3
 802138e:	d002      	beq.n	8021396 <__gethex+0x1c6>
 8021390:	42a2      	cmp	r2, r4
 8021392:	dc34      	bgt.n	80213fe <__gethex+0x22e>
 8021394:	2402      	movs	r4, #2
 8021396:	0031      	movs	r1, r6
 8021398:	0028      	movs	r0, r5
 802139a:	f7ff feb1 	bl	8021100 <rshift>
 802139e:	19bf      	adds	r7, r7, r6
 80213a0:	9b01      	ldr	r3, [sp, #4]
 80213a2:	689b      	ldr	r3, [r3, #8]
 80213a4:	42bb      	cmp	r3, r7
 80213a6:	da42      	bge.n	802142e <__gethex+0x25e>
 80213a8:	0029      	movs	r1, r5
 80213aa:	9803      	ldr	r0, [sp, #12]
 80213ac:	f000 fb14 	bl	80219d8 <_Bfree>
 80213b0:	2300      	movs	r3, #0
 80213b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80213b4:	26a3      	movs	r6, #163	@ 0xa3
 80213b6:	6013      	str	r3, [r2, #0]
 80213b8:	e794      	b.n	80212e4 <__gethex+0x114>
 80213ba:	3c01      	subs	r4, #1
 80213bc:	7823      	ldrb	r3, [r4, #0]
 80213be:	2b2e      	cmp	r3, #46	@ 0x2e
 80213c0:	d012      	beq.n	80213e8 <__gethex+0x218>
 80213c2:	9b04      	ldr	r3, [sp, #16]
 80213c4:	2b20      	cmp	r3, #32
 80213c6:	d104      	bne.n	80213d2 <__gethex+0x202>
 80213c8:	9b05      	ldr	r3, [sp, #20]
 80213ca:	c340      	stmia	r3!, {r6}
 80213cc:	2600      	movs	r6, #0
 80213ce:	9305      	str	r3, [sp, #20]
 80213d0:	9604      	str	r6, [sp, #16]
 80213d2:	7820      	ldrb	r0, [r4, #0]
 80213d4:	f7ff fee7 	bl	80211a6 <__hexdig_fun>
 80213d8:	230f      	movs	r3, #15
 80213da:	4018      	ands	r0, r3
 80213dc:	9b04      	ldr	r3, [sp, #16]
 80213de:	4098      	lsls	r0, r3
 80213e0:	3304      	adds	r3, #4
 80213e2:	4306      	orrs	r6, r0
 80213e4:	9304      	str	r3, [sp, #16]
 80213e6:	e7ac      	b.n	8021342 <__gethex+0x172>
 80213e8:	9b00      	ldr	r3, [sp, #0]
 80213ea:	42a3      	cmp	r3, r4
 80213ec:	d8e9      	bhi.n	80213c2 <__gethex+0x1f2>
 80213ee:	2201      	movs	r2, #1
 80213f0:	0020      	movs	r0, r4
 80213f2:	492b      	ldr	r1, [pc, #172]	@ (80214a0 <__gethex+0x2d0>)
 80213f4:	f7fe fee2 	bl	80201bc <strncmp>
 80213f8:	2800      	cmp	r0, #0
 80213fa:	d1e2      	bne.n	80213c2 <__gethex+0x1f2>
 80213fc:	e7a1      	b.n	8021342 <__gethex+0x172>
 80213fe:	0028      	movs	r0, r5
 8021400:	1eb1      	subs	r1, r6, #2
 8021402:	f000 ff4c 	bl	802229e <__any_on>
 8021406:	2800      	cmp	r0, #0
 8021408:	d0c4      	beq.n	8021394 <__gethex+0x1c4>
 802140a:	2403      	movs	r4, #3
 802140c:	e7c3      	b.n	8021396 <__gethex+0x1c6>
 802140e:	9b00      	ldr	r3, [sp, #0]
 8021410:	2400      	movs	r4, #0
 8021412:	429e      	cmp	r6, r3
 8021414:	dac4      	bge.n	80213a0 <__gethex+0x1d0>
 8021416:	1b9e      	subs	r6, r3, r6
 8021418:	0029      	movs	r1, r5
 802141a:	0032      	movs	r2, r6
 802141c:	9803      	ldr	r0, [sp, #12]
 802141e:	f000 fd05 	bl	8021e2c <__lshift>
 8021422:	0003      	movs	r3, r0
 8021424:	3314      	adds	r3, #20
 8021426:	0005      	movs	r5, r0
 8021428:	1bbf      	subs	r7, r7, r6
 802142a:	9302      	str	r3, [sp, #8]
 802142c:	e7b8      	b.n	80213a0 <__gethex+0x1d0>
 802142e:	9b01      	ldr	r3, [sp, #4]
 8021430:	685e      	ldr	r6, [r3, #4]
 8021432:	42be      	cmp	r6, r7
 8021434:	dd6f      	ble.n	8021516 <__gethex+0x346>
 8021436:	9b00      	ldr	r3, [sp, #0]
 8021438:	1bf6      	subs	r6, r6, r7
 802143a:	42b3      	cmp	r3, r6
 802143c:	dc36      	bgt.n	80214ac <__gethex+0x2dc>
 802143e:	9b01      	ldr	r3, [sp, #4]
 8021440:	68db      	ldr	r3, [r3, #12]
 8021442:	2b02      	cmp	r3, #2
 8021444:	d024      	beq.n	8021490 <__gethex+0x2c0>
 8021446:	2b03      	cmp	r3, #3
 8021448:	d026      	beq.n	8021498 <__gethex+0x2c8>
 802144a:	2b01      	cmp	r3, #1
 802144c:	d117      	bne.n	802147e <__gethex+0x2ae>
 802144e:	9b00      	ldr	r3, [sp, #0]
 8021450:	42b3      	cmp	r3, r6
 8021452:	d114      	bne.n	802147e <__gethex+0x2ae>
 8021454:	2b01      	cmp	r3, #1
 8021456:	d10b      	bne.n	8021470 <__gethex+0x2a0>
 8021458:	9b01      	ldr	r3, [sp, #4]
 802145a:	9a07      	ldr	r2, [sp, #28]
 802145c:	685b      	ldr	r3, [r3, #4]
 802145e:	2662      	movs	r6, #98	@ 0x62
 8021460:	6013      	str	r3, [r2, #0]
 8021462:	2301      	movs	r3, #1
 8021464:	9a02      	ldr	r2, [sp, #8]
 8021466:	612b      	str	r3, [r5, #16]
 8021468:	6013      	str	r3, [r2, #0]
 802146a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802146c:	601d      	str	r5, [r3, #0]
 802146e:	e739      	b.n	80212e4 <__gethex+0x114>
 8021470:	9900      	ldr	r1, [sp, #0]
 8021472:	0028      	movs	r0, r5
 8021474:	3901      	subs	r1, #1
 8021476:	f000 ff12 	bl	802229e <__any_on>
 802147a:	2800      	cmp	r0, #0
 802147c:	d1ec      	bne.n	8021458 <__gethex+0x288>
 802147e:	0029      	movs	r1, r5
 8021480:	9803      	ldr	r0, [sp, #12]
 8021482:	f000 faa9 	bl	80219d8 <_Bfree>
 8021486:	2300      	movs	r3, #0
 8021488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802148a:	2650      	movs	r6, #80	@ 0x50
 802148c:	6013      	str	r3, [r2, #0]
 802148e:	e729      	b.n	80212e4 <__gethex+0x114>
 8021490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021492:	2b00      	cmp	r3, #0
 8021494:	d1f3      	bne.n	802147e <__gethex+0x2ae>
 8021496:	e7df      	b.n	8021458 <__gethex+0x288>
 8021498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802149a:	2b00      	cmp	r3, #0
 802149c:	d1dc      	bne.n	8021458 <__gethex+0x288>
 802149e:	e7ee      	b.n	802147e <__gethex+0x2ae>
 80214a0:	08025b78 	.word	0x08025b78
 80214a4:	08025d89 	.word	0x08025d89
 80214a8:	08025d9a 	.word	0x08025d9a
 80214ac:	1e77      	subs	r7, r6, #1
 80214ae:	2c00      	cmp	r4, #0
 80214b0:	d12f      	bne.n	8021512 <__gethex+0x342>
 80214b2:	2f00      	cmp	r7, #0
 80214b4:	d004      	beq.n	80214c0 <__gethex+0x2f0>
 80214b6:	0039      	movs	r1, r7
 80214b8:	0028      	movs	r0, r5
 80214ba:	f000 fef0 	bl	802229e <__any_on>
 80214be:	0004      	movs	r4, r0
 80214c0:	231f      	movs	r3, #31
 80214c2:	117a      	asrs	r2, r7, #5
 80214c4:	401f      	ands	r7, r3
 80214c6:	3b1e      	subs	r3, #30
 80214c8:	40bb      	lsls	r3, r7
 80214ca:	9902      	ldr	r1, [sp, #8]
 80214cc:	0092      	lsls	r2, r2, #2
 80214ce:	5852      	ldr	r2, [r2, r1]
 80214d0:	421a      	tst	r2, r3
 80214d2:	d001      	beq.n	80214d8 <__gethex+0x308>
 80214d4:	2302      	movs	r3, #2
 80214d6:	431c      	orrs	r4, r3
 80214d8:	9b00      	ldr	r3, [sp, #0]
 80214da:	0031      	movs	r1, r6
 80214dc:	1b9b      	subs	r3, r3, r6
 80214de:	2602      	movs	r6, #2
 80214e0:	0028      	movs	r0, r5
 80214e2:	9300      	str	r3, [sp, #0]
 80214e4:	f7ff fe0c 	bl	8021100 <rshift>
 80214e8:	9b01      	ldr	r3, [sp, #4]
 80214ea:	685f      	ldr	r7, [r3, #4]
 80214ec:	2c00      	cmp	r4, #0
 80214ee:	d03f      	beq.n	8021570 <__gethex+0x3a0>
 80214f0:	9b01      	ldr	r3, [sp, #4]
 80214f2:	68db      	ldr	r3, [r3, #12]
 80214f4:	2b02      	cmp	r3, #2
 80214f6:	d010      	beq.n	802151a <__gethex+0x34a>
 80214f8:	2b03      	cmp	r3, #3
 80214fa:	d012      	beq.n	8021522 <__gethex+0x352>
 80214fc:	2b01      	cmp	r3, #1
 80214fe:	d106      	bne.n	802150e <__gethex+0x33e>
 8021500:	07a2      	lsls	r2, r4, #30
 8021502:	d504      	bpl.n	802150e <__gethex+0x33e>
 8021504:	9a02      	ldr	r2, [sp, #8]
 8021506:	6812      	ldr	r2, [r2, #0]
 8021508:	4314      	orrs	r4, r2
 802150a:	421c      	tst	r4, r3
 802150c:	d10c      	bne.n	8021528 <__gethex+0x358>
 802150e:	2310      	movs	r3, #16
 8021510:	e02d      	b.n	802156e <__gethex+0x39e>
 8021512:	2401      	movs	r4, #1
 8021514:	e7d4      	b.n	80214c0 <__gethex+0x2f0>
 8021516:	2601      	movs	r6, #1
 8021518:	e7e8      	b.n	80214ec <__gethex+0x31c>
 802151a:	2301      	movs	r3, #1
 802151c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802151e:	1a9b      	subs	r3, r3, r2
 8021520:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021524:	2b00      	cmp	r3, #0
 8021526:	d0f2      	beq.n	802150e <__gethex+0x33e>
 8021528:	692b      	ldr	r3, [r5, #16]
 802152a:	2000      	movs	r0, #0
 802152c:	9302      	str	r3, [sp, #8]
 802152e:	009b      	lsls	r3, r3, #2
 8021530:	9304      	str	r3, [sp, #16]
 8021532:	002b      	movs	r3, r5
 8021534:	9a04      	ldr	r2, [sp, #16]
 8021536:	3314      	adds	r3, #20
 8021538:	1899      	adds	r1, r3, r2
 802153a:	681a      	ldr	r2, [r3, #0]
 802153c:	1c54      	adds	r4, r2, #1
 802153e:	d01c      	beq.n	802157a <__gethex+0x3aa>
 8021540:	3201      	adds	r2, #1
 8021542:	601a      	str	r2, [r3, #0]
 8021544:	002b      	movs	r3, r5
 8021546:	3314      	adds	r3, #20
 8021548:	2e02      	cmp	r6, #2
 802154a:	d13f      	bne.n	80215cc <__gethex+0x3fc>
 802154c:	9a01      	ldr	r2, [sp, #4]
 802154e:	9900      	ldr	r1, [sp, #0]
 8021550:	6812      	ldr	r2, [r2, #0]
 8021552:	3a01      	subs	r2, #1
 8021554:	428a      	cmp	r2, r1
 8021556:	d109      	bne.n	802156c <__gethex+0x39c>
 8021558:	000a      	movs	r2, r1
 802155a:	201f      	movs	r0, #31
 802155c:	4010      	ands	r0, r2
 802155e:	2201      	movs	r2, #1
 8021560:	4082      	lsls	r2, r0
 8021562:	1149      	asrs	r1, r1, #5
 8021564:	0089      	lsls	r1, r1, #2
 8021566:	58cb      	ldr	r3, [r1, r3]
 8021568:	4213      	tst	r3, r2
 802156a:	d13d      	bne.n	80215e8 <__gethex+0x418>
 802156c:	2320      	movs	r3, #32
 802156e:	431e      	orrs	r6, r3
 8021570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021572:	601d      	str	r5, [r3, #0]
 8021574:	9b07      	ldr	r3, [sp, #28]
 8021576:	601f      	str	r7, [r3, #0]
 8021578:	e6b4      	b.n	80212e4 <__gethex+0x114>
 802157a:	c301      	stmia	r3!, {r0}
 802157c:	4299      	cmp	r1, r3
 802157e:	d8dc      	bhi.n	802153a <__gethex+0x36a>
 8021580:	68ab      	ldr	r3, [r5, #8]
 8021582:	9a02      	ldr	r2, [sp, #8]
 8021584:	429a      	cmp	r2, r3
 8021586:	db18      	blt.n	80215ba <__gethex+0x3ea>
 8021588:	6869      	ldr	r1, [r5, #4]
 802158a:	9803      	ldr	r0, [sp, #12]
 802158c:	3101      	adds	r1, #1
 802158e:	f000 f9df 	bl	8021950 <_Balloc>
 8021592:	1e04      	subs	r4, r0, #0
 8021594:	d104      	bne.n	80215a0 <__gethex+0x3d0>
 8021596:	0022      	movs	r2, r4
 8021598:	2184      	movs	r1, #132	@ 0x84
 802159a:	4b1d      	ldr	r3, [pc, #116]	@ (8021610 <__gethex+0x440>)
 802159c:	481d      	ldr	r0, [pc, #116]	@ (8021614 <__gethex+0x444>)
 802159e:	e6c4      	b.n	802132a <__gethex+0x15a>
 80215a0:	0029      	movs	r1, r5
 80215a2:	692a      	ldr	r2, [r5, #16]
 80215a4:	310c      	adds	r1, #12
 80215a6:	3202      	adds	r2, #2
 80215a8:	0092      	lsls	r2, r2, #2
 80215aa:	300c      	adds	r0, #12
 80215ac:	f7fe fecc 	bl	8020348 <memcpy>
 80215b0:	0029      	movs	r1, r5
 80215b2:	9803      	ldr	r0, [sp, #12]
 80215b4:	f000 fa10 	bl	80219d8 <_Bfree>
 80215b8:	0025      	movs	r5, r4
 80215ba:	692b      	ldr	r3, [r5, #16]
 80215bc:	1c5a      	adds	r2, r3, #1
 80215be:	612a      	str	r2, [r5, #16]
 80215c0:	2201      	movs	r2, #1
 80215c2:	3304      	adds	r3, #4
 80215c4:	009b      	lsls	r3, r3, #2
 80215c6:	18eb      	adds	r3, r5, r3
 80215c8:	605a      	str	r2, [r3, #4]
 80215ca:	e7bb      	b.n	8021544 <__gethex+0x374>
 80215cc:	692a      	ldr	r2, [r5, #16]
 80215ce:	9902      	ldr	r1, [sp, #8]
 80215d0:	428a      	cmp	r2, r1
 80215d2:	dd0b      	ble.n	80215ec <__gethex+0x41c>
 80215d4:	2101      	movs	r1, #1
 80215d6:	0028      	movs	r0, r5
 80215d8:	f7ff fd92 	bl	8021100 <rshift>
 80215dc:	9b01      	ldr	r3, [sp, #4]
 80215de:	3701      	adds	r7, #1
 80215e0:	689b      	ldr	r3, [r3, #8]
 80215e2:	42bb      	cmp	r3, r7
 80215e4:	da00      	bge.n	80215e8 <__gethex+0x418>
 80215e6:	e6df      	b.n	80213a8 <__gethex+0x1d8>
 80215e8:	2601      	movs	r6, #1
 80215ea:	e7bf      	b.n	802156c <__gethex+0x39c>
 80215ec:	221f      	movs	r2, #31
 80215ee:	9c00      	ldr	r4, [sp, #0]
 80215f0:	9900      	ldr	r1, [sp, #0]
 80215f2:	4014      	ands	r4, r2
 80215f4:	4211      	tst	r1, r2
 80215f6:	d0f7      	beq.n	80215e8 <__gethex+0x418>
 80215f8:	9a04      	ldr	r2, [sp, #16]
 80215fa:	189b      	adds	r3, r3, r2
 80215fc:	3b04      	subs	r3, #4
 80215fe:	6818      	ldr	r0, [r3, #0]
 8021600:	f000 fa9e 	bl	8021b40 <__hi0bits>
 8021604:	2320      	movs	r3, #32
 8021606:	1b1b      	subs	r3, r3, r4
 8021608:	4298      	cmp	r0, r3
 802160a:	dbe3      	blt.n	80215d4 <__gethex+0x404>
 802160c:	e7ec      	b.n	80215e8 <__gethex+0x418>
 802160e:	46c0      	nop			@ (mov r8, r8)
 8021610:	08025d89 	.word	0x08025d89
 8021614:	08025d9a 	.word	0x08025d9a

08021618 <L_shift>:
 8021618:	2308      	movs	r3, #8
 802161a:	b570      	push	{r4, r5, r6, lr}
 802161c:	2520      	movs	r5, #32
 802161e:	1a9a      	subs	r2, r3, r2
 8021620:	0092      	lsls	r2, r2, #2
 8021622:	1aad      	subs	r5, r5, r2
 8021624:	6843      	ldr	r3, [r0, #4]
 8021626:	6804      	ldr	r4, [r0, #0]
 8021628:	001e      	movs	r6, r3
 802162a:	40ae      	lsls	r6, r5
 802162c:	40d3      	lsrs	r3, r2
 802162e:	4334      	orrs	r4, r6
 8021630:	6004      	str	r4, [r0, #0]
 8021632:	6043      	str	r3, [r0, #4]
 8021634:	3004      	adds	r0, #4
 8021636:	4288      	cmp	r0, r1
 8021638:	d3f4      	bcc.n	8021624 <L_shift+0xc>
 802163a:	bd70      	pop	{r4, r5, r6, pc}

0802163c <__match>:
 802163c:	b530      	push	{r4, r5, lr}
 802163e:	6803      	ldr	r3, [r0, #0]
 8021640:	780c      	ldrb	r4, [r1, #0]
 8021642:	3301      	adds	r3, #1
 8021644:	2c00      	cmp	r4, #0
 8021646:	d102      	bne.n	802164e <__match+0x12>
 8021648:	6003      	str	r3, [r0, #0]
 802164a:	2001      	movs	r0, #1
 802164c:	bd30      	pop	{r4, r5, pc}
 802164e:	781a      	ldrb	r2, [r3, #0]
 8021650:	0015      	movs	r5, r2
 8021652:	3d41      	subs	r5, #65	@ 0x41
 8021654:	2d19      	cmp	r5, #25
 8021656:	d800      	bhi.n	802165a <__match+0x1e>
 8021658:	3220      	adds	r2, #32
 802165a:	3101      	adds	r1, #1
 802165c:	42a2      	cmp	r2, r4
 802165e:	d0ef      	beq.n	8021640 <__match+0x4>
 8021660:	2000      	movs	r0, #0
 8021662:	e7f3      	b.n	802164c <__match+0x10>

08021664 <__hexnan>:
 8021664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021666:	680b      	ldr	r3, [r1, #0]
 8021668:	b08b      	sub	sp, #44	@ 0x2c
 802166a:	9201      	str	r2, [sp, #4]
 802166c:	9901      	ldr	r1, [sp, #4]
 802166e:	115a      	asrs	r2, r3, #5
 8021670:	0092      	lsls	r2, r2, #2
 8021672:	188a      	adds	r2, r1, r2
 8021674:	9202      	str	r2, [sp, #8]
 8021676:	0019      	movs	r1, r3
 8021678:	221f      	movs	r2, #31
 802167a:	4011      	ands	r1, r2
 802167c:	9008      	str	r0, [sp, #32]
 802167e:	9106      	str	r1, [sp, #24]
 8021680:	4213      	tst	r3, r2
 8021682:	d002      	beq.n	802168a <__hexnan+0x26>
 8021684:	9b02      	ldr	r3, [sp, #8]
 8021686:	3304      	adds	r3, #4
 8021688:	9302      	str	r3, [sp, #8]
 802168a:	9b02      	ldr	r3, [sp, #8]
 802168c:	2500      	movs	r5, #0
 802168e:	1f1f      	subs	r7, r3, #4
 8021690:	003e      	movs	r6, r7
 8021692:	003c      	movs	r4, r7
 8021694:	9b08      	ldr	r3, [sp, #32]
 8021696:	603d      	str	r5, [r7, #0]
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	9507      	str	r5, [sp, #28]
 802169c:	9305      	str	r3, [sp, #20]
 802169e:	9503      	str	r5, [sp, #12]
 80216a0:	9b05      	ldr	r3, [sp, #20]
 80216a2:	3301      	adds	r3, #1
 80216a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80216a6:	9b05      	ldr	r3, [sp, #20]
 80216a8:	785b      	ldrb	r3, [r3, #1]
 80216aa:	9304      	str	r3, [sp, #16]
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d028      	beq.n	8021702 <__hexnan+0x9e>
 80216b0:	9804      	ldr	r0, [sp, #16]
 80216b2:	f7ff fd78 	bl	80211a6 <__hexdig_fun>
 80216b6:	2800      	cmp	r0, #0
 80216b8:	d155      	bne.n	8021766 <__hexnan+0x102>
 80216ba:	9b04      	ldr	r3, [sp, #16]
 80216bc:	2b20      	cmp	r3, #32
 80216be:	d819      	bhi.n	80216f4 <__hexnan+0x90>
 80216c0:	9b03      	ldr	r3, [sp, #12]
 80216c2:	9a07      	ldr	r2, [sp, #28]
 80216c4:	4293      	cmp	r3, r2
 80216c6:	dd12      	ble.n	80216ee <__hexnan+0x8a>
 80216c8:	42b4      	cmp	r4, r6
 80216ca:	d206      	bcs.n	80216da <__hexnan+0x76>
 80216cc:	2d07      	cmp	r5, #7
 80216ce:	dc04      	bgt.n	80216da <__hexnan+0x76>
 80216d0:	002a      	movs	r2, r5
 80216d2:	0031      	movs	r1, r6
 80216d4:	0020      	movs	r0, r4
 80216d6:	f7ff ff9f 	bl	8021618 <L_shift>
 80216da:	9b01      	ldr	r3, [sp, #4]
 80216dc:	2508      	movs	r5, #8
 80216de:	429c      	cmp	r4, r3
 80216e0:	d905      	bls.n	80216ee <__hexnan+0x8a>
 80216e2:	1f26      	subs	r6, r4, #4
 80216e4:	2500      	movs	r5, #0
 80216e6:	0034      	movs	r4, r6
 80216e8:	9b03      	ldr	r3, [sp, #12]
 80216ea:	6035      	str	r5, [r6, #0]
 80216ec:	9307      	str	r3, [sp, #28]
 80216ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216f0:	9305      	str	r3, [sp, #20]
 80216f2:	e7d5      	b.n	80216a0 <__hexnan+0x3c>
 80216f4:	9b04      	ldr	r3, [sp, #16]
 80216f6:	2b29      	cmp	r3, #41	@ 0x29
 80216f8:	d15a      	bne.n	80217b0 <__hexnan+0x14c>
 80216fa:	9b05      	ldr	r3, [sp, #20]
 80216fc:	9a08      	ldr	r2, [sp, #32]
 80216fe:	3302      	adds	r3, #2
 8021700:	6013      	str	r3, [r2, #0]
 8021702:	9b03      	ldr	r3, [sp, #12]
 8021704:	2b00      	cmp	r3, #0
 8021706:	d053      	beq.n	80217b0 <__hexnan+0x14c>
 8021708:	42b4      	cmp	r4, r6
 802170a:	d206      	bcs.n	802171a <__hexnan+0xb6>
 802170c:	2d07      	cmp	r5, #7
 802170e:	dc04      	bgt.n	802171a <__hexnan+0xb6>
 8021710:	002a      	movs	r2, r5
 8021712:	0031      	movs	r1, r6
 8021714:	0020      	movs	r0, r4
 8021716:	f7ff ff7f 	bl	8021618 <L_shift>
 802171a:	9b01      	ldr	r3, [sp, #4]
 802171c:	429c      	cmp	r4, r3
 802171e:	d936      	bls.n	802178e <__hexnan+0x12a>
 8021720:	001a      	movs	r2, r3
 8021722:	0023      	movs	r3, r4
 8021724:	cb02      	ldmia	r3!, {r1}
 8021726:	c202      	stmia	r2!, {r1}
 8021728:	429f      	cmp	r7, r3
 802172a:	d2fb      	bcs.n	8021724 <__hexnan+0xc0>
 802172c:	9b02      	ldr	r3, [sp, #8]
 802172e:	1c61      	adds	r1, r4, #1
 8021730:	1eda      	subs	r2, r3, #3
 8021732:	2304      	movs	r3, #4
 8021734:	4291      	cmp	r1, r2
 8021736:	d805      	bhi.n	8021744 <__hexnan+0xe0>
 8021738:	9b02      	ldr	r3, [sp, #8]
 802173a:	3b04      	subs	r3, #4
 802173c:	1b1b      	subs	r3, r3, r4
 802173e:	089b      	lsrs	r3, r3, #2
 8021740:	3301      	adds	r3, #1
 8021742:	009b      	lsls	r3, r3, #2
 8021744:	9a01      	ldr	r2, [sp, #4]
 8021746:	18d3      	adds	r3, r2, r3
 8021748:	2200      	movs	r2, #0
 802174a:	c304      	stmia	r3!, {r2}
 802174c:	429f      	cmp	r7, r3
 802174e:	d2fc      	bcs.n	802174a <__hexnan+0xe6>
 8021750:	683b      	ldr	r3, [r7, #0]
 8021752:	2b00      	cmp	r3, #0
 8021754:	d104      	bne.n	8021760 <__hexnan+0xfc>
 8021756:	9b01      	ldr	r3, [sp, #4]
 8021758:	429f      	cmp	r7, r3
 802175a:	d127      	bne.n	80217ac <__hexnan+0x148>
 802175c:	2301      	movs	r3, #1
 802175e:	603b      	str	r3, [r7, #0]
 8021760:	2005      	movs	r0, #5
 8021762:	b00b      	add	sp, #44	@ 0x2c
 8021764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021766:	9b03      	ldr	r3, [sp, #12]
 8021768:	3501      	adds	r5, #1
 802176a:	3301      	adds	r3, #1
 802176c:	9303      	str	r3, [sp, #12]
 802176e:	2d08      	cmp	r5, #8
 8021770:	dd06      	ble.n	8021780 <__hexnan+0x11c>
 8021772:	9b01      	ldr	r3, [sp, #4]
 8021774:	429c      	cmp	r4, r3
 8021776:	d9ba      	bls.n	80216ee <__hexnan+0x8a>
 8021778:	2300      	movs	r3, #0
 802177a:	2501      	movs	r5, #1
 802177c:	3c04      	subs	r4, #4
 802177e:	6023      	str	r3, [r4, #0]
 8021780:	220f      	movs	r2, #15
 8021782:	6823      	ldr	r3, [r4, #0]
 8021784:	4010      	ands	r0, r2
 8021786:	011b      	lsls	r3, r3, #4
 8021788:	4303      	orrs	r3, r0
 802178a:	6023      	str	r3, [r4, #0]
 802178c:	e7af      	b.n	80216ee <__hexnan+0x8a>
 802178e:	9b06      	ldr	r3, [sp, #24]
 8021790:	2b00      	cmp	r3, #0
 8021792:	d0dd      	beq.n	8021750 <__hexnan+0xec>
 8021794:	2320      	movs	r3, #32
 8021796:	9a06      	ldr	r2, [sp, #24]
 8021798:	9902      	ldr	r1, [sp, #8]
 802179a:	1a9b      	subs	r3, r3, r2
 802179c:	2201      	movs	r2, #1
 802179e:	4252      	negs	r2, r2
 80217a0:	40da      	lsrs	r2, r3
 80217a2:	3904      	subs	r1, #4
 80217a4:	680b      	ldr	r3, [r1, #0]
 80217a6:	4013      	ands	r3, r2
 80217a8:	600b      	str	r3, [r1, #0]
 80217aa:	e7d1      	b.n	8021750 <__hexnan+0xec>
 80217ac:	3f04      	subs	r7, #4
 80217ae:	e7cf      	b.n	8021750 <__hexnan+0xec>
 80217b0:	2004      	movs	r0, #4
 80217b2:	e7d6      	b.n	8021762 <__hexnan+0xfe>

080217b4 <malloc>:
 80217b4:	b510      	push	{r4, lr}
 80217b6:	4b03      	ldr	r3, [pc, #12]	@ (80217c4 <malloc+0x10>)
 80217b8:	0001      	movs	r1, r0
 80217ba:	6818      	ldr	r0, [r3, #0]
 80217bc:	f000 f826 	bl	802180c <_malloc_r>
 80217c0:	bd10      	pop	{r4, pc}
 80217c2:	46c0      	nop			@ (mov r8, r8)
 80217c4:	200003cc 	.word	0x200003cc

080217c8 <sbrk_aligned>:
 80217c8:	b570      	push	{r4, r5, r6, lr}
 80217ca:	4e0f      	ldr	r6, [pc, #60]	@ (8021808 <sbrk_aligned+0x40>)
 80217cc:	000d      	movs	r5, r1
 80217ce:	6831      	ldr	r1, [r6, #0]
 80217d0:	0004      	movs	r4, r0
 80217d2:	2900      	cmp	r1, #0
 80217d4:	d102      	bne.n	80217dc <sbrk_aligned+0x14>
 80217d6:	f001 f989 	bl	8022aec <_sbrk_r>
 80217da:	6030      	str	r0, [r6, #0]
 80217dc:	0029      	movs	r1, r5
 80217de:	0020      	movs	r0, r4
 80217e0:	f001 f984 	bl	8022aec <_sbrk_r>
 80217e4:	1c43      	adds	r3, r0, #1
 80217e6:	d103      	bne.n	80217f0 <sbrk_aligned+0x28>
 80217e8:	2501      	movs	r5, #1
 80217ea:	426d      	negs	r5, r5
 80217ec:	0028      	movs	r0, r5
 80217ee:	bd70      	pop	{r4, r5, r6, pc}
 80217f0:	2303      	movs	r3, #3
 80217f2:	1cc5      	adds	r5, r0, #3
 80217f4:	439d      	bics	r5, r3
 80217f6:	42a8      	cmp	r0, r5
 80217f8:	d0f8      	beq.n	80217ec <sbrk_aligned+0x24>
 80217fa:	1a29      	subs	r1, r5, r0
 80217fc:	0020      	movs	r0, r4
 80217fe:	f001 f975 	bl	8022aec <_sbrk_r>
 8021802:	3001      	adds	r0, #1
 8021804:	d1f2      	bne.n	80217ec <sbrk_aligned+0x24>
 8021806:	e7ef      	b.n	80217e8 <sbrk_aligned+0x20>
 8021808:	200037a8 	.word	0x200037a8

0802180c <_malloc_r>:
 802180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802180e:	2203      	movs	r2, #3
 8021810:	1ccb      	adds	r3, r1, #3
 8021812:	4393      	bics	r3, r2
 8021814:	3308      	adds	r3, #8
 8021816:	0005      	movs	r5, r0
 8021818:	001f      	movs	r7, r3
 802181a:	2b0c      	cmp	r3, #12
 802181c:	d234      	bcs.n	8021888 <_malloc_r+0x7c>
 802181e:	270c      	movs	r7, #12
 8021820:	42b9      	cmp	r1, r7
 8021822:	d833      	bhi.n	802188c <_malloc_r+0x80>
 8021824:	0028      	movs	r0, r5
 8021826:	f000 f883 	bl	8021930 <__malloc_lock>
 802182a:	4e37      	ldr	r6, [pc, #220]	@ (8021908 <_malloc_r+0xfc>)
 802182c:	6833      	ldr	r3, [r6, #0]
 802182e:	001c      	movs	r4, r3
 8021830:	2c00      	cmp	r4, #0
 8021832:	d12f      	bne.n	8021894 <_malloc_r+0x88>
 8021834:	0039      	movs	r1, r7
 8021836:	0028      	movs	r0, r5
 8021838:	f7ff ffc6 	bl	80217c8 <sbrk_aligned>
 802183c:	0004      	movs	r4, r0
 802183e:	1c43      	adds	r3, r0, #1
 8021840:	d15f      	bne.n	8021902 <_malloc_r+0xf6>
 8021842:	6834      	ldr	r4, [r6, #0]
 8021844:	9400      	str	r4, [sp, #0]
 8021846:	9b00      	ldr	r3, [sp, #0]
 8021848:	2b00      	cmp	r3, #0
 802184a:	d14a      	bne.n	80218e2 <_malloc_r+0xd6>
 802184c:	2c00      	cmp	r4, #0
 802184e:	d052      	beq.n	80218f6 <_malloc_r+0xea>
 8021850:	6823      	ldr	r3, [r4, #0]
 8021852:	0028      	movs	r0, r5
 8021854:	18e3      	adds	r3, r4, r3
 8021856:	9900      	ldr	r1, [sp, #0]
 8021858:	9301      	str	r3, [sp, #4]
 802185a:	f001 f947 	bl	8022aec <_sbrk_r>
 802185e:	9b01      	ldr	r3, [sp, #4]
 8021860:	4283      	cmp	r3, r0
 8021862:	d148      	bne.n	80218f6 <_malloc_r+0xea>
 8021864:	6823      	ldr	r3, [r4, #0]
 8021866:	0028      	movs	r0, r5
 8021868:	1aff      	subs	r7, r7, r3
 802186a:	0039      	movs	r1, r7
 802186c:	f7ff ffac 	bl	80217c8 <sbrk_aligned>
 8021870:	3001      	adds	r0, #1
 8021872:	d040      	beq.n	80218f6 <_malloc_r+0xea>
 8021874:	6823      	ldr	r3, [r4, #0]
 8021876:	19db      	adds	r3, r3, r7
 8021878:	6023      	str	r3, [r4, #0]
 802187a:	6833      	ldr	r3, [r6, #0]
 802187c:	685a      	ldr	r2, [r3, #4]
 802187e:	2a00      	cmp	r2, #0
 8021880:	d133      	bne.n	80218ea <_malloc_r+0xde>
 8021882:	9b00      	ldr	r3, [sp, #0]
 8021884:	6033      	str	r3, [r6, #0]
 8021886:	e019      	b.n	80218bc <_malloc_r+0xb0>
 8021888:	2b00      	cmp	r3, #0
 802188a:	dac9      	bge.n	8021820 <_malloc_r+0x14>
 802188c:	230c      	movs	r3, #12
 802188e:	602b      	str	r3, [r5, #0]
 8021890:	2000      	movs	r0, #0
 8021892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021894:	6821      	ldr	r1, [r4, #0]
 8021896:	1bc9      	subs	r1, r1, r7
 8021898:	d420      	bmi.n	80218dc <_malloc_r+0xd0>
 802189a:	290b      	cmp	r1, #11
 802189c:	d90a      	bls.n	80218b4 <_malloc_r+0xa8>
 802189e:	19e2      	adds	r2, r4, r7
 80218a0:	6027      	str	r7, [r4, #0]
 80218a2:	42a3      	cmp	r3, r4
 80218a4:	d104      	bne.n	80218b0 <_malloc_r+0xa4>
 80218a6:	6032      	str	r2, [r6, #0]
 80218a8:	6863      	ldr	r3, [r4, #4]
 80218aa:	6011      	str	r1, [r2, #0]
 80218ac:	6053      	str	r3, [r2, #4]
 80218ae:	e005      	b.n	80218bc <_malloc_r+0xb0>
 80218b0:	605a      	str	r2, [r3, #4]
 80218b2:	e7f9      	b.n	80218a8 <_malloc_r+0x9c>
 80218b4:	6862      	ldr	r2, [r4, #4]
 80218b6:	42a3      	cmp	r3, r4
 80218b8:	d10e      	bne.n	80218d8 <_malloc_r+0xcc>
 80218ba:	6032      	str	r2, [r6, #0]
 80218bc:	0028      	movs	r0, r5
 80218be:	f000 f83f 	bl	8021940 <__malloc_unlock>
 80218c2:	0020      	movs	r0, r4
 80218c4:	2207      	movs	r2, #7
 80218c6:	300b      	adds	r0, #11
 80218c8:	1d23      	adds	r3, r4, #4
 80218ca:	4390      	bics	r0, r2
 80218cc:	1ac2      	subs	r2, r0, r3
 80218ce:	4298      	cmp	r0, r3
 80218d0:	d0df      	beq.n	8021892 <_malloc_r+0x86>
 80218d2:	1a1b      	subs	r3, r3, r0
 80218d4:	50a3      	str	r3, [r4, r2]
 80218d6:	e7dc      	b.n	8021892 <_malloc_r+0x86>
 80218d8:	605a      	str	r2, [r3, #4]
 80218da:	e7ef      	b.n	80218bc <_malloc_r+0xb0>
 80218dc:	0023      	movs	r3, r4
 80218de:	6864      	ldr	r4, [r4, #4]
 80218e0:	e7a6      	b.n	8021830 <_malloc_r+0x24>
 80218e2:	9c00      	ldr	r4, [sp, #0]
 80218e4:	6863      	ldr	r3, [r4, #4]
 80218e6:	9300      	str	r3, [sp, #0]
 80218e8:	e7ad      	b.n	8021846 <_malloc_r+0x3a>
 80218ea:	001a      	movs	r2, r3
 80218ec:	685b      	ldr	r3, [r3, #4]
 80218ee:	42a3      	cmp	r3, r4
 80218f0:	d1fb      	bne.n	80218ea <_malloc_r+0xde>
 80218f2:	2300      	movs	r3, #0
 80218f4:	e7da      	b.n	80218ac <_malloc_r+0xa0>
 80218f6:	230c      	movs	r3, #12
 80218f8:	0028      	movs	r0, r5
 80218fa:	602b      	str	r3, [r5, #0]
 80218fc:	f000 f820 	bl	8021940 <__malloc_unlock>
 8021900:	e7c6      	b.n	8021890 <_malloc_r+0x84>
 8021902:	6007      	str	r7, [r0, #0]
 8021904:	e7da      	b.n	80218bc <_malloc_r+0xb0>
 8021906:	46c0      	nop			@ (mov r8, r8)
 8021908:	200037ac 	.word	0x200037ac

0802190c <__ascii_mbtowc>:
 802190c:	b082      	sub	sp, #8
 802190e:	2900      	cmp	r1, #0
 8021910:	d100      	bne.n	8021914 <__ascii_mbtowc+0x8>
 8021912:	a901      	add	r1, sp, #4
 8021914:	1e10      	subs	r0, r2, #0
 8021916:	d006      	beq.n	8021926 <__ascii_mbtowc+0x1a>
 8021918:	2b00      	cmp	r3, #0
 802191a:	d006      	beq.n	802192a <__ascii_mbtowc+0x1e>
 802191c:	7813      	ldrb	r3, [r2, #0]
 802191e:	600b      	str	r3, [r1, #0]
 8021920:	7810      	ldrb	r0, [r2, #0]
 8021922:	1e43      	subs	r3, r0, #1
 8021924:	4198      	sbcs	r0, r3
 8021926:	b002      	add	sp, #8
 8021928:	4770      	bx	lr
 802192a:	2002      	movs	r0, #2
 802192c:	4240      	negs	r0, r0
 802192e:	e7fa      	b.n	8021926 <__ascii_mbtowc+0x1a>

08021930 <__malloc_lock>:
 8021930:	b510      	push	{r4, lr}
 8021932:	4802      	ldr	r0, [pc, #8]	@ (802193c <__malloc_lock+0xc>)
 8021934:	f7fe fcfb 	bl	802032e <__retarget_lock_acquire_recursive>
 8021938:	bd10      	pop	{r4, pc}
 802193a:	46c0      	nop			@ (mov r8, r8)
 802193c:	200037a4 	.word	0x200037a4

08021940 <__malloc_unlock>:
 8021940:	b510      	push	{r4, lr}
 8021942:	4802      	ldr	r0, [pc, #8]	@ (802194c <__malloc_unlock+0xc>)
 8021944:	f7fe fcf4 	bl	8020330 <__retarget_lock_release_recursive>
 8021948:	bd10      	pop	{r4, pc}
 802194a:	46c0      	nop			@ (mov r8, r8)
 802194c:	200037a4 	.word	0x200037a4

08021950 <_Balloc>:
 8021950:	b570      	push	{r4, r5, r6, lr}
 8021952:	69c5      	ldr	r5, [r0, #28]
 8021954:	0006      	movs	r6, r0
 8021956:	000c      	movs	r4, r1
 8021958:	2d00      	cmp	r5, #0
 802195a:	d10e      	bne.n	802197a <_Balloc+0x2a>
 802195c:	2010      	movs	r0, #16
 802195e:	f7ff ff29 	bl	80217b4 <malloc>
 8021962:	1e02      	subs	r2, r0, #0
 8021964:	61f0      	str	r0, [r6, #28]
 8021966:	d104      	bne.n	8021972 <_Balloc+0x22>
 8021968:	216b      	movs	r1, #107	@ 0x6b
 802196a:	4b19      	ldr	r3, [pc, #100]	@ (80219d0 <_Balloc+0x80>)
 802196c:	4819      	ldr	r0, [pc, #100]	@ (80219d4 <_Balloc+0x84>)
 802196e:	f001 f8cf 	bl	8022b10 <__assert_func>
 8021972:	6045      	str	r5, [r0, #4]
 8021974:	6085      	str	r5, [r0, #8]
 8021976:	6005      	str	r5, [r0, #0]
 8021978:	60c5      	str	r5, [r0, #12]
 802197a:	69f5      	ldr	r5, [r6, #28]
 802197c:	68eb      	ldr	r3, [r5, #12]
 802197e:	2b00      	cmp	r3, #0
 8021980:	d013      	beq.n	80219aa <_Balloc+0x5a>
 8021982:	69f3      	ldr	r3, [r6, #28]
 8021984:	00a2      	lsls	r2, r4, #2
 8021986:	68db      	ldr	r3, [r3, #12]
 8021988:	189b      	adds	r3, r3, r2
 802198a:	6818      	ldr	r0, [r3, #0]
 802198c:	2800      	cmp	r0, #0
 802198e:	d118      	bne.n	80219c2 <_Balloc+0x72>
 8021990:	2101      	movs	r1, #1
 8021992:	000d      	movs	r5, r1
 8021994:	40a5      	lsls	r5, r4
 8021996:	1d6a      	adds	r2, r5, #5
 8021998:	0030      	movs	r0, r6
 802199a:	0092      	lsls	r2, r2, #2
 802199c:	f001 f8d6 	bl	8022b4c <_calloc_r>
 80219a0:	2800      	cmp	r0, #0
 80219a2:	d00c      	beq.n	80219be <_Balloc+0x6e>
 80219a4:	6044      	str	r4, [r0, #4]
 80219a6:	6085      	str	r5, [r0, #8]
 80219a8:	e00d      	b.n	80219c6 <_Balloc+0x76>
 80219aa:	2221      	movs	r2, #33	@ 0x21
 80219ac:	2104      	movs	r1, #4
 80219ae:	0030      	movs	r0, r6
 80219b0:	f001 f8cc 	bl	8022b4c <_calloc_r>
 80219b4:	69f3      	ldr	r3, [r6, #28]
 80219b6:	60e8      	str	r0, [r5, #12]
 80219b8:	68db      	ldr	r3, [r3, #12]
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	d1e1      	bne.n	8021982 <_Balloc+0x32>
 80219be:	2000      	movs	r0, #0
 80219c0:	bd70      	pop	{r4, r5, r6, pc}
 80219c2:	6802      	ldr	r2, [r0, #0]
 80219c4:	601a      	str	r2, [r3, #0]
 80219c6:	2300      	movs	r3, #0
 80219c8:	6103      	str	r3, [r0, #16]
 80219ca:	60c3      	str	r3, [r0, #12]
 80219cc:	e7f8      	b.n	80219c0 <_Balloc+0x70>
 80219ce:	46c0      	nop			@ (mov r8, r8)
 80219d0:	08025d1a 	.word	0x08025d1a
 80219d4:	08025dfa 	.word	0x08025dfa

080219d8 <_Bfree>:
 80219d8:	b570      	push	{r4, r5, r6, lr}
 80219da:	69c6      	ldr	r6, [r0, #28]
 80219dc:	0005      	movs	r5, r0
 80219de:	000c      	movs	r4, r1
 80219e0:	2e00      	cmp	r6, #0
 80219e2:	d10e      	bne.n	8021a02 <_Bfree+0x2a>
 80219e4:	2010      	movs	r0, #16
 80219e6:	f7ff fee5 	bl	80217b4 <malloc>
 80219ea:	1e02      	subs	r2, r0, #0
 80219ec:	61e8      	str	r0, [r5, #28]
 80219ee:	d104      	bne.n	80219fa <_Bfree+0x22>
 80219f0:	218f      	movs	r1, #143	@ 0x8f
 80219f2:	4b09      	ldr	r3, [pc, #36]	@ (8021a18 <_Bfree+0x40>)
 80219f4:	4809      	ldr	r0, [pc, #36]	@ (8021a1c <_Bfree+0x44>)
 80219f6:	f001 f88b 	bl	8022b10 <__assert_func>
 80219fa:	6046      	str	r6, [r0, #4]
 80219fc:	6086      	str	r6, [r0, #8]
 80219fe:	6006      	str	r6, [r0, #0]
 8021a00:	60c6      	str	r6, [r0, #12]
 8021a02:	2c00      	cmp	r4, #0
 8021a04:	d007      	beq.n	8021a16 <_Bfree+0x3e>
 8021a06:	69eb      	ldr	r3, [r5, #28]
 8021a08:	6862      	ldr	r2, [r4, #4]
 8021a0a:	68db      	ldr	r3, [r3, #12]
 8021a0c:	0092      	lsls	r2, r2, #2
 8021a0e:	189b      	adds	r3, r3, r2
 8021a10:	681a      	ldr	r2, [r3, #0]
 8021a12:	6022      	str	r2, [r4, #0]
 8021a14:	601c      	str	r4, [r3, #0]
 8021a16:	bd70      	pop	{r4, r5, r6, pc}
 8021a18:	08025d1a 	.word	0x08025d1a
 8021a1c:	08025dfa 	.word	0x08025dfa

08021a20 <__multadd>:
 8021a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a22:	000f      	movs	r7, r1
 8021a24:	9001      	str	r0, [sp, #4]
 8021a26:	000c      	movs	r4, r1
 8021a28:	001e      	movs	r6, r3
 8021a2a:	2000      	movs	r0, #0
 8021a2c:	690d      	ldr	r5, [r1, #16]
 8021a2e:	3714      	adds	r7, #20
 8021a30:	683b      	ldr	r3, [r7, #0]
 8021a32:	3001      	adds	r0, #1
 8021a34:	b299      	uxth	r1, r3
 8021a36:	4351      	muls	r1, r2
 8021a38:	0c1b      	lsrs	r3, r3, #16
 8021a3a:	4353      	muls	r3, r2
 8021a3c:	1989      	adds	r1, r1, r6
 8021a3e:	0c0e      	lsrs	r6, r1, #16
 8021a40:	199b      	adds	r3, r3, r6
 8021a42:	0c1e      	lsrs	r6, r3, #16
 8021a44:	b289      	uxth	r1, r1
 8021a46:	041b      	lsls	r3, r3, #16
 8021a48:	185b      	adds	r3, r3, r1
 8021a4a:	c708      	stmia	r7!, {r3}
 8021a4c:	4285      	cmp	r5, r0
 8021a4e:	dcef      	bgt.n	8021a30 <__multadd+0x10>
 8021a50:	2e00      	cmp	r6, #0
 8021a52:	d022      	beq.n	8021a9a <__multadd+0x7a>
 8021a54:	68a3      	ldr	r3, [r4, #8]
 8021a56:	42ab      	cmp	r3, r5
 8021a58:	dc19      	bgt.n	8021a8e <__multadd+0x6e>
 8021a5a:	6861      	ldr	r1, [r4, #4]
 8021a5c:	9801      	ldr	r0, [sp, #4]
 8021a5e:	3101      	adds	r1, #1
 8021a60:	f7ff ff76 	bl	8021950 <_Balloc>
 8021a64:	1e07      	subs	r7, r0, #0
 8021a66:	d105      	bne.n	8021a74 <__multadd+0x54>
 8021a68:	003a      	movs	r2, r7
 8021a6a:	21ba      	movs	r1, #186	@ 0xba
 8021a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8021aa0 <__multadd+0x80>)
 8021a6e:	480d      	ldr	r0, [pc, #52]	@ (8021aa4 <__multadd+0x84>)
 8021a70:	f001 f84e 	bl	8022b10 <__assert_func>
 8021a74:	0021      	movs	r1, r4
 8021a76:	6922      	ldr	r2, [r4, #16]
 8021a78:	310c      	adds	r1, #12
 8021a7a:	3202      	adds	r2, #2
 8021a7c:	0092      	lsls	r2, r2, #2
 8021a7e:	300c      	adds	r0, #12
 8021a80:	f7fe fc62 	bl	8020348 <memcpy>
 8021a84:	0021      	movs	r1, r4
 8021a86:	9801      	ldr	r0, [sp, #4]
 8021a88:	f7ff ffa6 	bl	80219d8 <_Bfree>
 8021a8c:	003c      	movs	r4, r7
 8021a8e:	1d2b      	adds	r3, r5, #4
 8021a90:	009b      	lsls	r3, r3, #2
 8021a92:	18e3      	adds	r3, r4, r3
 8021a94:	3501      	adds	r5, #1
 8021a96:	605e      	str	r6, [r3, #4]
 8021a98:	6125      	str	r5, [r4, #16]
 8021a9a:	0020      	movs	r0, r4
 8021a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a9e:	46c0      	nop			@ (mov r8, r8)
 8021aa0:	08025d89 	.word	0x08025d89
 8021aa4:	08025dfa 	.word	0x08025dfa

08021aa8 <__s2b>:
 8021aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021aaa:	0007      	movs	r7, r0
 8021aac:	0018      	movs	r0, r3
 8021aae:	000c      	movs	r4, r1
 8021ab0:	3008      	adds	r0, #8
 8021ab2:	2109      	movs	r1, #9
 8021ab4:	9301      	str	r3, [sp, #4]
 8021ab6:	0015      	movs	r5, r2
 8021ab8:	f7de fbfe 	bl	80002b8 <__divsi3>
 8021abc:	2301      	movs	r3, #1
 8021abe:	2100      	movs	r1, #0
 8021ac0:	4283      	cmp	r3, r0
 8021ac2:	db0a      	blt.n	8021ada <__s2b+0x32>
 8021ac4:	0038      	movs	r0, r7
 8021ac6:	f7ff ff43 	bl	8021950 <_Balloc>
 8021aca:	1e01      	subs	r1, r0, #0
 8021acc:	d108      	bne.n	8021ae0 <__s2b+0x38>
 8021ace:	000a      	movs	r2, r1
 8021ad0:	4b19      	ldr	r3, [pc, #100]	@ (8021b38 <__s2b+0x90>)
 8021ad2:	481a      	ldr	r0, [pc, #104]	@ (8021b3c <__s2b+0x94>)
 8021ad4:	31d3      	adds	r1, #211	@ 0xd3
 8021ad6:	f001 f81b 	bl	8022b10 <__assert_func>
 8021ada:	005b      	lsls	r3, r3, #1
 8021adc:	3101      	adds	r1, #1
 8021ade:	e7ef      	b.n	8021ac0 <__s2b+0x18>
 8021ae0:	9b08      	ldr	r3, [sp, #32]
 8021ae2:	6143      	str	r3, [r0, #20]
 8021ae4:	2301      	movs	r3, #1
 8021ae6:	6103      	str	r3, [r0, #16]
 8021ae8:	2d09      	cmp	r5, #9
 8021aea:	dd18      	ble.n	8021b1e <__s2b+0x76>
 8021aec:	0023      	movs	r3, r4
 8021aee:	3309      	adds	r3, #9
 8021af0:	001e      	movs	r6, r3
 8021af2:	9300      	str	r3, [sp, #0]
 8021af4:	1964      	adds	r4, r4, r5
 8021af6:	7833      	ldrb	r3, [r6, #0]
 8021af8:	220a      	movs	r2, #10
 8021afa:	0038      	movs	r0, r7
 8021afc:	3b30      	subs	r3, #48	@ 0x30
 8021afe:	f7ff ff8f 	bl	8021a20 <__multadd>
 8021b02:	3601      	adds	r6, #1
 8021b04:	0001      	movs	r1, r0
 8021b06:	42a6      	cmp	r6, r4
 8021b08:	d1f5      	bne.n	8021af6 <__s2b+0x4e>
 8021b0a:	002c      	movs	r4, r5
 8021b0c:	9b00      	ldr	r3, [sp, #0]
 8021b0e:	3c08      	subs	r4, #8
 8021b10:	191c      	adds	r4, r3, r4
 8021b12:	002e      	movs	r6, r5
 8021b14:	9b01      	ldr	r3, [sp, #4]
 8021b16:	429e      	cmp	r6, r3
 8021b18:	db04      	blt.n	8021b24 <__s2b+0x7c>
 8021b1a:	0008      	movs	r0, r1
 8021b1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021b1e:	2509      	movs	r5, #9
 8021b20:	340a      	adds	r4, #10
 8021b22:	e7f6      	b.n	8021b12 <__s2b+0x6a>
 8021b24:	1b63      	subs	r3, r4, r5
 8021b26:	5d9b      	ldrb	r3, [r3, r6]
 8021b28:	220a      	movs	r2, #10
 8021b2a:	0038      	movs	r0, r7
 8021b2c:	3b30      	subs	r3, #48	@ 0x30
 8021b2e:	f7ff ff77 	bl	8021a20 <__multadd>
 8021b32:	3601      	adds	r6, #1
 8021b34:	0001      	movs	r1, r0
 8021b36:	e7ed      	b.n	8021b14 <__s2b+0x6c>
 8021b38:	08025d89 	.word	0x08025d89
 8021b3c:	08025dfa 	.word	0x08025dfa

08021b40 <__hi0bits>:
 8021b40:	2280      	movs	r2, #128	@ 0x80
 8021b42:	0003      	movs	r3, r0
 8021b44:	0252      	lsls	r2, r2, #9
 8021b46:	2000      	movs	r0, #0
 8021b48:	4293      	cmp	r3, r2
 8021b4a:	d201      	bcs.n	8021b50 <__hi0bits+0x10>
 8021b4c:	041b      	lsls	r3, r3, #16
 8021b4e:	3010      	adds	r0, #16
 8021b50:	2280      	movs	r2, #128	@ 0x80
 8021b52:	0452      	lsls	r2, r2, #17
 8021b54:	4293      	cmp	r3, r2
 8021b56:	d201      	bcs.n	8021b5c <__hi0bits+0x1c>
 8021b58:	3008      	adds	r0, #8
 8021b5a:	021b      	lsls	r3, r3, #8
 8021b5c:	2280      	movs	r2, #128	@ 0x80
 8021b5e:	0552      	lsls	r2, r2, #21
 8021b60:	4293      	cmp	r3, r2
 8021b62:	d201      	bcs.n	8021b68 <__hi0bits+0x28>
 8021b64:	3004      	adds	r0, #4
 8021b66:	011b      	lsls	r3, r3, #4
 8021b68:	2280      	movs	r2, #128	@ 0x80
 8021b6a:	05d2      	lsls	r2, r2, #23
 8021b6c:	4293      	cmp	r3, r2
 8021b6e:	d201      	bcs.n	8021b74 <__hi0bits+0x34>
 8021b70:	3002      	adds	r0, #2
 8021b72:	009b      	lsls	r3, r3, #2
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	db03      	blt.n	8021b80 <__hi0bits+0x40>
 8021b78:	3001      	adds	r0, #1
 8021b7a:	4213      	tst	r3, r2
 8021b7c:	d100      	bne.n	8021b80 <__hi0bits+0x40>
 8021b7e:	2020      	movs	r0, #32
 8021b80:	4770      	bx	lr

08021b82 <__lo0bits>:
 8021b82:	6803      	ldr	r3, [r0, #0]
 8021b84:	0001      	movs	r1, r0
 8021b86:	2207      	movs	r2, #7
 8021b88:	0018      	movs	r0, r3
 8021b8a:	4010      	ands	r0, r2
 8021b8c:	4213      	tst	r3, r2
 8021b8e:	d00d      	beq.n	8021bac <__lo0bits+0x2a>
 8021b90:	3a06      	subs	r2, #6
 8021b92:	2000      	movs	r0, #0
 8021b94:	4213      	tst	r3, r2
 8021b96:	d105      	bne.n	8021ba4 <__lo0bits+0x22>
 8021b98:	3002      	adds	r0, #2
 8021b9a:	4203      	tst	r3, r0
 8021b9c:	d003      	beq.n	8021ba6 <__lo0bits+0x24>
 8021b9e:	40d3      	lsrs	r3, r2
 8021ba0:	0010      	movs	r0, r2
 8021ba2:	600b      	str	r3, [r1, #0]
 8021ba4:	4770      	bx	lr
 8021ba6:	089b      	lsrs	r3, r3, #2
 8021ba8:	600b      	str	r3, [r1, #0]
 8021baa:	e7fb      	b.n	8021ba4 <__lo0bits+0x22>
 8021bac:	b29a      	uxth	r2, r3
 8021bae:	2a00      	cmp	r2, #0
 8021bb0:	d101      	bne.n	8021bb6 <__lo0bits+0x34>
 8021bb2:	2010      	movs	r0, #16
 8021bb4:	0c1b      	lsrs	r3, r3, #16
 8021bb6:	b2da      	uxtb	r2, r3
 8021bb8:	2a00      	cmp	r2, #0
 8021bba:	d101      	bne.n	8021bc0 <__lo0bits+0x3e>
 8021bbc:	3008      	adds	r0, #8
 8021bbe:	0a1b      	lsrs	r3, r3, #8
 8021bc0:	071a      	lsls	r2, r3, #28
 8021bc2:	d101      	bne.n	8021bc8 <__lo0bits+0x46>
 8021bc4:	3004      	adds	r0, #4
 8021bc6:	091b      	lsrs	r3, r3, #4
 8021bc8:	079a      	lsls	r2, r3, #30
 8021bca:	d101      	bne.n	8021bd0 <__lo0bits+0x4e>
 8021bcc:	3002      	adds	r0, #2
 8021bce:	089b      	lsrs	r3, r3, #2
 8021bd0:	07da      	lsls	r2, r3, #31
 8021bd2:	d4e9      	bmi.n	8021ba8 <__lo0bits+0x26>
 8021bd4:	3001      	adds	r0, #1
 8021bd6:	085b      	lsrs	r3, r3, #1
 8021bd8:	d1e6      	bne.n	8021ba8 <__lo0bits+0x26>
 8021bda:	2020      	movs	r0, #32
 8021bdc:	e7e2      	b.n	8021ba4 <__lo0bits+0x22>
	...

08021be0 <__i2b>:
 8021be0:	b510      	push	{r4, lr}
 8021be2:	000c      	movs	r4, r1
 8021be4:	2101      	movs	r1, #1
 8021be6:	f7ff feb3 	bl	8021950 <_Balloc>
 8021bea:	2800      	cmp	r0, #0
 8021bec:	d107      	bne.n	8021bfe <__i2b+0x1e>
 8021bee:	2146      	movs	r1, #70	@ 0x46
 8021bf0:	4c05      	ldr	r4, [pc, #20]	@ (8021c08 <__i2b+0x28>)
 8021bf2:	0002      	movs	r2, r0
 8021bf4:	4b05      	ldr	r3, [pc, #20]	@ (8021c0c <__i2b+0x2c>)
 8021bf6:	0020      	movs	r0, r4
 8021bf8:	31ff      	adds	r1, #255	@ 0xff
 8021bfa:	f000 ff89 	bl	8022b10 <__assert_func>
 8021bfe:	2301      	movs	r3, #1
 8021c00:	6144      	str	r4, [r0, #20]
 8021c02:	6103      	str	r3, [r0, #16]
 8021c04:	bd10      	pop	{r4, pc}
 8021c06:	46c0      	nop			@ (mov r8, r8)
 8021c08:	08025dfa 	.word	0x08025dfa
 8021c0c:	08025d89 	.word	0x08025d89

08021c10 <__multiply>:
 8021c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c12:	0014      	movs	r4, r2
 8021c14:	690a      	ldr	r2, [r1, #16]
 8021c16:	6923      	ldr	r3, [r4, #16]
 8021c18:	000d      	movs	r5, r1
 8021c1a:	b08b      	sub	sp, #44	@ 0x2c
 8021c1c:	429a      	cmp	r2, r3
 8021c1e:	db02      	blt.n	8021c26 <__multiply+0x16>
 8021c20:	0023      	movs	r3, r4
 8021c22:	000c      	movs	r4, r1
 8021c24:	001d      	movs	r5, r3
 8021c26:	6927      	ldr	r7, [r4, #16]
 8021c28:	692e      	ldr	r6, [r5, #16]
 8021c2a:	6861      	ldr	r1, [r4, #4]
 8021c2c:	19bb      	adds	r3, r7, r6
 8021c2e:	9303      	str	r3, [sp, #12]
 8021c30:	68a3      	ldr	r3, [r4, #8]
 8021c32:	19ba      	adds	r2, r7, r6
 8021c34:	4293      	cmp	r3, r2
 8021c36:	da00      	bge.n	8021c3a <__multiply+0x2a>
 8021c38:	3101      	adds	r1, #1
 8021c3a:	f7ff fe89 	bl	8021950 <_Balloc>
 8021c3e:	9002      	str	r0, [sp, #8]
 8021c40:	2800      	cmp	r0, #0
 8021c42:	d106      	bne.n	8021c52 <__multiply+0x42>
 8021c44:	21b1      	movs	r1, #177	@ 0xb1
 8021c46:	4b49      	ldr	r3, [pc, #292]	@ (8021d6c <__multiply+0x15c>)
 8021c48:	4849      	ldr	r0, [pc, #292]	@ (8021d70 <__multiply+0x160>)
 8021c4a:	9a02      	ldr	r2, [sp, #8]
 8021c4c:	0049      	lsls	r1, r1, #1
 8021c4e:	f000 ff5f 	bl	8022b10 <__assert_func>
 8021c52:	9b02      	ldr	r3, [sp, #8]
 8021c54:	2200      	movs	r2, #0
 8021c56:	3314      	adds	r3, #20
 8021c58:	469c      	mov	ip, r3
 8021c5a:	19bb      	adds	r3, r7, r6
 8021c5c:	009b      	lsls	r3, r3, #2
 8021c5e:	4463      	add	r3, ip
 8021c60:	9304      	str	r3, [sp, #16]
 8021c62:	4663      	mov	r3, ip
 8021c64:	9904      	ldr	r1, [sp, #16]
 8021c66:	428b      	cmp	r3, r1
 8021c68:	d32a      	bcc.n	8021cc0 <__multiply+0xb0>
 8021c6a:	0023      	movs	r3, r4
 8021c6c:	00bf      	lsls	r7, r7, #2
 8021c6e:	3314      	adds	r3, #20
 8021c70:	3514      	adds	r5, #20
 8021c72:	9308      	str	r3, [sp, #32]
 8021c74:	00b6      	lsls	r6, r6, #2
 8021c76:	19db      	adds	r3, r3, r7
 8021c78:	9305      	str	r3, [sp, #20]
 8021c7a:	19ab      	adds	r3, r5, r6
 8021c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c7e:	2304      	movs	r3, #4
 8021c80:	9306      	str	r3, [sp, #24]
 8021c82:	0023      	movs	r3, r4
 8021c84:	9a05      	ldr	r2, [sp, #20]
 8021c86:	3315      	adds	r3, #21
 8021c88:	9501      	str	r5, [sp, #4]
 8021c8a:	429a      	cmp	r2, r3
 8021c8c:	d305      	bcc.n	8021c9a <__multiply+0x8a>
 8021c8e:	1b13      	subs	r3, r2, r4
 8021c90:	3b15      	subs	r3, #21
 8021c92:	089b      	lsrs	r3, r3, #2
 8021c94:	3301      	adds	r3, #1
 8021c96:	009b      	lsls	r3, r3, #2
 8021c98:	9306      	str	r3, [sp, #24]
 8021c9a:	9b01      	ldr	r3, [sp, #4]
 8021c9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c9e:	4293      	cmp	r3, r2
 8021ca0:	d310      	bcc.n	8021cc4 <__multiply+0xb4>
 8021ca2:	9b03      	ldr	r3, [sp, #12]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	dd05      	ble.n	8021cb4 <__multiply+0xa4>
 8021ca8:	9b04      	ldr	r3, [sp, #16]
 8021caa:	3b04      	subs	r3, #4
 8021cac:	9304      	str	r3, [sp, #16]
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d056      	beq.n	8021d62 <__multiply+0x152>
 8021cb4:	9b02      	ldr	r3, [sp, #8]
 8021cb6:	9a03      	ldr	r2, [sp, #12]
 8021cb8:	0018      	movs	r0, r3
 8021cba:	611a      	str	r2, [r3, #16]
 8021cbc:	b00b      	add	sp, #44	@ 0x2c
 8021cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021cc0:	c304      	stmia	r3!, {r2}
 8021cc2:	e7cf      	b.n	8021c64 <__multiply+0x54>
 8021cc4:	9b01      	ldr	r3, [sp, #4]
 8021cc6:	6818      	ldr	r0, [r3, #0]
 8021cc8:	b280      	uxth	r0, r0
 8021cca:	2800      	cmp	r0, #0
 8021ccc:	d01e      	beq.n	8021d0c <__multiply+0xfc>
 8021cce:	4667      	mov	r7, ip
 8021cd0:	2500      	movs	r5, #0
 8021cd2:	9e08      	ldr	r6, [sp, #32]
 8021cd4:	ce02      	ldmia	r6!, {r1}
 8021cd6:	683b      	ldr	r3, [r7, #0]
 8021cd8:	9307      	str	r3, [sp, #28]
 8021cda:	b28b      	uxth	r3, r1
 8021cdc:	4343      	muls	r3, r0
 8021cde:	001a      	movs	r2, r3
 8021ce0:	466b      	mov	r3, sp
 8021ce2:	0c09      	lsrs	r1, r1, #16
 8021ce4:	8b9b      	ldrh	r3, [r3, #28]
 8021ce6:	4341      	muls	r1, r0
 8021ce8:	18d3      	adds	r3, r2, r3
 8021cea:	9a07      	ldr	r2, [sp, #28]
 8021cec:	195b      	adds	r3, r3, r5
 8021cee:	0c12      	lsrs	r2, r2, #16
 8021cf0:	1889      	adds	r1, r1, r2
 8021cf2:	0c1a      	lsrs	r2, r3, #16
 8021cf4:	188a      	adds	r2, r1, r2
 8021cf6:	b29b      	uxth	r3, r3
 8021cf8:	0c15      	lsrs	r5, r2, #16
 8021cfa:	0412      	lsls	r2, r2, #16
 8021cfc:	431a      	orrs	r2, r3
 8021cfe:	9b05      	ldr	r3, [sp, #20]
 8021d00:	c704      	stmia	r7!, {r2}
 8021d02:	42b3      	cmp	r3, r6
 8021d04:	d8e6      	bhi.n	8021cd4 <__multiply+0xc4>
 8021d06:	4663      	mov	r3, ip
 8021d08:	9a06      	ldr	r2, [sp, #24]
 8021d0a:	509d      	str	r5, [r3, r2]
 8021d0c:	9b01      	ldr	r3, [sp, #4]
 8021d0e:	6818      	ldr	r0, [r3, #0]
 8021d10:	0c00      	lsrs	r0, r0, #16
 8021d12:	d020      	beq.n	8021d56 <__multiply+0x146>
 8021d14:	4663      	mov	r3, ip
 8021d16:	0025      	movs	r5, r4
 8021d18:	4661      	mov	r1, ip
 8021d1a:	2700      	movs	r7, #0
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	3514      	adds	r5, #20
 8021d20:	682a      	ldr	r2, [r5, #0]
 8021d22:	680e      	ldr	r6, [r1, #0]
 8021d24:	b292      	uxth	r2, r2
 8021d26:	4342      	muls	r2, r0
 8021d28:	0c36      	lsrs	r6, r6, #16
 8021d2a:	1992      	adds	r2, r2, r6
 8021d2c:	19d2      	adds	r2, r2, r7
 8021d2e:	0416      	lsls	r6, r2, #16
 8021d30:	b29b      	uxth	r3, r3
 8021d32:	431e      	orrs	r6, r3
 8021d34:	600e      	str	r6, [r1, #0]
 8021d36:	cd40      	ldmia	r5!, {r6}
 8021d38:	684b      	ldr	r3, [r1, #4]
 8021d3a:	0c36      	lsrs	r6, r6, #16
 8021d3c:	4346      	muls	r6, r0
 8021d3e:	b29b      	uxth	r3, r3
 8021d40:	0c12      	lsrs	r2, r2, #16
 8021d42:	18f3      	adds	r3, r6, r3
 8021d44:	189b      	adds	r3, r3, r2
 8021d46:	9a05      	ldr	r2, [sp, #20]
 8021d48:	0c1f      	lsrs	r7, r3, #16
 8021d4a:	3104      	adds	r1, #4
 8021d4c:	42aa      	cmp	r2, r5
 8021d4e:	d8e7      	bhi.n	8021d20 <__multiply+0x110>
 8021d50:	4662      	mov	r2, ip
 8021d52:	9906      	ldr	r1, [sp, #24]
 8021d54:	5053      	str	r3, [r2, r1]
 8021d56:	9b01      	ldr	r3, [sp, #4]
 8021d58:	3304      	adds	r3, #4
 8021d5a:	9301      	str	r3, [sp, #4]
 8021d5c:	2304      	movs	r3, #4
 8021d5e:	449c      	add	ip, r3
 8021d60:	e79b      	b.n	8021c9a <__multiply+0x8a>
 8021d62:	9b03      	ldr	r3, [sp, #12]
 8021d64:	3b01      	subs	r3, #1
 8021d66:	9303      	str	r3, [sp, #12]
 8021d68:	e79b      	b.n	8021ca2 <__multiply+0x92>
 8021d6a:	46c0      	nop			@ (mov r8, r8)
 8021d6c:	08025d89 	.word	0x08025d89
 8021d70:	08025dfa 	.word	0x08025dfa

08021d74 <__pow5mult>:
 8021d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021d76:	2303      	movs	r3, #3
 8021d78:	0015      	movs	r5, r2
 8021d7a:	0007      	movs	r7, r0
 8021d7c:	000e      	movs	r6, r1
 8021d7e:	401a      	ands	r2, r3
 8021d80:	421d      	tst	r5, r3
 8021d82:	d008      	beq.n	8021d96 <__pow5mult+0x22>
 8021d84:	4925      	ldr	r1, [pc, #148]	@ (8021e1c <__pow5mult+0xa8>)
 8021d86:	3a01      	subs	r2, #1
 8021d88:	0092      	lsls	r2, r2, #2
 8021d8a:	5852      	ldr	r2, [r2, r1]
 8021d8c:	2300      	movs	r3, #0
 8021d8e:	0031      	movs	r1, r6
 8021d90:	f7ff fe46 	bl	8021a20 <__multadd>
 8021d94:	0006      	movs	r6, r0
 8021d96:	10ad      	asrs	r5, r5, #2
 8021d98:	d03d      	beq.n	8021e16 <__pow5mult+0xa2>
 8021d9a:	69fc      	ldr	r4, [r7, #28]
 8021d9c:	2c00      	cmp	r4, #0
 8021d9e:	d10f      	bne.n	8021dc0 <__pow5mult+0x4c>
 8021da0:	2010      	movs	r0, #16
 8021da2:	f7ff fd07 	bl	80217b4 <malloc>
 8021da6:	1e02      	subs	r2, r0, #0
 8021da8:	61f8      	str	r0, [r7, #28]
 8021daa:	d105      	bne.n	8021db8 <__pow5mult+0x44>
 8021dac:	21b4      	movs	r1, #180	@ 0xb4
 8021dae:	4b1c      	ldr	r3, [pc, #112]	@ (8021e20 <__pow5mult+0xac>)
 8021db0:	481c      	ldr	r0, [pc, #112]	@ (8021e24 <__pow5mult+0xb0>)
 8021db2:	31ff      	adds	r1, #255	@ 0xff
 8021db4:	f000 feac 	bl	8022b10 <__assert_func>
 8021db8:	6044      	str	r4, [r0, #4]
 8021dba:	6084      	str	r4, [r0, #8]
 8021dbc:	6004      	str	r4, [r0, #0]
 8021dbe:	60c4      	str	r4, [r0, #12]
 8021dc0:	69fb      	ldr	r3, [r7, #28]
 8021dc2:	689c      	ldr	r4, [r3, #8]
 8021dc4:	9301      	str	r3, [sp, #4]
 8021dc6:	2c00      	cmp	r4, #0
 8021dc8:	d108      	bne.n	8021ddc <__pow5mult+0x68>
 8021dca:	0038      	movs	r0, r7
 8021dcc:	4916      	ldr	r1, [pc, #88]	@ (8021e28 <__pow5mult+0xb4>)
 8021dce:	f7ff ff07 	bl	8021be0 <__i2b>
 8021dd2:	9b01      	ldr	r3, [sp, #4]
 8021dd4:	0004      	movs	r4, r0
 8021dd6:	6098      	str	r0, [r3, #8]
 8021dd8:	2300      	movs	r3, #0
 8021dda:	6003      	str	r3, [r0, #0]
 8021ddc:	2301      	movs	r3, #1
 8021dde:	421d      	tst	r5, r3
 8021de0:	d00a      	beq.n	8021df8 <__pow5mult+0x84>
 8021de2:	0031      	movs	r1, r6
 8021de4:	0022      	movs	r2, r4
 8021de6:	0038      	movs	r0, r7
 8021de8:	f7ff ff12 	bl	8021c10 <__multiply>
 8021dec:	0031      	movs	r1, r6
 8021dee:	9001      	str	r0, [sp, #4]
 8021df0:	0038      	movs	r0, r7
 8021df2:	f7ff fdf1 	bl	80219d8 <_Bfree>
 8021df6:	9e01      	ldr	r6, [sp, #4]
 8021df8:	106d      	asrs	r5, r5, #1
 8021dfa:	d00c      	beq.n	8021e16 <__pow5mult+0xa2>
 8021dfc:	6820      	ldr	r0, [r4, #0]
 8021dfe:	2800      	cmp	r0, #0
 8021e00:	d107      	bne.n	8021e12 <__pow5mult+0x9e>
 8021e02:	0022      	movs	r2, r4
 8021e04:	0021      	movs	r1, r4
 8021e06:	0038      	movs	r0, r7
 8021e08:	f7ff ff02 	bl	8021c10 <__multiply>
 8021e0c:	2300      	movs	r3, #0
 8021e0e:	6020      	str	r0, [r4, #0]
 8021e10:	6003      	str	r3, [r0, #0]
 8021e12:	0004      	movs	r4, r0
 8021e14:	e7e2      	b.n	8021ddc <__pow5mult+0x68>
 8021e16:	0030      	movs	r0, r6
 8021e18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021e1a:	46c0      	nop			@ (mov r8, r8)
 8021e1c:	08025e54 	.word	0x08025e54
 8021e20:	08025d1a 	.word	0x08025d1a
 8021e24:	08025dfa 	.word	0x08025dfa
 8021e28:	00000271 	.word	0x00000271

08021e2c <__lshift>:
 8021e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e2e:	000c      	movs	r4, r1
 8021e30:	0016      	movs	r6, r2
 8021e32:	6923      	ldr	r3, [r4, #16]
 8021e34:	1157      	asrs	r7, r2, #5
 8021e36:	b085      	sub	sp, #20
 8021e38:	18fb      	adds	r3, r7, r3
 8021e3a:	9301      	str	r3, [sp, #4]
 8021e3c:	3301      	adds	r3, #1
 8021e3e:	9300      	str	r3, [sp, #0]
 8021e40:	6849      	ldr	r1, [r1, #4]
 8021e42:	68a3      	ldr	r3, [r4, #8]
 8021e44:	9002      	str	r0, [sp, #8]
 8021e46:	9a00      	ldr	r2, [sp, #0]
 8021e48:	4293      	cmp	r3, r2
 8021e4a:	db10      	blt.n	8021e6e <__lshift+0x42>
 8021e4c:	9802      	ldr	r0, [sp, #8]
 8021e4e:	f7ff fd7f 	bl	8021950 <_Balloc>
 8021e52:	2300      	movs	r3, #0
 8021e54:	0001      	movs	r1, r0
 8021e56:	0005      	movs	r5, r0
 8021e58:	001a      	movs	r2, r3
 8021e5a:	3114      	adds	r1, #20
 8021e5c:	4298      	cmp	r0, r3
 8021e5e:	d10c      	bne.n	8021e7a <__lshift+0x4e>
 8021e60:	21ef      	movs	r1, #239	@ 0xef
 8021e62:	002a      	movs	r2, r5
 8021e64:	4b25      	ldr	r3, [pc, #148]	@ (8021efc <__lshift+0xd0>)
 8021e66:	4826      	ldr	r0, [pc, #152]	@ (8021f00 <__lshift+0xd4>)
 8021e68:	0049      	lsls	r1, r1, #1
 8021e6a:	f000 fe51 	bl	8022b10 <__assert_func>
 8021e6e:	3101      	adds	r1, #1
 8021e70:	005b      	lsls	r3, r3, #1
 8021e72:	e7e8      	b.n	8021e46 <__lshift+0x1a>
 8021e74:	0098      	lsls	r0, r3, #2
 8021e76:	500a      	str	r2, [r1, r0]
 8021e78:	3301      	adds	r3, #1
 8021e7a:	42bb      	cmp	r3, r7
 8021e7c:	dbfa      	blt.n	8021e74 <__lshift+0x48>
 8021e7e:	43fb      	mvns	r3, r7
 8021e80:	17db      	asrs	r3, r3, #31
 8021e82:	401f      	ands	r7, r3
 8021e84:	00bf      	lsls	r7, r7, #2
 8021e86:	0023      	movs	r3, r4
 8021e88:	201f      	movs	r0, #31
 8021e8a:	19c9      	adds	r1, r1, r7
 8021e8c:	0037      	movs	r7, r6
 8021e8e:	6922      	ldr	r2, [r4, #16]
 8021e90:	3314      	adds	r3, #20
 8021e92:	0092      	lsls	r2, r2, #2
 8021e94:	189a      	adds	r2, r3, r2
 8021e96:	4007      	ands	r7, r0
 8021e98:	4206      	tst	r6, r0
 8021e9a:	d029      	beq.n	8021ef0 <__lshift+0xc4>
 8021e9c:	3001      	adds	r0, #1
 8021e9e:	1bc0      	subs	r0, r0, r7
 8021ea0:	9003      	str	r0, [sp, #12]
 8021ea2:	468c      	mov	ip, r1
 8021ea4:	2000      	movs	r0, #0
 8021ea6:	681e      	ldr	r6, [r3, #0]
 8021ea8:	40be      	lsls	r6, r7
 8021eaa:	4306      	orrs	r6, r0
 8021eac:	4660      	mov	r0, ip
 8021eae:	c040      	stmia	r0!, {r6}
 8021eb0:	4684      	mov	ip, r0
 8021eb2:	9e03      	ldr	r6, [sp, #12]
 8021eb4:	cb01      	ldmia	r3!, {r0}
 8021eb6:	40f0      	lsrs	r0, r6
 8021eb8:	429a      	cmp	r2, r3
 8021eba:	d8f4      	bhi.n	8021ea6 <__lshift+0x7a>
 8021ebc:	0026      	movs	r6, r4
 8021ebe:	3615      	adds	r6, #21
 8021ec0:	2304      	movs	r3, #4
 8021ec2:	42b2      	cmp	r2, r6
 8021ec4:	d304      	bcc.n	8021ed0 <__lshift+0xa4>
 8021ec6:	1b13      	subs	r3, r2, r4
 8021ec8:	3b15      	subs	r3, #21
 8021eca:	089b      	lsrs	r3, r3, #2
 8021ecc:	3301      	adds	r3, #1
 8021ece:	009b      	lsls	r3, r3, #2
 8021ed0:	50c8      	str	r0, [r1, r3]
 8021ed2:	2800      	cmp	r0, #0
 8021ed4:	d002      	beq.n	8021edc <__lshift+0xb0>
 8021ed6:	9b01      	ldr	r3, [sp, #4]
 8021ed8:	3302      	adds	r3, #2
 8021eda:	9300      	str	r3, [sp, #0]
 8021edc:	9b00      	ldr	r3, [sp, #0]
 8021ede:	9802      	ldr	r0, [sp, #8]
 8021ee0:	3b01      	subs	r3, #1
 8021ee2:	0021      	movs	r1, r4
 8021ee4:	612b      	str	r3, [r5, #16]
 8021ee6:	f7ff fd77 	bl	80219d8 <_Bfree>
 8021eea:	0028      	movs	r0, r5
 8021eec:	b005      	add	sp, #20
 8021eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ef0:	cb01      	ldmia	r3!, {r0}
 8021ef2:	c101      	stmia	r1!, {r0}
 8021ef4:	429a      	cmp	r2, r3
 8021ef6:	d8fb      	bhi.n	8021ef0 <__lshift+0xc4>
 8021ef8:	e7f0      	b.n	8021edc <__lshift+0xb0>
 8021efa:	46c0      	nop			@ (mov r8, r8)
 8021efc:	08025d89 	.word	0x08025d89
 8021f00:	08025dfa 	.word	0x08025dfa

08021f04 <__mcmp>:
 8021f04:	b530      	push	{r4, r5, lr}
 8021f06:	690b      	ldr	r3, [r1, #16]
 8021f08:	6904      	ldr	r4, [r0, #16]
 8021f0a:	0002      	movs	r2, r0
 8021f0c:	1ae0      	subs	r0, r4, r3
 8021f0e:	429c      	cmp	r4, r3
 8021f10:	d10f      	bne.n	8021f32 <__mcmp+0x2e>
 8021f12:	3214      	adds	r2, #20
 8021f14:	009b      	lsls	r3, r3, #2
 8021f16:	3114      	adds	r1, #20
 8021f18:	0014      	movs	r4, r2
 8021f1a:	18c9      	adds	r1, r1, r3
 8021f1c:	18d2      	adds	r2, r2, r3
 8021f1e:	3a04      	subs	r2, #4
 8021f20:	3904      	subs	r1, #4
 8021f22:	6815      	ldr	r5, [r2, #0]
 8021f24:	680b      	ldr	r3, [r1, #0]
 8021f26:	429d      	cmp	r5, r3
 8021f28:	d004      	beq.n	8021f34 <__mcmp+0x30>
 8021f2a:	2001      	movs	r0, #1
 8021f2c:	429d      	cmp	r5, r3
 8021f2e:	d200      	bcs.n	8021f32 <__mcmp+0x2e>
 8021f30:	3802      	subs	r0, #2
 8021f32:	bd30      	pop	{r4, r5, pc}
 8021f34:	4294      	cmp	r4, r2
 8021f36:	d3f2      	bcc.n	8021f1e <__mcmp+0x1a>
 8021f38:	e7fb      	b.n	8021f32 <__mcmp+0x2e>
	...

08021f3c <__mdiff>:
 8021f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f3e:	000c      	movs	r4, r1
 8021f40:	b087      	sub	sp, #28
 8021f42:	9000      	str	r0, [sp, #0]
 8021f44:	0011      	movs	r1, r2
 8021f46:	0020      	movs	r0, r4
 8021f48:	0017      	movs	r7, r2
 8021f4a:	f7ff ffdb 	bl	8021f04 <__mcmp>
 8021f4e:	1e05      	subs	r5, r0, #0
 8021f50:	d110      	bne.n	8021f74 <__mdiff+0x38>
 8021f52:	0001      	movs	r1, r0
 8021f54:	9800      	ldr	r0, [sp, #0]
 8021f56:	f7ff fcfb 	bl	8021950 <_Balloc>
 8021f5a:	1e02      	subs	r2, r0, #0
 8021f5c:	d104      	bne.n	8021f68 <__mdiff+0x2c>
 8021f5e:	4b40      	ldr	r3, [pc, #256]	@ (8022060 <__mdiff+0x124>)
 8021f60:	4840      	ldr	r0, [pc, #256]	@ (8022064 <__mdiff+0x128>)
 8021f62:	4941      	ldr	r1, [pc, #260]	@ (8022068 <__mdiff+0x12c>)
 8021f64:	f000 fdd4 	bl	8022b10 <__assert_func>
 8021f68:	2301      	movs	r3, #1
 8021f6a:	6145      	str	r5, [r0, #20]
 8021f6c:	6103      	str	r3, [r0, #16]
 8021f6e:	0010      	movs	r0, r2
 8021f70:	b007      	add	sp, #28
 8021f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f74:	2600      	movs	r6, #0
 8021f76:	42b0      	cmp	r0, r6
 8021f78:	da03      	bge.n	8021f82 <__mdiff+0x46>
 8021f7a:	0023      	movs	r3, r4
 8021f7c:	003c      	movs	r4, r7
 8021f7e:	001f      	movs	r7, r3
 8021f80:	3601      	adds	r6, #1
 8021f82:	6861      	ldr	r1, [r4, #4]
 8021f84:	9800      	ldr	r0, [sp, #0]
 8021f86:	f7ff fce3 	bl	8021950 <_Balloc>
 8021f8a:	1e02      	subs	r2, r0, #0
 8021f8c:	d103      	bne.n	8021f96 <__mdiff+0x5a>
 8021f8e:	4b34      	ldr	r3, [pc, #208]	@ (8022060 <__mdiff+0x124>)
 8021f90:	4834      	ldr	r0, [pc, #208]	@ (8022064 <__mdiff+0x128>)
 8021f92:	4936      	ldr	r1, [pc, #216]	@ (802206c <__mdiff+0x130>)
 8021f94:	e7e6      	b.n	8021f64 <__mdiff+0x28>
 8021f96:	6923      	ldr	r3, [r4, #16]
 8021f98:	3414      	adds	r4, #20
 8021f9a:	9300      	str	r3, [sp, #0]
 8021f9c:	009b      	lsls	r3, r3, #2
 8021f9e:	18e3      	adds	r3, r4, r3
 8021fa0:	0021      	movs	r1, r4
 8021fa2:	9401      	str	r4, [sp, #4]
 8021fa4:	003c      	movs	r4, r7
 8021fa6:	9302      	str	r3, [sp, #8]
 8021fa8:	693b      	ldr	r3, [r7, #16]
 8021faa:	3414      	adds	r4, #20
 8021fac:	009b      	lsls	r3, r3, #2
 8021fae:	18e3      	adds	r3, r4, r3
 8021fb0:	9303      	str	r3, [sp, #12]
 8021fb2:	0003      	movs	r3, r0
 8021fb4:	60c6      	str	r6, [r0, #12]
 8021fb6:	468c      	mov	ip, r1
 8021fb8:	2000      	movs	r0, #0
 8021fba:	3314      	adds	r3, #20
 8021fbc:	9304      	str	r3, [sp, #16]
 8021fbe:	9305      	str	r3, [sp, #20]
 8021fc0:	4663      	mov	r3, ip
 8021fc2:	cb20      	ldmia	r3!, {r5}
 8021fc4:	b2a9      	uxth	r1, r5
 8021fc6:	000e      	movs	r6, r1
 8021fc8:	469c      	mov	ip, r3
 8021fca:	cc08      	ldmia	r4!, {r3}
 8021fcc:	0c2d      	lsrs	r5, r5, #16
 8021fce:	b299      	uxth	r1, r3
 8021fd0:	1a71      	subs	r1, r6, r1
 8021fd2:	1809      	adds	r1, r1, r0
 8021fd4:	0c1b      	lsrs	r3, r3, #16
 8021fd6:	1408      	asrs	r0, r1, #16
 8021fd8:	1aeb      	subs	r3, r5, r3
 8021fda:	181b      	adds	r3, r3, r0
 8021fdc:	1418      	asrs	r0, r3, #16
 8021fde:	b289      	uxth	r1, r1
 8021fe0:	041b      	lsls	r3, r3, #16
 8021fe2:	4319      	orrs	r1, r3
 8021fe4:	9b05      	ldr	r3, [sp, #20]
 8021fe6:	c302      	stmia	r3!, {r1}
 8021fe8:	9305      	str	r3, [sp, #20]
 8021fea:	9b03      	ldr	r3, [sp, #12]
 8021fec:	42a3      	cmp	r3, r4
 8021fee:	d8e7      	bhi.n	8021fc0 <__mdiff+0x84>
 8021ff0:	0039      	movs	r1, r7
 8021ff2:	9c03      	ldr	r4, [sp, #12]
 8021ff4:	3115      	adds	r1, #21
 8021ff6:	2304      	movs	r3, #4
 8021ff8:	428c      	cmp	r4, r1
 8021ffa:	d304      	bcc.n	8022006 <__mdiff+0xca>
 8021ffc:	1be3      	subs	r3, r4, r7
 8021ffe:	3b15      	subs	r3, #21
 8022000:	089b      	lsrs	r3, r3, #2
 8022002:	3301      	adds	r3, #1
 8022004:	009b      	lsls	r3, r3, #2
 8022006:	9901      	ldr	r1, [sp, #4]
 8022008:	18cd      	adds	r5, r1, r3
 802200a:	9904      	ldr	r1, [sp, #16]
 802200c:	002e      	movs	r6, r5
 802200e:	18cb      	adds	r3, r1, r3
 8022010:	001f      	movs	r7, r3
 8022012:	9902      	ldr	r1, [sp, #8]
 8022014:	428e      	cmp	r6, r1
 8022016:	d311      	bcc.n	802203c <__mdiff+0x100>
 8022018:	9c02      	ldr	r4, [sp, #8]
 802201a:	1ee9      	subs	r1, r5, #3
 802201c:	2000      	movs	r0, #0
 802201e:	428c      	cmp	r4, r1
 8022020:	d304      	bcc.n	802202c <__mdiff+0xf0>
 8022022:	0021      	movs	r1, r4
 8022024:	3103      	adds	r1, #3
 8022026:	1b49      	subs	r1, r1, r5
 8022028:	0889      	lsrs	r1, r1, #2
 802202a:	0088      	lsls	r0, r1, #2
 802202c:	181b      	adds	r3, r3, r0
 802202e:	3b04      	subs	r3, #4
 8022030:	6819      	ldr	r1, [r3, #0]
 8022032:	2900      	cmp	r1, #0
 8022034:	d010      	beq.n	8022058 <__mdiff+0x11c>
 8022036:	9b00      	ldr	r3, [sp, #0]
 8022038:	6113      	str	r3, [r2, #16]
 802203a:	e798      	b.n	8021f6e <__mdiff+0x32>
 802203c:	4684      	mov	ip, r0
 802203e:	ce02      	ldmia	r6!, {r1}
 8022040:	b288      	uxth	r0, r1
 8022042:	4460      	add	r0, ip
 8022044:	1400      	asrs	r0, r0, #16
 8022046:	0c0c      	lsrs	r4, r1, #16
 8022048:	1904      	adds	r4, r0, r4
 802204a:	4461      	add	r1, ip
 802204c:	1420      	asrs	r0, r4, #16
 802204e:	b289      	uxth	r1, r1
 8022050:	0424      	lsls	r4, r4, #16
 8022052:	4321      	orrs	r1, r4
 8022054:	c702      	stmia	r7!, {r1}
 8022056:	e7dc      	b.n	8022012 <__mdiff+0xd6>
 8022058:	9900      	ldr	r1, [sp, #0]
 802205a:	3901      	subs	r1, #1
 802205c:	9100      	str	r1, [sp, #0]
 802205e:	e7e6      	b.n	802202e <__mdiff+0xf2>
 8022060:	08025d89 	.word	0x08025d89
 8022064:	08025dfa 	.word	0x08025dfa
 8022068:	00000237 	.word	0x00000237
 802206c:	00000245 	.word	0x00000245

08022070 <__ulp>:
 8022070:	b510      	push	{r4, lr}
 8022072:	2400      	movs	r4, #0
 8022074:	4b0c      	ldr	r3, [pc, #48]	@ (80220a8 <__ulp+0x38>)
 8022076:	4a0d      	ldr	r2, [pc, #52]	@ (80220ac <__ulp+0x3c>)
 8022078:	400b      	ands	r3, r1
 802207a:	189b      	adds	r3, r3, r2
 802207c:	42a3      	cmp	r3, r4
 802207e:	dc06      	bgt.n	802208e <__ulp+0x1e>
 8022080:	425b      	negs	r3, r3
 8022082:	151a      	asrs	r2, r3, #20
 8022084:	2a13      	cmp	r2, #19
 8022086:	dc05      	bgt.n	8022094 <__ulp+0x24>
 8022088:	2380      	movs	r3, #128	@ 0x80
 802208a:	031b      	lsls	r3, r3, #12
 802208c:	4113      	asrs	r3, r2
 802208e:	0019      	movs	r1, r3
 8022090:	0020      	movs	r0, r4
 8022092:	bd10      	pop	{r4, pc}
 8022094:	3a14      	subs	r2, #20
 8022096:	2401      	movs	r4, #1
 8022098:	2a1e      	cmp	r2, #30
 802209a:	dc02      	bgt.n	80220a2 <__ulp+0x32>
 802209c:	2480      	movs	r4, #128	@ 0x80
 802209e:	0624      	lsls	r4, r4, #24
 80220a0:	40d4      	lsrs	r4, r2
 80220a2:	2300      	movs	r3, #0
 80220a4:	e7f3      	b.n	802208e <__ulp+0x1e>
 80220a6:	46c0      	nop			@ (mov r8, r8)
 80220a8:	7ff00000 	.word	0x7ff00000
 80220ac:	fcc00000 	.word	0xfcc00000

080220b0 <__b2d>:
 80220b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80220b2:	0006      	movs	r6, r0
 80220b4:	6903      	ldr	r3, [r0, #16]
 80220b6:	3614      	adds	r6, #20
 80220b8:	009b      	lsls	r3, r3, #2
 80220ba:	18f3      	adds	r3, r6, r3
 80220bc:	1f1d      	subs	r5, r3, #4
 80220be:	682c      	ldr	r4, [r5, #0]
 80220c0:	000f      	movs	r7, r1
 80220c2:	0020      	movs	r0, r4
 80220c4:	9301      	str	r3, [sp, #4]
 80220c6:	f7ff fd3b 	bl	8021b40 <__hi0bits>
 80220ca:	2220      	movs	r2, #32
 80220cc:	1a12      	subs	r2, r2, r0
 80220ce:	603a      	str	r2, [r7, #0]
 80220d0:	0003      	movs	r3, r0
 80220d2:	4a1c      	ldr	r2, [pc, #112]	@ (8022144 <__b2d+0x94>)
 80220d4:	280a      	cmp	r0, #10
 80220d6:	dc15      	bgt.n	8022104 <__b2d+0x54>
 80220d8:	210b      	movs	r1, #11
 80220da:	0027      	movs	r7, r4
 80220dc:	1a09      	subs	r1, r1, r0
 80220de:	40cf      	lsrs	r7, r1
 80220e0:	433a      	orrs	r2, r7
 80220e2:	468c      	mov	ip, r1
 80220e4:	0011      	movs	r1, r2
 80220e6:	2200      	movs	r2, #0
 80220e8:	42ae      	cmp	r6, r5
 80220ea:	d202      	bcs.n	80220f2 <__b2d+0x42>
 80220ec:	9a01      	ldr	r2, [sp, #4]
 80220ee:	3a08      	subs	r2, #8
 80220f0:	6812      	ldr	r2, [r2, #0]
 80220f2:	3315      	adds	r3, #21
 80220f4:	409c      	lsls	r4, r3
 80220f6:	4663      	mov	r3, ip
 80220f8:	0027      	movs	r7, r4
 80220fa:	40da      	lsrs	r2, r3
 80220fc:	4317      	orrs	r7, r2
 80220fe:	0038      	movs	r0, r7
 8022100:	b003      	add	sp, #12
 8022102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022104:	2700      	movs	r7, #0
 8022106:	42ae      	cmp	r6, r5
 8022108:	d202      	bcs.n	8022110 <__b2d+0x60>
 802210a:	9d01      	ldr	r5, [sp, #4]
 802210c:	3d08      	subs	r5, #8
 802210e:	682f      	ldr	r7, [r5, #0]
 8022110:	210b      	movs	r1, #11
 8022112:	4249      	negs	r1, r1
 8022114:	468c      	mov	ip, r1
 8022116:	449c      	add	ip, r3
 8022118:	2b0b      	cmp	r3, #11
 802211a:	d010      	beq.n	802213e <__b2d+0x8e>
 802211c:	4661      	mov	r1, ip
 802211e:	2320      	movs	r3, #32
 8022120:	408c      	lsls	r4, r1
 8022122:	1a5b      	subs	r3, r3, r1
 8022124:	0039      	movs	r1, r7
 8022126:	40d9      	lsrs	r1, r3
 8022128:	430c      	orrs	r4, r1
 802212a:	4322      	orrs	r2, r4
 802212c:	0011      	movs	r1, r2
 802212e:	2200      	movs	r2, #0
 8022130:	42b5      	cmp	r5, r6
 8022132:	d901      	bls.n	8022138 <__b2d+0x88>
 8022134:	3d04      	subs	r5, #4
 8022136:	682a      	ldr	r2, [r5, #0]
 8022138:	4664      	mov	r4, ip
 802213a:	40a7      	lsls	r7, r4
 802213c:	e7dd      	b.n	80220fa <__b2d+0x4a>
 802213e:	4322      	orrs	r2, r4
 8022140:	0011      	movs	r1, r2
 8022142:	e7dc      	b.n	80220fe <__b2d+0x4e>
 8022144:	3ff00000 	.word	0x3ff00000

08022148 <__d2b>:
 8022148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802214a:	2101      	movs	r1, #1
 802214c:	0016      	movs	r6, r2
 802214e:	001f      	movs	r7, r3
 8022150:	f7ff fbfe 	bl	8021950 <_Balloc>
 8022154:	1e04      	subs	r4, r0, #0
 8022156:	d105      	bne.n	8022164 <__d2b+0x1c>
 8022158:	0022      	movs	r2, r4
 802215a:	4b25      	ldr	r3, [pc, #148]	@ (80221f0 <__d2b+0xa8>)
 802215c:	4825      	ldr	r0, [pc, #148]	@ (80221f4 <__d2b+0xac>)
 802215e:	4926      	ldr	r1, [pc, #152]	@ (80221f8 <__d2b+0xb0>)
 8022160:	f000 fcd6 	bl	8022b10 <__assert_func>
 8022164:	033b      	lsls	r3, r7, #12
 8022166:	007d      	lsls	r5, r7, #1
 8022168:	0b1b      	lsrs	r3, r3, #12
 802216a:	0d6d      	lsrs	r5, r5, #21
 802216c:	d002      	beq.n	8022174 <__d2b+0x2c>
 802216e:	2280      	movs	r2, #128	@ 0x80
 8022170:	0352      	lsls	r2, r2, #13
 8022172:	4313      	orrs	r3, r2
 8022174:	9301      	str	r3, [sp, #4]
 8022176:	2e00      	cmp	r6, #0
 8022178:	d025      	beq.n	80221c6 <__d2b+0x7e>
 802217a:	4668      	mov	r0, sp
 802217c:	9600      	str	r6, [sp, #0]
 802217e:	f7ff fd00 	bl	8021b82 <__lo0bits>
 8022182:	9b01      	ldr	r3, [sp, #4]
 8022184:	9900      	ldr	r1, [sp, #0]
 8022186:	2800      	cmp	r0, #0
 8022188:	d01b      	beq.n	80221c2 <__d2b+0x7a>
 802218a:	2220      	movs	r2, #32
 802218c:	001e      	movs	r6, r3
 802218e:	1a12      	subs	r2, r2, r0
 8022190:	4096      	lsls	r6, r2
 8022192:	0032      	movs	r2, r6
 8022194:	40c3      	lsrs	r3, r0
 8022196:	430a      	orrs	r2, r1
 8022198:	6162      	str	r2, [r4, #20]
 802219a:	9301      	str	r3, [sp, #4]
 802219c:	9e01      	ldr	r6, [sp, #4]
 802219e:	61a6      	str	r6, [r4, #24]
 80221a0:	1e73      	subs	r3, r6, #1
 80221a2:	419e      	sbcs	r6, r3
 80221a4:	3601      	adds	r6, #1
 80221a6:	6126      	str	r6, [r4, #16]
 80221a8:	2d00      	cmp	r5, #0
 80221aa:	d014      	beq.n	80221d6 <__d2b+0x8e>
 80221ac:	2635      	movs	r6, #53	@ 0x35
 80221ae:	4b13      	ldr	r3, [pc, #76]	@ (80221fc <__d2b+0xb4>)
 80221b0:	18ed      	adds	r5, r5, r3
 80221b2:	9b08      	ldr	r3, [sp, #32]
 80221b4:	182d      	adds	r5, r5, r0
 80221b6:	601d      	str	r5, [r3, #0]
 80221b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221ba:	1a36      	subs	r6, r6, r0
 80221bc:	601e      	str	r6, [r3, #0]
 80221be:	0020      	movs	r0, r4
 80221c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80221c2:	6161      	str	r1, [r4, #20]
 80221c4:	e7ea      	b.n	802219c <__d2b+0x54>
 80221c6:	a801      	add	r0, sp, #4
 80221c8:	f7ff fcdb 	bl	8021b82 <__lo0bits>
 80221cc:	9b01      	ldr	r3, [sp, #4]
 80221ce:	2601      	movs	r6, #1
 80221d0:	6163      	str	r3, [r4, #20]
 80221d2:	3020      	adds	r0, #32
 80221d4:	e7e7      	b.n	80221a6 <__d2b+0x5e>
 80221d6:	4b0a      	ldr	r3, [pc, #40]	@ (8022200 <__d2b+0xb8>)
 80221d8:	18c0      	adds	r0, r0, r3
 80221da:	9b08      	ldr	r3, [sp, #32]
 80221dc:	6018      	str	r0, [r3, #0]
 80221de:	4b09      	ldr	r3, [pc, #36]	@ (8022204 <__d2b+0xbc>)
 80221e0:	18f3      	adds	r3, r6, r3
 80221e2:	009b      	lsls	r3, r3, #2
 80221e4:	18e3      	adds	r3, r4, r3
 80221e6:	6958      	ldr	r0, [r3, #20]
 80221e8:	f7ff fcaa 	bl	8021b40 <__hi0bits>
 80221ec:	0176      	lsls	r6, r6, #5
 80221ee:	e7e3      	b.n	80221b8 <__d2b+0x70>
 80221f0:	08025d89 	.word	0x08025d89
 80221f4:	08025dfa 	.word	0x08025dfa
 80221f8:	0000030f 	.word	0x0000030f
 80221fc:	fffffbcd 	.word	0xfffffbcd
 8022200:	fffffbce 	.word	0xfffffbce
 8022204:	3fffffff 	.word	0x3fffffff

08022208 <__ratio>:
 8022208:	b5f0      	push	{r4, r5, r6, r7, lr}
 802220a:	b087      	sub	sp, #28
 802220c:	000f      	movs	r7, r1
 802220e:	a904      	add	r1, sp, #16
 8022210:	0006      	movs	r6, r0
 8022212:	f7ff ff4d 	bl	80220b0 <__b2d>
 8022216:	9000      	str	r0, [sp, #0]
 8022218:	9101      	str	r1, [sp, #4]
 802221a:	9b00      	ldr	r3, [sp, #0]
 802221c:	9c01      	ldr	r4, [sp, #4]
 802221e:	0038      	movs	r0, r7
 8022220:	a905      	add	r1, sp, #20
 8022222:	9302      	str	r3, [sp, #8]
 8022224:	9403      	str	r4, [sp, #12]
 8022226:	f7ff ff43 	bl	80220b0 <__b2d>
 802222a:	000d      	movs	r5, r1
 802222c:	0002      	movs	r2, r0
 802222e:	000b      	movs	r3, r1
 8022230:	6930      	ldr	r0, [r6, #16]
 8022232:	6939      	ldr	r1, [r7, #16]
 8022234:	9e04      	ldr	r6, [sp, #16]
 8022236:	1a40      	subs	r0, r0, r1
 8022238:	9905      	ldr	r1, [sp, #20]
 802223a:	0140      	lsls	r0, r0, #5
 802223c:	1a71      	subs	r1, r6, r1
 802223e:	1841      	adds	r1, r0, r1
 8022240:	0508      	lsls	r0, r1, #20
 8022242:	2900      	cmp	r1, #0
 8022244:	dd08      	ble.n	8022258 <__ratio+0x50>
 8022246:	9901      	ldr	r1, [sp, #4]
 8022248:	1841      	adds	r1, r0, r1
 802224a:	9103      	str	r1, [sp, #12]
 802224c:	9802      	ldr	r0, [sp, #8]
 802224e:	9903      	ldr	r1, [sp, #12]
 8022250:	f7df fdb0 	bl	8001db4 <__aeabi_ddiv>
 8022254:	b007      	add	sp, #28
 8022256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022258:	1a2b      	subs	r3, r5, r0
 802225a:	e7f7      	b.n	802224c <__ratio+0x44>

0802225c <__copybits>:
 802225c:	b570      	push	{r4, r5, r6, lr}
 802225e:	0014      	movs	r4, r2
 8022260:	0005      	movs	r5, r0
 8022262:	3901      	subs	r1, #1
 8022264:	6913      	ldr	r3, [r2, #16]
 8022266:	1149      	asrs	r1, r1, #5
 8022268:	3101      	adds	r1, #1
 802226a:	0089      	lsls	r1, r1, #2
 802226c:	3414      	adds	r4, #20
 802226e:	009b      	lsls	r3, r3, #2
 8022270:	1841      	adds	r1, r0, r1
 8022272:	18e3      	adds	r3, r4, r3
 8022274:	42a3      	cmp	r3, r4
 8022276:	d80d      	bhi.n	8022294 <__copybits+0x38>
 8022278:	0014      	movs	r4, r2
 802227a:	3411      	adds	r4, #17
 802227c:	2500      	movs	r5, #0
 802227e:	429c      	cmp	r4, r3
 8022280:	d803      	bhi.n	802228a <__copybits+0x2e>
 8022282:	1a9b      	subs	r3, r3, r2
 8022284:	3b11      	subs	r3, #17
 8022286:	089b      	lsrs	r3, r3, #2
 8022288:	009d      	lsls	r5, r3, #2
 802228a:	2300      	movs	r3, #0
 802228c:	1940      	adds	r0, r0, r5
 802228e:	4281      	cmp	r1, r0
 8022290:	d803      	bhi.n	802229a <__copybits+0x3e>
 8022292:	bd70      	pop	{r4, r5, r6, pc}
 8022294:	cc40      	ldmia	r4!, {r6}
 8022296:	c540      	stmia	r5!, {r6}
 8022298:	e7ec      	b.n	8022274 <__copybits+0x18>
 802229a:	c008      	stmia	r0!, {r3}
 802229c:	e7f7      	b.n	802228e <__copybits+0x32>

0802229e <__any_on>:
 802229e:	0002      	movs	r2, r0
 80222a0:	6900      	ldr	r0, [r0, #16]
 80222a2:	b510      	push	{r4, lr}
 80222a4:	3214      	adds	r2, #20
 80222a6:	114b      	asrs	r3, r1, #5
 80222a8:	4298      	cmp	r0, r3
 80222aa:	db13      	blt.n	80222d4 <__any_on+0x36>
 80222ac:	dd0c      	ble.n	80222c8 <__any_on+0x2a>
 80222ae:	241f      	movs	r4, #31
 80222b0:	0008      	movs	r0, r1
 80222b2:	4020      	ands	r0, r4
 80222b4:	4221      	tst	r1, r4
 80222b6:	d007      	beq.n	80222c8 <__any_on+0x2a>
 80222b8:	0099      	lsls	r1, r3, #2
 80222ba:	588c      	ldr	r4, [r1, r2]
 80222bc:	0021      	movs	r1, r4
 80222be:	40c1      	lsrs	r1, r0
 80222c0:	4081      	lsls	r1, r0
 80222c2:	2001      	movs	r0, #1
 80222c4:	428c      	cmp	r4, r1
 80222c6:	d104      	bne.n	80222d2 <__any_on+0x34>
 80222c8:	009b      	lsls	r3, r3, #2
 80222ca:	18d3      	adds	r3, r2, r3
 80222cc:	4293      	cmp	r3, r2
 80222ce:	d803      	bhi.n	80222d8 <__any_on+0x3a>
 80222d0:	2000      	movs	r0, #0
 80222d2:	bd10      	pop	{r4, pc}
 80222d4:	0003      	movs	r3, r0
 80222d6:	e7f7      	b.n	80222c8 <__any_on+0x2a>
 80222d8:	3b04      	subs	r3, #4
 80222da:	6819      	ldr	r1, [r3, #0]
 80222dc:	2900      	cmp	r1, #0
 80222de:	d0f5      	beq.n	80222cc <__any_on+0x2e>
 80222e0:	2001      	movs	r0, #1
 80222e2:	e7f6      	b.n	80222d2 <__any_on+0x34>

080222e4 <__ascii_wctomb>:
 80222e4:	0003      	movs	r3, r0
 80222e6:	1e08      	subs	r0, r1, #0
 80222e8:	d005      	beq.n	80222f6 <__ascii_wctomb+0x12>
 80222ea:	2aff      	cmp	r2, #255	@ 0xff
 80222ec:	d904      	bls.n	80222f8 <__ascii_wctomb+0x14>
 80222ee:	228a      	movs	r2, #138	@ 0x8a
 80222f0:	2001      	movs	r0, #1
 80222f2:	601a      	str	r2, [r3, #0]
 80222f4:	4240      	negs	r0, r0
 80222f6:	4770      	bx	lr
 80222f8:	2001      	movs	r0, #1
 80222fa:	700a      	strb	r2, [r1, #0]
 80222fc:	e7fb      	b.n	80222f6 <__ascii_wctomb+0x12>
	...

08022300 <__ssputs_r>:
 8022300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022302:	688e      	ldr	r6, [r1, #8]
 8022304:	b085      	sub	sp, #20
 8022306:	001f      	movs	r7, r3
 8022308:	000c      	movs	r4, r1
 802230a:	680b      	ldr	r3, [r1, #0]
 802230c:	9002      	str	r0, [sp, #8]
 802230e:	9203      	str	r2, [sp, #12]
 8022310:	42be      	cmp	r6, r7
 8022312:	d830      	bhi.n	8022376 <__ssputs_r+0x76>
 8022314:	210c      	movs	r1, #12
 8022316:	5e62      	ldrsh	r2, [r4, r1]
 8022318:	2190      	movs	r1, #144	@ 0x90
 802231a:	00c9      	lsls	r1, r1, #3
 802231c:	420a      	tst	r2, r1
 802231e:	d028      	beq.n	8022372 <__ssputs_r+0x72>
 8022320:	2003      	movs	r0, #3
 8022322:	6921      	ldr	r1, [r4, #16]
 8022324:	1a5b      	subs	r3, r3, r1
 8022326:	9301      	str	r3, [sp, #4]
 8022328:	6963      	ldr	r3, [r4, #20]
 802232a:	4343      	muls	r3, r0
 802232c:	9801      	ldr	r0, [sp, #4]
 802232e:	0fdd      	lsrs	r5, r3, #31
 8022330:	18ed      	adds	r5, r5, r3
 8022332:	1c7b      	adds	r3, r7, #1
 8022334:	181b      	adds	r3, r3, r0
 8022336:	106d      	asrs	r5, r5, #1
 8022338:	42ab      	cmp	r3, r5
 802233a:	d900      	bls.n	802233e <__ssputs_r+0x3e>
 802233c:	001d      	movs	r5, r3
 802233e:	0552      	lsls	r2, r2, #21
 8022340:	d528      	bpl.n	8022394 <__ssputs_r+0x94>
 8022342:	0029      	movs	r1, r5
 8022344:	9802      	ldr	r0, [sp, #8]
 8022346:	f7ff fa61 	bl	802180c <_malloc_r>
 802234a:	1e06      	subs	r6, r0, #0
 802234c:	d02c      	beq.n	80223a8 <__ssputs_r+0xa8>
 802234e:	9a01      	ldr	r2, [sp, #4]
 8022350:	6921      	ldr	r1, [r4, #16]
 8022352:	f7fd fff9 	bl	8020348 <memcpy>
 8022356:	89a2      	ldrh	r2, [r4, #12]
 8022358:	4b18      	ldr	r3, [pc, #96]	@ (80223bc <__ssputs_r+0xbc>)
 802235a:	401a      	ands	r2, r3
 802235c:	2380      	movs	r3, #128	@ 0x80
 802235e:	4313      	orrs	r3, r2
 8022360:	81a3      	strh	r3, [r4, #12]
 8022362:	9b01      	ldr	r3, [sp, #4]
 8022364:	6126      	str	r6, [r4, #16]
 8022366:	18f6      	adds	r6, r6, r3
 8022368:	6026      	str	r6, [r4, #0]
 802236a:	003e      	movs	r6, r7
 802236c:	6165      	str	r5, [r4, #20]
 802236e:	1aed      	subs	r5, r5, r3
 8022370:	60a5      	str	r5, [r4, #8]
 8022372:	42be      	cmp	r6, r7
 8022374:	d900      	bls.n	8022378 <__ssputs_r+0x78>
 8022376:	003e      	movs	r6, r7
 8022378:	0032      	movs	r2, r6
 802237a:	9903      	ldr	r1, [sp, #12]
 802237c:	6820      	ldr	r0, [r4, #0]
 802237e:	f000 fb7e 	bl	8022a7e <memmove>
 8022382:	2000      	movs	r0, #0
 8022384:	68a3      	ldr	r3, [r4, #8]
 8022386:	1b9b      	subs	r3, r3, r6
 8022388:	60a3      	str	r3, [r4, #8]
 802238a:	6823      	ldr	r3, [r4, #0]
 802238c:	199b      	adds	r3, r3, r6
 802238e:	6023      	str	r3, [r4, #0]
 8022390:	b005      	add	sp, #20
 8022392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022394:	002a      	movs	r2, r5
 8022396:	9802      	ldr	r0, [sp, #8]
 8022398:	f000 fc05 	bl	8022ba6 <_realloc_r>
 802239c:	1e06      	subs	r6, r0, #0
 802239e:	d1e0      	bne.n	8022362 <__ssputs_r+0x62>
 80223a0:	6921      	ldr	r1, [r4, #16]
 80223a2:	9802      	ldr	r0, [sp, #8]
 80223a4:	f7fe fe62 	bl	802106c <_free_r>
 80223a8:	230c      	movs	r3, #12
 80223aa:	2001      	movs	r0, #1
 80223ac:	9a02      	ldr	r2, [sp, #8]
 80223ae:	4240      	negs	r0, r0
 80223b0:	6013      	str	r3, [r2, #0]
 80223b2:	89a2      	ldrh	r2, [r4, #12]
 80223b4:	3334      	adds	r3, #52	@ 0x34
 80223b6:	4313      	orrs	r3, r2
 80223b8:	81a3      	strh	r3, [r4, #12]
 80223ba:	e7e9      	b.n	8022390 <__ssputs_r+0x90>
 80223bc:	fffffb7f 	.word	0xfffffb7f

080223c0 <_svfiprintf_r>:
 80223c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223c2:	b0a1      	sub	sp, #132	@ 0x84
 80223c4:	9003      	str	r0, [sp, #12]
 80223c6:	001d      	movs	r5, r3
 80223c8:	898b      	ldrh	r3, [r1, #12]
 80223ca:	000f      	movs	r7, r1
 80223cc:	0016      	movs	r6, r2
 80223ce:	061b      	lsls	r3, r3, #24
 80223d0:	d511      	bpl.n	80223f6 <_svfiprintf_r+0x36>
 80223d2:	690b      	ldr	r3, [r1, #16]
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d10e      	bne.n	80223f6 <_svfiprintf_r+0x36>
 80223d8:	2140      	movs	r1, #64	@ 0x40
 80223da:	f7ff fa17 	bl	802180c <_malloc_r>
 80223de:	6038      	str	r0, [r7, #0]
 80223e0:	6138      	str	r0, [r7, #16]
 80223e2:	2800      	cmp	r0, #0
 80223e4:	d105      	bne.n	80223f2 <_svfiprintf_r+0x32>
 80223e6:	230c      	movs	r3, #12
 80223e8:	9a03      	ldr	r2, [sp, #12]
 80223ea:	6013      	str	r3, [r2, #0]
 80223ec:	2001      	movs	r0, #1
 80223ee:	4240      	negs	r0, r0
 80223f0:	e0cf      	b.n	8022592 <_svfiprintf_r+0x1d2>
 80223f2:	2340      	movs	r3, #64	@ 0x40
 80223f4:	617b      	str	r3, [r7, #20]
 80223f6:	2300      	movs	r3, #0
 80223f8:	ac08      	add	r4, sp, #32
 80223fa:	6163      	str	r3, [r4, #20]
 80223fc:	3320      	adds	r3, #32
 80223fe:	7663      	strb	r3, [r4, #25]
 8022400:	3310      	adds	r3, #16
 8022402:	76a3      	strb	r3, [r4, #26]
 8022404:	9507      	str	r5, [sp, #28]
 8022406:	0035      	movs	r5, r6
 8022408:	782b      	ldrb	r3, [r5, #0]
 802240a:	2b00      	cmp	r3, #0
 802240c:	d001      	beq.n	8022412 <_svfiprintf_r+0x52>
 802240e:	2b25      	cmp	r3, #37	@ 0x25
 8022410:	d148      	bne.n	80224a4 <_svfiprintf_r+0xe4>
 8022412:	1bab      	subs	r3, r5, r6
 8022414:	9305      	str	r3, [sp, #20]
 8022416:	42b5      	cmp	r5, r6
 8022418:	d00b      	beq.n	8022432 <_svfiprintf_r+0x72>
 802241a:	0032      	movs	r2, r6
 802241c:	0039      	movs	r1, r7
 802241e:	9803      	ldr	r0, [sp, #12]
 8022420:	f7ff ff6e 	bl	8022300 <__ssputs_r>
 8022424:	3001      	adds	r0, #1
 8022426:	d100      	bne.n	802242a <_svfiprintf_r+0x6a>
 8022428:	e0ae      	b.n	8022588 <_svfiprintf_r+0x1c8>
 802242a:	6963      	ldr	r3, [r4, #20]
 802242c:	9a05      	ldr	r2, [sp, #20]
 802242e:	189b      	adds	r3, r3, r2
 8022430:	6163      	str	r3, [r4, #20]
 8022432:	782b      	ldrb	r3, [r5, #0]
 8022434:	2b00      	cmp	r3, #0
 8022436:	d100      	bne.n	802243a <_svfiprintf_r+0x7a>
 8022438:	e0a6      	b.n	8022588 <_svfiprintf_r+0x1c8>
 802243a:	2201      	movs	r2, #1
 802243c:	2300      	movs	r3, #0
 802243e:	4252      	negs	r2, r2
 8022440:	6062      	str	r2, [r4, #4]
 8022442:	a904      	add	r1, sp, #16
 8022444:	3254      	adds	r2, #84	@ 0x54
 8022446:	1852      	adds	r2, r2, r1
 8022448:	1c6e      	adds	r6, r5, #1
 802244a:	6023      	str	r3, [r4, #0]
 802244c:	60e3      	str	r3, [r4, #12]
 802244e:	60a3      	str	r3, [r4, #8]
 8022450:	7013      	strb	r3, [r2, #0]
 8022452:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022454:	4b54      	ldr	r3, [pc, #336]	@ (80225a8 <_svfiprintf_r+0x1e8>)
 8022456:	2205      	movs	r2, #5
 8022458:	0018      	movs	r0, r3
 802245a:	7831      	ldrb	r1, [r6, #0]
 802245c:	9305      	str	r3, [sp, #20]
 802245e:	f7fd ff68 	bl	8020332 <memchr>
 8022462:	1c75      	adds	r5, r6, #1
 8022464:	2800      	cmp	r0, #0
 8022466:	d11f      	bne.n	80224a8 <_svfiprintf_r+0xe8>
 8022468:	6822      	ldr	r2, [r4, #0]
 802246a:	06d3      	lsls	r3, r2, #27
 802246c:	d504      	bpl.n	8022478 <_svfiprintf_r+0xb8>
 802246e:	2353      	movs	r3, #83	@ 0x53
 8022470:	a904      	add	r1, sp, #16
 8022472:	185b      	adds	r3, r3, r1
 8022474:	2120      	movs	r1, #32
 8022476:	7019      	strb	r1, [r3, #0]
 8022478:	0713      	lsls	r3, r2, #28
 802247a:	d504      	bpl.n	8022486 <_svfiprintf_r+0xc6>
 802247c:	2353      	movs	r3, #83	@ 0x53
 802247e:	a904      	add	r1, sp, #16
 8022480:	185b      	adds	r3, r3, r1
 8022482:	212b      	movs	r1, #43	@ 0x2b
 8022484:	7019      	strb	r1, [r3, #0]
 8022486:	7833      	ldrb	r3, [r6, #0]
 8022488:	2b2a      	cmp	r3, #42	@ 0x2a
 802248a:	d016      	beq.n	80224ba <_svfiprintf_r+0xfa>
 802248c:	0035      	movs	r5, r6
 802248e:	2100      	movs	r1, #0
 8022490:	200a      	movs	r0, #10
 8022492:	68e3      	ldr	r3, [r4, #12]
 8022494:	782a      	ldrb	r2, [r5, #0]
 8022496:	1c6e      	adds	r6, r5, #1
 8022498:	3a30      	subs	r2, #48	@ 0x30
 802249a:	2a09      	cmp	r2, #9
 802249c:	d950      	bls.n	8022540 <_svfiprintf_r+0x180>
 802249e:	2900      	cmp	r1, #0
 80224a0:	d111      	bne.n	80224c6 <_svfiprintf_r+0x106>
 80224a2:	e017      	b.n	80224d4 <_svfiprintf_r+0x114>
 80224a4:	3501      	adds	r5, #1
 80224a6:	e7af      	b.n	8022408 <_svfiprintf_r+0x48>
 80224a8:	9b05      	ldr	r3, [sp, #20]
 80224aa:	6822      	ldr	r2, [r4, #0]
 80224ac:	1ac0      	subs	r0, r0, r3
 80224ae:	2301      	movs	r3, #1
 80224b0:	4083      	lsls	r3, r0
 80224b2:	4313      	orrs	r3, r2
 80224b4:	002e      	movs	r6, r5
 80224b6:	6023      	str	r3, [r4, #0]
 80224b8:	e7cc      	b.n	8022454 <_svfiprintf_r+0x94>
 80224ba:	9b07      	ldr	r3, [sp, #28]
 80224bc:	1d19      	adds	r1, r3, #4
 80224be:	681b      	ldr	r3, [r3, #0]
 80224c0:	9107      	str	r1, [sp, #28]
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	db01      	blt.n	80224ca <_svfiprintf_r+0x10a>
 80224c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80224c8:	e004      	b.n	80224d4 <_svfiprintf_r+0x114>
 80224ca:	425b      	negs	r3, r3
 80224cc:	60e3      	str	r3, [r4, #12]
 80224ce:	2302      	movs	r3, #2
 80224d0:	4313      	orrs	r3, r2
 80224d2:	6023      	str	r3, [r4, #0]
 80224d4:	782b      	ldrb	r3, [r5, #0]
 80224d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80224d8:	d10c      	bne.n	80224f4 <_svfiprintf_r+0x134>
 80224da:	786b      	ldrb	r3, [r5, #1]
 80224dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80224de:	d134      	bne.n	802254a <_svfiprintf_r+0x18a>
 80224e0:	9b07      	ldr	r3, [sp, #28]
 80224e2:	3502      	adds	r5, #2
 80224e4:	1d1a      	adds	r2, r3, #4
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	9207      	str	r2, [sp, #28]
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	da01      	bge.n	80224f2 <_svfiprintf_r+0x132>
 80224ee:	2301      	movs	r3, #1
 80224f0:	425b      	negs	r3, r3
 80224f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80224f4:	4e2d      	ldr	r6, [pc, #180]	@ (80225ac <_svfiprintf_r+0x1ec>)
 80224f6:	2203      	movs	r2, #3
 80224f8:	0030      	movs	r0, r6
 80224fa:	7829      	ldrb	r1, [r5, #0]
 80224fc:	f7fd ff19 	bl	8020332 <memchr>
 8022500:	2800      	cmp	r0, #0
 8022502:	d006      	beq.n	8022512 <_svfiprintf_r+0x152>
 8022504:	2340      	movs	r3, #64	@ 0x40
 8022506:	1b80      	subs	r0, r0, r6
 8022508:	4083      	lsls	r3, r0
 802250a:	6822      	ldr	r2, [r4, #0]
 802250c:	3501      	adds	r5, #1
 802250e:	4313      	orrs	r3, r2
 8022510:	6023      	str	r3, [r4, #0]
 8022512:	7829      	ldrb	r1, [r5, #0]
 8022514:	2206      	movs	r2, #6
 8022516:	4826      	ldr	r0, [pc, #152]	@ (80225b0 <_svfiprintf_r+0x1f0>)
 8022518:	1c6e      	adds	r6, r5, #1
 802251a:	7621      	strb	r1, [r4, #24]
 802251c:	f7fd ff09 	bl	8020332 <memchr>
 8022520:	2800      	cmp	r0, #0
 8022522:	d038      	beq.n	8022596 <_svfiprintf_r+0x1d6>
 8022524:	4b23      	ldr	r3, [pc, #140]	@ (80225b4 <_svfiprintf_r+0x1f4>)
 8022526:	2b00      	cmp	r3, #0
 8022528:	d122      	bne.n	8022570 <_svfiprintf_r+0x1b0>
 802252a:	2207      	movs	r2, #7
 802252c:	9b07      	ldr	r3, [sp, #28]
 802252e:	3307      	adds	r3, #7
 8022530:	4393      	bics	r3, r2
 8022532:	3308      	adds	r3, #8
 8022534:	9307      	str	r3, [sp, #28]
 8022536:	6963      	ldr	r3, [r4, #20]
 8022538:	9a04      	ldr	r2, [sp, #16]
 802253a:	189b      	adds	r3, r3, r2
 802253c:	6163      	str	r3, [r4, #20]
 802253e:	e762      	b.n	8022406 <_svfiprintf_r+0x46>
 8022540:	4343      	muls	r3, r0
 8022542:	0035      	movs	r5, r6
 8022544:	2101      	movs	r1, #1
 8022546:	189b      	adds	r3, r3, r2
 8022548:	e7a4      	b.n	8022494 <_svfiprintf_r+0xd4>
 802254a:	2300      	movs	r3, #0
 802254c:	200a      	movs	r0, #10
 802254e:	0019      	movs	r1, r3
 8022550:	3501      	adds	r5, #1
 8022552:	6063      	str	r3, [r4, #4]
 8022554:	782a      	ldrb	r2, [r5, #0]
 8022556:	1c6e      	adds	r6, r5, #1
 8022558:	3a30      	subs	r2, #48	@ 0x30
 802255a:	2a09      	cmp	r2, #9
 802255c:	d903      	bls.n	8022566 <_svfiprintf_r+0x1a6>
 802255e:	2b00      	cmp	r3, #0
 8022560:	d0c8      	beq.n	80224f4 <_svfiprintf_r+0x134>
 8022562:	9109      	str	r1, [sp, #36]	@ 0x24
 8022564:	e7c6      	b.n	80224f4 <_svfiprintf_r+0x134>
 8022566:	4341      	muls	r1, r0
 8022568:	0035      	movs	r5, r6
 802256a:	2301      	movs	r3, #1
 802256c:	1889      	adds	r1, r1, r2
 802256e:	e7f1      	b.n	8022554 <_svfiprintf_r+0x194>
 8022570:	aa07      	add	r2, sp, #28
 8022572:	9200      	str	r2, [sp, #0]
 8022574:	0021      	movs	r1, r4
 8022576:	003a      	movs	r2, r7
 8022578:	4b0f      	ldr	r3, [pc, #60]	@ (80225b8 <_svfiprintf_r+0x1f8>)
 802257a:	9803      	ldr	r0, [sp, #12]
 802257c:	f7fc ffd4 	bl	801f528 <_printf_float>
 8022580:	9004      	str	r0, [sp, #16]
 8022582:	9b04      	ldr	r3, [sp, #16]
 8022584:	3301      	adds	r3, #1
 8022586:	d1d6      	bne.n	8022536 <_svfiprintf_r+0x176>
 8022588:	89bb      	ldrh	r3, [r7, #12]
 802258a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802258c:	065b      	lsls	r3, r3, #25
 802258e:	d500      	bpl.n	8022592 <_svfiprintf_r+0x1d2>
 8022590:	e72c      	b.n	80223ec <_svfiprintf_r+0x2c>
 8022592:	b021      	add	sp, #132	@ 0x84
 8022594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022596:	aa07      	add	r2, sp, #28
 8022598:	9200      	str	r2, [sp, #0]
 802259a:	0021      	movs	r1, r4
 802259c:	003a      	movs	r2, r7
 802259e:	4b06      	ldr	r3, [pc, #24]	@ (80225b8 <_svfiprintf_r+0x1f8>)
 80225a0:	9803      	ldr	r0, [sp, #12]
 80225a2:	f7fd fa6f 	bl	801fa84 <_printf_i>
 80225a6:	e7eb      	b.n	8022580 <_svfiprintf_r+0x1c0>
 80225a8:	08025f50 	.word	0x08025f50
 80225ac:	08025f56 	.word	0x08025f56
 80225b0:	08025f5a 	.word	0x08025f5a
 80225b4:	0801f529 	.word	0x0801f529
 80225b8:	08022301 	.word	0x08022301

080225bc <__sfputc_r>:
 80225bc:	6893      	ldr	r3, [r2, #8]
 80225be:	b510      	push	{r4, lr}
 80225c0:	3b01      	subs	r3, #1
 80225c2:	6093      	str	r3, [r2, #8]
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	da04      	bge.n	80225d2 <__sfputc_r+0x16>
 80225c8:	6994      	ldr	r4, [r2, #24]
 80225ca:	42a3      	cmp	r3, r4
 80225cc:	db07      	blt.n	80225de <__sfputc_r+0x22>
 80225ce:	290a      	cmp	r1, #10
 80225d0:	d005      	beq.n	80225de <__sfputc_r+0x22>
 80225d2:	6813      	ldr	r3, [r2, #0]
 80225d4:	1c58      	adds	r0, r3, #1
 80225d6:	6010      	str	r0, [r2, #0]
 80225d8:	7019      	strb	r1, [r3, #0]
 80225da:	0008      	movs	r0, r1
 80225dc:	bd10      	pop	{r4, pc}
 80225de:	f7fd fd37 	bl	8020050 <__swbuf_r>
 80225e2:	0001      	movs	r1, r0
 80225e4:	e7f9      	b.n	80225da <__sfputc_r+0x1e>

080225e6 <__sfputs_r>:
 80225e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80225e8:	0006      	movs	r6, r0
 80225ea:	000f      	movs	r7, r1
 80225ec:	0014      	movs	r4, r2
 80225ee:	18d5      	adds	r5, r2, r3
 80225f0:	42ac      	cmp	r4, r5
 80225f2:	d101      	bne.n	80225f8 <__sfputs_r+0x12>
 80225f4:	2000      	movs	r0, #0
 80225f6:	e007      	b.n	8022608 <__sfputs_r+0x22>
 80225f8:	7821      	ldrb	r1, [r4, #0]
 80225fa:	003a      	movs	r2, r7
 80225fc:	0030      	movs	r0, r6
 80225fe:	f7ff ffdd 	bl	80225bc <__sfputc_r>
 8022602:	3401      	adds	r4, #1
 8022604:	1c43      	adds	r3, r0, #1
 8022606:	d1f3      	bne.n	80225f0 <__sfputs_r+0xa>
 8022608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802260c <_vfiprintf_r>:
 802260c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802260e:	b0a1      	sub	sp, #132	@ 0x84
 8022610:	000f      	movs	r7, r1
 8022612:	0015      	movs	r5, r2
 8022614:	001e      	movs	r6, r3
 8022616:	9003      	str	r0, [sp, #12]
 8022618:	2800      	cmp	r0, #0
 802261a:	d004      	beq.n	8022626 <_vfiprintf_r+0x1a>
 802261c:	6a03      	ldr	r3, [r0, #32]
 802261e:	2b00      	cmp	r3, #0
 8022620:	d101      	bne.n	8022626 <_vfiprintf_r+0x1a>
 8022622:	f7fd fbcd 	bl	801fdc0 <__sinit>
 8022626:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022628:	07db      	lsls	r3, r3, #31
 802262a:	d405      	bmi.n	8022638 <_vfiprintf_r+0x2c>
 802262c:	89bb      	ldrh	r3, [r7, #12]
 802262e:	059b      	lsls	r3, r3, #22
 8022630:	d402      	bmi.n	8022638 <_vfiprintf_r+0x2c>
 8022632:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022634:	f7fd fe7b 	bl	802032e <__retarget_lock_acquire_recursive>
 8022638:	89bb      	ldrh	r3, [r7, #12]
 802263a:	071b      	lsls	r3, r3, #28
 802263c:	d502      	bpl.n	8022644 <_vfiprintf_r+0x38>
 802263e:	693b      	ldr	r3, [r7, #16]
 8022640:	2b00      	cmp	r3, #0
 8022642:	d113      	bne.n	802266c <_vfiprintf_r+0x60>
 8022644:	0039      	movs	r1, r7
 8022646:	9803      	ldr	r0, [sp, #12]
 8022648:	f7fd fd44 	bl	80200d4 <__swsetup_r>
 802264c:	2800      	cmp	r0, #0
 802264e:	d00d      	beq.n	802266c <_vfiprintf_r+0x60>
 8022650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022652:	07db      	lsls	r3, r3, #31
 8022654:	d503      	bpl.n	802265e <_vfiprintf_r+0x52>
 8022656:	2001      	movs	r0, #1
 8022658:	4240      	negs	r0, r0
 802265a:	b021      	add	sp, #132	@ 0x84
 802265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802265e:	89bb      	ldrh	r3, [r7, #12]
 8022660:	059b      	lsls	r3, r3, #22
 8022662:	d4f8      	bmi.n	8022656 <_vfiprintf_r+0x4a>
 8022664:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022666:	f7fd fe63 	bl	8020330 <__retarget_lock_release_recursive>
 802266a:	e7f4      	b.n	8022656 <_vfiprintf_r+0x4a>
 802266c:	2300      	movs	r3, #0
 802266e:	ac08      	add	r4, sp, #32
 8022670:	6163      	str	r3, [r4, #20]
 8022672:	3320      	adds	r3, #32
 8022674:	7663      	strb	r3, [r4, #25]
 8022676:	3310      	adds	r3, #16
 8022678:	76a3      	strb	r3, [r4, #26]
 802267a:	9607      	str	r6, [sp, #28]
 802267c:	002e      	movs	r6, r5
 802267e:	7833      	ldrb	r3, [r6, #0]
 8022680:	2b00      	cmp	r3, #0
 8022682:	d001      	beq.n	8022688 <_vfiprintf_r+0x7c>
 8022684:	2b25      	cmp	r3, #37	@ 0x25
 8022686:	d148      	bne.n	802271a <_vfiprintf_r+0x10e>
 8022688:	1b73      	subs	r3, r6, r5
 802268a:	9305      	str	r3, [sp, #20]
 802268c:	42ae      	cmp	r6, r5
 802268e:	d00b      	beq.n	80226a8 <_vfiprintf_r+0x9c>
 8022690:	002a      	movs	r2, r5
 8022692:	0039      	movs	r1, r7
 8022694:	9803      	ldr	r0, [sp, #12]
 8022696:	f7ff ffa6 	bl	80225e6 <__sfputs_r>
 802269a:	3001      	adds	r0, #1
 802269c:	d100      	bne.n	80226a0 <_vfiprintf_r+0x94>
 802269e:	e0ae      	b.n	80227fe <_vfiprintf_r+0x1f2>
 80226a0:	6963      	ldr	r3, [r4, #20]
 80226a2:	9a05      	ldr	r2, [sp, #20]
 80226a4:	189b      	adds	r3, r3, r2
 80226a6:	6163      	str	r3, [r4, #20]
 80226a8:	7833      	ldrb	r3, [r6, #0]
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	d100      	bne.n	80226b0 <_vfiprintf_r+0xa4>
 80226ae:	e0a6      	b.n	80227fe <_vfiprintf_r+0x1f2>
 80226b0:	2201      	movs	r2, #1
 80226b2:	2300      	movs	r3, #0
 80226b4:	4252      	negs	r2, r2
 80226b6:	6062      	str	r2, [r4, #4]
 80226b8:	a904      	add	r1, sp, #16
 80226ba:	3254      	adds	r2, #84	@ 0x54
 80226bc:	1852      	adds	r2, r2, r1
 80226be:	1c75      	adds	r5, r6, #1
 80226c0:	6023      	str	r3, [r4, #0]
 80226c2:	60e3      	str	r3, [r4, #12]
 80226c4:	60a3      	str	r3, [r4, #8]
 80226c6:	7013      	strb	r3, [r2, #0]
 80226c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80226ca:	4b59      	ldr	r3, [pc, #356]	@ (8022830 <_vfiprintf_r+0x224>)
 80226cc:	2205      	movs	r2, #5
 80226ce:	0018      	movs	r0, r3
 80226d0:	7829      	ldrb	r1, [r5, #0]
 80226d2:	9305      	str	r3, [sp, #20]
 80226d4:	f7fd fe2d 	bl	8020332 <memchr>
 80226d8:	1c6e      	adds	r6, r5, #1
 80226da:	2800      	cmp	r0, #0
 80226dc:	d11f      	bne.n	802271e <_vfiprintf_r+0x112>
 80226de:	6822      	ldr	r2, [r4, #0]
 80226e0:	06d3      	lsls	r3, r2, #27
 80226e2:	d504      	bpl.n	80226ee <_vfiprintf_r+0xe2>
 80226e4:	2353      	movs	r3, #83	@ 0x53
 80226e6:	a904      	add	r1, sp, #16
 80226e8:	185b      	adds	r3, r3, r1
 80226ea:	2120      	movs	r1, #32
 80226ec:	7019      	strb	r1, [r3, #0]
 80226ee:	0713      	lsls	r3, r2, #28
 80226f0:	d504      	bpl.n	80226fc <_vfiprintf_r+0xf0>
 80226f2:	2353      	movs	r3, #83	@ 0x53
 80226f4:	a904      	add	r1, sp, #16
 80226f6:	185b      	adds	r3, r3, r1
 80226f8:	212b      	movs	r1, #43	@ 0x2b
 80226fa:	7019      	strb	r1, [r3, #0]
 80226fc:	782b      	ldrb	r3, [r5, #0]
 80226fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8022700:	d016      	beq.n	8022730 <_vfiprintf_r+0x124>
 8022702:	002e      	movs	r6, r5
 8022704:	2100      	movs	r1, #0
 8022706:	200a      	movs	r0, #10
 8022708:	68e3      	ldr	r3, [r4, #12]
 802270a:	7832      	ldrb	r2, [r6, #0]
 802270c:	1c75      	adds	r5, r6, #1
 802270e:	3a30      	subs	r2, #48	@ 0x30
 8022710:	2a09      	cmp	r2, #9
 8022712:	d950      	bls.n	80227b6 <_vfiprintf_r+0x1aa>
 8022714:	2900      	cmp	r1, #0
 8022716:	d111      	bne.n	802273c <_vfiprintf_r+0x130>
 8022718:	e017      	b.n	802274a <_vfiprintf_r+0x13e>
 802271a:	3601      	adds	r6, #1
 802271c:	e7af      	b.n	802267e <_vfiprintf_r+0x72>
 802271e:	9b05      	ldr	r3, [sp, #20]
 8022720:	6822      	ldr	r2, [r4, #0]
 8022722:	1ac0      	subs	r0, r0, r3
 8022724:	2301      	movs	r3, #1
 8022726:	4083      	lsls	r3, r0
 8022728:	4313      	orrs	r3, r2
 802272a:	0035      	movs	r5, r6
 802272c:	6023      	str	r3, [r4, #0]
 802272e:	e7cc      	b.n	80226ca <_vfiprintf_r+0xbe>
 8022730:	9b07      	ldr	r3, [sp, #28]
 8022732:	1d19      	adds	r1, r3, #4
 8022734:	681b      	ldr	r3, [r3, #0]
 8022736:	9107      	str	r1, [sp, #28]
 8022738:	2b00      	cmp	r3, #0
 802273a:	db01      	blt.n	8022740 <_vfiprintf_r+0x134>
 802273c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802273e:	e004      	b.n	802274a <_vfiprintf_r+0x13e>
 8022740:	425b      	negs	r3, r3
 8022742:	60e3      	str	r3, [r4, #12]
 8022744:	2302      	movs	r3, #2
 8022746:	4313      	orrs	r3, r2
 8022748:	6023      	str	r3, [r4, #0]
 802274a:	7833      	ldrb	r3, [r6, #0]
 802274c:	2b2e      	cmp	r3, #46	@ 0x2e
 802274e:	d10c      	bne.n	802276a <_vfiprintf_r+0x15e>
 8022750:	7873      	ldrb	r3, [r6, #1]
 8022752:	2b2a      	cmp	r3, #42	@ 0x2a
 8022754:	d134      	bne.n	80227c0 <_vfiprintf_r+0x1b4>
 8022756:	9b07      	ldr	r3, [sp, #28]
 8022758:	3602      	adds	r6, #2
 802275a:	1d1a      	adds	r2, r3, #4
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	9207      	str	r2, [sp, #28]
 8022760:	2b00      	cmp	r3, #0
 8022762:	da01      	bge.n	8022768 <_vfiprintf_r+0x15c>
 8022764:	2301      	movs	r3, #1
 8022766:	425b      	negs	r3, r3
 8022768:	9309      	str	r3, [sp, #36]	@ 0x24
 802276a:	4d32      	ldr	r5, [pc, #200]	@ (8022834 <_vfiprintf_r+0x228>)
 802276c:	2203      	movs	r2, #3
 802276e:	0028      	movs	r0, r5
 8022770:	7831      	ldrb	r1, [r6, #0]
 8022772:	f7fd fdde 	bl	8020332 <memchr>
 8022776:	2800      	cmp	r0, #0
 8022778:	d006      	beq.n	8022788 <_vfiprintf_r+0x17c>
 802277a:	2340      	movs	r3, #64	@ 0x40
 802277c:	1b40      	subs	r0, r0, r5
 802277e:	4083      	lsls	r3, r0
 8022780:	6822      	ldr	r2, [r4, #0]
 8022782:	3601      	adds	r6, #1
 8022784:	4313      	orrs	r3, r2
 8022786:	6023      	str	r3, [r4, #0]
 8022788:	7831      	ldrb	r1, [r6, #0]
 802278a:	2206      	movs	r2, #6
 802278c:	482a      	ldr	r0, [pc, #168]	@ (8022838 <_vfiprintf_r+0x22c>)
 802278e:	1c75      	adds	r5, r6, #1
 8022790:	7621      	strb	r1, [r4, #24]
 8022792:	f7fd fdce 	bl	8020332 <memchr>
 8022796:	2800      	cmp	r0, #0
 8022798:	d040      	beq.n	802281c <_vfiprintf_r+0x210>
 802279a:	4b28      	ldr	r3, [pc, #160]	@ (802283c <_vfiprintf_r+0x230>)
 802279c:	2b00      	cmp	r3, #0
 802279e:	d122      	bne.n	80227e6 <_vfiprintf_r+0x1da>
 80227a0:	2207      	movs	r2, #7
 80227a2:	9b07      	ldr	r3, [sp, #28]
 80227a4:	3307      	adds	r3, #7
 80227a6:	4393      	bics	r3, r2
 80227a8:	3308      	adds	r3, #8
 80227aa:	9307      	str	r3, [sp, #28]
 80227ac:	6963      	ldr	r3, [r4, #20]
 80227ae:	9a04      	ldr	r2, [sp, #16]
 80227b0:	189b      	adds	r3, r3, r2
 80227b2:	6163      	str	r3, [r4, #20]
 80227b4:	e762      	b.n	802267c <_vfiprintf_r+0x70>
 80227b6:	4343      	muls	r3, r0
 80227b8:	002e      	movs	r6, r5
 80227ba:	2101      	movs	r1, #1
 80227bc:	189b      	adds	r3, r3, r2
 80227be:	e7a4      	b.n	802270a <_vfiprintf_r+0xfe>
 80227c0:	2300      	movs	r3, #0
 80227c2:	200a      	movs	r0, #10
 80227c4:	0019      	movs	r1, r3
 80227c6:	3601      	adds	r6, #1
 80227c8:	6063      	str	r3, [r4, #4]
 80227ca:	7832      	ldrb	r2, [r6, #0]
 80227cc:	1c75      	adds	r5, r6, #1
 80227ce:	3a30      	subs	r2, #48	@ 0x30
 80227d0:	2a09      	cmp	r2, #9
 80227d2:	d903      	bls.n	80227dc <_vfiprintf_r+0x1d0>
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d0c8      	beq.n	802276a <_vfiprintf_r+0x15e>
 80227d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80227da:	e7c6      	b.n	802276a <_vfiprintf_r+0x15e>
 80227dc:	4341      	muls	r1, r0
 80227de:	002e      	movs	r6, r5
 80227e0:	2301      	movs	r3, #1
 80227e2:	1889      	adds	r1, r1, r2
 80227e4:	e7f1      	b.n	80227ca <_vfiprintf_r+0x1be>
 80227e6:	aa07      	add	r2, sp, #28
 80227e8:	9200      	str	r2, [sp, #0]
 80227ea:	0021      	movs	r1, r4
 80227ec:	003a      	movs	r2, r7
 80227ee:	4b14      	ldr	r3, [pc, #80]	@ (8022840 <_vfiprintf_r+0x234>)
 80227f0:	9803      	ldr	r0, [sp, #12]
 80227f2:	f7fc fe99 	bl	801f528 <_printf_float>
 80227f6:	9004      	str	r0, [sp, #16]
 80227f8:	9b04      	ldr	r3, [sp, #16]
 80227fa:	3301      	adds	r3, #1
 80227fc:	d1d6      	bne.n	80227ac <_vfiprintf_r+0x1a0>
 80227fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022800:	07db      	lsls	r3, r3, #31
 8022802:	d405      	bmi.n	8022810 <_vfiprintf_r+0x204>
 8022804:	89bb      	ldrh	r3, [r7, #12]
 8022806:	059b      	lsls	r3, r3, #22
 8022808:	d402      	bmi.n	8022810 <_vfiprintf_r+0x204>
 802280a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802280c:	f7fd fd90 	bl	8020330 <__retarget_lock_release_recursive>
 8022810:	89bb      	ldrh	r3, [r7, #12]
 8022812:	065b      	lsls	r3, r3, #25
 8022814:	d500      	bpl.n	8022818 <_vfiprintf_r+0x20c>
 8022816:	e71e      	b.n	8022656 <_vfiprintf_r+0x4a>
 8022818:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802281a:	e71e      	b.n	802265a <_vfiprintf_r+0x4e>
 802281c:	aa07      	add	r2, sp, #28
 802281e:	9200      	str	r2, [sp, #0]
 8022820:	0021      	movs	r1, r4
 8022822:	003a      	movs	r2, r7
 8022824:	4b06      	ldr	r3, [pc, #24]	@ (8022840 <_vfiprintf_r+0x234>)
 8022826:	9803      	ldr	r0, [sp, #12]
 8022828:	f7fd f92c 	bl	801fa84 <_printf_i>
 802282c:	e7e3      	b.n	80227f6 <_vfiprintf_r+0x1ea>
 802282e:	46c0      	nop			@ (mov r8, r8)
 8022830:	08025f50 	.word	0x08025f50
 8022834:	08025f56 	.word	0x08025f56
 8022838:	08025f5a 	.word	0x08025f5a
 802283c:	0801f529 	.word	0x0801f529
 8022840:	080225e7 	.word	0x080225e7

08022844 <__sflush_r>:
 8022844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022846:	220c      	movs	r2, #12
 8022848:	5e8b      	ldrsh	r3, [r1, r2]
 802284a:	0005      	movs	r5, r0
 802284c:	000c      	movs	r4, r1
 802284e:	071a      	lsls	r2, r3, #28
 8022850:	d456      	bmi.n	8022900 <__sflush_r+0xbc>
 8022852:	684a      	ldr	r2, [r1, #4]
 8022854:	2a00      	cmp	r2, #0
 8022856:	dc02      	bgt.n	802285e <__sflush_r+0x1a>
 8022858:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802285a:	2a00      	cmp	r2, #0
 802285c:	dd4e      	ble.n	80228fc <__sflush_r+0xb8>
 802285e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022860:	2f00      	cmp	r7, #0
 8022862:	d04b      	beq.n	80228fc <__sflush_r+0xb8>
 8022864:	2200      	movs	r2, #0
 8022866:	2080      	movs	r0, #128	@ 0x80
 8022868:	682e      	ldr	r6, [r5, #0]
 802286a:	602a      	str	r2, [r5, #0]
 802286c:	001a      	movs	r2, r3
 802286e:	0140      	lsls	r0, r0, #5
 8022870:	6a21      	ldr	r1, [r4, #32]
 8022872:	4002      	ands	r2, r0
 8022874:	4203      	tst	r3, r0
 8022876:	d033      	beq.n	80228e0 <__sflush_r+0x9c>
 8022878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802287a:	89a3      	ldrh	r3, [r4, #12]
 802287c:	075b      	lsls	r3, r3, #29
 802287e:	d506      	bpl.n	802288e <__sflush_r+0x4a>
 8022880:	6863      	ldr	r3, [r4, #4]
 8022882:	1ad2      	subs	r2, r2, r3
 8022884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022886:	2b00      	cmp	r3, #0
 8022888:	d001      	beq.n	802288e <__sflush_r+0x4a>
 802288a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802288c:	1ad2      	subs	r2, r2, r3
 802288e:	2300      	movs	r3, #0
 8022890:	0028      	movs	r0, r5
 8022892:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022894:	6a21      	ldr	r1, [r4, #32]
 8022896:	47b8      	blx	r7
 8022898:	89a2      	ldrh	r2, [r4, #12]
 802289a:	1c43      	adds	r3, r0, #1
 802289c:	d106      	bne.n	80228ac <__sflush_r+0x68>
 802289e:	6829      	ldr	r1, [r5, #0]
 80228a0:	291d      	cmp	r1, #29
 80228a2:	d846      	bhi.n	8022932 <__sflush_r+0xee>
 80228a4:	4b29      	ldr	r3, [pc, #164]	@ (802294c <__sflush_r+0x108>)
 80228a6:	410b      	asrs	r3, r1
 80228a8:	07db      	lsls	r3, r3, #31
 80228aa:	d442      	bmi.n	8022932 <__sflush_r+0xee>
 80228ac:	2300      	movs	r3, #0
 80228ae:	6063      	str	r3, [r4, #4]
 80228b0:	6923      	ldr	r3, [r4, #16]
 80228b2:	6023      	str	r3, [r4, #0]
 80228b4:	04d2      	lsls	r2, r2, #19
 80228b6:	d505      	bpl.n	80228c4 <__sflush_r+0x80>
 80228b8:	1c43      	adds	r3, r0, #1
 80228ba:	d102      	bne.n	80228c2 <__sflush_r+0x7e>
 80228bc:	682b      	ldr	r3, [r5, #0]
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d100      	bne.n	80228c4 <__sflush_r+0x80>
 80228c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80228c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80228c6:	602e      	str	r6, [r5, #0]
 80228c8:	2900      	cmp	r1, #0
 80228ca:	d017      	beq.n	80228fc <__sflush_r+0xb8>
 80228cc:	0023      	movs	r3, r4
 80228ce:	3344      	adds	r3, #68	@ 0x44
 80228d0:	4299      	cmp	r1, r3
 80228d2:	d002      	beq.n	80228da <__sflush_r+0x96>
 80228d4:	0028      	movs	r0, r5
 80228d6:	f7fe fbc9 	bl	802106c <_free_r>
 80228da:	2300      	movs	r3, #0
 80228dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80228de:	e00d      	b.n	80228fc <__sflush_r+0xb8>
 80228e0:	2301      	movs	r3, #1
 80228e2:	0028      	movs	r0, r5
 80228e4:	47b8      	blx	r7
 80228e6:	0002      	movs	r2, r0
 80228e8:	1c43      	adds	r3, r0, #1
 80228ea:	d1c6      	bne.n	802287a <__sflush_r+0x36>
 80228ec:	682b      	ldr	r3, [r5, #0]
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d0c3      	beq.n	802287a <__sflush_r+0x36>
 80228f2:	2b1d      	cmp	r3, #29
 80228f4:	d001      	beq.n	80228fa <__sflush_r+0xb6>
 80228f6:	2b16      	cmp	r3, #22
 80228f8:	d11a      	bne.n	8022930 <__sflush_r+0xec>
 80228fa:	602e      	str	r6, [r5, #0]
 80228fc:	2000      	movs	r0, #0
 80228fe:	e01e      	b.n	802293e <__sflush_r+0xfa>
 8022900:	690e      	ldr	r6, [r1, #16]
 8022902:	2e00      	cmp	r6, #0
 8022904:	d0fa      	beq.n	80228fc <__sflush_r+0xb8>
 8022906:	680f      	ldr	r7, [r1, #0]
 8022908:	600e      	str	r6, [r1, #0]
 802290a:	1bba      	subs	r2, r7, r6
 802290c:	9201      	str	r2, [sp, #4]
 802290e:	2200      	movs	r2, #0
 8022910:	079b      	lsls	r3, r3, #30
 8022912:	d100      	bne.n	8022916 <__sflush_r+0xd2>
 8022914:	694a      	ldr	r2, [r1, #20]
 8022916:	60a2      	str	r2, [r4, #8]
 8022918:	9b01      	ldr	r3, [sp, #4]
 802291a:	2b00      	cmp	r3, #0
 802291c:	ddee      	ble.n	80228fc <__sflush_r+0xb8>
 802291e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022920:	0032      	movs	r2, r6
 8022922:	001f      	movs	r7, r3
 8022924:	0028      	movs	r0, r5
 8022926:	9b01      	ldr	r3, [sp, #4]
 8022928:	6a21      	ldr	r1, [r4, #32]
 802292a:	47b8      	blx	r7
 802292c:	2800      	cmp	r0, #0
 802292e:	dc07      	bgt.n	8022940 <__sflush_r+0xfc>
 8022930:	89a2      	ldrh	r2, [r4, #12]
 8022932:	2340      	movs	r3, #64	@ 0x40
 8022934:	2001      	movs	r0, #1
 8022936:	4313      	orrs	r3, r2
 8022938:	b21b      	sxth	r3, r3
 802293a:	81a3      	strh	r3, [r4, #12]
 802293c:	4240      	negs	r0, r0
 802293e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022940:	9b01      	ldr	r3, [sp, #4]
 8022942:	1836      	adds	r6, r6, r0
 8022944:	1a1b      	subs	r3, r3, r0
 8022946:	9301      	str	r3, [sp, #4]
 8022948:	e7e6      	b.n	8022918 <__sflush_r+0xd4>
 802294a:	46c0      	nop			@ (mov r8, r8)
 802294c:	dfbffffe 	.word	0xdfbffffe

08022950 <_fflush_r>:
 8022950:	690b      	ldr	r3, [r1, #16]
 8022952:	b570      	push	{r4, r5, r6, lr}
 8022954:	0005      	movs	r5, r0
 8022956:	000c      	movs	r4, r1
 8022958:	2b00      	cmp	r3, #0
 802295a:	d102      	bne.n	8022962 <_fflush_r+0x12>
 802295c:	2500      	movs	r5, #0
 802295e:	0028      	movs	r0, r5
 8022960:	bd70      	pop	{r4, r5, r6, pc}
 8022962:	2800      	cmp	r0, #0
 8022964:	d004      	beq.n	8022970 <_fflush_r+0x20>
 8022966:	6a03      	ldr	r3, [r0, #32]
 8022968:	2b00      	cmp	r3, #0
 802296a:	d101      	bne.n	8022970 <_fflush_r+0x20>
 802296c:	f7fd fa28 	bl	801fdc0 <__sinit>
 8022970:	220c      	movs	r2, #12
 8022972:	5ea3      	ldrsh	r3, [r4, r2]
 8022974:	2b00      	cmp	r3, #0
 8022976:	d0f1      	beq.n	802295c <_fflush_r+0xc>
 8022978:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802297a:	07d2      	lsls	r2, r2, #31
 802297c:	d404      	bmi.n	8022988 <_fflush_r+0x38>
 802297e:	059b      	lsls	r3, r3, #22
 8022980:	d402      	bmi.n	8022988 <_fflush_r+0x38>
 8022982:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022984:	f7fd fcd3 	bl	802032e <__retarget_lock_acquire_recursive>
 8022988:	0028      	movs	r0, r5
 802298a:	0021      	movs	r1, r4
 802298c:	f7ff ff5a 	bl	8022844 <__sflush_r>
 8022990:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022992:	0005      	movs	r5, r0
 8022994:	07db      	lsls	r3, r3, #31
 8022996:	d4e2      	bmi.n	802295e <_fflush_r+0xe>
 8022998:	89a3      	ldrh	r3, [r4, #12]
 802299a:	059b      	lsls	r3, r3, #22
 802299c:	d4df      	bmi.n	802295e <_fflush_r+0xe>
 802299e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80229a0:	f7fd fcc6 	bl	8020330 <__retarget_lock_release_recursive>
 80229a4:	e7db      	b.n	802295e <_fflush_r+0xe>
	...

080229a8 <__swhatbuf_r>:
 80229a8:	b570      	push	{r4, r5, r6, lr}
 80229aa:	000e      	movs	r6, r1
 80229ac:	001d      	movs	r5, r3
 80229ae:	230e      	movs	r3, #14
 80229b0:	5ec9      	ldrsh	r1, [r1, r3]
 80229b2:	0014      	movs	r4, r2
 80229b4:	b096      	sub	sp, #88	@ 0x58
 80229b6:	2900      	cmp	r1, #0
 80229b8:	da0c      	bge.n	80229d4 <__swhatbuf_r+0x2c>
 80229ba:	89b2      	ldrh	r2, [r6, #12]
 80229bc:	2380      	movs	r3, #128	@ 0x80
 80229be:	0011      	movs	r1, r2
 80229c0:	4019      	ands	r1, r3
 80229c2:	421a      	tst	r2, r3
 80229c4:	d114      	bne.n	80229f0 <__swhatbuf_r+0x48>
 80229c6:	2380      	movs	r3, #128	@ 0x80
 80229c8:	00db      	lsls	r3, r3, #3
 80229ca:	2000      	movs	r0, #0
 80229cc:	6029      	str	r1, [r5, #0]
 80229ce:	6023      	str	r3, [r4, #0]
 80229d0:	b016      	add	sp, #88	@ 0x58
 80229d2:	bd70      	pop	{r4, r5, r6, pc}
 80229d4:	466a      	mov	r2, sp
 80229d6:	f000 f865 	bl	8022aa4 <_fstat_r>
 80229da:	2800      	cmp	r0, #0
 80229dc:	dbed      	blt.n	80229ba <__swhatbuf_r+0x12>
 80229de:	23f0      	movs	r3, #240	@ 0xf0
 80229e0:	9901      	ldr	r1, [sp, #4]
 80229e2:	021b      	lsls	r3, r3, #8
 80229e4:	4019      	ands	r1, r3
 80229e6:	4b04      	ldr	r3, [pc, #16]	@ (80229f8 <__swhatbuf_r+0x50>)
 80229e8:	18c9      	adds	r1, r1, r3
 80229ea:	424b      	negs	r3, r1
 80229ec:	4159      	adcs	r1, r3
 80229ee:	e7ea      	b.n	80229c6 <__swhatbuf_r+0x1e>
 80229f0:	2100      	movs	r1, #0
 80229f2:	2340      	movs	r3, #64	@ 0x40
 80229f4:	e7e9      	b.n	80229ca <__swhatbuf_r+0x22>
 80229f6:	46c0      	nop			@ (mov r8, r8)
 80229f8:	ffffe000 	.word	0xffffe000

080229fc <__smakebuf_r>:
 80229fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229fe:	2602      	movs	r6, #2
 8022a00:	898b      	ldrh	r3, [r1, #12]
 8022a02:	0005      	movs	r5, r0
 8022a04:	000c      	movs	r4, r1
 8022a06:	b085      	sub	sp, #20
 8022a08:	4233      	tst	r3, r6
 8022a0a:	d007      	beq.n	8022a1c <__smakebuf_r+0x20>
 8022a0c:	0023      	movs	r3, r4
 8022a0e:	3347      	adds	r3, #71	@ 0x47
 8022a10:	6023      	str	r3, [r4, #0]
 8022a12:	6123      	str	r3, [r4, #16]
 8022a14:	2301      	movs	r3, #1
 8022a16:	6163      	str	r3, [r4, #20]
 8022a18:	b005      	add	sp, #20
 8022a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a1c:	ab03      	add	r3, sp, #12
 8022a1e:	aa02      	add	r2, sp, #8
 8022a20:	f7ff ffc2 	bl	80229a8 <__swhatbuf_r>
 8022a24:	9f02      	ldr	r7, [sp, #8]
 8022a26:	9001      	str	r0, [sp, #4]
 8022a28:	0039      	movs	r1, r7
 8022a2a:	0028      	movs	r0, r5
 8022a2c:	f7fe feee 	bl	802180c <_malloc_r>
 8022a30:	2800      	cmp	r0, #0
 8022a32:	d108      	bne.n	8022a46 <__smakebuf_r+0x4a>
 8022a34:	220c      	movs	r2, #12
 8022a36:	5ea3      	ldrsh	r3, [r4, r2]
 8022a38:	059a      	lsls	r2, r3, #22
 8022a3a:	d4ed      	bmi.n	8022a18 <__smakebuf_r+0x1c>
 8022a3c:	2203      	movs	r2, #3
 8022a3e:	4393      	bics	r3, r2
 8022a40:	431e      	orrs	r6, r3
 8022a42:	81a6      	strh	r6, [r4, #12]
 8022a44:	e7e2      	b.n	8022a0c <__smakebuf_r+0x10>
 8022a46:	2380      	movs	r3, #128	@ 0x80
 8022a48:	89a2      	ldrh	r2, [r4, #12]
 8022a4a:	6020      	str	r0, [r4, #0]
 8022a4c:	4313      	orrs	r3, r2
 8022a4e:	81a3      	strh	r3, [r4, #12]
 8022a50:	9b03      	ldr	r3, [sp, #12]
 8022a52:	6120      	str	r0, [r4, #16]
 8022a54:	6167      	str	r7, [r4, #20]
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	d00c      	beq.n	8022a74 <__smakebuf_r+0x78>
 8022a5a:	0028      	movs	r0, r5
 8022a5c:	230e      	movs	r3, #14
 8022a5e:	5ee1      	ldrsh	r1, [r4, r3]
 8022a60:	f000 f832 	bl	8022ac8 <_isatty_r>
 8022a64:	2800      	cmp	r0, #0
 8022a66:	d005      	beq.n	8022a74 <__smakebuf_r+0x78>
 8022a68:	2303      	movs	r3, #3
 8022a6a:	89a2      	ldrh	r2, [r4, #12]
 8022a6c:	439a      	bics	r2, r3
 8022a6e:	3b02      	subs	r3, #2
 8022a70:	4313      	orrs	r3, r2
 8022a72:	81a3      	strh	r3, [r4, #12]
 8022a74:	89a3      	ldrh	r3, [r4, #12]
 8022a76:	9a01      	ldr	r2, [sp, #4]
 8022a78:	4313      	orrs	r3, r2
 8022a7a:	81a3      	strh	r3, [r4, #12]
 8022a7c:	e7cc      	b.n	8022a18 <__smakebuf_r+0x1c>

08022a7e <memmove>:
 8022a7e:	b510      	push	{r4, lr}
 8022a80:	4288      	cmp	r0, r1
 8022a82:	d806      	bhi.n	8022a92 <memmove+0x14>
 8022a84:	2300      	movs	r3, #0
 8022a86:	429a      	cmp	r2, r3
 8022a88:	d008      	beq.n	8022a9c <memmove+0x1e>
 8022a8a:	5ccc      	ldrb	r4, [r1, r3]
 8022a8c:	54c4      	strb	r4, [r0, r3]
 8022a8e:	3301      	adds	r3, #1
 8022a90:	e7f9      	b.n	8022a86 <memmove+0x8>
 8022a92:	188b      	adds	r3, r1, r2
 8022a94:	4298      	cmp	r0, r3
 8022a96:	d2f5      	bcs.n	8022a84 <memmove+0x6>
 8022a98:	3a01      	subs	r2, #1
 8022a9a:	d200      	bcs.n	8022a9e <memmove+0x20>
 8022a9c:	bd10      	pop	{r4, pc}
 8022a9e:	5c8b      	ldrb	r3, [r1, r2]
 8022aa0:	5483      	strb	r3, [r0, r2]
 8022aa2:	e7f9      	b.n	8022a98 <memmove+0x1a>

08022aa4 <_fstat_r>:
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	b570      	push	{r4, r5, r6, lr}
 8022aa8:	4d06      	ldr	r5, [pc, #24]	@ (8022ac4 <_fstat_r+0x20>)
 8022aaa:	0004      	movs	r4, r0
 8022aac:	0008      	movs	r0, r1
 8022aae:	0011      	movs	r1, r2
 8022ab0:	602b      	str	r3, [r5, #0]
 8022ab2:	f7eb f877 	bl	800dba4 <_fstat>
 8022ab6:	1c43      	adds	r3, r0, #1
 8022ab8:	d103      	bne.n	8022ac2 <_fstat_r+0x1e>
 8022aba:	682b      	ldr	r3, [r5, #0]
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d000      	beq.n	8022ac2 <_fstat_r+0x1e>
 8022ac0:	6023      	str	r3, [r4, #0]
 8022ac2:	bd70      	pop	{r4, r5, r6, pc}
 8022ac4:	200037a0 	.word	0x200037a0

08022ac8 <_isatty_r>:
 8022ac8:	2300      	movs	r3, #0
 8022aca:	b570      	push	{r4, r5, r6, lr}
 8022acc:	4d06      	ldr	r5, [pc, #24]	@ (8022ae8 <_isatty_r+0x20>)
 8022ace:	0004      	movs	r4, r0
 8022ad0:	0008      	movs	r0, r1
 8022ad2:	602b      	str	r3, [r5, #0]
 8022ad4:	f7eb f874 	bl	800dbc0 <_isatty>
 8022ad8:	1c43      	adds	r3, r0, #1
 8022ada:	d103      	bne.n	8022ae4 <_isatty_r+0x1c>
 8022adc:	682b      	ldr	r3, [r5, #0]
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d000      	beq.n	8022ae4 <_isatty_r+0x1c>
 8022ae2:	6023      	str	r3, [r4, #0]
 8022ae4:	bd70      	pop	{r4, r5, r6, pc}
 8022ae6:	46c0      	nop			@ (mov r8, r8)
 8022ae8:	200037a0 	.word	0x200037a0

08022aec <_sbrk_r>:
 8022aec:	2300      	movs	r3, #0
 8022aee:	b570      	push	{r4, r5, r6, lr}
 8022af0:	4d06      	ldr	r5, [pc, #24]	@ (8022b0c <_sbrk_r+0x20>)
 8022af2:	0004      	movs	r4, r0
 8022af4:	0008      	movs	r0, r1
 8022af6:	602b      	str	r3, [r5, #0]
 8022af8:	f7eb f876 	bl	800dbe8 <_sbrk>
 8022afc:	1c43      	adds	r3, r0, #1
 8022afe:	d103      	bne.n	8022b08 <_sbrk_r+0x1c>
 8022b00:	682b      	ldr	r3, [r5, #0]
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d000      	beq.n	8022b08 <_sbrk_r+0x1c>
 8022b06:	6023      	str	r3, [r4, #0]
 8022b08:	bd70      	pop	{r4, r5, r6, pc}
 8022b0a:	46c0      	nop			@ (mov r8, r8)
 8022b0c:	200037a0 	.word	0x200037a0

08022b10 <__assert_func>:
 8022b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022b12:	0014      	movs	r4, r2
 8022b14:	001a      	movs	r2, r3
 8022b16:	4b09      	ldr	r3, [pc, #36]	@ (8022b3c <__assert_func+0x2c>)
 8022b18:	0005      	movs	r5, r0
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	000e      	movs	r6, r1
 8022b1e:	68d8      	ldr	r0, [r3, #12]
 8022b20:	4b07      	ldr	r3, [pc, #28]	@ (8022b40 <__assert_func+0x30>)
 8022b22:	2c00      	cmp	r4, #0
 8022b24:	d101      	bne.n	8022b2a <__assert_func+0x1a>
 8022b26:	4b07      	ldr	r3, [pc, #28]	@ (8022b44 <__assert_func+0x34>)
 8022b28:	001c      	movs	r4, r3
 8022b2a:	4907      	ldr	r1, [pc, #28]	@ (8022b48 <__assert_func+0x38>)
 8022b2c:	9301      	str	r3, [sp, #4]
 8022b2e:	9402      	str	r4, [sp, #8]
 8022b30:	002b      	movs	r3, r5
 8022b32:	9600      	str	r6, [sp, #0]
 8022b34:	f000 f866 	bl	8022c04 <fiprintf>
 8022b38:	f000 f874 	bl	8022c24 <abort>
 8022b3c:	200003cc 	.word	0x200003cc
 8022b40:	08025f61 	.word	0x08025f61
 8022b44:	08025f9c 	.word	0x08025f9c
 8022b48:	08025f6e 	.word	0x08025f6e

08022b4c <_calloc_r>:
 8022b4c:	b570      	push	{r4, r5, r6, lr}
 8022b4e:	0c0b      	lsrs	r3, r1, #16
 8022b50:	0c15      	lsrs	r5, r2, #16
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d11e      	bne.n	8022b94 <_calloc_r+0x48>
 8022b56:	2d00      	cmp	r5, #0
 8022b58:	d10c      	bne.n	8022b74 <_calloc_r+0x28>
 8022b5a:	b289      	uxth	r1, r1
 8022b5c:	b294      	uxth	r4, r2
 8022b5e:	434c      	muls	r4, r1
 8022b60:	0021      	movs	r1, r4
 8022b62:	f7fe fe53 	bl	802180c <_malloc_r>
 8022b66:	1e05      	subs	r5, r0, #0
 8022b68:	d01a      	beq.n	8022ba0 <_calloc_r+0x54>
 8022b6a:	0022      	movs	r2, r4
 8022b6c:	2100      	movs	r1, #0
 8022b6e:	f7fd fb0f 	bl	8020190 <memset>
 8022b72:	e016      	b.n	8022ba2 <_calloc_r+0x56>
 8022b74:	1c2b      	adds	r3, r5, #0
 8022b76:	1c0c      	adds	r4, r1, #0
 8022b78:	b289      	uxth	r1, r1
 8022b7a:	b292      	uxth	r2, r2
 8022b7c:	434a      	muls	r2, r1
 8022b7e:	b29b      	uxth	r3, r3
 8022b80:	b2a1      	uxth	r1, r4
 8022b82:	4359      	muls	r1, r3
 8022b84:	0c14      	lsrs	r4, r2, #16
 8022b86:	190c      	adds	r4, r1, r4
 8022b88:	0c23      	lsrs	r3, r4, #16
 8022b8a:	d107      	bne.n	8022b9c <_calloc_r+0x50>
 8022b8c:	0424      	lsls	r4, r4, #16
 8022b8e:	b292      	uxth	r2, r2
 8022b90:	4314      	orrs	r4, r2
 8022b92:	e7e5      	b.n	8022b60 <_calloc_r+0x14>
 8022b94:	2d00      	cmp	r5, #0
 8022b96:	d101      	bne.n	8022b9c <_calloc_r+0x50>
 8022b98:	1c14      	adds	r4, r2, #0
 8022b9a:	e7ed      	b.n	8022b78 <_calloc_r+0x2c>
 8022b9c:	230c      	movs	r3, #12
 8022b9e:	6003      	str	r3, [r0, #0]
 8022ba0:	2500      	movs	r5, #0
 8022ba2:	0028      	movs	r0, r5
 8022ba4:	bd70      	pop	{r4, r5, r6, pc}

08022ba6 <_realloc_r>:
 8022ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022ba8:	0006      	movs	r6, r0
 8022baa:	000c      	movs	r4, r1
 8022bac:	0015      	movs	r5, r2
 8022bae:	2900      	cmp	r1, #0
 8022bb0:	d105      	bne.n	8022bbe <_realloc_r+0x18>
 8022bb2:	0011      	movs	r1, r2
 8022bb4:	f7fe fe2a 	bl	802180c <_malloc_r>
 8022bb8:	0004      	movs	r4, r0
 8022bba:	0020      	movs	r0, r4
 8022bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022bbe:	2a00      	cmp	r2, #0
 8022bc0:	d103      	bne.n	8022bca <_realloc_r+0x24>
 8022bc2:	f7fe fa53 	bl	802106c <_free_r>
 8022bc6:	2400      	movs	r4, #0
 8022bc8:	e7f7      	b.n	8022bba <_realloc_r+0x14>
 8022bca:	f000 f832 	bl	8022c32 <_malloc_usable_size_r>
 8022bce:	0007      	movs	r7, r0
 8022bd0:	4285      	cmp	r5, r0
 8022bd2:	d802      	bhi.n	8022bda <_realloc_r+0x34>
 8022bd4:	0843      	lsrs	r3, r0, #1
 8022bd6:	42ab      	cmp	r3, r5
 8022bd8:	d3ef      	bcc.n	8022bba <_realloc_r+0x14>
 8022bda:	0029      	movs	r1, r5
 8022bdc:	0030      	movs	r0, r6
 8022bde:	f7fe fe15 	bl	802180c <_malloc_r>
 8022be2:	9001      	str	r0, [sp, #4]
 8022be4:	2800      	cmp	r0, #0
 8022be6:	d0ee      	beq.n	8022bc6 <_realloc_r+0x20>
 8022be8:	002a      	movs	r2, r5
 8022bea:	42bd      	cmp	r5, r7
 8022bec:	d900      	bls.n	8022bf0 <_realloc_r+0x4a>
 8022bee:	003a      	movs	r2, r7
 8022bf0:	0021      	movs	r1, r4
 8022bf2:	9801      	ldr	r0, [sp, #4]
 8022bf4:	f7fd fba8 	bl	8020348 <memcpy>
 8022bf8:	0021      	movs	r1, r4
 8022bfa:	0030      	movs	r0, r6
 8022bfc:	f7fe fa36 	bl	802106c <_free_r>
 8022c00:	9c01      	ldr	r4, [sp, #4]
 8022c02:	e7da      	b.n	8022bba <_realloc_r+0x14>

08022c04 <fiprintf>:
 8022c04:	b40e      	push	{r1, r2, r3}
 8022c06:	b517      	push	{r0, r1, r2, r4, lr}
 8022c08:	4c05      	ldr	r4, [pc, #20]	@ (8022c20 <fiprintf+0x1c>)
 8022c0a:	ab05      	add	r3, sp, #20
 8022c0c:	cb04      	ldmia	r3!, {r2}
 8022c0e:	0001      	movs	r1, r0
 8022c10:	6820      	ldr	r0, [r4, #0]
 8022c12:	9301      	str	r3, [sp, #4]
 8022c14:	f7ff fcfa 	bl	802260c <_vfiprintf_r>
 8022c18:	bc1e      	pop	{r1, r2, r3, r4}
 8022c1a:	bc08      	pop	{r3}
 8022c1c:	b003      	add	sp, #12
 8022c1e:	4718      	bx	r3
 8022c20:	200003cc 	.word	0x200003cc

08022c24 <abort>:
 8022c24:	2006      	movs	r0, #6
 8022c26:	b510      	push	{r4, lr}
 8022c28:	f000 f834 	bl	8022c94 <raise>
 8022c2c:	2001      	movs	r0, #1
 8022c2e:	f7ea ff85 	bl	800db3c <_exit>

08022c32 <_malloc_usable_size_r>:
 8022c32:	1f0b      	subs	r3, r1, #4
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	1f18      	subs	r0, r3, #4
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	da01      	bge.n	8022c40 <_malloc_usable_size_r+0xe>
 8022c3c:	580b      	ldr	r3, [r1, r0]
 8022c3e:	18c0      	adds	r0, r0, r3
 8022c40:	4770      	bx	lr

08022c42 <_raise_r>:
 8022c42:	b570      	push	{r4, r5, r6, lr}
 8022c44:	0004      	movs	r4, r0
 8022c46:	000d      	movs	r5, r1
 8022c48:	291f      	cmp	r1, #31
 8022c4a:	d904      	bls.n	8022c56 <_raise_r+0x14>
 8022c4c:	2316      	movs	r3, #22
 8022c4e:	6003      	str	r3, [r0, #0]
 8022c50:	2001      	movs	r0, #1
 8022c52:	4240      	negs	r0, r0
 8022c54:	bd70      	pop	{r4, r5, r6, pc}
 8022c56:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022c58:	2b00      	cmp	r3, #0
 8022c5a:	d004      	beq.n	8022c66 <_raise_r+0x24>
 8022c5c:	008a      	lsls	r2, r1, #2
 8022c5e:	189b      	adds	r3, r3, r2
 8022c60:	681a      	ldr	r2, [r3, #0]
 8022c62:	2a00      	cmp	r2, #0
 8022c64:	d108      	bne.n	8022c78 <_raise_r+0x36>
 8022c66:	0020      	movs	r0, r4
 8022c68:	f000 f830 	bl	8022ccc <_getpid_r>
 8022c6c:	002a      	movs	r2, r5
 8022c6e:	0001      	movs	r1, r0
 8022c70:	0020      	movs	r0, r4
 8022c72:	f000 f819 	bl	8022ca8 <_kill_r>
 8022c76:	e7ed      	b.n	8022c54 <_raise_r+0x12>
 8022c78:	2a01      	cmp	r2, #1
 8022c7a:	d009      	beq.n	8022c90 <_raise_r+0x4e>
 8022c7c:	1c51      	adds	r1, r2, #1
 8022c7e:	d103      	bne.n	8022c88 <_raise_r+0x46>
 8022c80:	2316      	movs	r3, #22
 8022c82:	6003      	str	r3, [r0, #0]
 8022c84:	2001      	movs	r0, #1
 8022c86:	e7e5      	b.n	8022c54 <_raise_r+0x12>
 8022c88:	2100      	movs	r1, #0
 8022c8a:	0028      	movs	r0, r5
 8022c8c:	6019      	str	r1, [r3, #0]
 8022c8e:	4790      	blx	r2
 8022c90:	2000      	movs	r0, #0
 8022c92:	e7df      	b.n	8022c54 <_raise_r+0x12>

08022c94 <raise>:
 8022c94:	b510      	push	{r4, lr}
 8022c96:	4b03      	ldr	r3, [pc, #12]	@ (8022ca4 <raise+0x10>)
 8022c98:	0001      	movs	r1, r0
 8022c9a:	6818      	ldr	r0, [r3, #0]
 8022c9c:	f7ff ffd1 	bl	8022c42 <_raise_r>
 8022ca0:	bd10      	pop	{r4, pc}
 8022ca2:	46c0      	nop			@ (mov r8, r8)
 8022ca4:	200003cc 	.word	0x200003cc

08022ca8 <_kill_r>:
 8022ca8:	2300      	movs	r3, #0
 8022caa:	b570      	push	{r4, r5, r6, lr}
 8022cac:	4d06      	ldr	r5, [pc, #24]	@ (8022cc8 <_kill_r+0x20>)
 8022cae:	0004      	movs	r4, r0
 8022cb0:	0008      	movs	r0, r1
 8022cb2:	0011      	movs	r1, r2
 8022cb4:	602b      	str	r3, [r5, #0]
 8022cb6:	f7ea ff31 	bl	800db1c <_kill>
 8022cba:	1c43      	adds	r3, r0, #1
 8022cbc:	d103      	bne.n	8022cc6 <_kill_r+0x1e>
 8022cbe:	682b      	ldr	r3, [r5, #0]
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d000      	beq.n	8022cc6 <_kill_r+0x1e>
 8022cc4:	6023      	str	r3, [r4, #0]
 8022cc6:	bd70      	pop	{r4, r5, r6, pc}
 8022cc8:	200037a0 	.word	0x200037a0

08022ccc <_getpid_r>:
 8022ccc:	b510      	push	{r4, lr}
 8022cce:	f7ea ff1f 	bl	800db10 <_getpid>
 8022cd2:	bd10      	pop	{r4, pc}

08022cd4 <expf>:
 8022cd4:	b570      	push	{r4, r5, r6, lr}
 8022cd6:	1c04      	adds	r4, r0, #0
 8022cd8:	f000 f8e6 	bl	8022ea8 <__ieee754_expf>
 8022cdc:	1c05      	adds	r5, r0, #0
 8022cde:	1c20      	adds	r0, r4, #0
 8022ce0:	f000 f83c 	bl	8022d5c <finitef>
 8022ce4:	2800      	cmp	r0, #0
 8022ce6:	d00b      	beq.n	8022d00 <expf+0x2c>
 8022ce8:	490c      	ldr	r1, [pc, #48]	@ (8022d1c <expf+0x48>)
 8022cea:	1c20      	adds	r0, r4, #0
 8022cec:	f7dd fc34 	bl	8000558 <__aeabi_fcmpgt>
 8022cf0:	2800      	cmp	r0, #0
 8022cf2:	d007      	beq.n	8022d04 <expf+0x30>
 8022cf4:	f7fd faf0 	bl	80202d8 <__errno>
 8022cf8:	25ff      	movs	r5, #255	@ 0xff
 8022cfa:	2322      	movs	r3, #34	@ 0x22
 8022cfc:	05ed      	lsls	r5, r5, #23
 8022cfe:	6003      	str	r3, [r0, #0]
 8022d00:	1c28      	adds	r0, r5, #0
 8022d02:	bd70      	pop	{r4, r5, r6, pc}
 8022d04:	4906      	ldr	r1, [pc, #24]	@ (8022d20 <expf+0x4c>)
 8022d06:	1c20      	adds	r0, r4, #0
 8022d08:	f7dd fc12 	bl	8000530 <__aeabi_fcmplt>
 8022d0c:	2800      	cmp	r0, #0
 8022d0e:	d0f7      	beq.n	8022d00 <expf+0x2c>
 8022d10:	f7fd fae2 	bl	80202d8 <__errno>
 8022d14:	2322      	movs	r3, #34	@ 0x22
 8022d16:	2500      	movs	r5, #0
 8022d18:	6003      	str	r3, [r0, #0]
 8022d1a:	e7f1      	b.n	8022d00 <expf+0x2c>
 8022d1c:	42b17217 	.word	0x42b17217
 8022d20:	c2cff1b5 	.word	0xc2cff1b5

08022d24 <sqrtf>:
 8022d24:	b570      	push	{r4, r5, r6, lr}
 8022d26:	1c05      	adds	r5, r0, #0
 8022d28:	f000 f822 	bl	8022d70 <__ieee754_sqrtf>
 8022d2c:	1c29      	adds	r1, r5, #0
 8022d2e:	1c04      	adds	r4, r0, #0
 8022d30:	1c28      	adds	r0, r5, #0
 8022d32:	f7de fc17 	bl	8001564 <__aeabi_fcmpun>
 8022d36:	2800      	cmp	r0, #0
 8022d38:	d10e      	bne.n	8022d58 <sqrtf+0x34>
 8022d3a:	2100      	movs	r1, #0
 8022d3c:	1c28      	adds	r0, r5, #0
 8022d3e:	f7dd fbf7 	bl	8000530 <__aeabi_fcmplt>
 8022d42:	2800      	cmp	r0, #0
 8022d44:	d008      	beq.n	8022d58 <sqrtf+0x34>
 8022d46:	f7fd fac7 	bl	80202d8 <__errno>
 8022d4a:	2321      	movs	r3, #33	@ 0x21
 8022d4c:	2100      	movs	r1, #0
 8022d4e:	6003      	str	r3, [r0, #0]
 8022d50:	1c08      	adds	r0, r1, #0
 8022d52:	f7dd ff3f 	bl	8000bd4 <__aeabi_fdiv>
 8022d56:	1c04      	adds	r4, r0, #0
 8022d58:	1c20      	adds	r0, r4, #0
 8022d5a:	bd70      	pop	{r4, r5, r6, pc}

08022d5c <finitef>:
 8022d5c:	22ff      	movs	r2, #255	@ 0xff
 8022d5e:	0043      	lsls	r3, r0, #1
 8022d60:	085b      	lsrs	r3, r3, #1
 8022d62:	2001      	movs	r0, #1
 8022d64:	05d2      	lsls	r2, r2, #23
 8022d66:	4293      	cmp	r3, r2
 8022d68:	db00      	blt.n	8022d6c <finitef+0x10>
 8022d6a:	2000      	movs	r0, #0
 8022d6c:	4770      	bx	lr
	...

08022d70 <__ieee754_sqrtf>:
 8022d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d72:	0003      	movs	r3, r0
 8022d74:	0042      	lsls	r2, r0, #1
 8022d76:	1c04      	adds	r4, r0, #0
 8022d78:	20ff      	movs	r0, #255	@ 0xff
 8022d7a:	0852      	lsrs	r2, r2, #1
 8022d7c:	05c0      	lsls	r0, r0, #23
 8022d7e:	4282      	cmp	r2, r0
 8022d80:	d30a      	bcc.n	8022d98 <__ieee754_sqrtf+0x28>
 8022d82:	1c21      	adds	r1, r4, #0
 8022d84:	1c20      	adds	r0, r4, #0
 8022d86:	f7de f90b 	bl	8000fa0 <__aeabi_fmul>
 8022d8a:	1c01      	adds	r1, r0, #0
 8022d8c:	1c20      	adds	r0, r4, #0
 8022d8e:	f7dd fd97 	bl	80008c0 <__aeabi_fadd>
 8022d92:	1c04      	adds	r4, r0, #0
 8022d94:	1c20      	adds	r0, r4, #0
 8022d96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022d98:	2a00      	cmp	r2, #0
 8022d9a:	d0fb      	beq.n	8022d94 <__ieee754_sqrtf+0x24>
 8022d9c:	2c00      	cmp	r4, #0
 8022d9e:	da07      	bge.n	8022db0 <__ieee754_sqrtf+0x40>
 8022da0:	1c21      	adds	r1, r4, #0
 8022da2:	1c20      	adds	r0, r4, #0
 8022da4:	f7de fa3a 	bl	800121c <__aeabi_fsub>
 8022da8:	1c01      	adds	r1, r0, #0
 8022daa:	f7dd ff13 	bl	8000bd4 <__aeabi_fdiv>
 8022dae:	e7f0      	b.n	8022d92 <__ieee754_sqrtf+0x22>
 8022db0:	0022      	movs	r2, r4
 8022db2:	15e1      	asrs	r1, r4, #23
 8022db4:	4002      	ands	r2, r0
 8022db6:	4204      	tst	r4, r0
 8022db8:	d046      	beq.n	8022e48 <__ieee754_sqrtf+0xd8>
 8022dba:	2280      	movs	r2, #128	@ 0x80
 8022dbc:	000f      	movs	r7, r1
 8022dbe:	025b      	lsls	r3, r3, #9
 8022dc0:	0a5b      	lsrs	r3, r3, #9
 8022dc2:	0412      	lsls	r2, r2, #16
 8022dc4:	3f7f      	subs	r7, #127	@ 0x7f
 8022dc6:	4313      	orrs	r3, r2
 8022dc8:	07c9      	lsls	r1, r1, #31
 8022dca:	d400      	bmi.n	8022dce <__ieee754_sqrtf+0x5e>
 8022dcc:	005b      	lsls	r3, r3, #1
 8022dce:	2400      	movs	r4, #0
 8022dd0:	2180      	movs	r1, #128	@ 0x80
 8022dd2:	2019      	movs	r0, #25
 8022dd4:	0026      	movs	r6, r4
 8022dd6:	107f      	asrs	r7, r7, #1
 8022dd8:	005b      	lsls	r3, r3, #1
 8022dda:	0449      	lsls	r1, r1, #17
 8022ddc:	1875      	adds	r5, r6, r1
 8022dde:	001a      	movs	r2, r3
 8022de0:	429d      	cmp	r5, r3
 8022de2:	dc02      	bgt.n	8022dea <__ieee754_sqrtf+0x7a>
 8022de4:	186e      	adds	r6, r5, r1
 8022de6:	1b5a      	subs	r2, r3, r5
 8022de8:	1864      	adds	r4, r4, r1
 8022dea:	3801      	subs	r0, #1
 8022dec:	0053      	lsls	r3, r2, #1
 8022dee:	0849      	lsrs	r1, r1, #1
 8022df0:	2800      	cmp	r0, #0
 8022df2:	d1f3      	bne.n	8022ddc <__ieee754_sqrtf+0x6c>
 8022df4:	2a00      	cmp	r2, #0
 8022df6:	d019      	beq.n	8022e2c <__ieee754_sqrtf+0xbc>
 8022df8:	4d17      	ldr	r5, [pc, #92]	@ (8022e58 <__ieee754_sqrtf+0xe8>)
 8022dfa:	4e18      	ldr	r6, [pc, #96]	@ (8022e5c <__ieee754_sqrtf+0xec>)
 8022dfc:	6828      	ldr	r0, [r5, #0]
 8022dfe:	6831      	ldr	r1, [r6, #0]
 8022e00:	682b      	ldr	r3, [r5, #0]
 8022e02:	9301      	str	r3, [sp, #4]
 8022e04:	f7de fa0a 	bl	800121c <__aeabi_fsub>
 8022e08:	1c01      	adds	r1, r0, #0
 8022e0a:	9801      	ldr	r0, [sp, #4]
 8022e0c:	f7dd fb9a 	bl	8000544 <__aeabi_fcmple>
 8022e10:	2800      	cmp	r0, #0
 8022e12:	d00b      	beq.n	8022e2c <__ieee754_sqrtf+0xbc>
 8022e14:	6828      	ldr	r0, [r5, #0]
 8022e16:	6831      	ldr	r1, [r6, #0]
 8022e18:	f7dd fd52 	bl	80008c0 <__aeabi_fadd>
 8022e1c:	682d      	ldr	r5, [r5, #0]
 8022e1e:	1c01      	adds	r1, r0, #0
 8022e20:	1c28      	adds	r0, r5, #0
 8022e22:	f7dd fb85 	bl	8000530 <__aeabi_fcmplt>
 8022e26:	2800      	cmp	r0, #0
 8022e28:	d011      	beq.n	8022e4e <__ieee754_sqrtf+0xde>
 8022e2a:	3402      	adds	r4, #2
 8022e2c:	23fc      	movs	r3, #252	@ 0xfc
 8022e2e:	1064      	asrs	r4, r4, #1
 8022e30:	059b      	lsls	r3, r3, #22
 8022e32:	18e3      	adds	r3, r4, r3
 8022e34:	05fc      	lsls	r4, r7, #23
 8022e36:	18e4      	adds	r4, r4, r3
 8022e38:	e7ac      	b.n	8022d94 <__ieee754_sqrtf+0x24>
 8022e3a:	005b      	lsls	r3, r3, #1
 8022e3c:	3201      	adds	r2, #1
 8022e3e:	4203      	tst	r3, r0
 8022e40:	d0fb      	beq.n	8022e3a <__ieee754_sqrtf+0xca>
 8022e42:	3a01      	subs	r2, #1
 8022e44:	1a89      	subs	r1, r1, r2
 8022e46:	e7b8      	b.n	8022dba <__ieee754_sqrtf+0x4a>
 8022e48:	2080      	movs	r0, #128	@ 0x80
 8022e4a:	0400      	lsls	r0, r0, #16
 8022e4c:	e7f7      	b.n	8022e3e <__ieee754_sqrtf+0xce>
 8022e4e:	2301      	movs	r3, #1
 8022e50:	3401      	adds	r4, #1
 8022e52:	439c      	bics	r4, r3
 8022e54:	e7ea      	b.n	8022e2c <__ieee754_sqrtf+0xbc>
 8022e56:	46c0      	nop			@ (mov r8, r8)
 8022e58:	20000420 	.word	0x20000420
 8022e5c:	2000041c 	.word	0x2000041c

08022e60 <roundf>:
 8022e60:	0dc3      	lsrs	r3, r0, #23
 8022e62:	b2db      	uxtb	r3, r3
 8022e64:	3b7f      	subs	r3, #127	@ 0x7f
 8022e66:	0002      	movs	r2, r0
 8022e68:	b510      	push	{r4, lr}
 8022e6a:	2b16      	cmp	r3, #22
 8022e6c:	dc13      	bgt.n	8022e96 <roundf+0x36>
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	da07      	bge.n	8022e82 <roundf+0x22>
 8022e72:	0fc2      	lsrs	r2, r0, #31
 8022e74:	07d0      	lsls	r0, r2, #31
 8022e76:	3301      	adds	r3, #1
 8022e78:	d102      	bne.n	8022e80 <roundf+0x20>
 8022e7a:	23fe      	movs	r3, #254	@ 0xfe
 8022e7c:	059b      	lsls	r3, r3, #22
 8022e7e:	4318      	orrs	r0, r3
 8022e80:	bd10      	pop	{r4, pc}
 8022e82:	4908      	ldr	r1, [pc, #32]	@ (8022ea4 <roundf+0x44>)
 8022e84:	4119      	asrs	r1, r3
 8022e86:	4208      	tst	r0, r1
 8022e88:	d0fa      	beq.n	8022e80 <roundf+0x20>
 8022e8a:	2080      	movs	r0, #128	@ 0x80
 8022e8c:	03c0      	lsls	r0, r0, #15
 8022e8e:	4118      	asrs	r0, r3
 8022e90:	1880      	adds	r0, r0, r2
 8022e92:	4388      	bics	r0, r1
 8022e94:	e7f4      	b.n	8022e80 <roundf+0x20>
 8022e96:	2b80      	cmp	r3, #128	@ 0x80
 8022e98:	d1f2      	bne.n	8022e80 <roundf+0x20>
 8022e9a:	1c01      	adds	r1, r0, #0
 8022e9c:	f7dd fd10 	bl	80008c0 <__aeabi_fadd>
 8022ea0:	e7ee      	b.n	8022e80 <roundf+0x20>
 8022ea2:	46c0      	nop			@ (mov r8, r8)
 8022ea4:	007fffff 	.word	0x007fffff

08022ea8 <__ieee754_expf>:
 8022ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022eaa:	21ff      	movs	r1, #255	@ 0xff
 8022eac:	0043      	lsls	r3, r0, #1
 8022eae:	1c04      	adds	r4, r0, #0
 8022eb0:	085b      	lsrs	r3, r3, #1
 8022eb2:	05c9      	lsls	r1, r1, #23
 8022eb4:	428b      	cmp	r3, r1
 8022eb6:	d904      	bls.n	8022ec2 <__ieee754_expf+0x1a>
 8022eb8:	1c01      	adds	r1, r0, #0
 8022eba:	1c20      	adds	r0, r4, #0
 8022ebc:	f7dd fd00 	bl	80008c0 <__aeabi_fadd>
 8022ec0:	e00d      	b.n	8022ede <__ieee754_expf+0x36>
 8022ec2:	0fc6      	lsrs	r6, r0, #31
 8022ec4:	428b      	cmp	r3, r1
 8022ec6:	d104      	bne.n	8022ed2 <__ieee754_expf+0x2a>
 8022ec8:	2e00      	cmp	r6, #0
 8022eca:	d000      	beq.n	8022ece <__ieee754_expf+0x26>
 8022ecc:	e0ba      	b.n	8023044 <__ieee754_expf+0x19c>
 8022ece:	1c20      	adds	r0, r4, #0
 8022ed0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022ed2:	495d      	ldr	r1, [pc, #372]	@ (8023048 <__ieee754_expf+0x1a0>)
 8022ed4:	4288      	cmp	r0, r1
 8022ed6:	dd04      	ble.n	8022ee2 <__ieee754_expf+0x3a>
 8022ed8:	2000      	movs	r0, #0
 8022eda:	f000 f8f1 	bl	80230c0 <__math_oflowf>
 8022ede:	1c04      	adds	r4, r0, #0
 8022ee0:	e7f5      	b.n	8022ece <__ieee754_expf+0x26>
 8022ee2:	2800      	cmp	r0, #0
 8022ee4:	da06      	bge.n	8022ef4 <__ieee754_expf+0x4c>
 8022ee6:	4a59      	ldr	r2, [pc, #356]	@ (802304c <__ieee754_expf+0x1a4>)
 8022ee8:	4293      	cmp	r3, r2
 8022eea:	d903      	bls.n	8022ef4 <__ieee754_expf+0x4c>
 8022eec:	2000      	movs	r0, #0
 8022eee:	f000 f8e1 	bl	80230b4 <__math_uflowf>
 8022ef2:	e7f4      	b.n	8022ede <__ieee754_expf+0x36>
 8022ef4:	4a56      	ldr	r2, [pc, #344]	@ (8023050 <__ieee754_expf+0x1a8>)
 8022ef6:	4293      	cmp	r3, r2
 8022ef8:	d96e      	bls.n	8022fd8 <__ieee754_expf+0x130>
 8022efa:	4a56      	ldr	r2, [pc, #344]	@ (8023054 <__ieee754_expf+0x1ac>)
 8022efc:	00b5      	lsls	r5, r6, #2
 8022efe:	4293      	cmp	r3, r2
 8022f00:	d84e      	bhi.n	8022fa0 <__ieee754_expf+0xf8>
 8022f02:	4b55      	ldr	r3, [pc, #340]	@ (8023058 <__ieee754_expf+0x1b0>)
 8022f04:	1c20      	adds	r0, r4, #0
 8022f06:	5959      	ldr	r1, [r3, r5]
 8022f08:	f7de f988 	bl	800121c <__aeabi_fsub>
 8022f0c:	4b53      	ldr	r3, [pc, #332]	@ (802305c <__ieee754_expf+0x1b4>)
 8022f0e:	1c07      	adds	r7, r0, #0
 8022f10:	595b      	ldr	r3, [r3, r5]
 8022f12:	2501      	movs	r5, #1
 8022f14:	1bad      	subs	r5, r5, r6
 8022f16:	9300      	str	r3, [sp, #0]
 8022f18:	1bad      	subs	r5, r5, r6
 8022f1a:	9900      	ldr	r1, [sp, #0]
 8022f1c:	1c38      	adds	r0, r7, #0
 8022f1e:	f7de f97d 	bl	800121c <__aeabi_fsub>
 8022f22:	1c04      	adds	r4, r0, #0
 8022f24:	1c21      	adds	r1, r4, #0
 8022f26:	1c20      	adds	r0, r4, #0
 8022f28:	f7de f83a 	bl	8000fa0 <__aeabi_fmul>
 8022f2c:	494c      	ldr	r1, [pc, #304]	@ (8023060 <__ieee754_expf+0x1b8>)
 8022f2e:	1c06      	adds	r6, r0, #0
 8022f30:	f7de f836 	bl	8000fa0 <__aeabi_fmul>
 8022f34:	494b      	ldr	r1, [pc, #300]	@ (8023064 <__ieee754_expf+0x1bc>)
 8022f36:	f7de f971 	bl	800121c <__aeabi_fsub>
 8022f3a:	1c31      	adds	r1, r6, #0
 8022f3c:	f7de f830 	bl	8000fa0 <__aeabi_fmul>
 8022f40:	4949      	ldr	r1, [pc, #292]	@ (8023068 <__ieee754_expf+0x1c0>)
 8022f42:	f7dd fcbd 	bl	80008c0 <__aeabi_fadd>
 8022f46:	1c31      	adds	r1, r6, #0
 8022f48:	f7de f82a 	bl	8000fa0 <__aeabi_fmul>
 8022f4c:	4947      	ldr	r1, [pc, #284]	@ (802306c <__ieee754_expf+0x1c4>)
 8022f4e:	f7de f965 	bl	800121c <__aeabi_fsub>
 8022f52:	1c31      	adds	r1, r6, #0
 8022f54:	f7de f824 	bl	8000fa0 <__aeabi_fmul>
 8022f58:	4945      	ldr	r1, [pc, #276]	@ (8023070 <__ieee754_expf+0x1c8>)
 8022f5a:	f7dd fcb1 	bl	80008c0 <__aeabi_fadd>
 8022f5e:	1c31      	adds	r1, r6, #0
 8022f60:	f7de f81e 	bl	8000fa0 <__aeabi_fmul>
 8022f64:	1c01      	adds	r1, r0, #0
 8022f66:	1c20      	adds	r0, r4, #0
 8022f68:	f7de f958 	bl	800121c <__aeabi_fsub>
 8022f6c:	1c01      	adds	r1, r0, #0
 8022f6e:	1c06      	adds	r6, r0, #0
 8022f70:	1c20      	adds	r0, r4, #0
 8022f72:	f7de f815 	bl	8000fa0 <__aeabi_fmul>
 8022f76:	9001      	str	r0, [sp, #4]
 8022f78:	2d00      	cmp	r5, #0
 8022f7a:	d140      	bne.n	8022ffe <__ieee754_expf+0x156>
 8022f7c:	2180      	movs	r1, #128	@ 0x80
 8022f7e:	1c30      	adds	r0, r6, #0
 8022f80:	05c9      	lsls	r1, r1, #23
 8022f82:	f7de f94b 	bl	800121c <__aeabi_fsub>
 8022f86:	1c01      	adds	r1, r0, #0
 8022f88:	9801      	ldr	r0, [sp, #4]
 8022f8a:	f7dd fe23 	bl	8000bd4 <__aeabi_fdiv>
 8022f8e:	1c21      	adds	r1, r4, #0
 8022f90:	f7de f944 	bl	800121c <__aeabi_fsub>
 8022f94:	1c01      	adds	r1, r0, #0
 8022f96:	20fe      	movs	r0, #254	@ 0xfe
 8022f98:	0580      	lsls	r0, r0, #22
 8022f9a:	f7de f93f 	bl	800121c <__aeabi_fsub>
 8022f9e:	e79e      	b.n	8022ede <__ieee754_expf+0x36>
 8022fa0:	4934      	ldr	r1, [pc, #208]	@ (8023074 <__ieee754_expf+0x1cc>)
 8022fa2:	1c20      	adds	r0, r4, #0
 8022fa4:	f7dd fffc 	bl	8000fa0 <__aeabi_fmul>
 8022fa8:	4b33      	ldr	r3, [pc, #204]	@ (8023078 <__ieee754_expf+0x1d0>)
 8022faa:	5959      	ldr	r1, [r3, r5]
 8022fac:	f7dd fc88 	bl	80008c0 <__aeabi_fadd>
 8022fb0:	f7de faee 	bl	8001590 <__aeabi_f2iz>
 8022fb4:	0005      	movs	r5, r0
 8022fb6:	f7de fb0b 	bl	80015d0 <__aeabi_i2f>
 8022fba:	4930      	ldr	r1, [pc, #192]	@ (802307c <__ieee754_expf+0x1d4>)
 8022fbc:	1c06      	adds	r6, r0, #0
 8022fbe:	f7dd ffef 	bl	8000fa0 <__aeabi_fmul>
 8022fc2:	1c01      	adds	r1, r0, #0
 8022fc4:	1c20      	adds	r0, r4, #0
 8022fc6:	f7de f929 	bl	800121c <__aeabi_fsub>
 8022fca:	492d      	ldr	r1, [pc, #180]	@ (8023080 <__ieee754_expf+0x1d8>)
 8022fcc:	1c07      	adds	r7, r0, #0
 8022fce:	1c30      	adds	r0, r6, #0
 8022fd0:	f7dd ffe6 	bl	8000fa0 <__aeabi_fmul>
 8022fd4:	9000      	str	r0, [sp, #0]
 8022fd6:	e7a0      	b.n	8022f1a <__ieee754_expf+0x72>
 8022fd8:	22d0      	movs	r2, #208	@ 0xd0
 8022fda:	0592      	lsls	r2, r2, #22
 8022fdc:	4293      	cmp	r3, r2
 8022fde:	d20c      	bcs.n	8022ffa <__ieee754_expf+0x152>
 8022fe0:	4928      	ldr	r1, [pc, #160]	@ (8023084 <__ieee754_expf+0x1dc>)
 8022fe2:	1c20      	adds	r0, r4, #0
 8022fe4:	f7dd fc6c 	bl	80008c0 <__aeabi_fadd>
 8022fe8:	21fe      	movs	r1, #254	@ 0xfe
 8022fea:	0589      	lsls	r1, r1, #22
 8022fec:	f7dd fab4 	bl	8000558 <__aeabi_fcmpgt>
 8022ff0:	1e05      	subs	r5, r0, #0
 8022ff2:	d097      	beq.n	8022f24 <__ieee754_expf+0x7c>
 8022ff4:	21fe      	movs	r1, #254	@ 0xfe
 8022ff6:	0589      	lsls	r1, r1, #22
 8022ff8:	e75f      	b.n	8022eba <__ieee754_expf+0x12>
 8022ffa:	2500      	movs	r5, #0
 8022ffc:	e792      	b.n	8022f24 <__ieee754_expf+0x7c>
 8022ffe:	2080      	movs	r0, #128	@ 0x80
 8023000:	1c31      	adds	r1, r6, #0
 8023002:	05c0      	lsls	r0, r0, #23
 8023004:	f7de f90a 	bl	800121c <__aeabi_fsub>
 8023008:	1c01      	adds	r1, r0, #0
 802300a:	9801      	ldr	r0, [sp, #4]
 802300c:	f7dd fde2 	bl	8000bd4 <__aeabi_fdiv>
 8023010:	1c01      	adds	r1, r0, #0
 8023012:	9800      	ldr	r0, [sp, #0]
 8023014:	f7de f902 	bl	800121c <__aeabi_fsub>
 8023018:	1c39      	adds	r1, r7, #0
 802301a:	f7de f8ff 	bl	800121c <__aeabi_fsub>
 802301e:	1c01      	adds	r1, r0, #0
 8023020:	20fe      	movs	r0, #254	@ 0xfe
 8023022:	0580      	lsls	r0, r0, #22
 8023024:	f7de f8fa 	bl	800121c <__aeabi_fsub>
 8023028:	002b      	movs	r3, r5
 802302a:	337d      	adds	r3, #125	@ 0x7d
 802302c:	db02      	blt.n	8023034 <__ieee754_expf+0x18c>
 802302e:	05ec      	lsls	r4, r5, #23
 8023030:	1824      	adds	r4, r4, r0
 8023032:	e74c      	b.n	8022ece <__ieee754_expf+0x26>
 8023034:	21d8      	movs	r1, #216	@ 0xd8
 8023036:	3564      	adds	r5, #100	@ 0x64
 8023038:	05ed      	lsls	r5, r5, #23
 802303a:	1828      	adds	r0, r5, r0
 802303c:	0509      	lsls	r1, r1, #20
 802303e:	f7dd ffaf 	bl	8000fa0 <__aeabi_fmul>
 8023042:	e74c      	b.n	8022ede <__ieee754_expf+0x36>
 8023044:	2400      	movs	r4, #0
 8023046:	e742      	b.n	8022ece <__ieee754_expf+0x26>
 8023048:	42b17217 	.word	0x42b17217
 802304c:	42cff1b5 	.word	0x42cff1b5
 8023050:	3eb17218 	.word	0x3eb17218
 8023054:	3f851591 	.word	0x3f851591
 8023058:	08025fa8 	.word	0x08025fa8
 802305c:	08025fa0 	.word	0x08025fa0
 8023060:	3331bb4c 	.word	0x3331bb4c
 8023064:	35ddea0e 	.word	0x35ddea0e
 8023068:	388ab355 	.word	0x388ab355
 802306c:	3b360b61 	.word	0x3b360b61
 8023070:	3e2aaaab 	.word	0x3e2aaaab
 8023074:	3fb8aa3b 	.word	0x3fb8aa3b
 8023078:	08025fb0 	.word	0x08025fb0
 802307c:	3f317180 	.word	0x3f317180
 8023080:	3717f7d1 	.word	0x3717f7d1
 8023084:	7149f2ca 	.word	0x7149f2ca

08023088 <with_errnof>:
 8023088:	b570      	push	{r4, r5, r6, lr}
 802308a:	000d      	movs	r5, r1
 802308c:	1c04      	adds	r4, r0, #0
 802308e:	f7fd f923 	bl	80202d8 <__errno>
 8023092:	6005      	str	r5, [r0, #0]
 8023094:	1c20      	adds	r0, r4, #0
 8023096:	bd70      	pop	{r4, r5, r6, pc}

08023098 <xflowf>:
 8023098:	b510      	push	{r4, lr}
 802309a:	1c0b      	adds	r3, r1, #0
 802309c:	2800      	cmp	r0, #0
 802309e:	d002      	beq.n	80230a6 <xflowf+0xe>
 80230a0:	2380      	movs	r3, #128	@ 0x80
 80230a2:	061b      	lsls	r3, r3, #24
 80230a4:	18cb      	adds	r3, r1, r3
 80230a6:	1c18      	adds	r0, r3, #0
 80230a8:	f7dd ff7a 	bl	8000fa0 <__aeabi_fmul>
 80230ac:	2122      	movs	r1, #34	@ 0x22
 80230ae:	f7ff ffeb 	bl	8023088 <with_errnof>
 80230b2:	bd10      	pop	{r4, pc}

080230b4 <__math_uflowf>:
 80230b4:	2180      	movs	r1, #128	@ 0x80
 80230b6:	b510      	push	{r4, lr}
 80230b8:	0549      	lsls	r1, r1, #21
 80230ba:	f7ff ffed 	bl	8023098 <xflowf>
 80230be:	bd10      	pop	{r4, pc}

080230c0 <__math_oflowf>:
 80230c0:	21e0      	movs	r1, #224	@ 0xe0
 80230c2:	b510      	push	{r4, lr}
 80230c4:	05c9      	lsls	r1, r1, #23
 80230c6:	f7ff ffe7 	bl	8023098 <xflowf>
 80230ca:	bd10      	pop	{r4, pc}

080230cc <_init>:
 80230cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230ce:	46c0      	nop			@ (mov r8, r8)
 80230d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80230d2:	bc08      	pop	{r3}
 80230d4:	469e      	mov	lr, r3
 80230d6:	4770      	bx	lr

080230d8 <_fini>:
 80230d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230da:	46c0      	nop			@ (mov r8, r8)
 80230dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80230de:	bc08      	pop	{r3}
 80230e0:	469e      	mov	lr, r3
 80230e2:	4770      	bx	lr
